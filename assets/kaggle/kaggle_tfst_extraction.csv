tfsts_classes
"class pokemonname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Pokemon'
        self.valid_values = 'Name should be a string that is the name of the Pokemon'
        self.format = 'Pokemon name should start with a capital letter'
        self.examples = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Charmander', 'Pikachu']

    def cast(self, val):
        return str(val).title()

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemonstat(NumericSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stat should be an integer'
        self.examples = [318, 405, 525, 625, 309]

    def cast(self, val):
        return int(val)

class pokemongeneration(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Generation of a Pokemon'
        self.valid_values = 'Generation should be an integer from 1 to 6'
        self.format = 'Generation should be an integer'
        self.examples = [1, 2, 3, 4, 5, 6]

    def cast(self, val):
        if int(val) in range(1, 7):
            return int(val)
        else:
            raise Exception('Invalid Generation')

class pokemonlegendary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            raise Exception('Invalid Boolean Value')


MAPPING = {'name': pokemonname, 'total': pokemonstat, 'hp': pokemonstat, 'attack': pokemonstat, 'defense': pokemonstat, 'spatk': pokemonstat, 'spdef': pokemonstat, 'speed': pokemonstat, 'generation': pokemongeneration, 'legendary': pokemonlegendary}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The index ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class hoteltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of the hotel'
        self.valid_values = ""The hotel should be either a 'City Hotel' or a 'Resort Hotel'""
        self.format = 'The hotel type should be a string'
        self.examples = ['City Hotel', 'Resort Hotel']

    def cast(self, val):
        return str(val).strip()

class bookingcancellation(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['0', '1']

    def cast(self, val):
        return str(int(val))

class bookingcancellation(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['0', '1']

    def cast(self, val):
        return str(int(val))

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the booking'
        self.valid_range = [2000, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four-digit integer'
        self.examples = [2015, 2016, 2017]

    def cast(self, val):
        year = int(val)
        if year < 2000 or year > datetime.now().year:
            raise ValueError('Year is out of range')
        return year

class month(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Month of the booking'
        self.valid_values = 'Month should be one of the 12 months of the year'
        self.format = 'Month should be a string'
        self.examples = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

    def cast(self, val):
        month = str(val).strip()
        if month not in self.examples:
            raise ValueError('Month is invalid')
        return month

class guests(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of guests'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Guests should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class guests(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of guests'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Guests should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class guests(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of guests'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Guests should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class guests(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of guests'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Guests should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class mealtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of the meal'
        self.valid_values = ""The meal should be either 'BB', 'HB', 'SC', 'Undefined', or 'FB'""
        self.format = 'The meal type should be a string'
        self.examples = ['BB', 'HB', 'SC', 'Undefined', 'FB']

    def cast(self, val):
        return str(val).strip()

class mealtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of the meal'
        self.valid_values = ""The meal should be either 'BB', 'HB', 'SC', 'Undefined', or 'FB'""
        self.format = 'The meal type should be a string'
        self.examples = ['BB', 'HB', 'SC', 'Undefined', 'FB']

    def cast(self, val):
        return str(val).strip()

class mealtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of the meal'
        self.valid_values = ""The meal should be either 'BB', 'HB', 'SC', 'Undefined', or 'FB'""
        self.format = 'The meal type should be a string'
        self.examples = ['BB', 'HB', 'SC', 'Undefined', 'FB']

    def cast(self, val):
        return str(val).strip()

class countrycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country code of the booking'
        self.valid_values = 'Country code should be a valid ISO 3166-1 alpha-3 country code'
        self.format = 'Country code should be a string of three uppercase letters'
        self.examples = ['USA', 'GBR', 'BRA', 'CAN', 'AUS']

    def cast(self, val):
        code = str(val).strip()
        if pycountry.countries.get(alpha_3=code) is None:
            raise ValueError('Country code is invalid')
        return code

class marketsegmenttype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The market segment of the booking'
        self.valid_values = 'Market segment should be a string'
        self.format = 'Market segment should be a string'
        self.examples = ['Online TA', 'Offline TA/TO', 'Groups', 'Direct', 'Corporate']

    def cast(self, val):
        return str(val).strip()

class marketsegmenttype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The market segment of the booking'
        self.valid_values = 'Market segment should be a string'
        self.format = 'Market segment should be a string'
        self.examples = ['Online TA', 'Offline TA/TO', 'Groups', 'Direct', 'Corporate']

    def cast(self, val):
        return str(val).strip()

class roomtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The type of the room'
        self.valid_values = 'Room type should be a string'
        self.format = 'Room type should be a string'
        self.examples = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']

    def cast(self, val):
        return str(val).strip()

class roomtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The type of the room'
        self.valid_values = 'Room type should be a string'
        self.format = 'Room type should be a string'
        self.examples = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']

    def cast(self, val):
        return str(val).strip()

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in EUR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.examples = [0.0, 75.0, 98.0, 123.0, 5400.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': indexidentifier, 'hotel': hoteltype, 'iscanceled': bookingcancellation, 'isrepeatedguest': bookingcancellation, 'leadtime': days, 'arrivaldateweeknumber': days, 'arrivaldatedayofmonth': days, 'staysinweekendnights': days, 'staysinweeknights': days, 'previouscancellations': days, 'previousbookingsnotcanceled': days, 'bookingchanges': days, 'daysinwaitinglist': days, 'arrivaldateyear': year, 'arrivaldatemonth': month, 'adults': guests, 'children': guests, 'babies': guests, 'requiredcarparkingspaces': guests, 'meal': mealtype, 'deposittype': mealtype, 'customertype': mealtype, 'country': countrycode, 'marketsegment': marketsegmenttype, 'distributionchannel': marketsegmenttype, 'reservedroomtype': roomtype, 'assignedroomtype': roomtype, 'adr': price}"
"class patientidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Patient ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient ID should be an integer value starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class patientage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the Patient'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a positive integer'
        self.examples = [20, 30, 40, 50, 60]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class enzymemarkers(NumericSemanticType):

    def __init__(self):
        self.description = 'Enzyme Markers in the blood'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Enzyme marker levels should be a positive integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val)

class ejectionpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Ejection Percentage'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Ejection percentage should be an integer between 0 and 100'
        self.examples = [20, 30, 40, 50, 60]

    def cast(self, val):
        return int(val)

class plateletcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Platelet count in the blood'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Platelet count should be a positive floating point number'
        self.examples = [100000.0, 200000.0, 300000.0, 400000.0, 500000.0]

    def cast(self, val):
        return float(val)

class serumlevels(NumericSemanticType):

    def __init__(self):
        self.description = 'Serum levels in the blood'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum levels should be a positive floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def cast(self, val):
        return float(val)

class serumlevels(NumericSemanticType):

    def __init__(self):
        self.description = 'Serum levels in the blood'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum levels should be a positive floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def cast(self, val):
        return float(val)

class followuptime(NumericSemanticType):

    def __init__(self):
        self.description = 'Follow-up Time'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Follow-up time should be a positive integer'
        self.examples = [5, 10, 15, 20, 25]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': patientidentifier, 'age': patientage, 'anaemia': binaryflag, 'diabetes': binaryflag, 'highbloodpressure': binaryflag, 'sex': binaryflag, 'smoking': binaryflag, 'deathevent': binaryflag, 'creatininephosphokinase': enzymemarkers, 'ejectionfraction': ejectionpercent, 'platelets': plateletcount, 'serumcreatinine': serumlevels, 'serumsodium': serumlevels, 'time': followuptime}"
"class recordidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Record identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Records should be a positive integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Record id cannot be negative')
        return val

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when the data was collected'
        self.valid_values = 'Date should be in the YYYY-MM-DD format'
        self.format = 'Date in YYYY-MM-DD format'
        self.examples = ['2020-04-17', '2020-04-24', '2020-04-27', '2020-05-01', '2020-05-16']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class indianstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State in India'
        self.valid_values = 'State should be one of the 28 states and 8 Union territories of India'
        self.format = 'State names should be in title case'
        self.examples = ['Kerala', 'West Bengal', 'Haryana', 'Madhya Pradesh', 'Odisha']

    def cast(self, val):
        val = str(val).title()
        if val not in CountryInfo('India').provinces():
            raise Exception('Invalid state in India')
        return val

class testcount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total number of tests conducted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of tests should be a positive integer value'
        self.unit = 'Count of tests'
        self.examples = [1403, 2679, 2848, 3754, 6677]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Test count cannot be negative')
        return val

class testresultcount(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Number of positive or negative test results'
        self.valid_values = 'Number of test results should be a positive integer value or NaN'
        self.format = 'Test results in integer form or NaN'
        self.examples = ['1210', 'NaN', 'NaN', 'NaN', 'NaN']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            val = int(val)
            if val < 0:
                raise Exception('Test result count cannot be negative')
            return val

class testresultcount(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Number of positive or negative test results'
        self.valid_values = 'Number of test results should be a positive integer value or NaN'
        self.format = 'Test results in integer form or NaN'
        self.examples = ['1210', 'NaN', 'NaN', 'NaN', 'NaN']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            val = int(val)
            if val < 0:
                raise Exception('Test result count cannot be negative')
            return val


MAPPING = {'unnamed0': recordidentifier, 'date': date, 'state': indianstate, 'totalsamples': testcount, 'negative': testresultcount, 'positive': testresultcount}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid ID')

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid ID')

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_values = ""The date and time must be in the format 'YYYY-MM-DD' for date and 'H:MM AM/PM' for time""
        self.format = 'The date and time should be stored as strings'
        self.examples = ['2020-01-30', '2020-01-31', '2020-02-01', '2020-02-02', '2020-02-03', '8:00 AM', '5:00 PM', '6:00 PM', '7:30 PM', '9:30 PM']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d') if '-' in val else datetime.strptime(val, '%I:%M %p').strftime('%I:%M %p')
        except:
            raise Exception('Invalid date or time format')

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_values = ""The date and time must be in the format 'YYYY-MM-DD' for date and 'H:MM AM/PM' for time""
        self.format = 'The date and time should be stored as strings'
        self.examples = ['2020-01-30', '2020-01-31', '2020-02-01', '2020-02-02', '2020-02-03', '8:00 AM', '5:00 PM', '6:00 PM', '7:30 PM', '9:30 PM']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d') if '-' in val else datetime.strptime(val, '%I:%M %p').strftime('%I:%M %p')
        except:
            raise Exception('Invalid date or time format')

class stateunionterritory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Indian State or Union Territory'
        self.valid_values = 'State or Union Territory names should be present in the list of Indian States and Union Territories'
        self.format = 'The name of the State or Union Territory should be capitalized'
        self.examples = ['Kerala', 'Delhi', 'Rajasthan', 'Uttar Pradesh', 'Haryana']

    def cast(self, val):
        return str(val).title()

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of confirmed cases')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of confirmed cases')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of confirmed cases')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of confirmed cases')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of confirmed cases')


MAPPING = {'unnamed0': identifier, 'sno': identifier, 'date': datetimeclass, 'time': datetimeclass, 'stateunionterritory': stateunionterritory, 'confirmedindiannational': confirmedcases, 'confirmedforeignnational': confirmedcases, 'cured': confirmedcases, 'deaths': confirmedcases, 'confirmed': confirmedcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a data point in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date on which data was collected'
        self.valid_values = ""Dates should be in the form 'dd/mm/yyyy'""
        self.format = 'Dates should be stored as strings'
        self.examples = ['16/01/2021', '17/01/2021', '18/01/2021', '19/01/2021', '20/01/2021']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y').date()

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country or region'
        self.valid_values = 'Names should match with the name of a country or region in the pycountry database'
        self.format = 'Names should be stored as strings'
        self.examples = ['Delhi', 'Ladakh', 'Dadra and Nagar Haveli and Daman and Diu', 'Andhra Pradesh', 'Arunachal Pradesh']

    def cast(self, val):
        if pycountry.subdivisions.get(name=val) or pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country or region name')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccinecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class gender(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered to a specific gender'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class gender(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered to a specific gender'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class gender(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered to a specific gender'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccine(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of doses of a specific vaccine administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [579.0, 635.0, 1299.0, 3017.0, 3946.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccine(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of doses of a specific vaccine administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [579.0, 635.0, 1299.0, 3017.0, 3946.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class vaccine(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of doses of a specific vaccine administered'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [579.0, 635.0, 1299.0, 3017.0, 3946.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of individuals in a specific age group vaccinated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be represented as a floating point number'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')


MAPPING = {'unnamed0': index, 'updatedon': date, 'state': region, 'totaldosesadministered': vaccinecount, 'sessions': vaccinecount, 'sites': vaccinecount, 'firstdoseadministered': vaccinecount, 'seconddoseadministered': vaccinecount, 'aefi': vaccinecount, 'maledosesadministered': gender, 'femaledosesadministered': gender, 'transgenderdosesadministered': gender, 'covaxindosesadministered': vaccine, 'covishielddosesadministered': vaccine, 'sputnikvdosesadministered': vaccine, '1844yearsdosesadministered': agegroup, '4560yearsdosesadministered': agegroup, '60yearsdosesadministered': agegroup, '1844yearsindividualsvaccinated': agegroup, '4560yearsindividualsvaccinated': agegroup, '60yearsindividualsvaccinated': agegroup, 'maleindividualsvaccinated': agegroup, 'femaleindividualsvaccinated': agegroup, 'transgenderindividualsvaccinated': agegroup, 'totalindividualsvaccinated': agegroup}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the football match'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Year should be a 4-digit number, month and day should be 2-digit numbers'
        self.examples = ['2011-10-11', '2008-10-11', '2008-09-06', '2004-09-08', '2004-10-13']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be recognized by pycountry'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Brazil', 'Argentina', 'Germany', 'Mexico', 'Chile']

    def cast(self, val):
        try:
            country = pycountry.countries.search_fuzzy(val)[0].name
            return country
        except Exception:
            raise ValueError('Invalid country name')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be recognized by pycountry'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Brazil', 'Argentina', 'Germany', 'Mexico', 'Chile']

    def cast(self, val):
        try:
            country = pycountry.countries.search_fuzzy(val)[0].name
            return country
        except Exception:
            raise ValueError('Invalid country name')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be recognized by pycountry'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Brazil', 'Argentina', 'Germany', 'Mexico', 'Chile']

    def cast(self, val):
        try:
            country = pycountry.countries.search_fuzzy(val)[0].name
            return country
        except Exception:
            raise ValueError('Invalid country name')

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'Robert Lewandowski', 'Lionel Messi', 'Ali Daei', 'Miroslav Klose']

    def cast(self, val):
        return str(val).title()

class timeofgoal(NumericSemanticType):

    def __init__(self):
        self.description = 'Time in minutes at which a goal was scored'
        self.valid_range = [1, 122]
        self.dtype = int
        self.format = 'Time should be an integer representing the minute of the match'
        self.examples = [44, 55, 70, 75, 2]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class goaltype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class goaltype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': index, 'date': date, 'hometeam': countryname, 'awayteam': countryname, 'team': countryname, 'scorer': personname, 'minute': timeofgoal, 'owngoal': goaltype, 'penalty': goaltype}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Match ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class matchdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the Match'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['1872-11-30', '1873-03-08', '1874-03-07', '1875-03-06', '1876-03-04']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Football Team'
        self.valid_values = 'Name should be a string representing the name of the football team'
        self.format = 'Each word in the name should start with a capital letter'
        self.examples = ['Brazil', 'Argentina', 'Mexico', 'Germany', 'England']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Football Team'
        self.valid_values = 'Name should be a string representing the name of the football team'
        self.format = 'Each word in the name should start with a capital letter'
        self.examples = ['Brazil', 'Argentina', 'Mexico', 'Germany', 'England']

    def cast(self, val):
        return str(val).title()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of the team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Score should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of the team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Score should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class tournamenttype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of the Tournament'
        self.valid_values = 'Tournament type should be a string representing the type of the tournament'
        self.format = 'Each word in the type should start with a capital letter'
        self.examples = ['Friendly', 'FIFA World Cup qualification', 'UEFA Euro qualification', 'African Cup of Nations qualification', 'FIFA World Cup']

    def cast(self, val):
        return str(val).title()

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the City'
        self.valid_values = 'Name should be a string representing the name of the city'
        self.format = 'Each word in the city name should start with a capital letter'
        self.examples = ['Kuala Lumpur', 'Doha', 'Bangkok', 'London', 'Budapest']

    def cast(self, val):
        return str(val).title()

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Country'
        self.valid_values = 'Name should be a string representing the name of the country'
        self.format = 'Each word in the country name should start with a capital letter'
        self.examples = ['United States', 'France', 'Malaysia', 'England', 'Sweden']

    def cast(self, val):
        return pycountry.countries.lookup(str(val).title()).name

class matchneutral(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': matchidentifier, 'date': matchdate, 'hometeam': teamname, 'awayteam': teamname, 'homescore': score, 'awayscore': score, 'tournament': tournamenttype, 'city': cityname, 'country': countryname, 'neutral': matchneutral}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index (Row Number)'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the football match'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1967-08-22', '1971-11-14', '1972-05-07', '1972-05-17', '1972-05-19']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches a country name in pycountry'
        self.format = 'Country name should be capitalized'
        self.examples = ['Zambia', 'South Africa', 'Thailand', 'South Korea', 'Argentina']

    def cast(self, val):
        country = pycountry.countries.get(name=val.title())
        if country is None:
            raise ValueError(f'Invalid country name: {val}')
        return country.name

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches a country name in pycountry'
        self.format = 'Country name should be capitalized'
        self.examples = ['Zambia', 'South Africa', 'Thailand', 'South Korea', 'Argentina']

    def cast(self, val):
        country = pycountry.countries.get(name=val.title())
        if country is None:
            raise ValueError(f'Invalid country name: {val}')
        return country.name

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches a country name in pycountry'
        self.format = 'Country name should be capitalized'
        self.examples = ['Zambia', 'South Africa', 'Thailand', 'South Korea', 'Argentina']

    def cast(self, val):
        country = pycountry.countries.get(name=val.title())
        if country is None:
            raise ValueError(f'Invalid country name: {val}')
        return country.name


MAPPING = {'unnamed0': index, 'date': date, 'hometeam': country, 'awayteam': country, 'winner': country}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be positive integers'
        self.examples = [100, 500, 1000, 8000, 60000]

    def cast(self, val):
        return int(val) if val >= 0 else 'Invalid ID'

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be positive integers'
        self.examples = [100, 500, 1000, 8000, 60000]

    def cast(self, val):
        return int(val) if val >= 0 else 'Invalid ID'

class province(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Provinces'
        self.valid_values = 'A province should be a string representing a region within a country'
        self.format = 'The name should be capitalized and without special characters'
        self.examples = ['Seoul', 'Gyeonggi-do', 'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Daegu']

    def cast(self, val):
        return val.title().replace('-', ' ')

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City'
        self.valid_values = 'City should be a string'
        self.format = 'City should be a string in title case'
        self.examples = ['Bengaluru', 'Gurgaon', 'Bengaluru', 'New Delhi', 'Mumbai']

    def cast(self, val):
        return str(val).title()

class booleangroup(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            return 'Invalid value for boolean'

class infectioncase(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Infection cases'
        self.valid_values = 'Infection case should be a string representing a specific infection case'
        self.format = 'The name should be capitalized and without special characters'
        self.examples = ['Itaewon Clubs', 'Richway', 'Guro-gu Call Center', 'Yangcheon Table Tennis Club', 'Day Care Center']

    def cast(self, val):
        return val.title().replace('-', ' ')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a non-negative integer'
        self.examples = [0, 10, 50, 200, 1000]

    def cast(self, val):
        return int(val) if val >= 0 else 'Invalid number of cases'

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [-90.0, -45.0, 0.0, 45.0, 90.0]

    def cast(self, val):
        if val >= -90 and val <= 90:
            return float(val)
        else:
            return 'Invalid latitude'

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-180.0, -90.0, 0.0, 90.0, 180.0]

    def cast(self, val):
        if val >= -180 and val <= 180:
            return float(val)
        else:
            return 'Invalid longitude'


MAPPING = {'unnamed0': identifier, 'caseid': identifier, 'province': province, 'city': city, 'group': booleangroup, 'infectioncase': infectioncase, 'confirmed': confirmedcases, 'latitude': latitude, 'longitude': longitude}"
"class patientidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a patient'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient ID is a numerical value with no decimal places'
        self.examples = [1000000001, 1000000002, 1000000003, 1000000004, 1000000005]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of the patient'
        self.valid_values = ""Values should be one of 'male' or 'female'""
        self.format = 'Gender should be represented as strings'
        self.examples = ['male', 'female']

    def cast(self, val):
        return str(val).lower()

class agegroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age group of the patient'
        self.valid_values = ""Values should be in the form '20s', '30s', etc.""
        self.format = 'Age group should be represented as strings'
        self.examples = ['20s', '30s', '40s', '50s', '60s']

    def cast(self, val):
        return str(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of the patient'
        self.valid_values = 'Values should be a valid country name'
        self.format = 'Country name should be represented as strings'
        self.examples = ['Korea', 'China', 'United States', 'Bangladesh']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date in the format 'YYYY-MM-DD'""
        self.valid_values = 'Values should be a valid date'
        self.format = 'Dates should be represented as strings'
        self.examples = ['2020-02-05', '2020-03-02', '2020-02-19', '2020-02-15', '2020-02-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date in the format 'YYYY-MM-DD'""
        self.valid_values = 'Values should be a valid date'
        self.format = 'Dates should be represented as strings'
        self.examples = ['2020-02-05', '2020-03-02', '2020-02-19', '2020-02-15', '2020-02-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date in the format 'YYYY-MM-DD'""
        self.valid_values = 'Values should be a valid date'
        self.format = 'Dates should be represented as strings'
        self.examples = ['2020-02-05', '2020-03-02', '2020-02-19', '2020-02-15', '2020-02-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date in the format 'YYYY-MM-DD'""
        self.valid_values = 'Values should be a valid date'
        self.format = 'Dates should be represented as strings'
        self.examples = ['2020-02-05', '2020-03-02', '2020-02-19', '2020-02-15', '2020-02-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class patientstate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Current state of the patient'
        self.valid_values = ""Values should be one of 'released', 'isolated', 'deceased'""
        self.format = 'State should be represented as strings'
        self.examples = ['released', 'isolated', 'deceased']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'patientid': patientidentifier, 'sex': gender, 'age': agegroup, 'country': countryname, 'symptomonsetdate': date, 'confirmeddate': date, 'releaseddate': date, 'deceaseddate': date, 'state': patientstate}"
"class policyidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each policy'
        self.valid_range = [1, 61]
        self.dtype = int
        self.format = 'Policy ID should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class policyidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each policy'
        self.valid_range = [1, 61]
        self.dtype = int
        self.format = 'Policy ID should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country name should be a valid country recognized by the UN'
        self.format = 'Country name should be in English and start with a capital letter'
        self.examples = ['Korea']

    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class policytype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of policy enacted'
        self.valid_values = ""Policy type should be one of the following: ['Immigration', 'Education', 'Health', 'Technology', 'Social']""
        self.format = 'Policy type should be a string starting with a capital letter'
        self.examples = ['Immigration', 'Education', 'Health', 'Technology', 'Social']

    def cast(self, val):
        val = str(val)
        if val in ['Immigration', 'Education', 'Health', 'Technology', 'Social']:
            return val
        else:
            raise Exception('Invalid policy type')

class policydetail(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Details of the policy enacted'
        self.valid_values = 'Policy detail should be a string describing the policy'
        self.format = 'Policy detail should be a string'
        self.examples = ['Strong', 'from all the countries', '5-day Rotation System', 'from Germany', 'Weak(1st)']

    def cast(self, val):
        return str(val)

class policydetail(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Details of the policy enacted'
        self.valid_values = 'Policy detail should be a string describing the policy'
        self.format = 'Policy detail should be a string'
        self.examples = ['Strong', 'from all the countries', '5-day Rotation System', 'from Germany', 'Weak(1st)']

    def cast(self, val):
        return str(val)

class policydate(NumericSemanticType):

    def __init__(self):
        self.description = 'Date the policy was enacted or ended'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Date should be represented as a string in the format YYYY-MM-DD'
        self.examples = ['2020-01-03', '2020-01-20', '2020-01-28', '2020-02-23', '2020-02-04']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d')
        except ValueError:
            return float('nan')

class policydate(NumericSemanticType):

    def __init__(self):
        self.description = 'Date the policy was enacted or ended'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Date should be represented as a string in the format YYYY-MM-DD'
        self.examples = ['2020-01-03', '2020-01-20', '2020-01-28', '2020-02-23', '2020-02-04']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d')
        except ValueError:
            return float('nan')


MAPPING = {'unnamed0': policyidentifier, 'policyid': policyidentifier, 'country': countryname, 'type': policytype, 'govpolicy': policydetail, 'detail': policydetail, 'startdate': policydate, 'enddate': policydate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the row in the data table'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer indices'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class regioncode(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A unique code representing a region'
        self.valid_range: list = [10000, 80000]
        self.dtype: object = int
        self.format: str = '5 digit integer code'
        self.examples: list = [10000, 10010, 10020, 10030, 10040]

    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the province or region'
        self.valid_values: str = 'Names of provinces or regions'
        self.format: str = 'Strings'
        self.examples: list = ['Seoul', 'Gyeonggi-do', 'Gyeongsangbuk-do', 'Jeollanam-do', 'Gyeongsangnam-do']

    def cast(self, val):
        return str(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the city'
        self.valid_values: str = 'Names of cities'
        self.format: str = 'Strings'
        self.examples: list = ['Seoul', 'Gangnam-gu', 'Gangdong-gu', 'Gangbuk-gu', 'Gangseo-gu']

    def cast(self, val):
        return str(val)

class latitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographical latitude of the region'
        self.valid_range: list = [-90, 90]
        self.dtype: object = float
        self.format: str = 'Latitude in decimal degrees (DD)'
        self.examples: list = [37.566953, 37.518421, 37.530492, 37.639938, 37.551166]

    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographical longitude of the region'
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = 'Longitude in decimal degrees (DD)'
        self.examples: list = [126.977977, 127.047222, 127.123837, 127.025508, 126.849506]

    def cast(self, val):
        return float(val)

class schoolcount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of institutions in a region'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Count as an integer'
        self.examples: list = [4, 14, 22, 36, 6087]

    def cast(self, val):
        return int(val)

class schoolcount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of institutions in a region'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Count as an integer'
        self.examples: list = [4, 14, 22, 36, 6087]

    def cast(self, val):
        return int(val)

class schoolcount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of institutions in a region'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Count as an integer'
        self.examples: list = [4, 14, 22, 36, 6087]

    def cast(self, val):
        return int(val)

class schoolcount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of institutions in a region'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Count as an integer'
        self.examples: list = [4, 14, 22, 36, 6087]

    def cast(self, val):
        return int(val)

class academyratio(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Ratio of academies in the region'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Ratio as a floating point number'
        self.examples: list = [0.19, 0.87, 1.27, 1.61, 4.18]

    def cast(self, val):
        return float(val)

class populationratio(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Ratio of certain population group in the region'
        self.valid_range: list = [0, 100]
        self.dtype: object = float
        self.format: str = 'Ratio as a percentage in floating point format'
        self.examples: list = [7.69, 14.11, 18.53, 27.26, 40.26]

    def cast(self, val):
        return float(val)

class populationratio(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Ratio of certain population group in the region'
        self.valid_range: list = [0, 100]
        self.dtype: object = float
        self.format: str = 'Ratio as a percentage in floating point format'
        self.examples: list = [7.69, 14.11, 18.53, 27.26, 40.26]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'code': regioncode, 'province': region, 'city': city, 'latitude': latitude, 'longitude': longitude, 'elementaryschoolcount': schoolcount, 'kindergartencount': schoolcount, 'universitycount': schoolcount, 'nursinghomecount': schoolcount, 'academyratio': academyratio, 'elderlypopulationratio': populationratio, 'elderlyaloneratio': populationratio}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of data row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer value starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of data record'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04', '2016-01-05']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class searchtrend(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Search trend for a specific disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Search trend should be a floating point number'
        self.unit = 'Search trend is a relative measure, higher values indicate more searches'
        self.examples = [0.11663, 0.13372, 0.14917, 0.17463, 0.17226]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class searchtrend(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Search trend for a specific disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Search trend should be a floating point number'
        self.unit = 'Search trend is a relative measure, higher values indicate more searches'
        self.examples = [0.11663, 0.13372, 0.14917, 0.17463, 0.17226]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class searchtrend(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Search trend for a specific disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Search trend should be a floating point number'
        self.unit = 'Search trend is a relative measure, higher values indicate more searches'
        self.examples = [0.11663, 0.13372, 0.14917, 0.17463, 0.17226]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class searchtrend(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Search trend for a specific disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Search trend should be a floating point number'
        self.unit = 'Search trend is a relative measure, higher values indicate more searches'
        self.examples = [0.11663, 0.13372, 0.14917, 0.17463, 0.17226]

    def cast(self, val):
        num = float(val)
        return round(num, 5)


MAPPING = {'unnamed0': index, 'date': date, 'cold': searchtrend, 'flu': searchtrend, 'pneumonia': searchtrend, 'coronavirus': searchtrend}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of an entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date represented as a string in the format 'YYYY-MM-DD'""
        self.valid_values = ""Dates must fit the following regex: '[0-9]{4}-[0-9]{2}-[0-9]{2}'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05']

    def cast(self, val):
        date_obj = datetime.strptime(val, '%Y-%m-%d')
        return date_obj.strftime('%Y-%m-%d')

class hour(NumericSemanticType):

    def __init__(self):
        self.description = 'The hour of the day'
        self.valid_range = [0, 23]
        self.dtype = int
        self.format = 'Hours should be formatted as integers'
        self.examples = [0, 5, 11, 17, 23]

    def cast(self, val):
        hour = int(val)
        if 0 <= hour <= 23:
            return hour
        else:
            raise Exception('Invalid hour')

class birthyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The birth year of an individual'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Birth years should be formatted as integers'
        self.examples = [1920, 1930, 1940, 1950, 1960]

    def cast(self, val):
        year = int(val)
        if 1900 <= year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid birthyear')

class sex(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['female', 'male']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid sex')

class province(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""The province of an individual's location""
        self.valid_values = 'Provinces must be valid provinces in South Korea'
        self.format = 'Provinces should be represented as strings'
        self.examples = ['Seoul']

    def cast(self, val):
        if val in CountryInfo('South Korea').provinces():
            return val
        else:
            raise Exception('Invalid province')

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = ""The city of an individual's location""
        self.valid_values = 'Cities must be valid cities in South Korea'
        self.format = 'Cities should be represented as strings'
        self.examples = ['Dobong-gu', 'Dongdaemun-gu', 'Dongjag-gu', 'Eunpyeong-gu', 'Gangbuk-gu']

    def cast(self, val):
        return str(val)

class fpnum(NumericSemanticType):

    def __init__(self):
        self.description = 'The floating population number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Floating population number should be formatted as integers'
        self.examples = [4970, 19590, 26030, 34020, 125060]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'date': datetimeclass, 'hour': hour, 'birthyear': birthyear, 'sex': sex, 'province': province, 'city': city, 'fpnum': fpnum}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string in the format '%Y-%m-%d'""
        self.format = ""Date should be a string in the format '%Y-%m-%d'""
        self.examples: list[str] = ['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class time(NumericSemanticType):

    def __init__(self):
        self.description = 'Time'
        self.valid_range = [0, 24]
        self.dtype = int
        self.format = 'Time should be formatted as an integer representing the hour of the day'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of tests should be formatted as an integer'
        self.examples: list[int] = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        return num

class negativecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Negative Results'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of negative results should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num

class confirmedcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Confirmed Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of confirmed cases should be formatted as an integer'
        self.examples: list[int] = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        return num

class releasedcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Released Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of released cases should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num

class deceasedcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Deceased Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of deceased cases should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num


MAPPING = {'unnamed0': index, 'date': date, 'time': time, 'test': testcount, 'negative': negativecount, 'confirmed': confirmedcount, 'released': releasedcount, 'deceased': deceasedcount}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The index number of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index numbers should be integers greater than or equal to 0'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else 0

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A specific day in the Gregorian calendar'
        self.valid_values = ""Dates should be in the format 'yyyy-mm-dd'""
        self.format = ""Dates should be strings in the format 'yyyy-mm-dd'""
        self.examples = ['2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05', '2020-03-06']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class agegroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'A range of ages grouped together'
        self.valid_values = ""Age groups should be in the format '##s'""
        self.format = ""Age groups should be strings in the format '##s'""
        self.examples = ['0s', '10s', '20s', '30s', '40s']

    def cast(self, val):
        return str(val) if re.match('^\\d+s$', str(val)) else 'Invalid age group'

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Counts should be integers greater than or equal to 0'
        self.examples: list[int] = [32, 169, 1235, 506, 633]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else 0

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Counts should be integers greater than or equal to 0'
        self.examples: list[int] = [32, 169, 1235, 506, 633]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else 0


MAPPING = {'unnamed0': indexnumber, 'date': date, 'age': agegroup, 'confirmed': count, 'deceased': count}"
"class ordinalindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A simple increasing integer index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer index starting from 0 and increasing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid index')
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of an event'
        self.valid_values = 'The date must be in the format YYYY-MM-DD'
        self.format = 'YYYY-MM-DD'
        self.examples = ['2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05', '2020-03-06']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise ValueError('Incorrect data format, should be YYYY-MM-DD')

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ['male', 'female']
        self.format = ""Lowercase string either 'male' or 'female'""
        self.examples = ['male', 'female']

    def cast(self, val):
        val_lower = str(val).lower()
        if val_lower in self.valid_values:
            return val_lower
        else:
            raise ValueError('Invalid gender')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed or deceased cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count of cases'
        self.examples = [1591, 2621, 1810, 3002, 1996]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid case count')
        return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed or deceased cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count of cases'
        self.examples = [1591, 2621, 1810, 3002, 1996]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid case count')
        return num


MAPPING = {'unnamed0': ordinalindex, 'date': date, 'sex': gender, 'confirmed': casecount, 'deceased': casecount}"
"class indexcolumn(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index column'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer index'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        return int(val)

class datecolumn(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date column'
        self.valid_values: str = 'Dates in the format YYYY-MM-DD'
        self.format: str = 'Dates in the format YYYY-MM-DD'
        self.examples: list = ['2020-01-20', '2020-03-01', '2020-01-29', '2020-01-22', '2020-01-23']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class timecolumn(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Time column'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer time'
        self.examples: list = [16, 16, 16, 16, 16]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        return int(val)

class provincecolumn(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Province column'
        self.valid_values: str = 'Names of provinces'
        self.format: str = 'Strings representing province names'
        self.examples: list = ['Seoul', 'Busan', 'Daegu', 'Incheon', 'Gwangju']

    def cast(self, val):
        return str(val).title()

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Confirmed cases column'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer confirmed cases'
        self.examples: list = [0, 0, 0, 1, 0]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        return int(val)

class releasedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Released cases column'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer released cases'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        return int(val)

class deceasedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Deceased cases column'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer deceased cases'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        return int(val)


MAPPING = {'unnamed0': indexcolumn, 'date': datecolumn, 'time': timecolumn, 'province': provincecolumn, 'confirmed': confirmedcases, 'released': releasedcases, 'deceased': deceasedcases}"
"class datasetindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Dataset index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise ValueError('Invalid dataset index')
        return val

class areacode(NumericSemanticType):

    def __init__(self):
        self.description = 'Area codes'
        self.valid_range = [10000, 70000]
        self.dtype = int
        self.format = 'Area code should be a 5-digit number'
        self.examples = [10000, 11000, 12000, 13000, 14000]

    def cast(self, val):
        val = int(val)
        if val < 10000 or val > 70000:
            raise ValueError('Invalid area code')
        return val

class province(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Provinces in South Korea'
        self.valid_values = 'Provinces should be one of the administrative divisions in South Korea'
        self.format = ""Provinces should be in their full form (e.g., 'Seoul', 'Busan', 'Daegu')""
        self.examples = ['Seoul', 'Busan', 'Daegu', 'Gwangju', 'Incheon']

    def cast(self, val):
        provinces = [p.name for p in pycountry.subdivisions.get(country_code='KR')]
        val = val.title()
        if val not in provinces:
            raise ValueError('Invalid province name')
        return val

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates should follow the YYYY-MM-DD format'
        self.format = 'Dates should be stored as strings in the format: YYYY-MM-DD'
        self.examples = ['2016-01-01', '2016-01-16', '2016-01-06', '2016-01-07', '2016-01-08']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise ValueError('Invalid date format')

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in Celsius'
        self.valid_range = [-50, 50]
        self.dtype = float
        self.format = 'Temperature should be a floating point number representing the temperature in Celsius'
        self.unit = 'Celsius'
        self.examples = [1.2, 5.3, 1.7, 3.2, 3.1]

    def cast(self, val):
        val = float(val)
        if val < -50 or val > 50:
            raise ValueError('Invalid temperature value')
        return round(val, 1)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in Celsius'
        self.valid_range = [-50, 50]
        self.dtype = float
        self.format = 'Temperature should be a floating point number representing the temperature in Celsius'
        self.unit = 'Celsius'
        self.examples = [1.2, 5.3, 1.7, 3.2, 3.1]

    def cast(self, val):
        val = float(val)
        if val < -50 or val > 50:
            raise ValueError('Invalid temperature value')
        return round(val, 1)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in Celsius'
        self.valid_range = [-50, 50]
        self.dtype = float
        self.format = 'Temperature should be a floating point number representing the temperature in Celsius'
        self.unit = 'Celsius'
        self.examples = [1.2, 5.3, 1.7, 3.2, 3.1]

    def cast(self, val):
        val = float(val)
        if val < -50 or val > 50:
            raise ValueError('Invalid temperature value')
        return round(val, 1)

class precipitation(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount of precipitation in mm'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Precipitation should be a floating point number representing the amount of precipitation in mm'
        self.unit = 'mm'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise ValueError('Invalid precipitation value')
        return round(val, 1)

class windspeed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Wind speed in m/s'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wind speed should be a floating point number representing the wind speed in m/s'
        self.unit = 'm/s'
        self.examples = [3.5, 7.4, 3.7, 2.7, 5.3]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise ValueError('Invalid wind speed value')
        return round(val, 1)

class winddirection(NumericSemanticType):

    def __init__(self):
        self.description = 'Wind direction in degrees'
        self.valid_range = [0, 360]
        self.dtype = float
        self.format = 'Wind direction should be a floating point number representing the direction of the wind in degrees'
        self.examples = [90.0, 340.0, 270.0, 230.0, 180.0]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 360:
            raise ValueError('Invalid wind direction value')
        return round(val, 1)

class relativehumidity(NumericSemanticType):

    def __init__(self):
        self.description = 'Relative humidity in %'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Relative humidity should be a floating point number representing the relative humidity in %'
        self.examples = [73.0, 52.1, 70.5, 73.1, 83.9]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 100:
            raise ValueError('Invalid relative humidity value')
        return round(val, 1)


MAPPING = {'unnamed0': datasetindex, 'code': areacode, 'province': province, 'date': date, 'avgtemp': temperature, 'mintemp': temperature, 'maxtemp': temperature, 'precipitation': precipitation, 'maxwindspeed': windspeed, 'mostwinddirection': winddirection, 'avgrelativehumidity': relativehumidity}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid ID')
        return num

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid ID')
        return num

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of an individual'
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = 'Gender should be a capitalized string'
        self.examples = ['Male', 'Female']

    def cast(self, val):
        val = str(val).capitalize()
        if val not in ['Male', 'Female']:
            raise Exception('Invalid gender')
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of an individual'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be a positive integer'
        self.examples = [18, 21, 20, 23, 31]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 150:
            raise Exception('Invalid age')
        return num

class annualincome(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Annual income of an individual'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Income should be a positive integer'
        self.units = 'In thousands (K)'
        self.examples = [15, 16, 17, 18, 19]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid income')
        return num


MAPPING = {'unnamed0': identifier, 'customerid': identifier, 'gender': gender, 'age': age, 'annualincomek': annualincome}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City of residence'
        self.valid_values = ""City name should be a string, formatted as 'city_#'""
        self.format = 'City names are stored as strings'
        self.examples = ['city_41', 'city_103', 'city_21', 'city_13', 'city_103']

    def cast(self, val):
        return str(val)

class citydevelopmentindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Development index of a city'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'City development index should be a float within the range [0, 1]'
        self.examples = [0.447, 0.698, 0.903, 0.92, 0.949]

    def cast(self, val):
        return round(float(val), 3)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of an individual'
        self.valid_values = ""Gender should be one of ['Male', 'Female', 'Other']""
        self.format = 'Gender is stored as strings'
        self.examples = ['Male', 'Female', 'Other']

    def cast(self, val):
        if val not in ['Male', 'Female', 'Other']:
            return 'Other'
        return str(val)

class releventexperience(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Has relevent experience', 'No relevent experience']

    def cast(self, val):
        if val in self.valid_values:
            return val
        return float('nan')

class enrolleduniversity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of University course enrollment'
        self.valid_values = ""Should be one of ['no_enrollment', 'Full time course', 'Part time course']""
        self.format = 'Enrollment type is stored as strings'
        self.examples = ['no_enrollment', 'Full time course', 'Part time course']

    def cast(self, val):
        if val not in ['no_enrollment', 'Full time course', 'Part time course']:
            return 'no_enrollment'
        return str(val)

class educationlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level of an individual'
        self.valid_values = ""Should be one of ['Graduate', 'Masters', 'High School', 'Phd', 'Primary School']""
        self.format = 'Education level is stored as strings'
        self.examples = ['Graduate', 'Masters', 'High School', 'Phd', 'Primary School']

    def cast(self, val):
        if val not in ['Graduate', 'Masters', 'High School', 'Phd', 'Primary School']:
            return float('nan')
        return str(val)

class experience(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Work Experience of an individual'
        self.valid_values = ""Should be one of ['>20', '5', '3', '4', '6']""
        self.format = 'Work Experience is stored as strings'
        self.examples = ['>20', '5', '3', '4', '6']

    def cast(self, val):
        if val not in ['>20', '5', '3', '4', '6']:
            return float('nan')
        return str(val)

class companysize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of the company'
        self.valid_values = ""Should be one of ['50-99', '100-500', '10000+', '10/49', '<10']""
        self.format = 'Company Size is stored as strings'
        self.examples = ['50-99', '100-500', '10000+', '10/49', '<10']

    def cast(self, val):
        if val not in ['50-99', '100-500', '10000+', '10/49', '<10']:
            return float('nan')
        return str(val)

class companytype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of the company'
        self.valid_values = ""Should be one of ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']""
        self.format = 'Company Type is stored as strings'
        self.examples = ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']

    def cast(self, val):
        if val not in ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']:
            return float('nan')
        return str(val)

class traininghours(NumericSemanticType):

    def __init__(self):
        self.description = 'Training hours'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Training hours should be formatted as a positive integer'
        self.examples = [21, 98, 15, 39, 72]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': identifier, 'enrolleeid': identifier, 'city': city, 'citydevelopmentindex': citydevelopmentindex, 'gender': gender, 'releventexperience': releventexperience, 'enrolleduniversity': enrolleduniversity, 'educationlevel': educationlevel, 'experience': experience, 'companysize': companysize, 'companytype': companytype, 'traininghours': traininghours}"
"class enrolleeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each enrollee'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Enrollee ID must be an integer'
        self.examples = [8949, 29725, 11561, 33241, 666]

    def cast(self, val):
        return int(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City code'
        self.valid_values = ""City must be a string starting with 'city_' followed by a number""
        self.format = ""City code should be in the format 'city_number'""
        self.examples = ['city_103', 'city_40', 'city_21', 'city_115', 'city_162']

    def cast(self, val):
        return str(val)

class citydevelopmentindex(NumericSemanticType):

    def __init__(self):
        self.description = 'City development index'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'City development index is a float ranging from 0 to 1'
        self.examples = [0.92, 0.7759999999999999, 0.624, 0.789, 0.767]

    def cast(self, val):
        return float(val)

class releventexperience(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Whether the enrollee has relevant experience or not'
        self.valid_values = ""Either 'Has relevent experience' or 'No relevent experience'""
        self.format = ""Should be one of the two strings: 'Has relevent experience' or 'No relevent experience'""
        self.examples = ['Has relevent experience', 'No relevent experience']

    def cast(self, val):
        return str(val)

class traininghours(NumericSemanticType):

    def __init__(self):
        self.description = 'Training hours completed by enrollee'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Training hours must be an integer'
        self.examples = [36, 47, 83, 52, 8]

    def cast(self, val):
        return int(val)

class target(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'enrolleeid': enrolleeidentifier, 'city': city, 'citydevelopmentindex': citydevelopmentindex, 'releventexperience': releventexperience, 'traininghours': traininghours, 'target': target}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 100, 5000, 100000]

    def cast(self, val):
        return int(abs(val))

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 100, 5000, 100000]

    def cast(self, val):
        return int(abs(val))

class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability should be a floating point value between 0 and 1, inclusive'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid probability value')


MAPPING = {'unnamed0': identifier, 'enrolleeid': identifier, 'target': probability}"
"class entityidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Entity ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Entity ID should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class myersbriggspersonalitytype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Myers Briggs Personality Type'
        self.valid_values = ""The 16 Myers Briggs Personality Types are 'INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP', 'ENTJ', 'ENFP', 'ENFJ', 'ISFP', 'ISFJ', 'ISTP', 'ISTJ', 'ESFP', 'ESFJ', 'ESTP', 'ESTJ'""
        self.format = 'Each type is denoted by a four-letter code'
        self.examples = ['INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP']

    def cast(self, val):
        val = str(val).upper()
        if val in ['INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP', 'ENTJ', 'ENFP', 'ENFJ', 'ISFP', 'ISFJ', 'ISTP', 'ISTJ', 'ESFP', 'ESFJ', 'ESTP', 'ESTJ']:
            return val
        else:
            raise Exception('Invalid Myers Briggs Personality Type')


MAPPING = {'unnamed0': entityidentifier, 'type': myersbriggspersonalitytype}"
"class worlduniversityrank(NumericSemanticType):

    def __init__(self):
        self.description = 'World University Rank'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be formatted as an integer, where rank 1 is the best'
        self.examples = [1, 2, 3, 100, 500]

    def cast(self, val):
        rank = int(val)
        if rank < 1:
            raise Exception('Invalid rank. Rank should be >= 1')
        return rank

class universityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a University'
        self.valid_values = 'Name should be a string'
        self.format = 'University name should be capitalized'
        self.examples = ['Harvard University', 'Stanford University', 'University of Cambridge', 'California Institute of Technology', 'University of Oxford']

    def cast(self, val):
        return str(val).title()

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country where the University is located'
        self.valid_values = 'Name of a country'
        self.format = 'Country name should be capitalized'
        self.examples = ['USA', 'China', 'Germany', 'United Kingdom', 'Australia']

    def cast(self, val):
        if not CountryInfo(val):
            raise Exception('Invalid country name')
        return str(val).title()

class educationquality(NumericSemanticType):

    def __init__(self):
        self.description = 'Quality of Education at the University'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Quality of education should be formatted as an integer, where rank 1 is the best'
        self.examples = [1, 100, 200, 300, 400]

    def cast(self, val):
        quality = int(val)
        if quality < 1:
            raise Exception('Invalid quality. Quality should be >= 1')
        return quality

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the Ranking'
        self.valid_range = [2000, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [2012, 2013, 2014, 2015, 2016]

    def cast(self, val):
        year = int(val)
        if year < 2000 or year > datetime.now().year:
            raise Exception('Invalid year. Year should be >= 2000 and <= current year')
        return year


MAPPING = {'worldrank': worlduniversityrank, 'institution': universityname, 'country': countryname, 'qualityofeducation': educationquality, 'year': year}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique index number for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index numbers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return None
        elif val < 0 or not float(val).is_integer():
            raise Exception('Invalid index number')
        else:
            return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string that represents a real-world country'
        self.format = 'Country names should be capitalized and must not contain any numeric or special characters'
        self.examples = ['Afghanistan', 'Bahamas, The', 'Bosnia and Herzegovina', 'Algeria', 'Andorra']

    def cast(self, val):
        if val in [name.name for name in list(pycountry.countries)]:
            return val
        else:
            raise Exception('Invalid country name')


MAPPING = {'unnamed0': index, 'countryname': countryname}"
"class universityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a University'
        self.valid_values = 'Name should be a string'
        self.format = 'Each word should start with a capital letter'
        self.examples = ['Harvard University', 'California Institute of Technology', 'Massachusetts Institute of Technology', 'Stanford University', 'Princeton University']

    def cast(self, val):
        return str(val).title()

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string and it should be a valid country name'
        self.format = 'Each word should start with a capital letter'
        self.examples = ['United States of America', 'United Kingdom', 'Japan', 'Germany', 'China']

    def cast(self, val):
        val = val.title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')


MAPPING = {'schoolname': universityname, 'country': countryname}"
"class rank(CategoricalSemanticType):

    def __init__(self):
        self.description = 'World rank of universities'
        self.valid_values = ""Ranking values are strings that are either a single number or a range in the form 'num1-num2'.""
        self.format = 'Ranking values should be strings'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(val)

class universityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a University'
        self.valid_values = 'University names should be a string'
        self.format = 'Each word in the university name should start with a capital letter'
        self.examples = ['Harvard University', 'University of Cambridge', 'Stanford University', 'University of California, Berkeley', 'Massachusetts Institute of Technology (MIT)']

    def cast(self, val):
        return str(val).title()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Score is a floating point number'
        self.examples = [100.0, 73.6, 73.4, 72.8, 70.1]

    def cast(self, val):
        return float(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the ranking'
        self.valid_range = [2005, 2015]
        self.dtype = int
        self.format = 'Year is an integer'
        self.examples = [2005, 2006, 2007, 2008, 2009]

    def cast(self, val):
        return int(val)


MAPPING = {'worldrank': rank, 'universityname': universityname, 'totalscore': score, 'alumni': score, 'award': score, 'hici': score, 'ns': score, 'pub': score, 'pcp': score, 'year': year}"
"class universityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a University'
        self.valid_values = 'The name of the university should be a string with the first letter of each word capitalized'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Harvard University', 'California Institute of Technology', 'Massachusetts Institute of Technology', 'Stanford University', 'Princeton University']

    def cast(self, val):
        return str(val).title()

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'The country name should be a string representing a valid country name'
        self.format = 'The country name should have the first letter capitalized'
        self.examples = ['United States of America', 'United Kingdom', 'Germany', 'Australia', 'Canada']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            return 'Unknown'

class universityscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score of a university'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'The score should be a floating point number between 0 and 100'
        self.examples = [96.1, 96.0, 95.6, 94.3, 94.2]

    def cast(self, val):
        try:
            score = float(val)
            if 0 <= score <= 100:
                return score
            else:
                return float('nan')
        except ValueError:
            return float('nan')

class studentpopulation(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of students in a university'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of students should be a positive integer'
        self.examples = [20152, 2243, 11074, 15596, 7929]

    def cast(self, val):
        try:
            num_students = int(str(val).replace(',', ''))
            if num_students >= 0:
                return num_students
            else:
                return float('nan')
        except ValueError:
            return float('nan')


MAPPING = {'universityname': universityname, 'country': countryname, 'totalscore': universityscore, 'numstudents': studentpopulation}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique indicator or measure of items'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class tweetidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each tweet'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tweet ID should be an integer'
        self.examples = [570306133677760513, 570301130888122368, 570301083672813571, 570301031407624196, 570300817074462722]

    def cast(self, val):
        return int(val)

class sentiment(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sentiment of the tweet'
        self.valid_values = ""Sentiment can be 'negative', 'neutral', 'positive'""
        self.format = 'Sentiment should be a string'
        self.examples = ['negative', 'neutral', 'positive']

    def cast(self, val):
        return str(val).lower()

class confidence(NumericSemanticType):

    def __init__(self):
        self.description = 'Confidence of the sentiment'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Confidence should be a floating point number between 0 and 1'
        self.examples = [1.0, 0.3486, 0.6837, 1.0, 1.0]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid confidence value')

class airline(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airline name'
        self.valid_values = 'Airline name should be a string'
        self.format = 'Airline name should be properly capitalized'
        self.examples = ['United', 'US Airways', 'American', 'Southwest', 'Delta']

    def cast(self, val):
        return str(val).title()

class username(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Username of the Twitter account'
        self.valid_values = 'Username should be a string'
        self.format = 'Username should be a string in lower case'
        self.examples = ['cairdin', 'jnardino', 'yvonnalynn', 'jnardino', 'jnardino']

    def cast(self, val):
        return str(val).lower()

class retweetcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times the tweet was retweeted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Retweet count should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usertimezone(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timezone of the user'
        self.valid_values = 'Timezone should be a string'
        self.format = 'Timezone should be a string in title case'
        self.examples = ['Eastern Time (US & Canada)', 'Central Time (US & Canada)', 'Pacific Time (US & Canada)', 'Quito', 'Atlantic Time (Canada)']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'tweetid': tweetidentifier, 'airlinesentiment': sentiment, 'airlinesentimentconfidence': confidence, 'airline': airline, 'name': username, 'retweetcount': retweetcount, 'usertimezone': usertimezone}"
"class longitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Longitude coordinate for a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude coordinates should be a floating point number between -180 and 180'
        self.unit = 'Degrees'
        self.examples = [-180.0, 0.0, 180.0, 45.678, -130.456]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return round(num, 6)

class latitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Latitude coordinate for a location'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude coordinates should be a floating point number between -90 and 90'
        self.unit = 'Degrees'
        self.examples = [-90.0, 0.0, 90.0, 45.678, -30.456]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return round(num, 6)

class medianincome(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Median income of a location'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Median income should be a floating point number'
        self.unit = 'In tens of thousands of US Dollars'
        self.examples = [0.0, 1.5, 2.0, 8.3252, 15.0001]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid median income')
        return round(num, 4)

class medianhousevalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Median house value of a location'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Median house value should be a floating point number'
        self.unit = 'In US Dollars'
        self.examples = [0.0, 50000.0, 100000.0, 250000.0, 500001.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid median house value')
        return round(num, 2)

class oceanproximity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Proximity of the location to the ocean'
        self.valid_values = ""One of ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']""
        self.format = 'A string representing the category of ocean proximity'
        self.examples = ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']

    def cast(self, val):
        if val not in ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']:
            raise Exception('Invalid ocean proximity')
        return str(val)


MAPPING = {'longitude': longitude, 'latitude': latitude, 'medianincome': medianincome, 'medianhousevalue': medianhousevalue, 'oceanproximity': oceanproximity}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for an entity in the form of an integer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for an entity in the form of an integer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class employeename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Employee Name'
        self.valid_values = ""Name should be a string that is of the form 'last name, first name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Adinolfi, Wilson  K', 'Ait Sidi, Karthikeyan   ', 'Akinkuolie, Sarah', 'Alagbe,Trina', 'Anderson, Carol ']

    def cast(self, val):
        return str(val).title()

class employeename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Employee Name'
        self.valid_values = ""Name should be a string that is of the form 'last name, first name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Adinolfi, Wilson  K', 'Ait Sidi, Karthikeyan   ', 'Akinkuolie, Sarah', 'Alagbe,Trina', 'Anderson, Carol ']

    def cast(self, val):
        return str(val).title()

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class currencyusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amounts in US dollars'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [45046, 55501.5, 62810.0, 72036.0, 250000]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class position(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of an employee in the organization'
        self.valid_values = 'Position should be a string'
        self.format = 'Words in the position should be capitalized'
        self.examples = ['Production Technician I', 'Sr. DBA', 'Production Technician II', 'Production Technician I', 'Production Technician I']

    def cast(self, val):
        return str(val).title()

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State in the USA'
        self.valid_values = 'State should be a string representing the two-letter abbreviation of a US State'
        self.format = 'State should be a two-letter abbreviation'
        self.examples = ['MA', 'CT', 'TX', 'VT', 'NY']

    def cast(self, val):
        return str(val).upper()

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.valid_values = 'Zip Codes must be 5-digit numbers stored as strings'
        self.format = 'Zip Codes must be 5-digit numbers stored as strings'
        self.examples = ['1960', '2148', '1810', '1886', '2169']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('[0-9]{5}(?:-[0-9]{4})?', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = ""Date should be in the format 'MM/DD/YY'""
        self.format = ""Date should be in the format 'MM/DD/YY'""
        self.examples = ['07/10/83', '05/05/75', '09/19/88', '09/27/88', '09/08/89']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%y').date()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = ""Date should be in the format 'MM/DD/YY'""
        self.format = ""Date should be in the format 'MM/DD/YY'""
        self.examples = ['07/10/83', '05/05/75', '09/19/88', '09/27/88', '09/08/89']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%y').date()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = ""Date should be in the format 'MM/DD/YY'""
        self.format = ""Date should be in the format 'MM/DD/YY'""
        self.examples = ['07/10/83', '05/05/75', '09/19/88', '09/27/88', '09/08/89']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%y').date()

class sex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sex of an individual'
        self.valid_values = ""Sex should be either 'M' or 'F'""
        self.format = ""Sex should be either 'M' or 'F'""
        self.examples = ['M', 'M', 'F', 'F', 'F']

    def cast(self, val):
        return str(val).strip().upper()

class recruitment(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of recruitment'
        self.valid_values = 'Recruitment source should be a string'
        self.format = 'Words in the recruitment source should be capitalized'
        self.examples = ['LinkedIn', 'Indeed', 'LinkedIn', 'Indeed', 'Google Search']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': uniqueidentifier, 'empid': uniqueidentifier, 'employeename': employeename, 'managername': employeename, 'marriedid': binary, 'maritalstatusid': binary, 'genderid': binary, 'empstatusid': binary, 'deptid': binary, 'perfscoreid': binary, 'fromdiversityjobfairid': binary, 'termd': binary, 'positionid': binary, 'managerid': binary, 'salary': currencyusd, 'position': position, 'state': state, 'zip': zipcode, 'dob': date, 'dateofhire': date, 'dateoftermination': date, 'sex': sex, 'recruitmentsource': recruitment}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class storenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Store Number'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Store numbers should be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num <= 0:
            raise Exception('Invalid store number')
        return num

class datestring(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of data entry'
        self.valid_values = 'Dates should be in the format DD/MM/YYYY'
        self.format = 'Dates should be in the format DD/MM/YYYY'
        self.examples = ['05/02/2010', '12/02/2010', '19/02/2010', '26/02/2010', '05/03/2010']

    def cast(self, val):
        return datetime.strptime(str(val), '%d/%m/%Y').strftime('%d/%m/%Y')

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature on the day of data entry'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Fahrenheit'
        self.examples = [42.31, 38.51, 39.93, 46.63, 46.5]

    def cast(self, val):
        return float(val)

class fuelprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Fuel Price on the day of data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fuel price should be a positive float'
        self.unit = 'In USD'
        self.examples = [2.572, 2.548, 2.514, 2.561, 2.625]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid fuel price')
        return num

class cpi(NumericSemanticType):

    def __init__(self):
        self.description = 'Consumer Price Index on the day of data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'CPI should be a positive float'
        self.examples = [211.0963582, 211.2421698, 211.2891429, 211.3196429, 211.3501429]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid CPI')
        return num

class unemploymentrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Unemployment rate on the day of data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unemployment rate should be a positive float'
        self.examples = [8.106, 8.106, 8.106, 8.106, 8.106]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid unemployment rate')
        return num

class isholiday(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': index, 'store': storenumber, 'date': datestring, 'temperature': temperature, 'fuelprice': fuelprice, 'cpi': cpi, 'unemployment': unemploymentrate, 'isholiday': isholiday}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid unique ID')

class storeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each store'
        self.valid_range = [1, 11]
        self.dtype = int
        self.format = 'Store ID should be an integer between 1 and 11'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if 1 <= val <= 11:
            return int(val)
        else:
            raise Exception('Invalid store ID')

class departmentidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each department'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Department ID should be an integer between 1 and 99'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if 1 <= val <= 99:
            return int(val)
        else:
            raise Exception('Invalid department ID')

class saledate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of sale'
        self.valid_values = ""Sale date should be in the format 'dd/mm/yyyy'""
        self.format = 'Sale date should be a datetime object'
        self.examples = ['05/02/2010', '12/02/2010', '19/02/2010', '26/02/2010', '05/03/2010']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y')

class weeklysales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total sales for the given department in the given store'
        self.valid_range = [-1098.0, float('inf')]
        self.dtype = float
        self.format = 'Weekly sales should be a floating point number with two decimal places'
        self.unit = 'In USD'
        self.examples = [24924.5, 46039.49, 41595.55, 19403.54, 21827.9]

    def cast(self, val):
        return round(float(val), 2)

class holidayflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': uniqueidentifier, 'store': storeidentifier, 'dept': departmentidentifier, 'date': saledate, 'weeklysales': weeklysales, 'isholiday': holidayflag}"
"class storeidentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Unique identifier for each store'
        self.valid_range: list = [1, float('inf')]
        self.dtype: object = int
        self.format: str = 'Should be a positive integer value with no leading zeros'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class storetype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Type of the store'
        self.valid_values: str = 'Valid values for store type are ""A"", ""B"", ""C""'
        self.format: str = 'One upper-case alphabetical character'
        self.examples: list = ['A', 'B', 'C']

    def cast(self, val):
        if val is None or pd.isnull(val):
            return float('nan')
        return str(val).upper()

class storesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Size of the store'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Size should be a non-negative integer'
        self.unit: str = 'Square feet'
        self.examples: list = [151315, 202307, 37392, 205863, 34875]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)


MAPPING = {'store': storeidentifier, 'type': storetype, 'size': storesize}"
"class ramenidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each Ramen'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique integer ID'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class ramenreview(NumericSemanticType):

    def __init__(self):
        self.description = 'Ramen review number'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Integer review number'
        self.examples = [2580, 2579, 2578, 2577, 2576]

    def cast(self, val):
        return int(val)

class ramenbrand(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Brand of the Ramen'
        self.valid_values = 'Brand names should be strings'
        self.format = 'Brand names should be capitalized'
        self.examples = ['Nissin', 'Nongshim', 'Maruchan', 'Mama', 'Paldo']

    def cast(self, val):
        return str(val).title()

class ramenvariety(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Variety of the Ramen'
        self.valid_values = 'Variety names should be strings'
        self.format = 'Variety names should be capitalized'
        self.examples = ['Beef', 'Chicken', 'Yakisoba', 'Artificial Chicken', 'Vegetable']

    def cast(self, val):
        return str(val).title()

class ramenstyle(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Style of the Ramen'
        self.valid_values = 'Ramen style should be one of: Pack, Bowl, Cup, Tray, Box'
        self.format = 'Ramen style should be capitalized'
        self.examples = ['Pack', 'Bowl', 'Cup', 'Tray', 'Box']

    def cast(self, val):
        val = str(val).title()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid ramen style')

class ramencountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of origin for the Ramen'
        self.valid_values = 'Country names should be strings'
        self.format = 'Country names should be capitalized'
        self.examples = ['Japan', 'USA', 'South Korea', 'Taiwan', 'Thailand']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class ramenrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Ramen rating'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a float in the range 0-5'
        self.examples = [4.0, 5.0, 3.75, 3.5, 3.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 5:
            return round(val, 2)
        else:
            raise Exception('Invalid ramen rating')

class ramentopten(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Top Ten Ramen'
        self.valid_values = 'Top Ten ranking should be a string'
        self.format = ""Top Ten ranking should be in the format 'YEAR #RANK'""
        self.examples = ['2015 #4', '2014 #10', '2016 #8', '2016 #5']

    def cast(self, val):
        if not pd.isna(val):
            match_obj = re.match('\\d{4} #\\d{1,2}', val)
            if match_obj:
                return match_obj.group()
            else:
                raise Exception('Invalid Top Ten format')
        else:
            return float('nan')


MAPPING = {'unnamed0': ramenidentifier, 'review': ramenreview, 'brand': ramenbrand, 'variety': ramenvariety, 'style': ramenstyle, 'country': ramencountry, 'stars': ramenrating, 'topten': ramentopten}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Model should be a string with the make and the model of the car'
        self.format = ""Model should be formatted as 'Make Model'""
        self.examples = ['Maruti 800 AC', 'Maruti Wagon R LXI Minor', 'Hyundai Verna 1.6 SX', 'Datsun RediGO T Option', 'Honda Amaze VX i-DTEC']

    def cast(self, val):
        return str(val)

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture of the car'
        self.valid_range = [1885, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [2007, 2007, 2012, 2017, 2014]

    def cast(self, val):
        return int(val)

class priceinrupees(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Selling price of the car in Rupees'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [60000, 135000, 600000, 250000, 450000]

    def cast(self, val):
        return float(val)

class distanceinmeters(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Distance driven by the car in Kilometers'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Distance should be formatted as a floating point number'
        self.unit = 'In Kilometers'
        self.examples = [70000, 50000, 100000, 46000, 141000]

    def cast(self, val):
        return float(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of fuel the car uses'
        self.valid_values = 'Should be one of Diesel, Petrol, CNG, LPG, Electric'
        self.format = 'Fuel type should be a string'
        self.examples = ['Diesel', 'Petrol', 'CNG', 'LPG', 'Electric']

    def cast(self, val):
        return str(val)

class sellertype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of seller'
        self.valid_values = ""Should be one of 'Individual', 'Dealer', 'Trustmark Dealer'""
        self.format = 'Seller type should be a string'
        self.examples = ['Individual', 'Dealer', 'Trustmark Dealer']

    def cast(self, val):
        return str(val)

class transmissiontype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Manual', 'Automatic']

    def cast(self, val):
        return str(val)

class owner(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ownership status of the car'
        self.valid_values = ""Should be one of 'First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car'""
        self.format = 'Owner should be a string'
        self.examples = ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']

    def cast(self, val):
        return str(val)


MAPPING = {'name': carmodel, 'year': yearofmanufacture, 'sellingprice': priceinrupees, 'kmdriven': distanceinmeters, 'fuel': fueltype, 'sellertype': sellertype, 'transmission': transmissiontype, 'owner': owner}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer starting from 0 and incrementing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class carname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Car'
        self.valid_values = 'Name should be a string that represents the car model'
        self.format = 'Every word should be capitalized'
        self.examples = ['Maruti Swift Dzire VDI', 'Skoda Rapid 1.5 TDI Ambition', 'Honda City 2017-2020 EXi', 'Hyundai i20 Sportz Diesel', 'Maruti Swift VXI BSIII']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of manufacture of the car'
        self.valid_range = [1885, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be represented as a 4-digit integer'
        self.examples = [2000, 2005, 2010, 2015, 2020]

    def cast(self, val):
        return int(val)

class currencyinr(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency value in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency should be represented as a floating point number'
        self.unit = 'In INR'
        self.examples = [450000, 370000, 158000, 225000, 130000]

    def cast(self, val):
        return float(val)

class distanceinmiles(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Distance value in kilometers'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Distance should be represented as a floating point number'
        self.unit = 'In KM'
        self.examples = [145500, 120000, 140000, 127000, 120000]

    def cast(self, val):
        return float(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of fuel used by the car'
        self.valid_values = ""Should be one of ['Diesel', 'Petrol', 'CNG', 'LPG']""
        self.format = 'Fuel type should be capitalized'
        self.examples = ['Diesel', 'Petrol', 'CNG', 'LPG']

    def cast(self, val):
        return str(val).capitalize()

class sellertype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of seller of the car'
        self.valid_values = ""Should be one of ['Individual', 'Dealer', 'Trustmark Dealer']""
        self.format = 'Seller type should be capitalized'
        self.examples = ['Individual', 'Dealer', 'Trustmark Dealer']

    def cast(self, val):
        return str(val).capitalize()

class transmissiontype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Manual', 'Automatic']

    def cast(self, val):
        if val.lower() == 'manual':
            return 'Manual'
        elif val.lower() == 'automatic':
            return 'Automatic'
        else:
            raise ValueError('Invalid transmission type')

class ownership(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ownership history of the car'
        self.valid_values = ""Should be one of ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']""
        self.format = 'Ownership should be capitalized'
        self.examples = ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']

    def cast(self, val):
        return str(val).capitalize()

class mileageinkmpl(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mileage of the car in kilometers per liter'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mileage should be represented as a floating point number'
        self.unit = 'In KMPL'
        self.examples = [23.4, 21.14, 17.7, 23.0, 16.1]

    def cast(self, val):
        try:
            return float(val.split()[0])
        except:
            return float('nan')

class engineincc(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine capacity of the car in cubic centimeters'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Engine capacity should be represented as an integer'
        self.unit = 'In CC'
        self.examples = [1248, 1498, 1497, 1396, 1298]

    def cast(self, val):
        try:
            return int(val.split()[0])
        except:
            return float('nan')

class powerinbhp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Power of the car in brake horsepower'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power should be represented as a floating point number'
        self.unit = 'In BHP'
        self.examples = [74.0, 103.52, 78.0, 90.0, 88.2]

    def cast(self, val):
        try:
            return float(val.split()[0])
        except:
            return float('nan')

class torque(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Torque of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Torque should be represented as a floating point number'
        self.unit = 'In Nm'
        self.examples = ['190Nm@ 2000rpm', '250Nm@ 1500-2500rpm', '12.7@ 2,700(kgm@ rpm)', '22.4 kgm at 1750-2750rpm', '11.5@ 4,500(kgm@ rpm)']

    def cast(self, val):
        try:
            return float(val.split()[0].replace('Nm@', '').replace('kgm at', ''))
        except:
            return float('nan')

class seats(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of seats in the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [5, 7, 9, 3, 2]

    def cast(self, val):
        try:
            return int(val)
        except:
            return float('nan')


MAPPING = {'unnamed0': index, 'name': carname, 'year': year, 'sellingprice': currencyinr, 'kmdriven': distanceinmiles, 'fuel': fueltype, 'sellertype': sellertype, 'transmission': transmissiontype, 'owner': ownership, 'mileage': mileageinkmpl, 'engine': engineincc, 'maxpower': powerinbhp, 'torque': torque, 'seats': seats}"
"class carname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Car'
        self.valid_values = 'The name of the car can be any valid string.'
        self.format = 'The car name should be a string with only the first letter of each word capitalized.'
        self.examples = ['Ritz', 'Sx4', 'Ciaz', 'Wagon R', 'Swift']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the Car'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer.'
        self.examples = [2001, 2005, 2010, 2015, 2020]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in lakhs of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'In INR lakhs'
        self.format = 'Price should be formatted as a floating point number with two decimal places.'
        self.examples = [0.5, 1.25, 2.75, 3.5, 5.0]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in lakhs of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'In INR lakhs'
        self.format = 'Price should be formatted as a floating point number with two decimal places.'
        self.examples = [0.5, 1.25, 2.75, 3.5, 5.0]

    def cast(self, val):
        return round(float(val), 2)

class kmsdriven(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of kilometers driven by the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'In kilometers'
        self.format = 'Kilometers driven should be a positive integer.'
        self.examples = [500, 1000, 5000, 10000, 15000]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of fuel used by the car'
        self.valid_values = ""Fuel Type should be either 'Petrol', 'Diesel', or 'CNG'.""
        self.format = 'Fuel Type should be a capitalized string.'
        self.examples = ['Petrol', 'Diesel', 'CNG']

    def cast(self, val):
        return str(val).capitalize()

class sellertype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of seller selling the car'
        self.valid_values = ""Seller Type should be either 'Dealer' or 'Individual'.""
        self.format = 'Seller Type should be a capitalized string.'
        self.examples = ['Dealer', 'Individual']

    def cast(self, val):
        return str(val).capitalize()

class transmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of transmission of the car'
        self.valid_values = ""Transmission Type should be either 'Manual' or 'Automatic'.""
        self.format = 'Transmission Type should be a capitalized string.'
        self.examples = ['Manual', 'Automatic']

    def cast(self, val):
        return str(val).capitalize()

class owner(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of previous owners of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of owners should be a non-negative integer.'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'carname': carname, 'year': year, 'sellingprice': price, 'presentprice': price, 'kmsdriven': kmsdriven, 'fueltype': fueltype, 'sellertype': sellertype, 'transmission': transmission, 'owner': owner}"
""
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Kevin Lee', 'Richard Lee', 'Michael Lee', 'David Wong', 'Nathaniel Ford']

    def cast(self, val):
        return str(val).title()

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job Title'
        self.valid_values = 'Job title should be a string'
        self.format = 'Job title should be in capitalized form'
        self.examples = ['Transit Operator', 'Registered Nurse', 'Special Nurse', 'Police Officer 3', 'General Manager-Metropolitan Transit Authority']

    def cast(self, val):
        return str(val).title()

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [167411.18, 155966.02, 212739.13, 77916.0, 134401.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [2011, 2012, 2013]

    def cast(self, val):
        return int(val)

class agencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Agency Name'
        self.valid_values = 'Agency name should be a string'
        self.format = 'Agency name should be in capitalized form'
        self.examples = ['San Francisco']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': identifier, 'id': identifier, 'employeename': personname, 'jobtitle': jobtitle, 'basepay': salary, 'overtimepay': salary, 'otherpay': salary, 'benefits': salary, 'totalpay': salary, 'totalpaybenefits': salary, 'year': year, 'agency': agencyname}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row numbers should be an integer greater than or equal to zero'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid row number')
        return num

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class frequency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The frequency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number with three decimal places'
        self.unit = 'In Hertz (Hz)'
        self.examples = [0.181, 0.057, 0.186, 0.084, 3.14]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The gender of an entity'
        self.valid_values = ""The gender can be one of two values: ['male', 'female']""
        self.format = ""Gender should be either 'male' or 'female'""
        self.examples = ['male', 'female', 'male', 'female', 'male']

    def cast(self, val):
        if val not in ['male', 'female']:
            raise Exception('Invalid gender')
        return str(val)


MAPPING = {'unnamed0': rownumber, 'meanfreq': frequency, 'sd': frequency, 'median': frequency, 'iqr': frequency, 'skew': frequency, 'kurt': frequency, 'spent': frequency, 'sfm': frequency, 'mode': frequency, 'centroid': frequency, 'meanfun': frequency, 'minfun': frequency, 'maxfun': frequency, 'meandom': frequency, 'mindom': frequency, 'maxdom': frequency, 'dfrange': frequency, 'modindx': frequency, 'label': gender}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integer values starting from 0 and incrementing by 1 for each new record'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')

class ecgreading(NumericSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid ECG reading')


MAPPING = {'unnamed0': index, '0000000000000000000e001': ecgreading, '0000000000000000000e002': ecgreading, '0000000000000000000e003': ecgreading, '0000000000000000000e004': ecgreading, '0000000000000000000e005': ecgreading, '0000000000000000000e006': ecgreading, '0000000000000000000e007': ecgreading, '0000000000000000000e008': ecgreading, '0000000000000000000e009': ecgreading, '0000000000000000000e0010': ecgreading, '0000000000000000000e0011': ecgreading, '0000000000000000000e0012': ecgreading, '0000000000000000000e0013': ecgreading, '0000000000000000000e0014': ecgreading, '0000000000000000000e0015': ecgreading, '0000000000000000000e0016': ecgreading, '0000000000000000000e0017': ecgreading, '0000000000000000000e0018': ecgreading, '0000000000000000000e0019': ecgreading, '0000000000000000000e0020': ecgreading, '0000000000000000000e0021': ecgreading, '0000000000000000000e0022': ecgreading, '0000000000000000000e0023': ecgreading, '0000000000000000000e0024': ecgreading, '0000000000000000000e0025': ecgreading, '0000000000000000000e0026': ecgreading, '0000000000000000000e0027': ecgreading, '0000000000000000000e0028': ecgreading, '0000000000000000000e0029': ecgreading}"
"class ecgsequenceidentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Sequence ID for the ECG measurements'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Sequence ID should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid sequence ID')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')

class ecgmeasurement(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A single ECG measurement'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'ECG measurements should be floating point numbers between 0 and 1'
        self.examples: list = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid ECG measurement')


MAPPING = {'unnamed0': ecgsequenceidentifier, '0000000000000000000e001': ecgmeasurement, '0000000000000000000e002': ecgmeasurement, '0000000000000000000e003': ecgmeasurement, '0000000000000000000e004': ecgmeasurement, '0000000000000000000e005': ecgmeasurement, '0000000000000000000e006': ecgmeasurement, '0000000000000000000e007': ecgmeasurement, '0000000000000000000e008': ecgmeasurement, '0000000000000000000e009': ecgmeasurement, '0000000000000000000e0010': ecgmeasurement, '0000000000000000000e0011': ecgmeasurement, '0000000000000000000e0012': ecgmeasurement, '0000000000000000000e0013': ecgmeasurement, '0000000000000000000e0014': ecgmeasurement, '0000000000000000000e0015': ecgmeasurement, '0000000000000000000e0016': ecgmeasurement, '0000000000000000000e0017': ecgmeasurement, '0000000000000000000e0018': ecgmeasurement, '0000000000000000000e0019': ecgmeasurement, '0000000000000000000e0020': ecgmeasurement, '0000000000000000000e0021': ecgmeasurement, '0000000000000000000e0022': ecgmeasurement, '0000000000000000000e0023': ecgmeasurement, '0000000000000000000e0024': ecgmeasurement, '0000000000000000000e0025': ecgmeasurement, '0000000000000000000e0026': ecgmeasurement, '0000000000000000000e0027': ecgmeasurement, '0000000000000000000e0028': ecgmeasurement, '0000000000000000000e0029': ecgmeasurement}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)

class eegreading(NumericSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.1041162237524986, 0.5161290168762207, 0.2975970506668091, 0.0, 0.2922476232051849]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid EEG reading')
        return round(val, 3)


MAPPING = {'unnamed0': index, '0000000000000000000e001': eegreading, '0000000000000000000e002': eegreading, '0000000000000000000e003': eegreading, '0000000000000000000e004': eegreading, '0000000000000000000e005': eegreading, '0000000000000000000e006': eegreading, '0000000000000000000e007': eegreading, '0000000000000000000e008': eegreading, '0000000000000000000e009': eegreading, '0000000000000000000e0010': eegreading, '0000000000000000000e0011': eegreading, '0000000000000000000e0012': eegreading, '0000000000000000000e0013': eegreading, '0000000000000000000e0014': eegreading, '0000000000000000000e0015': eegreading, '0000000000000000000e0016': eegreading, '0000000000000000000e0017': eegreading, '0000000000000000000e0018': eegreading, '0000000000000000000e0019': eegreading, '0000000000000000000e0020': eegreading, '0000000000000000000e0021': eegreading, '0000000000000000000e0022': eegreading, '0000000000000000000e0023': eegreading, '0000000000000000000e0024': eegreading, '0000000000000000000e0025': eegreading, '0000000000000000000e0026': eegreading, '0000000000000000000e0027': eegreading, '0000000000000000000e0028': eegreading, '0000000000000000000e0029': eegreading}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')

class normalizedamplitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 1.0:
            return num
        else:
            raise Exception('Invalid amplitude')


MAPPING = {'unnamed0': index, '0000000000000000000e001': normalizedamplitude, '0000000000000000000e002': normalizedamplitude, '0000000000000000000e003': normalizedamplitude, '0000000000000000000e004': normalizedamplitude, '0000000000000000000e005': normalizedamplitude, '0000000000000000000e006': normalizedamplitude, '0000000000000000000e007': normalizedamplitude, '0000000000000000000e008': normalizedamplitude, '0000000000000000000e009': normalizedamplitude, '0000000000000000000e0010': normalizedamplitude, '0000000000000000000e0011': normalizedamplitude, '0000000000000000000e0012': normalizedamplitude, '0000000000000000000e0013': normalizedamplitude, '0000000000000000000e0014': normalizedamplitude, '0000000000000000000e0015': normalizedamplitude, '0000000000000000000e0016': normalizedamplitude, '0000000000000000000e0017': normalizedamplitude, '0000000000000000000e0018': normalizedamplitude, '0000000000000000000e0019': normalizedamplitude, '0000000000000000000e0020': normalizedamplitude, '0000000000000000000e0021': normalizedamplitude, '0000000000000000000e0022': normalizedamplitude, '0000000000000000000e0023': normalizedamplitude, '0000000000000000000e0024': normalizedamplitude, '0000000000000000000e0025': normalizedamplitude, '0000000000000000000e0026': normalizedamplitude, '0000000000000000000e0027': normalizedamplitude, '0000000000000000000e0028': normalizedamplitude, '0000000000000000000e0029': normalizedamplitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 0:
            return int(val)
        else:
            raise Exception('Invalid index')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in YYYY-MM-DD format'
        self.valid_values = 'Dates from 2007-11-27 to 2022-12-31'
        self.format = 'Date in YYYY-MM-DD format'
        self.examples = ['2007-11-27', '2007-11-28', '2007-11-29', '2007-11-30', '2007-12-03']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol'
        self.valid_values = ""Either 'ADANIPORTS' or 'MUNDRAPORT'""
        self.format = 'All capital letters'
        self.examples = ['ADANIPORTS', 'MUNDRAPORT']

    def cast(self, val):
        return str(val).upper()

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = ""'EQ'""
        self.format = 'All capital letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [108, 1324]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [440.0, 962.9, 893.9, 884.2, 921.55]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 108 and float(val) <= 1324:
            return round(float(val), 2)
        else:
            raise Exception('Invalid stock price')

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock'
        self.valid_range = [12366, 97717880]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples = [27294366, 4581338, 5124121, 4609762, 2977470]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 12366 and float(val) <= 97717880:
            return int(val)
        else:
            raise Exception('Invalid volume')

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of the stock'
        self.valid_range = [241585705000.0, 8160988307835002.0]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.examples = [2687719053785000.0, 431276530165000.0, 455065846265000.0, 428325662830000.0, 287519974300000.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 241585705000.0 and float(val) <= 8160988307835002.0:
            return float(val)
        else:
            raise Exception('Invalid turnover')

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [366.0, 1205984.0]
        self.dtype = float
        self.format = 'Number of trades should be formatted as a floating point number'
        self.examples = [366.0, 1205984.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 366.0 and float(val) <= 1205984.0:
            return float(val)
        else:
            raise Exception('Invalid number of trades')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [5383, 22416516]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples = [9859619, 1453278, 1069678, 1260913, 816123]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 5383 and float(val) <= 22416516:
            return int(val)
        else:
            raise Exception('Invalid deliverable volume')

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of the deliverable volume of the stock'
        self.valid_range = [0.067, 0.9798]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number'
        self.examples = [0.3611999999999999, 0.3172, 0.2087999999999999, 0.2735, 0.2741]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        if float(val) >= 0.067 and float(val) <= 0.9798:
            return float(val)
        else:
            raise Exception('Invalid percentage')


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class stockdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.valid_values = 'Should be a valid date in the format YYYY-MM-DD'
        self.format = 'Dates should be stored as strings in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        datetime_object = datetime.strptime(val, '%Y-%m-%d')
        return datetime_object.strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol for the stock'
        self.valid_values = 'Must be a valid stock symbol'
        self.format = 'Stock symbols are uppercase strings that represent the security'
        self.examples = ['AAPL', 'MSFT', 'GOOGL', 'ASIANPAINT', 'TSLA']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Must be a valid stock series'
        self.format = 'Stock series are uppercase strings that represent the series'
        self.examples = ['EQ', 'BE', 'BL', 'BT', 'GC']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples = [100, 200, 1500, 90, 10000]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.examples = [100.5, 200.3, 1500.0, 90.9, 10000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as an integer'
        self.examples = [10, 20, 15, 9, 100]

    def cast(self, val):
        if math.isnan(val):
            return 0
        return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples = [100, 200, 1500, 90, 10000]

    def cast(self, val):
        if math.isnan(val):
            return 0
        return int(val)

class stockpercentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.15, 0.9, 0.99]

    def cast(self, val):
        if math.isnan(val):
            return 0.0
        return float(val)


MAPPING = {'date': stockdate, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in a dataset'
        self.valid_values = 'Dates must be of the format YYYY-MM-DD'
        self.format = 'Dates should be represented as strings in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise Exception('Invalid date')

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of a company'
        self.valid_values = 'Symbol should be a valid stock ticker symbol'
        self.format = 'Symbols should be represented as strings'
        self.examples = ['AXISBANK', 'UTIBANK']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series type of the stock'
        self.valid_values = 'Series type should be a valid series type for stocks'
        self.format = 'Series types should be represented as strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places'
        self.unit = 'In INR'
        self.examples = [24.7, 26.7, 26.85, 26.3, 25.95]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be a non-negative integer'
        self.examples = [112100, 234500, 170100, 102100, 62600]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The total value of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be a non-negative integer'
        self.examples = [299307000000.0, 638727500000.0, 446298000000.0, 268173000000.0, 156722000000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades executed'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be a non-negative integer'
        self.examples = [62228, 93186, 144973, 990737]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks deliverable'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable Volume should be a non-negative integer'
        self.examples = [257313, 768768, 2652520, 94901165]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of stocks deliverable'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Percent Deliverable should be a floating point number between 0 and 1'
        self.examples = [0.348, 0.46, 0.574, 0.983]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 3)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': price, 'open': price, 'high': price, 'low': price, 'last': price, 'close': price, 'vwap': price, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in string format'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2008-05-26', '2008-05-27', '2008-05-28', '2008-05-29', '2008-05-30']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date().isoformat()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = ""Stock symbol should be a string representing a unique ticker symbol of a company's stock""
        self.format = 'Stock symbol should be a string with no special characters'
        self.examples = ['BAJAJ-AUTO']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = 'Series code for the stock'
        self.format = 'Stock series should be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In local currency'
        self.examples = [2101.05, 604.75, 593.15, 608.15, 599.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be a whole number'
        self.examples = [3972485, 1751063, 1652355, 669269, 1262117]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The total value of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [248124475790000.0, 106190068700000.0, 100587748930000.0, 40221651265000.0, 71379372060000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be a whole number'
        self.examples = [27487, 19453, 451, 16041, 22822]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The total volume of stocks deliverable'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be a whole number'
        self.examples = [1202933, 369389, 898602, 449951, 936432]

    def cast(self, val):
        return int(val)

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of stocks deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be a floating point number between 0 and 1'
        self.examples = [0.3028, 0.211, 0.5438000000000001, 0.6723, 0.742]

    def cast(self, val):
        num = float(val)
        return round(num, 4)


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable}"
"class tradingday(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A specific day where stock trading occurs'
        self.valid_values = ""A string that fits the format: 'YYYY-MM-DD'""
        self.format = ""A string in the format: 'YYYY-MM-DD'""
        self.examples = ['2008-05-26', '2008-05-27', '2008-05-28', '2008-05-29', '2008-05-30']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A unique series of letters representing a particular stock on a stock exchange'
        self.valid_values = 'A string of uppercase letters'
        self.format = 'A string of uppercase letters'
        self.examples = ['BAJAJFINSV', 'BAJAJFINSV', 'BAJAJFINSV', 'BAJAJFINSV', 'BAJAJFINSV']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The series of a stock'
        self.valid_values = 'A string of uppercase letters'
        self.format = 'A string of uppercase letters'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.units = 'Local currency'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volumenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def cast(self, val):
        return int(val)

class turnoveramount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total value of shares traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Decimal number'
        self.units = 'Local currency'
        self.examples = [1000.0, 5000.0, 10000.0, 50000.0, 100000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class tradenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades executed'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class deliverablevolumenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares delivered'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def cast(self, val):
        return int(val)

class deliverablerate(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of shares delivered'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Decimal number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'date': tradingday, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volumenumber, 'turnover': turnoveramount, 'trades': tradenumber, 'deliverablevolume': deliverablevolumenumber, 'percentdeliverble': deliverablerate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index values'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values should be integer numbers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Dates should be formatted as YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a stock'
        self.valid_values = 'Symbols should be unique identifiers of stocks'
        self.format = 'Symbols should be capitalized strings'
        self.examples = ['BAJFINANCE', 'BAJAUTOFIN']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be floating point numbers'
        self.examples = [50.75, 48.1, 44.6, 45.25, 42.9]

    def cast(self, val):
        return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be integer numbers'
        self.examples = [7600, 5000, 3500, 6200, 3500]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be floating point numbers'
        self.examples = [38038000000.0, 24280000000.0, 15914500000.0, 27547500000.0, 15555500000.0]

    def cast(self, val):
        return round(float(val), 2)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be integer numbers'
        self.examples = [21, 1682, 13717, 59527, 979111]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be integer numbers'
        self.examples = [6, 4951, 14890, 116919, 6952047]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.0575, 0.451, 0.67, 0.828, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 3)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A column that represents an index or serial number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer value starting from 0 and incrementing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in the format YYYY-MM-DD'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date in the format YYYY-MM-DD'
        self.examples = ['2002-02-18', '2002-02-19', '2002-02-20', '2002-02-21', '2002-02-22']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Valid stock symbol'
        self.format = 'String value representing the stock symbol'
        self.examples = ['BHARTIARTL', 'BHARTI']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Valid stock series'
        self.format = 'String value representing the stock series'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [44.7, 41.35, 41.2, 42.2, 43.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer value'
        self.examples = [10381190, 3552660, 2512964, 1338196, 811327]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [47754314050000.0, 15126094130000.002, 10443478265000.0, 5722681000000.0, 3468413225000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades for the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer value'
        self.examples = [43331, 62231, 97361, 946705]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer value'
        self.examples = [6503775, 1741184, 485969, 399133]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockpercentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent deliverable of the stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.6265, 0.4901, 0.3632, 0.492]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index in a series'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid index value')
            return num
        except ValueError:
            raise Exception('Invalid index value')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date must fit the following format: 'YYYY-MM-DD'""
        self.format = ""Dates must be stored as strings in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date format')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol'
        self.valid_values = 'Stock symbol should be a string representing the official stock symbol'
        self.format = 'Stock symbol should be stored as uppercase strings'
        self.examples = ['BPCL']

    def cast(self, val):
        return str(val).upper()

class equityseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Equity Series'
        self.valid_values = 'Equity series should be a string representing the series of equity'
        self.format = 'Equity series should be stored as uppercase strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [381.2, 399.25, 370.5, 359.95, 380.3]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [8720, 22820, 152538, 59554, 43187]

    def cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid volume value')
            return num
        except ValueError:
            raise Exception('Invalid volume value')

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be an integer'
        self.examples = [348202920000.0, 857369935000.0, 5490785425000.0, 2263622690000.0, 1633889860000.0]

    def cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid turnover value')
            return num
        except ValueError:
            raise Exception('Invalid turnover value')

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples = []

    def cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            num = int(val)
            if num < 0:
                raise Exception('Invalid trade value')
            return num
        except ValueError:
            raise Exception('Invalid trade value')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = []

    def cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            num = int(val)
            if num < 0:
                raise Exception('Invalid deliverable volume value')
            return num
        except ValueError:
            raise Exception('Invalid deliverable volume value')

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = []

    def cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            num = float(val)
            if num < 0 or num > 1:
                raise Exception('Invalid percentage value')
            return round(num, 3)
        except ValueError:
            raise Exception('Invalid percentage value')


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': equityseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row numbers should be integers starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates in the format 'YYYY-MM-DD'""
        self.format = 'YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'Unique stock symbols'
        self.format = 'Uppercase letters'
        self.examples = ['BRITANNIA']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = 'Unique stock series'
        self.format = 'Uppercase letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [336.35, 591.8, 1230.15, 2743.7, 6900.15]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be represented as an integer'
        self.examples = [84, 4284, 20029, 134750, 5383773]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be represented as an integer'
        self.examples = [9614630000, 369444030000, 1347110005000, 36346747980000, 1954734263820000]

    def cast(self, val):
        return int(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be represented as an integer'
        self.examples = [27, 4496, 13231, 24920, 294264]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Deliverable Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable Volume should be represented as an integer'
        self.examples = [57, 3040, 19130, 89191, 4253015]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockpercentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Percent Deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent Deliverable should be represented as a floating point number'
        self.examples = [0.0279, 0.519, 0.651, 0.777, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 3)


MAPPING = {'unnamed0': rownumber, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverble}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Must be a string in the format: YYYY-MM-DD'
        self.format = 'Formatted as a string in the format: YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'Must be a valid stock symbol'
        self.format = 'All capital letters'
        self.examples = ['CIPLA']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = 'Must be a valid stock series type'
        self.format = 'All capital letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [309.025, 309.962, 158.14, 312.75, 475.215]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a whole number'
        self.examples = [379040.75, 1047786.0, 1815542.5, 505, 56895564]

    def cast(self, val):
        if not math.isnan(val):
            return int(float(val))
        else:
            return float('nan')

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a whole number'
        self.examples = [14478388221250.0, 37258610797500.0, 78484779041250.0, 54006065000.0, 4498902212300000.0]

    def cast(self, val):
        if not math.isnan(val):
            return int(float(val))
        else:
            return float('nan')

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trades should be a whole number'
        self.examples = [21724.0, 32967.0, 50869.5, 613.0, 603361.0]

    def cast(self, val):
        if not math.isnan(val):
            return int(float(val))
        else:
            return float('nan')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Deliverable Volume should be a whole number'
        self.examples = [283131.25, 578714.5, 976100.0, 2013.0, 10815575.0]

    def cast(self, val):
        if not math.isnan(val):
            return int(float(val))
        else:
            return float('nan')

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percent Deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent Deliverable should be a floating point number between 0 and 1'
        self.examples = [0.405, 0.517, 0.615, 0.0693, 0.9945]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid percentage')


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when the stock was traded'
        self.valid_values = ""Date should be in the format 'YYYY-MM-DD'""
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['2010-11-04', '2010-11-05', '2010-11-08', '2010-11-09', '2010-11-10']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbols for publicly traded companies'
        self.valid_values = 'Should be a valid symbol of a publicly traded company'
        self.format = 'Symbols are typically all uppercase letters'
        self.examples = ['AAPL', 'MSFT', 'AMZN', 'GOOGL', 'COALINDIA']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of a stock'
        self.valid_values = 'Should be a valid series type'
        self.format = 'Series are typically uppercase letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a stock at a specific time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.units = 'In currency of the country where the stock is traded'
        self.examples = [110.55, 110.85, 112.45, 110.6, 111.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class tradedvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [21437, 2236566, 3471441, 6321588, 479716245]

    def cast(self, val):
        return int(val)

class tradedvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Value of stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be a floating point number'
        self.examples = [773478560000.0, 69215412470000.0, 103233973572500.0, 159671114968750.03, 1.5700395821970002e+16]

    def cast(self, val):
        return float(val)

class numberoftrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples = [612, 33748, 46755, 64106, 351215]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [10786, 1240879, 1975260, 3233135, 187584905]

    def cast(self, val):
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.1463, 0.456, 0.568, 0.654, 0.9361]

    def cast(self, val):
        num = float(val)
        return round(num, 4)


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': tradedvolume, 'turnover': tradedvalue, 'trades': numberoftrades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the trading day'
        self.valid_values = 'Dates in the format YYYY-MM-DD'
        self.format = 'Dates in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class symbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Names of stocks'
        self.format = 'Names of stocks in uppercase'
        self.examples = ['DRREDDY']

    def cast(self, val):
        return str(val).upper()

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Names of stock series'
        self.format = 'Names of stock series in uppercase'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in INR of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.examples = [374.0, 365.65, 375.15, 384.95, 355.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [707, 166966, 295982, 527170, 21987146]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [43330850000.0, 17873602442500.0, 45066935315000.0, 102098466190000.0, 1.157852880817e+16]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [450, 17731, 27115, 43138, 929801]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deliverable volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [707, 97319, 169240, 276951, 2065429]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable volume'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number ranging from 0 to 1'
        self.examples = [0.0368, 0.412, 0.539, 0.644, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 3)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class stockdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        datetime_object = datetime.strptime(val, '%Y-%m-%d')
        return datetime_object.strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the Stock'
        self.valid_values = 'Stock symbol should be a string that corresponds to a valid stock'
        self.format = 'Stock symbol should be in uppercase'
        self.examples = ['EICHERMOT']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the Stock'
        self.valid_values = 'Stock series should be a string that corresponds to a valid stock series'
        self.format = 'Stock series should be in uppercase'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class tradedvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Traded volume should be an integer'
        self.examples = [10, 100, 1000, 500, 1000000]

    def cast(self, val):
        return int(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples = [10, 100, 1000, 500, 1000000]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [10, 100, 1000, 500, 1000000]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent of deliverable stocks'
        self.valid_range = [0, 1.0]
        self.dtype = float
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.5, 0.75, 0.9, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 3)


MAPPING = {'date': stockdate, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': tradedvolume, 'trades': stocktrades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class ordinalindex(NumericSemanticType):

    def __init__(self):
        self.description = 'This represents an ordered numerical index for tabular data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ordinal index should be formatted as a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val >= 0:
            return int(val)
        else:
            raise Exception('Invalid ordinal index')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in the format of year-month-day'
        self.valid_values = ""Dates must fit the following regex: '[0-9]{4}-[0-9]{2}-[0-9]{2}'""
        self.format = ""Dates must be stored as strings in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        match_obj = re.match('[0-9]{4}-[0-9]{2}-[0-9]{2}', val)
        if match_obj:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        else:
            raise Exception('Invalid date')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of an entity'
        self.valid_values = 'Stock symbol should be a capitalized string'
        self.format = 'Stock symbol should be a string'
        self.examples = ['GAIL']

    def cast(self, val):
        return val.upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock series of an entity'
        self.valid_values = 'Stock series should be a capitalized string'
        self.format = 'Stock series should be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return val.upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [67.8, 68.7, 66.35, 63.2, 64.95]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as a non-negative integer'
        self.examples = [76055, 98097, 92690, 173654, 86590]

    def cast(self, val):
        if val >= 0:
            return int(val)
        else:
            raise Exception('Invalid volume')

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of a stock in paisa'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be formatted as a non-negative integer'
        self.examples = [516516560000, 660045745000, 604688925000, 1138298685000, 552138810000]

    def cast(self, val):
        if val >= 0:
            return int(val)
        else:
            raise Exception('Invalid turnover')

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as a non-negative integer'
        self.examples = [486, 21391, 35444, 58707, 385848]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val >= 0:
            return int(val)
        else:
            raise Exception('Invalid number of trades')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as a non-negative integer'
        self.examples = [3792, 398397, 772646, 1494459, 45490377]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val >= 0:
            return int(val)
        else:
            raise Exception('Invalid deliverable volume')

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable percentage of a stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Deliverable percentage should be formatted as a floating point number between 0 and 1 with at most 4 decimal places'
        self.examples = [0.0957, 0.422, 0.536, 0.638, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            if num < 0 or num > 1:
                raise Exception('Invalid deliverable percentage')
            else:
                return round(num, 4)


MAPPING = {'unnamed0': ordinalindex, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class tradedate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Trade date'
        self.valid_values = 'Date should be a string in the format YYYY-MM-DD'
        self.format = 'Date should be a datetime object'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Symbol should be a string representing the stock'
        self.format = 'Symbol should be a string'
        self.examples = ['GRASIM']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series should be a string representing the stock series'
        self.format = 'Series should be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples: list[str] = [810.35, 1359.5, 2663.75, 5286.1, 173.41]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples: list[str] = [67697, 136003, 425373, 25358922, 523]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.examples: list[str] = [11645135115000.0, 24664849165000.0, 56856057066250.0, 2516801608125000.0, 15960225000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be formatted as an integer'
        self.examples: list[str] = [4710, 9620, 33442, 316677, 189]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples: list[str] = [32140, 70149, 220704, 17679422, 473]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class stockpercentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage deliverable of a stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be formatted as a floating point number'
        self.examples: list[str] = [0.373, 0.493, 0.621, 0.9815, 0.0631]

    def cast(self, val):
        if math.isnan(val):
            return None
        return float(val)


MAPPING = {'unnamed0': index, 'date': tradedate, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Each index must be a unique integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.valid_values = 'Date must fit the following format: YYYY-MM-DD'
        self.format = 'Dates must be strings in the format YYYY-MM-DD'
        self.examples = ['2000-01-11', '2000-01-12', '2000-01-13', '2000-01-14', '2000-01-17']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = ""Only 'HCLTECH' is valid""
        self.format = ""Symbol must be a string of the form 'HCLTECH'""
        self.examples = ['HCLTECH', 'HCLTECH', 'HCLTECH', 'HCLTECH', 'HCLTECH']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = ""Only 'EQ' is valid""
        self.format = ""Series must be a string of the form 'EQ'""
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float number'
        self.unit = 'In Indian Rupees (INR)'
        self.examples = [580.0, 1554.45, 1678.85, 1813.2, 1958.3]

    def cast(self, val):
        return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [1192200, 344850, 53000, 270950, 428800]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be an integer'
        self.examples = [188691461000000.0, 57143494500000.0, 9564879750000.0, 52561693250000.0, 85354733750000.0]

    def cast(self, val):
        return int(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [482, 35885, 55244, 81039, 465056]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [3095, 267145, 537944, 981880, 19739032]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable volume to traded volume'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a float between 0 and 1'
        self.examples = [0.0455999999999999, 0.38, 0.529, 0.636, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifiers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates must be in the format YYYY-MM-DD'
        self.format = 'YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'A Stock Symbol (also known as a Ticker Symbol) is a unique series of letters representing a particular stock'
        self.format = 'All Caps'
        self.examples = ['HDFC']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = 'Stock Series is a class of stock'
        self.format = 'All Caps'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples: list = [293.5, 304.05, 292.8, 296.45, 286.55]

    def cast(self, val):
        return float(val)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be a non-negative integer'
        self.examples: list = [22744, 255251, 269087, 305916, 197039]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a non-negative floating point number'
        self.unit = 'In INR'
        self.examples: list = [667536400000.0, 7749972375000.0, 7925367705000.0, 9181669105000.0, 5690480500000.0]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be a non-negative integer'
        self.examples: list = [973, 62011, 90405, 129754, 538170]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be a non-negative integer'
        self.examples: list = [1786, 268807, 1021574, 1939101, 148313109]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percent Deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent deliverable should be a non-negative floating point number between 0 and 1'
        self.examples: list = [0.119, 0.575, 0.667, 0.742, 0.9894]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')


MAPPING = {'unnamed0': identifier, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'Stock Symbol should be a string representing the abbreviated name of the company'
        self.format = 'All letters of the stock symbol should be capitalized'
        self.examples = ['HDFCBANK']

    def cast(self, val):
        return str(val).upper()

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the Stock'
        self.valid_values = 'Series should be a string represented in capital letters'
        self.format = 'All letters of the series should be capitalized'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In INR'
        self.examples = [170.0, 173.8, 166.95, 168.3, 168.35]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be represented as an integer'
        self.examples = [33259, 168710, 159820, 85026, 85144]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be represented as a floating point number'
        self.examples = [563812250000.0, 2952261350000.0, 2704093975000.0, 1432165990000.0, 1420157785000.0]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be represented as an integer'
        self.examples = [807, 26850, 44227, 104139, 790631]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be represented as an integer'
        self.examples = [4631, 262483, 627197, 1433151, 66696831]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be represented as a floating point number'
        self.examples = [0.1779, 0.518, 0.6, 0.674, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 4)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates must fit the following regex: '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'""
        self.format = ""Dates must be formatted as 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        match_obj = re.match('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid date')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = ""The stock symbol of a public company. The symbols used in the dataset are 'HEROHONDA' and 'HEROMOTOCO'""
        self.format = 'Symbols should be capitalized'
        self.examples = ['HEROHONDA', 'HEROMOTOCO']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = ""The series of a stock. The only series used in the dataset is 'EQ'""
        self.format = 'Series should be capitalized'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [697.288, 1689.425, 2584.488, 4048.95]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [207868, 354602, 596779, 11665947]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be an integer'
        self.examples = [15889654935000, 51497853022500, 111469393780000, 3359303001785000]

    def cast(self, val):
        return int(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [20107, 29540, 45236, 243105]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to identify rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid index')
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date on which the stock data was recorded'
        self.valid_values = 'Must fit the format YYYY-MM-DD'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Symbol representing a stock'
        self.valid_values = 'Must be a string of alphanumeric characters'
        self.format = 'Symbols should be stored as strings'
        self.examples = ['HINDALCO', 'HINDALC0']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series representing the type of equity'
        self.valid_values = ""Must be 'EQ'""
        self.format = 'Series should be stored as strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with two decimal places for paise'
        self.unit = 'In INR'
        self.examples = [813.45, 867.45, 900.35, 972.35, 1048.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be a non-negative integer'
        self.examples = [33799, 70944, 153030, 129708, 138829]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid volume')
        return num

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total value of shares traded in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.unit = 'In INR'
        self.examples = [2940055005000.0, 6409848250000.0, 14527435500000.0, 13581441355000.002, 15066226300000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades conducted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be a non-negative integer'
        self.examples = [38081, 52399, 73767]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid number of trades')
            return num

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares that are actually delivered'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be a non-negative integer'
        self.examples = [959947, 2150299, 3586920]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid deliverable volume')
            return num

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of shares delivered'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.315, 0.407, 0.524]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            if num < 0 or num > 1:
                raise ValueError('Invalid percentage')
            return round(num, 3)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index values'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index values are integer values starting from 0'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date values'
        self.valid_values: str = 'Date values should be strings in the format YYYY-MM-DD'
        self.format: str = 'Dates should be of the format YYYY-MM-DD'
        self.examples: list = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Stock symbols'
        self.valid_values: str = ""Stock symbols can take two values 'HINDUNILVR' or 'HINDLEVER'""
        self.format: str = ""Stock symbols should be either 'HINDUNILVR' or 'HINDLEVER'""
        self.examples: list = ['HINDUNILVR', 'HINDLEVER', 'HINDUNILVR', 'HINDUNILVR', 'HINDLEVER']

    def cast(self, val):
        if val in ['HINDUNILVR', 'HINDLEVER']:
            return val
        else:
            raise Exception('Invalid stock symbol')

class equityseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Equity series'
        self.valid_values: str = ""Equity series can only take the value 'EQ'""
        self.format: str = ""Equity series should always be 'EQ'""
        self.examples: list = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        if val == 'EQ':
            return val
        else:
            raise Exception('Invalid equity series')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [2136.6, 2307.55, 2281.05, 2199.9, 2288.2]

    def cast(self, val):
        return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The volume of stock traded'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Volume should be represented as an integer'
        self.examples: list = [24903, 58514, 80296, 190032, 192582]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The total amount of money exchanged in the stock market'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Turnover should be represented as a floating point number'
        self.examples: list = [5745329890000.0, 13447400525000.0, 17754819445000.0, 43741570135000.0, 45839194485000.0]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of trades made'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Trades should be represented as an integer'
        self.examples: list = [459, 28990, 43874, 67904, 946784]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The total volume of stock that was delivered'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Deliverable Volume should be represented as an integer'
        self.examples: list = [8020, 633658, 990780, 1616426, 139943805]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The percentage of stock that was delivered'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Percent Deliverable should be represented as a float'
        self.examples: list = [0.1754, 0.522, 0.61, 0.689, 0.9767]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 4)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': equityseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the record'
        self.valid_values = ""Dates should follow the format 'YYYY-MM-DD'""
        self.format = ""Dates are stored as strings in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Symbol of the ICICI Bank'
        self.format = 'Symbol is stored as a string'
        self.examples = ['ICICIBANK']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series of the stock'
        self.format = 'Series is stored as a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for cents'
        self.units = 'In INR'
        self.examples = [69.2, 74.75, 73.05, 69.5, 70.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples = [286260, 296264, 227624, 275149, 138809]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.examples = [2095439040000.0, 2173892790000.0, 1612793995000.0, 1982120640000.0, 953888205000.0]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as an integer'
        self.examples = [2595.0, 79312.25, 110101.0, 162953.5, 949891.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples = [15015.0, 699502.0, 1963117.0, 5948817.0, 232530747.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of deliverable volume to traded volume'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number between 0 and 1'
        self.examples = [0.099, 0.384, 0.476, 0.564, 0.983]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': series, 'prevclose': price, 'open': price, 'high': price, 'low': price, 'last': price, 'close': price, 'vwap': price, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer number'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in YYYY-MM-DD format'
        self.valid_values = 'Dates should follow the format YYYY-MM-DD'
        self.format = 'Dates should be stored as strings'
        self.examples: list[str] = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Symbol should be a string that represents a stock symbol'
        self.format = 'Symbol should be capitalized and stored as a string'
        self.examples: list[str] = ['INDUSINDBK']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series should be a string that represents a stock series'
        self.format = 'Series should be capitalized and stored as a string'
        self.examples: list[str] = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[float] = [28.95, 30.25, 28.15, 28.0, 27.05]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer number'
        self.examples: list[int] = [107224, 182693, 162820, 87901, 65684]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Turnover of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number (in INR units)'
        self.unit = 'In INR'
        self.examples: list[float] = [307582690000.0, 532073100000.0, 467571720000.0, 251000680000.0, 177918970000.0]

    def cast(self, val):
        num = float(val)
        return num

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as an integer number'
        self.examples: list[int] = [17441, 37490, 80793]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer number'
        self.examples: list[int] = [197739, 426701, 873787]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of the deliverable volume'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be formatted as a floating point number between 0 and 1'
        self.examples: list[float] = [0.351, 0.48, 0.62]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage deliverable')
        return num


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A generic index for a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number, starting from 0 and incrementing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val >= 0:
            return int_val
        else:
            raise Exception('Invalid index')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A Date'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Stock symbol'
        self.valid_values = 'Stock symbols should be a string of capital letters'
        self.format = 'Stock symbols should be a string of capital letters'
        self.examples = ['INFOSYSTCH', 'INFY']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock series'
        self.valid_values = 'Stock series should be a string of capital letters, with a finite set of possible values'
        self.format = 'Stock series should be a string of capital letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units)'
        self.units = 'In INR'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid price')

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be a whole number'
        self.examples = [5137, 56186, 164605, 81997, 7589]

    def cast(self, val):
        int_val = int(val)
        if int_val >= 0:
            return int_val
        else:
            raise Exception('Invalid volume')

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [8026657140000.001, 93529374750000.0, 259851640715000.0, 118590794075000.0, 9960941950000.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid turnover')

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be a whole number'
        self.examples = [59226, 90256, 135477]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        int_val = int(val)
        if int_val >= 0:
            return int_val
        else:
            raise Exception('Invalid trades')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be a whole number'
        self.examples = [407436, 801160, 1986846]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        int_val = int(val)
        if int_val >= 0:
            return int_val
        else:
            raise Exception('Invalid deliverable volume')

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage of deliverable stocks should be a floating point number between 0 and 1'
        self.examples = [0.0458, 0.456, 0.58, 0.664, 0.996]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 4)
        else:
            raise Exception('Invalid percent deliverable')


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': price, 'open': price, 'high': price, 'low': price, 'last': price, 'close': price, 'vwap': price, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        match_obj = re.match('[0-9]{4}-[0-9]{2}-[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid date')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'Stock symbol should be a string of capital letters'
        self.format = 'Stock symbol should be a string of capital letters'
        self.examples = ['IOC']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = 'Stock series should be a string of capital letters'
        self.format = 'Stock series should be a string of capital letters'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples = [200.0, 332.0, 419.575, 800.0]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volume should be an integer'
        self.examples = [192221, 562407, 1881595, 209929135]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock turnover should be an integer'
        self.examples = [7022101073750, 20663469707500, 70006987978750, 2868429636125000]

    def cast(self, val):
        return int(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock trades should be an integer'
        self.examples = [11643, 30419, 59112, 379888]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Deliverable Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock deliverable volume should be an integer'
        self.examples = [133597, 299746, 1203898, 139345365]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Percent Deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Stock percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.372, 0.484, 0.596, 0.9889]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 4)


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date the data was recorded'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = 'Dates should be in string format'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol representing the stock in the market'
        self.valid_values = 'Symbol should be a string representation of the stock symbol'
        self.format = 'Stock symbol should be in string format'
        self.examples = ['ITC']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series should be a string representation of the stock series'
        self.format = 'Stock series should be in string format'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In INR'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Total turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [100.0, 200.35, 300.5, 400.65, 500.8]

    def cast(self, val):
        return round(float(val), 2)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades conducted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock that was deliverable'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of the stock that was deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def cast(self, val):
        return round(float(val), 3) if pd.notna(val) else float('nan')


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': price, 'open': price, 'high': price, 'low': price, 'last': price, 'close': price, 'vwap': price, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Row Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class tradingdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Trading Date'
        self.valid_values = ""Date string in the format 'YYYY-MM-DD'""
        self.format = ""Date string in the format 'YYYY-MM-DD'""
        self.examples = ['2005-03-23', '2005-03-24', '2005-03-28', '2005-03-29', '2005-03-30']

    def cast(self, val):
        if re.match('^\\d{4}-\\d{2}-\\d{2}$', val):
            return val
        elif re.match('^\\d{2}/\\d{2}/\\d{4}$', val):
            return datetime.strptime(val, '%d/%m/%Y').strftime('%Y-%m-%d')
        else:
            raise Exception('Invalid date format')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = ""Valid stock symbols are 'JSWSTEEL' and 'JSWSTL'""
        self.format = 'Stock symbol must be a string'
        self.examples = ['JSWSTL', 'JSWSTEEL']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series'
        self.valid_values = ""Only valid stock series is 'EQ'""
        self.format = 'Stock series must be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a positive floating point number'
        self.examples = [10.0, 390.15, 369.2, 378.85, 368.05]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volume should be a positive integer'
        self.examples = [2087710, 1226479, 1235794, 624072, 466349]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a positive floating point number'
        self.examples = [87653754275000.0, 45626375060000.0, 47410479745000.0, 23419148680000.0, 17027753015000.0]

    def cast(self, val):
        return round(float(val), 2)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be a positive integer'
        self.examples = [21350, 32302, 50174, 667821]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be a positive integer'
        self.examples = [382057, 232172, 263415, 198916, 159641]

    def cast(self, val):
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percent Deliverable'
        self.valid_range = [0, 1.0]
        self.dtype = float
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.183, 0.1893, 0.2132, 0.3187, 0.3423]

    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 1 else None


MAPPING = {'unnamed0': rowidentifier, 'date': tradingdate, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid index')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of data'
        self.valid_values = ""Date in 'YYYY-MM-DD' format""
        self.format = ""Date must be a string in 'YYYY-MM-DD' format""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date')

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Valid stock symbols'
        self.format = 'Stock symbol must be a string'
        self.examples = ['KOTAKBANK', 'KOTAKMAH']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Valid stock series'
        self.format = 'Stock series must be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock prices'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices should be formatted as a floating point number'
        self.unit = 'In Rupees'
        self.examples = [212.35, 229.35, 246.95, 228.4, 225.9]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid price')

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock volumes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volumes should be formatted as an integer'
        self.examples = [7086, 73681, 105799, 40202, 24463]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid volume')

class stockturnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock turnovers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock turnovers should be formatted as an integer'
        self.unit = 'In Paise'
        self.examples = [162364030000.0, 1798729060000.0002, 2473093055000.0, 911954590000.0, 513574715000.00006]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid turnover')

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as an integer'
        self.examples = [375, 19646, 33764, 66802, 846705]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid trades')

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples = [1002, 112658, 354876, 819476, 58531864]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid volume')

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be formatted as a floating point number'
        self.examples = [0.0623, 0.402, 0.511, 0.632, 0.9901]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            val = float(val)
            if 0 <= val <= 1:
                return val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid percentage')


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol representing a particular stock'
        self.valid_values = 'Stock symbols are unique alphanumeric string of characters used to identify a particular stock on a stock market'
        self.format = 'Must be a string of alphanumeric characters, typically in uppercase'
        self.examples = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'FB']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series code of stocks'
        self.valid_values = 'Series code is usually alphanumeric and it identifies the type of stock'
        self.format = 'Must be a string of alphanumeric characters, typically in uppercase'
        self.examples = ['EQ', 'BE', 'N1', 'IL', 'BL']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a particular currency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.units = 'In local currency of the stock exchange'
        self.examples = [100.5, 1500.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        else:
            return price

class tradingvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock traded on a particular day'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a non-negative integer'
        self.examples = [100000, 5000000, 10000000, 50000, 1000000000]

    def cast(self, val):
        volume = int(val)
        if volume < 0:
            raise Exception('Invalid volume')
        else:
            return volume

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The total value of stocks traded during a specific period of time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [1000000000.5, 5000000000.3, 10000000000.0, 50000.9, 1000000000000.0]

    def cast(self, val):
        turnover = float(val)
        if turnover < 0:
            raise Exception('Invalid turnover')
        else:
            return turnover


MAPPING = {'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': tradingvolume, 'turnover': turnover}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in YYYY-MM-DD format'
        self.valid_values = ""Date should match the regex: '\\d{4}-\\d{2}-\\d{2}'""
        self.format = 'Dates should be in the format YYYY-MM-DD'
        self.examples = ['2003-07-09', '2003-07-10', '2003-07-11', '2003-07-14', '2003-07-15']

    def cast(self, val):
        datetime_obj = datetime.strptime(val, '%Y-%m-%d')
        return datetime_obj.strftime('%Y-%m-%d')

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Symbol for the company's stock""
        self.valid_values = 'Symbols should be uppercase strings'
        self.format = 'Symbols should be represented as strings'
        self.examples = ['MARUTI']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series should be uppercase strings'
        self.format = 'Series should be represented as strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In INR'
        self.examples = [164.3, 167.0, 173.35, 177.95, 176.2]

    def cast(self, val):
        return round(float(val), 2)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [35164283, 10464179, 11740117, 5982324, 6173689]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Total value of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [583552816185000.0, 174481962120000.0, 202462154745000.0, 106431310030000.0, 109200079040000.02]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [1096, 23089, 44031, 73714, 407715]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks deliverable'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [8537695.0, 4363947.0, 3014852.0, 1949217.0, 1307694.0]

    def cast(self, val):
        return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of total trades that are deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.2428, 0.417, 0.2568, 0.3258, 0.2118]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': identifier, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of the stock data'
        self.valid_values = ""Dates should be in the form 'yyyy-mm-dd'""
        self.format = ""Dates should be formatted as 'yyyy-mm-dd'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The symbol of the stock'
        self.valid_values = 'Symbols should be a string'
        self.format = 'Stock symbols should be strings'
        self.examples = ['M&M']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The series of the stock'
        self.valid_values = 'Series should be a string'
        self.format = 'Stock series should be strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [453.35, 489.65, 514.85, 524.55, 496.4]

    def cast(self, val):
        return float(val)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [67195, 37470, 227621, 198870, 91052]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.units = 'In currency'
        self.examples = [3045173830000.0, 1834710050000.0, 11867452450000.0, 10704557575000.0, 4626257510000.0]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [31124, 45919, 69098, 1174, 384902]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [300551, 542704, 978716, 5397, 7445667]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Deliverable percentage should be a floating point number between 0 and 1'
        self.examples = [0.497, 0.16, 0.0444, 0.388, 0.51]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in the format YYYY-MM-DD'
        self.valid_values = 'Date should match the format YYYY-MM-DD'
        self.format = 'Date should be a string of the form YYYY-MM-DD'
        self.examples = ['2010-01-08', '2010-01-21', '2010-01-22', '2010-01-12', '2010-01-13']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stockname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of the Stock'
        self.valid_values = 'Name should be a string that represents a valid stock name'
        self.format = 'Only uppercase letters should be used'
        self.examples = ['NESTLEIND']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series related to the stock'
        self.valid_values = 'Series should be a string that represents a valid stock series'
        self.format = 'Only uppercase letters should be used'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class stockvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def cast(self, val):
        return float(val)

class volumecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume count should be an integer'
        self.examples = [648, 825, 68346, 1032, 330361]

    def cast(self, val):
        return int(val)

class turnovervalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover value in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover value should be a floating point number'
        self.examples = [163931630000.0, 205790905000.0, 16985494094999.998, 257168240000.0, 82929564305000.0]

    def cast(self, val):
        return float(val)

class tradecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trade count should be an integer'
        self.examples = [3500, 6352, 14116, 10000, 122364]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of stocks in the stock market'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [438, 638, 67695, 718, 329193]

    def cast(self, val):
        return int(val)

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of deliverable stocks in the stock market'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be a floating point number between 0 and 1'
        self.examples = [0.6759000000000001, 0.7733, 0.9905, 0.6957, 0.9965]

    def cast(self, val):
        num = float(val)
        return round(num, 4) if 0 <= num <= 1 else float('nan')


MAPPING = {'date': date, 'symbol': stockname, 'series': stockseries, 'prevclose': stockvalue, 'open': stockvalue, 'high': stockvalue, 'low': stockvalue, 'last': stockvalue, 'close': stockvalue, 'vwap': stockvalue, 'volume': volumecount, 'turnover': turnovervalue, 'trades': tradecount, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The stock symbol of a company'
        self.valid_values = 'The stock symbol must be a valid symbol of a company listed on the NSE'
        self.format = 'The stock symbol must be a string of alphanumeric characters with no special characters'
        self.examples = ['HDFCBANK', 'BPCL', 'DRREDDY', 'HDFC', 'CIPLA']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price must be a positive floating point number'
        self.examples = [17.05, 310.05, 600.05, 1385.0, 33399.95]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid stock price')
        return num

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The stock volume must be a positive integer'
        self.examples = [3, 102741, 575624, 2005406, 479716245]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid stock volume')
        return num

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The stock turnover must be a positive integer'
        self.examples = [10470000, 8999080927500, 45944651585000, 129742971698750, 15700395821970000]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid stock turnover')
        return num

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of trades must be a positive integer'
        self.examples = [20, 18132, 35948, 64171, 1205984]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise ValueError('Invalid number of trades')
        return num

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The deliverable volume must be a positive integer'
        self.examples = [6, 71106, 322400, 1090932, 187584905]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise ValueError('Invalid deliverable volume')
        return num

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent of deliverable of a stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'The percent of deliverable must be a floating point number between 0 and 1'
        self.examples = [0.0279, 0.41, 0.542, 0.664, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid percent of deliverable')
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date must be in the format YYYY-MM-DD'
        self.format = ""Date should be a string in the form 'YYYY-MM-DD'""
        self.examples = ['2014-05-13', '2013-05-16', '2013-06-03', '2013-05-31', '2013-05-30']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The series of a stock'
        self.valid_values = ""The stock series must be 'EQ'""
        self.format = ""The stock series should be the string 'EQ'""
        self.examples = ['EQ']

    def cast(self, val):
        if val != 'EQ':
            raise ValueError('Invalid stock series')
        return val


MAPPING = {'symbol': stocksymbol, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable, 'date': date, 'series': stockseries}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = 'Date string of the format YYYY-MM-DD'
        self.format = ""Dates must be stored as strings of the format 'YYYY-MM-DD'""
        self.examples = ['2004-11-05', '2004-11-08', '2004-11-09', '2004-11-10', '2004-11-11']

    def cast(self, val):
        datetime.strptime(val, '%Y-%m-%d')
        return val

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of a company'
        self.valid_values = 'A unique string representing the stock of a company'
        self.format = 'Stock symbols are stored as uppercase strings'
        self.examples = ['NTPC']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of a stock'
        self.valid_values = 'A string representing the series of a stock'
        self.format = 'Stock series are stored as uppercase strings'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock prices are floating point numbers (in INR) with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volume is stored as an integer'
        self.examples = [232535736, 68865277, 37460886, 17413433, 15961426]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover is a floating point number (in INR)'
        self.examples = [1700363184890000.0, 529402375175000.0, 282023582430000.0, 131158506690000.02, 119303674940000.02]

    def cast(self, val):
        return float(val)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades is stored as an integer'
        self.examples = [22590, 34270, 53559]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume is stored as an integer'
        self.examples = [115350904, 25571231, 13585363, 7039001, 7286922]

    def cast(self, val):
        return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage of deliverable stocks is a floating point number between 0 and 1 with up to 4 decimal places'
        self.examples = [0.4961, 0.3713, 0.3627, 0.4042, 0.4565]

    def cast(self, val):
        num = round(float(val), 4)
        if num < 0 or num > 1:
            raise ValueError('Invalid percentage')
        return num


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integers starting from 0 and incrementing by 1'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock price'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the Stock'
        self.valid_values = 'Stock symbols are unique identifiers assigned to each stock for trading purposes'
        self.format = 'Stock symbols are usually 1-4 characters in length and all caps'
        self.examples = ['ONGC']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the Stock'
        self.valid_values = 'Series of the stock usually denotes the type of contract'
        self.format = 'Stock series are usually 1-4 characters in length and all caps'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [60.0, 177.45, 305.4, 845.125, 1484.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples: list = [9600, 17900, 27000, 35600, 11400]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.examples: list = [801250000.0, 56006681259999.99, 99025155872500.0, 154872821457500.0, 4348315656105001.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as an integer'
        self.examples: list = [864.0, 39218.25, 53557.0, 75618.5, 364976.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples: list = [997.0, 514424.0, 1271286.0, 2979299.0, 95873845.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverable should be formatted as a floating point number between 0 and 1'
        self.examples: list = [0.0828999999999999, 0.418, 0.533, 0.619, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable}"
"class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Stock in Market'
        self.valid_values = 'Valid stock symbols are alphabets in upper case'
        self.format = 'Stock symbols are string of alphabets'
        self.examples = ['AAPL', 'GOOGL', 'TSLA', 'AMZN', 'MSFT']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of a Stock in Market'
        self.valid_values = ""The series type of the stock, usually 'EQ' for Equity""
        self.format = 'Stock series are string of alphabets'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [100.5, 1200.3, 100000.0, 0.9, 50000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be represented as an integer'
        self.examples = [2339470, 3947345, 6629918, 481058927, 1000000]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Monetary value of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be represented as a floating point number'
        self.examples = [26819862982500.0, 53189949405000.0, 103956245812500.0, 4930560669525000.0, 10000000000000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades executed'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be represented as an integer'
        self.examples = [18770, 32081, 50584, 350022, 10000]

    def cast(self, val):
        if math.isnan(val):
            return 0
        return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deliverable stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable Volume should be represented as an integer'
        self.examples = [1310524, 2325513, 4051939, 185656354, 1000000]

    def cast(self, val):
        return int(val)

class stockdeliverablerate(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks to traded stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Deliverable Rate should be represented as a floating point number'
        self.examples = [0.487, 0.617, 0.703, 0.9972, 0.5]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockdeliverablerate}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol representing a specific stock'
        self.valid_values = ""Symbol should be a string, usually an abbreviation of the company's name""
        self.format = 'Symbol should be stored as a string in all upper-case letters'
        self.examples = ['RELIANCE', 'GOOG', 'AAPL', 'AMZN', 'MSFT']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of a specific stock'
        self.valid_values = ""Series should be a string, often 'EQ' denoting Equity""
        self.format = 'Series should be stored as a string in all upper-case letters'
        self.examples = ['EQ', 'NIFTY', 'SENSEX', 'NASDAQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of a stock at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [233.05, 251.7, 271.85, 282.5, 294.35]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volumetraded(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Volume of a stock traded at a given point in time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Volume should be formatted as an integer'
        self.examples: list = [4456424, 9487878, 26833684, 15682286, 19870977]

    def cast(self, val):
        return int(val)

class turnover(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Total value of shares traded during a specific period'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Turnover should be formatted as a floating point number'
        self.examples: list = [111131914445000.0, 250022190690000.0, 737369727570000.0, 463325404090000.0, 613838765740000.0]

    def cast(self, val):
        return float(val)


MAPPING = {'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volumetraded, 'turnover': turnover}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date values should be in 'yyyy-mm-dd' format""
        self.format = 'Dates should be stored as strings'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Symbol should be a string'
        self.format = 'Symbol should be stored as a string'
        self.examples = ['SBIN', 'SBIN', 'SBIN', 'SBIN', 'SBIN']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'Series should be a string'
        self.format = 'Series should be stored as a string'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be a floating point number'
        self.examples: list = [243.65, 259.1, 248.45, 261.0, 273.3]

    def cast(self, val):
        return round(float(val), 2)

class volumestock(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples: list = [2373228, 4495741, 3434058, 6658801, 7873985]

    def cast(self, val):
        return int(val)

class turnoverstock(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples: list = [57153383840000.0, 113050615659999.98, 86660084115000.0, 174581740585000.0, 211828694020000.0]

    def cast(self, val):
        return round(float(val), 2)

class tradesstock(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples: list = [4016, 84657, 116851, 175056, 1155236]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples: list = [15480, 353760, 679989, 4349523, 133331056]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable volume of the stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage of deliverable volume should be a floating point number between 0 and 1'
        self.examples: list = [0.0294, 0.191, 0.274, 0.362, 0.9482]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 4)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volumestock, 'turnover': turnoverstock, 'trades': tradesstock, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class unnamedindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class stockdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in stock market data'
        self.valid_values = ""Dates must be in the form 'yyyy-mm-dd'""
        self.format = ""Dates should be strings in the format 'yyyy-mm-dd'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol representing a specific stock'
        self.valid_values = 'Symbols should be strings representing a specific stock'
        self.format = 'Symbols should be strings with all upper case characters'
        self.examples = ['SHREECEM']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of stock'
        self.valid_values = ""Series should be 'EQ'""
        self.format = ""Series should be 'EQ'""
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in INR units) with at least two decimal places'
        self.unit = 'In INR'
        self.examples = [64.75, 59.85, 60.0, 60.6, 60.45]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [30530, 23525, 23535, 8931, 5115]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Turnover of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [198842050000.0, 142791950000.0, 141292250000.0, 54049825000.0, 30795800000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples = [5981, 6763, 11, 1430, 3848]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [16604, 26521, 5, 4248, 9431]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.682, 0.187, 0.0538999999999999, 0.567, 0.702]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 3)


MAPPING = {'unnamed0': unnamedindex, 'date': stockdate, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as a non-negative integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of an event'
        self.valid_values = ""Date should be a string in the format 'yyyy-mm-dd'""
        self.format = ""Date should be formatted as 'yyyy-mm-dd'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The symbol of a stock'
        self.valid_values = 'The symbol of a stock in the NIFTY 50 index'
        self.format = 'Stock symbol should be a string'
        self.examples = ['SUNPHARMA']

    def cast(self, val):
        return str(val)

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The series code of a stock'
        self.valid_values = 'The series code of a stock in the NIFTY 50 index'
        self.format = 'Series code should be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [1699.1, 1835.05, 1810.45, 1746.9, 1745.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as a non-negative integer number'
        self.examples = [3024, 5787, 6105, 3472, 4125]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid volume')
        return num

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The turnover of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be formatted as a floating point number'
        self.unit = 'In INR'
        self.examples = [552152475000.0, 1045115490000.0, 1078563995000.0, 607363240000.0, 668874015000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be formatted as a non-negative integer number'
        self.examples = [567, 39602, 64567, 97365, 855830]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of trades')
        return num

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be formatted as a non-negative integer number'
        self.examples = [391, 70458, 396125, 1404885, 216377820]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise Exception('Invalid deliverable volume')
        return num

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of the deliverable volume of a stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage of deliverable volume should be formatted as a floating point number between 0 and 1'
        self.examples = [0.0813, 0.447, 0.578, 0.677, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage of deliverable volume')
        return round(num, 3)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': series, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of the company'
        self.valid_values = 'The symbol should be a valid and recognized stock symbol'
        self.format = 'Stock symbols must be uppercase'
        self.examples = ['TATAMOTORS', 'TELCO', 'AAPL', 'GOOGL', 'AMZN']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The series of equity shares'
        self.valid_values = 'The series should be a string'
        self.format = 'Series should be uppercase'
        self.examples = ['EQ', 'BL', 'IL', 'N1', 'N2']

    def cast(self, val):
        return str(val).upper()

class datestock(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.valid_values = 'Date should be of the format YYYY-MM-DD'
        self.format = 'Date should be a string of the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in INR units) with two decimal places for paisa'
        self.unit = 'In INR'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume of stocks should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def cast(self, val):
        return int(val)

class turnoverstock(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of stocks in cr.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover of stocks should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def cast(self, val):
        return int(val)

class tradesstock(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades for stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trades should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of stocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume of stocks should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of deliverable stocks'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage of deliverable stocks should be a float between 0 and 1'
        self.examples = [0.1, 0.15, 0.25, 0.2, 0.175]

    def cast(self, val):
        if math.isnan(val):
            return 0.0
        else:
            return round(float(val), 3)


MAPPING = {'symbol': stocksymbol, 'series': stockseries, 'date': datestock, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnoverstock, 'trades': tradesstock, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be in the 'yyyy-mm-dd' format""
        self.format = ""Date should be a string in the form 'yyyy-mm-dd'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except:
            raise Exception('Invalid date')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol'
        self.valid_values = 'Stock Symbol should be a string representing the ticker symbol for the stock'
        self.format = 'Stock Symbol should be a string in ALL CAPS'
        self.examples = ['TATASTEEL', 'TISCO']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in local currency units)'
        self.unit = 'In local currency'
        self.examples = [142.35, 152.45, 150.8, 156.55, 168.25]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples = [2003185, 1555136, 3840284, 2560449, 3641691]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnover should be formatted as an integer'
        self.examples = [30231643945000, 23487854555000, 60233642704999, 42915295930000, 63324587285000]

    def cast(self, val):
        return int(val)


MAPPING = {'date': date, 'symbol': stocksymbol, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Symbol of a Company'
        self.valid_values = 'The stock symbol must be a valid ticker symbol for a company listed in the NIFTY 50 index'
        self.format = 'Stock symbols are uppercase strings that represent publicly traded shares of a particular stock on a particular stock market'
        self.examples = ['TCS', 'INFY', 'RELIANCE', 'HDFC', 'HDFCBANK']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Series of a Company'
        self.valid_values = 'The stock series must be a valid series code for a company listed in the NIFTY 50 index'
        self.format = 'Stock series are uppercase strings that represent the series of a particular stock on a particular stock market'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in INR of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Stock price should be formatted as a floating point number (in INR units) with two decimal places for paise'
        self.unit = 'In INR'
        self.examples: list[str] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volume should be formatted as an integer number'
        self.examples: list[str] = [17116372, 5055400, 3830750, 3058151, 2649332]

    def cast(self, val):
        return int(val)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock volume should be formatted as an integer number'
        self.examples: list[str] = [17116372, 5055400, 3830750, 3058151, 2649332]

    def cast(self, val):
        return int(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of a stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Stock trades should be formatted as an integer number'
        self.examples: list[str] = [46749, 68901, 110630, 542541, 1219]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)


MAPPING = {'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'percentdeliverble': stockprice, 'volume': stockvolume, 'deliverablevolume': stockvolume, 'trades': stocktrades}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid row index')
        return val

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should follow the 'YYYY-MM-DD' format""
        self.format = ""Date in 'YYYY-MM-DD' format""
        self.examples = ['2006-08-28', '2006-08-29', '2006-08-30', '2006-08-31', '2006-09-01']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise Exception('Invalid date')

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = 'Any string'
        self.format = 'String in uppercase'
        self.examples = ['TECHM']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of the stock'
        self.valid_values = 'Any string'
        self.format = 'String in uppercase'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float'
        self.units = 'In INR'
        self.examples = [365.0, 554.25, 539.3, 528.1, 538.45]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [15166163, 3929113, 2034983, 1670990, 1176195]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid volume')
        return val

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a float'
        self.units = 'In Paise'
        self.examples = [837176013020000.0, 215153038915000.0, 107762957620000.0, 89044643830000.0, 63803856150000.0]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid turnover')
        return val

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [3777529, 727534, 345064, 286440, 213842]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid deliverable volume')
        return val

class deliverableratio(NumericSemanticType):

    def __init__(self):
        self.description = 'Deliverable ratio of the stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Deliverable ratio should be a float between 0 and 1'
        self.examples = [0.2491, 0.1852, 0.1696, 0.1714, 0.1818]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid deliverable ratio')
        return val


MAPPING = {'unnamed0': rowindex, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': turnover, 'deliverablevolume': deliverablevolume, 'percentdeliverble': deliverableratio}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Numeric index of the data'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer numbers starting from 0'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date in YYYY-MM-DD format'
        self.valid_values: str = 'All valid dates in the form of YYYY-MM-DD'
        self.format: str = 'YYYY-MM-DD'
        self.examples: list = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Symbol of the stock'
        self.valid_values: str = 'All valid stock symbols'
        self.format: str = 'Uppercase alphabets'
        self.examples: list = ['TITAN']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Series of the stock'
        self.valid_values: str = 'All valid stock series'
        self.format: str = 'Uppercase alphabets'
        self.examples: list = ['EQ']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.unit: str = 'In INR'
        self.examples: list = [144.95, 155.7, 147.4, 138.4, 149.5]

    def cast(self, val):
        return float(val)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Volume of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer number'
        self.examples: list = [23000, 26300, 20600, 31600, 36600]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Turnover of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.examples: list = [355037000000.0, 385870000000.0, 294485000000.0, 467275000000.0, 543996500000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Trades of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer number'
        self.examples: list = [993]

    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Deliverable volume of the stock'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer number'
        self.examples: list = [360]

    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return int(val)

class stockdeliverablepercent(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Deliverable percent of the stock'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Floating point number'
        self.examples: list = [0.0236]

    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return round(float(val), 4)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockdeliverablepercent}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of the data entry'
        self.valid_values = 'The date should be in the format YYYY-MM-DD'
        self.format = 'The date should be a string of the form YYYY-MM-DD'
        self.examples = ['2004-08-24', '2004-08-25', '2004-08-26', '2004-08-27', '2004-08-30']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol representing the stock in the stock market'
        self.valid_values = 'The stock symbol should be a string that is unique to the company'
        self.format = 'The stock symbol should be a string'
        self.examples = ['ULTRACEMCO']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = 'The stock series should be a string'
        self.format = 'The stock series should be a string'
        self.examples = ['EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The stock price should be a float with two decimal places'
        self.unit = 'In INR'
        self.examples = [10.0, 260.2, 255.55, 270.7, 262.25]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of the stock traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The volume of the stock traded should be an integer'
        self.examples = [6633956, 2794161, 2340926, 915106, 387417]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of the stock in INR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The turnover of the stock should be a float'
        self.examples = [178323693135000.0, 71401072765000.0, 62502313585000.0, 24195293220000.0, 10281084615000.0]

    def cast(self, val):
        return float(val)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of trades should be an integer'
        self.examples = [26078.0, 21219.302, 97.0, 12156.0, 20725.0]

    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The deliverable volume of the stock should be an integer'
        self.examples = [970249, 584835, 443707, 222763, 84031]

    def cast(self, val):
        return int(val)

class stockpercentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of the deliverable volume of the stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'The percentage deliverable should be a float between 0 and 1'
        self.examples = [0.1463, 0.2093, 0.1895, 0.2434, 0.2169]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return num


MAPPING = {'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverable}"
"class ordinal(NumericSemanticType):

    def __init__(self):
        self.description = 'An ordinal number represents the position of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else None

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A unique series of letters representing a particular stock or mutual fund'
        self.valid_values = 'It should be a string of uppercase alphabets'
        self.format = 'Only uppercase letters are allowed'
        self.examples = ['UNIPHOS', 'UPL', 'AAPL', 'GOOG', 'TSLA']

    def cast(self, val):
        return str(val).upper()

class stockseries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A unique series code representing a particular stock'
        self.valid_values = 'It should be a string of uppercase alphabets'
        self.format = 'Only uppercase letters are allowed'
        self.examples = ['EQ', 'N1', 'N2', 'N3', 'N4']

    def cast(self, val):
        return str(val).upper()

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class stockprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a stock in a specific moment in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The price should be a floating-point number'
        self.unit = 'In local currency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return num if num >= 0 else None

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares or contracts traded in a security or an entire market during a given period'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The volume should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else None

class turnover(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total value of the shares traded during a specific period'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The turnover should be an integer'
        self.unit = 'In local currency'
        self.examples = [10000, 20000, 30000, 40000, 50000]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else None

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades executed during a specific period'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of trades should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else None

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shares that are actually delivered or received by buyers and sellers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The deliverable volume should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        num = int(val)
        return num if num >= 0 else None

class percentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of shares that are actually delivered or received by buyers and sellers'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'The percentage deliverable should be a floating-point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 1 else None


MAPPING = {'unnamed0': ordinal, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverble}"
"class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of a company'
        self.valid_values = 'Must be a valid stock symbol of a company'
        self.format = 'All uppercase letters'
        self.examples = ['SESAGOA', 'VEDL', 'SSLT']

    def cast(self, val):
        return str(val).upper()

class datestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data entry'
        self.valid_values = 'Must be a valid date'
        self.format = 'YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-05', '2000-01-07', '2000-01-10', '2000-01-11']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of the stock at a certain point during the day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [119.5, 202.0, 358.05, 38.1, 4344.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid stock price')
        return num

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a non-negative integer'
        self.examples = [185345, 2441535, 8630236, 51, 270968028]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid stock volume')
        return num


MAPPING = {'symbol': stocksymbol, 'date': datestamp, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequential index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the transaction'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class stocksymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the stock'
        self.valid_values = ""The symbol for the stock should be 'WIPRO'""
        self.format = 'The stock symbol should be a string'
        self.examples = ['WIPRO', 'WIPRO', 'WIPRO', 'WIPRO', 'WIPRO']

    def cast(self, val):
        return str(val)

class stockseries(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.valid_values = ""The series for the stock should be 'EQ'""
        self.format = 'The stock series should be a string'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        return str(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [2724.2, 2942.15, 2990.1, 2932.25, 2697.7]

    def cast(self, val):
        return round(float(val), 2)

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [1599, 4392, 132297, 72840, 10110]

    def cast(self, val):
        return int(val)

class stockturnover(NumericSemanticType):

    def __init__(self):
        self.description = 'The turnover of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turnover should be a floating point number'
        self.examples = [435594205000.0, 1292192280000.0, 40533895620000.0, 21578221245000.0, 2727630390000.0]

    def cast(self, val):
        return round(float(val), 2)

class stocktrades(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of trades of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades should be an integer'
        self.examples = [25021.0, 36659.5, 55772.75, 793471.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class stockdeliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of the stock'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volume should be an integer'
        self.examples = [302350.0, 643211.0, 1197829.0, 35541399.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class stockpercentdeliverble(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent deliverable of the stock'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.332, 0.483, 0.597, 0.9394]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 4)


MAPPING = {'unnamed0': index, 'date': date, 'symbol': stocksymbol, 'series': stockseries, 'prevclose': stockprice, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'last': stockprice, 'close': stockprice, 'vwap': stockprice, 'volume': stockvolume, 'turnover': stockturnover, 'trades': stocktrades, 'deliverablevolume': stockdeliverablevolume, 'percentdeliverble': stockpercentdeliverble}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index must be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        index = int(val)
        if index < 0:
            raise Exception('Invalid index')
        return index

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A date'
        self.valid_values = ""Dates must fit the following regex: '\\d{4}-\\d{2}-\\d{2}'""
        self.format = ""Dates must be in the format 'YYYY-MM-DD'""
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('\\d{4}-\\d{2}-\\d{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid date')

class symbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'A symbol'
        self.valid_values = ""Symbols must be one of the following: ['ZEEL', 'ZEETELE']""
        self.format = 'Symbols are strings'
        self.examples = ['ZEEL', 'ZEETELE']

    def cast(self, val):
        if val not in ['ZEEL', 'ZEETELE']:
            raise Exception('Invalid symbol')
        return val

class series(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'A series'
        self.valid_values = ""Series must be one of the following: ['EQ']""
        self.format = 'Series are strings'
        self.examples = ['EQ']

    def cast(self, val):
        if val != 'EQ':
            raise Exception('Invalid series')
        return val

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Prices are floating point numbers'
        self.unit = 'In currency'
        self.examples = [1092.55, 1179.95, 1260.65, 1176.55, 1115.45]

    def cast(self, val):
        price = float(val)
        if price < 0:
            raise Exception('Invalid price')
        return price

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'A volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volumes are integers'
        self.examples = [1261391, 4616547, 8763127, 5164020, 755129]

    def cast(self, val):
        volume = int(val)
        if volume < 0:
            raise Exception('Invalid volume')
        return volume

class turnover(NumericSemanticType):

    def __init__(self):
        self.description = 'A turnover'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Turnovers are integers'
        self.examples = [148469028020000.0, 566921974510000.0, 1085177595800000.0, 586135272520000.0, 77773741030000.0]

    def cast(self, val):
        turnover = int(val)
        if turnover < 0:
            raise Exception('Invalid turnover')
        return turnover

class trades(NumericSemanticType):

    def __init__(self):
        self.description = 'A number of trades'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Trades are integers'
        self.examples = [296.0, 24578.75, 41074.0, 71462.5, 1088460.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        trades = int(val)
        if trades < 0:
            raise Exception('Invalid number of trades')
        return trades

class deliverablevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'A deliverable volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deliverable volumes are integers'
        self.examples = [4415.0, 513686.5, 893532.0, 1593444.0, 42891428.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        deliverablevolume = int(val)
        if deliverablevolume < 0:
            raise Exception('Invalid deliverable volume')
        return deliverablevolume

class percentdeliverable(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage deliverable'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage deliverables are floating point numbers between 0 and 1'
        self.examples = [0.0557, 0.307, 0.464, 0.594, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        percentdeliverable = float(val)
        if percentdeliverable < 0 or percentdeliverable > 1:
            raise Exception('Invalid percentage deliverable')
        return percentdeliverable


MAPPING = {'unnamed0': index, 'date': date, 'symbol': symbol, 'series': series, 'prevclose': price, 'open': price, 'high': price, 'low': price, 'last': price, 'close': price, 'vwap': price, 'volume': volume, 'turnover': turnover, 'trades': trades, 'deliverablevolume': deliverablevolume, 'percentdeliverble': percentdeliverable}"
"class companyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a company'
        self.valid_values = 'Company name should be a string'
        self.format = 'The name should be capitalized'
        self.examples = ['Adani Ports and Special Economic Zone Ltd.', 'Asian Paints Ltd.', 'Axis Bank Ltd.', 'Bajaj Auto Ltd.', 'Bajaj Finserv Ltd.']

    def cast(self, val):
        return str(val).title()

class industry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an industry'
        self.valid_values = 'Industry name should be a string'
        self.format = 'The name should be capitalized'
        self.examples = ['FINANCIAL SERVICES', 'ENERGY', 'CONSUMER GOODS', 'AUTOMOBILE', 'METALS']

    def cast(self, val):
        return str(val).upper()

class stocksymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Symbol of a stock'
        self.valid_values = 'Stock symbol should be a string'
        self.format = 'The symbol should be capitalized'
        self.examples = ['ADANIPORTS', 'DRREDDY', 'INFRATEL', 'AXISBANK', 'BAJAJ-AUTO']

    def cast(self, val):
        return str(val).upper()

class seriestype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of a stock series'
        self.valid_values = ""The series type should be 'EQ'""
        self.format = 'The series type should be capitalized'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def cast(self, val):
        return str(val).upper() if val == 'EQ' else 'UNKNOWN'

class isincode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISIN code of a stock'
        self.valid_values = 'ISIN code should be a string of 12 characters'
        self.format = 'The ISIN code should be capitalized'
        self.examples = ['INE742F01042', 'INE089A01023', 'INE121J01017', 'INE238A01034', 'INE917I01010']

    def cast(self, val):
        if len(str(val)) == 12:
            return str(val).upper()
        else:
            return 'INVALID'


MAPPING = {'companyname': companyname, 'industry': industry, 'symbol': stocksymbol, 'series': seriestype, 'isincode': isincode}"
"class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class booleanhealthindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid boolean health indicator')

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The Body Mass Index (BMI)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be formatted as a floating point number'
        self.unit = 'kg/m2'
        self.examples = [16.6, 20.34, 26.58, 24.21, 23.71]

    def cast(self, val):
        num = float(val)
        return num

class healthdays(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days of poor health'
        self.valid_range = [0, 30]
        self.dtype = float
        self.format = 'Health days should be formatted as a float'
        self.examples = [3.0, 0.0, 20.0, 0.0, 28.0]

    def cast(self, val):
        num = float(val)
        return num

class healthdays(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of days of poor health'
        self.valid_range = [0, 30]
        self.dtype = float
        self.format = 'Health days should be formatted as a float'
        self.examples = [3.0, 0.0, 20.0, 0.0, 28.0]

    def cast(self, val):
        num = float(val)
        return num

class agegroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age Group'
        self.valid_values = 'Age should be a string representing a range of ages or a specific age'
        self.format = ""Age range should be in the form 'X-Y' or 'X or older'""
        self.examples = ['55-59', '80 or older', '65-69', '75-79', '40-44']

    def cast(self, val):
        return str(val)

class diabetesstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Diabetes Status'
        self.valid_values = ""Diabetes status should be either 'No', 'Yes', 'No, borderline diabetes', or 'Yes (during pregnancy)'""
        self.format = 'Diabetes status should be a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'No']

    def cast(self, val):
        return str(val)

class generalhealthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'General Health Status'
        self.valid_values = ""General health status should be either 'Very good', 'Good', 'Excellent', 'Fair', or 'Poor'""
        self.format = 'General health status should be a string'
        self.examples = ['Very good', 'Very good', 'Fair', 'Good', 'Very good']

    def cast(self, val):
        return str(val)

class sleeptimehours(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of hours of sleep'
        self.valid_range = [0, 24]
        self.dtype = float
        self.format = 'Sleep time should be formatted as a float representing hours'
        self.examples = [5.0, 7.0, 8.0, 6.0, 8.0]

    def cast(self, val):
        num = float(val)
        return num


MAPPING = {'heartdisease': booleanhealthindicator, 'smoking': booleanhealthindicator, 'alcoholdrinking': booleanhealthindicator, 'stroke': booleanhealthindicator, 'diffwalking': booleanhealthindicator, 'physicalactivity': booleanhealthindicator, 'asthma': booleanhealthindicator, 'kidneydisease': booleanhealthindicator, 'skincancer': booleanhealthindicator, 'bmi': bodymassindex, 'physicalhealth': healthdays, 'mentalhealth': healthdays, 'agecategory': agegroup, 'diabetic': diabetesstatus, 'genhealth': generalhealthstatus, 'sleeptime': sleeptimehours}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class digitlabel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Label representing the digit in the image'
        self.valid_values = 'The value should be an integer from 0 to 9'
        self.format = 'Digit'
        self.examples = [7, 2, 1, 0, 4]

    def cast(self, val):
        return int(val)

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Pixel value in the image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Integer value within the range [0,255]'
        self.examples = [0, 125, 255]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > 255:
            raise Exception('Invalid pixel value')
        return val


MAPPING = {'unnamed0': index, 'label': digitlabel, '13x1': pixelvalue, '13x2': pixelvalue, '13x3': pixelvalue, '13x4': pixelvalue, '13x5': pixelvalue, '13x6': pixelvalue, '13x7': pixelvalue, '13x8': pixelvalue, '13x9': pixelvalue, '13x10': pixelvalue, '13x11': pixelvalue, '13x12': pixelvalue, '13x13': pixelvalue, '13x14': pixelvalue, '13x15': pixelvalue, '13x16': pixelvalue, '13x17': pixelvalue, '13x18': pixelvalue, '13x19': pixelvalue, '13x20': pixelvalue, '13x21': pixelvalue, '13x22': pixelvalue, '13x23': pixelvalue, '13x24': pixelvalue, '13x25': pixelvalue, '13x26': pixelvalue, '13x27': pixelvalue, '13x28': pixelvalue}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as a integer number'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class mnistlabel(NumericSemanticType):

    def __init__(self):
        self.description = 'The label of the MNIST image'
        self.valid_range = [0, 9]
        self.dtype = int
        self.format = 'Label should be a single digit integer'
        self.examples: list[int] = [5, 0, 4, 1, 9]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 9:
            return num
        else:
            raise Exception('Invalid MNIST label')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')

class pixelvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel value of the MNIST image'
        self.valid_range = [0, 255]
        self.dtype = int
        self.format = 'Pixel values should be integers between 0 and 255'
        self.examples: list[int] = [0, 163, 255, 120, 16]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 255:
            return num
        else:
            raise Exception('Invalid pixel value')


MAPPING = {'unnamed0': index, 'label': mnistlabel, '13x1': pixelvalue, '13x2': pixelvalue, '13x3': pixelvalue, '13x4': pixelvalue, '13x5': pixelvalue, '13x6': pixelvalue, '13x7': pixelvalue, '13x8': pixelvalue, '13x9': pixelvalue, '13x10': pixelvalue, '13x11': pixelvalue, '13x12': pixelvalue, '13x13': pixelvalue, '13x14': pixelvalue, '13x15': pixelvalue, '13x16': pixelvalue, '13x17': pixelvalue, '13x18': pixelvalue, '13x19': pixelvalue, '13x20': pixelvalue, '13x21': pixelvalue, '13x22': pixelvalue, '13x23': pixelvalue, '13x24': pixelvalue, '13x25': pixelvalue, '13x26': pixelvalue, '13x27': pixelvalue, '13x28': pixelvalue}"
"class carmanufacturer(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a car manufacturer'
        self.valid_values = 'Names should be strings, capitalized and without any special characters'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Chevrolet', 'Ford', 'Volkswagen', 'Toyota', 'Dodge']

    def cast(self, val):
        return str(val).title().strip()

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Names should be strings, capitalized and without any special characters'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Silverado 1500', 'Tundra', 'F-150', 'Sierra 1500', 'Beetle Convertible']

    def cast(self, val):
        return str(val).title().strip()

class carmanufacturingyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year a car was manufactured'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Years should be integers'
        self.examples = [2011, 2012, 2013, 2014, 2015]

    def cast(self, val):
        return int(val)

class enginefueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Type of fuel used by the car's engine""
        self.valid_values = ""Only accepted fuel types are 'regular unleaded', 'premium unleaded (required)', 'premium unleaded (recommended)', 'flex-fuel (unleaded/E85)', 'diesel'""
        self.format = 'Fuel types should be strings, all lowercase'
        self.examples = ['regular unleaded', 'premium unleaded (required)', 'premium unleaded (recommended)', 'flex-fuel (unleaded/E85)', 'diesel']

    def cast(self, val):
        return str(val).lower().strip()

class enginehorsepower(NumericSemanticType):

    def __init__(self):
        self.description = ""Horsepower of a car's engine""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Horsepower should be a floating point number'
        self.examples = [335.0, 300.0, 300.0, 230.0, 230.0]

    def cast(self, val):
        return float(val)

class enginecylinders(NumericSemanticType):

    def __init__(self):
        self.description = ""Number of cylinders in a car's engine""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Cylinders should be a floating point number'
        self.examples = [6.0, 6.0, 6.0, 6.0, 6.0]

    def cast(self, val):
        return float(val)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Type of car's transmission system""
        self.valid_values = ""Only accepted transmission types are 'AUTOMATIC', 'MANUAL', 'AUTOMATED_MANUAL', 'DIRECT_DRIVE', 'UNKNOWN'""
        self.format = 'Transmission types should be strings, all uppercase'
        self.examples = ['AUTOMATIC', 'MANUAL', 'AUTOMATED_MANUAL', 'DIRECT_DRIVE', 'UNKNOWN']

    def cast(self, val):
        return str(val).upper().strip()

class drivenwheels(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Drive train type of the car'
        self.valid_values = ""Only accepted drive trains are 'front wheel drive', 'rear wheel drive', 'all wheel drive', 'four wheel drive'""
        self.format = 'Drive trains should be strings, all lowercase'
        self.examples = ['front wheel drive', 'rear wheel drive', 'all wheel drive', 'four wheel drive']

    def cast(self, val):
        return str(val).lower().strip()

class numberofdoors(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of doors in a car'
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = 'Number of doors should be an integer'
        self.examples = [2, 3, 4, 5, 5]

    def cast(self, val):
        return int(val)

class vehiclesize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of the vehicle'
        self.valid_values = ""Only accepted sizes are 'Compact', 'Midsize', 'Large'""
        self.format = 'Sizes should be strings, first letter capitalized'
        self.examples = ['Compact', 'Midsize', 'Large']

    def cast(self, val):
        return str(val).title().strip()

class vehiclestyle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of the vehicle'
        self.valid_values = 'Styles should be strings, first letter of each word capitalized'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Sedan', '4dr SUV', 'Coupe', 'Convertible', '4dr Hatchback']

    def cast(self, val):
        return str(val).title().strip()

class highwaymileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Highway mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be an integer'
        self.examples = [26, 28, 30, 32, 34]

    def cast(self, val):
        return int(val)

class citymileage(NumericSemanticType):

    def __init__(self):
        self.description = 'City mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be an integer'
        self.examples = [19, 20, 21, 22, 23]

    def cast(self, val):
        return int(val)

class carpopularity(NumericSemanticType):

    def __init__(self):
        self.description = 'Popularity of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Popularity should be an integer'
        self.examples = [3916, 4000, 4100, 4200, 4300]

    def cast(self, val):
        return int(val)

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [46135.0, 40650.0, 36350.0, 29450.0, 34500.0]

    def cast(self, val):
        return float(val)


MAPPING = {'make': carmanufacturer, 'model': carmodel, 'year': carmanufacturingyear, 'enginefueltype': enginefueltype, 'enginehp': enginehorsepower, 'enginecylinders': enginecylinders, 'transmissiontype': transmissiontype, 'drivenwheels': drivenwheels, 'numberofdoors': numberofdoors, 'vehiclesize': vehiclesize, 'vehiclestyle': vehiclestyle, 'highwaympg': highwaymileage, 'citympg': citymileage, 'popularity': carpopularity, 'msrp': carprice}"
"class personidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Person ID should be formatted as a whole number'
        self.examples = [3748, 14658, 7064, 3739, 48933]

    def cast(self, val):
        return int(val)

class movieidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a movie'
        self.valid_values = ""Movie ID should be a string that starts with 'tm' followed by a series of digits""
        self.format = ""Movie ID should be stored as a string of the form 'tmXXXXX'""
        self.examples = ['tm32982', 'tm244149', 'tm39888', 'tm467467', 'tm158304']

    def cast(self, val):
        match_obj = re.match('tm[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid movie id')

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Robert De Niro', 'Jodie Foster', 'Albert Brooks', 'Harvey Keitel', 'Cybill Shepherd']

    def cast(self, val):
        return str(val).title()

class charactername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Character'
        self.valid_values = 'Character name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Travis Bickle', 'Iris Steensma', 'Tom', ""Matthew 'Sport' Higgins"", 'Betsy']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

class role(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Role of a Person in a movie'
        self.valid_values = ""Role should be either 'ACTOR' or 'DIRECTOR'""
        self.format = 'Role should be stored as a string'
        self.examples = ['ACTOR', 'DIRECTOR']

    def cast(self, val):
        if val.upper() == 'ACTOR' or val.upper() == 'DIRECTOR':
            return val.upper()
        else:
            raise Exception('Invalid role')


MAPPING = {'personid': personidentifier, 'id': movieidentifier, 'name': personname, 'character': charactername, 'role': role}"
"class identifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each title in the dataset'
        self.valid_values = ""Identifier must be alphanumeric and start with either 'ts' or 'tm'""
        self.format = 'Identifier must be a string'
        self.examples = ['ts300399', 'tm84618', 'tm154986', 'tm127384', 'tm120801']

    def cast(self, val):
        return str(val).strip()

class title(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of the film or series'
        self.valid_values = 'Title must be a string'
        self.format = 'Title should be capitalized appropriately'
        self.examples = ['Five Came Back: The Reference Films', 'Taxi Driver', 'Deliverance', 'Monty Python and the Holy Grail', 'The Dirty Dozen']

    def cast(self, val):
        return str(val).strip().title()

class type(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['MOVIE', 'SHOW']

    def cast(self, val):
        return str(val).upper() if str(val).upper() in self.valid_values else None

class releaseyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year in which the film or series was released'
        self.valid_range = [1895, datetime.now().year]
        self.dtype = int
        self.format = 'Release year must be a 4-digit integer'
        self.examples = [1994, 2005, 2010, 2020, 1945]

    def cast(self, val):
        return int(val)

class agecertification(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age certification of the film or series'
        self.valid_values = 'Age certification must be one of the standard MPAA film ratings or TV Parental Guidelines'
        self.format = 'Age certification must be a string'
        self.examples = ['TV-MA', 'R', 'TV-14', 'PG-13', 'PG']

    def cast(self, val):
        return str(val).upper() if str(val).upper() in self.valid_values else None

class runtime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Runtime of the film or series in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runtime should be an integer representing duration in minutes'
        self.unit = 'minutes'
        self.examples = [51, 114, 109, 91, 150]

    def cast(self, val):
        return int(val)

class genres(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Genres of the film or series'
        self.valid_values = 'Genres must be a list of strings'
        self.format = 'Genres should be a list of strings, each string represents a genre'
        self.examples = [""['documentation']"", ""['drama', 'crime']"", ""['drama', 'action', 'thriller', 'european']"", ""['fantasy', 'action', 'comedy']"", ""['war', 'action']""]

    def cast(self, val):
        return [x.strip().title() for x in re.findall(""'(.*?)'"", val, re.DOTALL)]

class productioncountries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Countries where the film or series was produced'
        self.valid_values = 'Countries should be a list of two-letter country codes'
        self.format = 'Countries should be a list of strings, each string represents a two-letter country code'
        self.examples = [""['US']"", ""['IN']"", ""['JP']"", '[]', ""['KR']""]

    def cast(self, val):
        country_codes = [x.strip().upper() for x in re.findall(""'(.*?)'"", val, re.DOTALL)]
        return [pycountry.countries.get(alpha_2=code).name for code in country_codes if pycountry.countries.get(alpha_2=code)]

class seasons(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of seasons in the series'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Number of seasons should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val) if not math.isnan(val) else None

class imdbidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'IMDB ID of the film or series'
        self.valid_values = ""IMDB ID must start with 'tt' followed by a series of digits""
        self.format = 'IMDB ID must be a string'
        self.examples = ['tt0075314', 'tt0060862', 'tt0071853', 'tt0061578', 'tt0063929']

    def cast(self, val):
        return str(val).strip()

class imdbscore(NumericSemanticType):

    def __init__(self):
        self.description = 'IMDB score of the film or series'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'IMDB score should be a floating point number'
        self.examples = [8.2, 7.7, 6.6, 5.5, 4.4]

    def cast(self, val):
        return round(float(val), 1) if not math.isnan(val) else None

class imdbvotes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of votes the film or series has on IMDB'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of votes should be an integer'
        self.examples = [808582, 107673, 534486, 72662, 10000]

    def cast(self, val):
        return int(val) if not math.isnan(val) else None

class tmdbpopularity(NumericSemanticType):

    def __init__(self):
        self.description = 'TMDB popularity score of the film or series'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'TMDB popularity score should be a floating point number'
        self.examples = [40.965, 10.01, 15.461, 20.398, 0.6]

    def cast(self, val):
        return round(float(val), 3) if not math.isnan(val) else None

class tmdbscore(NumericSemanticType):

    def __init__(self):
        self.description = 'TMDB score of the film or series'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'TMDB score should be a floating point number'
        self.examples = [8.179, 7.3, 7.811, 7.6, 6.5]

    def cast(self, val):
        return round(float(val), 3) if not math.isnan(val) else None


MAPPING = {'id': identifier, 'title': title, 'type': type, 'releaseyear': releaseyear, 'agecertification': agecertification, 'runtime': runtime, 'genres': genres, 'productioncountries': productioncountries, 'seasons': seasons, 'imdbid': imdbidentifier, 'imdbscore': imdbscore, 'imdbvotes': imdbvotes, 'tmdbpopularity': tmdbpopularity, 'tmdbscore': tmdbscore}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index column'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class youtubeidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'YouTube Video ID'
        self.valid_values = 'YouTube Video IDs consist of 11 characters, and can contain any alphanumeric characters'
        self.format = 'YouTube Video IDs must be strings of length 11'
        self.examples = ['-0Gj8-vB1q4', '-0SdAVK79lg', '-0vPFx-wRRI', '-0xzrMun0Rs', '-1LrH01Ei1w']

    def cast(self, val):
        return str(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description = 'Time in seconds'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Time should be formatted as a floating point number in seconds'
        self.examples = [30.0, 40.0, 110.0, 120.0, 0.0]

    def cast(self, val):
        return float(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description = 'Time in seconds'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Time should be formatted as a floating point number in seconds'
        self.examples = [30.0, 40.0, 110.0, 120.0, 0.0]

    def cast(self, val):
        return float(val)

class audiosetlabel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'AudioSet Label'
        self.valid_values = 'AudioSet Labels are strings that represent categories of audio'
        self.format = 'AudioSet Labels must be strings'
        self.examples = ['/m/0140xf,/m/02cjck,/m/04rlf', '/m/0155w,/m/01lyv,/m/0342h,/m/042v_gx,/m/04rlf,/m/04szw,/m/07s0s5r,/m/0fx80y,/m/0gg8l', '/m/025_jnm,/m/04rlf', '/m/01g90h,/m/04rlf', '/m/02p0sh1,/m/04rlf']

    def cast(self, val):
        return str(val)

class authoridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Author ID'
        self.valid_range = [0, 9]
        self.dtype = int
        self.format = 'Author ID should be formatted as an integer between 0 and 9'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class flag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if val in ['True', 'true', '1', 1]:
            return True
        elif val in ['False', 'false', '0', 0]:
            return False
        else:
            raise Exception('Invalid boolean value')

class flag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if val in ['True', 'true', '1', 1]:
            return True
        elif val in ['False', 'false', '0', 0]:
            return False
        else:
            raise Exception('Invalid boolean value')


MAPPING = {'unnamed0': index, 'ytid': youtubeidentifier, 'starts': time, 'ends': time, 'audiosetpositivelabels': audiosetlabel, 'authorid': authoridentifier, 'isbalancedsubset': flag, 'isaudioseteval': flag}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be an integer representing the number of years old a person is'
        self.examples = [27, 29, 30, 32, 28]

    def cast(self, val):
        return int(val)

class height(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a person'
        self.valid_range = [0, 300]
        self.dtype = int
        self.format = 'Height should be an integer representing the number of centimeters tall a person is'
        self.unit = 'cm'
        self.examples = [169, 185, 180, 195, 193]

    def cast(self, val):
        return int(val)

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a person'
        self.valid_range = [0, 500]
        self.dtype = int
        self.format = 'Weight should be an integer representing the number of kilograms a person weighs'
        self.unit = 'kg'
        self.examples = [67, 80, 80, 95, 92]

    def cast(self, val):
        return int(val)

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a person'
        self.valid_values = 'Nationality should match a country name as defined in the pycountry module'
        self.format = 'Nationality should be a string representing the country a person is from'
        self.examples = ['Argentina', 'Portugal', 'Netherlands', 'Sweden', 'Germany']

    def cast(self, val):
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise ValueError(f""'{val}' is not a valid country name"")

class club(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Club that a person belongs to'
        self.valid_values = 'Club should be a string representing the name of a club'
        self.format = 'Club should be a string'
        self.examples = ['FC Barcelona', 'Real Madrid', 'FC Bayern München', 'Paris Saint-Germain', 'FC Bayern München']

    def cast(self, val):
        return str(val)

class preferredfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Preferred foot of a football player'
        self.valid_values = ""Preferred foot should be either 'Right' or 'Left'""
        self.format = 'Preferred foot should be a string'
        self.examples = ['Left', 'Right', 'Left', 'Right', 'Right']

    def cast(self, val):
        if val in ['Right', 'Left']:
            return val
        else:
            raise ValueError(f""'{val}' is not a valid preferred foot value"")

class realface(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(f""'{val}' is not a valid real face value"")


MAPPING = {'age': age, 'heightcm': height, 'weightkg': weight, 'nationality': nationality, 'club': club, 'preferredfoot': preferredfoot, 'realface': realface}"
""
""
""
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each player in the FIFA dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be formatted as an integer'
        self.examples = [20801, 158023, 190871, 193080, 192985]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'Neymar Jr', 'De Gea', 'K. De Bruyne']

    def cast(self, val):
        return str(val).title()

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the player'
        self.valid_range = [1, 100]
        self.dtype = int
        self.format = 'Age should be formatted as an integer'
        self.examples = [33, 31, 26, 27, 27]

    def cast(self, val):
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of the player'
        self.valid_values = ""DOB should be in the format 'YYYY-MM-DD'""
        self.format = 'Date of birth should be stored as strings'
        self.examples = ['1985-02-05', '1987-06-24', '1992-02-05', '1990-11-07', '1991-06-28']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The height of the player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be formatted as an integer'
        self.unit = 'In centimeters'
        self.examples = [187, 170, 175, 193, 181]

    def cast(self, val):
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The weight of the player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be formatted as an integer'
        self.unit = 'In kilograms'
        self.examples = [83, 72, 68, 76, 70]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The nationality of the player'
        self.valid_values = 'Should be one of the recognized countries'
        self.format = 'Country should be stored as strings'
        self.examples = ['Portugal', 'Argentina', 'Brazil', 'Spain', 'Belgium']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val)
        else:
            raise Exception('Invalid country')

class playerclub(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The club of the player'
        self.valid_values = 'Should be one of the recognized club names'
        self.format = 'Club name should be stored as strings'
        self.examples = ['Juventus', 'FC Barcelona', 'Paris Saint-Germain', 'Manchester United', 'Manchester City']

    def cast(self, val):
        return str(val)

class playerscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The overall/potential score of the player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be formatted as an integer'
        self.examples = [94, 94, 92, 91, 91]

    def cast(self, val):
        return int(val)

class playerscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The overall/potential score of the player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be formatted as an integer'
        self.examples = [94, 94, 92, 91, 91]

    def cast(self, val):
        return int(val)

class playervalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The value of the player in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be formatted as a floating point number with two decimal places for cents'
        self.unit = 'In EUR'
        self.examples = [77000000, 110500000, 118500000, 72000000, 102000000]

    def cast(self, val):
        return round(float(val), 2)

class playerwage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The wage of the player in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wage should be formatted as a floating point number with two decimal places for cents'
        self.unit = 'In EUR'
        self.examples = [405000, 565000, 290000, 260000, 355000]

    def cast(self, val):
        return round(float(val), 2)

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The position of the player'
        self.valid_values = 'Should be one of the recognized position codes'
        self.format = 'Position codes should be stored as strings'
        self.examples = ['ST, LW', 'CF, RW, ST', 'LW, CAM', 'GK', 'CAM, CM']

    def cast(self, val):
        return str(val)

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        if val in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid foot preference')

class playerreputation(NumericSemanticType):

    def __init__(self):
        self.description = 'The international reputation of the player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Reputation should be formatted as an integer'
        self.examples = [5, 5, 5, 4, 4]

    def cast(self, val):
        return int(val)

class playerskill(NumericSemanticType):

    def __init__(self):
        self.description = 'The skill moves rating of the player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Skill moves rating should be formatted as an integer'
        self.examples = [5, 4, 5, 1, 4]

    def cast(self, val):
        return int(val)

class playerskill(NumericSemanticType):

    def __init__(self):
        self.description = 'The skill moves rating of the player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Skill moves rating should be formatted as an integer'
        self.examples = [5, 4, 5, 1, 4]

    def cast(self, val):
        return int(val)

class playerworkrate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The work rate of the player'
        self.valid_values = 'Should be one of the recognized work rate codes'
        self.format = 'Work rate codes should be stored as strings'
        self.examples = ['Medium/Medium', 'High/Medium', 'Medium/High', 'High/High', 'Medium/Low']

    def cast(self, val):
        return str(val)

class playerbodytype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The body type of the player'
        self.valid_values = 'Should be one of the recognized body type codes'
        self.format = 'Body type codes should be stored as strings'
        self.examples = ['Normal', 'Lean', 'Stocky', 'C. Ronaldo', 'Messi']

    def cast(self, val):
        return str(val)

class playerrealface(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid real face value')

class playerreleaseclause(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The release clause of the player in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Release clause should be formatted as a floating point number with two decimal places for cents'
        self.unit = 'In EUR'
        self.examples = [127100000.0, 226500000.0, 228100000.0, 138600000.0, 196400000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationality': country, 'club': playerclub, 'overall': playerscore, 'potential': playerscore, 'valueeur': playervalue, 'wageeur': playerwage, 'playerpositions': playerposition, 'preferredfoot': preferredfoot, 'internationalreputation': playerreputation, 'weakfoot': playerskill, 'skillmoves': playerskill, 'workrate': playerworkrate, 'bodytype': playerbodytype, 'realface': playerrealface, 'releaseclauseeur': playerreleaseclause}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each player in the game'
        self.valid_range = [1, 500000]
        self.dtype = int
        self.format = 'PlayerID should be a positive integer'
        self.examples = [158023, 20801, 190871, 200389, 183277]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = 'Name should be a string'
        self.format = 'The first letter of each name part should be capitalized'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'Neymar Jr', 'J. Oblak', 'E. Hazard']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = 'Name should be a string'
        self.format = 'The first letter of each name part should be capitalized'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'Neymar Jr', 'J. Oblak', 'E. Hazard']

    def cast(self, val):
        return str(val).title()

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a player'
        self.valid_range = [16, 50]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [32, 34, 27, 26, 28]

    def cast(self, val):
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a player'
        self.valid_values = 'DOB should be a string in the format YYYY-MM-DD'
        self.format = 'DOB should be in the format YYYY-MM-DD'
        self.examples = ['1987-06-24', '1985-02-05', '1992-02-05', '1993-01-07', '1991-01-07']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a player'
        self.valid_range = [150, 250]
        self.dtype = float
        self.format = 'Height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [170.0, 187.0, 175.0, 188.0, 175.0]

    def cast(self, val):
        return float(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a player'
        self.valid_range = [50, 150]
        self.dtype = float
        self.format = 'Weight should be a floating point number'
        self.unit = 'In kg'
        self.examples = [72.0, 83.0, 68.0, 87.0, 74.0]

    def cast(self, val):
        return float(val)

class playernationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a player'
        self.valid_values = 'Nationality should be a string that is a valid country name'
        self.format = 'The first letter of each name part should be capitalized'
        self.examples = ['Argentina', 'Portugal', 'Brazil', 'Slovenia', 'Belgium']

    def cast(self, val):
        if not pycountry.countries.get(name=str(val).title()):
            raise Exception('Invalid Nationality')
        return str(val).title()

class playerclub(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Club of a player'
        self.valid_values = 'Club should be a string'
        self.format = 'The first letter of each name part should be capitalized'
        self.examples = ['FC Barcelona', 'Juventus', 'Paris Saint-Germain', 'Atlético Madrid', 'Real Madrid']

    def cast(self, val):
        return str(val).title()

class playeroverall(NumericSemanticType):

    def __init__(self):
        self.description = 'Overall rating of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Overall rating should be an integer'
        self.examples = [94, 93, 92, 91, 91]

    def cast(self, val):
        return int(val)

class playervalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market value of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market value should be a floating point number'
        self.unit = 'In EUR'
        self.examples = [95500000.0, 58500000.0, 105500000.0, 77500000.0, 90000000.0]

    def cast(self, val):
        return float(val)

class playerwage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Wage of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wage should be a floating point number'
        self.unit = 'In EUR'
        self.examples = [565000.0, 405000.0, 290000.0, 125000.0, 470000.0]

    def cast(self, val):
        return float(val)

class playerpreferredfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Player's preferred foot for playing""
        self.valid_values = ""'Right' or 'Left'""
        self.format = ""Preferred foot should be one of 'Right' or 'Left'""
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']

    def cast(self, val):
        val = str(val).title()
        if val not in ['Right', 'Left']:
            raise Exception('Invalid Preferred Foot')
        return val

class playerbodytype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Player's body type""
        self.valid_values = ""One of 'Normal', 'Lean', 'Stocky', 'Messi', 'C. Ronaldo'""
        self.format = ""Body type should be one of 'Normal', 'Lean', 'Stocky', 'Messi', 'C. Ronaldo'""
        self.examples = ['Normal', 'Lean', 'Stocky', 'Messi', 'C. Ronaldo']

    def cast(self, val):
        val = str(val).title()
        if val not in ['Normal', 'Lean', 'Stocky', 'Messi', 'C. Ronaldo']:
            raise Exception('Invalid Body Type')
        return val


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationality': playernationality, 'club': playerclub, 'overall': playeroverall, 'valueeur': playervalue, 'wageeur': playerwage, 'preferredfoot': playerpreferredfoot, 'bodytype': playerbodytype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class urlidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'URL ID related to the team or league'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'URL ID should be a positive integer'
        self.examples = [241, 11, 5, 243, 1]

    def cast(self, val):
        num = int(val)
        if num <= 0:
            raise Exception('Invalid URL ID')
        return num

class leaguename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the league'
        self.valid_values = 'League name should be a string and could be of any valid football league around the world'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Spain Primera Division', 'English Premier League', 'Italian Serie B', 'Spanish Segunda División', 'Argentina Primera División']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'url': urlidentifier, 'leaguename': leaguename}"
"class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values that increment by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class bankruptcyflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class proportion(NumericSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid proportion')
        return num

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount expressed in yuan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be positive floating point numbers'
        self.unit = 'In Yuan'
        self.examples: list = [0.0, 0.01, 1.0, 10.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid currency amount')
        return num

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount expressed in yuan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be positive floating point numbers'
        self.unit = 'In Yuan'
        self.examples: list = [0.0, 0.01, 1.0, 10.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid currency amount')
        return num

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount expressed in yuan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be positive floating point numbers'
        self.unit = 'In Yuan'
        self.examples: list = [0.0, 0.01, 1.0, 10.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid currency amount')
        return num

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount expressed in yuan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be positive floating point numbers'
        self.unit = 'In Yuan'
        self.examples: list = [0.0, 0.01, 1.0, 10.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid currency amount')
        return num

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount expressed in yuan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be positive floating point numbers'
        self.unit = 'In Yuan'
        self.examples: list = [0.0, 0.01, 1.0, 10.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid currency amount')
        return num

class growthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'A growth rate, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid growth rate')
        return num

class growthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'A growth rate, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid growth rate')
        return num

class growthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'A growth rate, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid growth rate')
        return num

class growthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'A growth rate, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid growth rate')
        return num

class growthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'A growth rate, expressed as a float between 0 and 1'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise ValueError('Invalid growth rate')
        return num


MAPPING = {'unnamed0': idnumber, 'bankrupt': bankruptcyflag, 'roacbeforeinterestanddepreciationbeforeinterest': proportion, 'roaabeforeinterestandpercentaftertax': proportion, 'roabbeforeinterestanddepreciationaftertax': proportion, 'operatinggrossmargin': proportion, 'realizedsalesgrossmargin': proportion, 'operatingprofitrate': proportion, 'pretaxnetinterestrate': proportion, 'aftertaxnetinterestrate': proportion, 'nonindustryincomeandexpenditurerevenue': proportion, 'continuousinterestrateaftertax': proportion, 'cashflowrate': proportion, 'interestbearingdebtinterestrate': proportion, 'taxratea': proportion, 'netvaluepershareb': proportion, 'netvaluepersharea': proportion, 'netvaluepersharec': proportion, 'persistentepsinthelastfourseasons': proportion, 'cashflowpershare': proportion, 'operatingexpenserate': currency, 'researchanddevelopmentexpenserate': currency, 'revenuepershareyuan': currency, 'operatingprofitpershareyuan': currency, 'persharenetprofitbeforetaxyuan': currency, 'realizedsalesgrossprofitgrowthrate': growthrate, 'operatingprofitgrowthrate': growthrate, 'aftertaxnetprofitgrowthrate': growthrate, 'regularnetprofitgrowthrate': growthrate, 'continuousnetprofitgrowthrate': growthrate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values representing the index'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values representing the year'
        self.examples = [2021, 2020, 2019, 2018, 2017]

    def cast(self, val):
        return int(val)

class ticketssold(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Tickets Sold'
        self.valid_values = 'String of comma-separated numerical values representing the number of tickets sold'
        self.format = 'Numbers represented as strings with comma separators'
        self.examples = ['42,37,74,881', '22,36,38,958', '1,22,85,41,629', '1,31,15,36,128', '1,22,56,39,761']

    def cast(self, val):
        return val.replace(',', '')

class boxoffice(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Total Box Office'
        self.valid_values = 'String of comma-separated numerical values representing the total box office earnings'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,443,955', '$11,948,096,650', '$10,993,991,460']

    def cast(self, val):
        return val.replace(',', '').replace('$', '')

class boxoffice(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Total Box Office'
        self.valid_values = 'String of comma-separated numerical values representing the total box office earnings'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,443,955', '$11,948,096,650', '$10,993,991,460']

    def cast(self, val):
        return val.replace(',', '').replace('$', '')
    
    
class inflationadjustedboxoffice(boxoffice):

    def __init__(self):
        self.description = 'Total Inflation Adjusted Box Office'
        self.valid_values = 'String of comma-separated numerical values representing the total box office earnings adjusted for inflation'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,444,050', '$12,013,670,952', '$11,226,860,216']

class boxoffice(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Total Box Office'
        self.valid_values = 'String of comma-separated numerical values representing the total box office earnings'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,443,955', '$11,948,096,650', '$10,993,991,460']

    def cast(self, val):
        return val.replace(',', '').replace('$', '')
        
class averageticketprice(boxoffice):

    def __init__(self):
        self.description = 'Average Ticket Price'
        self.valid_values = 'String representing the average price of a ticket'
        self.format = 'A dollar sign followed by a number with two decimal places'
        self.examples = ['$9.16', '$9.11', '$8.97', '$8.65', '$8.43']


MAPPING = {'unnamed0': index, 'year': year, 'ticketssold': ticketssold, 'totalboxoffice': boxoffice, 'totalinflationadjustedboxoffice': inflationadjustedboxoffice, 'averageticketprice': averageticketprice}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the movie release'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [1995, 2001, 2008, 2014, 2021]

    def cast(self, val):
        return int(val)

class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of the movie'
        self.valid_values = 'Any string value that represents a movie title'
        self.format = 'Title should be a string'
        self.examples = ['Batman Forever', 'Independence Day', 'Men in Black', 'Titanic', 'Star Wars Ep. I: The Phantom Menace']

    def cast(self, val):
        return str(val)

class genre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Genre of the movie'
        self.valid_values = 'Adventure, Action, Drama'
        self.format = 'Genre should be a string'
        self.examples = ['Adventure', 'Action', 'Drama']

    def cast(self, val):
        if val in self.valid_values.split(', '):
            return str(val)
        else:
            raise ValueError('Invalid Genre')

class mpaarating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'MPAA Rating of the movie'
        self.valid_values = 'PG-13, PG, G, R'
        self.format = 'Rating should be a string'
        self.examples = ['PG-13', 'PG', 'G', 'R']

    def cast(self, val):
        if val in self.valid_values.split(', '):
            return str(val)
        else:
            raise ValueError('Invalid Rating')

class distributor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Distributor of the movie'
        self.valid_values = 'Any string value that represents a movie distributor'
        self.format = 'Distributor should be a string'
        self.examples = ['Walt Disney', 'Warner Bros.', 'Sony Pictures', '20th Century Fox', 'Paramount Pictures']

    def cast(self, val):
        return str(val)

class totalforyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Total for the year in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [184031112.0, 306169255.0, 250650052.0, 443319081.0, 430443350.0]

    def cast(self, val):
        num = float(val.replace(',', '').replace('$', ''))
        return round(num, 2)

class ticketssold(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of tickets sold'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tickets sold should be formatted as an integer'
        self.examples = [42306002, 69269062, 54607854, 94524324, 84732942]

    def cast(self, val):
        return int(val.replace(',', ''))


MAPPING = {'year': year, 'movie': movietitle, 'genre': genre, 'mpaarating': mpaarating, 'distributor': distributor, 'totalforyear': totalforyear, 'ticketssold': ticketssold}"
"class ranking(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of an entity in a specific context'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Ranking should be a non-zero positive integer'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num > 0 and num.is_integer():
            return num
        else:
            raise Exception('Invalid ranking')

class creativetype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of creative work'
        self.valid_values = 'Creative types are strings that describe a genre or type of creative work'
        self.format = 'Creative types are strings in title format'
        self.examples = ['Contemporary Fiction', 'Kids Fiction', 'Science Fiction', 'Fantasy', 'Super Hero']

    def cast(self, val):
        return str(val).title()

class moviecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of movies in a specific category'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of movies should be a non-negative integer'
        self.examples = [7442, 564, 724, 759, 129]

    def cast(self, val):
        num = int(str(val).replace(',', ''))
        if num >= 0:
            return num
        else:
            raise Exception('Invalid movie count')

class dollaramount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of money in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dollar amounts should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [96203727036.0, 32035539746.0, 29922660857.0, 21724062575.0, 20273157911.0]

    def cast(self, val):
        num = float(str(val).replace(',', '').replace('$', ''))
        if num >= 0:
            return num
        else:
            raise Exception('Invalid dollar amount')

class dollaramount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of money in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dollar amounts should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [96203727036.0, 32035539746.0, 29922660857.0, 21724062575.0, 20273157911.0]

    def cast(self, val):
        num = float(str(val).replace(',', '').replace('$', ''))
        if num >= 0:
            return num
        else:
            raise Exception('Invalid dollar amount')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number'
        self.unit = 'In percentage'
        self.examples = [40.46, 13.47, 12.59, 9.14, 8.53]

    def cast(self, val):
        num = float(str(val).replace('%', ''))
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid percentage')


MAPPING = {'rank': ranking, 'creativetypes': creativetype, 'movies': moviecount, 'totalgross': dollaramount, 'averagegross': dollaramount, 'marketshare': percent}"
"class distributorname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Movie Distributor'
        self.valid_values = 'Distributor names should be strings'
        self.format = 'The distributor name should be capitalized and may contain spaces or special characters'
        self.examples = ['Walt Disney', 'Warner Bros.', 'Sony Pictures', 'Universal', '20th Century Fox']

    def cast(self, val):
        return str(val).strip()

class movienumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Movies'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie numbers should be integers'
        self.examples = [588, 824, 747, 535, 525]

    def cast(self, val):
        return int(val)

class currencyamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be floating point numbers'
        self.unit = 'In USD'
        self.examples = ['$40,472,424,278', '$36,269,425,479', '$29,113,002,302', '$28,089,932,569', '$25,857,839,756']

    def cast(self, val):
        return float(val.replace('$', '').replace(',', ''))

class currencyamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Currency amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency amounts should be floating point numbers'
        self.unit = 'In USD'
        self.examples = ['$40,472,424,278', '$36,269,425,479', '$29,113,002,302', '$28,089,932,569', '$25,857,839,756']

    def cast(self, val):
        return float(val.replace('$', '').replace(',', ''))

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentages should be floating point numbers'
        self.unit = 'In Percentage'
        self.examples = ['17.02%', '15.25%', '12.24%', '11.81%', '10.88%']

    def cast(self, val):
        return float(val.replace('%', ''))


MAPPING = {'distributors': distributorname, 'movies': movienumber, 'totalgross': currencyamount, 'averagegross': currencyamount, 'marketshare': percent}"
"class genre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Genre of a Movie'
        self.valid_values = 'Genre should be a string that represents a valid movie genre'
        self.format = 'Movie genre should be a single word or two words separated by a slash'
        self.examples = ['Adventure', 'Action', 'Drama', 'Comedy', 'Thriller/Suspense']

    def cast(self, val):
        return str(val)

class numberofmovies(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Movies'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of movies should be an integer'
        self.examples: list[int] = [1102, 1098, 5479, 2418, 1186]

    def cast(self, val):
        return int(val.replace(',', ''))

class grossrevenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gross revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Gross revenue should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples: list[str] = ['$64,529,536,530', '$49,339,974,493', '$35,586,177,269', '$33,687,992,318', '$19,810,201,102']

    def cast(self, val):
        return float(val.replace(',', '').replace('$', ''))

class grossrevenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gross revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Gross revenue should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples: list[str] = ['$64,529,536,530', '$49,339,974,493', '$35,586,177,269', '$33,687,992,318', '$19,810,201,102']

    def cast(self, val):
        return float(val.replace(',', '').replace('$', ''))

class marketsharepercent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market share percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Market share should be formatted as a floating point number (in percentage units)'
        self.unit = 'In percentage'
        self.examples: list[str] = ['27.14%', '20.75%', '14.97%', '14.17%', '8.33%']

    def cast(self, val):
        return float(val.replace('%', ''))


MAPPING = {'genres': genre, 'movies': numberofmovies, 'totalgross': grossrevenue, 'averagegross': grossrevenue, 'marketshare': marketsharepercent}"
"class tableindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Table Index should be an integer starting from 0 and incrementing by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class tableposition(NumericSemanticType):

    def __init__(self):
        self.description = 'The position or rank of an entity in a list or table'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Table Position should be an integer starting from 1 and incrementing by 1 for each row'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class filmrating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The Motion Picture Association of America (MPAA) film rating system'
        self.valid_values = ""Valid ratings are 'G', 'PG', 'PG-13', 'R', 'NC-17' and 'Not Rated'""
        self.format = 'Film ratings should be in string format'
        self.examples = ['PG-13', 'R', 'PG', 'G', 'Not Rated']

    def cast(self, val):
        return str(val)

class movienumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of movies produced in a particular category'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie Number should be an integer'
        self.examples = [3243, 5480, 1535, 395, 5820]

    def cast(self, val):
        return int(val.replace(',', ''))

class currencyvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'A currency value, specifically in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency Value should be a floating point number'
        self.examples = [113524789243, 63497164978, 49124317794, 9572240391, 1918358283]

    def cast(self, val):
        return float(val.replace('$', '').replace(',', ''))

class currencyvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'A currency value, specifically in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Currency Value should be a floating point number'
        self.examples = [113524789243, 63497164978, 49124317794, 9572240391, 1918358283]

    def cast(self, val):
        return float(val.replace('$', '').replace(',', ''))

class percentvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage Value should be a floating point number'
        self.examples = [47.75, 26.71, 20.66, 4.03, 0.81]

    def cast(self, val):
        return float(val.replace('%', ''))


MAPPING = {'unnamed0': tableindex, 'rank': tableposition, 'mpaaratings': filmrating, 'movies': movienumber, 'totalgross': currencyvalue, 'averagegross': currencyvalue, 'marketshare': percentvalue}"
"class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Rank of a particular entity within a defined set'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val > 0:
            return val
        else:
            raise Exception('Invalid rank')

class source(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The source or origin of a movie'
        self.valid_values = 'Source must be a string describing the origin of the movie'
        self.format = 'Sources are categorized into a finite set of unique strings'
        self.examples = ['Original Screenplay', 'Based on Fiction Book/Short Story', 'Based on Comic/Graphic Novel', 'Remake', 'Based on Real Life Events']

    def cast(self, val):
        return str(val)

class moviecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of movies produced from a particular source'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie count should be a non-negative integer'
        self.examples = [7946, 2150, 249, 328, 3225]

    def cast(self, val):
        val = int(val.replace(',', ''))
        if val >= 0:
            return val
        else:
            raise Exception('Invalid movie count')

class dollaramount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount in dollars'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dollar amount should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [13387264.0, 21863076.0, 93855378.0, 39123963.0, 3534374.0]

    def cast(self, val):
        val = float(val.replace('$', '').replace(',', ''))
        if val >= 0:
            return val
        else:
            raise Exception('Invalid dollar amount')

class dollaramount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount in dollars'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dollar amount should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [13387264.0, 21863076.0, 93855378.0, 39123963.0, 3534374.0]

    def cast(self, val):
        val = float(val.replace('$', '').replace(',', ''))
        if val >= 0:
            return val
        else:
            raise Exception('Invalid dollar amount')

class marketshare(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage share of a particular entity in the market'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Market share should be a non-negative floating point number between 0 and 100'
        self.examples = [44.74, 19.77, 9.83, 5.4, 4.79]

    def cast(self, val):
        val = float(val.replace('%', ''))
        if 0 <= val <= 100:
            return val
        else:
            raise Exception('Invalid market share')


MAPPING = {'rank': rank, 'sources': source, 'movies': moviecount, 'totalgross': dollaramount, 'averagegross': dollaramount, 'marketshare': marketshare}"
"class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'The rank of an entity'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be formatted as an integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class productionmethod(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Method of production for a movie'
        self.valid_values = 'Method of production should be a string describing the method used'
        self.format = 'The method of production should be capitalized'
        self.examples = ['Live Action', 'Animation/Live Action', 'Digital Animation', 'Hand Animation', 'Stop-Motion Animation']

    def cast(self, val):
        return str(val).title()

class numberofmovies(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of movies'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of movies should be an integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val.replace(',', ''))

class grossmoney(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gross income in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'In USD'
        self.format = 'Gross income should be formatted as a floating point number (in USD units)'
        self.examples = [10000.0, 5000.5, 7500.75, 15000.0, 20000.0]

    def cast(self, val):
        return float(val.replace(',', '').replace('$', ''))

class grossmoney(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gross income in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'In USD'
        self.format = 'Gross income should be formatted as a floating point number (in USD units)'
        self.examples = [10000.0, 5000.5, 7500.75, 15000.0, 20000.0]

    def cast(self, val):
        return float(val.replace(',', '').replace('$', ''))

class marketsharepercent(NumericSemanticType):

    def __init__(self):
        self.description = 'The market share percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Market share should be formatted as a floating point number representing percentage'
        self.examples = [10.5, 20.3, 30.7, 40.9, 50.1]

    def cast(self, val):
        return float(val.replace('%', ''))


MAPPING = {'rank': rank, 'productionmethods': productionmethod, 'movies': numberofmovies, 'totalgross': grossmoney, 'averagegross': grossmoney, 'marketshare': marketsharepercent}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a four-digit integer'
        self.examples: list[int] = [1990, 2000, 2010, 2020, 2030]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 9999:
            raise ValueError('Invalid year')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num

class filmcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Film count should be formatted as an integer'
        self.examples: list[int] = [5, 10, 15, 20, 25]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid film count')
        return num


MAPPING = {'year': year, 'warnerbros': filmcount, 'waltdisney': filmcount, 'paramountpictures': filmcount, 'sonypictures': filmcount, 'universal': filmcount, 'totalotherstudios': filmcount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class scoringcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Scoring Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Scoring Count should be a non-negative integer'
        self.examples = [194, 196, 421, 728, 2682]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid scoring count')
        return num

class reviewdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Review Date'
        self.valid_values = ""Review Date should be of the form 'month/day/year'""
        self.format = 'Review Date should be a string that represents a valid date'
        self.examples = ['8/2/2017', '4/5/2017', '9/15/2016', '2/16/2016', '4/26/2016']

    def cast(self, val):
        try:
            date = datetime.strptime(val, '%m/%d/%Y')
            return date.strftime('%m/%d/%Y')
        except ValueError:
            raise Exception('Invalid review date')

class averagescore(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Average Score should be a floating point number between 0 and 10'
        self.examples = [8.4, 8.39, 7.7, 8.9, 9.8]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid average score')
        return num

class hotelname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Hotel Name'
        self.valid_values = 'Hotel Name should be a string'
        self.format = 'Hotel Name should be a string that represents a valid hotel name'
        self.examples = ['Britannia International Hotel Canary Wharf', 'Grand Royale London Hyde Park', 'Intercontinental London The O2', 'Park Plaza County Hall London', 'Park Plaza London Riverbank']

    def cast(self, val):
        return str(val)

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality'
        self.valid_values = 'Nationality should be a string that represents a valid nationality'
        self.format = 'Nationality should be capitalized and trimmed from unnecessary spaces'
        self.examples = ['United Kingdom', 'United States of America', 'Australia', 'Ireland', 'United Arab Emirates']

    def cast(self, val):
        val = val.strip()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid nationality')

class wordcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Word Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Word Count should be a non-negative integer'
        self.examples = [397, 42, 210, 140, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid word count')
        return num

class wordcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Word Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Word Count should be a non-negative integer'
        self.examples = [397, 42, 210, 140, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid word count')
        return num

class reviewcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Review Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Review Count should be a non-negative integer'
        self.examples = [1016, 2007, 2903, 9086, 45]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid review count')
        return num

class reviewcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Review Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Review Count should be a non-negative integer'
        self.examples = [1016, 2007, 2903, 9086, 45]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid review count')
        return num

class reviewerscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Reviewer Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Reviewer Score should be a floating point number between 0 and 10'
        self.examples = [7.5, 8.8, 9.6, 10.0, 2.5]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid reviewer score')
        return num

class daysincereview(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Days Since Review'
        self.valid_values = 'Days Since Review should be a string that represents a valid number of days'
        self.format = ""Days Since Review should be a string that represents a valid number of days, ending with ' days'""
        self.examples = ['1 days', '120 days', '322 days', '534 days', '464 days']

    def cast(self, val):
        match_obj = re.match('(\\d+) days', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Days Since Review')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number between -90 and 90'
        self.examples = [51.492, 51.503, 51.515, 52.3605759, 48.8178079]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number between -180 and 180'
        self.examples = [-0.17, -0.125, -0.023, 4.9159683, -0.3192925]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num


MAPPING = {'unnamed0': index, 'additionalnumberofscoring': scoringcount, 'reviewdate': reviewdate, 'averagescore': averagescore, 'hotelname': hotelname, 'reviewernationality': nationality, 'reviewtotalnegativewordcounts': wordcount, 'reviewtotalpositivewordcounts': wordcount, 'totalnumberofreviews': reviewcount, 'totalnumberofreviewsreviewerhasgiven': reviewcount, 'reviewerscore': reviewerscore, 'dayssincereview': daysincereview, 'lat': latitude, 'lng': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class memberidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The member id of a customer in a dataset'
        self.valid_range = [1000, 5000]
        self.dtype = int
        self.format = 'Member id should be an integer with no decimal places'
        self.examples = [1808, 2552, 2300, 1187, 3037]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the transaction'
        self.valid_values = ""Date should be in the format 'dd-mm-yyyy'""
        self.format = ""Date should be in the format 'dd-mm-yyyy'""
        self.examples = ['21-01-2015', '21-07-2015', '29-11-2015', '08-08-2015', '30-04-2015']

    def cast(self, val):
        return datetime.strptime(val, '%d-%m-%Y').strftime('%d-%m-%Y')

class groceryitem(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Description of grocery item'
        self.valid_values = 'Grocery item should be a string'
        self.format = 'Grocery item should be a string'
        self.examples = ['tropical fruit', 'whole milk', 'pip fruit', 'other vegetables', 'whole milk']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': index, 'membernumber': memberidentifier, 'date': date, 'itemdescription': groceryitem}"
"class countyidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a county'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing a county identifier'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class fipscode(NumericSemanticType):

    def __init__(self):
        self.description = 'FIPS Code for a county or state in the US'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing a FIPS code for a county or state in the US'
        self.examples = [0, 1000, 1001, 1003, 1005]

    def cast(self, val):
        return int(val)

class countyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a county or state in the US'
        self.valid_values = 'A string representing the name of a county or state in the US'
        self.format = 'A string with the first letter of each word capitalized'
        self.examples = ['Washington County', 'Jefferson County', 'Franklin County', 'Lincoln County', 'Jackson County']

    def cast(self, val):
        return str(val).title()

class stateabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of a state in the US'
        self.valid_values = 'A string representing the abbreviation of a state in the US'
        self.format = 'A two-letter capitalized string'
        self.examples = ['TX', 'GA', 'VA', 'KY', 'MO']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).upper()

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of population in a county or state in the US'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing population count'
        self.examples = [318857056, 4849377, 55395, 200111, 26887]

    def cast(self, val):
        return int(val)

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of population in a county or state in the US'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing population count'
        self.examples = [318857056, 4849377, 55395, 200111, 26887]

    def cast(self, val):
        return int(val)

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of population in a county or state in the US'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing population count'
        self.examples = [318857056, 4849377, 55395, 200111, 26887]

    def cast(self, val):
        return int(val)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'A floating point number representing a percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)

class housingprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Housing price in a county or state in the US'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer representing housing price'
        self.unit = 'In USD'
        self.examples = [176700, 122500, 136200, 168600, 89200]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': countyidentifier, 'fips': fipscode, 'areaname': countyname, 'stateabbreviation': stateabbreviation, 'pst045214': populationcount, 'vet605213': populationcount, 'sbo001207': populationcount, 'age135214': percent, 'age295214': percent, 'age775214': percent, 'sex255214': percent, 'rhi125214': percent, 'rhi225214': percent, 'rhi325214': percent, 'rhi425214': percent, 'rhi525214': percent, 'rhi625214': percent, 'rhi725214': percent, 'rhi825214': percent, 'pop715213': percent, 'pop645213': percent, 'pop815213': percent, 'edu635213': percent, 'edu685213': percent, 'lfe305213': percent, 'hsg445213': percent, 'hsg096213': percent, 'hsd310213': percent, 'bza115213': percent, 'hsg495213': housingprice}"
"class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Must be an integer that increments for each new row'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'Must be a valid state name in the United States'
        self.format = 'Must be the full state name with the first letter capitalized'
        self.examples = ['Massachusetts', 'Texas', 'Vermont', 'Iowa', 'Georgia']

    def cast(self, val):
        return str(val).title()

class usstateabbreviation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US State Abbreviations'
        self.valid_values = 'Must be a valid state abbreviation in the United States'
        self.format = 'Must be two capital letters'
        self.examples = ['MA', 'TX', 'VT', 'IA', 'GA']

    def cast(self, val):
        return str(val).upper()

class countyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'County names in the United States'
        self.valid_values = 'Must be a valid county name in the United States'
        self.format = 'Must be a string with the first letter of each word capitalized'
        self.examples = ['Washington', 'Franklin', 'Jefferson', 'Jackson', 'Madison']

    def cast(self, val):
        return str(val).title()

class fipscode(NumericSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.valid_range = [1000, float('inf')]
        self.dtype = int
        self.format = 'Must be a 5-digit integer'
        self.examples = [1001, 1003, 1005, 1007, 1009]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class politicalparty(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Political party in the United States'
        self.valid_values = ""Must be either 'Republican' or 'Democrat'""
        self.format = 'Must be a string with the first letter capitalized'
        self.examples = ['Republican', 'Democrat']

    def cast(self, val):
        return str(val).title()

class candidate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Candidates in the 2016 US Presidential Election'
        self.valid_values = 'Must be a valid candidate in the 2016 US Presidential Election'
        self.format = 'Must be a string with the first letter of each word capitalized'
        self.examples = ['Bernie Sanders', 'Hillary Clinton', 'Donald Trump', 'John Kasich', 'Ted Cruz']

    def cast(self, val):
        return str(val).title()

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote count for a candidate in a specific county'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Must be an integer'
        self.examples = [0, 50, 100, 150, 200]

    def cast(self, val):
        return int(val)

class votepercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Fraction of total votes received by a candidate in a specific county'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Must be a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': rowidentifier, 'state': usstate, 'stateabbreviation': usstateabbreviation, 'county': countyname, 'fips': fipscode, 'party': politicalparty, 'candidate': candidate, 'votes': votecount, 'fractionvotes': votepercent}"
"class bookingidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Booking Identifier'
        self.valid_values = ""Booking ID should be a string that starts with 'INN' followed by a sequence of numbers""
        self.format = ""Booking ID should be of the form 'INNxxxxx', where x represents numbers""
        self.examples = ['INN00001', 'INN00002', 'INN00003', 'INN00004', 'INN00005']

    def cast(self, val):
        return str(val)

class numberofadults(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of adults in a booking'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of adults should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class numberofchildren(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of children in a booking'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of children should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class mealplan(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of meal plan selected for the booking'
        self.valid_values = ""Meal plan should be one of the following: 'Meal Plan 1', 'Meal Plan 2', 'Meal Plan 3', 'Not Selected'""
        self.format = 'Meal plan should be a string'
        self.examples = ['Meal Plan 1', 'Not Selected', 'Meal Plan 2', 'Meal Plan 3']

    def cast(self, val):
        return str(val)

class roomtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of room reserved for the booking'
        self.valid_values = ""Room type should be one of the following: 'Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7'""
        self.format = 'Room type should be a string'
        self.examples = ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7']

    def cast(self, val):
        return str(val)

class marketsegment(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Market segment type for the booking'
        self.valid_values = ""Market segment should be one of the following: 'Online', 'Offline', 'Corporate', 'Complementary', 'Aviation'""
        self.format = 'Market segment should be a string'
        self.examples = ['Online', 'Offline', 'Corporate', 'Complementary', 'Aviation']

    def cast(self, val):
        return str(val)

class bookingstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Not_Canceled', 'Canceled']

    def cast(self, val):
        return str(val)

class averagepriceperroom(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Average price per room for the booking'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Average price per room should be a floating point number'
        self.unit = 'In USD'
        self.examples = [65.0, 106.68, 60.0, 100.0, 94.5]

    def cast(self, val):
        return float(val)


MAPPING = {'bookingid': bookingidentifier, 'noofadults': numberofadults, 'noofchildren': numberofchildren, 'typeofmealplan': mealplan, 'roomtypereserved': roomtype, 'marketsegmenttype': marketsegment, 'bookingstatus': bookingstatus, 'avgpriceperroom': averagepriceperroom}"
"class rankidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The rank or id of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Rank/Id should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class rankidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The rank or id of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Rank/Id should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class artistname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of an artist'
        self.valid_values = 'Name should be a string'
        self.format = 'First letter of each word in the artist name should be capitalized'
        self.examples = ['Gorillaz', 'London Symphony Orchestra', 'Michael Jackson', 'P!nk', 'Eminem']

    def cast(self, val):
        return str(val).title()

class albumtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of an album'
        self.valid_values = ""Type should be either 'album', 'single', or 'compilation'""
        self.format = 'Album type should be a string in lower case'
        self.examples = ['album', 'single', 'compilation']

    def cast(self, val):
        return str(val).lower()

class danceability(NumericSemanticType):

    def __init__(self):
        self.description = 'The danceability score of a track'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Danceability score should be a float between 0 and 1'
        self.examples = [0.818, 0.676, 0.695, 0.689, 0.663]

    def cast(self, val):
        num = float(val)
        return round(num, 3) if 0 <= num <= 1 else float('nan')

class energy(NumericSemanticType):

    def __init__(self):
        self.description = 'The energy score of a track'
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = 'Energy score should be a float between 0 and 1'
        self.examples = [0.705, 0.703, 0.923, 0.739, 0.694]

    def cast(self, val):
        num = float(val)
        return round(num, 3) if 0 <= num <= 1 else float('nan')

class loudness(NumericSemanticType):

    def __init__(self):
        self.description = 'The loudness score of a track'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Loudness score should be a float'
        self.examples = [-6.679, -5.815, -3.93, -5.81, -8.627]

    def cast(self, val):
        return round(float(val), 3)

class licensed(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            return float('nan')

class officialvideo(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            return float('nan')


MAPPING = {'unnamed01': rankidentifier, 'unnamed0': rankidentifier, 'artist': artistname, 'albumtype': albumtype, 'danceability': danceability, 'energy': energy, 'loudness': loudness, 'licensed': licensed, 'officialvideo': officialvideo}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index values'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class income(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Income in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [58138.0, 46344.0, 71613.0, 26646.0, 58293.0]

    def cast(self, val):
        return float(val)

class numberofchildren(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1, 2]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class numberofchildren(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1, 2]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class recency(NumericSemanticType):

    def __init__(self):
        self.description = 'Days since last purchase'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Recency should be an integer'
        self.examples = [58, 38, 26, 26, 94]

    def cast(self, val):
        return int(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class amountspent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount spent in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount spent should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [635, 11, 426, 11, 173]

    def cast(self, val):
        return float(val)

class numofpurchases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of purchases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of purchases should be an integer'
        self.examples = [3, 2, 1, 2, 5]

    def cast(self, val):
        return int(val)

class numofpurchases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of purchases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of purchases should be an integer'
        self.examples = [3, 2, 1, 2, 5]

    def cast(self, val):
        return int(val)

class numofpurchases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of purchases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of purchases should be an integer'
        self.examples = [3, 2, 1, 2, 5]

    def cast(self, val):
        return int(val)

class numofpurchases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of purchases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of purchases should be an integer'
        self.examples = [3, 2, 1, 2, 5]

    def cast(self, val):
        return int(val)

class numofpurchases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of purchases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of purchases should be an integer'
        self.examples = [3, 2, 1, 2, 5]

    def cast(self, val):
        return int(val)

class complain(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class constantcolumn(NumericSemanticType):

    def __init__(self):
        self.description = 'Constant column'
        self.valid_range = [3, 11]
        self.dtype = int
        self.format = 'Should be a constant integer'
        self.examples = [3, 3, 3, 11, 11]

    def cast(self, val):
        return int(val) if val in self.valid_range else None

class constantcolumn(NumericSemanticType):

    def __init__(self):
        self.description = 'Constant column'
        self.valid_range = [3, 11]
        self.dtype = int
        self.format = 'Should be a constant integer'
        self.examples = [3, 3, 3, 11, 11]

    def cast(self, val):
        return int(val) if val in self.valid_range else None

class response(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [63, 66, 55, 36, 39]

    def cast(self, val):
        return int(val)

class customerdays(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days since customer joined'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Customer days should be an integer'
        self.examples = [2822, 2272, 2471, 2298, 2320]

    def cast(self, val):
        return int(val)

class maritalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class maritalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class maritalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class maritalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class maritalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class education(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class education(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None

class education(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None


MAPPING = {'unnamed0': index, 'income': income, 'kidhome': numberofchildren, 'teenhome': numberofchildren, 'recency': recency, 'mntwines': amountspent, 'mntfruits': amountspent, 'mntmeatproducts': amountspent, 'mntfishproducts': amountspent, 'mntsweetproducts': amountspent, 'mntgoldprods': amountspent, 'numdealspurchases': numofpurchases, 'numwebpurchases': numofpurchases, 'numcatalogpurchases': numofpurchases, 'numstorepurchases': numofpurchases, 'numwebvisitsmonth': numofpurchases, 'complain': complain, 'zcostcontact': constantcolumn, 'zrevenue': constantcolumn, 'response': response, 'age': age, 'customerdays': customerdays, 'maritaldivorced': maritalstatus, 'maritalmarried': maritalstatus, 'maritalsingle': maritalstatus, 'maritaltogether': maritalstatus, 'maritalwidow': maritalstatus, 'educationbasic': education, 'educationgraduation': education, 'educationmaster': education}"
"class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a customer'
        self.valid_values = ""Customer ID should be a string starting with 'C' followed by digits""
        self.format = ""Customer ID should be of the form 'CXXXXX' where X's are digits""
        self.examples = ['C10001', 'C10002', 'C10003', 'C10004', 'C10005']

    def cast(self, val):
        match_obj = re.match('C\\d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid customer id')

class balance(NumericSemanticType):

    def __init__(self):
        self.description = ""The balance amount in the customer's credit card""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Balance should be formatted as a floating point number'
        self.examples = [40.900749, 3202.467416, 2495.148862, 1666.670542, 817.714335]

    def cast(self, val):
        return float(val)

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency values of different transactions'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Frequency should be formatted as a floating point number between 0 and 1'
        self.examples = [0.818182, 0.909091, 1.0, 0.636364, 1.0]

    def cast(self, val):
        f_val = float(val)
        if 0 <= f_val <= 1:
            return f_val
        else:
            raise Exception('Invalid frequency value')

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [95.4, 0.0, 773.17, 1499.0, 16.0]

    def cast(self, val):
        return float(val)

class transactioncount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Transaction count should be formatted as an integer'
        self.examples = [0, 4, 0, 1, 0]

    def cast(self, val):
        return int(val)

class transactioncount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of different types of transactions'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Transaction count should be formatted as an integer'
        self.examples = [0, 4, 0, 1, 0]

    def cast(self, val):
        return int(val)

class creditlimit(NumericSemanticType):

    def __init__(self):
        self.description = ""The credit limit amount in the customer's credit card""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Credit limit should be formatted as a floating point number'
        self.examples = [1000.0, 7000.0, 7500.0, 7500.0, 1200.0]

    def cast(self, val):
        return float(val)

class tenure(NumericSemanticType):

    def __init__(self):
        self.description = ""The tenure of the customer's credit card in months""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tenure should be formatted as an integer representing months'
        self.examples = [12, 12, 12, 12, 12]

    def cast(self, val):
        return int(val)


MAPPING = {'custid': customeridentifier, 'balance': balance, 'balancefrequency': frequency, 'purchasesfrequency': frequency, 'oneoffpurchasesfrequency': frequency, 'purchasesinstallmentsfrequency': frequency, 'cashadvancefrequency': frequency, 'prcfullpayment': frequency, 'purchases': amount, 'oneoffpurchases': amount, 'installmentspurchases': amount, 'cashadvance': amount, 'payments': amount, 'minimumpayments': amount, 'cashadvancetrx': transactioncount, 'purchasestrx': transactioncount, 'creditlimit': creditlimit, 'tenure': tenure}"
"class binaryoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class ordinalnumeric(NumericSemanticType):

    def __init__(self):
        self.description = 'Ordinal data represented as integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ordinal data should be formatted as integers where higher values represent higher order'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class ordinalnumeric(NumericSemanticType):

    def __init__(self):
        self.description = 'Ordinal data represented as integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ordinal data should be formatted as integers where higher values represent higher order'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class ordinalnumeric(NumericSemanticType):

    def __init__(self):
        self.description = 'Ordinal data represented as integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ordinal data should be formatted as integers where higher values represent higher order'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class fullname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Full name of a person'
        self.valid_values = 'A full name is a string that consists of at least two parts separated by a space'
        self.format = ""A full name should be formatted as 'First Middle (optional) Last'""
        self.examples = ['John Doe', 'Jane Mary Doe', 'James Smith', 'Michael Johnson', 'Robert Brown']

    def cast(self, val):
        parts = str(val).split(',')
        return parts[1].strip() + ' ' + parts[0].strip()

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""The gender should be either 'male' or 'female'""
        self.format = ""Gender should be formatted as a string, either 'male' or 'female'""
        self.examples = ['male', 'female', 'female', 'male', 'female']

    def cast(self, val):
        return str(val).lower()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a floating point number representing years lived'
        self.examples = [22.0, 38.0, 26.0, 35.0, 35.0]

    def cast(self, val):
        return float(val)

class ticketnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ticket number'
        self.valid_values = 'Ticket number can be a string that consists of numbers and/or letters'
        self.format = 'Ticket number should be a string with alphanumeric characters'
        self.examples = ['A/5 21171', 'PC 17599', 'STON/O2. 3101282', '113803', '373450']

    def cast(self, val):
        return str(val)

class fare(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The fare paid for the ticket'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fare should be a floating point number'
        self.unit = 'In GBP'
        self.examples = [7.25, 71.2833, 7.925, 53.1, 8.05]

    def cast(self, val):
        return round(float(val), 4)

class cabin(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cabin number'
        self.valid_values = 'Cabin number can be a string that consists of numbers and/or letters'
        self.format = 'Cabin number should be a string with alphanumeric characters'
        self.examples = ['B96 B98', 'C23 C25 C27', 'G6', 'C22 C26', 'F33']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

class port(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Port of embarkation'
        self.valid_values = ""The port of embarkation should be either 'S', 'C', or 'Q'""
        self.format = ""Port of embarkation should be formatted as a string, either 'S', 'C', or 'Q'""
        self.examples = ['S', 'C', 'S', 'S', 'S']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).upper()


MAPPING = {'survived': binaryoutcome, 'pclass': ordinalnumeric, 'sibsp': ordinalnumeric, 'parch': ordinalnumeric, 'name': fullname, 'sex': gender, 'age': age, 'ticket': ticketnumber, 'fare': fare, 'cabin': cabin, 'embarked': port}"
"class identifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Identifier used to uniquely identify an entity'
        self.valid_values = 'Identifiers are unique strings'
        self.format = 'Identifiers must be strings'
        self.examples = ['OAS1_0001_MR1', 'OAS1_0002_MR1', 'OAS1_0003_MR1', 'OAS1_0004_MR1', 'OAS1_0005_MR1']

    def cast(self, val):
        return str(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of an entity'
        self.valid_values = ""Gender can either be 'M' or 'F'""
        self.format = ""Gender should be either 'M' or 'F'""
        self.examples = ['F', 'M']

    def cast(self, val):
        if val in ['M', 'F']:
            return val
        else:
            raise Exception('Invalid gender')

class handpreference(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Hand preference of an entity'
        self.valid_values = ""Hand preference is 'R' (Right)""
        self.format = ""Hand preference should be 'R'""
        self.examples = ['R']

    def cast(self, val):
        if val == 'R':
            return val
        else:
            raise Exception('Invalid hand preference')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of an entity in years'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [18, 28, 55, 73, 74]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Education level of an entity'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Education level should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class sociaeconomicstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Socio-economic status of an entity'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Socio-economic status should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class mmse(NumericSemanticType):

    def __init__(self):
        self.description = 'Mini-Mental State Examination score'
        self.valid_range = [14, 30]
        self.dtype = int
        self.format = 'MMSE score should be an integer between 14 and 30'
        self.examples = [14, 26, 29, 30]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class cdr(NumericSemanticType):

    def __init__(self):
        self.description = 'Clinical Dementia Rating'
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = 'CDR should be a floating point number between 0 and 2'
        self.examples = [0, 0.5, 1, 1.5, 2]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class etiv(NumericSemanticType):

    def __init__(self):
        self.description = 'Estimated Total Intracranial Volume'
        self.valid_range = [1123, 1992]
        self.dtype = int
        self.format = 'ETIV should be an integer between 1123 and 1992'
        self.examples = [1123, 1344, 1454, 1588, 1992]

    def cast(self, val):
        return int(val)

class nwbv(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalize Whole Brain Volume'
        self.valid_range = [0.644, 0.893]
        self.dtype = float
        self.format = 'NWBV should be a floating point number between 0.644 and 0.893'
        self.examples = [0.644, 0.743, 0.81, 0.842, 0.893]

    def cast(self, val):
        return float(val)

class asf(NumericSemanticType):

    def __init__(self):
        self.description = 'Atlas Scaling Factor'
        self.valid_range = [0.881, 1.563]
        self.dtype = float
        self.format = 'ASF should be a floating point number between 0.881 and 1.563'
        self.examples = [0.881, 1.112, 1.19, 1.284, 1.563]

    def cast(self, val):
        return float(val)

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay in days between the date of the MRI and the visit when the CDR was made'
        self.valid_range = [1, 89]
        self.dtype = int
        self.format = 'Delay should be an integer between 1 and 89 days'
        self.examples = [1, 2, 11, 30, 89]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)


MAPPING = {'id': identifier, 'mf': gender, 'hand': handpreference, 'age': age, 'educ': educationlevel, 'ses': sociaeconomicstatus, 'mmse': mmse, 'cdr': cdr, 'etiv': etiv, 'nwbv': nwbv, 'asf': asf, 'delay': delay}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class subjectidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a subject'
        self.valid_values = 'Subject ID must be string'
        self.format = ""Subject ID must have the format 'OAS2_0001'""
        self.examples = ['OAS2_0001', 'OAS2_0002', 'OAS2_0003', 'OAS2_0004', 'OAS2_0005']

    def cast(self, val):
        return str(val)

class group(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Group to which a subject belongs'
        self.valid_values = ""Group must be one of ['Nondemented', 'Demented', 'Converted']""
        self.format = 'Group must be a string'
        self.examples = ['Nondemented', 'Demented', 'Converted', 'Nondemented', 'Demented']

    def cast(self, val):
        if val in ['Nondemented', 'Demented', 'Converted']:
            return str(val)
        else:
            raise Exception('Invalid group')

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['M', 'F']

    def cast(self, val):
        if val in ['M', 'F']:
            return str(val)
        else:
            raise Exception('Invalid gender')

class hand(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Handedness of a subject'
        self.valid_values = ""Handedness must be 'R' for right""
        self.format = 'Handedness must be a string'
        self.examples = ['R', 'R', 'R', 'R', 'R']

    def cast(self, val):
        if val == 'R':
            return str(val)
        else:
            raise Exception('Invalid handedness')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the subject'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer number'
        self.examples = [87, 88, 75, 76, 80]

    def cast(self, val):
        return int(val)

class education(NumericSemanticType):

    def __init__(self):
        self.description = 'Education level of the subject'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Education level should be an integer number'
        self.examples = [14, 14, 12, 12, 12]

    def cast(self, val):
        return int(val)

class ses(NumericSemanticType):

    def __init__(self):
        self.description = 'Socioeconomic status of the subject'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'SES should be a floating point number'
        self.examples = [2.0, 2.0, float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class mmse(NumericSemanticType):

    def __init__(self):
        self.description = 'Mini Mental State Examination score of the subject'
        self.valid_range = [0, 30]
        self.dtype = float
        self.format = 'MMSE score should be a floating point number'
        self.examples = [27.0, 30.0, 23.0, 28.0, 22.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class cdr(NumericSemanticType):

    def __init__(self):
        self.description = 'Clinical Dementia Rating of the subject'
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = 'CDR should be a floating point number'
        self.examples = [0.0, 0.0, 0.5, 0.5, 0.5]

    def cast(self, val):
        return float(val)

class etiv(NumericSemanticType):

    def __init__(self):
        self.description = 'Estimated Total Intracranial Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ETIV should be an integer number'
        self.examples = [1987, 2004, 1678, 1738, 1698]

    def cast(self, val):
        return int(val)

class nwbv(NumericSemanticType):

    def __init__(self):
        self.description = 'Normalize Whole Brain Volume'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'NWBV should be a floating point number'
        self.examples = [0.696, 0.681, 0.736, 0.713, 0.701]

    def cast(self, val):
        return float(val)

class asf(NumericSemanticType):

    def __init__(self):
        self.description = 'Atlas Scaling Factor'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'ASF should be a floating point number'
        self.examples = [0.883, 0.876, 1.046, 1.01, 1.034]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'subjectid': subjectidentifier, 'group': group, 'mf': gender, 'hand': hand, 'age': age, 'educ': education, 'ses': ses, 'mmse': mmse, 'cdr': cdr, 'etiv': etiv, 'nwbv': nwbv, 'asf': asf}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class ecommprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a product in an e-commerce platform'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float with 2 decimal places'
        self.unit = 'In euros'
        self.examples = [16.0, 8.0, 8.0, 8.0, 2.72]

    def cast(self, val):
        return round(float(val), 2)

class ecommprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a product in an e-commerce platform'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float with 2 decimal places'
        self.unit = 'In euros'
        self.examples = [16.0, 8.0, 8.0, 8.0, 2.72]

    def cast(self, val):
        return round(float(val), 2)

class ecommprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a product in an e-commerce platform'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a float with 2 decimal places'
        self.unit = 'In euros'
        self.examples = [16.0, 8.0, 8.0, 8.0, 2.72]

    def cast(self, val):
        return round(float(val), 2)

class currency(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Currency used by the buyer'
        self.valid_values = 'Currency should be a 3-letter ISO 4217 currency code'
        self.format = 'Currency should be stored as string'
        self.examples = ['EUR', 'USD', 'GBP', 'JPY', 'AUD']

    def cast(self, val):
        if val in [currency.alpha_3 for currency in list(pycountry.currencies)]:
            return val
        else:
            raise ValueError(f'Invalid currency code: {val}')

class isadboostused(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else ValueError(f'Invalid value: {val}')

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of a product'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a float with 2 decimal places'
        self.examples = [3.76, 3.45, 3.57, 4.03, 3.1]

    def cast(self, val):
        return round(float(val), 2)

class productcolor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color of a product'
        self.valid_values = 'Color should be a string'
        self.format = 'Color should be stored as lowercase string'
        self.examples = ['white', 'green', 'leopardprint', 'black', 'yellow']

    def cast(self, val):
        return str(val).lower()

class productsize(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of a product'
        self.valid_values = 'Size should be a string'
        self.format = 'Size should be stored as uppercase string'
        self.examples = ['M', 'XS', 'L', 'XL', 'S']

    def cast(self, val):
        return str(val).upper()

class origincountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of origin for a product'
        self.valid_values = 'Country should be a 2-letter ISO 3166 country code'
        self.format = 'Country code should be stored as uppercase string'
        self.examples = ['CN', 'US', 'VE', 'SG', 'AT']

    def cast(self, val):
        if val in [country.alpha_2 for country in list(pycountry.countries)]:
            return val
        else:
            raise ValueError(f'Invalid country code: {val}')


MAPPING = {'unnamed0': index, 'price': ecommprice, 'retailprice': ecommprice, 'shippingoptionprice': ecommprice, 'currencybuyer': currency, 'usesadboosts': isadboostused, 'rating': rating, 'productcolor': productcolor, 'productvariationsizeid': productsize, 'origincountry': origincountry}"
"class ecommerceindex(NumericSemanticType):

    def __init__(self):
        self.description = 'An index for ecommerce products'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be formatted as a nonnegative integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class producttag(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Tags for ecommerce products'
        self.valid_values = 'Tags should be strings that describe the product'
        self.format = ""Tags are usually separated by spaces or commas, and start with a '#' symbol""
        self.examples = ['#fashion #shorts', '#fashion #tshirt', '#Sport Bra', '#Summer Clothes', '#top #crop']

    def cast(self, val):
        return str(val).strip()


MAPPING = {'unnamed0': ecommerceindex, 'tag': producttag}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of a particular entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [1, 4, 10, 100, 1321]

    def cast(self, val):
        return int(val)

class keyword(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Keyword representing a particular category'
        self.valid_values = 'Keyword should be a string'
        self.format = ""Keyword should be in lowercase and capitalized if it's a proper noun""
        self.examples = ['Summer', ""Women's Fashion"", 'Fashion', 'Women', 'Casual']

    def cast(self, val):
        words = str(val).split(' ')
        for i in range(len(words)):
            if words[i].lower() in ['summer', 'fashion', 'women', 'casual']:
                words[i] = words[i].capitalize()
        return ' '.join(words)


MAPPING = {'unnamed0': index, 'count': count, 'keyword': keyword}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer value starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for each Pokemon'
        self.valid_range = [1, 800]
        self.dtype = int
        self.format = 'Pokemon ID should be an integer value ranging from 1 to 800'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for each Pokemon'
        self.valid_range = [1, 800]
        self.dtype = int
        self.format = 'Pokemon ID should be an integer value ranging from 1 to 800'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for each Pokemon'
        self.valid_range = [1, 800]
        self.dtype = int
        self.format = 'Pokemon ID should be an integer value ranging from 1 to 800'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'firstpokemon': pokemonidentifier, 'secondpokemon': pokemonidentifier, 'winner': pokemonidentifier}"
"class pokemonname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a Pokemon'
        self.valid_values = 'Names must be of type string and should be capitalized'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Mega Venusaur', 'Charmander']

    def cast(self, val):
        return str(val).title()

class hitpoints(NumericSemanticType):

    def __init__(self):
        self.description = 'The health or hit points of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Hit points should be a positive integer'
        self.examples = [45, 60, 80, 80, 39]

    def cast(self, val):
        return int(val)

class attackdefense(NumericSemanticType):

    def __init__(self):
        self.description = 'The attack or defense power of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Attack or defense power should be a positive integer'
        self.examples = [49, 63, 83, 123, 43]

    def cast(self, val):
        return int(val)

class attackdefense(NumericSemanticType):

    def __init__(self):
        self.description = 'The attack or defense power of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Attack or defense power should be a positive integer'
        self.examples = [49, 63, 83, 123, 43]

    def cast(self, val):
        return int(val)

class specialattackdefense(NumericSemanticType):

    def __init__(self):
        self.description = 'The special attack or defense power of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Special attack or defense power should be a positive integer'
        self.examples = [65, 80, 100, 122, 60]

    def cast(self, val):
        return int(val)

class specialattackdefense(NumericSemanticType):

    def __init__(self):
        self.description = 'The special attack or defense power of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Special attack or defense power should be a positive integer'
        self.examples = [65, 80, 100, 122, 60]

    def cast(self, val):
        return int(val)

class speed(NumericSemanticType):

    def __init__(self):
        self.description = 'The speed of a Pokemon'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Speed should be a positive integer'
        self.examples = [45, 60, 80, 80, 65]

    def cast(self, val):
        return int(val)

class generation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The generation of a Pokemon'
        self.valid_values = 'Valid values include 1, 2, 3, 4, 5, 6'
        self.format = 'Generation should be a positive integer from 1 to 6'
        self.examples = [1, 2, 3, 4, 5, 6]

    def cast(self, val):
        return int(val)

class legendary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['True', 'False']

    def cast(self, val):
        return str(val)


MAPPING = {'name': pokemonname, 'hp': hitpoints, 'attack': attackdefense, 'defense': attackdefense, 'spatk': specialattackdefense, 'spdef': specialattackdefense, 'speed': speed, 'generation': generation, 'legendary': legendary}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are integer values starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Pokemon'
        self.valid_range = [1, 800]
        self.dtype = int
        self.format = 'Pokemon IDs are integer values between 1 and 800'
        self.examples = [1, 100, 200, 300, 400]

    def cast(self, val):
        return int(val)

class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Pokemon'
        self.valid_range = [1, 800]
        self.dtype = int
        self.format = 'Pokemon IDs are integer values between 1 and 800'
        self.examples = [1, 100, 200, 300, 400]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'firstpokemon': pokemonidentifier, 'secondpokemon': pokemonidentifier}"
"class customeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a customer'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Customer IDs should be positive integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid customer id')
        if val < 1:
            raise Exception('Invalid customer id')
        return val

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid gender')
        return str(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of a person'
        self.valid_range = [0, 99]
        self.dtype = int
        self.format = 'Age should be an integer value between 0 and 99'
        self.examples = [19, 21, 20, 23, 31]

    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid age')
        if val < 0 or val > 99:
            raise Exception('Invalid age')
        return val

class annualincome(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The annual income of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Annual income should be a floating point number with no decimal places'
        self.unit = 'In USD'
        self.examples = [15000, 35000, 86000, 59000, 38000]

    def cast(self, val):
        try:
            val = float(val)
        except ValueError:
            raise Exception('Invalid annual income')
        if val < 0:
            raise Exception('Invalid annual income')
        return round(val)

class profession(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The profession of a person'
        self.valid_values = ""Profession should be a string that represents a person's profession""
        self.format = 'The first letter of the profession should be capitalized'
        self.examples = ['Artist', 'Healthcare', 'Entertainment', 'Engineer', 'Doctor']

    def cast(self, val):
        return str(val).title()

class workexperience(NumericSemanticType):

    def __init__(self):
        self.description = 'The work experience of a person in years'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Work experience should be an integer value'
        self.examples = [1, 3, 1, 0, 2]

    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid work experience')
        if val < 0:
            raise Exception('Invalid work experience')
        return val

class familysize(NumericSemanticType):

    def __init__(self):
        self.description = ""The size of a person's family""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Family size should be a positive integer'
        self.examples = [4, 3, 1, 2, 6]

    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid family size')
        if val < 1:
            raise Exception('Invalid family size')
        return val


MAPPING = {'customerid': customeridentifier, 'gender': gender, 'age': age, 'annualincome': annualincome, 'profession': profession, 'workexperience': workexperience, 'familysize': familysize}"
"class loanidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a loan'
        self.valid_values = ""Loan ID should be a string that is of the form 'LP001XXX'""
        self.format = 'Loan ID should be stored as a string'
        self.examples = ['LP001015', 'LP001135', 'LP001031', 'LP001035', 'LP001051']

    def cast(self, val):
        return str(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = 'Gender should be stored as a string'
        self.examples = ['Male', 'Female']

    def cast(self, val):
        return str(val)

class married(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class dependents(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Number of dependents of a person'
        self.valid_values = ""Number of dependents should be a string of the form '0', '1', '2', '3+'""
        self.format = 'Number of dependents should be stored as a string'
        self.examples = ['0', '1', '2', '3+']

    def cast(self, val):
        return str(val)

class education(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level of a person'
        self.valid_values = ""Education level should be either 'Graduate' or 'Not Graduate'""
        self.format = 'Education level should be stored as a string'
        self.examples = ['Graduate', 'Not Graduate']

    def cast(self, val):
        return str(val)

class selfemployed(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class applicantincome(NumericSemanticType):

    def __init__(self):
        self.description = 'Income of the applicant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be a floating point number'
        self.examples = [5720, 3076, 5000, 2340, 3276]

    def cast(self, val):
        return float(val)

class coapplicantincome(NumericSemanticType):

    def __init__(self):
        self.description = 'Income of the co-applicant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be a floating point number'
        self.examples = [0, 1500, 1800, 2546, 0]

    def cast(self, val):
        return float(val)

class loanamount(NumericSemanticType):

    def __init__(self):
        self.description = 'Amount of the loan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Loan amount should be a floating point number'
        self.examples = [110.0, 126.0, 208.0, 100.0, 78.0]

    def cast(self, val):
        return float(val)

class loanamountterm(NumericSemanticType):

    def __init__(self):
        self.description = 'Term of the loan'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Loan term should be a floating point number'
        self.examples = [360.0, 360.0, 360.0, 360.0, 360.0]

    def cast(self, val):
        return float(val)

class credithistory(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class propertyarea(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Area where the property is located'
        self.valid_values = ""Property area should be either 'Urban', 'Semiurban' or 'Rural'""
        self.format = 'Property area should be stored as a string'
        self.examples = ['Urban', 'Semiurban', 'Rural']

    def cast(self, val):
        return str(val)


MAPPING = {'loanid': loanidentifier, 'gender': gender, 'married': married, 'dependents': dependents, 'education': education, 'selfemployed': selfemployed, 'applicantincome': applicantincome, 'coapplicantincome': coapplicantincome, 'loanamount': loanamount, 'loanamountterm': loanamountterm, 'credithistory': credithistory, 'propertyarea': propertyarea}"
"class loanidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Loan ID'
        self.valid_values = ""Loan IDs should be strings that start with 'LP' followed by six digits""
        self.format = ""Loan IDs should be formatted as 'LP' followed by six digits""
        self.examples = ['LP001002', 'LP001003', 'LP001005', 'LP001006', 'LP001008']

    def cast(self, val):
        return str(val)

class binaryoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes' or str(val) == '1':
            return 'Yes'
        elif str(val).lower() == 'no' or str(val) == '0':
            return 'No'
        else:
            return float('nan')

class binaryoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes' or str(val) == '1':
            return 'Yes'
        elif str(val).lower() == 'no' or str(val) == '0':
            return 'No'
        else:
            return float('nan')

class binaryoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes' or str(val) == '1':
            return 'Yes'
        elif str(val).lower() == 'no' or str(val) == '0':
            return 'No'
        else:
            return float('nan')

class binaryoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes' or str(val) == '1':
            return 'Yes'
        elif str(val).lower() == 'no' or str(val) == '0':
            return 'No'
        else:
            return float('nan')

class dependents(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Number of dependents'
        self.valid_values = ""Dependents should be '0', '1', '2', or '3+'""
        self.format = 'Dependents should be stored as strings'
        self.examples = ['0', '1', '2', '3+']

    def cast(self, val):
        if str(val) in ['0', '1', '2', '3+']:
            return str(val)
        else:
            return float('nan')

class educationlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level'
        self.valid_values = ""Education level should be 'Graduate' or 'Not Graduate'""
        self.format = 'Education level should be stored as strings'
        self.examples = ['Graduate', 'Not Graduate']

    def cast(self, val):
        if str(val) in ['Graduate', 'Not Graduate']:
            return str(val)
        else:
            return float('nan')

class income(NumericSemanticType):

    def __init__(self):
        self.description = 'Income in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be formatted as a floating point number'
        self.examples = [5849, 4583, 3000, 2583, 6000]

    def cast(self, val):
        return round(float(val), 2)

class income(NumericSemanticType):

    def __init__(self):
        self.description = 'Income in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be formatted as a floating point number'
        self.examples = [5849, 4583, 3000, 2583, 6000]

    def cast(self, val):
        return round(float(val), 2)

class loanamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Loan amount in thousands of USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Loan amount should be formatted as a floating point number'
        self.unit = 'In thousands of USD'
        self.examples = [128.0, 66.0, 120.0, 141.0, float('nan')]

    def cast(self, val):
        return round(float(val), 2)

class loanamountterm(NumericSemanticType):

    def __init__(self):
        self.description = 'Loan amount term in months'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Loan amount term should be formatted as an integer'
        self.examples = [360, 360, 360, 360, 360]

    def cast(self, val):
        return int(val)

class credithistory(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 0.0]

    def cast(self, val):
        if float(val) == 1.0:
            return 1.0
        elif float(val) == 0.0:
            return 0.0
        else:
            return float('nan')

class propertyarea(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Property area'
        self.valid_values = ""Property area should be 'Urban', 'Semiurban', or 'Rural'""
        self.format = 'Property area should be stored as strings'
        self.examples = ['Urban', 'Semiurban', 'Rural']

    def cast(self, val):
        if str(val) in ['Urban', 'Semiurban', 'Rural']:
            return str(val)
        else:
            return float('nan')


MAPPING = {'loanid': loanidentifier, 'gender': binaryoption, 'married': binaryoption, 'selfemployed': binaryoption, 'loanstatus': binaryoption, 'dependents': dependents, 'education': educationlevel, 'applicantincome': income, 'coapplicantincome': income, 'loanamount': loanamount, 'loanamountterm': loanamountterm, 'credithistory': credithistory, 'propertyarea': propertyarea}"
"class studyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Name of the study carried out'
        self.valid_values: str = 'Must be one of the pre-defined study names'
        self.format: str = 'Study names are represented as strings'
        self.examples: list = ['PAL0910', 'PAL0809', 'PAL0708']

    def cast(self, val):
        return str(val)

class species(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Species of penguin'
        self.valid_values: str = 'Species name should be a valid penguin species'
        self.format: str = 'Species names are represented as strings'
        self.examples: list = ['Adelie Penguin (Pygoscelis adeliae)', 'Gentoo penguin (Pygoscelis papua)', 'Chinstrap penguin (Pygoscelis antarctica)']

    def cast(self, val):
        return str(val).title()

class clutchcompletion(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class dateegg(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date on which the egg was laid'
        self.valid_values: str = 'Date should be in the format MM/DD/YY'
        self.format: str = 'Dates are represented as strings in the format MM/DD/YY'
        self.examples: list = ['11/27/07', '11/16/07', '11/9/08', '11/18/09', '11/4/08']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%y').strftime('%m/%d/%y')

class culmenlengthmm(NumericSemanticType):

    def __init__(self):
        self.description: str = ""Length of the penguin's culmen in mm""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Lengths are represented as floating point numbers'
        self.examples: list = [39.1, 39.5, 40.3, 36.7, 32.1]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class culmendepthmm(NumericSemanticType):

    def __init__(self):
        self.description: str = ""Depth of the penguin's culmen in mm""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Depths are represented as floating point numbers'
        self.examples: list = [18.7, 17.4, 18.0, 19.3, 13.1]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class flipperlengthmm(NumericSemanticType):

    def __init__(self):
        self.description: str = ""Length of the penguin's flipper in mm""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Lengths are represented as floating point numbers'
        self.examples: list = [181.0, 186.0, 195.0, 193.0, 172.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class bodymassg(NumericSemanticType):

    def __init__(self):
        self.description: str = ""The penguin's body mass in grams""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Masses are represented as floating point numbers'
        self.examples: list = [3750.0, 3800.0, 3250.0, 3450.0, 2700.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class sex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Sex of the penguin'
        self.valid_values: str = 'Must be one of the pre-defined sexes'
        self.format: str = 'Sexes are represented as strings'
        self.examples: list = ['MALE', 'FEMALE', '.']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'studyname': studyname, 'species': species, 'clutchcompletion': clutchcompletion, 'dateegg': dateegg, 'culmenlengthmm': culmenlengthmm, 'culmendepthmm': culmendepthmm, 'flipperlengthmm': flipperlengthmm, 'bodymassg': bodymassg, 'sex': sex}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer, starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class penguinspecies(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Penguin Species'
        self.valid_values = ""Species should be one of the following: ['Adelie', 'Gentoo', 'Chinstrap']""
        self.format = 'Species should be a string starting with a capital letter'
        self.examples = ['Adelie', 'Gentoo', 'Chinstrap']

    def cast(self, val):
        return str(val).title()

class islandname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Island Name'
        self.valid_values = ""Island name should be one of the following: ['Biscoe', 'Dream', 'Torgersen']""
        self.format = 'Island name should be a string starting with a capital letter'
        self.examples = ['Biscoe', 'Dream', 'Torgersen']

    def cast(self, val):
        return str(val).title()

class lengthinmm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Length in mm'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be a floating point number'
        self.unit = 'In mm'
        self.examples = [32.1, 39.5, 40.3, 44.45, 59.6]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lengthinmm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Length in mm'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be a floating point number'
        self.unit = 'In mm'
        self.examples = [32.1, 39.5, 40.3, 44.45, 59.6]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lengthinmm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Length in mm'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be a floating point number'
        self.unit = 'In mm'
        self.examples = [32.1, 39.5, 40.3, 44.45, 59.6]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class massing(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mass in g'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mass should be a floating point number'
        self.unit = 'In g'
        self.examples = [2700.0, 3550.0, 4050.0, 4750.0, 6300.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender'
        self.valid_values = ""Gender should be one of the following: ['MALE', 'FEMALE']""
        self.format = 'Gender should be a string in uppercase'
        self.examples = ['MALE', 'FEMALE']

    def cast(self, val):
        if val not in ['MALE', 'FEMALE']:
            return float('nan')
        return str(val).upper()


MAPPING = {'unnamed0': identifier, 'species': penguinspecies, 'island': islandname, 'culmenlengthmm': lengthinmm, 'culmendepthmm': lengthinmm, 'flipperlengthmm': lengthinmm, 'bodymassg': massing, 'sex': gender}"
"class unnamed(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique numeric identifier with no semantic meaning'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique integer identifier'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class unnamed(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique numeric identifier with no semantic meaning'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique integer identifier'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class borough(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The five boroughs of New York City'
        self.valid_values = 'Integer values from 1 to 5, where each number represents a specific borough'
        self.format = 'Integer from 1 to 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val in [1, 2, 3, 4, 5]:
            return int(val)
        else:
            return int(0)

class neighborhood(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Neighborhoods within New York City'
        self.valid_values = 'String names of neighborhoods'
        self.format = 'String representation of neighborhood name'
        self.examples = ['FLUSHING-NORTH', 'UPPER EAST SIDE (59-79)', 'UPPER EAST SIDE (79-96)', 'UPPER WEST SIDE (59-79)', 'BEDFORD STUYVESANT']

    def cast(self, val):
        return str(val).upper()

class zipcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = '5-digit integer'
        self.examples = [10009, 10002, 10003, 10004, 10005]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class units(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of residential, commercial or total units'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count of units'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class units(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of residential, commercial or total units'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count of units'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class units(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of residential, commercial or total units'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count of units'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class squarefeet(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of land or gross area in square feet'
        self.valid_values = 'String representation of area in square feet'
        self.format = 'String representation of square feet'
        self.examples = ['2000', '2500', '4000', ' -  ', '0']

    def cast(self, val):
        return str(val).strip()

class squarefeet(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of land or gross area in square feet'
        self.valid_values = 'String representation of area in square feet'
        self.format = 'String representation of square feet'
        self.examples = ['2000', '2500', '4000', ' -  ', '0']

    def cast(self, val):
        return str(val).strip()

class yearbuilt(NumericSemanticType):

    def __init__(self):
        self.description = 'Year when the building was constructed'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = '4-digit integer representing year'
        self.examples = [1900, 1913, 1920, 1930, 1940]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class saleprice(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Price at which the property was sold'
        self.valid_values = 'String representation of sale price'
        self.format = 'String representation of sale price'
        self.examples = ['6625000', ' -  ', '0', '450000', '550000']

    def cast(self, val):
        return str(val).strip()

class saledate(NumericSemanticType):

    def __init__(self):
        self.description = 'Date when the property was sold'
        self.valid_range = [pd.Timestamp.min, pd.Timestamp.max]
        self.dtype = pd.Timestamp
        self.format = 'Date in the format YYYY-MM-DD'
        self.examples = ['2017-07-19 00:00:00', '2016-12-14 00:00:00', '2016-12-09 00:00:00', '2016-09-23 00:00:00', '2016-11-17 00:00:00']

    def cast(self, val):
        try:
            return pd.to_datetime(val, format='%Y-%m-%d %H:%M:%S')
        except:
            return pd.Timestamp.min


MAPPING = {'unnamed01': unnamed, 'unnamed0': unnamed, 'borough': borough, 'neighborhood': neighborhood, 'zipcode': zipcode, 'residentialunits': units, 'commercialunits': units, 'totalunits': units, 'landsquarefeet': squarefeet, 'grosssquarefeet': squarefeet, 'yearbuilt': yearbuilt, 'saleprice': saleprice, 'saledate': saledate}"
"class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'Name should be a string that is a valid country or region according to the pycountry library'
        self.format = 'Country or Region names should be capitalized and no special characters'
        self.examples = ['Finland', 'Canada', 'Belgium', 'Norway', 'Iceland']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val).title()
        else:
            raise Exception('Invalid Country or Region')

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Ranking should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num <= 0:
            raise Exception('Ranking should be greater than 0')
        return num

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Ranking should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num <= 0:
            raise Exception('Ranking should be greater than 0')
        return num

class affect(NumericSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Affect should be greater than 0')
        return num

class affect(NumericSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Affect should be greater than 0')
        return num

class affect(NumericSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Affect should be greater than 0')
        return num

class affect(NumericSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Affect should be greater than 0')
        return num

class affect(NumericSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Affect should be greater than 0')
        return num

class support(NumericSemanticType):

    def __init__(self):
        self.description = 'Support in a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Support should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Support should be greater than 0')
        return num

class gdppercapita(NumericSemanticType):

    def __init__(self):
        self.description = 'Logarithm of GDP per capita of a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Log of GDP per capita should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Log of GDP per capita should be greater than 0')
        return num

class lifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Healthy Life Expectancy in a Country or Region'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Healthy Life Expectancy should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num <= 0:
            raise Exception('Healthy Life Expectancy should be greater than 0')
        return num


MAPPING = {'countryregion': country, 'ladder': rank, 'sdofladder': rank, 'positiveaffect': affect, 'negativeaffect': affect, 'freedom': affect, 'corruption': affect, 'generosity': affect, 'socialsupport': support, 'logofgdppercapita': gdppercapita, 'healthylifeexpectancy': lifeexpectancy}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return abs(int(val))

class appname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an application'
        self.valid_values = 'Name should be a string'
        self.format = 'Capitalization may vary'
        self.examples = ['Flashlight', 'Tic Tac Toe', 'Calculator', 'Age Calculator', 'Gallery']

    def cast(self, val):
        return str(val)

class appidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ID of an application'
        self.valid_values = 'ID should be a string'
        self.format = ""The ID is usually represented as a string containing the company's name and the app's name""
        self.examples = ['com.ishakwe.gakondo', 'postermakerart.flyerdesign.flyermaker.postermakerart', 'com.imocci', 'getfreedata.superfatiza.unlimitedjiodataprank', 'com.mozaix.simoneboard']

    def cast(self, val):
        return str(val)

class category(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Category of an application'
        self.valid_values = 'Category should be a string and one of the 48 categories on Google Playstore'
        self.format = 'Category is represented as a string'
        self.examples = ['Education', 'Music & Audio', 'Tools', 'Business', 'Entertainment']

    def cast(self, val):
        return str(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of an application'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating is represented as a float'
        self.examples = [0.0, 1.0, 2.5, 4.0, 5.0]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return round(float(val), 1)

class ratingcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating count of an application'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Rating count must be a positive integer'
        self.examples = [0, 5, 10, 50, 100]

    def cast(self, val):
        return abs(int(val))

class installs(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Number of installs of an application'
        self.valid_values = 'Number of installs should be a string'
        self.format = ""Number of installs is represented as a string with a '+' at the end""
        self.examples = ['100+', '1,000+', '10+', '10,000+', '500+']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class minimuminstalls(NumericSemanticType):

    def __init__(self):
        self.description = 'Minimum number of installs of an application'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Minimum number of installs must be a positive integer'
        self.examples = [0, 50, 100, 500, 1000]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return abs(int(val))

class maximuminstalls(NumericSemanticType):

    def __init__(self):
        self.description = 'Maximum number of installs of an application'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Maximum number of installs must be a positive integer'
        self.examples = [0, 50, 100, 500, 1000]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return abs(int(val))

class free(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of an application'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list = [0.0, 0.99, 1.99, 2.99, 3.99]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return round(float(val), 2)

class currency(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Currency used for pricing the application'
        self.valid_values = 'Currency should be a string and one of the 10 most common currencies used in Google Playstore'
        self.format = 'Currency is represented as a string'
        self.examples = ['USD', 'XXX', 'INR', 'CAD', 'EUR']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class size(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of an application'
        self.valid_values = 'Size should be a string'
        self.format = ""Size is represented as a string with an 'M' at the end""
        self.examples = ['10M', '2.9M', '3.7M', '1.8M', '6.2M']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class minimumandroidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Minimum android version required to run the application'
        self.valid_values = 'Minimum android version should be a string'
        self.format = ""Minimum android version is represented as a string with 'and up' at the end""
        self.examples = ['4.1 and up', '5.0 and up', '4.4 and up', '4.0.3 and up', '4.0 and up']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class developeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ID of the developer'
        self.valid_values = 'Developer ID should be a string'
        self.format = ""The ID is usually represented as a string containing the company's name""
        self.examples = ['Subsplash Inc', 'TRAINERIZE', 'ChowNow', 'Phorest', 'BH App Development Ltd']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class developerwebsite(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Website of the developer'
        self.valid_values = 'Website should be a string'
        self.format = 'Website is represented as a string'
        self.examples = ['http://www.subsplash.com/', 'http://www.chownow.com', 'http://www.sharefaith.com/category/church-websites.html', 'https://foodsoul.pro', 'https://zeta-mars.blogspot.com']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class developeremail(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Email of the developer'
        self.valid_values = 'Email should be a string'
        self.format = 'Email is represented as a string'
        self.examples = ['support@classplus.co', 'appsupport@subsplash.com', 'eng-android@chownow.com', 'help@trainerize.com', 'support@mindbodyonline.com']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class released(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Release date of an application'
        self.valid_values = 'Release date should be a string'
        self.format = ""Release date is represented as a string in the format 'MMM DD, YYYY'""
        self.examples = ['Sep 26, 2019', 'Jun 5, 2020', 'May 6, 2020', 'Jun 15, 2020', 'Feb 26, 2020']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return datetime.strptime(str(val), '%b %d, %Y').strftime('%b %d, %Y')

class lastupdated(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Last updated date of an application'
        self.valid_values = 'Last updated date should be a string'
        self.format = ""Last updated date is represented as a string in the format 'MMM DD, YYYY'""
        self.examples = ['Jun 11, 2021', 'Jun 10, 2021', 'Jun 09, 2021', 'Jun 14, 2021', 'Jun 08, 2021']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return datetime.strptime(str(val), '%b %d, %Y').strftime('%b %d, %Y')

class contentrating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Content rating of an application'
        self.valid_values = 'Content rating should be a string and one of the 6 content ratings on Google Playstore'
        self.format = 'Content rating is represented as a string'
        self.examples = ['Everyone', 'Teen', 'Mature 17+', 'Everyone 10+', 'Unrated']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

class adsupported(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class inapppurchases(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class editorschoice(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class scrapedtime(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Scraped time of data'
        self.valid_values = 'Scraped time should be a string'
        self.format = ""Scraped time is represented as a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2021-06-15 21:42:16', '2021-06-15 21:36:17', '2021-06-15 21:42:47', '2021-06-15 21:46:27', '2021-06-15 21:17:49']

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')


MAPPING = {'unnamed0': index, 'appname': appname, 'appid': appidentifier, 'category': category, 'rating': rating, 'ratingcount': ratingcount, 'installs': installs, 'minimuminstalls': minimuminstalls, 'maximuminstalls': maximuminstalls, 'free': free, 'price': price, 'currency': currency, 'size': size, 'minimumandroid': minimumandroidentifier, 'developerid': developeridentifier, 'developerwebsite': developerwebsite, 'developeremail': developeremail, 'released': released, 'lastupdated': lastupdated, 'contentrating': contentrating, 'adsupported': adsupported, 'inapppurchases': inapppurchases, 'editorschoice': editorschoice, 'scrapedtime': scrapedtime}"
"class movieindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class movierank(NumericSemanticType):

    def __init__(self):
        self.description = 'Rank of a movie'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be an integer starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class moviename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a movie'
        self.valid_values = 'Name should be a string'
        self.format = 'Names should be capitalized'
        self.examples = ['Guardians of the Galaxy', 'Prometheus', 'Split', 'Sing', 'Suicide Squad']

    def cast(self, val):
        return str(val).title()

class moviegenre(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Genre of a movie'
        self.valid_values = 'Genres should be strings separated by commas'
        self.format = 'Genre should be capitalized and separated by commas'
        self.examples = ['Action,Adventure,Sci-Fi', 'Adventure,Mystery,Sci-Fi', 'Horror,Thriller', 'Animation,Comedy,Family', 'Action,Adventure,Fantasy']

    def cast(self, val):
        return str(val).title()

class moviedirector(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Director of a movie'
        self.valid_values = 'Name should be a string'
        self.format = 'Names should be capitalized'
        self.examples = ['James Gunn', 'Ridley Scott', 'M. Night Shyamalan', 'Christophe Lourdelet', 'David Ayer']

    def cast(self, val):
        return str(val).title()

class movieyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2014, 2012, 2016, 2016, 2016]

    def cast(self, val):
        return int(val)

class movieruntime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The runtime in minutes of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runtime should be an integer with unit as minutes'
        self.unit = 'In minutes'
        self.examples = [121, 124, 117, 108, 123]

    def cast(self, val):
        return int(val)

class movierating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of a movie'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Rating should be a floating point number with one decimal place'
        self.examples = [8.1, 7.0, 7.3, 7.2, 6.2]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class movievotes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of votes for a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be an integer'
        self.examples = [757074, 485820, 157606, 60545, 393727]

    def cast(self, val):
        return int(val)

class movierevenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The revenue in millions of USD of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be a floating point number with two decimal places'
        self.unit = 'In millions of USD'
        self.examples = [333.13, 126.46, 138.12, 270.32, 325.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class moviemetascore(NumericSemanticType):

    def __init__(self):
        self.description = 'Metascore of a movie'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Metascore should be a floating point number with no decimal places'
        self.examples = [76.0, 65.0, 62.0, 59.0, 40.0]

    def cast(self, val):
        return round(float(val))


MAPPING = {'unnamed0': movieindex, 'rank': movierank, 'title': moviename, 'genre': moviegenre, 'director': moviedirector, 'year': movieyear, 'runtimeminutes': movieruntime, 'rating': movierating, 'votes': movievotes, 'revenuemillions': movierevenue, 'metascore': moviemetascore}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'Country or Region should be a valid country or region name according to ISO 3166'
        self.format = 'Country or Region should be a string'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        return str(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)

class confirmedcases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of confirmed cases in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of confirmed cases should be a floating point number'
        self.unit = 'In number of people'
        self.examples: list[float] = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return 0.0
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'countryregion': countryregion, 'afghanistan': confirmedcases, 'albania': confirmedcases, 'algeria': confirmedcases, 'andorra': confirmedcases, 'angola': confirmedcases, 'antarctica': confirmedcases, 'antiguaandbarbuda': confirmedcases, 'argentina': confirmedcases, 'armenia': confirmedcases, 'australia': confirmedcases, 'austria': confirmedcases, 'azerbaijan': confirmedcases, 'bahamas': confirmedcases, 'bahrain': confirmedcases, 'bangladesh': confirmedcases, 'barbados': confirmedcases, 'belarus': confirmedcases, 'belgium': confirmedcases, 'belize': confirmedcases, 'benin': confirmedcases, 'bhutan': confirmedcases, 'bolivia': confirmedcases, 'bosniaandherzegovina': confirmedcases, 'botswana': confirmedcases, 'brazil': confirmedcases, 'brunei': confirmedcases, 'bulgaria': confirmedcases, 'burkinafaso': confirmedcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index for rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of countries'
        self.valid_values = 'Name of a country or a date'
        self.format = 'Country names should be capitalized strings'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        if val in pycountry.countries:
            return str(val).title()
        elif '/' in val:
            return datetime.strptime(val, '%m/%d/%y')
        else:
            return str(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of countries'
        self.valid_values = 'Name of a country or a date'
        self.format = 'Country names should be capitalized strings'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        if val in pycountry.countries:
            return str(val).title()
        elif '/' in val:
            return datetime.strptime(val, '%m/%d/%y')
        else:
            return str(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)


MAPPING = {'unnamed0': index, 'countryregion': countryname, 'australia': countryname, 'afghanistan': deathcount, 'albania': deathcount, 'algeria': deathcount, 'andorra': deathcount, 'angola': deathcount, 'antarctica': deathcount, 'antiguaandbarbuda': deathcount, 'argentina': deathcount, 'armenia': deathcount, 'austria': deathcount, 'azerbaijan': deathcount, 'bahamas': deathcount, 'bahrain': deathcount, 'bangladesh': deathcount, 'barbados': deathcount, 'belarus': deathcount, 'belgium': deathcount, 'belize': deathcount, 'benin': deathcount, 'bhutan': deathcount, 'bolivia': deathcount, 'bosniaandherzegovina': deathcount, 'botswana': deathcount, 'brazil': deathcount, 'brunei': deathcount, 'bulgaria': deathcount, 'burkinafaso': deathcount}"
"class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country names should match the names recognized by the pycountry library.'
        self.format = 'Country names should be in title case.'
        self.examples = ['China', 'Canada', 'United Kingdom', 'France', 'Australia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country name')

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State Name'
        self.valid_values = 'Province or state names can be any string value.'
        self.format = 'Province or state names should be in title case.'
        self.examples = ['Australian Capital Territory', 'Yukon', 'Northern Territory', 'Queensland', 'South Australia']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number in the range [-90, 90]'
        self.examples = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        lat = float(val)
        if -90 <= lat <= 90:
            return lat
        else:
            raise Exception('Invalid latitude')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number in the range [-180, 180]'
        self.examples = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        long = float(val)
        if -180 <= long <= 180:
            return long
        else:
            raise Exception('Invalid longitude')


MAPPING = {'countryregion': country, 'provincestate': provincestate, 'lat': latitude, 'long': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of row in the dataset'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val < 0:
            raise Exception('Invalid index')
        return int_val

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date'
        self.valid_values: str = 'Dates should be valid and in the format MM/DD/YY'
        self.format: str = 'Date strings'
        self.examples: list = ['1/23/20', '1/24/20', '1/25/20', '1/26/20', '1/27/20']

    def cast(self, val):
        datetime_object = datetime.strptime(val, '%m/%d/%y')
        return datetime_object.strftime('%m/%d/%y')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of confirmed COVID-19 cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Confirmed cases should be a non-negative float'
        self.examples: list = [0.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise Exception('Invalid number of cases')
        return float_val


MAPPING = {'unnamed0': index, 'provincestate': date, 'alabama': confirmedcases, 'alaska': confirmedcases, 'americansamoa': confirmedcases, 'arizona': confirmedcases, 'arkansas': confirmedcases, 'california': confirmedcases, 'colorado': confirmedcases, 'connecticut': confirmedcases, 'delaware': confirmedcases, 'diamondprincess': confirmedcases, 'districtofcolumbia': confirmedcases, 'florida': confirmedcases, 'georgia': confirmedcases, 'grandprincess': confirmedcases, 'guam': confirmedcases, 'hawaii': confirmedcases, 'idaho': confirmedcases, 'illinois': confirmedcases, 'indiana': confirmedcases, 'iowa': confirmedcases, 'kansas': confirmedcases, 'kentucky': confirmedcases, 'louisiana': confirmedcases, 'maine': confirmedcases, 'maryland': confirmedcases, 'massachusetts': confirmedcases, 'michigan': confirmedcases, 'minnesota': confirmedcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer, representing the position of a data point in the dataset'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province/State'
        self.valid_values = 'Names of Provinces/States across the world'
        self.format = 'Names should be capitalized and use the English language'
        self.examples = ['Admin2', '2/8/20', '1/24/20', '1/25/20', '1/26/20']

    def cast(self, val):
        return str(val).title()

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class covidcases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'provincestate': provincestate, 'alabama': covidcases, 'alaska': covidcases, 'americansamoa': covidcases, 'arizona': covidcases, 'arkansas': covidcases, 'california': covidcases, 'colorado': covidcases, 'connecticut': covidcases, 'delaware': covidcases, 'diamondprincess': covidcases, 'districtofcolumbia': covidcases, 'florida': covidcases, 'georgia': covidcases, 'grandprincess': covidcases, 'guam': covidcases, 'hawaii': covidcases, 'idaho': covidcases, 'illinois': covidcases, 'indiana': covidcases, 'iowa': covidcases, 'kansas': covidcases, 'kentucky': covidcases, 'louisiana': covidcases, 'maine': covidcases, 'maryland': covidcases, 'massachusetts': covidcases, 'michigan': covidcases, 'minnesota': covidcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be formatted as an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US states'
        self.valid_values = 'Must be a valid US state'
        self.format = 'Each state should be capitalized and not abbreviated'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class population(NumericSemanticType):

    def __init__(self):
        self.description = 'The population of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population should be formatted as an integer number'
        self.examples = [55869, 223234, 24686, 22394, 57826]

    def cast(self, val):
        return int(val)

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be formatted as a floating-point number'
        self.examples = [32.53952745, 30.72774991, 31.868263, 32.99642064, 33.98210918]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude value')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be formatted as a floating-point number'
        self.examples = [-86.64408227, -87.72207058, -85.3871286, -87.12511459999996, -86.56790593]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude value')
        return num


MAPPING = {'unnamed0': index, 'provincestate': usstate, 'population': population, 'lat': latitude, 'long': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['China', 'Canada', 'United Kingdom', 'France', 'Australia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return str(val).title()

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Province or State'
        self.valid_values = 'Name should be a string that is a valid province or state name'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Australian Capital Territory', 'Yukon', 'Northern Territory', 'Queensland', 'South Australia']

    def cast(self, val):
        if isinstance(val, float) and math.isnan(val):
            return float('nan')
        return str(val).title()

class latitudelongitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Latitude or Longitude of a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Latitude or Longitude should be a floating point number with at least 4 decimal places precision'
        self.unit = 'In degrees'
        self.examples = [33.93911, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid latitude or longitude')
        return round(num, 4)

class latitudelongitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Latitude or Longitude of a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Latitude or Longitude should be a floating point number with at least 4 decimal places precision'
        self.unit = 'In degrees'
        self.examples = [33.93911, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid latitude or longitude')
        return round(num, 4)


MAPPING = {'unnamed0': index, 'countryregion': countryname, 'provincestate': provincestate, 'lat': latitudelongitude, 'long': latitudelongitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes must be integers and strictly increasing starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name according to the pycountry library'
        self.format = 'Country names should be capitalized and follow the ISO standard'
        self.examples = ['China', 'Canada', 'United Kingdom', 'France', 'Australia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Province or State'
        self.valid_values = 'Name should be a string that is a valid Province/State name according to the countryinfo library'
        self.format = 'Province/State names should be capitalized'
        self.examples = ['Australian Capital Territory', 'Yukon', 'Northern Territory', 'Queensland', 'South Australia']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = ""Geographical coordinate that specifies the north–south position of a point on the Earth's surface""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number between -90 and 90'
        self.examples = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = ""Geographical coordinate that specifies the east–west position of a point on the Earth's surface""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number between -180 and 180'
        self.examples = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num


MAPPING = {'unnamed0': index, 'countryregion': countryname, 'provincestate': provincestate, 'lat': latitude, 'long': longitude}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row Index should be formatted as an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class provincename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a province or state'
        self.valid_values = 'Name should be a string representing a province or state'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class uidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [16, 84099999]
        self.dtype = int
        self.format = 'UID should be formatted as an integer number'
        self.examples = [84001001, 84001003, 84001005, 84001007, 84001009]

    def cast(self, val):
        return int(val)

class fipscode(NumericSemanticType):

    def __init__(self):
        self.description = 'FIPS code'
        self.valid_range = [60, 99999]
        self.dtype = float
        self.format = 'FIPS code should be formatted as a floating point number'
        self.examples = [1001.0, 1003.0, 1005.0, 1007.0, 1009.0]

    def cast(self, val):
        return float(val) if pd.notnull(val) else float('nan')

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string representing a country'
        self.format = 'Country name should be in uppercase'
        self.examples = ['US']

    def cast(self, val):
        return str(val).upper()

class latitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Latitude coordinate of a location'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be formatted as a floating point number'
        self.unit = 'In degrees'
        self.examples = [32.53952745, 30.72774991, 31.868263, 32.99642064, 33.98210918]

    def cast(self, val):
        return float(val)

class longitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Longitude coordinate of a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be formatted as a floating point number'
        self.unit = 'In degrees'
        self.examples = [-86.64408227, -87.72207058, -85.3871286, -87.12511459999996, -86.56790593]

    def cast(self, val):
        return float(val)

class combinedkey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Combined Key'
        self.valid_values = 'Combined Key should be a string representing a combination of Province, State, and Country'
        self.format = 'Each word should be capitalized'
        self.examples = ['Autauga, Alabama, US', 'Baldwin, Alabama, US', 'Barbour, Alabama, US', 'Bibb, Alabama, US', 'Blount, Alabama, US']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': rowindex, 'provincestate': provincename, 'uid': uidentifier, 'fips': fipscode, 'countryregion': countryname, 'lat': latitude, 'long': longitude, 'combinedkey': combinedkey}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to identify rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State names in the United States'
        self.valid_values = 'Any valid state name in the United States'
        self.format = 'The full name of a state, capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State names in the United States'
        self.valid_values = 'Any valid state name in the United States'
        self.format = 'The full name of a state, capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class locationuidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for locations'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer number'
        self.examples = [84001001, 84001003, 84001005, 84001007, 84001009]

    def cast(self, val):
        return int(val)

class fipscode(NumericSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A 5-digit decimal number'
        self.examples = [1001.0, 1003.0, 1005.0, 1007.0, 1009.0]

    def cast(self, val):
        return float(val)

class latitudelongitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'A decimal number'
        self.examples = [32.53952745, -86.64408227]

    def cast(self, val):
        return float(val)

class latitudelongitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'A decimal number'
        self.examples = [32.53952745, -86.64408227]

    def cast(self, val):
        return float(val)

class combinedkey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A combined key using county, state, and country'
        self.valid_values = ""Should be in the format 'County, State, Country'""
        self.format = 'Each component of the key should be capitalized'
        self.examples = ['Autauga, Alabama, US', 'Baldwin, Alabama, US', 'Barbour, Alabama, US', 'Bibb, Alabama, US', 'Blount, Alabama, US']

    def cast(self, val):
        return str(val).title()

class population(NumericSemanticType):

    def __init__(self):
        self.description = 'Population size'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer number'
        self.examples = [55869, 223234, 24686, 22394, 57826]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'provincestate': usstate, 'countryregion': usstate, 'uid': locationuidentifier, 'fips': fipscode, 'lat': latitudelongitude, 'long': latitudelongitude, 'combinedkey': combinedkey, 'population': population}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string that is of the form 'dd-mm-yyyy'""
        self.format = ""Date should be in the format 'dd-mm-yyyy'""
        self.examples = ['01-01-2004', '02-01-2004', '03-01-2004', '04-01-2004', '05-01-2004']

    def cast(self, val):
        return datetime.strptime(val, '%d-%m-%Y').strftime('%d-%m-%Y')

class waterlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Water level in a reservoir'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Water level should be a float representing the water level in a reservoir'
        self.examples = [3.9, 0.0, 268.0, 0.0]

    def cast(self, val):
        return round(float(val), 2)

class waterlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Water level in a reservoir'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Water level should be a float representing the water level in a reservoir'
        self.examples = [3.9, 0.0, 268.0, 0.0]

    def cast(self, val):
        return round(float(val), 2)

class waterlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Water level in a reservoir'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Water level should be a float representing the water level in a reservoir'
        self.examples = [3.9, 0.0, 268.0, 0.0]

    def cast(self, val):
        return round(float(val), 2)

class waterlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Water level in a reservoir'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Water level should be a float representing the water level in a reservoir'
        self.examples = [3.9, 0.0, 268.0, 0.0]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'date': date, 'poondi': waterlevel, 'cholavaram': waterlevel, 'redhills': waterlevel, 'chembarambakkam': waterlevel}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string of the form 'dd-mm-yyyy'""
        self.format = ""Dates should be stored as strings in the format 'dd-mm-yyyy'""
        self.examples = ['01-01-2004', '02-01-2004', '03-01-2004', '04-01-2004', '05-01-2004']

    def cast(self, val):
        date_object = datetime.strptime(val, '%d-%m-%Y')
        return datetime.strftime(date_object, '%d-%m-%Y')

class rainfall(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The amount of rainfall'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Rainfall should be formatted as a floating point number with one decimal place'
        self.unit: str = 'In mm'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class rainfall(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The amount of rainfall'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Rainfall should be formatted as a floating point number with one decimal place'
        self.unit: str = 'In mm'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class rainfall(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The amount of rainfall'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Rainfall should be formatted as a floating point number with one decimal place'
        self.unit: str = 'In mm'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class rainfall(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The amount of rainfall'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Rainfall should be formatted as a floating point number with one decimal place'
        self.unit: str = 'In mm'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'date': date, 'poondi': rainfall, 'cholavaram': rainfall, 'redhills': rainfall, 'chembarambakkam': rainfall}"
"class tweetidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each tweet'
        self.valid_values = 'Tweet IDs should be unique and can be a mix of digits'
        self.format = 'Formatted as strings of digits'
        self.examples = ['1.316529221557252e+18', '1.31652929585929e+18', '1.3165293050069524e+18', '1.3165293080815575e+18', '1.316529312741253e+18']

    def cast(self, val):
        return str(val)

class tweetlikes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of likes a tweet has received'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        return int(val)

class retweetcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a tweet has been retweeted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        return int(val)

class tweetuseridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each user'
        self.valid_values = 'User IDs should be unique and can be a mix of digits'
        self.format = 'Formatted as strings of digits'
        self.examples = ['360666534.0', '809904438.0', '3494182277.0', '8.242596012018524e+17', '1.032806955356545e+18']

    def cast(self, val):
        return str(val)

class tweetusername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the user'
        self.valid_values = 'Name should be a string'
        self.format = 'Formatted as strings'
        self.examples = ['El Sol Latino News', 'Cheri A. 🇺🇸', 'Flag Waver', 'Michelle Ferg', 'the Gold State']

    def cast(self, val):
        return str(val)

class userjoindate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of user joined'
        self.valid_values = ""Should be a date in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Should be a datetime object'
        self.examples = ['2011-08-23 15:33:45', '2012-09-08 01:03:57', '2015-08-30 19:38:21', '2017-01-25 14:16:17', '2018-08-24 01:49:01']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class userfollowerscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of followers a user has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        return int(val)

class tweetlocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of the user'
        self.valid_values = 'Location should be a string'
        self.format = 'Formatted as strings'
        self.examples = ['Philadelphia, PA / Miami, FL', 'Golden Valley Arizona', 'California, USA']

    def cast(self, val):
        return str(val)

class latitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Latitude of the user's location""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Should be a float'
        self.unit = 'Degrees'
        self.examples = [25.77427, 46.3040364, 36.7014631]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Longitude of the user's location""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Should be a float'
        self.unit = 'Degrees'
        self.examples = [-80.19366, -109.1714312, -118.7559974]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Country of the user's location""
        self.valid_values = 'Country should be a string and valid country name'
        self.format = 'Formatted as strings'
        self.examples = ['United States of America', 'Canada', 'France']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country')
        return country.name

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = ""State of the user's location""
        self.valid_values = 'State should be a string'
        self.format = 'Formatted as strings'
        self.examples = ['Florida', 'Montana', 'California']

    def cast(self, val):
        return str(val)

class statecode(CategoricalSemanticType):

    def __init__(self):
        self.description = ""State code of the user's location""
        self.valid_values = 'State code should be a string'
        self.format = 'Formatted as strings'
        self.examples = ['FL', 'MT', 'CA']

    def cast(self, val):
        return str(val)


MAPPING = {'tweetid': tweetidentifier, 'likes': tweetlikes, 'retweetcount': retweetcount, 'userid': tweetuseridentifier, 'username': tweetusername, 'userjoindate': userjoindate, 'userfollowerscount': userfollowerscount, 'userlocation': tweetlocation, 'lat': latitude, 'long': longitude, 'country': country, 'state': state, 'statecode': statecode}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class realestateprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price per unit area of real estate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.unit = 'In price per square meter'
        self.examples = [37.9, 42.2, 47.3, 54.8, 43.1]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'no': index, 'yhousepriceofunitarea': realestateprice}"
"class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NFL Team'
        self.valid_values = ""A string that is of the form 'City Name + Team Name'""
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Arizona Cardinals', 'Atlanta Falcons', 'Dallas Cowboys', 'Baltimore Colts', 'Baltimore Ravens']

    def cast(self, val):
        return str(val).title()

class teamnameshort(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Short Name of a NFL Team'
        self.valid_values = ""A string that is of the form 'Team Name'""
        self.format = 'The first letter should be capitalized'
        self.examples = ['Cardinals', 'Washington', 'Raiders', 'Colts', 'Chargers']

    def cast(self, val):
        return str(val).title()

class teamidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ID of a NFL Team'
        self.valid_values = ""A string that is of the form '3 uppercase letters'""
        self.format = 'All letters should be uppercase'
        self.examples = ['ARI', 'LVR', 'WAS', 'TEN', 'NE']

    def cast(self, val):
        return str(val).upper()

class teamconference(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Conference of a NFL Team'
        self.valid_values = ""Either 'NFC' or 'AFC'""
        self.format = 'All letters should be uppercase'
        self.examples = ['NFC', 'AFC']

    def cast(self, val):
        return str(val).upper()

class teamdivision(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Division of a NFL Team'
        self.valid_values = ""A string that is of the form 'Conference + Region'""
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['NFC East', 'AFC West', 'NFC West', 'NFC South', 'AFC North']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()


MAPPING = {'teamname': teamname, 'teamnameshort': teamnameshort, 'teamid': teamidentifier, 'teamconference': teamconference, 'teamdivision': teamdivision}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of an event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [1966, 1983, 1997, 2010, 2022]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NFL Team'
        self.valid_values = 'Name should be a string representing a NFL team'
        self.format = 'Each word in the team name should be capitalized'
        self.examples = ['San Francisco 49ers', 'Dallas Cowboys', 'Pittsburgh Steelers', 'Green Bay Packers', 'Philadelphia Eagles']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NFL Team'
        self.valid_values = 'Name should be a string representing a NFL team'
        self.format = 'Each word in the team name should be capitalized'
        self.examples = ['San Francisco 49ers', 'Dallas Cowboys', 'Pittsburgh Steelers', 'Green Bay Packers', 'Philadelphia Eagles']

    def cast(self, val):
        return str(val).title()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a NFL game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Score should be formatted as an integer'
        self.examples = [14, 45, 27, 14, 24]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a NFL game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Score should be formatted as an integer'
        self.examples = [14, 45, 27, 14, 24]

    def cast(self, val):
        return int(val)

class teamidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ID of a NFL Team'
        self.valid_values = 'ID should be a string representing a NFL team'
        self.format = 'The ID should be all uppercase'
        self.examples = ['PIT', 'NE', 'SF', 'DAL', 'DEN']

    def cast(self, val):
        return str(val).upper()

class spread(NumericSemanticType):

    def __init__(self):
        self.description = 'Spread of a NFL game'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Spread should be formatted as a floating point number'
        self.examples = [-7.0, -4.5, -3.0, 0.0, -26.5]

    def cast(self, val):
        return float(val)

class stadium(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NFL Stadium'
        self.valid_values = 'Name should be a string representing a NFL stadium'
        self.format = 'Each word in the stadium name should be capitalized'
        self.examples = ['Giants Stadium', 'Lambeau Field', 'Arrowhead Stadium', 'Soldier Field', 'Qualcomm Stadium']

    def cast(self, val):
        return str(val).title()

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature at the time of a NFL game'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be formatted as a floating point number'
        self.units = 'In Fahrenheit'
        self.examples = [83.0, 81.0, 70.0, 82.0, 64.0]

    def cast(self, val):
        return float(val)

class windspeed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Wind speed at the time of a NFL game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wind speed should be formatted as a floating point number'
        self.units = 'In mph'
        self.examples = [6.0, 7.0, 7.0, 11.0, 8.0]

    def cast(self, val):
        return float(val)

class humidity(NumericSemanticType):

    def __init__(self):
        self.description = 'Humidity at the time of a NFL game'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Humidity should be formatted as a floating point number'
        self.examples = [71.0, 70.0, 82.0, 78.0, 62.0]

    def cast(self, val):
        return float(val)


MAPPING = {'scheduleseason': year, 'teamhome': teamname, 'teamaway': teamname, 'scorehome': score, 'scoreaway': score, 'teamfavoriteid': teamidentifier, 'spreadfavorite': spread, 'stadium': stadium, 'weathertemperature': temperature, 'weatherwindmph': windspeed, 'weatherhumidity': humidity}"
"class movieidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie IDs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class moviename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Movie'
        self.valid_values = 'A string representing the name of a movie'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['The Shining', 'The Blue Lagoon', 'Star Wars: Episode V - The Empire Strikes Back', 'Airplane!', 'Caddyshack']

    def cast(self, val):
        return str(val).title()

class movierating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Movie rating'
        self.valid_values = 'R, PG-13, PG, Not Rated, G'
        self.format = 'The value should be one of the valid ratings'
        self.examples = ['R', 'PG-13', 'PG', 'Not Rated', 'G']

    def cast(self, val):
        val = str(val)
        if val not in self.valid_values.split(', '):
            raise ValueError('Invalid rating')
        return val

class moviegenre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Movie genre'
        self.valid_values = 'Comedy, Action, Drama, Crime, Biography'
        self.format = 'The value should be one of the valid genres'
        self.examples = ['Comedy', 'Action', 'Drama', 'Crime', 'Biography']

    def cast(self, val):
        val = str(val)
        if val not in self.valid_values.split(', '):
            raise ValueError('Invalid genre')
        return val

class movieyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The year when a movie was produced'
        self.valid_range = [1980, 2020]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [1980, 1990, 2000, 2010, 2020]

    def cast(self, val):
        return int(val)

class moviereleasedate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date when a movie was released'
        self.valid_values = ""A string formatted as 'Month Day, Year (Country)'""
        self.format = ""The value should be a date formatted as 'Month Day, Year (Country)'""
        self.examples = ['June 13, 1980 (United States)', 'July 2, 1980 (United States)', 'June 20, 1980 (United States)', 'July 2, 1980 (United States)', 'July 25, 1980 (United States)']

    def cast(self, val):
        val = str(val)
        try:
            datetime.strptime(val, '%B %d, %Y (%s)')
        except ValueError:
            raise ValueError('Invalid date format')
        return val

class moviescore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score of a movie'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number'
        self.examples = [8.4, 5.8, 8.7, 7.7, 7.3]

    def cast(self, val):
        return round(float(val), 1)

class movievotes(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of votes for a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be an integer'
        self.examples = [927000, 65000, 1200000, 221000, 108000]

    def cast(self, val):
        return int(val)

class moviedirector(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the director of a movie'
        self.valid_values = 'A string representing the name of the director'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Stanley Kubrick', 'Randal Kleiser', 'Irvin Kershner', 'Jim Abrahams', 'Harold Ramis']

    def cast(self, val):
        return str(val).title()

class moviewriter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the writer of a movie'
        self.valid_values = 'A string representing the name of the writer'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Stephen King', 'Henry De Vere Stacpoole', 'Leigh Brackett', 'Jim Abrahams', 'Brian Doyle-Murray']

    def cast(self, val):
        return str(val).title()

class moviestar(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the star of a movie'
        self.valid_values = 'A string representing the name of the star'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Jack Nicholson', 'Brooke Shields', 'Mark Hamill', 'Robert Hays', 'Chevy Chase']

    def cast(self, val):
        return str(val).title()

class moviecountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The country where a movie was produced'
        self.valid_values = 'A string representing the name of the country'
        self.format = 'The value should be a valid country name'
        self.examples = ['United Kingdom', 'United States', 'France', 'Germany', 'Canada']

    def cast(self, val):
        val = str(val)
        try:
            pycountry.countries.get(name=val)
        except KeyError:
            raise ValueError('Invalid country name')
        return val

class moviebudget(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The budget of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Budget should be a floating point number'
        self.unit = 'In USD'
        self.examples = [19000000.0, 4500000.0, 18000000.0, 3500000.0, 6000000.0]

    def cast(self, val):
        return round(float(val), 2)

class moviegross(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gross earning of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Gross earning should be a floating point number'
        self.unit = 'In USD'
        self.examples = [46998772.0, 58853106.0, 538375067.0, 83453539.0, 39846344.0]

    def cast(self, val):
        return round(float(val), 2)

class moviecompany(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The production company of a movie'
        self.valid_values = 'A string representing the name of the production company'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Warner Bros.', 'Columbia Pictures', 'Lucasfilm', 'Paramount Pictures', 'Orion Pictures']

    def cast(self, val):
        return str(val).title()

class movieruntime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The runtime of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runtime should be an integer'
        self.unit = 'In minutes'
        self.examples = [146, 104, 124, 88, 98]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': movieidentifier, 'name': moviename, 'rating': movierating, 'genre': moviegenre, 'year': movieyear, 'released': moviereleasedate, 'score': moviescore, 'votes': movievotes, 'director': moviedirector, 'writer': moviewriter, 'star': moviestar, 'country': moviecountry, 'budget': moviebudget, 'gross': moviegross, 'company': moviecompany, 'runtime': movieruntime}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique identifiers must be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class healthcondition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class bodymassindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body Mass Index should be a floating point number'
        self.examples = [18.5, 24.9, 29.9, 34.9, 39.9]

    def cast(self, val):
        return float(val)

class healthscale(NumericSemanticType):

    def __init__(self):
        self.description = 'Health Scale'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Health Scale should be integer values ranging from 1 to 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class daysunhealthy(NumericSemanticType):

    def __init__(self):
        self.description = 'Days Unhealthy'
        self.valid_range = [0, 30]
        self.dtype = int
        self.format = 'Days Unhealthy should be integer values ranging from 0 to 30'
        self.examples = [0, 7, 14, 21, 30]

    def cast(self, val):
        return int(val)

class daysunhealthy(NumericSemanticType):

    def __init__(self):
        self.description = 'Days Unhealthy'
        self.valid_range = [0, 30]
        self.dtype = int
        self.format = 'Days Unhealthy should be integer values ranging from 0 to 30'
        self.examples = [0, 7, 14, 21, 30]

    def cast(self, val):
        return int(val)

class sex(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age Group'
        self.valid_range = [1, 13]
        self.dtype = int
        self.format = 'Age Group should be integer values ranging from 1 to 13'
        self.examples = [1, 4, 7, 10, 13]

    def cast(self, val):
        return int(val)

class education(NumericSemanticType):

    def __init__(self):
        self.description = 'Education Level'
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = 'Education Level should be integer values ranging from 1 to 6'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class income(NumericSemanticType):

    def __init__(self):
        self.description = 'Income Level'
        self.valid_range = [1, 8]
        self.dtype = int
        self.format = 'Income Level should be integer values ranging from 1 to 8'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': uniqueidentifier, 'highbp': healthcondition, 'highchol': healthcondition, 'cholcheck': healthcondition, 'smoker': healthcondition, 'stroke': healthcondition, 'heartdiseaseorattack': healthcondition, 'physactivity': healthcondition, 'fruits': healthcondition, 'veggies': healthcondition, 'hvyalcoholconsump': healthcondition, 'anyhealthcare': healthcondition, 'nodocbccost': healthcondition, 'diffwalk': healthcondition, 'bmi': bodymassindex, 'genhlth': healthscale, 'menthlth': daysunhealthy, 'physhlth': daysunhealthy, 'sex': sex, 'age': age, 'education': education, 'income': income}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index or id number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The Body Mass Index (BMI)'
        self.valid_range = [12.0, 98.0]
        self.dtype = float
        self.format = 'BMI should be formatted as a floating point number'
        self.unit = 'Kg/m^2'
        self.examples = [26.0, 26.0, 26.0, 28.0, 29.0]

    def cast(self, val):
        return round(float(val), 1)

class healthindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A health indicator value'
        self.valid_range = [1.0, 5.0]
        self.dtype = float
        self.format = 'Health indicator should be formatted as a floating point number'
        self.examples = [3.0, 3.0, 1.0, 3.0, 2.0]

    def cast(self, val):
        return round(float(val), 1)

class healthqualityindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A health quality indicator value'
        self.valid_range = [0.0, 30.0]
        self.dtype = float
        self.format = 'Health quality indicator should be formatted as a floating point number'
        self.examples = [5.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return round(float(val), 1)

class healthqualityindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A health quality indicator value'
        self.valid_range = [0.0, 30.0]
        self.dtype = float
        self.format = 'Health quality indicator should be formatted as a floating point number'
        self.examples = [5.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return round(float(val), 1)

class agegroup(NumericSemanticType):

    def __init__(self):
        self.description = 'An age group value'
        self.valid_range = [1.0, 13.0]
        self.dtype = int
        self.format = 'Age group should be formatted as an integer'
        self.examples = [4.0, 12.0, 13.0, 11.0, 8.0]

    def cast(self, val):
        return int(val)

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'An education level value'
        self.valid_range = [1.0, 6.0]
        self.dtype = int
        self.format = 'Education level should be formatted as an integer'
        self.examples = [6.0, 6.0, 6.0, 6.0, 5.0]

    def cast(self, val):
        return int(val)

class incomelevel(NumericSemanticType):

    def __init__(self):
        self.description = 'An income level value'
        self.valid_range = [1.0, 8.0]
        self.dtype = int
        self.format = 'Income level should be formatted as an integer'
        self.examples = [8.0, 8.0, 8.0, 8.0, 8.0]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'diabetesbinary': binaryvalue, 'highbp': binaryvalue, 'highchol': binaryvalue, 'cholcheck': binaryvalue, 'smoker': binaryvalue, 'stroke': binaryvalue, 'heartdiseaseorattack': binaryvalue, 'physactivity': binaryvalue, 'fruits': binaryvalue, 'veggies': binaryvalue, 'hvyalcoholconsump': binaryvalue, 'anyhealthcare': binaryvalue, 'nodocbccost': binaryvalue, 'diffwalk': binaryvalue, 'sex': binaryvalue, 'bmi': bodymassindex, 'genhlth': healthindicator, 'menthlth': healthqualityindicator, 'physhlth': healthqualityindicator, 'age': agegroup, 'education': educationlevel, 'income': incomelevel}"
"class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class binaryindicator(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError('Invalid value')
        return int(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index (BMI)'
        self.valid_range = [10, 50]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [18.5, 24.9, 29.9, 34.9, 39.9]

    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid BMI')
        return round(num, 1)

class generalhealthindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'General Health Indicator'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'General Health Indicator should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid General Health Indicator')
        return num

class mentalhealthdays(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days of poor mental health in the past month'
        self.valid_range = [0, 30]
        self.dtype = int
        self.format = 'Number of days should be an integer'
        self.examples = [0, 5, 10, 15, 20]

    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid number of days')
        return num

class mentalhealthdays(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days of poor mental health in the past month'
        self.valid_range = [0, 30]
        self.dtype = int
        self.format = 'Number of days should be an integer'
        self.examples = [0, 5, 10, 15, 20]

    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid number of days')
        return num

class educationlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education Level'
        self.valid_values = 'Education Level should be a number from 1 to 6'
        self.format = 'Education Level should be an integer'
        self.examples = ['1', '2', '3', '4', '5', '6']

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 6:
            raise ValueError('Invalid Education Level')
        return str(num)

class incomelevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Income Level'
        self.valid_values = 'Income Level should be a number from 1 to 8'
        self.format = 'Income Level should be an integer'
        self.examples = ['1', '2', '3', '4', '5', '6', '7', '8']

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 8:
            raise ValueError('Invalid Income Level')
        return str(num)


MAPPING = {'diabetesbinary': binaryindicator, 'highbp': binaryindicator, 'highchol': binaryindicator, 'cholcheck': binaryindicator, 'smoker': binaryindicator, 'stroke': binaryindicator, 'heartdiseaseorattack': binaryindicator, 'physactivity': binaryindicator, 'fruits': binaryindicator, 'veggies': binaryindicator, 'hvyalcoholconsump': binaryindicator, 'anyhealthcare': binaryindicator, 'nodocbccost': binaryindicator, 'diffwalk': binaryindicator, 'sex': binaryindicator, 'bmi': bodymassindex, 'genhlth': generalhealthindicator, 'menthlth': mentalhealthdays, 'physhlth': mentalhealthdays, 'education': educationlevel, 'income': incomelevel}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be an integer value starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in the format YYYY-MM-DD'
        self.valid_values = ""Dates must fit the following regex: '\\d{4}-\\d{2}-\\d{2}'""
        self.format = 'Dates should be stored as strings'
        self.examples = ['2020-01-30', '2020-01-31', '2020-02-01', '2020-02-02', '2020-02-03']

    def cast(self, val):
        datetime_object = datetime.strptime(str(val), '%Y-%m-%d')
        return datetime_object.strftime('%Y-%m-%d')

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a state or union territory in India'
        self.valid_values = 'Name of a state or union territory'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Kerala', 'Delhi', 'Rajasthan', 'Uttar Pradesh', 'Haryana']

    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90.0, 90.0]
        self.dtype = float
        self.format = 'Float value with decimal places'
        self.examples = [10.8505, 18.1124, 23.9415, 28.218, 34.2996]

    def cast(self, val):
        return round(float(val), 4)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180.0, 180.0]
        self.dtype = float
        self.format = 'Float value with decimal places'
        self.examples = [76.2711, 79.0193, 85.3131, 94.7278, 76.2711]

    def cast(self, val):
        return round(float(val), 4)

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Total confirmed cases of COVID-19'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Integer value'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return int(float(val))

class death(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Number of deaths due to COVID-19'
        self.valid_values = 'Valid values are integers represented as strings'
        self.format = 'Integer value represented as a string'
        self.examples = ['0', '1', '2', '3', '4']

    def cast(self, val):
        return str(int(val))

class cured(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of people cured/discharged/migrated'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Integer value'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        return int(float(val))

class newcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of new cases of COVID-19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class newdeaths(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0]

    def cast(self, val):
        return int(val)

class newrecovered(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of new recoveries from COVID-19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'date': date, 'nameofstateut': state, 'latitude': latitude, 'longitude': longitude, 'totalconfirmedcases': confirmedcases, 'death': death, 'cureddischargedmigrated': cured, 'newcases': newcases, 'newdeaths': newdeaths, 'newrecovered': newrecovered}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the data'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the data'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class statecode(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Code of the state'
        self.valid_values: str = ""State codes must fit the following regex: '[A-Z]{2}'""
        self.format: str = 'State codes should be 2-digit uppercase letters'
        self.examples: list = ['UP', 'MP', 'TN', 'BR', 'RJ']

    def cast(self, val):
        return val.upper()

class districtkey(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Key of the district'
        self.valid_values: str = ""District keys must fit the following regex: '[A-Z]{2}_[A-Za-z ]+'""
        self.format: str = ""District keys should be in the form of 'StateCode_DistrictName'""
        self.examples: list = ['UN_Unassigned', 'AP_Other State', 'AR_Kamle', 'AN_North and Middle Andaman', 'AN_South Andaman']

    def cast(self, val):
        parts = val.split('_')
        return parts[0].upper() + '_' + parts[1].title()

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class covidstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number of cases should be integer'
        self.unit: str = 'Number of cases'
        self.examples: list = [0, 1, 2, 51, 434]

    def cast(self, val):
        return int(val)

class datetimesemantictype(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date and time'
        self.valid_values: str = 'Date and time must be in the format: YYYY-MM-DD HH:MM:SS'
        self.format: str = 'Date and time must be in the format: YYYY-MM-DD HH:MM:SS'
        self.examples: list = ['2020-01-01 00:00:00', '2020-01-01 01:00:00', '2020-01-01 02:00:00', '2020-01-01 03:00:00', '2020-01-01 04:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')


MAPPING = {'unnamed0': index, 'slno': index, 'statecode': statecode, 'districtkey': districtkey, 'confirmed': covidstatus, 'active': covidstatus, 'recovered': covidstatus, 'deceased': covidstatus, 'migratedother': covidstatus, 'deltaconfirmed': covidstatus, 'deltaactive': covidstatus, 'deltarecovered': covidstatus, 'deltadeceased': covidstatus, 'lastupdated': datetimesemantictype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index for the entries in dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid index')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the data entry'
        self.valid_values = ""Date format should be 'DD Month '""
        self.format = ""Dates should be stored as strings in the format 'DD Month '""
        self.examples = ['30 January ', '31 January ', '01 February ', '02 February ', '03 February ']

    def cast(self, val):
        datetime_obj = datetime.strptime(val, '%d %B ')
        return datetime_obj.strftime('%d %B ')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid case number')


MAPPING = {'unnamed0': index, 'date': date, 'dailyconfirmed': casenumber, 'totalconfirmed': casenumber, 'dailyrecovered': casenumber, 'totalrecovered': casenumber, 'dailydeceased': casenumber, 'totaldeceased': casenumber}"
"class patientidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Patient ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Patient ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date must fit the following format: %d/%m/%Y'
        self.format = 'Date should be a string of the form dd/mm/yyyy'
        self.examples = ['30/01/2020', '02/02/2020', '03/02/2020', '02/03/2020', '02/03/2020']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%d/%m/%Y').strftime('%d/%m/%Y')
        except ValueError:
            return float('nan')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of patient'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [20, 25, 30, 35, 40]

    def cast(self, val):
        if str(val).isdigit():
            return int(val)
        else:
            return float('nan')

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of patient'
        self.valid_values = 'Gender must be either ""M"", ""F"", or ""Non-Binary""'
        self.format = 'Gender should be a string'
        self.examples = ['M', 'F', 'Non-Binary', 'M', 'F']

    def cast(self, val):
        if str(val).strip() in ['M', 'F', 'Non-Binary']:
            return str(val).strip()
        else:
            return float('nan')

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City where patient was detected'
        self.valid_values = 'City should be a string'
        self.format = 'City should be a string with the first letter capitalized'
        self.examples = ['Thrissur', 'Alappuzha', 'Kasaragod', 'East Delhi', 'Hyderabad']

    def cast(self, val):
        return str(val).title()

class district(CategoricalSemanticType):
    def __init__(self):
        self.description = 'District where patient was detected'
        self.valid_values = 'District should be a string'
        self.format = 'District should be a string with the first letter capitalized'
        self.examples = ['', '', '', '', '']

    def cast(self, val):
        return str(val).title()

class statecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'State code'
        self.valid_values = 'State code must be one of the following: ' + ', '.join([state.code for state in pycountry.subdivisions.get(country_code='IN')])
        self.format = 'State code should be a 2-letter string'
        self.examples = ['KL', 'DL', 'TG', 'MH', 'TN']

    def cast(self, val):
        if str(val) in [state.code for state in pycountry.subdivisions.get(country_code='IN')]:
            return str(val)
        else:
            return float('nan')

class status(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Current status of patient'
        self.valid_values = 'Status must be one of the following: Hospitalized, Recovered, Deceased, Migrated_Other, Migrated'
        self.format = 'Status should be a string'
        self.examples = ['Hospitalized', 'Recovered', 'Deceased', 'Migrated_Other', 'Migrated']

    def cast(self, val):
        if str(val) in ['Hospitalized', 'Recovered', 'Deceased', 'Migrated_Other', 'Migrated']:
            return str(val)
        else:
            return float('nan')

class nationality(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Nationality of patient'
        self.valid_values = 'Nationality must be one of the following: ' + ', '.join([country.name for country in list(pycountry.countries)])
        self.format = 'Nationality should be a string'
        self.examples = ['India', 'Italy', 'Indonesia', 'United Kingdom', 'Phillipines']

    def cast(self, val):
        if str(val) in [country.name for country in list(pycountry.countries)]:
            return str(val)
        else:
            return float('nan')

class typeoftransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Transmission'
        self.valid_values = 'Type of Transmission must be one of the following: Local, TBD, Imported, Unknown'
        self.format = 'Type of Transmission should be a string'
        self.examples = ['Local', 'TBD', 'Imported', 'Imported', 'Unknown']

    def cast(self, val):
        if str(val).strip() in ['Local', 'TBD', 'Imported', 'Unknown']:
            return str(val).strip()
        else:
            return float('nan')

class numcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer'
        self.examples = [1, 1, 1, 1, 1]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)


MAPPING = {'patientnumber': patientidentifier, 'dateannounced': date, 'agebracket': age, 'gender': gender, 'detectedcity': city, 'detecteddistrict': district, 'statecode': statecode, 'currentstatus': status, 'nationality': nationality, 'typeoftransmission': typeoftransmission, 'numcases': numcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An index used for pandas DataFrames'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Indexes must be non-negative integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An index used for pandas DataFrames'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Indexes must be non-negative integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date when the covid-19 data was reported'
        self.valid_values: str = 'Must be a string representation of a date in the format: DD-MMM-YY'
        self.format: str = 'Dates must be stored as strings in the format: DD-MMM-YY'
        self.examples: list = ['01-Apr-20', '08-Jul-20', '04-Jul-20', '02-Jun-20', '01-Jul-20']

    def cast(self, val):
        val = str(val)
        try:
            datetime.strptime(val, '%d-%b-%y')
            return val
        except ValueError:
            raise Exception('Invalid date format')

class stateabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'State abbreviation of the state in India where the covid-19 data was reported'
        self.valid_values: str = 'Must be a valid state abbreviation in India'
        self.format: str = 'State abbreviations must be stored as strings'
        self.examples: list = ['AN', 'GA', 'AR', 'AS', 'BR']

    def cast(self, val):
        val = str(val)
        if len(val) != 2:
            raise Exception('Invalid state abbreviation')
        return val.upper()

class covid19count(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of covid-19 cases (confirmed, deceased, or recovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Counts must be non-negative integers'
        self.examples: list = [0, 67, 15, 3, 20]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid covid-19 count')
        return val

class covid19count(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of covid-19 cases (confirmed, deceased, or recovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Counts must be non-negative integers'
        self.examples: list = [0, 67, 15, 3, 20]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid covid-19 count')
        return val

class covid19count(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Count of covid-19 cases (confirmed, deceased, or recovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Counts must be non-negative integers'
        self.examples: list = [0, 67, 15, 3, 20]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid covid-19 count')
        return val

class statename(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Name of the state in India where the covid-19 data was reported'
        self.valid_values: str = 'Must be a valid state name in India'
        self.format: str = 'State names must be stored as strings'
        self.examples: list = ['Andaman and Nicobar Islands', 'Goa', 'Arunachal Pradesh', 'Assam', 'Bihar']

    def cast(self, val):
        val = str(val)
        if not val.istitle():
            raise Exception('Invalid state name')
        return val


MAPPING = {'unnamed01': index, 'unnamed0': index, 'date': date, 'state': stateabbreviation, 'confirmed': covid19count, 'deceased': covid19count, 'recovered': covid19count, 'statename': statename}"
"class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Names of the Indian States'
        self.valid_values = 'Names of the Indian States'
        self.format = 'Each state name should be a string'
        self.examples = ['Maharashtra', 'Tamil Nadu', 'Delhi', 'Karnataka', 'Total']

    def cast(self, val):
        return str(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datetimeindia(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of the last update'
        self.valid_values = 'Date and time in Indian Standard Time (IST)'
        self.format = 'Each timestamp should be a string in the format DD/MM/YYYY HH:MM:SS'
        self.examples = ['06/08/2020 23:46:37', '06/08/2020 20:42:51', '06/08/2020 19:44:47', '06/08/2020 18:39:45', '06/08/2020 21:19:51']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y %H:%M:%S')

class statecodeindia(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Codes of the Indian States'
        self.valid_values = 'Codes of the Indian States'
        self.format = 'Each state code should be a string of two uppercase letters'
        self.examples = ['TT', 'MH', 'TN', 'DL', 'KA']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'state': state, 'confirmed': casenumber, 'recovered': casenumber, 'deaths': casenumber, 'active': casenumber, 'migratedother': casenumber, 'deltaconfirmed': casenumber, 'deltarecovered': casenumber, 'deltadeaths': casenumber, 'lastupdatedtime': datetimeindia, 'statecode': statecodeindia}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = 'Timestamps must be of the format dd/mm/yyyy hh:mm:ss'
        self.format = 'Timestamps should be stored as strings'
        self.examples = ['13/03/2020 00:00:00', '18/03/2020 18:00:00', '19/03/2020 10:00:00', '19/03/2020 18:00:00', '20/03/2020 10:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y %H:%M:%S').strftime('%d/%m/%Y %H:%M:%S')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates must be of the format dd/mm/yyyy'
        self.format = 'Dates should be stored as strings'
        self.examples = ['13/03/2020', '18/03/2020', '19/03/2020', '19/03/2020', '20/03/2020']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y').strftime('%d/%m/%Y')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Tests'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count of tests should be a non-negative number'
        self.examples = [6500.0, 13125.0, 13316.0, 14175.0, 14376.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class rate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Rate in Percentage'
        self.valid_values = 'Rate must be a string with a number followed by a percentage sign'
        self.format = 'Rate should be stored as a string with a percentage sign'
        self.examples = ['0.00%', '4.21%', '2.31%', '4.29%', '2.18%']

    def cast(self, val):
        return str(val)

class testspercase(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Tests per Case'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of tests per case should be a non-negative number'
        self.examples = [83.33, 87.5, 79.26, 77.88, 69.79]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testspercase(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Tests per Case'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of tests per case should be a non-negative number'
        self.examples = [83.33, 87.5, 79.26, 77.88, 69.79]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class testspermillion(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Tests per Million'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of tests per million should be a non-negative number'
        self.examples = [5.0, 10.0, 10.0, 11.0, 11.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')


MAPPING = {'unnamed0': index, 'updatetimestamp': timestamp, 'testedasof': date, 'totalsamplestested': testcount, 'totalindividualstested': testcount, 'totalpositivecases': testcount, 'testsconductedbyprivatelabs': testcount, 'samplereportedtoday': testcount, 'positivecasesfromsamplesreported': testcount, 'testpositivityrate': rate, 'individualstestedperconfirmedcase': testspercase, 'testsperconfirmedcase': testspercase, 'testspermillion': testspermillion}"
"class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Serial number or index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serial numbers should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates should be in the format dd/mm/yyyy'
        self.format = 'Dates should be in the format dd/mm/yyyy'
        self.examples = ['17/04/2020', '24/04/2020', '27/04/2020', '01/05/2020', '16/05/2020']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y').strftime('%d/%m/%Y')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string representing a valid country name'
        self.format = 'Country name should have each word capitalized'
        self.examples = ['India', 'United States', 'France', 'China', 'Canada']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()) is not None:
            return val.title()
        else:
            raise Exception('Invalid country name')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string representing a valid country name'
        self.format = 'Country name should have each word capitalized'
        self.examples = ['India', 'United States', 'France', 'China', 'Canada']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()) is not None:
            return val.title()
        else:
            raise Exception('Invalid country name')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string representing a valid country name'
        self.format = 'Country name should have each word capitalized'
        self.examples = ['India', 'United States', 'France', 'China', 'Canada']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()) is not None:
            return val.title()
        else:
            raise Exception('Invalid country name')

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class integercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer count should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class percent(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_values = ""Percentage values should end with the '%' symbol""
        self.format = ""Percentage values should be stored as strings ending with the '%' symbol""
        self.examples = ['0.00%', '0.36%', '0.33%', '0.02%', '1.67%']

    def cast(self, val):
        return str(val) + '%'


MAPPING = {'unnamed0': serialnumber, 'updatedon': date, 'state': country, 'tagtotaltested': country, 'tagpeopleinquarantine': country, 'totaltested': integercount, 'positive': integercount, 'negative': integercount, 'unconfirmed': integercount, 'cumulativepeopleinquarantine': integercount, 'totalpeoplecurrentlyinquarantine': integercount, 'totalpeoplereleasedfromquarantine': integercount, 'peopleinicu': integercount, 'peopleonventilators': integercount, 'numisolationbeds': integercount, 'numicubeds': integercount, 'numventilators': integercount, 'totalppe': integercount, 'coronaenquirycalls': integercount, 'numcallsstatehelpline': integercount, 'testsperthousand': integercount, 'testspermillion': integercount, 'testsperpositivecase': integercount, 'testpositivityrate': percent}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1, 2]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age in Years'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class ageinmonths(NumericSemanticType):

    def __init__(self):
        self.description = 'Age in Months'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class householdsize(NumericSemanticType):

    def __init__(self):
        self.description = 'Household Size'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Household size should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class householdsize(NumericSemanticType):

    def __init__(self):
        self.description = 'Household Size'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Household size should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': uniqueidentifier, 'seqn': uniqueidentifier, 'riagendr': gender, 'ridageyr': age, 'ridagemn': ageinmonths, 'dmdhhsiz': householdsize, 'dmdfmsiz': householdsize}"
"class sequenceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The sequence id of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence id should be formatted as an integer'
        self.examples: list[int] = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class sequenceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The sequence id of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence id should be formatted as an integer'
        self.examples: list[int] = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 2.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')

class dietresponse(NumericSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.valid_range = [1.0, 9.0]
        self.dtype = float
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise ValueError('Invalid diet response value')


MAPPING = {'unnamed0': sequenceidentifier, 'seqn': sequenceidentifier, 'drabf': binaryresponse, 'drdint': binaryresponse, 'drd350a': binaryresponse, 'drd350b': binaryresponse, 'drd350c': binaryresponse, 'drd350d': binaryresponse, 'drd350e': binaryresponse, 'drd350f': binaryresponse, 'drd350g': binaryresponse, 'drd350h': binaryresponse, 'drd350i': binaryresponse, 'drd350j': binaryresponse, 'drd350k': binaryresponse, 'drd370a': binaryresponse, 'dbq095z': dietresponse, 'drqsprep': dietresponse, 'drqsdiet': dietresponse, 'drd350aq': dietresponse, 'drd350bq': dietresponse, 'drd350cq': dietresponse, 'drd350dq': dietresponse, 'drd350eq': dietresponse, 'drd350fq': dietresponse, 'drd350gq': dietresponse, 'drd350hq': dietresponse, 'drd350iq': dietresponse, 'drd350jq': dietresponse, 'drd370aq': dietresponse}"
"class sequence(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequence of numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class sequence(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequence of numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'In mmHg'
        self.examples = [60.0, 88.0, 102.0, 120.0, 178.0]

    def cast(self, val):
        return float(val)

class examinationstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 3.0]

    def cast(self, val):
        return 1.0 if val else 3.0

class examinationstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1.0, 3.0]

    def cast(self, val):
        return 1.0 if val else 3.0

class bodyweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body weight of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body weight should be a floating point number'
        self.unit = 'In kg'
        self.examples = [3.1, 37.95, 65.3, 83.5, 222.6]

    def cast(self, val):
        return float(val)

class bodyweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body weight of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body weight should be a floating point number'
        self.unit = 'In kg'
        self.examples = [3.1, 37.95, 65.3, 83.5, 222.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodyheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body height of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [12.1, 19.7, 24.7, 30.2, 82.9]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [12.1, 19.7, 24.7, 30.2, 82.9]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [12.1, 19.7, 24.7, 30.2, 82.9]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [12.1, 19.7, 24.7, 30.2, 82.9]

    def cast(self, val):
        return float(val)

class waistcircumference(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Waist circumference of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Waist circumference should be a floating point number'
        self.unit = 'In cm'
        self.examples = [40.2, 71.2, 87.8, 102.8, 177.9]

    def cast(self, val):
        return float(val)

class waistcircumference(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Waist circumference of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Waist circumference should be a floating point number'
        self.unit = 'In cm'
        self.examples = [40.2, 71.2, 87.8, 102.8, 177.9]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': sequence, 'seqn': sequence, 'bpxchr': bloodpressure, 'bpaarm': bloodpressure, 'bpacsz': bloodpressure, 'bpxpls': bloodpressure, 'bpxpuls': bloodpressure, 'bpxpty': bloodpressure, 'bmdstats': examinationstatus, 'mgdexsts': examinationstatus, 'bmxwt': bodyweight, 'bmiwt': bodyweight, 'bmxrecum': bodyheight, 'bmirecum': bodyheight, 'bmxhead': bodyheight, 'bmihead': bodyheight, 'bmxht': bodyheight, 'bmiht': bodyheight, 'bmxleg': bodyheight, 'bmileg': bodyheight, 'bmxarml': bodyheight, 'bmiarml': bodyheight, 'bmxarmc': bodyheight, 'bmiarmc': bodyheight, 'bmxbmi': bodymassindex, 'bmdbmic': bodymassindex, 'bmdavsad': bodymassindex, 'bmdsadcm': bodymassindex, 'bmxwaist': waistcircumference, 'bmiwaist': waistcircumference}"
"class seqidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequence ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence ID should be a whole number'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class urinecreatinine(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Urine creatinine level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Urine creatinine level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [4.3, 153.0, 11.9, 16.0, 255.0]

    def cast(self, val):
        return round(float(val), 2)

class urinecreatinine(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Urine creatinine level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Urine creatinine level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [4.3, 153.0, 11.9, 16.0, 255.0]

    def cast(self, val):
        return round(float(val), 2)

class urinecreatinine(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Urine creatinine level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Urine creatinine level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [4.3, 153.0, 11.9, 16.0, 255.0]

    def cast(self, val):
        return round(float(val), 2)

class creatinineclearancerate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Creatinine Clearance rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Creatinine Clearance rate should be a floating point number'
        self.unit = 'In mL/min'
        self.examples: list = [121.073, 78.575, 5.0, 60.0, 106.0]

    def cast(self, val):
        return round(float(val), 2)

class creatinineclearancerate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Creatinine Clearance rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Creatinine Clearance rate should be a floating point number'
        self.unit = 'In mL/min'
        self.examples: list = [121.073, 78.575, 5.0, 60.0, 106.0]

    def cast(self, val):
        return round(float(val), 2)

class serumcreatinine(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum creatinine level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum creatinine level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [1.21, 0.79, 1.22, float('nan'), 0.73]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumcreatinine(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum creatinine level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum creatinine level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [1.21, 0.79, 1.22, float('nan'), 0.73]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumglobulin(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum globulin level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum globulin level should be a floating point number'
        self.unit = 'In g/dL'
        self.examples: list = [2.4, 3.1, 2.2, float('nan'), 2.8]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumglobulin(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum globulin level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum globulin level should be a floating point number'
        self.unit = 'In g/dL'
        self.examples: list = [2.4, 3.1, 2.2, float('nan'), 2.8]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumglucose(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum glucose level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum glucose level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [554.0, 219.0, 183.0, float('nan'), 104.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumglucose(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum glucose level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum glucose level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [554.0, 219.0, 183.0, float('nan'), 104.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class seruminorganicphosphorus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum inorganic phosphorus level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum inorganic phosphorus level should be a floating point number'
        self.unit = 'In mg/dL'
        self.examples: list = [16.0, 15.0, 13.0, float('nan'), 31.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class seruminorganicphosphorussi(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum inorganic phosphorus level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum inorganic phosphorus level should be a floating point number'
        self.unit = 'In mmol/L'
        self.examples: list = [4.344, 4.319, 3.284, float('nan'), 5.353]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class serumiron(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum iron level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Serum iron level should be a floating point number'
        self.unit = 'In ug/dL'
        self.examples: list = [58.0, 79.0, 98.0, float('nan'), 91.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)


MAPPING = {'seqn': seqidentifier, 'urxuma': urinecreatinine, 'urxums': urinecreatinine, 'urdact': urinecreatinine, 'urxucrx': creatinineclearancerate, 'urxcrs': creatinineclearancerate, 'lbxscr': serumcreatinine, 'lbdscrsi': serumcreatinine, 'lbxsgb': serumglobulin, 'lbdsgbsi': serumglobulin, 'lbxsgl': serumglucose, 'lbdsglsi': serumglucose, 'lbxsgtsi': seruminorganicphosphorus, 'lbdschsi': seruminorganicphosphorussi, 'lbxsir': serumiron}"
"class sequenceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequential ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequential ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class sequenceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequential ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequential ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class alcoholconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of alcohol consumed'
        self.valid_range = [0, 999]
        self.dtype = float
        self.format = 'Alcohol consumption should be a floating point number'
        self.unit = 'In units of standard drinks'
        self.examples = [0.0, 1.0, 2.0, 4.0, 999.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class alcoholconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of alcohol consumed'
        self.valid_range = [0, 999]
        self.dtype = float
        self.format = 'Alcohol consumption should be a floating point number'
        self.unit = 'In units of standard drinks'
        self.examples = [0.0, 1.0, 2.0, 4.0, 999.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class alcoholconsumptionunits(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The units of alcohol consumption'
        self.valid_values = 'Units of alcohol consumption should be 1, 2, or 3 representing day, week, or month respectively'
        self.format = 'Alcohol consumption units should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class alcoholconsumptionunits(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The units of alcohol consumption'
        self.valid_values = 'Units of alcohol consumption should be 1, 2, or 3 representing day, week, or month respectively'
        self.format = 'Alcohol consumption units should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class bloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood pressure level'
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = 'Blood pressure should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class bloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood pressure level'
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = 'Blood pressure should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class bloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood pressure level'
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = 'Blood pressure should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class bloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood pressure level'
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = 'Blood pressure should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class healthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.valid_values = 'Health status should be 1, 2, or 3 representing excellent, very good, or good respectively'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class healthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.valid_values = 'Health status should be 1, 2, or 3 representing excellent, very good, or good respectively'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class healthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.valid_values = 'Health status should be 1, 2, or 3 representing excellent, very good, or good respectively'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class healthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.valid_values = 'Health status should be 1, 2, or 3 representing excellent, very good, or good respectively'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class healthstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.valid_values = 'Health status should be 1, 2, or 3 representing excellent, very good, or good respectively'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class diabetesstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'Diabetes status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)


MAPPING = {'unnamed0': sequenceidentifier, 'seqn': sequenceidentifier, 'alq120q': alcoholconsumption, 'alq141q': alcoholconsumption, 'alq120u': alcoholconsumptionunits, 'alq141u': alcoholconsumptionunits, 'bpq040a': bloodpressure, 'bpq050a': bloodpressure, 'bpq090d': bloodpressure, 'bpq100d': bloodpressure, 'hsaquex': healthstatus, 'csq090a': healthstatus, 'csq090b': healthstatus, 'csq090c': healthstatus, 'csq090d': healthstatus, 'csq120a': diabetesstatus, 'csq120b': diabetesstatus, 'csq120c': diabetesstatus, 'csq120d': diabetesstatus, 'csq120e': diabetesstatus, 'csq120f': diabetesstatus, 'csq120g': diabetesstatus, 'csq120h': diabetesstatus, 'diq175a': diabetesstatus, 'diq175b': diabetesstatus, 'diq175c': diabetesstatus, 'diq175d': diabetesstatus, 'diq175e': diabetesstatus, 'diq175f': diabetesstatus, 'diq175g': diabetesstatus}"
"class sourceidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Identifier for the source of an article'
        self.valid_values = 'Source ID should be a string, containing alphanumeric characters and possibly hyphens'
        self.format = 'Source ID should be in lowercase'
        self.examples = ['reuters', 'bbc-news', 'the-irish-times', 'abc-news', 'cnn']

    def cast(self, val):
        return str(val).lower()

class sourcename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the source of an article'
        self.valid_values = 'Source name should be a string, possibly containing spaces and special characters'
        self.format = 'Only the first letter of each word in the source name should be capitalized'
        self.examples = ['Reuters', 'BBC News', 'The Irish Times', 'ABC News', 'CNN']

    def cast(self, val):
        return str(val).title()

class author(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the author of an article'
        self.valid_values = 'Author name should be a string, possibly containing spaces and special characters'
        self.format = ""The author name should be in the form 'First Last'""
        self.examples = ['The Associated Press', 'Reuters Editorial', 'CBS News', 'https://www.facebook.com/bbcnews', 'Al Jazeera']

    def cast(self, val):
        return str(val).title()

class publishedat(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time when an article was published'
        self.valid_values = ""Published date and time should be in the format 'YYYY-MM-DDTHH:MM:SSZ'""
        self.format = 'Published date and time should be formatted as a string'
        self.examples = ['2019-09-07T05:00:00Z', '2019-09-14T05:00:00Z', '2019-09-15T05:00:00Z', '2019-09-06T11:00:00Z', '2019-09-06T09:30:00Z']

    def cast(self, val):
        return str(datetime.strptime(str(val), '%Y-%m-%dT%H:%M:%SZ'))

class toparticle(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        return 0.0 if math.isnan(val) else float(val)

class engagementcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of engagements an article has received'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engagement count should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 43.0, 124.0, 196.236]

    def cast(self, val):
        return 0.0 if math.isnan(val) else float(val)

class engagementcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of engagements an article has received'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engagement count should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 43.0, 124.0, 196.236]

    def cast(self, val):
        return 0.0 if math.isnan(val) else float(val)

class engagementcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of engagements an article has received'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engagement count should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 43.0, 124.0, 196.236]

    def cast(self, val):
        return 0.0 if math.isnan(val) else float(val)

class engagementcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of engagements an article has received'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engagement count should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 43.0, 124.0, 196.236]

    def cast(self, val):
        return 0.0 if math.isnan(val) else float(val)


MAPPING = {'sourceid': sourceidentifier, 'sourcename': sourcename, 'author': author, 'publishedat': publishedat, 'toparticle': toparticle, 'engagementreactioncount': engagementcount, 'engagementcommentcount': engagementcount, 'engagementsharecount': engagementcount, 'engagementcommentplugincount': engagementcount}"
"class moviename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Movie and TV Show Titles'
        self.valid_values = 'Names should be strings of one or more characters'
        self.format = 'Names should be capitalized appropriately with spaces between words'
        self.examples = ['The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 'The Godfather: Part II', '12 Angry Men']

    def cast(self, val):
        return str(val).strip().title()

class releasedyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of release for movies and TV shows'
        self.valid_range = [1800, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be represented as a 4-digit integer'
        self.examples = [1994, 1972, 2008, 1974, 1957]

    def cast(self, val):
        year = int(val)
        if year < 1800 or year > datetime.now().year:
            raise Exception('Invalid year')
        else:
            return year

class certificate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Certificate ratings for movies and TV shows'
        self.valid_values = ""Should be one of the following: ['U', 'A', 'UA', 'R', 'PG-13']""
        self.format = 'Certificate rating should be a string'
        self.examples = ['U', 'A', 'UA', 'R', 'PG-13']

    def cast(self, val):
        if str(val) not in self.valid_values:
            raise Exception('Invalid certificate rating')
        else:
            return str(val)

class runtime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Runtime of movies and TV shows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runtime should be represented as an integer (in minutes)'
        self.unit = 'In minutes'
        self.examples = [142, 175, 152, 202, 96]

    def cast(self, val):
        runtime = int(val.split(' ')[0])
        if runtime < 0:
            raise Exception('Invalid runtime')
        else:
            return runtime

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'IMDB Rating of movies and TV shows'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Rating should be a floating point number between 0 and 10'
        self.examples = [9.3, 9.2, 9.0, 9.0, 9.0]

    def cast(self, val):
        rating = float(val)
        if rating < 0 or rating > 10:
            raise Exception('Invalid rating')
        else:
            return rating

class metascore(NumericSemanticType):

    def __init__(self):
        self.description = 'Metascore of movies and TV shows'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Metascore should be an integer between 0 and 100'
        self.examples = [80, 100, 84, 90, 96]

    def cast(self, val):
        metascore = int(val)
        if metascore < 0 or metascore > 100:
            raise Exception('Invalid metascore')
        else:
            return metascore

class directorname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Director of movies and TV shows'
        self.valid_values = 'Names should be strings of one or more characters'
        self.format = 'Names should be capitalized appropriately with spaces between words'
        self.examples = ['Alfred Hitchcock', 'Steven Spielberg', 'Hayao Miyazaki', 'Martin Scorsese', 'Akira Kurosawa']

    def cast(self, val):
        return str(val).strip().title()

class votes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of votes for movies and TV shows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be represented as an integer'
        self.examples = [2343110, 1620367, 2303232, 1129952, 689845]

    def cast(self, val):
        votes = int(val)
        if votes < 0:
            raise Exception('Invalid number of votes')
        else:
            return votes

class gross(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Gross earnings of movies and TV shows'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Gross earnings should be represented as a floating point number (in USD)'
        self.unit = 'In USD'
        self.examples = [28341469.0, 134966411.0, 534858444.0, 57300000.0, 4360000.0]

    def cast(self, val):
        gross = float(str(val).replace(',', ''))
        if gross < 0:
            raise Exception('Invalid gross earnings')
        else:
            return gross


MAPPING = {'seriestitle': moviename, 'releasedyear': releasedyear, 'certificate': certificate, 'runtime': runtime, 'imdbrating': rating, 'metascore': metascore, 'director': directorname, 'noofvotes': votes, 'gross': gross}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class areatype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of the area where the house is located'
        self.valid_values = ""The area type should be one of the following: ['Super built-up Area', 'Built-up Area', 'Plot Area', 'Carpet Area']""
        self.format = 'Area type should be a string with the first letter of each word capitalized'
        self.examples = ['Super built-up  Area', 'Built-up  Area', 'Plot  Area', 'Carpet  Area']

    def cast(self, val):
        return str(val).title()

class availability(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Availability status of the house'
        self.valid_values = ""Availability can be a date (in 'dd-MMM' format) or 'Ready To Move'""
        self.format = 'Availability should be a string with the first letter of each word capitalized'
        self.examples = ['19-Dec', 'Ready To Move', '18-May', '18-Apr', '18-Aug']

    def cast(self, val):
        if val.lower() == 'ready to move':
            return 'Ready To Move'
        else:
            return datetime.strptime(val, '%d-%b').strftime('%d-%b')

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of the house'
        self.valid_values = 'Location should be a string representing the name of the location'
        self.format = 'Location should be a string with the first letter of each word capitalized'
        self.examples = ['Whitefield', 'Sarjapur  Road', 'Electronic City', 'Kanakpura Road', 'Thanisandra']

    def cast(self, val):
        return str(val).title()

class size(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of the house'
        self.valid_values = 'Size should be a string representing the number of bedrooms and the type of the house'
        self.format = 'Size should be a string with the first letter of each word capitalized'
        self.examples = ['2 BHK', '3 BHK', '4 Bedroom', '4 BHK', '3 Bedroom']

    def cast(self, val):
        return str(val).title()

class society(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Society where the house is located'
        self.valid_values = 'Society should be a string representing the name of the society'
        self.format = 'Society should be a string with the first letter of each word capitalized'
        self.examples = ['GrrvaGr', 'PrarePa', 'Sryalan', 'Prtates', 'GMown E']

    def cast(self, val):
        if val is np.nan:
            return float('nan')
        else:
            return str(val).title()

class totalsqft(NumericSemanticType):

    def __init__(self):
        self.description = 'Total area of the house in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total area should be a floating point number'
        self.examples = [1056.0, 2600.0, 1440.0, 1521.0, 1200.0]

    def cast(self, val):
        return float(val)

class bath(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of bathrooms in the house'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of bathrooms should be a floating point number'
        self.examples = [2.0, 5.0, 2.0, 3.0, 2.0]

    def cast(self, val):
        return float(val)

class balcony(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of balconies in the house'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of balconies should be a floating point number'
        self.examples = [1.0, 3.0, 3.0, 1.0, 1.0]

    def cast(self, val):
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the house in lakh Indian Rupees'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In lakh Indian Rupees'
        self.examples = [39.07, 120.0, 62.0, 95.0, 51.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'areatype': areatype, 'availability': availability, 'location': location, 'size': size, 'society': society, 'totalsqft': totalsqft, 'bath': bath, 'balcony': balcony, 'price': price}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric identifier for a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class companyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Company'
        self.valid_values = 'Name should be a string representing a company name'
        self.format = 'Company name should be capitalized and without any special characters'
        self.examples = ['Google', 'YouTube']

    def cast(self, val):
        return str(val).title().strip()

class jobcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category of job'
        self.valid_values = 'Job category should be a string representing a job category'
        self.format = 'Job category should be capitalized and without any special characters'
        self.examples = ['Sales & Account Management', 'Marketing & Communications', 'Finance', 'Technical Solutions', 'Business Strategy']

    def cast(self, val):
        return str(val).title().strip()

class joblocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of job'
        self.valid_values = 'Job location should be a string representing a job location'
        self.format = ""Job location should be in the format 'City, State, Country' or 'City, Country'""
        self.examples = ['Mountain View, CA, United States', 'Sunnyvale, CA, United States', 'Dublin, Ireland', 'New York, NY, United States', 'London, United Kingdom']

    def cast(self, val):
        parts = val.split(',')
        if len(parts) == 3:
            (city, state, country) = parts
            return f'{city.strip()}, {state.strip()}, {pycountry.countries.get(name=country.strip()).alpha_2}'
        elif len(parts) == 2:
            (city, country) = parts
            return f'{city.strip()}, {pycountry.countries.get(name=country.strip()).alpha_2}'
        else:
            raise Exception('Invalid location format')


MAPPING = {'unnamed0': identifier, 'company': companyname, 'category': jobcategory, 'location': joblocation}"
"class showidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a show'
        self.valid_values = ""Show identifier must be a string starting with 's' followed by digits""
        self.format = ""Show identifier should be of format 's<number>'""
        self.examples = ['s1', 's11', 's17', 's16', 's15']

    def cast(self, val):
        match_obj = re.match('s[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid show identifier')

class contenttype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Movie', 'TV Show']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid content type')

class showtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a show'
        self.valid_values = 'Title must be a string'
        self.format = 'Title should be in string format'
        self.examples = ['Dick Johnson Is Dead', 'Blood & Water', 'Ganglands', 'Jailbirds New Orleans', 'Kota Factory']

    def cast(self, val):
        return str(val)

class showdirector(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Director of a show'
        self.valid_values = 'Director name must be a string'
        self.format = 'Director name should be in string format'
        self.examples = ['Rajiv Chilaka', 'Raúl Campos, Jan Suter', 'Marcus Raboy', 'Suhas Kadav', 'Jay Karas']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class productioncountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of production'
        self.valid_values = 'Country name must be a string'
        self.format = 'Country name should be in string format'
        self.examples = ['United States', 'India', 'United Kingdom', 'Japan', 'South Korea']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class showreleaseyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of release'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [1925, 2013, 2017, 2019, 2021]

    def cast(self, val):
        return int(val)

class showrating(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Rating of a show'
        self.valid_values = 'Rating must be a string'
        self.format = 'Rating should be in string format'
        self.examples = ['TV-MA', 'TV-14', 'TV-PG', 'R', 'PG-13']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class showduration(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Duration of a show'
        self.valid_values = ""Duration must be a string either with 'min' or 'Seasons' at the end""
        self.format = 'Duration should be in string format'
        self.examples = ['1 Season', '2 Seasons', '3 Seasons', '90 min', '94 min']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class showcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category of a show'
        self.valid_values = 'Category must be a string'
        self.format = 'Category should be in string format'
        self.examples = ['Documentaries', 'International TV Shows, TV Dramas, TV Mysteries', 'Crime TV Shows, International TV Shows, TV Action & Adventure', 'Docuseries, Reality TV', 'International TV Shows, Romantic TV Shows, TV Comedies']

    def cast(self, val):
        return str(val)


MAPPING = {'showid': showidentifier, 'type': contenttype, 'title': showtitle, 'director': showdirector, 'country': productioncountry, 'releaseyear': showreleaseyear, 'rating': showrating, 'duration': showduration, 'listedin': showcategory}"
"class studentidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of a student'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Student ID is a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['male', 'female']

    def cast(self, val):
        return str(val).lower()

class ethnicity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The ethnic group of a student'
        self.valid_values = ""One of ['group A', 'group B', 'group C', 'group D', 'group E']""
        self.format = ""One of ['group A', 'group B', 'group C', 'group D', 'group E']""
        self.examples = ['group A', 'group B', 'group C', 'group D', 'group E']

    def cast(self, val):
        return str(val).lower()

class parenteducationlevel(CategoricalSemanticType):

    def __init__(self):
        self.description = ""The highest level of education achieved by the student's parents""
        self.valid_values = ""One of ['some college', 'associate's degree', 'high school', 'some high school', 'bachelor's degree', 'master's degree']""
        self.format = ""One of ['some college', 'associate's degree', 'high school', 'some high school', 'bachelor's degree', 'master's degree']""
        self.examples = ['some college', ""associate's degree"", 'high school', 'some high school', ""bachelor's degree"", ""master's degree""]

    def cast(self, val):
        return str(val).lower()

class lunchstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['standard', 'free/reduced']

    def cast(self, val):
        return str(val).lower()

class testpreparationcoursestatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['none', 'completed']

    def cast(self, val):
        return str(val).lower()

class mathscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Mathematics'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [72, 69, 90, 47, 76]

    def cast(self, val):
        return int(val)

class readingscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Reading'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [72, 90, 95, 57, 78]

    def cast(self, val):
        return int(val)

class writingscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Writing'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [74, 88, 93, 44, 75]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': studentidentifier, 'gender': gender, 'raceethnicity': ethnicity, 'parentallevelofeducation': parenteducationlevel, 'lunch': lunchstatus, 'testpreparationcourse': testpreparationcoursestatus, 'mathscore': mathscore, 'readingscore': readingscore, 'writingscore': writingscore}"
"class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Unix timestamp'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unix timestamp should be an integer'
        self.examples = [1325317920, 1325317980, 1325318040, 1325318100, 1325318160]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid timestamp')
        return val

class btcprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a Bitcoin in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid price')
        return val

class btcprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a Bitcoin in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid price')
        return val

class btcprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a Bitcoin in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid price')
        return val

class btcprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a Bitcoin in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid price')
        return val

class btcprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a Bitcoin in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid price')
        return val

class btctradevolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of Bitcoin trades'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Bitcoin trade volume should be a floating point number'
        self.unit = 'In BTC'
        self.examples = [0.00313838, 1.14, 2.002, 8.972, 100.79051631]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid volume')
        return val

class volumecurrency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of trades in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trade volume should be a floating point number'
        self.unit = 'In USD'
        self.examples = [0.018516442, 6.995, 11.152, 47.464, 505.96839188]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid volume')
        return val


MAPPING = {'timestamp': timestamp, 'open': btcprice, 'high': btcprice, 'low': btcprice, 'close': btcprice, 'weightedprice': btcprice, 'volumebtc': btctradevolume, 'volumecurrency': volumecurrency}"
"class sequence(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequence of unique numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'A sequence of unique integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a customer'
        self.valid_values = 'An alphanumeric string'
        self.format = 'Unique alphanumeric strings, with a length of 32 characters'
        self.examples = ['06b8999e2fba1a1fbc88172c00ba8bc7', '18955e83d337fd6b2def6b18a428ac77', '4e7b3e00288586ebd08712fdd0374a03', 'b2b6027bc5c5109e529d4dc6358b12c3', '4f2d8ab171c80ec8364f7c12e35b23ad']

    def cast(self, val):
        return str(val)

class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a customer'
        self.valid_values = 'An alphanumeric string'
        self.format = 'Unique alphanumeric strings, with a length of 32 characters'
        self.examples = ['06b8999e2fba1a1fbc88172c00ba8bc7', '18955e83d337fd6b2def6b18a428ac77', '4e7b3e00288586ebd08712fdd0374a03', 'b2b6027bc5c5109e529d4dc6358b12c3', '4f2d8ab171c80ec8364f7c12e35b23ad']

    def cast(self, val):
        return str(val)

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.valid_values = 'Zip Codes are represented as 5-digit integers'
        self.format = 'Zip Codes must be 5-digit numbers stored as strings'
        self.examples = ['14409', '9790', '1151', '8775', '13056']

    def cast(self, val):
        return str(int(val)).zfill(5)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City names'
        self.valid_values = 'Name of cities, in lowercase'
        self.format = 'City names should be in lowercase'
        self.examples = ['franca', 'sao bernardo do campo', 'sao paulo', 'mogi das cruzes', 'campinas']

    def cast(self, val):
        return str(val).lower()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Brazilian State abbreviations'
        self.valid_values = 'Two-letter abbreviations of Brazilian states'
        self.format = 'Two-letter abbreviations of Brazilian states'
        self.examples = ['SP', 'RJ', 'MG', 'RS', 'PR']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'unnamed0': sequence, 'customerid': customeridentifier, 'customeruniqueid': customeridentifier, 'customerzipcodeprefix': zipcode, 'customercity': city, 'customerstate': state}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'ID'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Whole number, no decimal'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.valid_values = 'Zip Codes must be 4-digit numbers stored as strings'
        self.format = 'Zip Codes must be 4-digit numbers stored as strings'
        self.examples = ['1037', '1046', '1041', '1035', '1036']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('[0-9]{4}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class geocoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'GeoCoordinate'
        self.valid_range: list = [float('-inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Decimal number'
        self.examples: list = [-23.54562128115268, -23.54608112703553, -46.63929204800168, -46.64482029837157, -46.64295148361138]

    def cast(self, val):
        return float(val)

class geocoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'GeoCoordinate'
        self.valid_range: list = [float('-inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Decimal number'
        self.examples: list = [-23.54562128115268, -23.54608112703553, -46.63929204800168, -46.64482029837157, -46.64295148361138]

    def cast(self, val):
        return float(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City Name'
        self.valid_values = 'City name should be a string'
        self.format = 'Only the first letter of the city should be capitalized'
        self.examples = ['Sao Paulo', 'Sao Bernardo Do Campo', 'Jundiaí', 'Taboão Da Serra']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'State Code'
        self.valid_values = 'State code should be two capital letters'
        self.format = 'State code should be two capital letters'
        self.examples = ['SP', 'RN', 'AC']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'unnamed0': identifier, 'geolocationzipcodeprefix': zipcode, 'geolocationlat': geocoordinate, 'geolocationlng': geocoordinate, 'geolocationcity': city, 'geolocationstate': state}"
"class unnamedindex(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the row'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Integer index starting from 0'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class orderidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Unique order id'
        self.valid_values: str = 'Order id should be a string of alphanumeric characters'
        self.format: str = 'Alphanumeric string'
        self.examples: list = ['8272b63d03f5f79c56e9e4120aec44ef', '1b15974a0141d54e36626dca3fdc731a', 'ab14fdcfbe524636d65ee38360e22ce8', '9ef13efd6949e4573a18964dd1bbe7f5', '428a2f660dc84138d969ccd69a0ab6d5']

    def cast(self, val):
        return str(val)

class orderitemidentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Order item id'
        self.valid_range: list = [1, 21]
        self.dtype: object = int
        self.format: str = 'Integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class productidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Unique product id'
        self.valid_values: str = 'Product id should be a string of alphanumeric characters'
        self.format: str = 'Alphanumeric string'
        self.examples: list = ['aca2eb7d00ea1a7b8ebd4e68314663af', '422879e10f46682990de24d770e7f83d', '99a4788cb24856965c36a24e339b6058', '389d119b48cf3043d311335e499d9c6b', '368c6c730842d78016ad823897a372db']

    def cast(self, val):
        return str(val)

class selleridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Unique seller id'
        self.valid_values: str = 'Seller id should be a string of alphanumeric characters'
        self.format: str = 'Alphanumeric string'
        self.examples: list = ['6560211a19b47992c3666cc44a7e94c0', '4a3ca9315b744ce9f8e9374361493884', '1f50f920176fa81dab994f9023523100', 'cc419e0650a3c5ba77189a1882b7556a', 'da8622b14eb17ae2831f4ac5b9dab84a']

    def cast(self, val):
        return str(val)

class shippingdatetime(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Shipping limit date and time'
        self.valid_values: str = 'Should be a string representing a date and time in the format %Y-%m-%d %H:%M:%S'
        self.format: str = 'YYYY-MM-DD HH:MM:SS'
        self.examples: list = ['2017-07-21 18:25:23', '2018-03-01 02:50:48', '2017-08-30 14:30:23', '2017-02-03 21:44:49', '2017-11-30 10:30:51']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Price of the product'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number with two decimal places'
        self.unit: str = 'Currency: Brazilian Real'
        self.examples: list = [58.9, 239.9, 199.0, 12.99, 199.9]

    def cast(self, val):
        return round(float(val), 2)

class freightvalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Freight value'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Floating point number with two decimal places'
        self.unit: str = 'Currency: Brazilian Real'
        self.examples: list = [13.29, 19.93, 17.87, 12.79, 18.14]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': unnamedindex, 'orderid': orderidentifier, 'orderitemid': orderitemidentifier, 'productid': productidentifier, 'sellerid': selleridentifier, 'shippinglimitdate': shippingdatetime, 'price': price, 'freightvalue': freightvalue}"
"class orderidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of an order'
        self.valid_values = 'The order ID must be a unique string'
        self.format = 'The order ID must be formatted as a string'
        self.examples = ['b81ef226f3fe1789b1e8b2acac839d17', 'a9810da82917af2d9aefd1278f1dcfa0', '25e8ea4e93396b6fa0d3dd708e76c1bd', 'ba78997921bbcdc1373bb41e913ab953', '42fdf880ba16b47b59251dd489d4441a']

    def cast(self, val):
        return str(val)

class paymentsequential(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequence of payments'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Payment sequence should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class paymenttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Method of payment'
        self.valid_values = ""Payment types must be one of the following: ['credit_card', 'boleto', 'voucher', 'debit_card', 'not_defined']""
        self.format = 'Payment type should be a string'
        self.examples = ['credit_card', 'boleto', 'voucher', 'debit_card', 'not_defined']

    def cast(self, val):
        return str(val)

class paymentinstallments(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of payment installments'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Payment installments should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class paymentvalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Value of the payment'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Payment value should be formatted as a floating point number'
        self.units = 'In BRL'
        self.examples = [99.33, 24.39, 65.71, 107.78, 128.45]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'orderid': orderidentifier, 'paymentsequential': paymentsequential, 'paymenttype': paymenttype, 'paymentinstallments': paymentinstallments, 'paymentvalue': paymentvalue}"
"class uniqueidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_values = 'Unique identifiers are typically a randomly generated string'
        self.format = 'A string of alphanumeric characters'
        self.examples = ['7bc2406110b926393aa56f80a40eba40', '80e641a11e56f04c1ad469d5645fdfde', '228ce5500dc1d8e020d8d1322874b6f0', 'e64fb393e7b32834bb789ff8bb30750e', 'f7c4243c7fe1938f181bec41a392bdeb']

    def cast(self, val):
        return str(val)

class uniqueidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_values = 'Unique identifiers are typically a randomly generated string'
        self.format = 'A string of alphanumeric characters'
        self.examples = ['7bc2406110b926393aa56f80a40eba40', '80e641a11e56f04c1ad469d5645fdfde', '228ce5500dc1d8e020d8d1322874b6f0', 'e64fb393e7b32834bb789ff8bb30750e', 'f7c4243c7fe1938f181bec41a392bdeb']

    def cast(self, val):
        return str(val)

class uniqueidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_values = 'Unique identifiers are typically a randomly generated string'
        self.format = 'A string of alphanumeric characters'
        self.examples = ['7bc2406110b926393aa56f80a40eba40', '80e641a11e56f04c1ad469d5645fdfde', '228ce5500dc1d8e020d8d1322874b6f0', 'e64fb393e7b32834bb789ff8bb30750e', 'f7c4243c7fe1938f181bec41a392bdeb']

    def cast(self, val):
        return str(val)

class reviewrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Review Rating'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'An integer between 1 and 5 (inclusive)'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class reviewtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Review Title'
        self.valid_values = 'Review titles are typically a string of words'
        self.format = 'A string of words with the first letter of each word capitalized'
        self.examples = ['Recomendo', 'Super Recomendo', 'Bom', 'Excelente', 'Muito Bom']

    def cast(self, val):
        return str(val).title()

class reviewdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Review Date'
        self.valid_values = ""Dates should be of the format 'yyyy-mm-dd hh:mm:ss'""
        self.format = ""Dates should be of the format 'yyyy-mm-dd hh:mm:ss'""
        self.examples = ['2017-12-19 00:00:00', '2018-08-28 00:00:00', '2017-12-20 00:00:00', '2018-05-19 00:00:00', '2018-05-15 00:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class reviewdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Review Date'
        self.valid_values = ""Dates should be of the format 'yyyy-mm-dd hh:mm:ss'""
        self.format = ""Dates should be of the format 'yyyy-mm-dd hh:mm:ss'""
        self.examples = ['2017-12-19 00:00:00', '2018-08-28 00:00:00', '2017-12-20 00:00:00', '2018-05-19 00:00:00', '2018-05-15 00:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')


MAPPING = {'unnamed0': uniqueidentifier, 'reviewid': uniqueidentifier, 'orderid': uniqueidentifier, 'reviewscore': reviewrating, 'reviewcommenttitle': reviewtitle, 'reviewcreationdate': reviewdate, 'reviewanswertimestamp': reviewdate}"
"class orderidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for the orders'
        self.valid_values = 'A string containing alphanumeric characters'
        self.format = 'Alphanumeric string'
        self.examples = ['e481f51cbdc54678b7cc49136f2d6af7', '2ce1ad82022c1ba30c2079502ac725aa', '949d5b44dbf5de918fe9c16f97b45f8a', 'ad21c59c0840e6cb83a9ceb5573f8159', 'a4591c265e18cb1dcee52889e2d8acc3']

    def cast(self, val):
        return str(val)

class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for the customers'
        self.valid_values = 'A string containing alphanumeric characters'
        self.format = 'Alphanumeric string'
        self.examples = ['9ef432eb6251297304e76186b10a928d', '7f2178c5d771e17f507d3c1637339298', 'f88197465ea7920adcdbec7375364d82', '8ab97904e6daea8866dbdbc4fb7aad2c', '503740e9ca751ccdda7ba28e9ab8f608']

    def cast(self, val):
        return str(val)

class orderstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The status of the orders'
        self.valid_values = ""One of the following values: ['delivered', 'shipped', 'canceled', 'unavailable', 'invoiced']""
        self.format = 'A categorical string'
        self.examples = ['delivered', 'shipped', 'canceled', 'unavailable', 'invoiced']

    def cast(self, val):
        return str(val)

class orderpurchasetimestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the purchase'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix timestamp'
        self.examples = []

    def cast(self, val):
        return pd.to_datetime(val).timestamp()

class orderapprovedat(NumericSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order approval'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix timestamp'
        self.examples = []

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return pd.to_datetime(val).timestamp()

class orderdeliveredcarrierdate(NumericSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order delivery by the carrier'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix timestamp'
        self.examples = []

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return pd.to_datetime(val).timestamp()

class orderdeliveredcustomerdate(NumericSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order delivery to the customer'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix timestamp'
        self.examples = []

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return pd.to_datetime(val).timestamp()

class orderestimateddeliverydate(NumericSemanticType):

    def __init__(self):
        self.description = 'The estimated delivery date of the order'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix timestamp'
        self.examples = []

    def cast(self, val):
        return pd.to_datetime(val).timestamp()


MAPPING = {'orderid': orderidentifier, 'customerid': customeridentifier, 'orderstatus': orderstatus, 'orderpurchasetimestamp': orderpurchasetimestamp, 'orderapprovedat': orderapprovedat, 'orderdeliveredcarrierdate': orderdeliveredcarrierdate, 'orderdeliveredcustomerdate': orderdeliveredcustomerdate, 'orderestimateddeliverydate': orderestimateddeliverydate}"
"class productidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product ID'
        self.valid_values = 'Product IDs should be a string of alphanumeric characters.'
        self.format = 'Alphanumeric string with a length of 32 characters.'
        self.examples = ['1e9e8ef04dbcff4541ed26657ea517e5', '3aa071139cb16b67ca9e5dea641aaa2f', '96bd76ec8810374ed1b65e291975717f', 'cef67bcfe19066a932b7673e239eb23d', '9dc1a7de274444849c219cff195d0b71']

    def cast(self, val):
        return str(val)

class productcategoryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Category Name'
        self.valid_values = 'Product category names should be a string representing the category of the product.'
        self.format = 'Lowercase strings with underscores in place of spaces.'
        self.examples = ['cama_mesa_banho', 'esporte_lazer', 'moveis_decoracao', 'beleza_saude', 'utilidades_domesticas']

    def cast(self, val):
        return str(val).replace(' ', '_').lower()

class productphotosqty(NumericSemanticType):

    def __init__(self):
        self.description = 'Quantity of Product Photos'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as a floating point number.'
        self.examples = [1.0, 1.0, 1.0, 1.0, 4.0]

    def cast(self, val):
        return float(val)

class productweightg(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of the Product'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as a floating point number.'
        self.unit = 'In grams'
        self.examples = [225.0, 1000.0, 154.0, 371.0, 625.0]

    def cast(self, val):
        return float(val)

class productlengthcm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Length of the Product'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as a floating point number.'
        self.unit = 'In centimeters'
        self.examples = [16.0, 30.0, 18.0, 26.0, 20.0]

    def cast(self, val):
        return float(val)

class productheightcm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of the Product'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as a floating point number.'
        self.unit = 'In centimeters'
        self.examples = [10.0, 18.0, 9.0, 4.0, 17.0]

    def cast(self, val):
        return float(val)

class productwidthcm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Width of the Product'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as a floating point number.'
        self.unit = 'In centimeters'
        self.examples = [14.0, 20.0, 15.0, 26.0, 13.0]

    def cast(self, val):
        return float(val)


MAPPING = {'productid': productidentifier, 'productcategoryname': productcategoryname, 'productphotosqty': productphotosqty, 'productweightg': productweightg, 'productlengthcm': productlengthcm, 'productheightcm': productheightcm, 'productwidthcm': productwidthcm}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values should be integer values'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class selleridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Seller ID'
        self.valid_values = 'Seller ID is a string of alphanumeric characters'
        self.format = 'Seller ID is a string of alphanumeric characters'
        self.examples = ['3442f8959a84dea7ee197c632cb2df15', 'd1b65fc7debc3361ea86b5f14c68d2e2', 'ce3ad9de960102d0677a81f5d0bb7b2d', 'c0f3eea2e14555b6faeea3dd58c1b1c3', '51a04a8a6bdcb23deccc82b0b80742cf']

    def cast(self, val):
        return str(val)

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zip Code'
        self.valid_values = ""Zip Codes must must fit the following regex: '[0-9]{5}(?:-[0-9]{4})?'""
        self.format = 'Zip Codes must be 5-digit numbers stored as strings'
        self.examples = ['13023', '13844', '20031', '4195', '12914']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('[0-9]{5}(?:-[0-9]{4})?', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City Name'
        self.valid_values = 'City names should be a string of words, each word starting with a capital letter'
        self.format = 'City names should be a string of words, each word starting with a capital letter'
        self.examples = ['Campinas', 'Mogi Guacu', 'Rio De Janeiro', 'Sao Paulo', 'Braganca Paulista']

    def cast(self, val):
        return str(val).title()

class stateabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'State Abbreviation'
        self.valid_values = 'State abbreviations should be a string of 2 uppercase letters'
        self.format = 'State abbreviations should be a string of 2 uppercase letters'
        self.examples = ['SP', 'PR', 'MG', 'SC', 'RJ']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'unnamed0': index, 'sellerid': selleridentifier, 'sellerzipcodeprefix': zipcode, 'sellercity': cityname, 'sellerstate': stateabbreviation}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer format'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class productcategoryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category name of the product in Portuguese'
        self.valid_values = 'Should be a string and correspond to a valid category'
        self.format = 'Alphanumeric string potentially with underscores'
        self.examples = ['beleza_saude', 'informatica_acessorios', 'automotivo', 'cama_mesa_banho', 'moveis_decoracao']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')

class productcategorynameenglish(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category name of the product in English'
        self.valid_values = 'Should be a string and correspond to a valid category'
        self.format = 'Alphanumeric string potentially with underscores'
        self.examples = ['health_beauty', 'computers_accessories', 'auto', 'bed_bath_table', 'furniture_decor']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')


MAPPING = {'unnamed0': index, 'productcategoryname': productcategoryname, 'productcategorynameenglish': productcategorynameenglish}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class battery(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Battery power'
        self.valid_range = [500, 1999]
        self.dtype = int
        self.format = 'Battery power should be an integer'
        self.unit = 'In mAh'
        self.examples = [1043, 841, 1807, 1546, 1434]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class clockspeed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Clock speed of the processor'
        self.valid_range = [0.5, 3.0]
        self.dtype = float
        self.format = 'Clock speed should be a floating point number'
        self.unit = 'In GHz'
        self.examples = [1.8, 0.5, 2.8, 0.5, 1.4]

    def cast(self, val):
        return float(val)

class ram(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'RAM size'
        self.valid_range = [263, 3989]
        self.dtype = int
        self.format = 'RAM size should be an integer'
        self.unit = 'In MB'
        self.examples = [3476, 3895, 2396, 3893, 1773]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'id': index, 'batterypower': battery, 'blue': boolean, 'dualsim': boolean, 'fc': boolean, 'fourg': boolean, 'intmemory': boolean, 'mdep': boolean, 'mobilewt': boolean, 'ncores': boolean, 'pc': boolean, 'pxheight': boolean, 'pxwidth': boolean, 'sch': boolean, 'scw': boolean, 'talktime': boolean, 'threeg': boolean, 'touchscreen': boolean, 'wifi': boolean, 'clockspeed': clockspeed, 'ram': ram}"
"class batterypower(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The battery power capacity in mAh'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Battery Power should be formatted as an integer'
        self.unit = 'mAh'
        self.examples = [842, 1021, 563, 615, 1821]

    def cast(self, val):
        num = int(val)
        return num

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class booleanfeature(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class clockspeed(NumericSemanticType):

    def __init__(self):
        self.description = ""The clock speed of the mobile's processor in GHz""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Clock Speed should be formatted as a floating point number'
        self.examples = [2.2, 0.5, 0.5, 2.5, 1.2]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class numberofcores(NumericSemanticType):

    def __init__(self):
        self.description = ""The number of cores in the mobile's processor""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of Cores should be formatted as an integer'
        self.examples = [2, 3, 5, 6, 2]

    def cast(self, val):
        num = int(val)
        return num

class numberofcores(NumericSemanticType):

    def __init__(self):
        self.description = ""The number of cores in the mobile's processor""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of Cores should be formatted as an integer'
        self.examples = [2, 3, 5, 6, 2]

    def cast(self, val):
        num = int(val)
        return num

class numberofcores(NumericSemanticType):

    def __init__(self):
        self.description = ""The number of cores in the mobile's processor""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of Cores should be formatted as an integer'
        self.examples = [2, 3, 5, 6, 2]

    def cast(self, val):
        num = int(val)
        return num

class internalmemory(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The internal memory of the mobile in GB'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Internal Memory should be formatted as an integer'
        self.unit = 'GB'
        self.examples = [7, 53, 41, 10, 44]

    def cast(self, val):
        num = int(val)
        return num

class mobiledepth(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The depth of the mobile in cm'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mobile Depth should be formatted as a floating point number'
        self.unit = 'cm'
        self.examples = [0.6, 0.7, 0.9, 0.8, 0.6]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class mobileweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The weight of the mobile in grams'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mobile Weight should be formatted as an integer'
        self.unit = 'g'
        self.examples = [188, 136, 145, 131, 141]

    def cast(self, val):
        num = int(val)
        return num

class pixelheight(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel resolution height'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Pixel Height should be formatted as an integer'
        self.examples = [20, 905, 1263, 1216, 1208]

    def cast(self, val):
        num = int(val)
        return num

class pixelwidth(NumericSemanticType):

    def __init__(self):
        self.description = 'The pixel resolution width'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Pixel Width should be formatted as an integer'
        self.examples = [756, 1988, 1716, 1786, 1212]

    def cast(self, val):
        num = int(val)
        return num

class ram(NumericSemanticType):

    def __init__(self):
        self.description = 'The RAM size in MB'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'RAM should be formatted as an integer'
        self.examples = [2549, 2631, 2603, 2769, 1411]

    def cast(self, val):
        num = int(val)
        return num

class screensize(NumericSemanticType):

    def __init__(self):
        self.description = 'The screen size in cm'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Screen Size should be formatted as an integer'
        self.examples = [9, 17, 11, 16, 8]

    def cast(self, val):
        num = int(val)
        return num

class screensize(NumericSemanticType):

    def __init__(self):
        self.description = 'The screen size in cm'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Screen Size should be formatted as an integer'
        self.examples = [9, 17, 11, 16, 8]

    def cast(self, val):
        num = int(val)
        return num

class talktime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The maximum talk time in hours'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Talk Time should be formatted as an integer'
        self.unit = 'hours'
        self.examples = [19, 7, 9, 11, 15]

    def cast(self, val):
        num = int(val)
        return num

class pricerange(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The price range of the mobile'
        self.valid_values = 'The price range should be an integer between 0 and 3'
        self.format = 'Price range should be formatted as an integer'
        self.examples = [1, 2, 2, 2, 1]

    def cast(self, val):
        num = int(val)
        return num


MAPPING = {'batterypower': batterypower, 'blue': booleanfeature, 'dualsim': booleanfeature, 'fourg': booleanfeature, 'threeg': booleanfeature, 'touchscreen': booleanfeature, 'wifi': booleanfeature, 'clockspeed': clockspeed, 'fc': numberofcores, 'ncores': numberofcores, 'pc': numberofcores, 'intmemory': internalmemory, 'mdep': mobiledepth, 'mobilewt': mobileweight, 'pxheight': pixelheight, 'pxwidth': pixelwidth, 'ram': ram, 'sch': screensize, 'scw': screensize, 'talktime': talktime, 'pricerange': pricerange}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = 'Date should be a string'
        self.examples = ['2013-11-12', '2016-02-19', '2016-03-03', '2016-03-02', '2016-03-01']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').date()

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cities'
        self.valid_values = 'City names should be capitalized and should not contain numbers or special characters'
        self.format = 'City should be a string'
        self.examples = ['Canberra', 'Sydney', 'Adelaide', 'Brisbane', 'Melbourne']

    def cast(self, val):
        return str(val).title()

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In degrees Celsius'
        self.examples = [22.9, 25.1, 25.7, 28.0, 32.3]

    def cast(self, val):
        return float(val)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In degrees Celsius'
        self.examples = [22.9, 25.1, 25.7, 28.0, 32.3]

    def cast(self, val):
        return float(val)

class rainfall(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Rainfall in millimeters'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rainfall should be a float'
        self.unit = 'In millimeters'
        self.examples = [0.6, 0.0, 0.0, 0.0, 1.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class winddirection(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Wind direction'
        self.valid_values = 'Wind direction should be one of the 16 cardinal directions'
        self.format = 'Wind direction should be a string'
        self.examples = ['W', 'N', 'S', 'SSE', 'WSW']

    def cast(self, val):
        return str(val).upper()

class windspeed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Wind speed in kilometers per hour'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wind speed should be a float'
        self.unit = 'In kilometers per hour'
        self.examples = [44.0, 44.0, 46.0, 24.0, 41.0]

    def cast(self, val):
        return float(val)

class raintoday(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        return str(val)

class raintoday(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No', 'Yes']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'date': date, 'location': city, 'mintemp': temperature, 'maxtemp': temperature, 'rainfall': rainfall, 'windgustdir': winddirection, 'windgustspeed': windspeed, 'raintoday': raintoday, 'raintomorrow': raintoday}"
"class caridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Car id should be an integer'
        self.examples = [7222695916, 7218891961, 7221797935, 7222270760, 7210384030]

    def cast(self, val):
        return int(val)

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a region'
        self.valid_values = 'Region name should be a string'
        self.format = 'The name should be in lower case'
        self.examples = ['fresno / madera', 'stockton', 'modesto', 'washington, DC', 'sacramento']

    def cast(self, val):
        return str(val).lower()

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples: list[str] = [6000.0, 11900.0, 21000.0, 1500.0, 4900.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Car model should be a string'
        self.format = 'The model name should be in lower case'
        self.examples = ['f-150', 'silverado 1500', 'camry', 'accord', 'civic']

    def cast(self, val):
        return str(val).lower()

class carcondition(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Condition of a car'
        self.valid_values = ""Condition should be either 'good', 'excellent', 'like new', 'fair', or 'new'""
        self.format = 'The condition should be in lower case'
        self.examples = ['good', 'excellent', 'like new', 'fair', 'new']

    def cast(self, val):
        conditions = ['good', 'excellent', 'like new', 'fair', 'new']
        if str(val).lower() in conditions:
            return str(val).lower()
        else:
            raise Exception('Invalid car condition')

class carstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State where car is located'
        self.valid_values = 'State should be a string'
        self.format = 'The state should be in lower case'
        self.examples = ['ca', 'co', 'az', 'fl', 'ct']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'id': caridentifier, 'region': regionname, 'price': carprice, 'model': carmodel, 'condition': carcondition, 'state': carstate}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year as a 4-digit integer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2020, 2021, 2022, 2023, 2024]

    def cast(self, val):
        return int(val)

class experiencelevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Experience Level of Employee'
        self.valid_values = ""Experience Level can be 'SE' for Senior, 'MI' for Mid-Level, 'EN' for Entry-Level, 'EX' for Expert""
        self.format = 'Experience Level should be represented as a two-letter string'
        self.examples = ['SE', 'MI', 'EN', 'EX']

    def cast(self, val):
        return str(val).upper()

class employmenttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Employment Type of Employee'
        self.valid_values = ""Employment Type can be 'FT' for Full-Time, 'PT' for Part-Time, 'CT' for Contract, 'FL' for Freelance""
        self.format = 'Employment Type should be represented as a two-letter string'
        self.examples = ['FT', 'PT', 'CT', 'FL']

    def cast(self, val):
        return str(val).upper()

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job Title of Employee'
        self.valid_values = 'Job Title should be a string'
        self.format = 'Job Title should be a string with the first letter of each word capitalized'
        self.examples = ['Data Engineer', 'Data Scientist', 'Data Analyst', 'Machine Learning Engineer', 'Analytics Engineer']

    def cast(self, val):
        return str(val).title()

class salary(NumericSemanticType):

    def __init__(self):
        self.description = 'Salary of Employee'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be a floating point number'
        self.examples = [60000, 80000, 100000, 120000, 150000]

    def cast(self, val):
        return float(val)

class currency(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Currency in which salary is paid'
        self.valid_values = 'Currency should be a string representing the ISO 4217 currency code'
        self.format = 'Currency should be a string of three uppercase letters'
        self.examples = ['USD', 'EUR', 'GBP', 'INR', 'CAD']

    def cast(self, val):
        val = str(val).upper()
        if pycountry.currencies.get(alpha_3=val):
            return val
        else:
            raise Exception('Invalid currency code')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country in which employee or company is located'
        self.valid_values = 'Country should be a string representing the ISO 3166-1 alpha-2 country code'
        self.format = 'Country should be a string of two uppercase letters'
        self.examples = ['US', 'GB', 'CA', 'ES', 'IN']

    def cast(self, val):
        val = str(val).upper()
        if pycountry.countries.get(alpha_2=val):
            return val
        else:
            raise Exception('Invalid country code')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country in which employee or company is located'
        self.valid_values = 'Country should be a string representing the ISO 3166-1 alpha-2 country code'
        self.format = 'Country should be a string of two uppercase letters'
        self.examples = ['US', 'GB', 'CA', 'ES', 'IN']

    def cast(self, val):
        val = str(val).upper()
        if pycountry.countries.get(alpha_2=val):
            return val
        else:
            raise Exception('Invalid country code')

class remoteratio(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of work done remotely by employee'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Remote Ratio should be a floating point number between 0 and 100'
        self.examples = [0, 25, 50, 75, 100]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return num
        else:
            raise Exception('Invalid remote ratio')

class companysize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of the Company'
        self.valid_values = ""Company Size can be 'S' for Small, 'M' for Medium, 'L' for Large""
        self.format = 'Company Size should be represented as a single-letter string'
        self.examples = ['S', 'M', 'L']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'workyear': year, 'experiencelevel': experiencelevel, 'employmenttype': employmenttype, 'jobtitle': jobtitle, 'salary': salary, 'salarycurrency': currency, 'employeeresidence': country, 'companylocation': country, 'remoteratio': remoteratio, 'companysize': companysize}"
"class passengeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of a passenger'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Passenger ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a passenger'
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = 'Age should be a non-negative floating point number'
        self.examples = [22.0, 38.0, 26.0, 35.0, 35.0]

    def cast(self, val):
        if math.isnan(val) or val < 0 or val > 120:
            return float('nan')
        else:
            return float(val)

class fare(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Fare paid by a passenger'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fare should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [7.25, 71.2833, 7.925, 53.1, 8.05]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

class sex(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in self.valid_values:
            return int('nan')
        else:
            return int(val)

class pclass(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticket class'
        self.valid_values = 'Ticket class should be 1, 2, or 3'
        self.format = '1 = 1st, 2 = 2nd, 3 = 3rd'
        self.examples = [1, 2, 3]

    def cast(self, val):
        if val not in self.examples:
            return int('nan')
        else:
            return int(val)

class embarked(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Port of Embarkation'
        self.valid_values = 'Port of Embarkation should be 0, 1, or 2'
        self.format = '0 = Cherbourg, 1 = Queenstown, 2 = Southampton'
        self.examples = [0, 1, 2]

    def cast(self, val):
        if math.isnan(val) or val not in self.examples:
            return int('nan')
        else:
            return int(val)


MAPPING = {'passengerid': passengeridentifier, 'age': age, 'fare': fare, 'sex': sex, 'pclass': pclass, 'embarked': embarked}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of a person in years'
        self.valid_range = [0, 123]
        self.dtype = int
        self.format = 'Age should be represented as a whole number'
        self.examples = [33, 34, 60, 50, 47]

    def cast(self, val):
        age = int(val)
        if age < 0 or age > 123:
            raise Exception('Invalid age')
        return age

class producttitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The title of a product review'
        self.valid_values = 'The product title should be a string'
        self.format = 'The product title should be capitalized'
        self.examples = ['Some major design flaws', 'My favorite buy!', 'Flattering shirt']

    def cast(self, val):
        return str(val).title()

class clothingrating(NumericSemanticType):

    def __init__(self):
        self.description = 'The rating of a clothing item'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Rating should be represented as a whole number between 1 and 5'
        self.examples = [4, 5, 3, 5, 5]

    def cast(self, val):
        rating = int(val)
        if rating < 1 or rating > 5:
            raise Exception('Invalid rating')
        return rating

class recommendedind(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if int(val) in self.valid_values else Exception('Invalid value')

class feedbackcount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of positive feedbacks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Feedback count should be represented as a whole number'
        self.examples = [0, 4, 0, 0, 6]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid feedback count')
        return count

class clothingdivision(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The division of the clothing item'
        self.valid_values = ['General', 'General Petite', 'Initmates']
        self.format = 'Clothing division should be one of the valid divisions'
        self.examples = ['Initmates', 'General', 'General', 'General Petite', 'General']

    def cast(self, val):
        val = str(val)
        if val not in self.valid_values:
            raise Exception('Invalid clothing division')
        return val

class clothingdepartment(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The department of the clothing item'
        self.valid_values = ['Tops', 'Dresses', 'Bottoms', 'Intimate', 'Jackets']
        self.format = 'Clothing department should be one of the valid departments'
        self.examples = ['Intimate', 'Dresses', 'Dresses', 'Bottoms', 'Tops']

    def cast(self, val):
        val = str(val)
        if val not in self.valid_values:
            raise Exception('Invalid clothing department')
        return val

class clothingclass(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The class of the clothing item'
        self.valid_values = ['Dresses', 'Knits', 'Blouses', 'Sweaters', 'Pants']
        self.format = 'Clothing class should be one of the valid classes'
        self.examples = ['Intimates', 'Dresses', 'Dresses', 'Pants', 'Blouses']

    def cast(self, val):
        val = str(val)
        if val not in self.valid_values:
            raise Exception('Invalid clothing class')
        return val


MAPPING = {'age': age, 'title': producttitle, 'rating': clothingrating, 'recommendedind': recommendedind, 'positivefeedbackcount': feedbackcount, 'divisionname': clothingdivision, 'departmentname': clothingdepartment, 'classname': clothingclass}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer number starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class sentiment(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['positive', 'negative']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': index, 'sentiment': sentiment}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = ""Dates should be in the 'yyyy-mm-dd' format""
        self.format = ""Dates should be in the 'yyyy-mm-dd' format""
        self.examples = ['2022-02-25', '2022-03-28', '2022-02-28', '2022-03-01', '2022-03-02']

    def cast(self, val):
        date_obj = datetime.strptime(val, '%Y-%m-%d')
        return date_obj.strftime('%Y-%m-%d')

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class warlosscount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid loss count')
        return count

class direction(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Direction of greatest losses'
        self.valid_values = 'Direction should be a string representing a place'
        self.format = 'String with only first letter of each word capitalized'
        self.examples = ['Donetsk', 'Bakhmut', 'Kramatorsk And Donetsk', 'Kramatorsk', 'Kharkiv And Donetsk']

    def cast(self, val):
        return str(val).title()

class countofmissiles(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cruise missiles'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer number'
        self.examples = [84, 195, 592, 911, 1347]

    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid missile count')
        return count


MAPPING = {'date': date, 'aircraft': warlosscount, 'helicopter': warlosscount, 'tank': warlosscount, 'apc': warlosscount, 'fieldartillery': warlosscount, 'mrl': warlosscount, 'militaryauto': warlosscount, 'fueltank': warlosscount, 'drone': warlosscount, 'navalship': warlosscount, 'antiaircraftwarfare': warlosscount, 'specialequipment': warlosscount, 'mobilesrbmsystem': warlosscount, 'vehiclesandfueltanks': warlosscount, 'greatestlossesdirection': direction, 'cruisemissiles': countofmissiles}"
"class dayofyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The day of the year'
        self.valid_range = [1, 365]
        self.dtype = int
        self.format = 'Day of the year should be a positive integer between 1 and 365'
        self.examples = [231, 32, 365, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 365:
            raise Exception('Invalid day of the year')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class militaryequipment(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of military equipment should be a positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of military equipment')
        else:
            return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['2022-10-13', '2023-05-27', '2022-01-01', '2022-12-31', '2023-01-01']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise ValueError('Incorrect data format, should be YYYY-MM-DD')


MAPPING = {'day': dayofyear, 'aircraft': militaryequipment, 'helicopter': militaryequipment, 'tank': militaryequipment, 'apc': militaryequipment, 'fieldartillery': militaryequipment, 'mrl': militaryequipment, 'drone': militaryequipment, 'navalship': militaryequipment, 'antiaircraftwarfare': militaryequipment, 'specialequipment': militaryequipment, 'vehiclesandfueltanks': militaryequipment, 'cruisemissiles': militaryequipment, 'date': date}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer numbers starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the event'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2022-02-25', '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').date()

class day(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer numbers starting from 0'
        self.examples = [2, 3, 4, 5, 6]

    def cast(self, val):
        return int(val)

class personnel(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of personnel'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Personnel count should be an integer'
        self.examples = [2800, 4300, 4500, 5300, 5710]

    def cast(self, val):
        return int(val)

class pow(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of prisoners of war'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of POWs should be a float. If the value is NaN, it should be replaced with 0'
        self.examples = [0.0, 0.0, 0.0, 0.0, 200.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else 0.0


MAPPING = {'unnamed0': index, 'date': date, 'day': day, 'personnel': personnel, 'pow': pow}"
"class battleevent(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Battle Event'
        self.valid_values = 'Name should be a string that describes the battle event'
        self.format = 'Names should start with a capital letter'
        self.examples = ['Battle of the Golden Tooth', ""Battle at the Mummer's Ford"", 'Battle of Riverrun', 'Battle of the Green Fork', 'Battle of the Whispering Wood']

    def cast(self, val):
        return str(val).title()

class gotcharacter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Game of Thrones Character Name'
        self.valid_values = ""Name should be a string of a Game of Thrones character's name""
        self.format = 'Names should start with a capital letter'
        self.examples = ['Joffrey/Tommen Baratheon', 'Robb Stark', 'Balon/Euron Greyjoy', 'Stannis Baratheon']

    def cast(self, val):
        return str(val).title()

class gotcharacter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Game of Thrones Character Name'
        self.valid_values = ""Name should be a string of a Game of Thrones character's name""
        self.format = 'Names should start with a capital letter'
        self.examples = ['Joffrey/Tommen Baratheon', 'Robb Stark', 'Balon/Euron Greyjoy', 'Stannis Baratheon']

    def cast(self, val):
        return str(val).title()

class gotcharacter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Game of Thrones Character Name'
        self.valid_values = ""Name should be a string of a Game of Thrones character's name""
        self.format = 'Names should start with a capital letter'
        self.examples = ['Joffrey/Tommen Baratheon', 'Robb Stark', 'Balon/Euron Greyjoy', 'Stannis Baratheon']

    def cast(self, val):
        return str(val).title()

class gotcharacter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Game of Thrones Character Name'
        self.valid_values = ""Name should be a string of a Game of Thrones character's name""
        self.format = 'Names should start with a capital letter'
        self.examples = ['Joffrey/Tommen Baratheon', 'Robb Stark', 'Balon/Euron Greyjoy', 'Stannis Baratheon']

    def cast(self, val):
        return str(val).title()

class battleoutcome(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Battle Outcome'
        self.valid_values = ""Outcome should be either a 'win' or 'loss'""
        self.format = 'Outcomes should be stored as strings'
        self.examples = ['win', 'win', 'win', 'loss', 'win']

    def cast(self, val):
        if str(val).lower() in ['win', 'loss']:
            return str(val).lower()
        else:
            raise Exception('Invalid battle outcome')

class battletype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Battle Type'
        self.valid_values = ""Battle type should be one of the following: 'pitched battle', 'siege', 'ambush', 'razing'""
        self.format = 'Battle types should be stored as strings'
        self.examples = ['pitched battle', 'ambush', 'pitched battle', 'pitched battle', 'ambush']

    def cast(self, val):
        if str(val).lower() in ['pitched battle', 'siege', 'ambush', 'razing']:
            return str(val).lower()
        else:
            raise Exception('Invalid battle type')

class battleboolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean value')

class battleboolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0.0, 1.0]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean value')

class battlesize(NumericSemanticType):

    def __init__(self):
        self.description = 'Size of the army in a battle'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Army size should be formatted as a floating point number'
        self.examples = [15000.0, 4000.0, 10000.0, 18000.0, 1875.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class battlesize(NumericSemanticType):

    def __init__(self):
        self.description = 'Size of the army in a battle'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Army size should be formatted as a floating point number'
        self.examples = [15000.0, 4000.0, 10000.0, 18000.0, 1875.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class gotlocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of a Battle Event in Game of Thrones'
        self.valid_values = 'Location should be a string that describes the location of the battle event'
        self.format = 'Locations should start with a capital letter'
        self.examples = ['Golden Tooth', ""Mummer's Ford"", 'Riverrun', 'Green Fork', 'Whispering Wood']

    def cast(self, val):
        return str(val).title()

class gotregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region of a Battle Event in Game of Thrones'
        self.valid_values = 'Region should be a string that describes the region of the battle event'
        self.format = 'Regions should start with a capital letter'
        self.examples = ['The Westerlands', 'The Riverlands', 'The Riverlands', 'The Riverlands', 'The Riverlands']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': battleevent, 'attackerking': gotcharacter, 'defenderking': gotcharacter, 'attackercommander': gotcharacter, 'defendercommander': gotcharacter, 'attackeroutcome': battleoutcome, 'battletype': battletype, 'majordeath': battleboolean, 'majorcapture': battleboolean, 'attackersize': battlesize, 'defendersize': battlesize, 'location': gotlocation, 'region': gotregion}"
"class characteridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique id number assigned to each character'
        self.valid_range = [0, 916]
        self.dtype = int
        self.format = 'The id should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class charactername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of the character'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be a string'
        self.examples = ['Addam Marbrand', 'Aegon Frey (Jinglebell)', 'Aegon Targaryen', 'Adrack Humble', 'Aemon Costayne']

    def cast(self, val):
        return str(val)

class characterallegiance(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The allegiance of the character'
        self.valid_values = 'The allegiance should be a string'
        self.format = 'The allegiance should be a string'
        self.examples = ['Lannister', 'None', 'House Targaryen', 'House Greyjoy', 'Lannister']

    def cast(self, val):
        return str(val)

class deathyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The year the character died'
        self.valid_range = [297, 300]
        self.dtype = float
        self.format = 'The death year should be a float'
        self.examples = [297.0, 298.0, 299.0, 300.0, float('nan')]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class bookofdeath(NumericSemanticType):

    def __init__(self):
        self.description = 'The book number in which the character died'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'The book number should be a float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class deathchapter(NumericSemanticType):

    def __init__(self):
        self.description = 'The chapter number in which the character died'
        self.valid_range = [0, 80]
        self.dtype = float
        self.format = 'The chapter number should be a float'
        self.examples = [0.0, 10.0, 20.0, 30.0, 40.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class bookintrochapter(NumericSemanticType):

    def __init__(self):
        self.description = 'The chapter number in which the character was introduced'
        self.valid_range = [0, 80]
        self.dtype = float
        self.format = 'The chapter number should be a float'
        self.examples = [0.0, 10.0, 20.0, 30.0, 40.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class nobility(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isinbook(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isinbook(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isinbook(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isinbook(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isinbook(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': characteridentifier, 'name': charactername, 'allegiances': characterallegiance, 'deathyear': deathyear, 'bookofdeath': bookofdeath, 'deathchapter': deathchapter, 'bookintrochapter': bookintrochapter, 'gender': gender, 'nobility': nobility, 'got': isinbook, 'cok': isinbook, 'sos': isinbook, 'ffc': isinbook, 'dwd': isinbook}"
"class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

class probability(NumericSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

class charactername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a character in Game of Thrones'
        self.valid_values = ""Name should be a string that is of the form 'first name last name' or 'first name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Viserys II Targaryen', 'Walder Frey', 'Addison Hill', 'Aemma Arryn', 'Sylva Santagar']

    def cast(self, val):
        return str(val).title()

class title(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Titles in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Ser', 'Maester', 'Archmaester', 'Lord', 'Septon']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isbool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class culture(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cultures in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Northmen', 'Ironborn', 'Free Folk', 'Valyrian', 'Braavosi']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a character in Game of Thrones'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a non-negative float'
        self.examples = [18.0, 27.0, 50.0, 100.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            return float('nan')
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a character in Game of Thrones'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a non-negative float'
        self.examples = [18.0, 27.0, 50.0, 100.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            return float('nan')
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a character in Game of Thrones'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a non-negative float'
        self.examples = [18.0, 27.0, 50.0, 100.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            return float('nan')
        return val

class characterrelation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Character relations in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Rhaenyra Targaryen', 'Daemon Targaryen', 'Aegon IV Targaryen', 'Walder Frey', 'Craster']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class characterrelation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Character relations in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Rhaenyra Targaryen', 'Daemon Targaryen', 'Aegon IV Targaryen', 'Walder Frey', 'Craster']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class characterrelation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Character relations in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Rhaenyra Targaryen', 'Daemon Targaryen', 'Aegon IV Targaryen', 'Walder Frey', 'Craster']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class house(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Houses in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = [""Night's Watch"", 'House Frey', 'House Stark', 'House Targaryen', 'House Lannister']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class spouse(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Spouses in Game of Thrones'
        self.valid_values = 'Should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Walder Frey', 'Craster', 'Rohanne Webber', 'Alys Arryn', 'Kiera of Tyrosh']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()


MAPPING = {'actual': probability, 'pred': probability, 'alive': probability, 'plod': probability, 'popularity': probability, 'name': charactername, 'title': title, 'male': isbool, 'isalivemother': isbool, 'isalivefather': isbool, 'isaliveheir': isbool, 'isalivespouse': isbool, 'ismarried': isbool, 'isnoble': isbool, 'booldeadrelations': isbool, 'ispopular': isbool, 'isalive': isbool, 'culture': culture, 'dateofbirth': age, 'dateofdeath': age, 'age': age, 'mother': characterrelation, 'father': characterrelation, 'heir': characterrelation, 'house': house, 'spouse': spouse}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ids are non-negative integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid id')
        return num

class fightername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a UFC fighter'
        self.valid_values = 'The name of a valid UFC fighter'
        self.format = ""Names are stored as strings and are typically of the form 'first name last name'""
        self.examples = ['Jim Miller', 'Andrei Arlovski', 'Diego Sanchez', 'Demian Maia', 'Donald Cerrone']

    def cast(self, val):
        return str(val).strip()

class fightername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a UFC fighter'
        self.valid_values = 'The name of a valid UFC fighter'
        self.format = ""Names are stored as strings and are typically of the form 'first name last name'""
        self.examples = ['Jim Miller', 'Andrei Arlovski', 'Diego Sanchez', 'Demian Maia', 'Donald Cerrone']

    def cast(self, val):
        return str(val).strip()

class referee(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a UFC referee'
        self.valid_values = 'The name of a valid UFC referee'
        self.format = ""Names are stored as strings and are typically of the form 'first name last name'""
        self.examples = ['Herb Dean', 'John McCarthy', 'Dan Miragliotta', 'Mario Yamasaki', 'Marc Goddard']

    def cast(self, val):
        return str(val).strip() if pd.notnull(val) else float('nan')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of a UFC event'
        self.valid_values = 'A valid date string in the format YYYY-MM-DD'
        self.format = 'Dates are stored as strings in the format YYYY-MM-DD'
        self.examples = ['2016-11-19', '2014-10-04', '2014-05-31', '2014-08-23', '2014-06-28']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The location of a UFC event'
        self.valid_values = ""A valid location string in the format 'city, state, country'""
        self.format = ""Locations are stored as strings in the format 'city, state, country'""
        self.examples = ['Las Vegas, Nevada, USA', 'Abu Dhabi, Abu Dhabi, United Arab Emirates', 'London, England, United Kingdom', 'Newark, New Jersey, USA', 'Anaheim, California, USA']

    def cast(self, val):
        location_parts = str(val).split(',')
        if len(location_parts) != 3:
            raise Exception('Invalid location')
        country = pycountry.countries.get(name=location_parts[2].strip())
        if country is None:
            raise Exception('Invalid country')
        return ', '.join([part.strip() for part in location_parts])

class winner(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The winner of a UFC fight'
        self.valid_values = ""Either 'Red', 'Blue', or 'Draw'""
        self.format = 'Stored as strings'
        self.examples = ['Red', 'Blue', 'Draw']

    def cast(self, val):
        val = str(val)
        if val not in ['Red', 'Blue', 'Draw']:
            raise Exception('Invalid winner')
        return val

class titlebout(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if val not in [True, False]:
            raise Exception('Invalid title bout')
        return val

class weightclass(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The weight class of a UFC fight'
        self.valid_values = 'One of the 14 weight classes in the UFC'
        self.format = 'Stored as strings'
        self.examples = ['Lightweight', 'Welterweight', 'Middleweight', 'Heavyweight', 'LightHeavyweight']

    def cast(self, val):
        val = str(val)
        if val not in ['Lightweight', 'Welterweight', 'Middleweight', 'Heavyweight', 'LightHeavyweight']:
            raise Exception('Invalid weight class')
        return val

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are represented as floating point numbers between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.25]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of some event'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts are represented as non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val) if pd.notnull(val) else float('nan')
        if num < 0:
            raise Exception('Invalid count')
        return round(num, 2)


MAPPING = {'unnamed0': identifier, 'rfighter': fightername, 'bfighter': fightername, 'referee': referee, 'date': date, 'location': location, 'winner': winner, 'titlebout': titlebout, 'weightclass': weightclass, 'bavgkd': percent, 'bavgoppkd': percent, 'bavgsigstrpct': percent, 'bavgoppsigstrpct': percent, 'bavgtdpct': percent, 'bavgopptdpct': percent, 'bavgsubatt': count, 'bavgoppsubatt': count, 'bavgrev': count, 'bavgopprev': count, 'bavgsigstratt': count, 'bavgsigstrlanded': count, 'bavgoppsigstratt': count, 'bavgoppsigstrlanded': count, 'bavgtotalstratt': count, 'bavgtotalstrlanded': count, 'bavgopptotalstratt': count, 'bavgopptotalstrlanded': count, 'bavgtdatt': count, 'bavgtdlanded': count, 'bavgopptdatt': count}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid index')

class fightwinner(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fight Winner'
        self.valid_values = ""Winner should be either 'Red' or 'Blue'""
        self.format = 'Should be a string'
        self.examples = ['Red', 'Blue']

    def cast(self, val):
        if val == 'Red' or val == 'Blue':
            return val
        else:
            raise Exception('Invalid fight winner')

class titlebout(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if val == True or val == False:
            return val
        else:
            raise Exception('Invalid value for title bout')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')

class knockoutaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid average knockouts')


MAPPING = {'unnamed0': index, 'winner': fightwinner, 'titlebout': titlebout, 'bavgkd': knockoutaverage, 'bavgoppkd': knockoutaverage, 'bavgsigstrpct': knockoutaverage, 'bavgoppsigstrpct': knockoutaverage, 'bavgtdpct': knockoutaverage, 'bavgopptdpct': knockoutaverage, 'bavgsubatt': knockoutaverage, 'bavgoppsubatt': knockoutaverage, 'bavgrev': knockoutaverage, 'bavgopprev': knockoutaverage, 'bavgsigstratt': knockoutaverage, 'bavgsigstrlanded': knockoutaverage, 'bavgoppsigstratt': knockoutaverage, 'bavgoppsigstrlanded': knockoutaverage, 'bavgtotalstratt': knockoutaverage, 'bavgtotalstrlanded': knockoutaverage, 'bavgopptotalstratt': knockoutaverage, 'bavgopptotalstrlanded': knockoutaverage, 'bavgtdatt': knockoutaverage, 'bavgtdlanded': knockoutaverage, 'bavgopptdatt': knockoutaverage, 'bavgopptdlanded': knockoutaverage, 'bavgheadatt': knockoutaverage, 'bavgheadlanded': knockoutaverage, 'bavgoppheadatt': knockoutaverage, 'bavgoppheadlanded': knockoutaverage, 'bavgbodyatt': knockoutaverage}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the row'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            raise Exception('Invalid input')
        else:
            return int(val)

class fightername(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the UFC fighter'
        self.valid_values: str = 'Should be a string'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['Tom Aaron', 'Papy Abedi', 'Shamil Abdurakhimov', 'Danny Abbadi', 'Hiroyuki Abe']

    def cast(self, val):
        return str(val).title()

class height(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Height of the UFC fighter'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float in feet'
        self.examples: list = [6.0, 5.75, 6.25, 5.83, 5.5]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            (feet, inches) = map(int, re.findall('\\d+', val))
            return feet + inches / 12.0

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Weight of the UFC fighter'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float in lbs'
        self.unit: str = 'lbs'
        self.examples: list = [155.0, 185.0, 235.0, 155.0, 145.0]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return float(re.findall('\\d+', val)[0])

class reach(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Reach of the UFC fighter'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float in inches'
        self.examples: list = [73.0, 70.0, 72.0, 71.0, 74.0]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return float(re.findall('\\d+', val)[0])

class stance(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Stance of the UFC fighter'
        self.valid_values: str = 'Should be one of the following: Orthodox, Southpaw, Switch, Open Stance, Sideways'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['Orthodox', 'Southpaw', 'Switch', 'Open Stance', 'Sideways']

    def cast(self, val):
        return str(val).title()

class dob(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Date of birth of the UFC fighter'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float representing Unix timestamp'
        self.examples: list = [datetime.timestamp(datetime.strptime('Jul 13, 1978', '%b %d, %Y'))]

    def cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return datetime.timestamp(datetime.strptime(val, '%b %d, %Y'))

class slpm(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Significant strikes landed per minute'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 2.8, 2.45, 3.29, 1.71]

    def cast(self, val):
        return float(val)

class stracc(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Striking accuracy'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.55, 0.44, 0.38, 0.36]

    def cast(self, val):
        return float(re.findall('\\d+', val)[0]) / 100

class sapm(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Significant strikes absorbed per minute'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 3.15, 2.45, 4.41, 3.11]

    def cast(self, val):
        return float(val)

class strdef(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Striking defense'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.48, 0.58, 0.57, 0.63]

    def cast(self, val):
        return float(re.findall('\\d+', val)[0]) / 100

class tdavg(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Average takedowns landed per 15 minutes'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 3.47, 1.23, 0.0, 0.0]

    def cast(self, val):
        return float(val)

class tdacc(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Takedown accuracy'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.57, 0.24, 0.0, 0.0]

    def cast(self, val):
        return float(re.findall('\\d+', val)[0]) / 100

class tddef(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Takedown defense'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.5, 0.47, 0.77, 0.33]

    def cast(self, val):
        return float(re.findall('\\d+', val)[0]) / 100

class subavg(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Average submissions attempted per 15 minutes'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 1.3, 0.2, 0.0, 0.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'fightername': fightername, 'height': height, 'weight': weight, 'reach': reach, 'stance': stance, 'dob': dob, 'slpm': slpm, 'stracc': stracc, 'sapm': sapm, 'strdef': strdef, 'tdavg': tdavg, 'tdacc': tdacc, 'tddef': tddef, 'subavg': subavg}"
"class yearandlocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Year and Location of the event'
        self.valid_values = ""Should be a string of the form 'YYYY;Location'""
        self.format = 'Year should be a 4 digit number followed by a semicolon and then the location name'
        self.examples = ['2020;Las Vegas', '2016;Las Vegas', '2020;Abu Dhabi', '2006;Las Vegas', '2015;Las Vegas']

    def cast(self, val):
        (year, location) = str(val).split(';')
        return str(int(year)) + ';' + location.strip()

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of the event'
        self.valid_values = 'Should be a string representing a valid country or US state'
        self.format = 'Location should be properly capitalized and spelled'
        self.examples = ['Nevada', 'California', 'Texas', 'England', 'New Jersey']

    def cast(self, val):
        return str(val).strip()

class fightdetails(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Details of the fight'
        self.valid_values = ""Should be a string of the form 'Country;Fight Type;Winner'""
        self.format = 'Country should be a valid country name, Fight Type should describe the type of fight, and Winner should be the name of the winner'
        self.examples = ['USA;Lightweight Bout;Jim Miller', 'USA;Lightweight Bout;Joe Lauzon', 'USA;Lightweight Bout;Donald Cerrone', 'USA;Lightweight Bout;', 'USA;Welterweight Bout;Matt Brown']

    def cast(self, val):
        parts = str(val).split(';')
        if len(parts) != 3:
            raise Exception('Invalid fight details')
        (country, fight_type, winner) = parts
        if pycountry.countries.get(name=country.strip()) is None:
            raise Exception('Invalid country name')
        return country.strip() + ';' + fight_type.strip() + ';' + winner.strip()


MAPPING = {'unnamed1': yearandlocation, 'unnamed2': location, 'rfighterbfighterrkdbkdrsigstrbsigstrrsigstrpctbsigstrpctrtotalstrbtotalstrrtdbtdrtdpctbtdpctrsubattbsubattrrevbrevrctrlbctrlrheadbheadrbodybbodyrlegblegrdistancebdistancerclinchbclinchrgroundbgroundwinbylastroundlastroundtimeformatrefereedatelocationfighttypewinner': fightdetails}"
"class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Serial Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serial Numbers must be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid serial number')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country names should be valid names of countries'
        self.format = 'Country names should be capitalized and spelled correctly'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [2000, 2005, 2010, 2015, 2016]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid year')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage Value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.unit = 'Percentage (%)'
        self.examples = [4.7, 15.8, 20.3, 24.7, 51.7]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid percentage')


MAPPING = {'unnamed0': serialnumber, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of Countries'
        self.valid_values = 'Country names should be the official short name in English as defined in ISO 3166'
        self.format = 'Country names should be a string with first letters of each word capitalized'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        country_info = CountryInfo(val)
        return country_info.name()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [2000, 2019]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [2019, 2015, 2010, 2005, 2000]

    def cast(self, val):
        return int(val)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The life expectancy at birth'
        self.valid_range = [25.37, 75.48]
        self.dtype = float
        self.format = 'Life expectancy should be a floating point number with two decimal places'
        self.unit = 'In years'
        self.examples = [53.95, 54.73, 53.15, 52.6, 52.78]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': lifeexpectancy}"
"class whoregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'WHO defined regions'
        self.valid_values = 'Regions as defined by the World Health Organization'
        self.format = 'First letter of each word in region name should be capitalized'
        self.examples = ['Africa', 'Americas', 'South-East Asia', 'Europe', 'Eastern Mediterranean']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year must be formatted as a 4 digit integer'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        return int(val)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Life expectancy at birth'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be formatted as a floating point number with two decimal places'
        self.unit = 'In Years'
        self.examples = [70.24, 75.52, 81.29, 66.58, 71.37]

    def cast(self, val):
        return round(float(val), 2)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Life expectancy at birth'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be formatted as a floating point number with two decimal places'
        self.unit = 'In Years'
        self.examples = [70.24, 75.52, 81.29, 66.58, 71.37]

    def cast(self, val):
        return round(float(val), 2)

class percentofhaleinlifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of Healthy life expectancy in Life expectancy'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Percentage should be formatted as an integer'
        self.examples = [85, 86, 87, 88, 90]

    def cast(self, val):
        return int(val)


MAPPING = {'location': whoregion, 'period': year, 'haleexpectency': lifeexpectancy, 'lifeexpectany': lifeexpectancy, 'percentofhaleinlifeexpectancy': percentofhaleinlifeexpectancy}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a type of direct measure that summarizes several specific observations'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class worldregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'WHO global regions'
        self.valid_values = 'WHO regions include: Africa, Americas, South-East Asia, Europe, Eastern Mediterranean'
        self.format = 'Region names should be capitalized and without any trailing or leading white spaces'
        self.examples = ['Africa', 'Americas', 'South-East Asia', 'Europe', 'Eastern Mediterranean']

    def cast(self, val):
        return str(val).strip().title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the data'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class lifeexpectancyindicator(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Indicates the life expectancy at birth (in years)'
        self.valid_values = ""The only valid value is 'Life expectancy at birth (years)'""
        self.format = ""The indicator should be in the form of the string 'Life expectancy at birth (years)'""
        self.examples = ['Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)']

    def cast(self, val):
        return 'Life expectancy at birth (years)'

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a newborn is expected to live, assuming that current mortality rates remain constant throughout their lifetime'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a non-negative floating point number'
        self.unit = 'In years'
        self.examples = [64.49, 62.37, 66.65, 62.56, 60.47]

    def cast(self, val):
        if math.isnan(val):
            return float(0)
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'location': worldregion, 'period': year, 'indicator': lifeexpectancyindicator, 'firsttooltip': lifeexpectancy}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric representation to track the change in a type of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a country'
        self.valid_values = 'A country name should be a valid name recognized by the United Nations'
        self.format = 'The country name should be in English and capitalized'
        self.examples = ['Kazakhstan', 'Germany', 'Mauritius', 'Andorra', 'Afghanistan']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of an event or data point'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a non-negative integer less than or equal to the current year'
        self.examples = [2017, 2014, 2013, 2011, 2009]

    def cast(self, val):
        if val < 0 or val > datetime.now().year:
            raise Exception('Invalid year')
        return int(val)

class birthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Birth rate is the number of live births per 1,000 of population per year'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Birth rate should be a non-negative floating point number'
        self.examples = [62.0, 77.2, 87.0, 125.7, 80.0]

    def cast(self, val):
        if val < 0:
            raise Exception('Invalid birth rate')
        return float(val)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': birthrate}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is recognized as a valid country name'
        self.format = 'Country names are stored as strings. The first letter of the country name should be capitalized'
        self.examples = ['Afghanistan', 'Algeria', 'Angola', 'Antigua and Barbuda', 'Democratic Republic of the Congo']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be represented as a 4-digit integer'
        self.examples = [2016, 2017, 2018, 2019, 2020]

    def cast(self, val):
        return int(val)

class pollutionindex(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Air Pollution Index'
        self.valid_values = ""Index should be a string that represents a range of values in the format 'x.x [x.x-x.x]'""
        self.format = ""The index is stored as a string with the format 'x.x [x.x-x.x]'""
        self.examples = ['0.31 [0.25-0.36]', '0.47 [0.36-0.56]', '0.54 [0.4-0.66]', '0.38 [0.29-0.46]', '0.75 [0.21-1.56]']

    def cast(self, val):
        match_obj = re.match('\\d+\\.\\d+ \\[\\d+\\.\\d+-\\d+\\.\\d+\\]', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid index format')


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': pollutionindex}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches an official or common name of a UN member state'
        self.format = 'Country name should be capitalized and in English'
        self.examples = ['Afghanistan', 'Austria', 'Botswana', 'Bosnia and Herzegovina', 'Algeria']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2000, 2005, 2010, 2015, 2018]

    def cast(self, val):
        year = int(val)
        if 0 <= year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid year')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number'
        self.unit = 'In percentage'
        self.examples: list = [0.21, 0.36, 0.055, 0.21, 0.35]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid percentage')


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'Country name string that is recognized by the pycountry module'
        self.format = 'Country name strings should be properly capitalized'
        self.examples = ['Afghanistan', 'Cabo Verde', 'Ecuador', 'Egypt', 'El Salvador']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a non-negative integer'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        return int(val)

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage Value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage value should be a floating point number between 0 and 100 (inclusive)'
        self.units = 'Percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 100:
            return val
        else:
            raise Exception('Invalid percentage value')


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': percent}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches an official or common name of a country in English'
        self.format = 'Country name should be capitalized and in English'
        self.examples = ['United States', 'China', 'Brazil', 'France', 'India']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2000, 2010, 2020, 1980, 1990]

    def cast(self, val):
        val = int(val)
        if val < 1900 or val > datetime.now().year:
            raise Exception('Invalid year')
        return val

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with two decimal places'
        self.unit = '%'
        self.examples = [10.0, 50.5, 99.99, 0.01, 100.0]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 100:
            raise Exception('Invalid percentage')
        return round(val, 2)


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row of the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer starting from 0 and increasing sequentially'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The English name of a country'
        self.valid_values = 'Valid country names according to the ISO 3166 standard'
        self.format = 'Country names should be capitalized and spelled correctly according to the ISO 3166 standard'
        self.examples = ['Egypt', 'Malawi', 'Armenia', 'Turkmenistan', 'Rwanda']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year in which the observation was made'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four-digit integer'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        year = int(val)
        if year >= 0 and year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid year')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The percentage of people who have access to basic hand washing facilities'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with two decimal places'
        self.unit = 'Percentage (%)'
        self.examples = [37.75, 63.58, 29.02, 37.67, 63.58]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Country names should be strings that are valid country names'
        self.format = 'Country names should be in their full form (no abbreviations) and correctly capitalized'
        self.examples = ['Afghanistan', 'Norway', 'The former Yugoslav Republic of Macedonia', 'Greece', 'Poland']

    def cast(self, val):
        return pycountry.countries.get(val).name

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer of four digits'
        self.examples: list = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        return int(val)

class healthindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Health Index'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Health index should be a floating point number ranging from 0 to 100'
        self.examples: list = [58.8, 53.4, 50.5, 45.2, 39.9]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': healthindex}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a list'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string that represents a country'
        self.format = 'Country names should be capitalized and in English'
        self.examples = ['Afghanistan', 'Bahrain', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [2018, 2017, 2016, 2015, 2014]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        year = int(val)
        if year < 0 or year > datetime.now().year:
            raise Exception('Invalid year')
        return year

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.unit = 'In percentage'
        self.examples = [0, 25, 50, 75, 100]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        percentage = float(val)
        if percentage < 0 or percentage > 100:
            raise Exception('Invalid percentage')
        return round(percentage, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Country name should be a valid name of a country recognized by the United Nations'
        self.format = 'Country name should be a string with only the first letter of each word capitalized'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A specific year within the Gregorian Calendar'
        self.valid_range = [1, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a positive integer and less than or equal to the current year'
        self.examples = [2000, 2005, 2010, 2015, 2016]

    def cast(self, val):
        num = int(val)
        if num <= datetime.now().year and num > 0:
            return num
        else:
            raise Exception('Invalid year')

class suiciderate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The suicide rate for a given population'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Suicide rate should be a non-negative floating point number'
        self.unit = 'In number of suicides per 100,000 population'
        self.examples = [0.0, 1.9, 5.7, 11.4, 93.5]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid suicide rate')


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': suiciderate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index for a dataset row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Country names must be valid and recognized globally'
        self.format = 'Country names should be in their full form, with each word capitalized'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name):
            return country_name
        else:
            raise Exception('Invalid country name')

class yearrange(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Year Range'
        self.valid_values = ""Year range must be valid and formatted as 'YYYY-YYYY'""
        self.format = ""The year range should be in the form 'YYYY-YYYY'""
        self.examples = ['2013-2017']

    def cast(self, val):
        range_pattern = re.compile('[0-9]{4}-[0-9]{4}')
        if range_pattern.match(str(val)):
            return str(val)
        else:
            raise Exception('Invalid Year Range')

class decimalpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Decimal representation of a percentage'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'A float between 0 and 1, inclusive'
        self.examples = [0.49, 0.31, 0.36, 0.31, 0.24]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return round(val, 2)
        else:
            raise Exception('Invalid Percentage Value')


MAPPING = {'unnamed0': index, 'location': countryname, 'period': yearrange, 'firsttooltip': decimalpercent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'Country should be in the list of recognized country names by pycountry library'
        self.format = 'Country should be the full name of the country, first letter capitalized'
        self.examples = ['Iceland', 'Czechia', 'Belgium', 'Hungary', 'Latvia']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [1990, 2001, 2007, 2012, 2019]

    def cast(self, val):
        num = int(val)
        if num < 1900 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class dentistcountpercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of dentists per 10,000 population'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be a floating point number'
        self.unit = 'Per 10,000 population'
        self.examples = [0.034, 0.036, 0.033, 0.14, 0.12]

    def cast(self, val):
        num = float(val)
        return round(num, 4)


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': dentistcountpercapita}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name of a country in English, capitalized'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Afghanistan', 'Nigeria', 'Sao Tome And Principe', 'Republic Of Moldova', 'Philippines']

    def cast(self, val):
        return str(val).title()

class year(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_values = 'Years should be 4-digit numbers stored as strings'
        self.format = 'Years should be 4-digit numbers stored as strings'
        self.examples = ['2012', '2014', '2016', '2015', '2013']

    def cast(self, val):
        return str(val)

class violenceagainstwomenpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Violence against women percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage of violence against women, as a floating point number with one decimal place'
        self.examples = [0.0, 9.2, 15.4, 24.6, 58.5]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': violenceagainstwomenpercent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Country'
        self.valid_values = 'Name should be a string that represents a valid country name'
        self.format = 'Country name should be capitalized and match the official country name in English'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2015, 2016, 2017, 2018, 2019]

    def cast(self, val):
        return int(val)

class hepatitisbsurfaceantigenpercent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The percentage of Hepatitis B surface Antigen present in an individual'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with two decimal places'
        self.unit = 'Percentage (%)'
        self.examples = [0.5, 1.29, 0.22, 0.08, 4.85]

    def cast(self, val):
        val = re.search('\\d+\\.\\d+', val).group()
        return round(float(val), 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': hepatitisbsurfaceantigenpercent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Column Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number that represents the order of the records'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Any valid country name'
        self.format = 'Country name should be a string, with the first letter of each word capitalized'
        self.examples = ['Afghanistan', 'Côte D’Ivoire', 'Angola', 'Argentina', 'Armenia']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4 digit integer number'
        self.examples = [2018, 2017, 2016, 2015, 2014]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class malariaincidence(NumericSemanticType):

    def __init__(self):
        self.description = 'Malaria Incidence'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Incidence should be formatted as a floating point number'
        self.examples = [29.01, 27.07, 26.11, 14.91, 12.67]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': malariaincidence}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'The name of a country as defined by the pycountry library'
        self.format = 'Country names should be capitalized'
        self.examples = ['Afghanistan', 'Bahrain', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Years'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4 digit integer'
        self.examples = [2000, 2005, 2010, 2015, 2019]

    def cast(self, val):
        if isinstance(val, int) and len(str(val)) == 4:
            return val
        else:
            raise Exception('Invalid year')

class tuberculosisincidence(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Incidence of tuberculosis'
        self.valid_values = ""Incidence rates should be of the form 'x [y-z]' where x, y, and z are integers""
        self.format = 'Incidence rates should be stored as strings'
        self.examples = ['189 [122-270]', '13 [11-15]', '12 [10-14]', '16 [14-19]', '540 [349-771]']

    def cast(self, val):
        match_obj = re.match('\\d+ \\[\\d+-\\d+\\]', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid incidence rate')


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': tuberculosisincidence}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string that is a valid country name as per ISO standards'
        self.format = 'The name should be properly capitalized with first letter of each word in uppercase'
        self.examples = ['United States', 'India', 'United Kingdom', 'Australia', 'Canada']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [1990, 2000, 2010, 2020, 2025]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class mortalityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mortality rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mortality rate should be formatted as a floating point number with two decimal places'
        self.units = 'Per 1,000 live births'
        self.examples = [10.5, 1.3, 100.0, 0.9, 1000.0]

    def cast(self, val):
        match_obj = re.match('^\\d+(?:\\.\\d+)?', val)
        if match_obj:
            return float(match_obj.group())
        else:
            raise Exception('Invalid mortality rate')


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': mortalityrate}"
"class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for each row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row Identifiers should be formatted as an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names'
        self.valid_values = 'Country names should be valid English names of countries'
        self.format = 'Country names should be capitalized'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Bahamas', 'Algeria', 'Andorra']

    def cast(self, val):
        name = str(val).title()
        if pycountry.countries.get(name=name):
            return name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of data collection'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer number'
        self.examples = [2010, 2011, 2012, 2013, 2014]

    def cast(self, val):
        year = int(val)
        if self.valid_range[0] <= year <= self.valid_range[1]:
            return year
        else:
            raise Exception('Invalid year')

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Population count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be formatted as an integer number'
        self.examples = [14834701, 14786722, 13275429, 13765392, 13384908]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': rowidentifier, 'location': countryname, 'period': year, 'firsttooltip': populationcount}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be a string that matches a valid country name according to the pycountry library'
        self.format = 'Country name should be capitalized'
        self.examples = ['Canada', 'Denmark', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()):
            return val.title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples: list = [1920, 2000, 2010, 2015, 2019]

    def cast(self, val):
        if isinstance(val, int) and val >= 0 and (val <= datetime.now().year):
            return val
        else:
            raise Exception('Invalid year')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The life expectancy at birth in years'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be formatted as a floating point number with two decimal places'
        self.unit = 'In years'
        self.examples: list = [27.97, 64.25, 71.83, 77.12, 86.94]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': lifeexpectancy}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index value representing the row number in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a country'
        self.valid_values = 'A valid country name according to the pycountry library'
        self.format = 'The name should be capitalized and spelled correctly according to English standards'
        self.examples = ['Afghanistan', 'Angola', 'Albania', 'United Arab Emirates', 'Argentina']

    def cast(self, val):
        try:
            pycountry.countries.lookup(val)
            return val.title()
        except LookupError:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        return int(val)

class maternalmortalityratio(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The maternal mortality ratio'
        self.valid_values = ""A string in the format 'X [Y-Z]' where X, Y, and Z are integers""
        self.format = ""The ratio should be a string with the format 'X [Y-Z]'""
        self.examples = ['638 [427-1010]', '673 [457-1040]', '701 [501-1020]', '786 [592-1080]', '810 [617-1080]']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': maternalmortalityratio}"
"class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'The valid values are all the country names recognized by the United Nations.'
        self.format = 'Country names are strings, with the first letter capitalized. The name should match the official name of the country in English.'
        self.examples = ['United States', 'China', 'Spain', 'Brazil', 'India']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year is an integer.'
        self.examples = [2000, 1985, 1990, 2005, 2019]

    def cast(self, val):
        return int(val)

class medicaldoctorsper10000(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Medical doctors per 10,000 people'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'This is a float number.'
        self.unit = 'per 10,000 people'
        self.examples = [2.78, 2.85, 2.98, 2.85, 2.41]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'location': country, 'period': year, 'firsttooltip': medicaldoctorsper10000}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be a valid name of a country recognized by pycountry'
        self.format = 'Country name should be capitalized'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer.'
        self.examples = [2000, 2005, 2010, 2015, 2016]

    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid year')

class mortalityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mortality rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mortality rate should be formatted as a floating point number with two decimal places'
        self.unit = 'In percentage'
        self.examples = [1.19, 0.53, 1.89, 1.22, 0.55]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'location': countryname, 'period': year, 'firsttooltip': mortalityrate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique index or identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number (integer)'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that corresponds to a valid country name'
        self.format = 'Country names should be title cased'
        self.examples = ['Afghanistan', 'Democratic Republic of the Congo', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2016, 2017, 2018, 2019, 2020]

    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= datetime.now().year:
            return num
        else:
            raise Exception('Invalid year')

class mortalityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mortality rate due to unsafe water, sanitation and hygiene services'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rate should be a decimal number'
        self.unit = 'Per 1000 Population'
        self.examples = [13.92, 12.61, 15.31, 0.17, 0.21]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid rate')


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': mortalityrate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that matches a country name'
        self.format = 'Country name should be capitalized'
        self.examples = ['Republic of Korea', 'Malaysia', 'Guyana', 'Pakistan', 'Bangladesh']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [2019, 2018, 2017, 2016, 2015]

    def cast(self, val):
        return int(val)

class mortalityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Neonatal Mortality Rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rate should be a floating point number'
        self.unit = 'Per 1,000 live births'
        self.examples = [1.6, 3.32, 2.11, 4.84, 3.24]

    def cast(self, val):
        match_obj = re.match('([0-9]*\\.[0-9]+)', val)
        if match_obj:
            return float(match_obj.group())
        else:
            raise Exception('Invalid Mortality Rate')


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': mortalityrate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indices should be whole numbers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Names should match the English short name for the country in the ISO 3166 standard'
        self.format = 'Names should be in title case'
        self.examples = ['Afghanistan', 'Bahamas', 'Bosnia and Herzegovina', 'Algeria', 'Angola']

    def cast(self, val):
        return pycountry.countries.get(name=str(val).title()).name

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Calendar Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be represented as a 4-digit integer'
        self.examples = [2000, 2005, 2010, 2015, 2019]

    def cast(self, val):
        return int(val)

class hivinfectionrate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Rate of new HIV infections'
        self.valid_values = ""Rates can be exact numbers, ranges, or the string 'No data'""
        self.format = ""Rates should be strings representing numbers or ranges of numbers in the format 'x.xx [x.xx-x.xx]'""
        self.examples = ['No data', '<0.01 [<0.01–<0.01]', '0.01', '0.03 [0.02-0.04]', '<0.01 [<0.01–0.01]']

    def cast(self, val):
        if val == 'No data':
            return float('nan')
        elif '[' in val and '-' in val:
            (lower, upper) = re.findall('[0-9.]+', val)
            return (float(lower) + float(upper)) / 2
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': hivinfectionrate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Country name should be capitalized'
        self.examples = ['Iceland', 'United Arab Emirates', 'Austria', 'Estonia', 'Hungary']

    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country name')
        return val.title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a non-negative integer'
        self.examples = [1990, 2002, 2008, 2014, 2018]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid year')
        return val

class healthindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Health Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Health Index should be a non-negative float'
        self.examples = [1.76, 1.48, 1.3, 1.48, 2.5]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid health index')
        return val


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': healthindex}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequential numeric index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number starting from 0 and incrementing by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class worldregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'World Health Organization regions'
        self.valid_values = ""One of the following regions: 'Africa', 'Americas', 'South-East Asia', 'Europe', 'Eastern Mediterranean'""
        self.format = 'Should be one of the WHO regions'
        self.examples = ['Africa', 'Americas', 'South-East Asia', 'Europe', 'Eastern Mediterranean']

    def cast(self, val):
        return str(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year in the Gregorian calendar'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'A four-digit integer number'
        self.examples = [2000, 2001, 2002, 2003, 2004]

    def cast(self, val):
        return int(val)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Average lifespan of a person in years'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A floating point number with two decimal places'
        self.unit = 'In years'
        self.examples = [70.0, 75.0, 80.0, 85.0, 90.0]

    def cast(self, val):
        return round(float(val), 2)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Average lifespan of a person in years'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A floating point number with two decimal places'
        self.unit = 'In years'
        self.examples = [70.0, 75.0, 80.0, 85.0, 90.0]

    def cast(self, val):
        return round(float(val), 2)

class percentoflifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of life expectancy that is healthy'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'An integer number between 0 and 100'
        self.examples = [85, 86, 87, 88, 90]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'location': worldregion, 'period': year, 'haleexpectency': lifeexpectancy, 'lifeexpectany': lifeexpectancy, 'percentofhaleinlifeexpectancy': percentoflifeexpectancy}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names'
        self.valid_values = 'Valid values are names of all the countries in the world'
        self.format = 'Country names should be capitalized and can have spaces'
        self.examples = ['Hungary', 'Belgium', 'Austria', 'Switzerland', 'Luxembourg']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val)
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [2016, 2015, 2014, 2012, 2011]

    def cast(self, val):
        return int(val)

class pharmacistsper10k(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of pharmacists per 10,000 population'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number should be a non-negative float'
        self.unit = 'per 10,000 population'
        self.examples = [0.47, 0.5, 0.51, 0.27, 0.28]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': index, 'location': country, 'period': year, 'firsttooltip': pharmacistsper10k}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An index number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'An index number should be a positive integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, int) and val >= 0:
            return val
        elif isinstance(val, str) and val.isnumeric():
            return int(val)
        else:
            raise Exception('Invalid index number')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Country'
        self.valid_values: str = 'Name should be a string that is present in pycountry.countries'
        self.format: str = 'Only the first letter of each word in the country name should be capitalized'
        self.examples: list = ['Afghanistan', 'Belarus', 'Poland', 'Georgia', 'Romania']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str) and pycountry.countries.get(name=val):
            return val.title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A specific year'
        self.valid_range: list = [0, datetime.now().year]
        self.dtype: object = int
        self.format: str = 'Year should be a positive integer less than or equal to the current year'
        self.examples: list = [2013, 2007, 2018, 1985, 2002]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, int) and val <= datetime.now().year:
            return val
        elif isinstance(val, str) and val.isnumeric() and (int(val) <= datetime.now().year):
            return int(val)
        else:
            raise Exception('Invalid year')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'A percentage value'
        self.valid_range: list = [0, 100]
        self.dtype: object = float
        self.format: str = 'Percentage should be a floating point number between 0 and 100'
        self.unit: str = 'In percentage'
        self.examples: list = [14.63, 11.11, 15.73, 4.84, 2.25]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, (int, float)) and val >= 0 and (val <= 100):
            return round(float(val), 2)
        elif isinstance(val, str) and val.replace('.', '', 1).isnumeric() and (float(val) >= 0) and (float(val) <= 100):
            return round(float(val), 2)
        else:
            raise Exception('Invalid percentage')


MAPPING = {'unnamed0': indexnumber, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of data rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise ValueError('Index cannot be negative.')
        return val

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should match a valid country name in English'
        self.format = 'Country names should be properly capitalized and spelled'
        self.examples = ['Afghanistan', 'Belarus', 'Poland', 'Georgia', 'Romania']

    def cast(self, val):
        val = str(val)
        if not pycountry.countries.lookup(val):
            raise ValueError(f'{val} is not a recognized country name.')
        return val.title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Calendar year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2002, 2007, 2011, 2013, 2018]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > datetime.now().year:
            raise ValueError('Invalid year.')
        return val

class rate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Rate of an event per 1000 population'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rate should be a floating point number'
        self.unit = 'Per 1000 population'
        self.examples = [0.0, 0.42, 1.09, 2.01, 2.4]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise ValueError('Rate cannot be negative.')
        return round(val, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': rate}"
"class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of items'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Count cannot be negative')
            else:
                return num
        except ValueError:
            raise Exception('Invalid count')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that represents a valid country name'
        self.format = 'Country name should be capitalized and must be a valid country'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Armenia']

    def cast(self, val):
        try:
            country = pycountry.countries.get(name=val)
            return country.name
        except AttributeError:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four-digit integer'
        self.examples = [2016, 2009, 2013, 2016, 2016]

    def cast(self, val):
        try:
            num = int(val)
            if num < 0 or num > datetime.now().year:
                raise Exception('Invalid year')
            else:
                return num
        except ValueError:
            raise Exception('Invalid year')

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage Value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.examples = [42.1, 12.9, 77.2, 24.2, 40.2]

    def cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 100:
                raise Exception('Invalid percentage')
            else:
                return num
        except ValueError:
            raise Exception('Invalid percentage')


MAPPING = {'unnamed0': count, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An index ID that is used to uniquely identify a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid index ID')
        return num

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names from around the world'
        self.valid_values = 'Should be a valid country name according to the ISO 3166 standard'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Afghanistan', 'Albania', 'Angola', 'Antigua and Barbuda', 'Argentina']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val).title())
        if country is None:
            raise ValueError('Invalid country name')
        return country.name

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the record'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [2016, 2016, 2016, 2016, 2016]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise ValueError('Invalid year')
        return num

class deathrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of deaths per 100,000 population due to road traffic accidents'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.units = 'Deaths per 100,000 population'
        self.examples = [15.1, 13.6, 23.6, 7.9, 14.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid death rate')
        return round(num, 2)


MAPPING = {'unnamed0': indexidentifier, 'location': countryname, 'period': year, 'firsttooltip': deathrate}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The index number of an entity in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index number should be an integer greater than or equal to 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index number')
        return num

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should match a country in the ISO 3166 standard'
        self.format = 'Name should be capitalized'
        self.examples = ['Albania', 'China', 'Samoa', 'Paraguay', 'Philippines']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year in the Gregorian calendar'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be an integer between 0 and the current year'
        self.examples = [2017, 2016, 2015, 2014, 2013]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of an entity'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.unit = 'In percentage'
        self.examples = [39.86, 40.17, 39.39, 39.85, 40.17]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid percentage')
        return round(num, 2)


MAPPING = {'unnamed0': indexnumber, 'location': countryname, 'period': year, 'firsttooltip': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index that uniquely identifies a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that represents a valid country name'
        self.format = 'Country names should be capitalized and match the official country names used by the United Nations'
        self.examples = ['Albania', ""Lao People's Democratic Republic"", 'Andorra', 'Argentina', 'Armenia']

    def cast(self, val):
        return pycountry.countries.get(name=val).name

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year in the Gregorian calendar'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'A year should be formatted as a 4 digit integer'
        self.examples = [2018, 2017, 2016, 2015, 2014]

    def cast(self, val):
        return int(val)

class tobaccoconsumptionpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of tobacco consumption in a country'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Tobacco consumption percentage should be formatted as a floating point number with a maximum of two decimal places'
        self.examples = [29.2, 50.5, 7.9, 29.3, 50.6]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'location': countryname, 'period': year, 'firsttooltip': tobaccoconsumptionpercent}"
"class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country name should be a string that matches a country in the pycountry database'
        self.format = 'Country name should be capitalized and in full form (not abbreviated)'
        self.examples = ['Afghanistan', 'Algeria', 'Angola', 'Antigua and Barbuda', 'Democratic Republic of the Congo']

    def cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name) is None:
            raise Exception('Invalid country name')
        return country_name

class servicecoverageindicator(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Indicator for essential service coverage'
        self.valid_values = ""Indicator should be 'UHC index of essential service coverage'""
        self.format = ""Indicator should be a string with the exact phrase 'UHC index of essential service coverage'""
        self.examples = ['UHC index of essential service coverage']

    def cast(self, val):
        indicator = str(val)
        if indicator != 'UHC index of essential service coverage':
            raise Exception('Invalid indicator')
        return indicator

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Data'
        self.valid_range = [2000, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2015, 2016, 2017]

    def cast(self, val):
        year = int(val)
        if year < 2000 or year > datetime.now().year:
            raise Exception('Invalid year')
        return year

class indexvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The index value of essential service coverage'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Index value should be an integer between 0 and 100'
        self.examples = [22, 49, 68, 76, 89]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 100:
            raise Exception('Invalid index value')
        return num


MAPPING = {'location': country, 'indicator': servicecoverageindicator, 'period': year, 'firsttooltip': indexvalue}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique IDs should be whole numbers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name should be a string that represents a valid country name'
        self.format = 'Country names should be capitalized and spelled correctly'
        self.examples = ['Jordan', 'Malta', 'Burkina Faso', 'Belgium', 'Luxembourg']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception(f'Invalid country name: {val}')
        return country.name

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1950, 2019]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [2019, 2018, 2017, 2016, 2015]

    def cast(self, val):
        val = int(val)
        if val < 1950 or val > 2019:
            raise Exception(f'Invalid year: {val}')
        return val

class mortalityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mortality rate of children under 5'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mortality rate should be a floating point number with two decimal places'
        self.unit = 'per 1,000 live births'
        self.examples = [171.1, 4.06, 3.99, 3.89, 4.66]

    def cast(self, val):
        match_obj = re.match('(\\d+\\.\\d+)', val)
        if match_obj:
            return float(match_obj.group())
        else:
            raise Exception('Invalid mortality rate')


MAPPING = {'unnamed0': uniqueidentifier, 'location': countryname, 'period': year, 'firsttooltip': mortalityrate}"
"class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A serial number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serial numbers should be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val) if math.modf(val)[0] == 0.0 else None

class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A serial number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serial numbers should be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val) if math.modf(val)[0] == 0.0 else None

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates should be in the format dd/mm/yyyy'
        self.format = 'Dates should be in the format dd/mm/yyyy'
        self.examples = ['09/01/2020', '13/01/2020', '09/01/2020', '02/01/2020', '02/01/2020']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%d/%m/%Y').strftime('%d/%m/%Y')
        except ValueError:
            return None

class startupname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the startup'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be a string'
        self.examples = ['BYJU’S', 'Shuttl', 'Mamaearth', 'https://www.wealthbucket.in/', 'Fashor']

    def cast(self, val):
        return str(val)

class industry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Industry vertical of the startup'
        self.valid_values = 'Industry vertical should be a string'
        self.format = 'Industry vertical should be a string'
        self.examples = ['E-Tech', 'Transportation', 'E-commerce', 'FinTech', 'Fashion and Apparel']

    def cast(self, val):
        return str(val)

class subindustry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Subvertical of the startup'
        self.valid_values = 'Subvertical should be a string'
        self.format = 'Subvertical should be a string'
        self.examples = ['E-learning', 'App based shuttle service', 'Retailer of baby and toddler products', 'Online Investment', 'Embroiled Clothes For Women']

    def cast(self, val):
        return str(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City of the startup'
        self.valid_values = 'City should be a string'
        self.format = 'City should be a string'
        self.examples = ['Bengaluru', 'Gurgaon', 'Bengaluru', 'New Delhi', 'Mumbai']

    def cast(self, val):
        return str(val)

class investor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Investor of the startup'
        self.valid_values = 'Investor should be a string'
        self.format = 'Investor should be a string'
        self.examples = ['Tiger Global Management', 'Susquehanna Growth Equity', 'Sequoia Capital India', 'Vinod Khatumal', 'Sprout Venture Partners']

    def cast(self, val):
        return str(val)

class fundingtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Investment type of the startup'
        self.valid_values = 'Investment type should be a string'
        self.format = 'Investment type should be a string'
        self.examples = ['Private Equity Round', 'Series C', 'Series B', 'Pre-series A', 'Seed Round']

    def cast(self, val):
        return str(val)

class fundingamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Funding amount of the startup in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Funding amount should be a floating point number'
        self.unit = 'In USD'
        self.examples = [2000000000.0, 8048394.0, 18358860.0, 3000000.0, 1800000.0]

    def cast(self, val):
        try:
            return float(str(val).replace(',', ''))
        except ValueError:
            return float('nan')

class remarks(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Remarks about the startup'
        self.valid_values = 'Remarks should be a string or NaN if not available'
        self.format = 'Remarks should be a string or NaN if not available'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        return str(val) if pd.notna(val) else float('nan')


MAPPING = {'unnamed0': serialnumber, 'srno': serialnumber, 'dateddmmyyyy': date, 'startupname': startupname, 'industryvertical': industry, 'subvertical': subindustry, 'citylocation': city, 'investorsname': investor, 'investmentntype': fundingtype, 'amountinusd': fundingamount, 'remarks': remarks}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is the official short name in English of a UN member country'
        self.format = 'The first letter should be capitalized'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra']

    def cast(self, val):
        name = str(val).strip()
        if pycountry.countries.get(name=name):
            return name
        else:
            raise Exception('Invalid country name')

class globalregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Global region a country belongs to'
        self.valid_values = 'Name should be a string that is a region name'
        self.format = 'The first letter of each word should be capitalized, other characters should be lower case. There should be no leading or trailing spaces.'
        self.examples = ['Sub-Saharan Africa', 'Latin Amer. & Carib', 'Asia (Ex. Near East)', 'Western Europe', 'Oceania']

    def cast(self, val):
        return str(val).strip().title()

class countryarea(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total area of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Area should be a float number'
        self.unit = 'In square miles'
        self.examples = [647500, 28748, 2381740, 199, 468]

    def cast(self, val):
        return float(val)

class populationdensity(NumericSemanticType):

    def __init__(self):
        self.description = 'The population density of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Density should be a float number'
        self.examples = [48.0, 124.6, 13.8, 290.4, 152.1]

    def cast(self, val):
        return float(val.replace(',', '.'))

class coastlinearearatio(NumericSemanticType):

    def __init__(self):
        self.description = 'The ratio of coastline to area of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The ratio should be a float number'
        self.examples = [0.0, 1.26, 0.04, 58.29, 0.0]

    def cast(self, val):
        return float(val.replace(',', '.'))

class netmigration(NumericSemanticType):

    def __init__(self):
        self.description = 'The net migration of a country'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The net migration should be a float number'
        self.examples = [23.06, -4.93, -0.39, -20.71, 6.6]

    def cast(self, val):
        return float(str(val).replace(',', '.'))

class countrygdp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The GDP per capita of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP should be a float number'
        self.unit = 'In USD'
        self.examples = [700.0, 4500.0, 6000.0, 8000.0, 19000.0]

    def cast(self, val):
        return float(val)


MAPPING = {'country': countryname, 'region': globalregion, 'areasqmi': countryarea, 'popdensitypersqmi': populationdensity, 'coastlinecoastarearatio': coastlinearearatio, 'netmigration': netmigration, 'gdppercapita': countrygdp}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as an integer'
        self.examples = [5008804, 5008805, 5008806, 5008808, 5008809]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ['M', 'F']
        self.format = ""Gender should be represented as 'M' or 'F'""
        self.examples = ['M', 'F']

    def cast(self, val):
        if val in ['M', 'F']:
            return val
        else:
            raise Exception('Invalid gender')

class carownership(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Y', 'N']

    def cast(self, val):
        if val == 'Y':
            return True
        elif val == 'N':
            return False
        else:
            raise Exception('Invalid car ownership value')

class realtyownership(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Y', 'N']

    def cast(self, val):
        if val == 'Y':
            return True
        elif val == 'N':
            return False
        else:
            raise Exception('Invalid realty ownership value')

class children(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of children'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of children should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class income(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total income'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [427500.0, 112500.0, 270000.0, 157500.0, 225000.0]

    def cast(self, val):
        return float(val)

class income(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total income'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Income should be formatted as a floating point number'
        self.unit = 'In local currency'
        self.examples = [427500.0, 112500.0, 270000.0, 157500.0, 225000.0]

    def cast(self, val):
        return float(val)

class education(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Level of education'
        self.valid_values = 'Education level should be a string representing a level of education'
        self.format = 'Education level should be capitalized and may contain spaces or slashes'
        self.examples = ['Secondary / secondary special', 'Higher education', 'Incomplete higher', 'Lower secondary', 'Academic degree']

    def cast(self, val):
        return str(val).title()

class familystatus(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Family status'
        self.valid_values = 'Family status should be a string representing a family status'
        self.format = 'Family status should be capitalized and may contain spaces or slashes'
        self.examples = ['Married', 'Single / not married', 'Civil marriage', 'Separated', 'Widow']

    def cast(self, val):
        return str(val).title()

class housingtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of housing'
        self.valid_values = 'Housing type should be a string representing a type of housing'
        self.format = 'Housing type should be capitalized and may contain spaces'
        self.examples = ['House / apartment', 'With parents', 'Municipal apartment', 'Rented apartment', 'Office apartment']

    def cast(self, val):
        return str(val).title()

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Number of days should be formatted as an integer'
        self.examples = [-12005, -21474, -19110, -16365, -3111]

    def cast(self, val):
        return int(val)

class days(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Number of days should be formatted as an integer'
        self.examples = [-12005, -21474, -19110, -16365, -3111]

    def cast(self, val):
        return int(val)

class mobil(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1]

    def cast(self, val):
        if val == 1:
            return True
        else:
            raise Exception('Invalid mobil value')

class workphone(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0:
            return False
        elif val == 1:
            return True
        else:
            raise Exception('Invalid workphone value')

class phone(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0:
            return False
        elif val == 1:
            return True
        else:
            raise Exception('Invalid phone value')

class email(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0:
            return False
        elif val == 1:
            return True
        else:
            raise Exception('Invalid email value')

class occupation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Occupation type'
        self.valid_values = 'Occupation type should be a string representing a type of occupation'
        self.format = 'Occupation type should be capitalized and may contain spaces'
        self.examples = ['Laborers', 'Core staff', 'Sales staff', 'Managers', 'Drivers']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class familymembers(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of family members'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of family members should be formatted as an integer'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return int(val)


MAPPING = {'id': identifier, 'codegender': gender, 'flagowncar': carownership, 'flagownrealty': realtyownership, 'cntchildren': children, 'amtincometotal': income, 'nameincometype': income, 'nameeducationtype': education, 'namefamilystatus': familystatus, 'namehousingtype': housingtype, 'daysbirth': days, 'daysemployed': days, 'flagmobil': mobil, 'flagworkphone': workphone, 'flagphone': phone, 'flagemail': email, 'occupationtype': occupation, 'cntfammembers': familymembers}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique identifier should be a whole positive number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique identifier should be a whole positive number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class monthoffset(NumericSemanticType):

    def __init__(self):
        self.description = 'Month offset'
        self.valid_range = [-60, 0]
        self.dtype = int
        self.format = 'Month offset should be a whole negative number or zero'
        self.examples = [-60, -30, -15, -1, 0]

    def cast(self, val):
        return int(val)

class creditstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Credit status'
        self.valid_values = ""Status can take one of the following values: 'C', '0', 'X', '1', '5'""
        self.format = 'Credit status is a single character'
        self.examples = ['C', '0', 'X', '1', '5']

    def cast(self, val):
        valid_values = ['C', '0', 'X', '1', '5']
        if str(val) in valid_values:
            return str(val)
        else:
            raise Exception('Invalid credit status')


MAPPING = {'unnamed0': uniqueidentifier, 'id': uniqueidentifier, 'monthsbalance': monthoffset, 'status': creditstatus}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Match ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID is an integer with no maximum limit'
        self.examples = [335982, 392231, 501234, 548376, 733977]

    def cast(self, val):
        return int(val)

class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Match ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID is an integer with no maximum limit'
        self.examples = [335982, 392231, 501234, 548376, 733977]

    def cast(self, val):
        return int(val)

class inning(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1, 2]

    def cast(self, val):
        if val == 1 or val == 2:
            return int(val)
        else:
            raise Exception('Invalid inning number')

class over(NumericSemanticType):

    def __init__(self):
        self.description = 'Over in a cricket match'
        self.valid_range = [0, 19]
        self.dtype = int
        self.format = 'Over is an integer between 0 and 19'
        self.examples = [0, 4, 9, 14, 19]

    def cast(self, val):
        if 0 <= val <= 19:
            return int(val)
        else:
            raise Exception('Invalid over number')

class ball(NumericSemanticType):

    def __init__(self):
        self.description = 'Ball in an over of a cricket match'
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = 'Ball is an integer between 1 and 9'
        self.examples = [1, 2, 4, 5, 9]

    def cast(self, val):
        if 1 <= val <= 9:
            return int(val)
        else:
            raise Exception('Invalid ball number')

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket player'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['JH Kallis', 'SK Raina', 'RG Sharma', 'G Gambhir', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket player'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['JH Kallis', 'SK Raina', 'RG Sharma', 'G Gambhir', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket player'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['JH Kallis', 'SK Raina', 'RG Sharma', 'G Gambhir', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class run(NumericSemanticType):

    def __init__(self):
        self.description = 'Runs scored in a cricket match'
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = 'Runs are integers between 0 and 6'
        self.examples = [0, 1, 2, 4, 6]

    def cast(self, val):
        if 0 <= val <= 6:
            return int(val)
        else:
            raise Exception('Invalid run number')

class run(NumericSemanticType):

    def __init__(self):
        self.description = 'Runs scored in a cricket match'
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = 'Runs are integers between 0 and 6'
        self.examples = [0, 1, 2, 4, 6]

    def cast(self, val):
        if 0 <= val <= 6:
            return int(val)
        else:
            raise Exception('Invalid run number')

class run(NumericSemanticType):

    def __init__(self):
        self.description = 'Runs scored in a cricket match'
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = 'Runs are integers between 0 and 6'
        self.examples = [0, 1, 2, 4, 6]

    def cast(self, val):
        if 0 <= val <= 6:
            return int(val)
        else:
            raise Exception('Invalid run number')

class iswicket(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid wicket status')

class iswicket(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid wicket status')

class cricketteam(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket team'
        self.valid_values = 'Name should be a string'
        self.format = 'The name of the cricket team should be capitalized'
        self.examples = ['Chennai Super Kings', 'Mumbai Indians', 'Royal Challengers Bangalore', 'Kings XI Punjab', 'Rajasthan Royals']

    def cast(self, val):
        return str(val).title()

class cricketteam(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket team'
        self.valid_values = 'Name should be a string'
        self.format = 'The name of the cricket team should be capitalized'
        self.examples = ['Chennai Super Kings', 'Mumbai Indians', 'Royal Challengers Bangalore', 'Kings XI Punjab', 'Rajasthan Royals']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': matchidentifier, 'id': matchidentifier, 'inning': inning, 'over': over, 'ball': ball, 'batsman': playername, 'nonstriker': playername, 'bowler': playername, 'batsmanruns': run, 'extraruns': run, 'totalruns': run, 'nonboundary': iswicket, 'iswicket': iswicket, 'battingteam': cricketteam, 'bowlingteam': cricketteam}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [335982, 335983, 335984, 335985, 335986]

    def cast(self, val):
        return int(val)

class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [335982, 335983, 335984, 335985, 335986]

    def cast(self, val):
        return int(val)

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.valid_values = 'City names should be strings and match a real-world city'
        self.format = 'City names should be capitalized and without any special characters or numbers'
        self.examples = ['Mumbai', 'Kolkata', 'Delhi', 'Bangalore', 'Hyderabad']

    def cast(self, val):
        return str(val).title()

class matchdate(NumericSemanticType):

    def __init__(self):
        self.description = 'Date of a match'
        self.valid_range = [0, float('inf')]
        self.dtype = str
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['2008-04-18', '2008-04-19', '2008-04-20', '2008-04-21', '2008-04-22']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Player names should be strings and match a real-world player'
        self.format = 'Player names should be capitalized and without any special characters or numbers'
        self.examples = ['AB de Villiers', 'CH Gayle', 'RG Sharma', 'DA Warner', 'MS Dhoni']

    def cast(self, val):
        return str(val).title()

class venuename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Venue'
        self.valid_values = 'Venue names should be strings and match a real-world venue'
        self.format = 'Venue names should be capitalized and without any special characters or numbers'
        self.examples = ['Eden Gardens', 'Feroz Shah Kotla', 'Wankhede Stadium', 'M Chinnaswamy Stadium', 'Rajiv Gandhi International Stadium, Uppal']

    def cast(self, val):
        return str(val).title()

class neutralvenue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Team'
        self.valid_values = 'Team names should be strings and match a real-world team'
        self.format = 'Team names should be capitalized and without any special characters or numbers'
        self.examples = ['Mumbai Indians', 'Kolkata Knight Riders', 'Chennai Super Kings', 'Royal Challengers Bangalore', 'Rajasthan Royals']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Team'
        self.valid_values = 'Team names should be strings and match a real-world team'
        self.format = 'Team names should be capitalized and without any special characters or numbers'
        self.examples = ['Mumbai Indians', 'Kolkata Knight Riders', 'Chennai Super Kings', 'Royal Challengers Bangalore', 'Rajasthan Royals']

    def cast(self, val):
        return str(val).title()

class tossdecision(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['field', 'bat']

    def cast(self, val):
        return str(val)

class matchresult(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Result of a Match'
        self.valid_values = ""Result should be one of ['wickets', 'runs', 'tie']""
        self.format = 'Result should be a string'
        self.examples = ['wickets', 'runs', 'tie']

    def cast(self, val):
        return str(val)

class resultmargin(NumericSemanticType):

    def __init__(self):
        self.description = 'The margin of result in a match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Result margin should be a floating point number'
        self.examples = [140.0, 33.0, 9.0, 5.0, 5.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class eliminatormatch(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['N', 'Y']

    def cast(self, val):
        return str(val)

class matchmethod(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Method used in a Match'
        self.valid_values = ""Method should be one of ['D/L'] or NaN""
        self.format = 'Method should be a string'
        self.examples = ['D/L', float('nan')]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)


MAPPING = {'unnamed0': matchidentifier, 'id': matchidentifier, 'city': cityname, 'date': matchdate, 'playerofmatch': playername, 'venue': venuename, 'neutralvenue': neutralvenue, 'tosswinner': teamname, 'winner': teamname, 'tossdecision': tossdecision, 'result': matchresult, 'resultmargin': resultmargin, 'eliminator': eliminatormatch, 'method': matchmethod}"
"class storeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a store'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Store ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class storearea(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The area of a store in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Area should be a positive floating point number'
        self.units = 'Square Feet'
        self.examples = [1659.0, 1461.0, 1340.0, 1451.0, 1770.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class itemsavailable(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of items available in a store'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Items available should be a non-negative integer'
        self.examples = [1961, 1752, 1609, 1748, 2111]

    def cast(self, val):
        return int(val)

class dailycustomercount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of customers visiting a store daily'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Customer count should be a non-negative integer'
        self.examples = [530, 210, 720, 620, 450]

    def cast(self, val):
        return int(val)

class storesales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of a store in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a positive floating point number'
        self.units = 'In USD'
        self.examples = [66490.0, 39820.0, 54010.0, 53730.0, 46620.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'storeid': storeidentifier, 'storearea': storearea, 'itemsavailable': itemsavailable, 'dailycustomercount': dailycustomercount, 'storesales': storesales}"
"class recordindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique index number for each record in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The record index should be a positive integer or zero'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val) or val < 0:
            raise Exception('Invalid record index')
        return int(val)

class publishdate(NumericSemanticType):

    def __init__(self):
        self.description = 'The date when the news was published'
        self.valid_range = [20030219, 20040630]
        self.dtype = int
        self.format = 'The publish date should be an integer of format YYYYMMDD'
        self.examples = [20030219, 20030219, 20030219, 20030219, 20030219]

    def cast(self, val):
        if math.isnan(val) or val < 20030219 or val > 20040630:
            raise Exception('Invalid publish date')
        return int(val)


MAPPING = {'unnamed0': recordindex, 'publishdate': publishdate}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Game Identification'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Game ID should be an integer number'
        self.examples: list = [4519157822, 4523371949, 4521474530, 4524384067, 4436033771]

    def cast(self, val):
        return int(val)

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class booleanresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class wardsplaced(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of wards placed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'wards'
        self.format = 'Wards placed should be an integer number'
        self.examples: list = [28, 12, 15, 43, 75]

    def cast(self, val):
        return int(val)

class wardsplaced(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of wards placed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'wards'
        self.format = 'Wards placed should be an integer number'
        self.examples: list = [28, 12, 15, 43, 75]

    def cast(self, val):
        return int(val)

class wardsdestroyed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of wards destroyed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'wards'
        self.format = 'Wards destroyed should be an integer number'
        self.examples: list = [2, 1, 0, 1, 4]

    def cast(self, val):
        return int(val)

class wardsdestroyed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of wards destroyed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'wards'
        self.format = 'Wards destroyed should be an integer number'
        self.examples: list = [2, 1, 0, 1, 4]

    def cast(self, val):
        return int(val)

class kills(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of kills in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'kills'
        self.format = 'Kills should be an integer number'
        self.examples: list = [9, 5, 7, 4, 6]

    def cast(self, val):
        return int(val)

class kills(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of kills in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'kills'
        self.format = 'Kills should be an integer number'
        self.examples: list = [9, 5, 7, 4, 6]

    def cast(self, val):
        return int(val)

class deaths(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of deaths in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'deaths'
        self.format = 'Deaths should be an integer number'
        self.examples: list = [6, 5, 11, 5, 6]

    def cast(self, val):
        return int(val)

class deaths(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of deaths in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'deaths'
        self.format = 'Deaths should be an integer number'
        self.examples: list = [6, 5, 11, 5, 6]

    def cast(self, val):
        return int(val)

class assists(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of assists in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'assists'
        self.format = 'Assists should be an integer number'
        self.examples: list = [11, 5, 4, 5, 6]

    def cast(self, val):
        return int(val)

class assists(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of assists in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'assists'
        self.format = 'Assists should be an integer number'
        self.examples: list = [11, 5, 4, 5, 6]

    def cast(self, val):
        return int(val)

class elitemonsters(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of elite monsters in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'monsters'
        self.format = 'Monsters should be an integer number'
        self.examples: list = [0, 0, 1, 1, 0]

    def cast(self, val):
        return int(val)

class elitemonsters(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of elite monsters in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'monsters'
        self.format = 'Monsters should be an integer number'
        self.examples: list = [0, 0, 1, 1, 0]

    def cast(self, val):
        return int(val)

class towersdestroyed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of towers destroyed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'towers'
        self.format = 'Towers should be an integer number'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)

class totalgold(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total gold in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'gold'
        self.format = 'Gold should be an integer number'
        self.examples: list = [17210, 14712, 16113, 15157, 16400]

    def cast(self, val):
        return int(val)

class avglevel(NumericSemanticType):

    def __init__(self):
        self.description = 'The average level in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Level should be a float number'
        self.examples: list = [6.6, 6.6, 6.4, 7.0, 7.0]

    def cast(self, val):
        return float(val)

class totalexperience(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total experience in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'experience'
        self.format = 'Experience should be an integer number'
        self.examples: list = [17039, 16265, 16221, 17954, 18543]

    def cast(self, val):
        return int(val)

class totalminionskilled(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total minions killed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'minions'
        self.format = 'Minions killed should be an integer number'
        self.examples: list = [195, 174, 186, 201, 210]

    def cast(self, val):
        return int(val)

class totaljungleminionskilled(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total jungle minions killed in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'jungle minions'
        self.format = 'Jungle minions killed should be an integer number'
        self.examples: list = [36, 43, 46, 55, 57]

    def cast(self, val):
        return int(val)

class golddiff(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The gold difference in a game'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.unit = 'gold'
        self.format = 'Gold difference should be an integer number'
        self.examples: list = [643, -2908, -1172, -1321, -1004]

    def cast(self, val):
        return int(val)

class experiencediff(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The experience difference in a game'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.unit = 'experience'
        self.format = 'Experience difference should be an integer number'
        self.examples: list = [-8, -1173, -1033, -7, 230]

    def cast(self, val):
        return int(val)

class cspermin(NumericSemanticType):

    def __init__(self):
        self.description = 'The minions killed per minute in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Minions killed per minute should be a float number'
        self.examples: list = [19.5, 17.4, 18.6, 20.1, 21.0]

    def cast(self, val):
        return float(val)

class goldpermin(NumericSemanticType):

    def __init__(self):
        self.description = 'The gold per minute in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Gold per minute should be a float number'
        self.examples: list = [1721.0, 1471.2, 1611.3, 1515.7, 1640.0]

    def cast(self, val):
        return float(val)


MAPPING = {'gameid': gameidentifier, 'bluewins': booleanresult, 'bluefirstblood': booleanresult, 'bluedragons': booleanresult, 'blueheralds': booleanresult, 'redfirstblood': booleanresult, 'reddragons': booleanresult, 'bluewardsplaced': wardsplaced, 'redwardsplaced': wardsplaced, 'bluewardsdestroyed': wardsdestroyed, 'redwardsdestroyed': wardsdestroyed, 'bluekills': kills, 'redkills': kills, 'bluedeaths': deaths, 'reddeaths': deaths, 'blueassists': assists, 'redassists': assists, 'blueelitemonsters': elitemonsters, 'redelitemonsters': elitemonsters, 'bluetowersdestroyed': towersdestroyed, 'bluetotalgold': totalgold, 'blueavglevel': avglevel, 'bluetotalexperience': totalexperience, 'bluetotalminionskilled': totalminionskilled, 'bluetotaljungleminionskilled': totaljungleminionskilled, 'bluegolddiff': golddiff, 'blueexperiencediff': experiencediff, 'bluecspermin': cspermin, 'bluegoldpermin': goldpermin}"
"class jobidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a job'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Job ID must be a unique positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job title'
        self.valid_values = 'Job title is a string that describes the role'
        self.format = 'Job title should start with a capital letter'
        self.examples = ['Marketing Intern', 'Customer Service - Cloud Video Production', 'Commissioning Machinery Assistant (CMA)', 'Account Executive - Washington DC', 'Bill Review Manager']

    def cast(self, val):
        return str(val).title()

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of the job'
        self.valid_values = ""Location should be a string in the format 'Country Code, State Code, City Name'""
        self.format = ""Location should be a string in the format 'Country Code, State Code, City Name'""
        self.examples = ['US, NY, New York', 'NZ, , Auckland', 'US, IA, Wever', 'US, DC, Washington', 'US, FL, Fort Worth']

    def cast(self, val):
        return str(val)

class telecommuting(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class hascompanylogo(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class hasquestions(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class employmenttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of employment'
        self.valid_values = ""Type of employment can be one of the following: ['Full-time', 'Contract', 'Part-time', 'Temporary', 'Other']""
        self.format = 'Employment type should be a string'
        self.examples = ['Full-time', 'Contract', 'Part-time', 'Temporary', 'Other']

    def cast(self, val):
        return str(val)

class fraudulent(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'jobid': jobidentifier, 'title': jobtitle, 'location': location, 'telecommuting': telecommuting, 'hascompanylogo': hascompanylogo, 'hasquestions': hasquestions, 'employmenttype': employmenttype, 'fraudulent': fraudulent}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a valid country name as per pycountry'
        self.format = 'Country names should be capitalized and in English'
        self.examples = ['Afghanistan', 'Brazil', 'China', 'Denmark', 'Egypt']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val)
        else:
            raise Exception('Invalid country name')

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.valid_values = 'Name should be a valid city name as per countryinfo'
        self.format = 'City names should be capitalized and in English'
        self.examples = ['Kabul', 'Vienna', 'Brasilia', 'Algiers', 'Tokyo']

    def cast(self, val):
        return str(val)

class continentname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Continent'
        self.valid_values = 'Name should be a valid continent name'
        self.format = 'Continent names should be capitalized and in English'
        self.examples = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania']

    def cast(self, val):
        continents = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America']
        if val in continents:
            return str(val)
        else:
            raise Exception('Invalid continent name')

class countryarea(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Area should be represented as an integer and the unit is square kilometers'
        self.unit = 'Square Kilometers'
        self.examples: list[int] = [652230, 28748, 2381741, 199, 468]

    def cast(self, val):
        return int(val)

class populationdensity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Population Density of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Population Density should be a floating point number and the unit is persons per square kilometer'
        self.unit = 'Persons per Square Kilometer'
        self.examples: list[float] = [63.0587, 98.8702, 18.8531, 222.4774, 170.5641]

    def cast(self, val):
        return float(val)

class populationgrowthrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Population Growth Rate of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Population Growth Rate should be a floating point number'
        self.examples: list[float] = [1.0257, 0.9957, 1.0164, 0.9831, 1.01]

    def cast(self, val):
        return float(val)

class worldpopulationpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage of world population in a country'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'World Population Percentage should be a floating point number'
        self.examples: list[float] = [0.52, 0.04, 0.56, 0.0, 0.0]

    def cast(self, val):
        return float(val)


MAPPING = {'countryterritory': countryname, 'capital': cityname, 'continent': continentname, 'areakm²': countryarea, 'densityperkm²': populationdensity, 'growthrate': populationgrowthrate, 'worldpopulationpercentage': worldpopulationpercent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Row index'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Row indices should be non-negative integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise ValueError('Invalid index')
        return int(val)

class datetimetype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_values = 'Date and Time values should be of the form DD/MM/YYYY and HH:MM:SS respectively'
        self.format = 'Date and Time should be formatted as strings'
        self.examples = ['03/11/2011', '12/26/2004', '02/27/2010', '02/06/2013', '11/15/2006', '02:56:58', '14:09:03', '16:25:34', '15:06:45', '02:53:15']

    def cast(self, val):
        try:
            if len(val.split(':')) == 3:
                return datetime.strptime(val, '%H:%M:%S').time()
            elif len(val.split('/')) == 3:
                return datetime.strptime(val, '%d/%m/%Y').date()
            else:
                raise ValueError('Invalid Date/Time format')
        except ValueError:
            raise ValueError('Invalid Date/Time format')

class datetimetype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_values = 'Date and Time values should be of the form DD/MM/YYYY and HH:MM:SS respectively'
        self.format = 'Date and Time should be formatted as strings'
        self.examples = ['03/11/2011', '12/26/2004', '02/27/2010', '02/06/2013', '11/15/2006', '02:56:58', '14:09:03', '16:25:34', '15:06:45', '02:53:15']

    def cast(self, val):
        try:
            if len(val.split(':')) == 3:
                return datetime.strptime(val, '%H:%M:%S').time()
            elif len(val.split('/')) == 3:
                return datetime.strptime(val, '%d/%m/%Y').date()
            else:
                raise ValueError('Invalid Date/Time format')
        except ValueError:
            raise ValueError('Invalid Date/Time format')

class geocoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographical coordinate (latitude or longitude)'
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = 'Geographical coordinates should be floating point numbers'
        self.examples: list = [-77.08, 86.005, -179.997, 179.998]

    def cast(self, val):
        if val < -180 or val > 180:
            raise ValueError('Invalid geographical coordinate')
        return float(val)

class geocoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographical coordinate (latitude or longitude)'
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = 'Geographical coordinates should be floating point numbers'
        self.examples: list = [-77.08, 86.005, -179.997, 179.998]

    def cast(self, val):
        if val < -180 or val > 180:
            raise ValueError('Invalid geographical coordinate')
        return float(val)

class earthquaketype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of earthquake'
        self.valid_values = 'Earthquake types include: Earthquake, Nuclear Explosion, Explosion, and Rock Burst'
        self.format = 'Earthquake types are stored as strings'
        self.examples = ['Earthquake', 'Nuclear Explosion', 'Explosion', 'Rock Burst']

    def cast(self, val):
        if val not in self.examples:
            raise ValueError('Invalid earthquake type')
        return str(val)

class depth(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Depth of earthquake'
        self.valid_range = [-1.1, 700.0]
        self.dtype = float
        self.format = 'Depth should be a floating point number'
        self.unit = 'In kilometers'
        self.examples = [131.6, 80.0, 20.0, 15.0, 15.0]

    def cast(self, val):
        return float(val)

class depth(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Depth of earthquake'
        self.valid_range = [-1.1, 700.0]
        self.dtype = float
        self.format = 'Depth should be a floating point number'
        self.unit = 'In kilometers'
        self.examples = [131.6, 80.0, 20.0, 15.0, 15.0]

    def cast(self, val):
        return float(val)

class depth(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Depth of earthquake'
        self.valid_range = [-1.1, 700.0]
        self.dtype = float
        self.format = 'Depth should be a floating point number'
        self.unit = 'In kilometers'
        self.examples = [131.6, 80.0, 20.0, 15.0, 15.0]

    def cast(self, val):
        return float(val)

class magnitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Magnitude of earthquake'
        self.valid_range = [5.5, 9.1]
        self.dtype = float
        self.format = 'Magnitude should be a floating point number'
        self.examples = [6.0, 5.8, 6.2, 5.8, 5.8]

    def cast(self, val):
        return float(val)

class magnitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Magnitude of earthquake'
        self.valid_range = [5.5, 9.1]
        self.dtype = float
        self.format = 'Magnitude should be a floating point number'
        self.examples = [6.0, 5.8, 6.2, 5.8, 5.8]

    def cast(self, val):
        return float(val)

class magnitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Magnitude of earthquake'
        self.valid_range = [5.5, 9.1]
        self.dtype = float
        self.format = 'Magnitude should be a floating point number'
        self.examples = [6.0, 5.8, 6.2, 5.8, 5.8]

    def cast(self, val):
        return float(val)

class magnitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Magnitude of earthquake'
        self.valid_range = [5.5, 9.1]
        self.dtype = float
        self.format = 'Magnitude should be a floating point number'
        self.examples = [6.0, 5.8, 6.2, 5.8, 5.8]

    def cast(self, val):
        return float(val)

class reviewed(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Reviewed', 'Automatic']

    def cast(self, val):
        return val == 'Reviewed'


MAPPING = {'unnamed0': index, 'date': datetimetype, 'time': datetimetype, 'latitude': geocoordinate, 'longitude': geocoordinate, 'type': earthquaketype, 'depth': depth, 'deptherror': depth, 'depthseismicstations': depth, 'magnitude': magnitude, 'magnitudetype': magnitude, 'magnitudeerror': magnitude, 'magnitudeseismicstations': magnitude, 'status': reviewed}"
"class measurementindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a measurement'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Measurement index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class voltagemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Voltage measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Voltage should be a float'
        self.unit = 'In voltage units'
        self.examples = [0.0, -0.3, 0.2, -0.3, -0.4]

    def cast(self, val):
        return float(val)

class voltagemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Voltage measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Voltage should be a float'
        self.unit = 'In voltage units'
        self.examples = [0.0, -0.3, 0.2, -0.3, -0.4]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class temperaturemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.unit = 'In Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def cast(self, val):
        return float(val)

class speedmeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Motor speed measurement'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Speed should be a float'
        self.unit = 'In speed units'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return float(val)

class currentmeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Current measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Current should be a float'
        self.unit = 'In current units'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return float(val)

class currentmeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Current measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Current should be a float'
        self.unit = 'In current units'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return float(val)

class torquemeasurement(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Torque measurement'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Torque should be a float'
        self.unit = 'In torque units'
        self.examples = [0.1, 0.2, 0.1, 0.2, 0.2]

    def cast(self, val):
        return float(val)

class profileidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Profile ID'
        self.valid_values = 'Profile ID should be a positive integer'
        self.format = 'Profile ID should be a positive integer'
        self.examples = [17, 17, 17, 17, 17]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': measurementindex, 'uq': voltagemeasurement, 'ud': voltagemeasurement, 'coolant': temperaturemeasurement, 'statorwinding': temperaturemeasurement, 'statortooth': temperaturemeasurement, 'pm': temperaturemeasurement, 'statoryoke': temperaturemeasurement, 'ambient': temperaturemeasurement, 'motorspeed': speedmeasurement, 'id': currentmeasurement, 'iq': currentmeasurement, 'torque': torquemeasurement, 'profileid': profileidentifier}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be integer values starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class brandname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the brand'
        self.valid_values = 'Brand name should be a string'
        self.format = 'Brand name should be capitalized'
        self.examples = ['Starbucks', 'Teavana', 'Evolution Fresh', 'Coffee House Holdings']

    def cast(self, val):
        return str(val).title()

class storenumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Store number'
        self.valid_values = 'Store number should be a string'
        self.format = 'Store number should be capitalized'
        self.examples = ['19773-160973', '28809-251348', '22126-218024', '17127-178586', '17688-182164']

    def cast(self, val):
        return str(val).upper()

class storename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the store'
        self.valid_values = 'Store name should be a string'
        self.format = 'Store name should be capitalized'
        self.examples = ['Starbucks', 'SPA', 'مركز أوتاد', 'Magnolia', 'Mabohai Shopping Mall']

    def cast(self, val):
        return str(val).title()

class ownershiptype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ownership Type'
        self.valid_values = ""Ownership type should be one of the following: ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']""
        self.format = 'Ownership type should be capitalized'
        self.examples = ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']

    def cast(self, val):
        if val in ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']:
            return str(val)
        else:
            raise ValueError('Invalid ownership type')

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the city'
        self.valid_values = 'City name should be a string'
        self.format = 'City name should be capitalized'
        self.examples = ['上海市', 'Seoul', '北京市', 'New York', 'London']

    def cast(self, val):
        return str(val).title()

class stateprovince(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State or Province'
        self.valid_values = 'State or Province name should be a string'
        self.format = 'State or Province name should be capitalized'
        self.examples = ['CA', 'TX', 'ENG', 'WA', '11']

    def cast(self, val):
        return str(val).upper()

class countrycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country code'
        self.valid_values = 'Country code should be a string'
        self.format = 'Country code should be capitalized'
        self.examples = ['US', 'CN', 'CA', 'JP', 'KR']

    def cast(self, val):
        if pycountry.countries.get(alpha_2=val):
            return str(val).upper()
        else:
            raise ValueError('Invalid country code')

class postcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Postal code'
        self.valid_values = 'Postal code should be a string'
        self.format = 'Postal code should be capitalized'
        self.examples = ['0', '310000', '518000', '610000', '215000']

    def cast(self, val):
        return str(val).upper()

class phonenumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Phone number'
        self.valid_values = 'Phone number should be a string'
        self.format = 'Phone number should not contain any special characters'
        self.examples = ['773-686-6180', '4167763100', '0', '704-359-4512', '01454 260631']

    def cast(self, val):
        return re.sub('\\D', '', str(val))

class timezone(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timezone'
        self.valid_values = 'Timezone should be a string'
        self.format = 'Timezone should follow the format: GMT±HH:MM Area/City'
        self.examples = ['GMT-05:00 America/New_York', 'GMT-08:00 America/Los_Angeles', 'GMT-06:00 America/Chicago', 'GMT+08:00 Asia/Beijing', 'GMT+09:00 Asia/Tokyo']

    def cast(self, val):
        match_obj = re.match('GMT[+|-][0-9]{2}:[0-9]{2} .+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid timezone')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-179.21, -86.54, 0.0, 86.54, 179.21]

    def cast(self, val):
        num = float(val)
        if -180 <= num <= 180:
            return num
        else:
            raise ValueError('Invalid longitude')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [-89.21, -43.27, 0.0, 43.27, 89.21]

    def cast(self, val):
        num = float(val)
        if -90 <= num <= 90:
            return num
        else:
            raise ValueError('Invalid latitude')


MAPPING = {'unnamed0': rowindex, 'brand': brandname, 'storenumber': storenumber, 'storename': storename, 'ownershiptype': ownershiptype, 'city': cityname, 'stateprovince': stateprovince, 'country': countrycode, 'postcode': postcode, 'phonenumber': phonenumber, 'timezone': timezone, 'longitude': longitude, 'latitude': latitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class rating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The rating of a hotel'
        self.valid_values = 'Rating should be an integer between 1 and 5'
        self.format = 'Rating should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'rating': rating}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class foodcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category of food'
        self.valid_values = 'Category should be a string representing the category of the food item'
        self.format = 'Each word should start with a capital letter'
        self.examples = ['Coffee & Tea', 'Breakfast', 'Smoothies & Shakes', 'Chicken & Fish', 'Beverages']

    def cast(self, val):
        return str(val).title()

class fooditem(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of food item'
        self.valid_values = 'Name should be a string representing the name of the food item'
        self.format = 'Each word should start with a capital letter'
        self.examples = ['Egg McMuffin', 'Big Breakfast with Hotcakes (Large Biscuit)', 'Sausage Biscuit with Egg Whites (Large Biscuit)', 'Sausage McMuffin', 'Sausage McMuffin with Egg']

    def cast(self, val):
        return str(val).title()

class servingsize(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Serving size of food item'
        self.valid_values = 'Serving size should be a string representing the size of the food item'
        self.format = ""The serving size should be in the format 'XX.X oz (XXX g)'""
        self.examples = ['4.8 oz (136 g)', '4.8 oz (135 g)', '3.9 oz (111 g)', '5.7 oz (161 g)', '5.7 oz (161 g)']

    def cast(self, val):
        match_obj = re.match('(\\d+(\\.\\d+)?) oz \\((\\d+) g\\)', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid serving size')

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)

class nutritionvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'category': foodcategory, 'item': fooditem, 'servingsize': servingsize, 'calories': nutritionvalue, 'caloriesfromfat': nutritionvalue, 'totalfat': nutritionvalue, 'totalfatpercentdailyvalue': nutritionvalue, 'saturatedfat': nutritionvalue, 'saturatedfatpercentdailyvalue': nutritionvalue, 'transfat': nutritionvalue, 'cholesterol': nutritionvalue, 'cholesterolpercentdailyvalue': nutritionvalue, 'sodium': nutritionvalue, 'sodiumpercentdailyvalue': nutritionvalue, 'carbohydrates': nutritionvalue, 'carbohydratespercentdailyvalue': nutritionvalue, 'dietaryfiber': nutritionvalue, 'dietaryfiberpercentdailyvalue': nutritionvalue, 'sugars': nutritionvalue, 'protein': nutritionvalue, 'vitaminapercentdailyvalue': nutritionvalue, 'vitamincpercentdailyvalue': nutritionvalue, 'calciumpercentdailyvalue': nutritionvalue, 'ironpercentdailyvalue': nutritionvalue}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names'
        self.valid_values = 'Valid country names according to the list of countries recognized by the United Nations.'
        self.format = 'Country names should be capitalized and correctly spelled'
        self.examples = ['Switzerland', 'New Zealand', 'Australia', 'Denmark', 'Norway']

    def cast(self, val):
        string = str(val)
        if pycountry.countries.get(name=string):
            return string.title()
        else:
            raise Exception('Invalid country name')

class regionname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Region names'
        self.valid_values = 'Valid region names as defined by the World Bank.'
        self.format = 'Region names should be capitalized and correctly spelled'
        self.examples = ['Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa']

    def cast(self, val):
        string = str(val)
        if string in ['Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa']:
            return string.title()
        else:
            raise Exception('Invalid region name')

class happinessrank(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness rank of a country'
        self.valid_range = [1, 158]
        self.dtype = int
        self.format = 'Happiness rank should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid happiness rank')

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness score of a country'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness score should be a floating point number within the range [0, 10]'
        self.examples = [7.587, 7.561, 7.527, 7.522, 7.427]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 3)
        else:
            raise Exception('Invalid happiness score')

class scorestandarderror(NumericSemanticType):

    def __init__(self):
        self.description = 'Standard error of the happiness score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Standard error should be a positive floating point number'
        self.examples = [0.03411, 0.04884, 0.03328, 0.0388, 0.03553]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0]:
            return round(num, 5)
        else:
            raise Exception('Invalid standard error')

class economygdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Economy GDP per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Economy GDP per capita should be a positive floating point number'
        self.unit = 'In terms of GDP per capita'
        self.examples = [1.39651, 1.30232, 1.32548, 1.459, 1.32629]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0]:
            return round(num, 5)
        else:
            raise Exception('Invalid GDP per capita')

class family(NumericSemanticType):

    def __init__(self):
        self.description = 'Family score'
        self.valid_range = [0, 1.5]
        self.dtype = float
        self.format = 'Family score should be a floating point number within the range [0, 1.5]'
        self.examples = [1.34951, 1.40223, 1.36058, 1.33095, 1.32261]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 5)
        else:
            raise Exception('Invalid family score')

class healthlifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Health (Life Expectancy) score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Health (Life Expectancy) score should be a floating point number within the range [0, 1]'
        self.examples = [0.94143, 0.94784, 0.87464, 0.88521, 0.90563]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 5)
        else:
            raise Exception('Invalid Health (Life Expectancy) score')

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom score should be a floating point number within the range [0, 1]'
        self.examples = [0.66557, 0.62877, 0.64938, 0.66973, 0.63297]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 5)
        else:
            raise Exception('Invalid Freedom score')

class trustgovernmentcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Trust (Government Corruption) score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Trust (Government Corruption) score should be a floating point number within the range [0, 1]'
        self.examples = [0.41978, 0.14145, 0.48357, 0.36503, 0.32957]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 5)
        else:
            raise Exception('Invalid Trust (Government Corruption) score')

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Generosity score should be a floating point number within the range [0, 1]'
        self.examples = [0.29678, 0.4363, 0.34139, 0.34699, 0.45811]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 5)
        else:
            raise Exception('Invalid Generosity score')

class dystopiaresidual(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia Residual score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Residual score should be a positive floating point number'
        self.examples = [2.51738, 2.70201, 2.49204, 2.46531, 2.45176]

    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0]:
            return round(num, 5)
        else:
            raise Exception('Invalid Dystopia Residual score')


MAPPING = {'country': countryname, 'region': regionname, 'happinessrank': happinessrank, 'happinessscore': happinessscore, 'standarderror': scorestandarderror, 'economygdppercapita': economygdppercapita, 'family': family, 'healthlifeexpectancy': healthlifeexpectancy, 'freedom': freedom, 'trustgovernmentcorruption': trustgovernmentcorruption, 'generosity': generosity, 'dystopiaresidual': dystopiaresidual}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names'
        self.valid_values = 'Any valid country name as per ISO 3166'
        self.format = 'Country names are strings and they should be the official short name in English as per ISO 3166'
        self.examples = ['Denmark', 'Switzerland', 'Iceland', 'Norway', 'Finland']

    def cast(self, val):
        country_info = pycountry.countries.get(name=val)
        if country_info is None:
            raise Exception('Invalid country name')
        else:
            return country_info.name

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Region of the world'
        self.valid_values = ""Any valid world region such as 'Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa'""
        self.format = 'Region names are strings that describe a geographical region of the world'
        self.examples = ['Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa']

    def cast(self, val):
        return str(val)

class happinessrank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of countries based on happiness score'
        self.valid_range = [1, 157]
        self.dtype = int
        self.format = 'Happiness rank is a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness score for a country'
        self.valid_range = [2.905, 7.526]
        self.dtype = float
        self.format = 'Happiness score is a floating point number'
        self.examples = [7.526, 7.509, 7.501, 7.498, 7.413]

    def cast(self, val):
        return float(val)

class gdp(NumericSemanticType):

    def __init__(self):
        self.description = 'Economy GDP per capita'
        self.valid_range = [0.0, 1.82427]
        self.dtype = float
        self.format = 'GDP per capita is a floating point number'
        self.examples = [1.44178, 1.52733, 1.42666, 1.57744, 1.40598]

    def cast(self, val):
        return float(val)


MAPPING = {'country': countryname, 'region': region, 'happinessrank': happinessrank, 'happinessscore': hapinessscore, 'economygdppercapita': gdp}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name according to ISO 3166'
        self.format = 'Country Name should be capitalized and in English'
        self.examples = ['Norway', 'Sweden', 'Luxembourg', 'Iceland', 'Switzerland']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val))
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Ranking should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class happinessscore(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [7.53700017929077, 7.52199983596802, 7.50400018692017, 7.49399995803833, 7.4689998626709]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid happiness score')
        return num

class happinessscore(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [7.53700017929077, 7.52199983596802, 7.50400018692017, 7.49399995803833, 7.4689998626709]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid happiness score')
        return num

class happinessscore(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [7.53700017929077, 7.52199983596802, 7.50400018692017, 7.49399995803833, 7.4689998626709]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid happiness score')
        return num

class gdp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'GDP per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per capita should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [1.61646318435669, 1.48238301277161, 1.480633020401, 1.56497955322266, 1.44357192516327]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid GDP per capita')
        return num

class family(NumericSemanticType):

    def __init__(self):
        self.description = 'Family score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Family score should be a non-negative floating point number'
        self.examples = [1.53352355957031, 1.55112159252167, 1.6105740070343, 1.51691174507141, 1.5402467250824]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid family score')
        return num

class health(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Health (Life Expectancy) score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Health score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [0.796666502952576, 0.792565524578094, 0.833552122116089, 0.858131289482117, 0.80915766954422]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid health score')
        return num

class freedom(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Freedom score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Freedom score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [0.635422587394714, 0.626006722450256, 0.627162635326385, 0.620070576667786, 0.617950856685638]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid freedom score')
        return num

class generosity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Generosity score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [0.36201223731041, 0.355280488729477, 0.475540220737457, 0.290549278259277, 0.24548277258873]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid generosity score')
        return num

class trustgovernmentcorruption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Trust (Government Corruption) score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trust score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [0.315963834524155, 0.40077006816864, 0.153526559472084, 0.367007285356522, 0.38261154294014]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid trust score')
        return num

class dystopiaresidual(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dystopia Residual score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Residual score should be a non-negative floating point number'
        self.unit = 'In points'
        self.examples = [2.27702665328979, 2.31370735168457, 2.32271528244019, 2.2767162322998, 2.4301815032959]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid Dystopia Residual score')
        return num


MAPPING = {'country': countryname, 'happinessrank': rank, 'happinessscore': happinessscore, 'whiskerhigh': happinessscore, 'whiskerlow': happinessscore, 'economygdppercapita': gdp, 'family': family, 'healthlifeexpectancy': health, 'freedom': freedom, 'generosity': generosity, 'trustgovernmentcorruption': trustgovernmentcorruption, 'dystopiaresidual': dystopiaresidual}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a row index in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer starting from 0 and monotonically increasing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a row index in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer starting from 0 and monotonically increasing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should match a country in the ISO 3166 standard'
        self.format = 'The first letter of each word is capitalized'
        self.examples = ['Finland', 'Norway', 'Denmark', 'Iceland', 'Switzerland']

    def cast(self, val):
        val = val.title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of happiness'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [7.632, 7.594, 7.555, 7.495, 7.487]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class gdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Gross Domestic Product per Capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.unit = 'In USD'
        self.examples = [1.305, 1.456, 1.351, 1.343, 1.42]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Level of social support'
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [1.592, 1.582, 1.59, 1.644, 1.549]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class healthylifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Healthy life expectancy at birth'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.874, 0.861, 0.868, 0.914, 0.927]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class freedomtomakelifechoices(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom to make life choices'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.681, 0.686, 0.683, 0.677, 0.66]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.202, 0.286, 0.284, 0.353, 0.256]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class perceptionsofcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Perceptions of corruption score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.393, 0.34, 0.408, 0.138, 0.357]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 3)


MAPPING = {'unnamed0': index, 'overallrank': index, 'countryorregion': countryname, 'score': happinessscore, 'gdppercapita': gdppercapita, 'socialsupport': socialsupport, 'healthylifeexpectancy': healthylifeexpectancy, 'freedomtomakelifechoices': freedomtomakelifechoices, 'generosity': generosity, 'perceptionsofcorruption': perceptionsofcorruption}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Country names should be capitalized'
        self.examples = ['Finland', 'Canada', 'Belgium', 'Norway', 'Iceland']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val).title())
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country name')

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score of a Country'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return score
        else:
            raise Exception('Invalid happiness score')

class gdp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'GDP per Capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per Capita should be a floating point number'
        self.unit = 'In International Dollar'
        self.examples = [0.0, 5000.0, 10000.0, 50000.0, 100000.0]

    def cast(self, val):
        return float(val)

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Social Support'
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = 'Social Support should be a floating point number between 0 and 2'
        self.examples = [0.0, 0.5, 1.0, 1.5, 2.0]

    def cast(self, val):
        support = float(val)
        if 0 <= support <= 2:
            return support
        else:
            raise Exception('Invalid social support')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Healthy Life Expectancy'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy Life Expectancy should be a floating point number'
        self.unit = 'In Years'
        self.examples = [0.0, 30.0, 60.0, 80.0, 100.0]

    def cast(self, val):
        return float(val)

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom to make Life Choices'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom to make Life Choices should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        freedom = float(val)
        if 0 <= freedom <= 1:
            return freedom
        else:
            raise Exception('Invalid freedom to make life choices')

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Generosity should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        generosity = float(val)
        if 0 <= generosity <= 1:
            return generosity
        else:
            raise Exception('Invalid generosity')

class corruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Perceptions of Corruption'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Perceptions of Corruption should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def cast(self, val):
        corruption = float(val)
        if 0 <= corruption <= 1:
            return corruption
        else:
            raise Exception('Invalid perceptions of corruption')


MAPPING = {'countryorregion': countryname, 'score': happinessscore, 'gdppercapita': gdp, 'socialsupport': socialsupport, 'healthylifeexpectancy': lifeexpectancy, 'freedomtomakelifechoices': freedom, 'generosity': generosity, 'perceptionsofcorruption': corruption}"
"class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Serial Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serial number should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country name should be a string and a valid country name'
        self.format = 'Country name should be properly capitalized'
        self.examples = ['Finland', 'Denmark', 'Switzerland', 'Iceland', 'Norway']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val.title()
        else:
            raise Exception('Invalid country name')

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Regional Indicator'
        self.valid_values = 'Regional indicator should be a string and one of the predefined regions'
        self.format = 'Regional indicator should be properly capitalized'
        self.examples = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']

    def cast(self, val):
        return str(val).title()

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class hapinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class dystopiaresidual(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia Residual'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Residual should be a non-negative floating point number'
        self.examples = [2.762835026, 2.432740688, 2.35026741, 2.460688114, 2.168266296]

    def cast(self, val):
        num = float(val)
        return round(num, 9)


MAPPING = {'unnamed0': serialnumber, 'countryname': country, 'regionalindicator': region, 'ladderscore': hapinessscore, 'standarderrorofladderscore': hapinessscore, 'upperwhisker': hapinessscore, 'lowerwhisker': hapinessscore, 'loggedgdppercapita': hapinessscore, 'socialsupport': hapinessscore, 'healthylifeexpectancy': hapinessscore, 'freedomtomakelifechoices': hapinessscore, 'generosity': hapinessscore, 'perceptionsofcorruption': hapinessscore, 'ladderscoreindystopia': hapinessscore, 'explainedbyloggdppercapita': hapinessscore, 'explainedbysocialsupport': hapinessscore, 'explainedbyhealthylifeexpectancy': hapinessscore, 'explainedbyfreedomtomakelifechoices': hapinessscore, 'explainedbygenerosity': hapinessscore, 'explainedbyperceptionsofcorruption': hapinessscore, 'dystopiaresidual': dystopiaresidual}"
"class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Rank of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Rank should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid rank')
        return num

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'The name of the country should be capitalized'
        self.examples = ['Finland', 'Denmark', 'Switzerland', 'Iceland', 'Netherlands']

    def cast(self, val):
        name = str(val).title()
        if pycountry.countries.get(name=name) is None:
            raise Exception('Invalid country name')
        return name

class regionalindicator(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Regional Indicator of a country'
        self.valid_values = 'Regional Indicator should be a string that is a valid region'
        self.format = 'The name of the region should be capitalized'
        self.examples = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']

    def cast(self, val):
        return str(val).title()

class ladderscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Ladder Score of a country'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Ladder Score should be a floating point number between 0 and 10'
        self.examples = [7.842, 7.62, 7.571, 7.554, 7.464]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid ladder score')
        return num

class standarderror(NumericSemanticType):

    def __init__(self):
        self.description = 'Standard Error of a value'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Standard Error should be a positive floating point number'
        self.examples = [0.032, 0.035, 0.036, 0.059, 0.027]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid standard error')
        return num

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker of a box plot'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Whisker should be a positive floating point number'
        self.examples = [7.904, 7.687, 7.643, 7.67, 7.518]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid whisker')
        return num

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker of a box plot'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Whisker should be a positive floating point number'
        self.examples = [7.904, 7.687, 7.643, 7.67, 7.518]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid whisker')
        return num

class gdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'GDP per capita of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per capita should be a positive floating point number'
        self.unit = 'In international dollars (Int$)'
        self.examples = [10.775, 10.933, 11.117, 10.878, 10.932]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid GDP per capita')
        return num

class gdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'GDP per capita of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per capita should be a positive floating point number'
        self.unit = 'In international dollars (Int$)'
        self.examples = [10.775, 10.933, 11.117, 10.878, 10.932]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid GDP per capita')
        return num

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Social Support Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Social Support Index should be a floating point number between 0 and 1'
        self.examples = [0.954, 0.954, 0.942, 0.983, 0.942]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid social support index')
        return num

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Social Support Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Social Support Index should be a floating point number between 0 and 1'
        self.examples = [0.954, 0.954, 0.942, 0.983, 0.942]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid social support index')
        return num

class healthylifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Healthy Life Expectancy of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy Life Expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [72.0, 72.7, 74.4, 73.0, 72.4]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid healthy life expectancy')
        return num

class healthylifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Healthy Life Expectancy of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy Life Expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [72.0, 72.7, 74.4, 73.0, 72.4]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid healthy life expectancy')
        return num

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom Index should be a floating point number between 0 and 1'
        self.examples = [0.949, 0.946, 0.919, 0.955, 0.913]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid freedom index')
        return num

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom Index should be a floating point number between 0 and 1'
        self.examples = [0.949, 0.946, 0.919, 0.955, 0.913]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid freedom index')
        return num

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity Index of a country'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Generosity Index should be a floating point number between -1 and 1'
        self.examples = [-0.098, 0.03, 0.025, 0.16, 0.175]

    def cast(self, val):
        num = float(val)
        if num < -1 or num > 1:
            raise Exception('Invalid generosity index')
        return num

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity Index of a country'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Generosity Index should be a floating point number between -1 and 1'
        self.examples = [-0.098, 0.03, 0.025, 0.16, 0.175]

    def cast(self, val):
        num = float(val)
        if num < -1 or num > 1:
            raise Exception('Invalid generosity index')
        return num

class corruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Corruption Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Corruption Index should be a floating point number between 0 and 1'
        self.examples = [0.186, 0.179, 0.292, 0.673, 0.338]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid corruption index')
        return num

class corruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Corruption Index of a country'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Corruption Index should be a floating point number between 0 and 1'
        self.examples = [0.186, 0.179, 0.292, 0.673, 0.338]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid corruption index')
        return num

class dystopia(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia Index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Index should be a positive floating point number'
        self.examples = [3.253, 2.868, 2.839, 2.967, 2.798]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid dystopia index')
        return num

class dystopia(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia Index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Index should be a positive floating point number'
        self.examples = [3.253, 2.868, 2.839, 2.967, 2.798]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid dystopia index')
        return num


MAPPING = {'unnamed0': rank, 'countryname': countryname, 'regionalindicator': regionalindicator, 'ladderscore': ladderscore, 'standarderrorofladderscore': standarderror, 'upperwhisker': whisker, 'lowerwhisker': whisker, 'loggedgdppercapita': gdppercapita, 'explainedbyloggdppercapita': gdppercapita, 'socialsupport': socialsupport, 'explainedbysocialsupport': socialsupport, 'healthylifeexpectancy': healthylifeexpectancy, 'explainedbyhealthylifeexpectancy': healthylifeexpectancy, 'freedomtomakelifechoices': freedom, 'explainedbyfreedomtomakelifechoices': freedom, 'generosity': generosity, 'explainedbygenerosity': generosity, 'perceptionsofcorruption': corruption, 'explainedbyperceptionsofcorruption': corruption, 'ladderscoreindystopia': dystopia, 'dystopiaresidual': dystopia}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that corresponds to a valid country name'
        self.format = 'Country names should be capitalized and in English'
        self.examples = ['Finland', 'Denmark', 'Iceland', 'Switzerland', 'Netherlands']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Index Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness Index Score should be a floating point number with three decimal places'
        self.examples = [7.821, 7.636, 7.557, 7.512, 7.415]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker value for Happiness Index Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Whisker should be a floating point number with three decimal places'
        self.examples = [7.886, 7.71, 7.651, 7.586, 7.471]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker value for Happiness Index Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Whisker should be a floating point number with three decimal places'
        self.examples = [7.886, 7.71, 7.651, 7.586, 7.471]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

class explainedby(NumericSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = 'Explained by value should be a floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def cast(self, val):
        num = float(str(val).replace(',', '.'))
        return round(num, 3)


MAPPING = {'country': countryname, 'happinessscore': happinessindex, 'whiskerhigh': whisker, 'whiskerlow': whisker, 'explainedbygdppercapita': explainedby, 'explainedbysocialsupport': explainedby, 'explainedbyhealthylifeexpectancy': explainedby, 'explainedbyfreedomtomakelifechoices': explainedby, 'explainedbygenerosity': explainedby, 'explainedbyperceptionsofcorruption': explainedby}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric representation used to track and compare the performance of certain entities'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer and non-negative'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric representation used to track and compare the performance of certain entities'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer and non-negative'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric representation used to track and compare the performance of certain entities'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer and non-negative'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric representation used to track and compare the performance of certain entities'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer and non-negative'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class statecode(NumericSemanticType):

    def __init__(self):
        self.description = 'A state code is a numeric representation used to identify a state in the US'
        self.valid_range = [1, 51]
        self.dtype = int
        self.format = 'State code should be an integer value between 1 and 51, inclusive'
        self.examples = [4, 6, 12, 36, 51]

    def cast(self, val):
        return int(val)

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A physical location or place'
        self.valid_values = 'Address should be a string that represents a physical location'
        self.format = 'Address should be capitalized properly'
        self.examples = ['1645 E Roosevelt St-Central Phoenix Stn', '2956-A Treat Boulevard', '5551 Bethel Island Rd', '1237 S. Beverly, Tucson', 'Unit 759 El Portal Shopping Center, San Pablo']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The name of a state in the United States'
        self.valid_values = 'State name should be a string that represents a state in the United States'
        self.format = 'State name should be capitalized properly'
        self.examples = ['California', 'Pennsylvania', 'Arizona', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The name of a state in the United States'
        self.valid_values = 'State name should be a string that represents a state in the United States'
        self.format = 'State name should be capitalized properly'
        self.examples = ['California', 'Pennsylvania', 'Arizona', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The name of a state in the United States'
        self.valid_values = 'State name should be a string that represents a state in the United States'
        self.format = 'State name should be capitalized properly'
        self.examples = ['California', 'Pennsylvania', 'Arizona', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class datelocal(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The local date'
        self.valid_values = 'Date in the format yyyy-mm-dd'
        self.format = 'Date in the format yyyy-mm-dd'
        self.examples = ['2000-08-15', '2000-08-07', '2000-08-09', '2000-08-16', '2000-06-14']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class pollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant in the air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'Parts per million (ppm) for gases and μg/m3 for particulate matter'
        self.examples = [0.254, 0.452, 0.725, 7.508333, 1.145833]

    def cast(self, val):
        return round(float(val), 6)

class pollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant in the air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'Parts per million (ppm) for gases and μg/m3 for particulate matter'
        self.examples = [0.254, 0.452, 0.725, 7.508333, 1.145833]

    def cast(self, val):
        return round(float(val), 6)

class pollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant in the air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'Parts per million (ppm) for gases and μg/m3 for particulate matter'
        self.examples = [0.254, 0.452, 0.725, 7.508333, 1.145833]

    def cast(self, val):
        return round(float(val), 6)


MAPPING = {'unnamed01': index, 'unnamed0': index, 'countycode': index, 'sitenum': index, 'statecode': statecode, 'address': address, 'state': state, 'county': state, 'city': state, 'datelocal': datelocal, 'counits': pollutantconcentration, 'comean': pollutantconcentration, 'coaqi': pollutantconcentration}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An index or identifier that helps in indexing or identifying data rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index/Identifier should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

class stateyearcombo(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Combination of the year and the US state'
        self.valid_values = 'The value should be in the format YYYY_STATE'
        self.format = 'The year should be a 4-digit number and the state should be the full name of the state, separated by an underscore'
        self.examples = ['1992_ALABAMA', '1992_ALASKA', '1992_ARIZONA', '1992_ARKANSAS', '1992_CALIFORNIA']

    def cast(self, val):
        match_obj = re.match('\\d{4}_[A-Z]+', val)
        if match_obj:
            return match_obj.group()
        else:
            return float('nan')

class usstate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'The value should be the full name of the US state'
        self.format = 'The state name should be all capital letters'
        self.examples = ['ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA']

    def cast(self, val):
        if val in [state.name.upper() for state in pycountry.subdivisions.get(country_code='US')]:
            return val
        else:
            return float('nan')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer value'
        self.examples = [1992, 1993, 1994, 1995, 1996]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

class studentsenrolled(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of students enrolled'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of students should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class studentsenrolled(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of students enrolled'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of students should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class studentsenrolled(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of students enrolled'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of students should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class studentsenrolled(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of students enrolled'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of students should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [1.0, 100.0, 1000.0, 10000.0, 100000.0]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')


MAPPING = {'unnamed0': indexidentifier, 'primarykey': stateyearcombo, 'state': usstate, 'year': year, 'enroll': studentsenrolled, 'gradespkg': studentsenrolled, 'gradeskgg': studentsenrolled, 'gradesallg': studentsenrolled, 'totalrevenue': currency, 'federalrevenue': currency, 'staterevenue': currency, 'localrevenue': currency, 'totalexpenditure': currency, 'instructionexpenditure': currency, 'supportservicesexpenditure': currency, 'otherexpenditure': currency, 'capitaloutlayexpenditure': currency}"
"class primarykey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Primary key combination of year and state'
        self.valid_values = 'A valid primary key should be a combination of year and state separated by an underscore'
        self.format = 'The format should be YEAR_STATE'
        self.examples = ['1992_ALABAMA', '1992_MISSOURI', '1992_ARKANSAS', '1992_CALIFORNIA', '1992_COLORADO']

    def cast(self, val):
        return str(val).upper()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'US state names'
        self.valid_values = 'The valid values are the 50 US state names and District of Columbia'
        self.format = 'The state name should be in all uppercase'
        self.examples = ['ALABAMA', 'ALASKA', 'MISSISSIPPI', 'ARIZONA', 'ARKANSAS']

    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1986, 2019]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1992, 1993, 1994, 1995, 1996]

    def cast(self, val):
        return int(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.valid_range = [43866.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Revenue in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class expenditure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Expenditure should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class expenditure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Expenditure should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class expenditure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Expenditure should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class expenditure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Expenditure should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class expenditure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Expenditure should be a float'
        self.unit = 'In USD'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class raceenrollment(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'primarykey': primarykey, 'state': state, 'year': year, 'enroll': enrollment, 'aaa': enrollment, 'kgaa': enrollment, 'pkaa': enrollment, 'g01g08aa': enrollment, 'g09g12aa': enrollment, 'totalrevenue': revenue, 'federalrevenue': revenue, 'staterevenue': revenue, 'localrevenue': revenue, 'totalexpenditure': expenditure, 'instructionexpenditure': expenditure, 'supportservicesexpenditure': expenditure, 'otherexpenditure': expenditure, 'capitaloutlayexpenditure': expenditure, 'kgamf': raceenrollment, 'kgamm': raceenrollment, 'kgasf': raceenrollment, 'kgasm': raceenrollment, 'kgblf': raceenrollment, 'kgblm': raceenrollment, 'kghif': raceenrollment, 'kghim': raceenrollment, 'kghpf': raceenrollment, 'kghpm': raceenrollment, 'kgtrf': raceenrollment}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that represents the common name of a country as per the pycountry library'
        self.format = 'Country names should be capitalized and spelled correctly'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class foodcomponent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.units = 'In percent'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 4)
        else:
            raise Exception('Invalid percentage')

class obesityrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Obesity rate in a country's population""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Obesity rate should be formatted as a floating point number (in percent units) with one decimal place'
        self.units = 'In percent'
        self.examples = [4.5, 22.3, 26.6, 6.8, 19.1]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 1)
        else:
            raise Exception('Invalid percentage')

class undernourishmentstatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Undernourishment status in a country's population""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Undernourishment status should be formatted as a floating point number (in percent units) with one decimal place. The '<2.5' value should be interpreted as 2.5""
        self.units = 'In percent'
        self.examples = [29.8, 6.2, 3.9, 25, float('nan')]

    def cast(self, val):
        if val == '<2.5':
            num = 2.5
        else:
            num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 1)
        else:
            raise Exception('Invalid percentage')

class covid19casestatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""COVID-19 case status (confirmed, deaths, recovered) in a country's population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 case status should be formatted as a floating point number with 13 decimal places'
        self.units = 'In percent'
        self.examples = [2.022, 0.039, 1.452, float('nan')]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 13)
        else:
            raise Exception('Invalid percentage')

class covid19casestatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""COVID-19 case status (confirmed, deaths, recovered) in a country's population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 case status should be formatted as a floating point number with 13 decimal places'
        self.units = 'In percent'
        self.examples = [2.022, 0.039, 1.452, float('nan')]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 13)
        else:
            raise Exception('Invalid percentage')

class covid19casestatus(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""COVID-19 case status (confirmed, deaths, recovered) in a country's population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 case status should be formatted as a floating point number with 13 decimal places'
        self.units = 'In percent'
        self.examples = [2.022, 0.039, 1.452, float('nan')]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 13)
        else:
            raise Exception('Invalid percentage')


MAPPING = {'country': countryname, 'alcoholicbeverages': foodcomponent, 'animalproducts': foodcomponent, 'animalfats': foodcomponent, 'aquaticproductsother': foodcomponent, 'cerealsexcludingbeer': foodcomponent, 'eggs': foodcomponent, 'fishseafood': foodcomponent, 'fruitsexcludingwine': foodcomponent, 'meat': foodcomponent, 'miscellaneous': foodcomponent, 'milkexcludingbutter': foodcomponent, 'offals': foodcomponent, 'oilcrops': foodcomponent, 'pulses': foodcomponent, 'spices': foodcomponent, 'starchyroots': foodcomponent, 'stimulants': foodcomponent, 'sugarcrops': foodcomponent, 'sugarsweeteners': foodcomponent, 'treenuts': foodcomponent, 'vegetalproducts': foodcomponent, 'vegetableoils': foodcomponent, 'vegetables': foodcomponent, 'obesity': obesityrate, 'undernourished': undernourishmentstatus, 'confirmed': covid19casestatus, 'deaths': covid19casestatus, 'recovered': covid19casestatus}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index is formatted as a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country Name can be any valid country name as defined by the ISO 3166 standard'
        self.format = ""Country Name is formatted as a string representing the country's official name""
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        return pycountry.countries.get(name=val).name

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Food Consumption'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.unit = 'In kg'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def cast(self, val):
        return round(float(val), 4)

class obesity(NumericSemanticType):

    def __init__(self):
        self.description = 'Obesity Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Obesity Percentage is formatted as a percentage (0-100) floating point number'
        self.examples = [4.5, 22.3, 26.6, 6.8, 19.1]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return round(num, 1)
        else:
            raise ValueError('Invalid obesity percentage')

class undernourished(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Undernourished Percentage'
        self.valid_values = ""Undernourished Percentage can be a percentage (0-100) or '<2.5'""
        self.format = ""Undernourished Percentage is formatted as a percentage (0-100) or '<2.5'""
        self.examples = ['29.8', '6.2', '3.9', '25', float('nan')]

    def cast(self, val):
        if val == '<2.5':
            return val
        elif val is np.nan:
            return float('nan')
        else:
            num = float(val)
            if 0 <= num <= 100:
                return str(round(num, 1))
            else:
                raise ValueError('Invalid undernourished percentage')

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 Cases is formatted as a non-negative floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return round(float(val), 10)

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 Cases is formatted as a non-negative floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return round(float(val), 10)

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 Cases is formatted as a non-negative floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return round(float(val), 10)


MAPPING = {'unnamed0': index, 'country': countryname, 'alcoholicbeverages': foodconsumption, 'animalfats': foodconsumption, 'animalproducts': foodconsumption, 'aquaticproductsother': foodconsumption, 'cerealsexcludingbeer': foodconsumption, 'eggs': foodconsumption, 'fishseafood': foodconsumption, 'fruitsexcludingwine': foodconsumption, 'meat': foodconsumption, 'milkexcludingbutter': foodconsumption, 'miscellaneous': foodconsumption, 'offals': foodconsumption, 'oilcrops': foodconsumption, 'pulses': foodconsumption, 'spices': foodconsumption, 'starchyroots': foodconsumption, 'stimulants': foodconsumption, 'sugarsweeteners': foodconsumption, 'sugarcrops': foodconsumption, 'treenuts': foodconsumption, 'vegetableoils': foodconsumption, 'vegetables': foodconsumption, 'vegetalproducts': foodconsumption, 'obesity': obesity, 'undernourished': undernourished, 'confirmed': covid19cases, 'deaths': covid19cases, 'recovered': covid19cases}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be a string that is the official name of a country'
        self.format = 'Country name should be capitalized and in English'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        val = str(val)
        country = pycountry.countries.get(name=val)
        if country is not None:
            return val
        else:
            raise Exception('Invalid country name')

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class foodconsumption(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The food supply in kilocalories per person per day of a food group'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food consumption should be formatted as a floating point number'
        self.unit = 'In kilocalories per person per day'
        self.examples: list = [1.325, 9.295, 1.267, 0.003, 20.365, 0.429, 0.632]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class obesityrate(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of adults who are obese'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Obesity rate should be formatted as a floating point number'
        self.examples: list = [4.5, 22.3, 26.6, 6.8, 19.1]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid obesity rate')
        return num

class undernourishedrate(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of people who are undernourished'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Undernourished rate should be formatted as a floating point number'
        self.examples: list = ['<2.5', '7.1', '2.7', '6.2', '16.5']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, str) and val.startswith('<'):
            val = val[1:]
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid undernourished rate')
        return num

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of confirmed COVID-19 cases per 100,000 people'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 cases should be formatted as a floating point number'
        self.examples: list = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class covid19deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of confirmed COVID-19 deaths per 100,000 people'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 deaths should be formatted as a floating point number'
        self.examples: list = [0.0061857788738183, 0.0509513742071882, 0.0065581531663548, 0.0014605497816862, 0.0071428571428571]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class covid19recoveries(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of confirmed COVID-19 recoveries per 100,000 people'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'COVID-19 recoveries should be formatted as a floating point number'
        self.examples: list = [0.12337392108508, 1.79263565891473, 0.167572198300156, 0.0568076994034807, 0.190816326530612]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)


MAPPING = {'country': countryname, 'alcoholicbeverages': foodconsumption, 'animalproducts': foodconsumption, 'animalfats': foodconsumption, 'aquaticproductsother': foodconsumption, 'cerealsexcludingbeer': foodconsumption, 'eggs': foodconsumption, 'fishseafood': foodconsumption, 'fruitsexcludingwine': foodconsumption, 'meat': foodconsumption, 'milkexcludingbutter': foodconsumption, 'miscellaneous': foodconsumption, 'offals': foodconsumption, 'oilcrops': foodconsumption, 'pulses': foodconsumption, 'spices': foodconsumption, 'starchyroots': foodconsumption, 'stimulants': foodconsumption, 'sugarcrops': foodconsumption, 'sugarsweeteners': foodconsumption, 'treenuts': foodconsumption, 'vegetalproducts': foodconsumption, 'vegetableoils': foodconsumption, 'vegetables': foodconsumption, 'obesity': obesityrate, 'undernourished': undernourishedrate, 'confirmed': covid19cases, 'deaths': covid19deaths, 'recovered': covid19recoveries}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequential Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers, starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Country Names should be valid names of countries'
        self.format = 'Country Names should be capitalized'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Antigua and Barbuda']

    def cast(self, val):
        return str(val).title()

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class foodsupply(NumericSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def cast(self, val):
        return float(val)

class obesitypercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Obesity Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Obesity Percentage should be a floating point number'
        self.examples = [4.5, 22.3, 26.6, 6.8, 19.1]

    def cast(self, val):
        return float(val)

class undernourishedpercent(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Undernourished Percentage'
        self.valid_values = ""Undernourished Percentage should be a string representing a floating point number or '<2.5'""
        self.format = 'Undernourished Percentage should be a string'
        self.examples = ['29.8', '6.2', '3.9', '25', '<2.5']

    def cast(self, val):
        if val == '<2.5':
            return 2.5
        elif val is None or pd.isnull(val):
            return float('nan')
        else:
            return float(val)

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Covid-19 cases should be a floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return float(val)

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Covid-19 cases should be a floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return float(val)

class covid19cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Covid-19 cases should be a floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'country': countryname, 'alcoholicbeverages': foodsupply, 'animalproducts': foodsupply, 'animalfats': foodsupply, 'aquaticproductsother': foodsupply, 'cerealsexcludingbeer': foodsupply, 'eggs': foodsupply, 'fishseafood': foodsupply, 'fruitsexcludingwine': foodsupply, 'meat': foodsupply, 'milkexcludingbutter': foodsupply, 'offals': foodsupply, 'oilcrops': foodsupply, 'pulses': foodsupply, 'spices': foodsupply, 'starchyroots': foodsupply, 'stimulants': foodsupply, 'sugarcrops': foodsupply, 'sugarsweeteners': foodsupply, 'treenuts': foodsupply, 'vegetalproducts': foodsupply, 'vegetableoils': foodsupply, 'vegetables': foodsupply, 'miscellaneous': foodsupply, 'obesity': obesitypercent, 'undernourished': undernourishedpercent, 'confirmed': covid19cases, 'deaths': covid19cases, 'recovered': covid19cases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index in the Dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if not math.isnan(val) and val >= 0:
            return int(val)
        else:
            raise Exception('Invalid index')

class foodcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category of Food Items'
        self.valid_values = 'Category should be a string representing a type of food'
        self.format = 'Each word in the category should be capitalized'
        self.examples = ['Alcoholic Beverages', 'Animal Fats', 'Animal Products', 'Aquatic Products, Other', 'Cereals - Excluding Beer']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'categories': foodcategory}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class abilityidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an ability in the game Dota 2'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ability ID should be an integer number'
        self.examples = [0, 5001, 5002, 5003, 5004]

    def cast(self, val):
        return int(val)

class abilityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an ability in the game Dota 2'
        self.valid_values = 'Ability name should be a string which represents a valid ability in the game Dota 2'
        self.format = 'Ability name should be in lower case with words separated by underscores'
        self.examples = ['ability_base', 'default_attack', 'attribute_bonus', 'antimage_mana_break', 'antimage_blink']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')


MAPPING = {'unnamed0': index, 'abilityid': abilityidentifier, 'abilityname': abilityname}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match IDs are positive integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class ability(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an ability'
        self.valid_range = [5002, 5654]
        self.dtype = int
        self.format = 'Ability IDs are integers between 5002 and 5654'
        self.examples: list = [5023, 5136, 5361, 5448, 5450]

    def cast(self, val):
        return int(val)

class level(NumericSemanticType):

    def __init__(self):
        self.description = 'Level of a player in a match'
        self.valid_range = [1, 25]
        self.dtype = int
        self.format = 'Levels are integers between 1 and 25'
        self.examples: list = [1, 5, 10, 15, 25]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of an event in a match'
        self.valid_range = [131, 5699]
        self.dtype = int
        self.format = 'Times are integers between 131 and 5699'
        self.examples: list = [765, 1386, 2129, 326, 916]

    def cast(self, val):
        return int(val)

class playerslot(NumericSemanticType):

    def __init__(self):
        self.description = 'Slot number for a player in a match'
        self.valid_range = [0, 132]
        self.dtype = int
        self.format = 'Player slots are integers between 0 and 132'
        self.examples: list = [0, 2, 4, 130, 132]

    def cast(self, val):
        return int(val)

class unnamed(NumericSemanticType):

    def __init__(self):
        self.description = 'Unnamed column, seems to be an index'
        self.valid_range = [0, 99999]
        self.dtype = int
        self.format = 'Values are integers between 0 and 99999'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'ability': ability, 'level': level, 'time': time, 'playerslot': playerslot, 'unnamed0': unnamed}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Match ID in DOTA-2'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class chatmessage(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Chat messages in DOTA-2'
        self.valid_values = 'Any string'
        self.format = 'Chat messages should be stored as a string'
        self.examples = ['gg', 'lol', '?', 'ggwp', 'haha']

    def cast(self, val):
        return str(val)

class slot(NumericSemanticType):

    def __init__(self):
        self.description = 'Slot number in DOTA-2'
        self.valid_range = [0, 9]
        self.dtype = int
        self.format = 'Slot number should be an integer from 0 to 9'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class chatime(NumericSemanticType):

    def __init__(self):
        self.description = 'Chat time in DOTA-2'
        self.valid_range = [-771, 6054]
        self.dtype = int
        self.format = 'Chat time should be an integer'
        self.examples = [-8, 5, 6, 9, 934]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Player name in DOTA-2'
        self.valid_values = 'Any string'
        self.format = 'Player name should be stored as a string'
        self.examples = ['ECO.Nyx', '666 Degrees桜', 'soy papá', 'chit stain', 'Ez']

    def cast(self, val):
        return str(val)


MAPPING = {'matchid': matchidentifier, 'key': chatmessage, 'slot': slot, 'time': chatime, 'unit': playername}"
"class clusteridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster ID of a server'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster ID should be formatted as an integer'
        self.examples = [111, 112, 113, 121, 122]

    def cast(self, val):
        return int(val)

class clusteridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster ID of a server'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster ID should be formatted as an integer'
        self.examples = [111, 112, 113, 121, 122]

    def cast(self, val):
        return int(val)

class serverregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region of a server'
        self.valid_values = 'Region should be a string representing a geographic region'
        self.format = 'Region should be capitalized'
        self.examples = ['STOCKHOLM', 'EUROPE', 'SINGAPORE', 'US EAST', 'US WEST']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'unnamed0': clusteridentifier, 'cluster': clusteridentifier, 'region': serverregion}"
"class heroname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Heroname is the code name of a hero character in the game Dota 2'
        self.valid_values = ""Heroname is a string that starts with 'npc_dota_hero_' followed by the character's name in lowercase with underscores instead of spaces""
        self.format = ""Heroname should be a string starting with 'npc_dota_hero_'""
        self.examples = ['npc_dota_hero_antimage', 'npc_dota_hero_axe', 'npc_dota_hero_bane', 'npc_dota_hero_bloodseeker', 'npc_dota_hero_crystal_maiden']

    def cast(self, val):
        val = str(val).lower()
        if val.startswith('npc_dota_hero_'):
            return val
        else:
            raise ValueError('Invalid Heroname')

class heroidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Heroid is a unique identifier for each hero character in the game Dota 2'
        self.valid_range = [1, 113]
        self.dtype = int
        self.format = 'Heroid should be an integer ranging from 1 to 113'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if 1 <= val <= 113:
            return val
        else:
            raise ValueError('Invalid Heroid')

class localizedheroname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'LocalizedHeroname is the human-readable name of a hero character in the game Dota 2'
        self.valid_values = ""LocalizedHeroname is a string with the character's name, where the first letter of each word is capitalized, and words are separated by spaces""
        self.format = 'LocalizedHeroname should be a string with words separated by spaces and the first letter of each word capitalized'
        self.examples = ['Anti-Mage', 'Axe', 'Bane', 'Bloodseeker', 'Crystal Maiden']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': heroname, 'heroid': heroidentifier, 'localizedname': localizedheroname}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Match ID in Dota 2'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class itemidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Item ID in Dota 2'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Item ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class itemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Item in Dota 2'
        self.valid_values = 'Item name should be a string'
        self.format = 'Item name should be lowercase, with underscores replacing spaces'
        self.examples = ['blink', 'blades_of_attack', 'broadsword', 'chainmail', 'claymore']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')


MAPPING = {'unnamed0': matchidentifier, 'itemid': itemidentifier, 'itemname': itemname}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID must be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID must be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class starttime(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp of when the Dota 2 match started'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Start time is a UNIX timestamp'
        self.examples = [1446750112, 1446753078, 1446764586, 1446765723, 1446796385]

    def cast(self, val):
        return int(val)

class duration(NumericSemanticType):

    def __init__(self):
        self.description = 'Length of a Dota 2 match in seconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Duration must be a positive integer'
        self.examples = [2375, 2582, 2716, 3085, 1887]

    def cast(self, val):
        return int(val)

class towerstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Tower status in a Dota 2 match'
        self.valid_range = [0, 2047]
        self.dtype = int
        self.format = 'Tower status is an integer between 0 and 2047'
        self.examples = [1982, 0, 256, 4, 2047]

    def cast(self, val):
        return int(val)

class towerstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Tower status in a Dota 2 match'
        self.valid_range = [0, 2047]
        self.dtype = int
        self.format = 'Tower status is an integer between 0 and 2047'
        self.examples = [1982, 0, 256, 4, 2047]

    def cast(self, val):
        return int(val)

class barracksstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Barracks status in a Dota 2 match'
        self.valid_range = [0, 63]
        self.dtype = int
        self.format = 'Barracks status is an integer between 0 and 63'
        self.examples = [63, 0, 48, 3, 63]

    def cast(self, val):
        return int(val)

class barracksstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Barracks status in a Dota 2 match'
        self.valid_range = [0, 63]
        self.dtype = int
        self.format = 'Barracks status is an integer between 0 and 63'
        self.examples = [63, 0, 48, 3, 63]

    def cast(self, val):
        return int(val)

class firstbloodtime(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of first blood in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'First blood time must be a positive integer'
        self.examples = [1, 221, 190, 40, 58]

    def cast(self, val):
        return int(val)

class gamemode(NumericSemanticType):

    def __init__(self):
        self.description = 'Game mode in a Dota 2 match'
        self.valid_range = [0, 22]
        self.dtype = int
        self.format = 'Game mode is an integer between 0 and 22'
        self.examples = [22, 22, 22, 22, 22]

    def cast(self, val):
        return int(val)

class radiantwin(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['True', 'False']

    def cast(self, val):
        return str(val)

class votes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of votes in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of votes must be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)

class votes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of votes in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of votes must be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster must be a positive integer'
        self.examples = [155, 154, 132, 191, 156]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': matchidentifier, 'matchid': matchidentifier, 'starttime': starttime, 'duration': duration, 'towerstatusradiant': towerstatus, 'towerstatusdire': towerstatus, 'barracksstatusdire': barracksstatus, 'barracksstatusradiant': barracksstatus, 'firstbloodtime': firstbloodtime, 'gamemode': gamemode, 'radiantwin': radiantwin, 'negativevotes': votes, 'positivevotes': votes, 'cluster': cluster}"
"class matchindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the match in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be a non-negative integer'
        self.examples = [1636204962, 1636204962, 1636322679, 1636322679, 1637385965]

    def cast(self, val):
        return int(val)

class accountidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each account/player'
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = int
        self.format = 'Account ID can be a negative or non-negative integer'
        self.examples = [34549, 0, 0, -97530201, 0]

    def cast(self, val):
        return int(val)

class matchstarttime(NumericSemanticType):

    def __init__(self):
        self.description = 'Start time of the match represented in UNIX timestamp'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Start time should be a non-negative integer'
        self.examples = [1437014585, 1437014585, 1437019968, 1437019968, 1437052551]

    def cast(self, val):
        return int(val)

class parserversion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of the parser used'
        self.valid_values = 'Parser version should be an integer'
        self.format = 'Parser version should be represented as an integer'
        self.examples = [12, 12, 12, 12, 12]

    def cast(self, val):
        return int(val)

class matchresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class team(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': matchindex, 'matchid': matchidentifier, 'accountid0': accountidentifier, 'starttime': matchstarttime, 'parserversion': parserversion, 'win': matchresult, 'rad': team}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a match in the Dota 2 game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match IDs are integer values starting from 0'
        self.examples = [0, 2123, 3201, 4271, 1050]

    def cast(self, val):
        return int(val)

class objectiveaction(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of objective action in Dota 2 game'
        self.valid_values = ""Valid objective actions are 'CHAT_MESSAGE_TOWER_KILL', 'CHAT_MESSAGE_BARRACKS_KILL', 'CHAT_MESSAGE_ROSHAN_KILL', 'CHAT_MESSAGE_AEGIS', 'CHAT_MESSAGE_FIRSTBLOOD'""
        self.format = 'Objective actions are stored as strings'
        self.examples = ['CHAT_MESSAGE_FIRSTBLOOD', 'CHAT_MESSAGE_TOWER_KILL', 'CHAT_MESSAGE_ROSHAN_KILL', 'CHAT_MESSAGE_AEGIS', 'CHAT_MESSAGE_BARRACKS_KILL']

    def cast(self, val):
        return str(val)

class gametime(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp in seconds of an event in a Dota 2 match'
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = int
        self.format = 'Time is stored as an integer value representing seconds'
        self.examples = [1, 894, 925, 1258, 2340]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'subtype': objectiveaction, 'time': gametime}"
"class patchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The id of a patch, where lower values correspond to older patches'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patch id should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class patchdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when a patch was released'
        self.valid_values = 'Dates in the ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)'
        self.format = 'Dates should be stored as strings in the ISO 8601 format'
        self.examples = ['2010-12-24T00:00:00Z', '2011-01-21T00:00:00Z', '2011-04-27T00:00:00Z', '2011-12-24T00:00:00Z', '2012-03-10T00:00:00Z']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%dT%H:%M:%SZ')
            return val
        except ValueError:
            raise Exception('Invalid date format')

class patchname(NumericSemanticType):

    def __init__(self):
        self.description = 'The name of a patch, represented as a decimal number'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Patch name should be a decimal number with at most two decimal places'
        self.examples = [6.7, 6.71, 6.72, 6.73, 6.74]

    def cast(self, val):
        num = float(val)
        if math.floor(num) != num and len(str(num).split('.')[1]) > 2:
            raise Exception('Invalid patch name')
        return num


MAPPING = {'unnamed0': patchidentifier, 'patchdate': patchdate, 'name': patchname}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID for a match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class dotaaccountidentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""Unique ID for a DOTA player's account""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Account ID should be an integer'
        self.examples = [236579, -343, -1217, -1227, -1284]

    def cast(self, val):
        return int(val)

class totalwins(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of wins by a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total Wins should be a non-negative integer'
        self.examples = [14, 1, 1, 1, 0]

    def cast(self, val):
        return int(val)

class totalmatches(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of matches played by a player'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Total Matches should be a positive integer'
        self.examples = [24, 1, 1, 1, 1]

    def cast(self, val):
        return int(val)

class trueskillmu(NumericSemanticType):

    def __init__(self):
        self.description = 'The mean skill level of a player as calculated by the TrueSkill algorithm'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'TrueSkill Mu should be a floating point number'
        self.examples = [27.86803544887669, 26.54416264494717, 26.521102844769825, 27.248024958648585, 22.931015779479623]

    def cast(self, val):
        return float(val)

class trueskillsigma(NumericSemanticType):

    def __init__(self):
        self.description = ""The standard deviation of a player's skill level as calculated by the TrueSkill algorithm""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'TrueSkill Sigma should be a floating point number'
        self.examples = [5.212360755154124, 8.06547547571326, 8.114989027066821, 8.092216692198111, 8.092224309040315]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': matchidentifier, 'accountid': dotaaccountidentifier, 'totalwins': totalwins, 'totalmatches': totalmatches, 'trueskillmu': trueskillmu, 'trueskillsigma': trueskillsigma}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class gametime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'In-game time in Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'In seconds'
        self.format = 'Time should be an integer representing the number of seconds'
        self.examples = [0, 60, 120, 180, 240]

    def cast(self, val):
        return int(val)

class gold(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount of gold in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'In game gold units'
        self.format = 'Gold should be an integer representing the amount of gold'
        self.examples = [0, 409, 546, 683, 956]

    def cast(self, val):
        return int(val)

class lasthits(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of last hits in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Last hits should be an integer'
        self.examples = [0, 0, 0, 1, 1]

    def cast(self, val):
        return int(val)

class experience(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Amount of experience in a Dota 2 match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.unit = 'In game experience points'
        self.format = 'Experience should be an integer representing the amount of experience points'
        self.examples = [0, 63, 283, 314, 485]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'times': gametime, 'goldt0': gold, 'lht0': lasthits, 'xpt0': experience}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID is a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class accountidentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""The unique identifier for a player's account""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Account ID is a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class heroidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a hero'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Hero ID is a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class gold(NumericSemanticType):

    def __init__(self):
        self.description = 'The amount of gold a player has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Gold is represented as a positive integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val)

class kills(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of kills a player has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Kills is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of times a player has died'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deaths is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class assists(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of assists a player has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Assists is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class denies(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of denies a player has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Denies is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class lasthits(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of last hits a player has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Last hits is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'accountid': accountidentifier, 'heroid': heroidentifier, 'gold': gold, 'kills': kills, 'deaths': deaths, 'assists': assists, 'denies': denies, 'lasthits': lasthits}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Dota 2 Match ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class itemidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Dota 2 Item ID'
        self.valid_range = [1, 254]
        self.dtype = int
        self.format = 'Item ID should be an integer'
        self.examples = [44, 29, 43, 84, 46]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of item purchase in the game'
        self.valid_range = [-88, 5284]
        self.dtype = int
        self.format = 'Time should be an integer'
        self.examples = [-81, -63, 6, 182, 197]

    def cast(self, val):
        return int(val)

class playerslot(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's slot ID in the game""
        self.valid_range = [0, 132]
        self.dtype = int
        self.format = 'Player slot should be an integer'
        self.examples = [0, 2, 4, 130, 132]

    def cast(self, val):
        return int(val)

class unnamed0(NumericSemanticType):

    def __init__(self):
        self.description = 'Unnamed column, likely an index or ID'
        self.valid_range = [0, 99999]
        self.dtype = int
        self.format = 'Values should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'itemid': itemidentifier, 'time': time, 'playerslot': playerslot, 'unnamed0': unnamed0}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each match in the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a point in time in the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Time should be a non-negative integer'
        self.examples = [220, 429, 900, 1284, 1614]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a point in time in the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Time should be a non-negative integer'
        self.examples = [220, 429, 900, 1284, 1614]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a point in time in the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Time should be a non-negative integer'
        self.examples = [220, 429, 900, 1284, 1614]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths in a particular match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deaths should be a non-negative integer'
        self.examples = [3, 4, 5, 6, 7]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')


MAPPING = {'matchid': matchidentifier, 'start': timestamp, 'end': timestamp, 'lastdeath': timestamp, 'deaths': deaths}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique numeric identifier for a game match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match IDs should be represented as integers'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class playerslot(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric identifier for a player slot in a game match'
        self.valid_range = [0, 132]
        self.dtype = int
        self.format = 'Player slots should be represented as integers'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class buybacks(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class damage(NumericSemanticType):

    def __init__(self):
        self.description = 'Amount of damage dealt by a player in a game match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Damage should be represented as integers'
        self.examples: list[int] = [105, 566, 0, 0, 444]

    def cast(self, val):
        return int(val)

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a player died in a game match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Deaths should be represented as integers'
        self.examples: list[int] = [0, 1, 0, 0, 0]

    def cast(self, val):
        return int(val)

class golddelta(NumericSemanticType):

    def __init__(self):
        self.description = 'Gold difference for a player in a game match'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Gold delta should be represented as integers'
        self.examples: list[int] = [173, 0, 0, 123, 336]

    def cast(self, val):
        return int(val)

class xpend(NumericSemanticType):

    def __init__(self):
        self.description = 'Experience points a player spent in a game match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Experience points spent should be represented as integers'
        self.examples: list[int] = [536, 1583, 391, 1775, 1267]

    def cast(self, val):
        return int(val)

class xpstart(NumericSemanticType):

    def __init__(self):
        self.description = 'Experience points a player started with in a game match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Experience points at start should be represented as integers'
        self.examples: list[int] = [314, 1418, 391, 1419, 983]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'playerslot': playerslot, 'buybacks': buybacks, 'damage': damage, 'deaths': deaths, 'golddelta': golddelta, 'xpend': xpend, 'xpstart': xpstart}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match identifiers should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match identifiers should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class matchoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': matchidentifier, 'matchid': matchidentifier, 'radiantwin': matchoutcome}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each match'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Match id should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class accountidentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""Unique identifier for each player's account""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Account id should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class heroidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each hero in the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Hero id should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class playerslot(NumericSemanticType):

    def __init__(self):
        self.description = ""Identifier for each player's slot in the match""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player slot should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'matchid': matchidentifier, 'accountid': accountidentifier, 'heroid': heroidentifier, 'playerslot': playerslot}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return abs(int(val))

class statecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'State Code'
        self.valid_values = 'State codes follow the ISO 3166-2:US standard'
        self.format = 'State codes should be represented as two-letter abbreviations'
        self.examples = ['PA', 'TX', 'CA', 'IL', 'OH']

    def cast(self, val):
        return str(val).upper()

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City Name'
        self.valid_values = 'City names are usually strings, but may contain special characters'
        self.format = 'City names should start with a capital letter, and the remaining characters should be in lowercase'
        self.examples = ['Franklin city', 'Marion city', 'Madison city', 'Salem city', 'Auburn city']

    def cast(self, val):
        return str(val).title()

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with at most one decimal place'
        self.examples = [0, 25.4, 50.0, 75.6, 100]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with at most one decimal place'
        self.examples = [0, 25.4, 50.0, 75.6, 100]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with at most one decimal place'
        self.examples = [0, 25.4, 50.0, 75.6, 100]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with at most one decimal place'
        self.examples = [0, 25.4, 50.0, 75.6, 100]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with at most one decimal place'
        self.examples = [0, 25.4, 50.0, 75.6, 100]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)


MAPPING = {'unnamed0': index, 'geographicarea': statecode, 'city': cityname, 'sharewhite': percent, 'shareblack': percent, 'sharenativeamerican': percent, 'shareasian': percent, 'sharehispanic': percent}"
"class restaurantname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Restaurant'
        self.valid_values = 'Restaurant name should be a string'
        self.format = 'The restaurant name should be capitalized'
        self.examples = ['Evergreens', 'Clean Juice', 'Slapfish', 'Clean Eatz', 'Pokeworks']

    def cast(self, val):
        return str(val).title()

class citystate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City and State'
        self.valid_values = ""City and State should be a string of the form 'City, State'""
        self.format = 'The city and state should be capitalized'
        self.examples = ['Seattle, Wash.', 'Charlotte, N.C.', 'Huntington Beach, Calif.', 'Wilmington, N.C.', 'Irvine, Calif.']

    def cast(self, val):
        return str(val).title()

class salesamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales amount in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales amount should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples: list[float] = [24, 44, 21, 25, 49]

    def cast(self, val):
        num = float(val)
        return num

class unitcount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of units'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Units should be a non-negative integer'
        self.examples: list[int] = [26, 105, 21, 46, 50]

    def cast(self, val):
        num = int(val)
        return num

class unitcount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of units'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Units should be a non-negative integer'
        self.examples: list[int] = [26, 105, 21, 46, 50]

    def cast(self, val):
        num = int(val)
        return num

class franchising(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val == 'Yes':
            return True
        else:
            return False

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number (in percentage units)'
        self.unit = 'In percentage'
        self.examples: list[float] = [116.7, 94.4, 90.9, 58.6, 56.3]

    def cast(self, val):
        percent = float(val.strip('%'))
        return percent

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number (in percentage units)'
        self.unit = 'In percentage'
        self.examples: list[float] = [116.7, 94.4, 90.9, 58.6, 56.3]

    def cast(self, val):
        percent = float(val.strip('%'))
        return percent


MAPPING = {'restaurant': restaurantname, 'location': citystate, 'sales': salesamount, 'units': unitcount, 'unitvolume': unitcount, 'franchising': franchising, 'yoysales': percent, 'yoyunits': percent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class restaurantname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Restaurant'
        self.valid_values = 'Name should be a string that is the name of the restaurant'
        self.format = 'The restaurant name should be a string'
        self.examples = [""Carmine's (Times Square)"", 'The Boathouse Orlando', 'Old Ebbitt Grill', 'LAVO Italian Restaurant & Nightclub', 'Bryant Park Grill & Cafe']

    def cast(self, val):
        return str(val)

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The revenue in USD of a restaurant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Revenue should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples: list[str] = [39080335.0, 35218364.0, 29104017.0, 26916180.0, 26900000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class averagecheck(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average check in USD of a restaurant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Average check should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples: list[str] = [40, 43, 33, 90, 62]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City where the restaurant is located'
        self.valid_values = 'City name should be a string'
        self.format = 'The city name should be a string'
        self.examples = ['New York', 'Orlando ', 'Washington', 'New York', 'New York']

    def cast(self, val):
        return str(val).strip()

class statename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State where the restaurant is located'
        self.valid_values = 'State name should be a string'
        self.format = 'The state name should be a string'
        self.examples = ['N.Y.', 'Fla.', 'D.C.', 'N.Y.', 'N.Y.']

    def cast(self, val):
        return str(val).strip()

class mealsserved(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of meals served'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of meals served should be a positive floating point number'
        self.examples: list[str] = [469803.0, 820819.0, 892830.0, 198500.0, 403000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'rank': index, 'restaurant': restaurantname, 'sales': revenue, 'averagecheck': averagecheck, 'city': cityname, 'state': statename, 'mealsserved': mealsserved}"
"class restaurantname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Restaurant'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be a string with all words capitalized'
        self.examples = [""McDonald's"", 'Starbucks', 'Chick-fil-A', 'Taco Bell', 'Burger King']

    def cast(self, val):
        return str(val).title()

class revenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales revenue of the restaurant'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Revenue should be formatted as an integer in USD units'
        self.unit = 'In USD'
        self.examples = [40412, 21380, 11320, 11293, 10204]

    def cast(self, val):
        return int(val)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Year over year change in sales or units as a percentage'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number'
        self.examples = [4.9, 8.6, 13.0, 9.0, 2.7]

    def cast(self, val):
        return float(val.strip('%'))

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Year over year change in sales or units as a percentage'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number'
        self.examples = [4.9, 8.6, 13.0, 9.0, 2.7]

    def cast(self, val):
        return float(val.strip('%'))

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = ""City name where the restaurant's headquarters is located""
        self.valid_values = 'City name should be a string'
        self.format = 'City name should be a string with all words capitalized'
        self.examples = ['Dallas', 'Irving', 'Houston', 'Austin', 'Denver']

    def cast(self, val):
        return str(val).title()

class segmentcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Segment and category of the restaurant'
        self.valid_values = 'Segment and category should be a string'
        self.format = 'Segment and category should be a string with all words capitalized'
        self.examples = ['Varied Menu', 'Mexican', 'Quick Service & Burger', 'Family Style', 'Burger']

    def cast(self, val):
        return str(val).title()


MAPPING = {'restaurant': restaurantname, 'sales': revenue, 'yoysales': percent, 'yoyunits': percent, 'headquarters': cityname, 'segmentcategory': segmentcategory}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be represented as an integer'
        self.examples = [20, 30, 40, 50, 60]

    def cast(self, val):
        return int(val)

class occupation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Occupation of a person'
        self.valid_values = 'Occupation should be a string that represents the job role of a person'
        self.format = 'Occupation should be in lower case'
        self.examples = ['management', 'blue-collar', 'technician', 'admin.', 'services']

    def cast(self, val):
        return str(val).lower()

class maritalstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Marital status of a person'
        self.valid_values = ""Marital status should be one of 'married', 'single', 'divorced'""
        self.format = 'Marital status should be in lower case'
        self.examples = ['married', 'single', 'divorced']

    def cast(self, val):
        return str(val).lower()

class educationlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level of a person'
        self.valid_values = ""Education level should be one of 'secondary', 'tertiary', 'primary', 'unknown'""
        self.format = 'Education level should be in lower case'
        self.examples = ['secondary', 'tertiary', 'primary', 'unknown']

    def cast(self, val):
        return str(val).lower()

class defaultstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class balance(NumericSemanticType):

    def __init__(self):
        self.description = 'Balance in the bank account of a person'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Balance should be represented as an integer'
        self.examples = [2343, 45, 1270, 2476, 184]

    def cast(self, val):
        return int(val)

class housingloan(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class personalloan(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class contactmethod(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Contact method of a person'
        self.valid_values = ""Contact method should be one of 'cellular', 'unknown', 'telephone'""
        self.format = 'Contact method should be in lower case'
        self.examples = ['cellular', 'unknown', 'telephone']

    def cast(self, val):
        return str(val).lower()

class dayofmonth(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the month'
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = 'Day of the month should be represented as an integer'
        self.examples = [1, 10, 20, 30, 31]

    def cast(self, val):
        return int(val)

class month(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Month of the year'
        self.valid_values = ""Month should be one of 'january', 'february', ..., 'december'""
        self.format = 'Month should be in lower case'
        self.examples = ['january', 'february', 'march', 'april', 'may']

    def cast(self, val):
        return str(val).lower()

class calltime(NumericSemanticType):

    def __init__(self):
        self.description = 'Duration of the last contact, in seconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Duration should be represented as an integer'
        self.examples = [2, 138, 255, 496, 3881]

    def cast(self, val):
        return int(val)

class campaigncontacts(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of contacts performed during this campaign and for this client'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Number of contacts should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class pdays(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days that passed by after the client was last contacted from a previous campaign'
        self.valid_range = [-1, float('inf')]
        self.dtype = int
        self.format = 'Number of days should be represented as an integer'
        self.examples = [-1, 0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class previouscontacts(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of contacts performed before this campaign and for this client'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of contacts should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class poutcome(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Outcome of the previous marketing campaign'
        self.valid_values = ""Outcome should be one of 'unknown', 'failure', 'other', 'success'""
        self.format = 'Outcome should be in lower case'
        self.examples = ['unknown', 'failure', 'other', 'success']

    def cast(self, val):
        return str(val).lower()

class deposit(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'age': age, 'job': occupation, 'marital': maritalstatus, 'education': educationlevel, 'default': defaultstatus, 'balance': balance, 'housing': housingloan, 'loan': personalloan, 'contact': contactmethod, 'day': dayofmonth, 'month': month, 'duration': calltime, 'campaign': campaigncontacts, 'pdays': pdays, 'previous': previouscontacts, 'poutcome': poutcome, 'deposit': deposit}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifiers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be integer numbers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class statecode(NumericSemanticType):

    def __init__(self):
        self.description = 'State code'
        self.valid_range = [11, 53]
        self.dtype = int
        self.format = 'State code should be integer numbers in the range [11,53]'
        self.examples = [52, 31, 25, 41, 15]

    def cast(self, val):
        return int(val)

class citycode(NumericSemanticType):

    def __init__(self):
        self.description = 'City code'
        self.valid_range = [1100015, 5300108]
        self.dtype = int
        self.format = 'City code should be integer numbers in the range [1100015,5300108]'
        self.examples = [5200050, 3100104, 2512125, 4119189, 1500107]

    def cast(self, val):
        return int(val)

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City names'
        self.valid_values = 'City names should be strings'
        self.format = 'City names should be capitalized'
        self.examples = ['Abadia de Goiás', 'Abadia dos Dourados', 'Abadiânia', 'Abaeté', 'Abaetetuba']

    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be floating point numbers in the range [-90,90]'
        self.examples = [-16.7573, -18.4831, -16.197, -19.1551, -1.72183]

    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be floating point numbers in the range [-180,180]'
        self.examples = [-49.4412, -47.3916, -48.7057, -45.4444, -48.8788]

    def cast(self, val):
        return float(val)

class capital(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': identifier, 'statecode': statecode, 'citycode': citycode, 'cityname': cityname, 'lat': latitude, 'long': longitude, 'capital': capital}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['2020-02-25', '2020-02-28', '2020-02-29', '2020-03-01', '2020-04-21']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Regions of Brazil'
        self.valid_values = 'Nordeste, Norte, Centro-Oeste, Sudeste, Sul'
        self.format = 'Region names should be capitalized and in portuguese'
        self.examples = ['Nordeste', 'Norte', 'Centro-Oeste', 'Sudeste', 'Sul']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'States of Brazil'
        self.valid_values = 'State abbreviation should be in uppercase and composed of two letters'
        self.format = 'State abbreviation should be in uppercase and composed of two letters'
        self.examples = ['DF', 'GO', 'MS', 'MT', 'AL']

    def cast(self, val):
        return str(val).upper()

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be an integer'
        self.examples = [0, 50, 100, 500, 1000]

    def cast(self, val):
        return math.ceil(float(val))

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of deaths should be an integer'
        self.examples = [0, 10, 50, 100, 500]

    def cast(self, val):
        return math.ceil(float(val))


MAPPING = {'date': date, 'region': region, 'state': state, 'cases': cases, 'deaths': deaths}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date must fit the following format: YYYY-MM-DD'
        self.format = 'Date must be a string in the format: YYYY-MM-DD'
        self.examples = ['2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31']

    def cast(self, val):
        datetime_object = datetime.strptime(val, '%Y-%m-%d')
        return datetime_object.strftime('%Y-%m-%d')

class stateabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'States in Brazil'
        self.valid_values = 'State must be a 2-letter abbreviation'
        self.format = 'State must be a 2-letter abbreviation'
        self.examples = ['MG', 'SP', 'RS', 'BA', 'PR']

    def cast(self, val):
        return val.upper()

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City names'
        self.valid_values = 'City name should be a string'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Acrelândia', 'Assis Brasil', 'Brasiléia', 'Bujari', 'Capixaba']

    def cast(self, val):
        return val.title()

class citycode(NumericSemanticType):

    def __init__(self):
        self.description = 'City code'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'City code should be an integer'
        self.examples = [120001, 120005, 120010, 120013, 120017]

    def cast(self, val):
        return int(val)

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'date': date, 'state': stateabbreviation, 'name': cityname, 'code': citycode, 'cases': casecount, 'deaths': deathcount}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifiers are non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid identifier')
        return num

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates should be of the format YYYY-MM-DD'
        self.format = 'Dates are stored as strings in the format YYYY-MM-DD'
        self.examples = ['2020-02-25', '2020-02-26', '2020-02-27', '2020-02-28', '2020-02-29']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise ValueError('Incorrect data format, should be YYYY-MM-DD')

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country names are strings that should match a real-world country name'
        self.format = 'Country names are stored as strings with the first letter capitalized'
        self.examples = ['Brasil']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class weeknumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Week Number'
        self.valid_range = [1, 53]
        self.dtype = int
        self.format = 'Week numbers are integers between 1 and 53'
        self.examples = [9, 10, 11, 12, 13]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 53:
            raise Exception('Invalid week number')
        return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Case Count'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Case counts are non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid case count')
        return num

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Death Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death counts are non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid death count')
        return num

class recoveredcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Recovered Count'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Recovered counts are non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0:
            raise Exception('Invalid recovered count')
        return num

class monitoringcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Monitoring Count'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Monitoring counts are non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0:
            raise Exception('Invalid monitoring count')
        return num


MAPPING = {'unnamed0': identifier, 'date': date, 'country': countryname, 'week': weeknumber, 'cases': casecount, 'deaths': deathcount, 'recovered': recoveredcount, 'monitoring': monitoringcount}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = 'Dates must be in the format YYYY-MM-DD'
        self.format = 'Dates should be in the format YYYY-MM-DD'
        self.examples = ['2020-01-30', '2020-03-30', '2020-03-22', '2020-03-29', '2020-03-28']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time'
        self.valid_values = 'Time must be in the format HH:MM'
        self.format = 'Time should be in the format HH:MM'
        self.examples = ['16:00', '15:50', '12:00', '15:30', '18:10']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return datetime.strptime(val, '%H:%M').strftime('%H:%M')

class brazilstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'States of Brazil'
        self.valid_values = 'One of 26 states of Brazil or the Federal District'
        self.format = 'Name of the state should be in proper case'
        self.examples = ['Minas Gerais', 'São Paulo', 'Rio Grande do Sul', 'Paraná', 'Ceará']

    def cast(self, val):
        return str(val).title()

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [0, 1, 2, 6, 16]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [0, 1, 2, 6, 16]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [0, 1, 2, 6, 16]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class casenumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [0, 1, 2, 6, 16]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)


MAPPING = {'date': date, 'hour': time, 'state': brazilstate, 'suspects': casenumber, 'refuses': casenumber, 'cases': casenumber, 'deaths': casenumber}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index numbers must be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamps'
        self.valid_values = ""Timestamps must be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Timestamps should be formatted as strings'
        self.examples = ['2015-01-04 00:00:00', '2015-01-04 01:00:00', '2015-01-04 02:00:00', '2015-01-04 03:00:00', '2015-01-04 04:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class bikesharecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Bike Share Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Bike share count should be an integer'
        self.examples = [182, 138, 134, 72, 47]

    def cast(self, val):
        return int(val)

class humidity(NumericSemanticType):

    def __init__(self):
        self.description = 'Humidity Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Humidity should be a floating point number representing the percentage of humidity'
        self.examples = [93.0, 93.0, 96.5, 100.0, 93.0]

    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 100 else float('nan')

class windspeed(NumericSemanticType):

    def __init__(self):
        self.description = 'Wind Speed'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wind speed should be a floating point number'
        self.examples = [6.0, 5.0, 0.0, 0.0, 6.5]

    def cast(self, val):
        return float(val)

class weathercode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Weather Code'
        self.valid_values = 'A small domain of values representing different types of weather'
        self.format = 'Weather codes should be integers'
        self.examples = [3.0, 1.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        return int(val)

class isholiday(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class isweekend(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class season(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Season'
        self.valid_values = 'A small domain of values representing the four seasons'
        self.format = 'Seasons should be integers'
        self.examples = [3.0, 3.0, 3.0, 3.0, 3.0]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'timestamp': timestamp, 'cnt': bikesharecount, 'hum': humidity, 'windspeed': windspeed, 'weathercode': weathercode, 'isholiday': isholiday, 'isweekend': isweekend, 'season': season}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a type of direct measure that summarizes the performance of some aspects in a concise manner.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are integers starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class classnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Class number is a numerical representation of a class'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Class numbers are integers starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class numberofanimalspeciesinclass(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of animal species in a class'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of animal species in a class should be an integer'
        self.examples = [41, 20, 5, 13, 4]

    def cast(self, val):
        return int(val)

class classtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of a class'
        self.valid_values = ""Type of a class should be one of the following: 'Mammal', 'Bird', 'Reptile', 'Fish', 'Amphibian', 'Bug', 'Invertebrate'""
        self.format = 'The class type should be a string'
        self.examples = ['Mammal', 'Bird', 'Reptile', 'Fish', 'Amphibian']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'classnumber': classnumber, 'numberofanimalspeciesinclass': numberofanimalspeciesinclass, 'classtype': classtype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class animalname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Animal'
        self.valid_values = 'Name should be a string that is lowercase'
        self.format = 'Only the first letter of the first name should be capitalized'
        self.examples = ['Frog', 'Chub', 'Bass', 'Bear', 'Boar']

    def cast(self, val):
        return str(val).title()

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class booleanattribute(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

class legs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of legs an animal has'
        self.valid_range = [0, 8]
        self.dtype = int
        self.format = 'Legs should be a positive integer'
        self.examples = [0, 2, 4, 6, 8]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 8:
            raise Exception('Invalid number of legs')
        return num

class classtype(NumericSemanticType):

    def __init__(self):
        self.description = 'Type of class an animal belongs to'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Class type should be an integer between 1 and 7'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 7:
            raise Exception('Invalid class type')
        return num


MAPPING = {'unnamed0': index, 'animalname': animalname, 'hair': booleanattribute, 'feathers': booleanattribute, 'eggs': booleanattribute, 'milk': booleanattribute, 'airborne': booleanattribute, 'aquatic': booleanattribute, 'predator': booleanattribute, 'toothed': booleanattribute, 'backbone': booleanattribute, 'breathes': booleanattribute, 'venomous': booleanattribute, 'fins': booleanattribute, 'tail': booleanattribute, 'domestic': booleanattribute, 'catsize': booleanattribute, 'legs': legs, 'classtype': classtype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Table index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers, starting from 0 and incrementing by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class legoidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for Lego parts'
        self.valid_range = [-1, float('inf')]
        self.dtype = int
        self.format = 'Lego IDs should be integers. -1 denotes an unknown ID'
        self.examples = [-1, 0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class colorname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Lego color'
        self.valid_values = ""Color names should be strings, with 'Unknown' denoting an unknown color""
        self.format = 'Color names should be capitalized strings'
        self.examples = ['Unknown', 'Black', 'Blue', 'Green', 'Dark Turquoise']

    def cast(self, val):
        return str(val).title()

class rgbcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'RGB color code'
        self.valid_values = 'RGB color codes should be 6-digit hexadecimal strings'
        self.format = 'RGB color codes should be uppercase strings'
        self.examples = ['FFFFFF', '000000', 'D9E4A7', 'A5A5CB', 'E4ADC8']

    def cast(self, val):
        return str(val).upper()

class istransparent(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['f', 't']

    def cast(self, val):
        return 't' if str(val).lower() in ['t', 'true', '1'] else 'f'


MAPPING = {'unnamed0': index, 'id': legoidentifier, 'name': colorname, 'rgb': rgbcode, 'istrans': istransparent}"
"class genericidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A generic ID value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [1, 3, 4, 15, 16]

    def cast(self, val):
        return int(val)

class genericidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A generic ID value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [1, 3, 4, 15, 16]

    def cast(self, val):
        return int(val)

class versionnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A version number'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Version number should be formatted as an integer'
        self.examples = [1, 1, 1, 1, 1]

    def cast(self, val):
        return int(val)

class legosetnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A Lego set number'
        self.valid_values = ""Set number should be a string of the form 'number-number'""
        self.format = 'Set number should be formatted as a string'
        self.examples = ['421-2', '31015-1', '75053-1', '8880-1', '214.6-1']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': genericidentifier, 'id': genericidentifier, 'version': versionnumber, 'setnum': legosetnumber}"
"class inventoryidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for inventory'
        self.valid_range = [1, 2990]
        self.dtype = int
        self.format = 'InventoryID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class partnum(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Part number for LEGO piece'
        self.valid_values = 'Part numbers are alphanumeric strings'
        self.format = 'Part numbers should be strings'
        self.examples = ['6141', '3023', '3004', '3020', '3022']

    def cast(self, val):
        return str(val)

class coloridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Color identifier for LEGO piece'
        self.valid_range = [-1, 9999]
        self.dtype = int
        self.format = 'ColorID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class quantity(NumericSemanticType):

    def __init__(self):
        self.description = 'Quantity of LEGO piece'
        self.valid_range = [1, 810]
        self.dtype = int
        self.format = 'Quantity should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class isspare(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['f', 't']

    def cast(self, val):
        return str(val).lower() if str(val).lower() in self.valid_values else None


MAPPING = {'inventoryid': inventoryidentifier, 'partnum': partnum, 'colorid': coloridentifier, 'quantity': quantity, 'isspare': isspare}"
"class inventoryidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for an inventory'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Inventory ID should be an integer'
        self.examples = [35, 50, 39, 50, 35]

    def cast(self, val):
        return int(val)

class setnum(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a set'
        self.valid_values = ""SetNum should be a string of the form 'xxxx-1'""
        self.format = 'SetNum should be a string'
        self.examples = ['75911-1', '75912-1', '75048-1', '75053-1', '4515-1']

    def cast(self, val):
        return str(val)

class quantity(NumericSemanticType):

    def __init__(self):
        self.description = 'The quantity of a certain item in an inventory'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Quantity should be an integer'
        self.examples = [1, 1, 1, 1, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'inventoryid': inventoryidentifier, 'setnum': setnum, 'quantity': quantity}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row number should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class partidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Part Id'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Part Id should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class partcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of Part Category'
        self.valid_values = 'Part category names should be strings'
        self.format = 'Part category names should be capitalized'
        self.examples = ['Baseplates', 'Bricks Printed', 'Bricks Sloped', 'Duplo, Quatro and Primo', 'Bricks Special']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': rownumber, 'id': partidentifier, 'name': partcategory}"
"class partnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique part number of a Lego piece'
        self.valid_values = 'The part number is a string representing the unique identifier of a Lego part'
        self.format = 'The part number should be alphanumeric and can contain lowercase letters, numbers, and special characters'
        self.examples = ['0687b1', '10049', '0904', '1', '10']

    def cast(self, val):
        return str(val).lower()

class partcategoryidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique category id of a Lego part'
        self.valid_range = [1, 57]
        self.dtype = int
        self.format = 'The category id should be an integer between 1 and 57'
        self.examples = [17, 1, 13, 27, 57]

    def cast(self, val):
        return int(val)


MAPPING = {'partnum': partnumber, 'partcatid': partcategoryidentifier}"
"class setnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a lego set'
        self.valid_values = 'Set numbers should be alphanumeric strings'
        self.format = 'Set numbers usually take the form of numbers followed by a dash and another number'
        self.examples = ['00-1', '0011-2', '0011-3', '0012-1', '0013-1']

    def cast(self, val):
        return str(val)

class legosetname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Lego Set'
        self.valid_values = 'Name should be a string that describes the lego set'
        self.format = 'Each word in the name should be capitalized'
        self.examples = ['Weetabix Castle', 'Town Mini-Figures', 'Castle 2 for 1 Bonus Offer', 'Space Mini-Figures', 'Space Mini-Figures']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of production for a lego set'
        self.valid_range = [1950, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [1970, 1978, 1987, 1979, 1979]

    def cast(self, val):
        num = int(val)
        if num < 1950 or num > datetime.now().year:
            raise Exception('Invalid Year')
        return num

class themeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a lego theme'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Theme ID should be a positive integer'
        self.examples = [414, 84, 199, 143, 143]

    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid Theme ID')
        return num

class numparts(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of parts in a lego set'
        self.valid_range = [-1, float('inf')]
        self.dtype = int
        self.format = 'Number of parts should be a positive integer or -1 if unknown'
        self.examples = [471, 12, 2, 12, 12]

    def cast(self, val):
        num = int(val)
        if num < -1:
            raise Exception('Invalid Number of Parts')
        return num


MAPPING = {'setnum': setnumber, 'name': legosetname, 'year': year, 'themeid': themeidentifier, 'numparts': numparts}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class themeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for the theme'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Theme ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class themename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the theme'
        self.valid_values = 'The theme name should be a string'
        self.format = 'Theme name should start with a capital letter, and remaining characters in lower case'
        self.examples = ['Technic', 'Arctic Technic', 'Competition', 'Expert Builder', 'Model']

    def cast(self, val):
        return str(val).title()

class parentthemeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for the parent theme'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Parent Theme ID should be a positive integer or NaN if it does not exist'
        self.examples = [float('nan'), 1.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)


MAPPING = {'unnamed0': index, 'id': themeidentifier, 'name': themename, 'parentid': parentthemeidentifier}"
"class beeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each beer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Beer ID should be a positive integer'
        self.examples = [1436, 2265, 2264, 2263, 2262]

    def cast(self, val):
        return int(val)

class beeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each beer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Beer ID should be a positive integer'
        self.examples = [1436, 2265, 2264, 2263, 2262]

    def cast(self, val):
        return int(val)

class beeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each beer'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Beer ID should be a positive integer'
        self.examples = [1436, 2265, 2264, 2263, 2262]

    def cast(self, val):
        return int(val)

class beername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the beer'
        self.valid_values = ""Beer names can be any string, but should ideally represent the beer's brand and type""
        self.format = 'Beer names should be capitalized strings'
        self.examples = ['Pub Beer', ""Devil's Cup"", 'Rise of the Phoenix', 'Sinister', 'Sex and Candy']

    def cast(self, val):
        return str(val).title()

class beerstyle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of the beer'
        self.valid_values = ""Beer styles can be any string, but should ideally represent the beer's style""
        self.format = 'Beer styles should be capitalized strings'
        self.examples = ['American Pale Lager', 'American Pale Ale (APA)', 'American IPA', 'American Double / Imperial IPA', 'American IPA']

    def cast(self, val):
        return str(val).title()

class beerabv(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The Alcohol By Volume (ABV) of the beer'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'ABV should be a floating point number between 0 and 1'
        self.units = 'In proportion (0-1)'
        self.examples = [0.05, 0.066, 0.071, 0.09, 0.075]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('ABV out of range')
        return num

class beeribu(NumericSemanticType):

    def __init__(self):
        self.description = 'International Bitterness Units (IBU) of the beer'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'IBU should be a positive floating point number'
        self.examples = [21.0, 35.0, 64.0, 4.0, 138.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('IBU out of range')
        return num

class beerounces(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of the beer can'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a positive floating point number'
        self.units = 'In ounces'
        self.examples = [12.0, 8.4, 16.0, 32.0, 12.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Volume out of range')
        return num


MAPPING = {'unnamed01': beeridentifier, 'unnamed0': beeridentifier, 'id': beeridentifier, 'name': beername, 'style': beerstyle, 'abv': beerabv, 'ibu': beeribu, 'ounces': beerounces}"
"class breweryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Brewery'
        self.valid_values = 'Name should be a string that represents the name of the brewery'
        self.format = 'Name should be capitalized'
        self.examples = ['Blue Mountain Brewery', 'Sly Fox Brewing Company', 'Summit Brewing Company', 'Lucette Brewing Company', 'Blackrocks Brewery']

    def cast(self, val):
        return str(val).title()

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.valid_values = 'Name should be a string that represents the name of the city'
        self.format = 'Name should be capitalized'
        self.examples = ['Portland', 'Boulder', 'Chicago', 'Seattle', 'Austin']

    def cast(self, val):
        return str(val).title()

class usstatename(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a US State'
        self.valid_values = 'Two-letter abbreviation of the 50 U.S. states'
        self.format = 'Two-letter abbreviation in uppercase'
        self.examples = ['CA', 'TX', 'NY', 'FL', 'PA']

    def cast(self, val):
        return str(val).strip().upper()


MAPPING = {'name': breweryname, 'city': cityname, 'state': usstatename}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [39, 46, 48, 61, 46]

    def cast(self, val):
        return int(val)

class educationlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level of a person'
        self.valid_values = 'Education level should be an integer value between 1 and 4'
        self.format = '1: Less than High School, 2: High School, 3: Some College, 4: College'
        self.examples = [4.0, 2.0, 1.0, 3.0, 3.0]

    def cast(self, val):
        return int(val)

class cigarettesperday(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cigarettes smoked per day'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of cigarettes smoked per day should be a non-negative number'
        self.examples = [0.0, 0.0, 20.0, 30.0, 23.0]

    def cast(self, val):
        return float(val)

class cholesterollevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Total cholesterol level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total cholesterol level should be a non-negative number'
        self.examples = [195.0, 250.0, 245.0, 225.0, 285.0]

    def cast(self, val):
        return float(val)

class systolicbloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Systolic blood pressure'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Systolic blood pressure should be a non-negative number'
        self.examples = [106.0, 121.0, 127.5, 150.0, 130.0]

    def cast(self, val):
        return float(val)

class diastolicbloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Diastolic blood pressure'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Diastolic blood pressure should be a non-negative number'
        self.examples = [70.0, 81.0, 80.0, 95.0, 84.0]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Body mass index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Body mass index should be a non-negative number'
        self.examples = [26.97, 28.73, 25.34, 28.58, 23.1]

    def cast(self, val):
        return float(val)

class heartrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Heart rate'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Heart rate should be a non-negative number'
        self.examples = [80.0, 95.0, 75.0, 65.0, 85.0]

    def cast(self, val):
        return float(val)

class glucoselevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Glucose level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Glucose level should be a non-negative number'
        self.examples = [77.0, 76.0, 70.0, 103.0, 85.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': identifier, 'male': binaryflag, 'currentsmoker': binaryflag, 'bpmeds': binaryflag, 'prevalentstroke': binaryflag, 'prevalenthyp': binaryflag, 'diabetes': binaryflag, 'tenyearchd': binaryflag, 'age': age, 'education': educationlevel, 'cigsperday': cigarettesperday, 'totchol': cholesterollevel, 'sysbp': systolicbloodpressure, 'diabp': diastolicbloodpressure, 'bmi': bodymassindex, 'heartrate': heartrate, 'glucose': glucoselevel}"
"class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Tim Elliot', 'Lewis Lee Lembke', 'John Paul Quintero', 'Matthew Hoffman', 'Michael Rodriguez']

    def cast(self, val):
        return str(val).title()

class deathmanner(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Manner of death'
        self.valid_values = ""The manner of death should either be 'shot' or 'shot and Tasered'""
        self.format = 'Lowercase string'
        self.examples = ['shot', 'shot', 'shot and Tasered', 'shot', 'shot']

    def cast(self, val):
        return str(val).lower()

class armedtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Armed type'
        self.valid_values = ""Armed type can be any string, such as 'gun', 'knife', 'unknown', 'unarmed', 'toy weapon'""
        self.format = 'Lowercase string'
        self.examples = ['gun', 'gun', 'unarmed', 'toy weapon', 'nail gun']

    def cast(self, val):
        return str(val).lower()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = 'Age should be represented as a floating point number'
        self.examples = [53.0, 47.0, 23.0, 32.0, 39.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 120:
            raise Exception('Invalid age')
        return num

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""The gender of a person should either be 'M' or 'F'""
        self.format = 'Uppercase string'
        self.examples = ['M', 'M', 'M', 'M', 'M']

    def cast(self, val):
        return str(val).upper()

class race(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Race of a person'
        self.valid_values = ""The race of a person should be one of the following: 'White', 'Black', 'Hispanic', 'Asian', 'Native'""
        self.format = 'Proper noun string'
        self.examples = ['White', 'Black', 'Hispanic', 'Asian', 'Native']

    def cast(self, val):
        return str(val).title()

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City name'
        self.valid_values = 'City name can be any string'
        self.format = 'Proper noun string'
        self.examples = ['Los Angeles', 'Phoenix', 'Houston', 'Las Vegas', 'San Antonio']

    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'State abbreviation'
        self.valid_values = 'The state should be represented by its two-letter abbreviation'
        self.format = 'Uppercase string'
        self.examples = ['CA', 'TX', 'FL', 'AZ', 'CO']

    def cast(self, val):
        return str(val).upper()

class mentalillness(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class threatlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Threat level'
        self.valid_values = ""The threat level should be one of the following: 'attack', 'other', 'undetermined'""
        self.format = 'Lowercase string'
        self.examples = ['attack', 'other', 'undetermined', 'attack', 'attack']

    def cast(self, val):
        return str(val).lower()

class flee(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Flee status'
        self.valid_values = ""The flee status should be one of the following: 'Not fleeing', 'Car', 'Foot', 'Other'""
        self.format = 'Proper noun string'
        self.examples = ['Not fleeing', 'Car', 'Foot', 'Other', 'Not fleeing']

    def cast(self, val):
        return str(val).title()

class bodycamera(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class armscategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Arms category'
        self.valid_values = ""Arms category can be any string, such as 'Guns', 'Sharp objects', 'Unknown', 'Unarmed', 'Other unusual objects'""
        self.format = 'Proper noun string'
        self.examples = ['Guns', 'Sharp objects', 'Unknown', 'Unarmed', 'Other unusual objects']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': personname, 'mannerofdeath': deathmanner, 'armed': armedtype, 'age': age, 'gender': gender, 'race': race, 'city': city, 'state': state, 'signsofmentalillness': mentalillness, 'threatlevel': threatlevel, 'flee': flee, 'bodycamera': bodycamera, 'armscategory': armscategory}"
"class tvshowtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a TV Show'
        self.valid_values = 'Title should be a string'
        self.format = 'Each word in the title should start with a capitalized letter'
        self.examples = ['Breaking Bad', 'Stranger Things', 'Attack on Titan', 'Better Call Saul', 'Dark']

    def cast(self, val):
        return str(val).title()

class tvshowage(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age rating of a TV Show'
        self.valid_values = ""Age rating should be one of the following values: ['16+', '18+', '7+', 'all', '13+']""
        self.format = 'Age rating should be a string'
        self.examples = ['16+', '18+', '7+', 'all', '13+']

    def cast(self, val):
        if val in ['16+', '18+', '7+', 'all', '13+']:
            return str(val)
        else:
            raise Exception('Invalid age rating')

class imdb(NumericSemanticType):

    def __init__(self):
        self.description = 'IMDB rating of a TV Show'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'IMDB rating should be a float number with one decimal place'
        self.examples = [7.4, 7.6, 7.3, 7.5, 7.8]

    def cast(self, val):
        float_rating = float(val.split('/')[0])
        return round(float_rating, 1)

class rottentomatoes(NumericSemanticType):

    def __init__(self):
        self.description = 'Rotten Tomatoes rating of a TV Show'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Rotten Tomatoes rating should be an integer'
        self.examples = [10, 13, 45, 51, 52]

    def cast(self, val):
        return int(val.split('/')[0])

class streamingplatform(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class streamingplatform(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class streamingplatform(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class streamingplatform(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'title': tvshowtitle, 'age': tvshowage, 'imdb': imdb, 'rottentomatoes': rottentomatoes, 'netflix': streamingplatform, 'hulu': streamingplatform, 'primevideo': streamingplatform, 'disney': streamingplatform}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [30, 45, 60, 75, 90]

    def cast(self, val):
        return int(val)

class sex(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class chestpain(NumericSemanticType):

    def __init__(self):
        self.description = 'Chest pain type'
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = 'Chest pain type should be an integer from 0 to 3'
        self.examples = [0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Resting blood pressure'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Blood pressure should be an integer'
        self.unit = 'In mm Hg'
        self.examples = [100, 120, 140, 160, 180]

    def cast(self, val):
        return int(val)

class cholesterol(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum cholesterol'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cholesterol should be an integer'
        self.unit = 'In mg/dl'
        self.examples = [150, 200, 250, 300, 350]

    def cast(self, val):
        return int(val)

class fastingbloodsugar(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class restingecg(NumericSemanticType):

    def __init__(self):
        self.description = 'Resting ECG results'
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = 'Resting ECG results should be an integer from 0 to 2'
        self.examples = [0, 1, 2]

    def cast(self, val):
        return int(val)

class maxheartrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Maximum heart rate achieved'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Heart rate should be an integer'
        self.examples = [100, 120, 140, 160, 180]

    def cast(self, val):
        return int(val)

class exerciseinducedangina(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class stdepression(NumericSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'ST depression should be a floating point number'
        self.examples = [0.0, 0.5, 1.0, 1.5, 2.0]

    def cast(self, val):
        return float(val)

class stsegment(NumericSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = 'ST segment slope should be an integer from 0 to 2'
        self.examples = [0, 1, 2]

    def cast(self, val):
        return int(val)

class numvessels(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of major vessels colored by flouroscopy'
        self.valid_range = [0, 4]
        self.dtype = int
        self.format = 'Number of vessels should be an integer from 0 to 4'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class thalassemia(NumericSemanticType):

    def __init__(self):
        self.description = 'Thalassemia type'
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = 'Thalassemia type should be an integer from 0 to 3'
        self.examples = [0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class heartdisease(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': identifier, 'age': age, 'sex': sex, 'cp': chestpain, 'trestbps': bloodpressure, 'chol': cholesterol, 'fbs': fastingbloodsugar, 'restecg': restingecg, 'thalach': maxheartrate, 'exang': exerciseinducedangina, 'oldpeak': stdepression, 'slope': stsegment, 'ca': numvessels, 'thal': thalassemia, 'target': heartdisease}"
"class identity(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identity(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = 'Name should be a string'
        self.format = 'The first letter of the name should be capitalized'
        self.examples = ['Mary', 'Anna', 'Emma', 'Elizabeth', 'Minnie']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [1880, 1881, 1882, 1883, 1884]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""Gender should be 'F' for female or 'M' for male""
        self.format = 'Gender should be represented as a single letter string'
        self.examples = ['F', 'M']

    def cast(self, val):
        return str(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of occurrences'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a positive integer'
        self.examples = [7, 13, 39, 7065, 2604]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': identity, 'id': identity, 'name': personname, 'year': year, 'gender': gender, 'count': count}"
"class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name'""
        self.format = 'Only the first letter of the first name should be capitalized'
        self.examples = ['Mary', 'Annie', 'Anna', 'Margaret', 'Helen']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1900, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [1910, 1943, 1971, 1995, 2014]

    def cast(self, val):
        if isinstance(val, datetime):
            return val.year
        elif isinstance(val, str):
            try:
                return int(val)
            except ValueError:
                raise Exception('Invalid year value')
        elif math.isnan(val):
            return float('nan')
        else:
            return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['M', 'F']

    def cast(self, val):
        if val == 'M' or val == 'F':
            return val
        else:
            raise Exception('Invalid gender value')

class state(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'U.S. State'
        self.valid_values = '2-letter abbreviation of U.S. state'
        self.format = '2-letter abbreviation stored as uppercase string'
        self.examples = ['AL', 'AK', 'AZ', 'AR', 'CA']

    def cast(self, val):
        if re.match('^[A-Z]{2}$', val):
            return val
        else:
            raise Exception('Invalid state value')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be formatted as an integer'
        self.examples = [5, 7, 11, 27, 2694]

    def cast(self, val):
        if isinstance(val, float) and val.is_integer():
            return int(val)
        elif isinstance(val, str):
            try:
                return int(val)
            except ValueError:
                raise Exception('Invalid count value')
        elif math.isnan(val):
            return float('nan')
        else:
            return int(val)


MAPPING = {'name': personname, 'year': year, 'gender': gender, 'state': state, 'count': count}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with no decimal places'
        self.unit = 'In USD'
        self.examples = [6300, 2899, 5350, 25000, 27700]

    def cast(self, val):
        num = float(val)
        return round(num, 0)

class carbrand(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Brand name of a car'
        self.valid_values = 'Brand name should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['toyota', 'ford', 'dodge', 'chevrolet', 'gmc']

    def cast(self, val):
        return str(val).lower()

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Model should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['cruiser', 'se', 'mpv', 'door', '1500']

    def cast(self, val):
        return str(val).lower()

class caryear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of production of a car'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a four-digit integer'
        self.examples = [2008, 2011, 2018, 2014, 2018]

    def cast(self, val):
        num = int(val)
        if num < 1886 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class cartitlestatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['clean vehicle', 'salvage insurance']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid title status')
        return val

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mileage should be formatted as a floating point number with no decimal places'
        self.unit = 'In miles'
        self.examples = [274117.0, 190552.0, 39590.0, 64146.0, 6654.0]

    def cast(self, val):
        num = float(val)
        return round(num, 0)

class carcolor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color of a car'
        self.valid_values = 'Color should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['black', 'silver', 'gray', 'blue', 'red']

    def cast(self, val):
        return str(val).lower()

class carvin(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Vehicle Identification Number of a car'
        self.valid_values = 'VIN should be a string of 17 characters'
        self.format = 'All characters should be uppercase'
        self.examples = ['JTEZU11F88K007763', '2FMDK3GC4BBB02217', '3C4PDCGG5JT346413', '1FTFW1ET4EFC23745', '3GCPCREC2JG473991']

    def cast(self, val):
        vin = str(val).strip().upper()
        if len(vin) != 17:
            raise Exception('Invalid VIN')
        return vin

class carlot(NumericSemanticType):

    def __init__(self):
        self.description = 'Lot number of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Lot number should be a non-negative integer'
        self.examples = [159348797, 166951262, 167655728, 167753855, 167763266]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid lot number')
        return num

class carstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State where the car is located'
        self.valid_values = 'State should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['new jersey', 'tennessee', 'georgia', 'virginia', 'florida']

    def cast(self, val):
        return str(val).lower()

class carcountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country where the car is located'
        self.valid_values = 'Country should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['usa', 'canada']

    def cast(self, val):
        return str(val).strip().lower()

class carcondition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Condition of a car'
        self.valid_values = 'Condition should be a string'
        self.format = 'All characters should be lower case'
        self.examples = ['2 days left', '21 hours left', '3 days left', '14 hours left', '1 days left']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed01': index, 'unnamed0': index, 'price': carprice, 'brand': carbrand, 'model': carmodel, 'year': caryear, 'titlestatus': cartitlestatus, 'mileage': carmileage, 'color': carcolor, 'vin': carvin, 'lot': carlot, 'state': carstate, 'country': carcountry, 'condition': carcondition}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indices should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid index')
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Sofifa ID of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sofifa IDs should be non-negative integers'
        self.examples = [226324, 226328, 226334, 226362, 226373]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid Sofifa ID')
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = 'Names should be a string'
        self.format = ""Names should be of the format 'First name Last name'""
        self.examples = ['C. Lloyd', 'M. Rapinoe', 'A. Wambach', 'L. Nécib', 'N. Keßler']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of a player on the field'
        self.valid_values = 'Positions should be a string'
        self.format = 'Positions should be a comma-separated string of positions'
        self.examples = ['CM, CAM, LM, ST', 'LM, CM', 'ST', 'LM, CAM', 'CM']

    def cast(self, val):
        return str(val).upper().split(', ')

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [32, 29, 35, 28, 27]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid age')
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of birth of a player'
        self.valid_values = 'Date of birth should be a string'
        self.format = ""Date of birth should be in the format 'YYYY-MM-DD'""
        self.examples = ['1982-07-16', '1985-07-05', '1980-06-02', '1987-01-23', '1988-04-04']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be a non-negative integer in centimeters'
        self.unit = 'In centimeters'
        self.examples = [173, 170, 180, 168, 169]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid height')
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be a non-negative integer in kilograms'
        self.unit = 'In kilograms'
        self.examples = [64, 60, 81, 56, 61]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid weight')
        return int(val)

class nationalityidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of a nationality'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Nationality IDs should be non-negative integers'
        self.examples = [95, 95, 95, 18, 21]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid nationality ID')
        return int(val)

class nationalityname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a nationality'
        self.valid_values = 'Name should be a string and a valid country name'
        self.format = 'Names should be capitalized'
        self.examples = ['United States', 'France', 'Germany', 'Canada', 'Brazil']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class playerfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid foot')
        return val


MAPPING = {'unnamed0': index, 'sofifaid': playeridentifier, 'shortname': playername, 'playerpositions': playerposition, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationalityid': nationalityidentifier, 'nationalityname': nationalityname, 'preferredfoot': playerfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID of each player in the FIFA database'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer without any characters'
        self.examples = [226324, 226328, 226359, 226890, 227310]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID of each player in the FIFA database'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer without any characters'
        self.examples = [226324, 226328, 226359, 226890, 227310]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Name should be a string without any numbers'
        self.format = 'Only the first letter of the name should be capitalized'
        self.examples = ['C. Lloyd', 'M. Rapinoe', 'C. Sinclair', 'Marta', 'A. Stolsmo Hegerberg']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Name should be a string without any numbers'
        self.format = 'Only the first letter of the name should be capitalized'
        self.examples = ['C. Lloyd', 'M. Rapinoe', 'C. Sinclair', 'Marta', 'A. Stolsmo Hegerberg']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions a Player can play'
        self.valid_values = 'Positions should be a string of capitalized abbreviations separated by commas'
        self.format = 'Positions should be capitalized abbreviations separated by commas'
        self.examples = ['CM, CAM, LM, ST', 'LM, CM, RM', 'ST, LW, RW, CAM', 'CAM, ST', 'ST']

    def cast(self, val):
        return str(val)

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's rating in the game""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [92, 91, 89, 89, 88]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's rating in the game""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [92, 91, 89, 89, 88]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's age""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [33, 30, 33, 30, 20]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Player's date of birth""
        self.valid_values = ""Date of birth should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date of birth should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['1982-07-16', '1985-07-05', '1983-06-12', '1986-02-19', '1995-07-10']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's height""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In cm'
        self.examples = [173, 170, 175, 163, 177]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's weight""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In kg'
        self.examples = [64, 60, 67, 56, 70]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class nationalityidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique ID of each country in the FIFA database'
        self.valid_values = 'Country ID should be a valid country code as per the FIFA database'
        self.format = 'Country ID should be an integer'
        self.examples = [95, 70, 54, 36]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class nationalityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country Name should be a string without any numbers'
        self.format = 'Country Name should be capitalized'
        self.examples = ['United States', 'Canada', 'Brazil', 'Norway', 'France']

    def cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name) is not None:
            return country_name
        else:
            raise Exception('Invalid country name')

class skillmoves(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val in self.valid_values:
            return val
        else:
            return float('nan')


MAPPING = {'unnamed0': playeridentifier, 'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'playerpositions': playerposition, 'overall': playerrating, 'potential': playerrating, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationalityid': nationalityidentifier, 'nationalityname': nationalityname, 'skillmoves': skillmoves}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number assigned to an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number assigned to an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number assigned to an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number assigned to an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number assigned to an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be capitalized'
        self.examples = ['C. Lloyd', 'M. Rapinoe', 'C. Sinclair', 'Marta', 'D. Marozsán']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be capitalized'
        self.examples = ['C. Lloyd', 'M. Rapinoe', 'C. Sinclair', 'Marta', 'D. Marozsán']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of a player in a game'
        self.valid_values = 'Position should be a string'
        self.format = 'Position should be in uppercase'
        self.examples = ['GK', 'CB', 'ST', 'CM', 'LB']

    def cast(self, val):
        return str(val).upper()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of a player in a game'
        self.valid_values = 'Position should be a string'
        self.format = 'Position should be in uppercase'
        self.examples = ['GK', 'CB', 'ST', 'CM', 'LB']

    def cast(self, val):
        return str(val).upper()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric value representing the score or potential of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer'
        self.examples = [75, 80, 85, 90, 95]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric value representing the score or potential of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer'
        self.examples = [75, 80, 85, 90, 95]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric value representing the score or potential of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer'
        self.examples = [75, 80, 85, 90, 95]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric value representing the score or potential of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Score should be an integer'
        self.examples = [75, 80, 85, 90, 95]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of an entity'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [20, 25, 30, 35, 40]

    def cast(self, val):
        return int(val)

class dob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of birth of an entity'
        self.valid_values = 'Date should be in the format YYYY-MM-DD'
        self.format = 'Dates should be stored as strings in the format YYYY-MM-DD'
        self.examples = ['1982-07-16', '1985-07-05', '1983-06-12', '1986-02-19', '1992-04-18']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class height(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In centimeters'
        self.examples = [150, 160, 170, 180, 190]

    def cast(self, val):
        return int(val)

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In kilograms'
        self.examples = [50, 60, 70, 80, 90]

    def cast(self, val):
        return int(val)

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of an entity'
        self.valid_values = 'Nationality should be a string that represents a country'
        self.format = 'Nationality should be capitalized'
        self.examples = ['United States', 'Brazil', 'Germany', 'France', 'Australia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class footpreference(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Foot preference of a player'
        self.valid_values = ""Either 'Right' or 'Left'""
        self.format = 'Preference should be capitalized'
        self.examples = ['Right', 'Left']

    def cast(self, val):
        if val.lower() in ['right', 'left']:
            return val.capitalize()
        else:
            raise Exception('Invalid foot preference')


MAPPING = {'unnamed0': identifier, 'sofifaid': identifier, 'nationalityid': identifier, 'nationteamid': identifier, 'nationjerseynumber': identifier, 'shortname': playername, 'longname': playername, 'playerpositions': playerposition, 'nationposition': playerposition, 'overall': score, 'potential': score, 'weakfoot': score, 'skillmoves': score, 'age': age, 'dob': dob, 'heightcm': height, 'weightkg': weight, 'nationalityname': nationality, 'preferredfoot': footpreference}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An identifier for an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'An id should be a positive integer'
        self.examples: list = [1, 100, 10000, 100000, 1000000]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An identifier for an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'An id should be a positive integer'
        self.examples: list = [1, 100, 10000, 100000, 1000000]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An identifier for an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'An id should be a positive integer'
        self.examples: list = [1, 100, 10000, 100000, 1000000]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An identifier for an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'An id should be a positive integer'
        self.examples: list = [1, 100, 10000, 100000, 1000000]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Player'
        self.valid_values: str = ""Name should be a string that is of the form 'first name last name'""
        self.format: str = 'Only the first letter of the first and last name should be capitalized'
        self.examples: list = ['Megan Anna Rapinoe', 'Samantha May Kerr', 'Amandine Chantal Henry', 'Dzsenifer Marozsán', 'Christine Margaret Sinclair']

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Player'
        self.valid_values: str = ""Name should be a string that is of the form 'first name last name'""
        self.format: str = 'Only the first letter of the first and last name should be capitalized'
        self.examples: list = ['Megan Anna Rapinoe', 'Samantha May Kerr', 'Amandine Chantal Henry', 'Dzsenifer Marozsán', 'Christine Margaret Sinclair']

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return str(val).title()

class positions(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Player Positions in Football'
        self.valid_values: str = 'Should be a string of comma separated values where each value is one of the following: GK, SW, RWB, RB, RCB, CB, LCB, LB, LWB, RDM, CDM, LDM, RM, RCM, CM, LCM, LM, RAM, CAM, LAM, RF, CF, LF, RW, RS, ST, LS, LW'
        self.format: str = 'Should be a string of comma separated values with no spaces'
        self.examples: list = ['LM,LW', 'ST,LW', 'CDM,CM', 'CAM,LM,CM', 'ST,CAM,LM']

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return str(val).replace(' ', '')

class positions(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Player Positions in Football'
        self.valid_values: str = 'Should be a string of comma separated values where each value is one of the following: GK, SW, RWB, RB, RCB, CB, LCB, LB, LWB, RDM, CDM, LDM, RM, RCM, CM, LCM, LM, RAM, CAM, LAM, RF, CF, LF, RW, RS, ST, LS, LW'
        self.format: str = 'Should be a string of comma separated values with no spaces'
        self.examples: list = ['LM,LW', 'ST,LW', 'CDM,CM', 'CAM,LM,CM', 'ST,CAM,LM']

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return str(val).replace(' ', '')

class rating(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Player Rating'
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = 'Player rating should be an integer between 0 and 100'
        self.examples: list = [60, 70, 80, 90, 100]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Player Rating'
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = 'Player rating should be an integer between 0 and 100'
        self.examples: list = [60, 70, 80, 90, 100]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date'
        self.valid_values: str = 'Date should be a string in the format YYYY-MM-DD'
        self.format: str = 'Date should be a string in the format YYYY-MM-DD'
        self.examples: list = ['1985-07-05', '1993-09-10', '1989-09-28', '1992-04-18', '1983-06-12']

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class height(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Height in cm'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Height should be a positive integer'
        self.unit: str = 'In cm'
        self.examples: list = [160, 170, 180, 190, 200]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Weight in kg'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Weight should be a positive integer'
        self.unit: str = 'In kg'
        self.examples: list = [50, 60, 70, 80, 90]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Nationality of a person'
        self.valid_values: str = 'Should be a string representing a valid country name'
        self.format: str = 'Should be a string representing a valid country name'
        self.examples: list = ['United States', 'Australia', 'France', 'Germany', 'Canada']

    def cast(self, val):
        if pd.isna(val):
            return None
        elif pycountry.countries.get(name=val):
            return str(val)
        else:
            raise Exception('Invalid country name')

class foot(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['Right', 'Left']

    def cast(self, val):
        if pd.isna(val):
            return None
        elif val in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid foot')

class ratingcounts(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Rating Counts'
        self.valid_range: list = [1, 5]
        self.dtype: object = int
        self.format: str = 'Rating count should be an integer between 1 and 5'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

class ratingcounts(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Rating Counts'
        self.valid_range: list = [1, 5]
        self.dtype: object = int
        self.format: str = 'Rating count should be an integer between 1 and 5'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)


MAPPING = {'unnamed0': identifier, 'sofifaid': identifier, 'nationalityid': identifier, 'nationteamid': identifier, 'shortname': playername, 'longname': playername, 'playerpositions': positions, 'nationposition': positions, 'overall': rating, 'potential': rating, 'dob': date, 'heightcm': height, 'weightkg': weight, 'nationalityname': nationality, 'preferredfoot': foot, 'weakfoot': ratingcounts, 'skillmoves': ratingcounts}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a FIFA player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be a positive integer'
        self.examples = [226328, 227125, 227316, 226308, 227318]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0:
            raise Exception('Invalid player ID')
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a FIFA player'
        self.valid_values = ""Player name must be in the form 'First name Last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['M. Rapinoe', 'S. Kerr', 'W. Renard', 'D. Marozsán', 'A. Henry']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a FIFA player'
        self.valid_values = ""Player name must be in the form 'First name Last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['M. Rapinoe', 'S. Kerr', 'W. Renard', 'D. Marozsán', 'A. Henry']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of a FIFA player'
        self.valid_values = 'Position must be a string consisting of 2 or 3 upper case letters'
        self.format = 'Player position should be in upper case'
        self.examples = ['LW', 'LM', 'ST', 'CB', 'RB']

    def cast(self, val):
        if not re.match('^[A-Z]{2,3}$', val):
            raise Exception('Invalid player position')
        return str(val).upper()

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of a FIFA player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Player rating should be an integer between 0 and 100'
        self.examples = [93, 92, 91, 90, 89]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0 or val > 100:
            raise Exception('Invalid player rating')
        return int(val)

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of a FIFA player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Player rating should be an integer between 0 and 100'
        self.examples = [93, 92, 91, 90, 89]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0 or val > 100:
            raise Exception('Invalid player rating')
        return int(val)

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a FIFA player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Player age should be an integer between 0 and 100'
        self.examples = [33, 25, 28, 27, 29]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0 or val > 100:
            raise Exception('Invalid player age')
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of birth of a FIFA player'
        self.valid_values = 'Date of birth must be in the format YYYY-MM-DD'
        self.format = 'Date of birth should be a string in the format YYYY-MM-DD'
        self.examples = ['1985-07-05', '1993-09-10', '1990-07-20', '1992-04-18', '1989-09-28']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a FIFA player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player height should be an integer'
        self.unit = 'In cm'
        self.examples = [170, 167, 187, 171, 171]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0:
            raise Exception('Invalid player height')
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a FIFA player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player weight should be an integer'
        self.unit = 'In kg'
        self.examples = [60, 55, 70, 67, 64]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 0:
            raise Exception('Invalid player weight')
        return int(val)

class playernationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a FIFA player'
        self.valid_values = 'Nationality must be a valid country name'
        self.format = 'Nationality should be a string'
        self.examples = ['United States', 'Australia', 'France', 'Germany', 'Norway']

    def cast(self, val):
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid nationality')
        return str(val)

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid preferred foot')
        return str(val)

class skillmoves(NumericSemanticType):

    def __init__(self):
        self.description = 'Skill moves of a FIFA player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Skill moves should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 1 or val > 5:
            raise Exception('Invalid skill moves')
        return int(val)

class skillmoves(NumericSemanticType):

    def __init__(self):
        self.description = 'Skill moves of a FIFA player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Skill moves should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif not isinstance(val, int) or val < 1 or val > 5:
            raise Exception('Invalid skill moves')
        return int(val)


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'playerpositions': playerposition, 'overall': playerrating, 'potential': playerrating, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationalityname': playernationality, 'preferredfoot': preferredfoot, 'weakfoot': skillmoves, 'skillmoves': skillmoves}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identification number for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer'
        self.examples = [226328, 227125, 227316, 226308, 227318]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['M. Rapinoe', 'S. Kerr', 'W. Renard', 'D. Marozsán', 'A. Henry']

    def cast(self, val):
        return str(val).title()

class playerpositions(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions a player can play'
        self.valid_values = 'Should be a string containing abbreviations of positions separated by commas'
        self.format = 'Each position should be capitalized and separated by a comma'
        self.examples = ['CB', 'GK', 'ST', 'LB', 'CDM, CM']

    def cast(self, val):
        return str(val).upper()

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [34, 26, 29, 28, 30]

    def cast(self, val):
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of birth of a player'
        self.valid_values = ""Should be a string representing a date in the format 'YYYY-MM-DD'""
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['1985-07-05', '1993-09-10', '1990-07-20', '1992-04-18', '1989-09-28']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In cm'
        self.examples = [170, 167, 187, 171, 171]

    def cast(self, val):
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In kg'
        self.examples = [60, 55, 70, 67, 64]

    def cast(self, val):
        return int(val)

class playernationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a player'
        self.valid_values = 'Should be a string representing a valid nationality'
        self.format = 'Each word in the nationality should be capitalized'
        self.examples = ['United States', 'Australia', 'France', 'Germany', 'Netherlands']

    def cast(self, val):
        return str(val).title()

class preferredfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Preferred foot of a player'
        self.valid_values = ""'Right' or 'Left'""
        self.format = ""Should be 'Right' or 'Left'""
        self.examples = ['Right', 'Left', 'Right', 'Right', 'Right']

    def cast(self, val):
        return str(val).capitalize()


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'playerpositions': playerpositions, 'age': playerage, 'dob': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'nationalityname': playernationality, 'preferredfoot': preferredfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Player ID in the FIFA database'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer'
        self.examples = [226177, 227394, 241526, 248734, 264630]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['L. Bronze', 'W. Renard', 'V. Miedema', 'S. Kerr', 'A. Morgan']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Player's positions in the match""
        self.valid_values = 'Position should be a string of up to 3 capital letters, multiple positions are separated by a comma'
        self.format = 'Position codes are all uppercase'
        self.examples = ['RB, CM', 'CB', 'ST', 'ST, LW', 'ST']

    def cast(self, val):
        positions = str(val).split(',')
        return ', '.join([position.strip().upper() for position in positions])

class playerpotential(NumericSemanticType):

    def __init__(self):
        self.description = 'Potential of a Player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Potential should be an integer'
        self.examples = [66, 76, 79, 83, 93]

    def cast(self, val):
        return int(val)

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a Player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [18, 24, 27, 30, 38]

    def cast(self, val):
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a Player'
        self.valid_values = ""Date of Birth should be in the format 'YYYY-MM-DD'""
        self.format = ""Date of Birth is in the format 'YYYY-MM-DD'""
        self.examples = ['1991-10-28', '1990-07-20', '1996-07-15', '1993-09-10', '1989-07-02']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class nationalityidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Nationality ID of a Player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Nationality ID should be an integer'
        self.examples = [7, 34, 45, 83, 198]

    def cast(self, val):
        return int(val)

class nationalityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a Player'
        self.valid_values = 'Nationality should be the name of a country in English'
        self.format = 'Nationality is the name of a country in English'
        self.examples = ['England', 'France', 'Netherlands', 'Australia', 'United States']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val))
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        return str(val).title()

class skillmoves(NumericSemanticType):

    def __init__(self):
        self.description = 'Skill Moves of a Player'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Skill Moves should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'playerpositions': playerposition, 'potential': playerpotential, 'age': playerage, 'dob': playerdob, 'nationalityid': nationalityidentifier, 'nationalityname': nationalityname, 'preferredfoot': preferredfoot, 'skillmoves': skillmoves}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player IDs are integers'
        self.examples = [158023, 20801, 9014, 41236, 167495]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Name should be a string'
        self.format = 'Names should be capitalized'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'A. Robben', 'Z. Ibrahimović', 'M. Neuer']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Positions a Player can play'
        self.valid_values = 'Positions should be in the form of football positions'
        self.format = 'Positions should be capitalized and separated by commas'
        self.examples = ['CF', 'LW, LM', 'RM, LM, RW', 'ST', 'GK']

    def cast(self, val):
        return str(val).upper()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a player'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [27, 29, 30, 32, 28]

    def cast(self, val):
        return int(val)

class dob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a player'
        self.valid_values = 'Date should be in the YYYY-MM-DD format'
        self.format = 'Date should be a string in the YYYY-MM-DD format'
        self.examples = ['1987-06-24', '1985-02-05', '1984-01-23', '1981-10-03', '1986-03-27']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class height(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In centimeters'
        self.examples = [169, 185, 180, 195, 193]

    def cast(self, val):
        return int(val)

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In kilograms'
        self.examples = [67, 80, 80, 95, 92]

    def cast(self, val):
        return int(val)

class nationalityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of a player'
        self.valid_values = 'Must be a valid country name'
        self.format = 'Country names should be capitalized and in English'
        self.examples = ['Argentina', 'Portugal', 'Netherlands', 'Sweden', 'Germany']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class preferredfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Preferred foot of a player'
        self.valid_values = ""Either 'Right' or 'Left'""
        self.format = 'Should be capitalized'
        self.examples = ['Left', 'Right']

    def cast(self, val):
        val = str(val).capitalize()
        if val in ['Right', 'Left']:
            return val
        else:
            raise Exception('Invalid foot preference')

class skillmoves(NumericSemanticType):

    def __init__(self):
        self.description = 'Skill moves rating of a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Skill moves rating should be an integer'
        self.examples = [4, 5, 4, 4, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'playerpositions': playerposition, 'age': age, 'dob': dob, 'heightcm': height, 'weightkg': weight, 'nationalityname': nationalityname, 'preferredfoot': preferredfoot, 'skillmoves': skillmoves}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football Player'
        self.valid_values = 'A valid player name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'Player names should be capitalized properly and may contain periods for initials'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'A. Robben', 'M. Neuer', 'L. Suárez']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football Player'
        self.valid_values = 'A valid player name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'Player names should be capitalized properly and may contain periods for initials'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'A. Robben', 'M. Neuer', 'L. Suárez']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football Player'
        self.valid_values = 'A valid player name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'Player names should be capitalized properly and may contain periods for initials'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'A. Robben', 'M. Neuer', 'L. Suárez']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions that a Football Player plays'
        self.valid_values = 'A valid player position is a string composed of 1-2 alphabetic characters per position, separated by commas for multiple positions'
        self.format = 'Player positions should be capitalized properly'
        self.examples = ['RW, CF', 'LW, LM', 'RM, LM, RW', 'GK', 'ST']

    def cast(self, val):
        return str(val).upper()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions that a Football Player plays'
        self.valid_values = 'A valid player position is a string composed of 1-2 alphabetic characters per position, separated by commas for multiple positions'
        self.format = 'Player positions should be capitalized properly'
        self.examples = ['RW, CF', 'LW, LM', 'RM, LM, RW', 'GK', 'ST']

    def cast(self, val):
        return str(val).upper()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions that a Football Player plays'
        self.valid_values = 'A valid player position is a string composed of 1-2 alphabetic characters per position, separated by commas for multiple positions'
        self.format = 'Player positions should be capitalized properly'
        self.examples = ['RW, CF', 'LW, LM', 'RM, LM, RW', 'GK', 'ST']

    def cast(self, val):
        return str(val).upper()

class playerperformance(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance score for a Football Player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Performance score should be an integer between 0 and 100'
        self.examples = [44, 65, 70, 94, 95]

    def cast(self, val):
        return int(val)

class playerperformance(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance score for a Football Player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Performance score should be an integer between 0 and 100'
        self.examples = [44, 65, 70, 94, 95]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in EUR of a Football Player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.units = 'In EUR'
        self.examples = [6000.0, 250000.0, 575000.0, 1400000.0, 111000000.0]

    def cast(self, val):
        return round(float(val), 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in EUR of a Football Player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.units = 'In EUR'
        self.examples = [6000.0, 250000.0, 575000.0, 1400000.0, 111000000.0]

    def cast(self, val):
        return round(float(val), 2)

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a Football Player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [16, 21, 24, 28, 45]

    def cast(self, val):
        return int(val)

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a Football Player'
        self.valid_values = ""A valid date of birth is a string in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1984-01-23', '1986-03-27', '1987-01-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a Football Player'
        self.valid_values = ""A valid date of birth is a string in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1984-01-23', '1986-03-27', '1987-01-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class playerdob(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a Football Player'
        self.valid_values = ""A valid date of birth is a string in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1984-01-23', '1986-03-27', '1987-01-24']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a Football Player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.units = 'In CM'
        self.examples = [155, 176, 181, 186, 208]

    def cast(self, val):
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a Football Player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.units = 'In KG'
        self.examples = [50, 70, 75, 80, 110]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football Team'
        self.valid_values = 'A valid team name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'Team names should be capitalized properly'
        self.examples = ['FC Barcelona', 'Real Madrid CF', 'FC Bayern München', 'FC Bayern München', 'FC Barcelona']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football Team'
        self.valid_values = 'A valid team name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'Team names should be capitalized properly'
        self.examples = ['FC Barcelona', 'Real Madrid CF', 'FC Bayern München', 'FC Bayern München', 'FC Barcelona']

    def cast(self, val):
        return str(val).title()

class leaguename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Football League'
        self.valid_values = 'A valid league name is a string composed of alphabetic characters, spaces and periods'
        self.format = 'League names should be capitalized properly'
        self.examples = ['Spain Primera Division', 'Spain Primera Division', 'German 1. Bundesliga', 'German 1. Bundesliga', 'Spain Primera Division']

    def cast(self, val):
        return str(val).title()

class playerperformanceindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playerperformanceindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playerperformanceindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playerperformanceindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playerperformanceindicator(NumericSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        return val.capitalize()


MAPPING = {'unnamed0': identifier, 'sofifaid': identifier, 'clubteamid': identifier, 'nationalityid': identifier, 'nationteamid': identifier, 'shortname': playername, 'longname': playername, 'nationalityname': playername, 'playerpositions': playerposition, 'clubposition': playerposition, 'nationposition': playerposition, 'overall': playerperformance, 'potential': playerperformance, 'valueeur': price, 'wageeur': price, 'age': playerage, 'dob': playerdob, 'clubjoined': playerdob, 'clubcontractvaliduntil': playerdob, 'heightcm': playerheight, 'weightkg': playerweight, 'clubname': teamname, 'clubloanedfrom': teamname, 'leaguename': leaguename, 'leaguelevel': playerperformanceindicator, 'clubjerseynumber': playerperformanceindicator, 'nationjerseynumber': playerperformanceindicator, 'weakfoot': playerperformanceindicator, 'skillmoves': playerperformanceindicator, 'preferredfoot': preferredfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player IDs should be stored as integers'
        self.examples = [20801, 158023, 167495, 176580, 190871]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Name should be a string'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'M. Neuer', 'L. Suárez', 'Neymar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Player'
        self.valid_values = 'Name should be a string'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'M. Neuer', 'L. Suárez', 'Neymar']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Positions a player can play'
        self.valid_values = 'Should be a string of positions separated by commas'
        self.format = 'Positions should be upper case'
        self.examples = ['LW, LM, ST', 'RW', 'GK', 'ST', 'LW']

    def cast(self, val):
        return str(val).upper()

class playerpotential(NumericSemanticType):

    def __init__(self):
        self.description = 'Potential rating of a player'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Potential should be stored as integers'
        self.examples = [94, 93, 92, 92, 95]

    def cast(self, val):
        return int(val)

class playervalueeur(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market value of a player in euros'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be stored as floating point numbers'
        self.unit = 'In Euros'
        self.examples = [87000000.0, 89000000.0, 69500000.0, 83000000.0, 109000000.0]

    def cast(self, val):
        return float(val)

class playervalueeur(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market value of a player in euros'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be stored as floating point numbers'
        self.unit = 'In Euros'
        self.examples = [87000000.0, 89000000.0, 69500000.0, 83000000.0, 109000000.0]

    def cast(self, val):
        return float(val)

class playerheightcm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of a player in centimeters'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Height should be stored as floating point numbers'
        self.unit = 'In Centimeters'
        self.examples = [185, 170, 193, 182, 174]

    def cast(self, val):
        return float(val)

class playerweightkg(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of a player in kilograms'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Weight should be stored as floating point numbers'
        self.unit = 'In Kilograms'
        self.examples = [80, 72, 92, 85, 68]

    def cast(self, val):
        return float(val)

class playerpreferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid preferred foot')
        return val


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'playerpositions': playerposition, 'potential': playerpotential, 'valueeur': playervalueeur, 'wageeur': playervalueeur, 'heightcm': playerheightcm, 'weightkg': playerweightkg, 'preferredfoot': playerpreferredfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's unique identifier in the FIFA database""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player IDs should be a positive integer'
        self.examples = [20801, 158023, 167495, 176580, 190871]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'M. Neuer', 'L. Suárez', 'Neymar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'M. Neuer', 'L. Suárez', 'Neymar']

    def cast(self, val):
        return str(val).title()

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The value in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.units = 'In EUR'
        self.examples = [95500000.0, 105000000.0, 61000000.0, 97000000.0, 123000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class currency(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The value in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Value should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.units = 'In EUR'
        self.examples = [95500000.0, 105000000.0, 61000000.0, 97000000.0, 123000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be a string in the YYYY-MM-DD format'
        self.format = 'Date should be a string in the YYYY-MM-DD format'
        self.examples = ['1985-02-05', '1987-06-24', '1986-03-27', '1987-01-24', '1992-02-05']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be a string in the YYYY-MM-DD format'
        self.format = 'Date should be a string in the YYYY-MM-DD format'
        self.examples = ['1985-02-05', '1987-06-24', '1986-03-27', '1987-01-24', '1992-02-05']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'Country name should be a string and in the english language'
        self.format = 'Only the first letter of the country should be capitalized'
        self.examples = ['Portugal', 'Argentina', 'Germany', 'Uruguay', 'Brazil']

    def cast(self, val):
        return pycountry.countries.get(name=val).name


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'valueeur': currency, 'wageeur': currency, 'dob': date, 'clubjoined': date, 'nationalityname': country}"
"class position(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of the player'
        self.valid_values = 'String representing the position of the player'
        self.format = 'The position should be a string'
        self.examples = ['ST', 'RW', 'LW', 'LCB', 'GK']

    def cast(self, val):
        return str(val).upper()

class fifarating(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The rating of a player in FIFA'
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = 'FIFA rating should be an integer between 0 and 100'
        self.examples: list = [62, 66, 71, 75, 94]

    def cast(self, val):
        return round(float(val))

class fifarating(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The rating of a player in FIFA'
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = 'FIFA rating should be an integer between 0 and 100'
        self.examples: list = [62, 66, 71, 75, 94]

    def cast(self, val):
        return round(float(val))

class monetaryvalueeur(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The monetary value in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Monetary value should be in EUR and stored as a floating point number'
        self.unit = 'In EUR'
        self.examples = [300000.0, 675000.0, 2000000.0, 118500000.0, 2000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class monetaryvalueeur(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The monetary value in EUR'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Monetary value should be in EUR and stored as a floating point number'
        self.unit = 'In EUR'
        self.examples = [300000.0, 675000.0, 2000000.0, 118500000.0, 2000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the player'
        self.valid_range = [16, 45]
        self.dtype = int
        self.format = 'Age should be an integer between 16 and 45'
        self.examples = [21, 25, 29, 33, 45]

    def cast(self, val):
        return round(float(val))

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique ID for each player'
        self.valid_range = [16, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer'
        self.examples = [199812, 221358, 235995, 245683, 20801]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique ID for each player'
        self.valid_range = [16, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer'
        self.examples = [199812, 221358, 235995, 245683, 20801]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the player'
        self.valid_values = 'Name should be a string'
        self.format = 'First character of each word should be capitalized, the rest should be in lowercase'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'Neymar', 'Sergio Ramos', 'L. Suárez']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the player'
        self.valid_values = 'Name should be a string'
        self.format = 'First character of each word should be capitalized, the rest should be in lowercase'
        self.examples = ['Cristiano Ronaldo', 'L. Messi', 'Neymar', 'Sergio Ramos', 'L. Suárez']

    def cast(self, val):
        return str(val).title()

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of the player'
        self.valid_values = 'Country names should be strings'
        self.format = 'First character of each word should be capitalized, the rest should be in lowercase'
        self.examples = ['Portugal', 'Argentina', 'Brazil', 'Spain', 'Uruguay']

    def cast(self, val):
        return str(val).title()

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        return str(val).capitalize()


MAPPING = {'playerpositions': position, 'overall': fifarating, 'potential': fifarating, 'valueeur': monetaryvalueeur, 'wageeur': monetaryvalueeur, 'age': age, 'unnamed0': playeridentifier, 'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'nationalityname': nationality, 'preferredfoot': preferredfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Player ID used in the FIFA database'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be an integer'
        self.examples = [158023, 20801, 190871, 183277, 192985]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Player's name""
        self.valid_values = 'Name should be a string'
        self.format = 'Capitalization and spacing can vary'
        self.examples = ['L. Messi', 'Cristiano Ronaldo', 'Neymar Jr', 'E. Hazard', 'K. De Bruyne']

    def cast(self, val):
        return str(val).strip()

class playerposition(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Player's position on the field""
        self.valid_values = 'Should be a string representation of football positions'
        self.format = 'Positions should be abbreviated and separated by commas if multiple'
        self.examples = ['RW, CF, ST', 'ST, LW', 'LW, CAM', 'LW, CF', 'CAM, CM']

    def cast(self, val):
        return str(val).replace(' ', '').upper()

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's rating in the game""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 100'
        self.examples = [94, 93, 92, 91, 91]

    def cast(self, val):
        return int(val)

class playerrating(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's rating in the game""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 100'
        self.examples = [94, 93, 92, 91, 91]

    def cast(self, val):
        return int(val)

class playerprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's price in the game""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In EUR'
        self.examples = [95500000.0, 58500000.0, 105500000.0, 90000000.0, 90000000.0]

    def cast(self, val):
        return float(val)

class playerprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's price in the game""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In EUR'
        self.examples = [95500000.0, 58500000.0, 105500000.0, 90000000.0, 90000000.0]

    def cast(self, val):
        return float(val)

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = ""Player's age""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [32, 34, 27, 28, 28]

    def cast(self, val):
        return int(val)

class playerbirthdate(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Player's date of birth""
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1992-02-05', '1991-01-07', '1991-06-28']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's height""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In cm'
        self.examples = [170, 187, 175, 175, 181]

    def cast(self, val):
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Player's weight""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In kg'
        self.examples = [72, 83, 68, 74, 70]

    def cast(self, val):
        return int(val)

class playernationality(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Player's nationality""
        self.valid_values = 'Nationality should be a string representation of a country name'
        self.format = 'The name of the country'
        self.examples = ['Argentina', 'Portugal', 'Brazil', 'Belgium', 'Belgium']

    def cast(self, val):
        return pycountry.countries.get(name=str(val)).name

class preferredfoot(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Right', 'Left']

    def cast(self, val):
        return str(val).title()


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'playerpositions': playerposition, 'overall': playerrating, 'potential': playerrating, 'valueeur': playerprice, 'wageeur': playerprice, 'age': playerage, 'dob': playerbirthdate, 'heightcm': playerheight, 'weightkg': playerweight, 'nationalityname': playernationality, 'preferredfoot': preferredfoot}"
"class fifaplayeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for FIFA players'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'FIFA Player ID should be formatted as an integer'
        self.examples: list = [158023, 20801, 188545, 190871, 192985]

    def cast(self, val):
        return int(val)

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Full name of a Person'
        self.valid_values = 'Name should be a string, and only the first letter of each word should be capitalized'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Lionel Andrés Messi Cuccittini', 'Cristiano Ronaldo dos Santos Aveiro', 'Robert Lewandowski', 'Neymar da Silva Santos Júnior', 'Kevin De Bruyne']

    def cast(self, val):
        return str(val).title()

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Full name of a Person'
        self.valid_values = 'Name should be a string, and only the first letter of each word should be capitalized'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Lionel Andrés Messi Cuccittini', 'Cristiano Ronaldo dos Santos Aveiro', 'Robert Lewandowski', 'Neymar da Silva Santos Júnior', 'Kevin De Bruyne']

    def cast(self, val):
        return str(val).title()

class fifaplayerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position(s) of a FIFA player in the field'
        self.valid_values = 'Position should be a string of capitalized abbreviations separated by commas'
        self.format = 'Each position should be represented by its standard abbreviation'
        self.examples = ['RW, ST, CF', 'ST, LW', 'ST', 'LW, CAM', 'CAM, CM']

    def cast(self, val):
        return str(val).upper()

class playerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the player'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be formatted as an integer'
        self.examples: list = [33, 35, 31, 28, 29]

    def cast(self, val):
        return int(val)

class birthdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a player'
        self.valid_values = ""Date of birth should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date of birth should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1988-08-21', '1992-02-05', '1991-06-28']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').date()

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of the player'
        self.valid_range = [0, 500]
        self.dtype = float
        self.format = 'Weight should be formatted as a floating point number'
        self.unit = 'Weight should be in kilograms'
        self.examples: list = [72, 83, 80, 68, 70]

    def cast(self, val):
        return float(val)

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of the player'
        self.valid_range = [0, 250]
        self.dtype = float
        self.format = 'Height should be formatted as a floating point number'
        self.unit = 'Height should be in centimeters'
        self.examples: list = [170, 187, 184, 175, 181]

    def cast(self, val):
        return float(val)

class playernationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality of the player'
        self.valid_values = 'Nationality should be a string of a valid country name'
        self.format = 'Nationality should be a full, capitalized country name'
        self.examples = ['Argentina', 'Portugal', 'Poland', 'Brazil', 'Belgium']

    def cast(self, val):
        return str(val).title()

class playerfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Preferred foot of the player'
        self.valid_values = ""Preferred foot should be either 'Right' or 'Left'""
        self.format = ""Preferred foot should be in the format 'Right' or 'Left'""
        self.examples = ['Left', 'Right']

    def cast(self, val):
        return str(val).title()


MAPPING = {'sofifaid': fifaplayeridentifier, 'shortname': personname, 'longname': personname, 'playerpositions': fifaplayerposition, 'age': playerage, 'dob': birthdate, 'weightkg': playerweight, 'heightcm': playerheight, 'nationalityname': playernationality, 'preferredfoot': playerfoot}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a player in FIFA database'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be a positive integer'
        self.examples = [158023, 188545, 20801, 190871, 192985]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a FIFA player'
        self.valid_values = 'Name should be a string'
        self.format = ""Should be of the form 'First name Last name'""
        self.examples = ['L. Messi', 'R. Lewandowski', 'Cristiano Ronaldo', 'Neymar Jr', 'K. De Bruyne']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a FIFA player'
        self.valid_values = 'Name should be a string'
        self.format = ""Should be of the form 'First name Last name'""
        self.examples = ['L. Messi', 'R. Lewandowski', 'Cristiano Ronaldo', 'Neymar Jr', 'K. De Bruyne']

    def cast(self, val):
        return str(val).title()

class playerposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The playing position(s) of a FIFA player'
        self.valid_values = 'Should be a valid position in football'
        self.format = 'Multiple positions should be comma-separated'
        self.examples = ['RW, ST, CF', 'ST', 'ST, LW', 'LW, CAM', 'CM, CAM']

    def cast(self, val):
        return str(val).upper().replace(' ', '')

class playerpotentialrating(NumericSemanticType):

    def __init__(self):
        self.description = 'The potential rating of a FIFA player'
        self.valid_range = [1, 100]
        self.dtype = int
        self.format = 'Potential rating should be an integer between 1 and 100'
        self.examples = [93, 92, 91, 91, 91]

    def cast(self, val):
        return int(val)

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The height of a FIFA player'
        self.valid_range = [100, 250]
        self.dtype = int
        self.format = 'Height should be an integer'
        self.unit = 'In Centimeters'
        self.examples = [170, 185, 187, 175, 181]

    def cast(self, val):
        return int(val)

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The weight of a FIFA player'
        self.valid_range = [30, 150]
        self.dtype = int
        self.format = 'Weight should be an integer'
        self.unit = 'In Kilograms'
        self.examples = [72, 81, 83, 68, 70]

    def cast(self, val):
        return int(val)

class playerpreferredfoot(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The preferred foot of a FIFA player'
        self.valid_values = ""Should be either 'Right' or 'Left'""
        self.format = ""Should be either 'Right' or 'Left'""
        self.examples = ['Left', 'Right', 'Right', 'Right', 'Right']

    def cast(self, val):
        if str(val).title() in ['Right', 'Left']:
            return str(val).title()
        else:
            raise Exception('Invalid preferred foot')


MAPPING = {'sofifaid': playeridentifier, 'shortname': playername, 'longname': playername, 'playerpositions': playerposition, 'potential': playerpotentialrating, 'heightcm': playerheight, 'weightkg': playerweight, 'preferredfoot': playerpreferredfoot}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique identifiers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique identifiers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class orderidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Order ID'
        self.valid_values = ""Order IDs should be strings of the form 'XX-YYYY-ZZZZZZ'""
        self.format = ""Alphanumeric strings with '-' separators""
        self.examples = ['CA-2018-100111', 'CA-2018-157987', 'CA-2017-165330', 'US-2017-108504', 'CA-2017-105732']

    def cast(self, val):
        return str(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates should be strings of the form 'DD/MM/YYYY'""
        self.format = ""Strings in 'DD/MM/YYYY' format""
        self.examples = ['05/09/2017', '10/11/2017', '02/12/2018', '01/12/2018', '02/09/2018']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y').date()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates should be strings of the form 'DD/MM/YYYY'""
        self.format = ""Strings in 'DD/MM/YYYY' format""
        self.examples = ['05/09/2017', '10/11/2017', '02/12/2018', '01/12/2018', '02/09/2018']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y').date()

class shipmode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Shipping Mode'
        self.valid_values = ""Shipping mode should be one of the following: 'Standard Class', 'Second Class', 'First Class', 'Same Day'""
        self.format = 'Strings representing a shipping method'
        self.examples = ['Standard Class', 'Second Class', 'First Class', 'Same Day']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid shipping mode')
        else:
            return val

class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Customer ID'
        self.valid_values = ""Customer IDs should be strings of the form 'XX-YYYYY'""
        self.format = ""Alphanumeric strings with '-' separator""
        self.examples = ['WB-21850', 'PP-18955', 'MA-17560', 'JL-15835', 'CK-12205']

    def cast(self, val):
        return str(val)

class customername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Customer Name'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['William Brown', 'Paul Prost', 'Matt Abelman', 'John Lee', 'Chloris Kastensmidt']

    def cast(self, val):
        return str(val).title()

class segment(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Segment'
        self.valid_values = ""Segment should be one of the following: 'Consumer', 'Corporate', 'Home Office'""
        self.format = 'Strings representing a customer segment'
        self.examples = ['Consumer', 'Corporate', 'Home Office']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid segment')
        else:
            return val

class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = ""Country should be one of the following: 'United States'""
        self.format = 'Strings representing a country'
        self.examples = ['United States']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid country')
        else:
            return val

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City'
        self.valid_values = 'City names should be strings'
        self.format = 'Strings representing a city'
        self.examples = ['New York City', 'Los Angeles', 'Philadelphia', 'San Francisco', 'Seattle']

    def cast(self, val):
        return str(val)

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State'
        self.valid_values = 'State names should be strings'
        self.format = 'Strings representing a state'
        self.examples = ['California', 'New York', 'Texas', 'Pennsylvania', 'Washington']

    def cast(self, val):
        return str(val)

class postalcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Postal Code'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Postal codes should be integer values'
        self.examples = [1040, 23223, 58103, 90008, 99301]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Region'
        self.valid_values = ""Region should be one of the following: 'West', 'East', 'Central', 'South'""
        self.format = 'Strings representing a region'
        self.examples = ['West', 'East', 'Central', 'South']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid region')
        else:
            return val

class productidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product ID'
        self.valid_values = ""Product IDs should be strings of the form 'XXX-XX-XXXXXXXX'""
        self.format = ""Alphanumeric strings with '-' separators""
        self.examples = ['OFF-PA-10001970', 'TEC-AC-10003832', 'FUR-FU-10004270', 'TEC-AC-10002049', 'TEC-AC-10003628']

    def cast(self, val):
        return str(val)

class category(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Category'
        self.valid_values = ""Category should be one of the following: 'Office Supplies', 'Furniture', 'Technology'""
        self.format = 'Strings representing a product category'
        self.examples = ['Office Supplies', 'Furniture', 'Technology']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid category')
        else:
            return val

class subcategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Subcategory'
        self.valid_values = 'Subcategory names should be strings'
        self.format = 'Strings representing a product subcategory'
        self.examples = ['Binders', 'Paper', 'Furnishings', 'Phones', 'Storage']

    def cast(self, val):
        return str(val)

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Name'
        self.valid_values = 'Product names should be strings'
        self.format = 'Strings representing a product name'
        self.examples = ['Staple envelope', 'Staples', 'Easy-staple paper', 'Avery Non-Stick Binders', 'Staples in misc. colors']

    def cast(self, val):
        return str(val)

class sales(NumericSemanticType):

    def __init__(self):
        self.description = 'Sales'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be floating point numbers'
        self.examples = [0.444, 17.248, 54.49, 210.605, 22638.48]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': uniqueidentifier, 'rowid': uniqueidentifier, 'orderid': orderidentifier, 'orderdate': date, 'shipdate': date, 'shipmode': shipmode, 'customerid': customeridentifier, 'customername': customername, 'segment': segment, 'country': country, 'city': city, 'state': state, 'postalcode': postalcode, 'region': region, 'productid': productidentifier, 'category': category, 'subcategory': subcategory, 'productname': productname, 'sales': sales}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be whole numbers (integers)'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Time value'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Time should be a floating point number'
        self.unit = 'Time in seconds'
        self.examples = [500.0001, 500.0002, 500.0003, 500.0004, 500.0005]

    def cast(self, val):
        return float(val)

class signal(NumericSemanticType):

    def __init__(self):
        self.description = 'Signal value'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Signal values should be a floating point number'
        self.examples = [-2.649831415926553, -2.849462831853105, -2.860094247779619, -2.4351256637061653, -2.615657079632689]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'time': time, 'signal': signal}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Row Index'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Indexes should be integers without any decimal points'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if isinstance(val, float) and (not val.is_integer()):
            raise Exception('Invalid index')
        return int(val)

class timestamp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'Time'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Time should be floating point numbers'
        self.unit: str = 'In seconds'
        self.examples: list = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class sensorreading(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Sensor Reading'
        self.valid_range: list = [float('-inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Sensor reading should be floating point numbers'
        self.examples: list = [-2.76, -2.8557, -2.4074, -3.1404, -3.1525]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class channelstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = [0, 1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise Exception('Invalid channel status')
        return int(val)


MAPPING = {'unnamed0': index, 'time': timestamp, 'signal': sensorreading, 'openchannels': channelstatus}"
"class productcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Code'
        self.valid_values = ""Product code should be a string that is of the form 'Product_xxxx'""
        self.format = ""The code should start with 'Product_' followed by 4 digits""
        self.examples = ['Product_0993', 'Product_0979', 'Product_1359', 'Product_1295', 'Product_1286']

    def cast(self, val):
        match_obj = re.match('Product_\\d{4}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid product code')

class warehouse(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Warehouse'
        self.valid_values = ""Warehouse should be a string that is of the form 'Whse_X'""
        self.format = ""The warehouse name should start with 'Whse_' followed by a capital letter""
        self.examples = ['Whse_J', 'Whse_S', 'Whse_A', 'Whse_C']

    def cast(self, val):
        match_obj = re.match('Whse_[A-Z]', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid warehouse name')

class productcategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Product Category'
        self.valid_values = ""Product category should be a string that is of the form 'Category_xxx'""
        self.format = ""The category should start with 'Category_' followed by 3 digits""
        self.examples = ['Category_019', 'Category_005', 'Category_001', 'Category_007', 'Category_021']

    def cast(self, val):
        match_obj = re.match('Category_\\d{3}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid product category')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""The date should be a string in the format 'YYYY/MM/DD'""
        self.format = ""The date should be a string in the format 'YYYY/MM/DD'""
        self.examples = ['2012/7/27', '2012/1/19', '2012/2/3', '2012/2/9', '2012/3/2']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y/%m/%d').strftime('%Y/%m/%d')
        except ValueError:
            raise Exception('Invalid date format')

class orderdemand(NumericSemanticType):

    def __init__(self):
        self.description = 'Order Demand'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Order demand should be an integer value'
        self.examples = [100, 500, 1000, 5000, 4000000]

    def cast(self, val):
        return int(val)


MAPPING = {'productcode': productcode, 'warehouse': warehouse, 'productcategory': productcategory, 'date': date, 'orderdemand': orderdemand}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a unique integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates are strings in the format 'YYYY-MM-DD'""
        self.examples = ['2020-04-28', '2020-04-27', '2020-04-26', '2020-04-25', '2020-04-24']

    def cast(self, val):
        dt = datetime.strptime(val, '%Y-%m-%d')
        return dt.strftime('%Y-%m-%d')

class county(CategoricalSemanticType):

    def __init__(self):
        self.description = 'County'
        self.valid_values = 'Name of the County'
        self.format = 'County names should be capitalized strings'
        self.examples = ['Washington', 'Unknown', 'Jefferson', 'Franklin', 'Jackson']

    def cast(self, val):
        return str(val).title()

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State'
        self.valid_values = 'Name of the State'
        self.format = 'State names should be capitalized strings'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Indiana']

    def cast(self, val):
        return str(val).title()

class fips(NumericSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.valid_range = [1001, 78030]
        self.dtype = float
        self.format = 'FIPS should be a float'
        self.examples = [53061.0, 53061.0, 53061.0, 17031.0, 53061.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of cases should be a float'
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        return float(val)

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Number of deaths should be a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': identifier, 'date': date, 'county': county, 'state': state, 'fips': fips, 'cases': cases, 'deaths': deaths}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Must be a string in the format 'MM/DD/YYYY'""
        self.format = 'Datetime object'
        self.examples = ['01/22/2020', '01/23/2020', '01/24/2020', '01/25/2020', '01/26/2020']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y')

class province(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State'
        self.valid_values = 'Any string value representing a province or state name'
        self.format = 'String with first letter of each word capitalized'
        self.examples = ['Anhui', 'Beijing', 'Chongqing', 'Fujian', 'Gansu']

    def cast(self, val):
        return str(val).title() if pd.notna(val) else val

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'Any string value representing a country or region name'
        self.format = 'String with first letter of each word capitalized'
        self.examples = ['Mainland China', 'US', 'Russia', 'Japan', 'Mexico']

    def cast(self, val):
        val = str(val).title()
        if val == 'Us':
            val = 'US'
        if val == 'Mainland China':
            val = 'China'
        return val

class covidstat(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 statistics'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as non-negative floats'
        self.examples = [0.0, 1.0, 14.0, 6.0, 1.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return val
        val = float(val)
        if val < 0:
            raise Exception('Invalid COVID-19 statistic')
        return val

class covidstat(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 statistics'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as non-negative floats'
        self.examples = [0.0, 1.0, 14.0, 6.0, 1.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return val
        val = float(val)
        if val < 0:
            raise Exception('Invalid COVID-19 statistic')
        return val

class covidstat(NumericSemanticType):

    def __init__(self):
        self.description = 'COVID-19 statistics'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be represented as non-negative floats'
        self.examples = [0.0, 1.0, 14.0, 6.0, 1.0]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return val
        val = float(val)
        if val < 0:
            raise Exception('Invalid COVID-19 statistic')
        return val


MAPPING = {'observationdate': date, 'provincestate': province, 'countryregion': country, 'confirmed': covidstat, 'deaths': covidstat, 'recovered': covidstat}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index for ordering'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer starting from 0 and incrementing by 1'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Province or State'
        self.valid_values = 'Should be a string representing a valid province or state'
        self.format = 'Names should be capitalized'
        self.examples = ['Australian Capital Territory', 'Diamond Princess', 'Queensland', 'South Australia', 'Tasmania']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Should be a string representing a valid country'
        self.format = 'Names should be capitalized'
        self.examples = ['China', 'Canada', 'France', 'United Kingdom', 'Australia']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val))
        if country is None:
            return float('nan')
        return country.name

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude of a location'
        self.valid_range = [-90.0, 90.0]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples: list[float] = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if float(val) < -90 or float(val) > 90:
            return float('nan')
        return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude of a location'
        self.valid_range = [-180.0, 180.0]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples: list[float] = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if float(val) < -180 or float(val) > 180:
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': index, 'provincestate': regionname, 'countryregion': countryname, 'lat': latitude, 'long': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An Index that is used to refer the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise ValueError('Invalid index. Must be non-negative.')
        return val

class uidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A UID that is used to refer to a specific entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'UID should be a non-negative integer'
        self.examples = [84001001, 84001003, 84001005, 84001007, 84001009]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise ValueError('Invalid UID. Must be non-negative.')
        return val

class fips(NumericSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'FIPS code should be a non-negative float'
        self.examples = [1001.0, 1003.0, 1005.0, 1007.0, 1009.0]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise ValueError('Invalid FIPS code. Must be non-negative.')
        return val

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State name'
        self.valid_values = 'Province or State should be a string'
        self.format = 'Province or State name should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country or Region name'
        self.valid_values = 'Country or Region should be a string'
        self.format = 'Country or Region name should be capitalized'
        self.examples = ['US']

    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a float value'
        self.examples = [32.53952745, 30.72774991, 31.868263, 32.99642064, 33.98210918]

    def cast(self, val):
        val = float(val)
        if val < -90 or val > 90:
            raise ValueError('Invalid latitude. Must be between -90 and 90.')
        return round(val, 8)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a float value'
        self.examples = [-86.64408227, -87.72207058, -85.3871286, -87.12511459999996, -86.56790593]

    def cast(self, val):
        val = float(val)
        if val < -180 or val > 180:
            raise ValueError('Invalid longitude. Must be between -180 and 180.')
        return round(val, 8)

class combinedkey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Combined key of Province/State, Country/Region, and UID'
        self.valid_values = 'Combined key should be a string'
        self.format = ""Combined key should be in the format 'Province/State, Country/Region, UID'""
        self.examples = ['Autauga, Alabama, US', 'Baldwin, Alabama, US', 'Barbour, Alabama, US', 'Bibb, Alabama, US', 'Blount, Alabama, US']

    def cast(self, val):
        elements = str(val).split(',')
        if len(elements) != 3:
            raise ValueError('Invalid combined key. Must contain three elements.')
        return ', '.join([el.strip() for el in elements])


MAPPING = {'unnamed0': index, 'uid': uidentifier, 'fips': fips, 'provincestate': provincestate, 'countryregion': countryregion, 'lat': latitude, 'long': longitude, 'combinedkey': combinedkey}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a region'
        self.valid_values = 'A string representing the name of a region'
        self.format = 'Region names should be capitalized'
        self.examples = ['Australian Capital Territory', 'Diamond Princess', 'Queensland', 'South Australia', 'Tasmania']

    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'A string representing the name of a country'
        self.format = 'Country names should be capitalized'
        self.examples = ['China', 'Canada', 'France', 'United Kingdom', 'Australia']

    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples: list[float] = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        num = float(val)
        if num >= -90 and num <= 90:
            return num
        else:
            raise Exception('Invalid latitude')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples: list[float] = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        num = float(val)
        if num >= -180 and num <= 180:
            return num
        else:
            raise Exception('Invalid longitude')


MAPPING = {'unnamed0': index, 'provincestate': region, 'countryregion': country, 'lat': latitude, 'long': longitude}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity, row, or data point'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [1, 10, 100, 1000, 10000]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid identifier')
        return num

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity, row, or data point'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [1, 10, 100, 1000, 10000]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid identifier')
        return num

class geocode(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical code for identifying a specific location'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Geocode should be a non-negative integer'
        self.examples = [1001, 1003, 1005, 1007, 1009]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid geocode')
        return num

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The province or state in a country'
        self.valid_values = 'Should be a valid province/state name'
        self.format = 'The first letter should be capitalized'
        self.examples = ['Alabama', 'Texas', 'Georgia', 'Virginia', 'Kentucky']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The country or region'
        self.valid_values = 'Should be a valid country/region name'
        self.format = 'All letters should be capitalized'
        self.examples = ['US', 'UK', 'CANADA', 'CHINA', 'AUSTRALIA']

    def cast(self, val):
        return str(val).upper()

class coordinate(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinate (latitude or longitude)'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Coordinate should be a floating point number'
        self.examples = [32.54, 30.73, 31.87, 32.99, 33.98]

    def cast(self, val):
        return round(float(val), 5)

class coordinate(NumericSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinate (latitude or longitude)'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Coordinate should be a floating point number'
        self.examples = [32.54, 30.73, 31.87, 32.99, 33.98]

    def cast(self, val):
        return round(float(val), 5)

class combinedkey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Combined key of city, province/state, and country/region'
        self.valid_values = 'Should be a string combining city, province/state, and country/region'
        self.format = ""Should be of the form 'City, Province/State, Country/Region'""
        self.examples = ['Autauga, Alabama, US', 'Glenn, California, US', 'Morgan, Alabama, US', 'Clarke, Alabama, US', 'Barbour, Alabama, US']

    def cast(self, val):
        return str(val)

class population(NumericSemanticType):

    def __init__(self):
        self.description = 'Population count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be a non-negative integer'
        self.examples = [55869, 223234, 24686, 22394, 57826]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid population count')
        return num


MAPPING = {'unnamed0': identifier, 'uid': identifier, 'fips': geocode, 'provincestate': provincestate, 'countryregion': countryregion, 'lat': coordinate, 'long': coordinate, 'combinedkey': combinedkey, 'population': population}"
"class regionidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a region'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Region ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a region'
        self.valid_values = 'Name of a region or province or state in a country'
        self.format = 'Region names should be strings'
        self.examples = ['Australian Capital Territory', 'Anhui', 'Queensland', 'South Australia', 'Tasmania']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

class countryname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name of a country recognized by the United Nations'
        self.format = 'Country names should be strings'
        self.examples = ['China', 'France', 'United Kingdom', 'Australia', 'Netherlands']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val))
        if country is not None:
            return country.name
        else:
            return float('nan')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates of a location'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude coordinates should be floating point numbers in the range -90 to 90'
        self.examples = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < -90 or val > 90:
            raise Exception('Invalid latitude')
        else:
            return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates of a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude coordinates should be floating point numbers in the range -180 to 180'
        self.examples = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < -180 or val > 180:
            raise Exception('Invalid longitude')
        else:
            return float(val)


MAPPING = {'unnamed0': regionidentifier, 'provincestate': regionname, 'countryregion': countryname, 'lat': latitude, 'long': longitude}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class pregnancycount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a person has been pregnant'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Pregnancy count should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class bloodglucoselevel(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood glucose level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood glucose level should be a floating point number'
        self.unit = 'mg/dL'
        self.examples = [85.0, 89.0, 117.0, 140.0, 183.0]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a floating point number'
        self.unit = 'mmHg'
        self.examples = [62.0, 64.0, 66.0, 72.0, 80.0]

    def cast(self, val):
        return float(val)

class skinthickness(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Skin thickness'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Skin thickness should be a floating point number'
        self.unit = 'mm'
        self.examples = [0.0, 23.0, 29.0, 32.0, 35.0]

    def cast(self, val):
        return float(val)

class insulinlevel(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Insulin level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Insulin level should be a floating point number'
        self.unit = 'mu U/ml'
        self.examples = [0.0, 30.5, 94.0, 127.25, 168.0]

    def cast(self, val):
        return float(val)

class bodymassindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index (BMI)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a floating point number'
        self.examples = [0.0, 23.3, 26.6, 28.1, 33.6]

    def cast(self, val):
        return float(val)

class diabetespedigree(NumericSemanticType):

    def __init__(self):
        self.description = 'Diabetes Pedigree Function'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Diabetes Pedigree Function should be a floating point number'
        self.examples = [0.078, 0.167, 0.244, 0.351, 0.627]

    def cast(self, val):
        return float(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [21, 29, 31, 32, 50]

    def cast(self, val):
        return int(val)

class diabetesoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': rowindex, 'pregnancies': pregnancycount, 'glucose': bloodglucoselevel, 'bloodpressure': bloodpressure, 'skinthickness': skinthickness, 'insulin': insulinlevel, 'bmi': bodymassindex, 'diabetespedigreefunction': diabetespedigree, 'age': age, 'outcome': diabetesoutcome}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be a whole number'
        self.examples = [63, 37, 41, 56, 57]

    def cast(self, val):
        return int(val)

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')

class chestpain(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Chest pain type'
        self.valid_values = 'Chest pain type should be within the domain: [0,1,2,3]'
        self.format = 'Chest pain type should be represented as an integer'
        self.examples = [3, 2, 1, 1, 0]

    def cast(self, val):
        if val in range(4):
            return val
        else:
            raise Exception('Invalid chest pain type')

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Resting blood pressure'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Blood pressure should be represented as a whole number'
        self.unit = 'In mm Hg'
        self.examples = [145, 130, 130, 120, 120]

    def cast(self, val):
        return int(val)

class cholesterol(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Serum cholesterol level'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cholesterol level should be represented as a whole number'
        self.unit = 'In mg/dl'
        self.examples = [233, 250, 204, 236, 354]

    def cast(self, val):
        return int(val)

class heartbeats(NumericSemanticType):

    def __init__(self):
        self.description = 'Maximum heart rate achieved'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Heart rate should be represented as a whole number'
        self.examples = [150, 187, 172, 178, 163]

    def cast(self, val):
        return int(val)

class peak(NumericSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Peak should be represented as a floating point number'
        self.examples = [2.3, 3.5, 1.4, 0.8, 0.6]

    def cast(self, val):
        return float(val)

class slope(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.valid_values = 'Slope should be within the domain: [0,1,2]'
        self.format = 'Slope should be represented as an integer'
        self.examples = [0, 0, 2, 2, 2]

    def cast(self, val):
        if val in range(3):
            return val
        else:
            raise Exception('Invalid slope')

class vessels(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of major vessels (0-3) colored by flourosopy'
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = 'Vessels should be represented as a whole number'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        if 0 <= val <= 3:
            return int(val)
        else:
            raise Exception('Invalid vessels number')

class thalassemia(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Thalassemia'
        self.valid_values = 'Thalassemia should be within the domain: [0,1,2,3]'
        self.format = 'Thalassemia should be represented as an integer'
        self.examples = [1, 2, 2, 2, 2]

    def cast(self, val):
        if val in range(4):
            return val
        else:
            raise Exception('Invalid Thalassemia type')


MAPPING = {'age': age, 'sex': binary, 'fbs': binary, 'restecg': binary, 'exng': binary, 'output': binary, 'cp': chestpain, 'trtbps': bloodpressure, 'chol': cholesterol, 'thalachh': heartbeats, 'oldpeak': peak, 'slp': slope, 'caa': vessels, 'thall': thalassemia}"
"class patientidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each patient'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient ID should be a positive integer'
        self.examples = [9046, 51676, 31112, 60182, 1665]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of the patient'
        self.valid_values = ""Gender can only be 'Female', 'Male', or 'Other'""
        self.format = 'Gender should be a string'
        self.examples = ['Female', 'Male', 'Other']

    def cast(self, val):
        return str(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the patient in years'
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = 'Age should be a positive floating point number'
        self.examples = [67.0, 61.0, 80.0, 49.0, 79.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class hypertension(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class heartdisease(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class evermarried(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class worktype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of work the patient does'
        self.valid_values = ""Work type can be 'Private', 'Self-employed', 'children', 'Govt_job', 'Never_worked'""
        self.format = 'Work type should be a string'
        self.examples = ['Private', 'Self-employed', 'children', 'Govt_job', 'Never_worked']

    def cast(self, val):
        return str(val)

class residencetype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of residence of the patient'
        self.valid_values = ""Residence type can be 'Urban' or 'Rural'""
        self.format = 'Residence type should be a string'
        self.examples = ['Urban', 'Rural']

    def cast(self, val):
        return str(val)

class avgglucoselevel(NumericSemanticType):

    def __init__(self):
        self.description = ""Average glucose level in the patient's blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Average glucose level should be a positive floating point number'
        self.examples = [228.69, 202.21, 105.92, 171.23, 174.12]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class bmi(NumericSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index of the patient'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be a positive floating point number'
        self.examples = [36.6, float('nan'), 32.5, 34.4, 24.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 2)

class smokingstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Smoking status of the patient'
        self.valid_values = ""Smoking status can be 'never smoked', 'Unknown', 'formerly smoked', 'smokes'""
        self.format = 'Smoking status should be a string'
        self.examples = ['never smoked', 'Unknown', 'formerly smoked', 'smokes']

    def cast(self, val):
        return str(val)

class stroke(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'id': patientidentifier, 'gender': gender, 'age': age, 'hypertension': hypertension, 'heartdisease': heartdisease, 'evermarried': evermarried, 'worktype': worktype, 'residencetype': residencetype, 'avgglucoselevel': avgglucoselevel, 'bmi': bmi, 'smokingstatus': smokingstatus, 'stroke': stroke}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be formatted as an integer'
        self.examples = [18, 27, 39, 51, 64]

    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['male', 'female']

    def cast(self, val):
        return str(val).lower()

class bmi(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Body Mass Index of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be formatted as a floating point number'
        self.unit = 'kg/m^2'
        self.examples = [15.96, 26.296, 30.4, 34.694, 53.13]

    def cast(self, val):
        return round(float(val), 2)

class numchildren(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of children a person has'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of children should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 5]

    def cast(self, val):
        return int(val)

class smoker(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Region in the US where a person lives'
        self.valid_values = ""Must be one of 'northwest', 'northeast', 'southeast', 'southwest'""
        self.format = 'Region should be formatted as a string'
        self.examples = ['northwest', 'northeast', 'southeast', 'southwest']

    def cast(self, val):
        return str(val).lower()

class insurancecharge(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Charges for insurance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Charges should be formatted as a floating point number with two decimal places'
        self.unit = 'USD'
        self.examples = [1121.8739, 4740.287, 9382.033, 16639.913, 63770.42801]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'age': age, 'sex': gender, 'bmi': bmi, 'children': numchildren, 'smoker': smoker, 'region': region, 'charges': insurancecharge}"
"class mushroomedibility(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['e', 'p']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid mushroom edibility')

class mushroomshape(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Shape of a Mushroom'
        self.valid_values = ""Mushroom shape can only be one of the following: ['x', 'f', 'k', 'b', 's']""
        self.format = 'Mushroom shapes are represented by single character strings'
        self.examples = ['x', 'f', 'k', 'b', 's']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid mushroom shape')

class mushroomcolor(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Color of a Mushroom'
        self.valid_values = ""Mushroom color can only be one of the following: ['n', 'g', 'e', 'y', 'w', 'b', 'p']""
        self.format = 'Mushroom colors are represented by single character strings'
        self.examples = ['n', 'g', 'e', 'y', 'w', 'b', 'p']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid mushroom color')

class mushroomhabitat(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Habitat of a Mushroom'
        self.valid_values = ""Mushroom habitat can only be one of the following: ['d', 'g', 'p', 'l', 'u', 'm']""
        self.format = 'Mushroom habitats are represented by single character strings'
        self.examples = ['d', 'g', 'p', 'l', 'u', 'm']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid mushroom habitat')


MAPPING = {'class': mushroomedibility, 'capshape': mushroomshape, 'capcolor': mushroomcolor, 'habitat': mushroomhabitat}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a numeric type that serves as a unique identifier for rows in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are integers starting from 0 and increasing by 1 for each subsequent row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A country name is a string that represents the name of a country'
        self.valid_values = 'Country names should be valid country names as per the pycountry library'
        self.format = 'Country names should be title-cased strings'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def cast(self, val):
        if pycountry.countries.get(name=str(val).title()):
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of cases (confirmed, deaths, recovered, active, new, or last week) of COVID-19 in a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cases should be formatted as integers'
        self.unit = 'Count of cases'
        self.examples = [100, 500, 10000, 25000, 100000]

    def cast(self, val):
        return int(val)

class whoregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'WHO region is a categorical variable that represents the World Health Organization region a country belongs to'
        self.valid_values = ""WHO region should be one of the following: ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific', 'South-East Asia']""
        self.format = 'WHO region should be a string with the first letter of each word capitalized'
        self.examples = ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific']

    def cast(self, val):
        val = str(val).title()
        if val in ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific', 'South-East Asia']:
            return val
        else:
            raise Exception('Invalid WHO region')


MAPPING = {'unnamed0': index, 'countryregion': countryname, 'confirmed': cases, 'deaths': cases, 'recovered': cases, 'active': cases, 'newcases': cases, 'newdeaths': cases, 'newrecovered': cases, 'confirmedlastweek': cases, 'whoregion': whoregion}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index values'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Names of regions'
        self.valid_values: str = 'String containing name of a region'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['Australian Capital Territory', 'British Columbia', 'Queensland', 'South Australia', 'Tasmania']

    def cast(self, val):
        if pd.isnull(val):
            return ''
        else:
            return val.title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Names of countries'
        self.valid_values: str = 'String containing name of a country'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['China', 'Canada', 'France', 'United Kingdom', 'Australia']

    def cast(self, val):
        if pd.isnull(val):
            return ''
        else:
            return val.title()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Latitude values'
        self.valid_range: list = [-90, 90]
        self.dtype: object = float
        self.format: str = 'Latitude should be a float'
        self.examples: list = [33.93911, 41.1533, 28.0339, 42.5063, -11.2027]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Longitude values'
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = 'Longitude should be a float'
        self.examples: list = [67.709953, 20.1683, 1.6596, 1.5218, 17.8739]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Dates'
        self.valid_values: str = 'String containing a date in the format YYYY-MM-DD'
        self.format: str = 'Date should be in the format YYYY-MM-DD'
        self.examples: list = ['2020-01-22', '2020-02-01', '2020-02-12', '2020-01-24', '2020-01-25']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Confirmed cases of Covid-19'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Confirmed cases should be a non-negative integer'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class deaths(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Deaths due to Covid-19'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Deaths should be a non-negative integer'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class recoveredcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Recovered cases of Covid-19'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Recovered cases should be a non-negative integer'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class activecases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Active cases of Covid-19'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Active cases should be a non-negative integer'
        self.examples: list = [0, 0, 0, 0, 0]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class whoregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'World Health Organization regions'
        self.valid_values: str = 'String containing name of a WHO region'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['Europe', 'Western Pacific', 'Africa', 'Americas', 'Eastern Mediterranean']

    def cast(self, val):
        if pd.isnull(val):
            return ''
        else:
            return val.title()


MAPPING = {'unnamed0': index, 'provincestate': region, 'countryregion': country, 'lat': latitude, 'long': longitude, 'date': date, 'confirmed': confirmedcases, 'deaths': deaths, 'recovered': recoveredcases, 'active': activecases, 'whoregion': whoregion}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Dates should be strings in the format YYYY-MM-DD'
        self.examples = ['2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of cases (confirmed, deaths, recovered, active)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Case counts should be positive integers'
        self.examples: list = [555, 654, 941, 1434, 2118]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class casecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of cases (confirmed, deaths, recovered, active)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Case counts should be positive integers'
        self.examples: list = [555, 654, 941, 1434, 2118]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class casecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of cases (confirmed, deaths, recovered, active)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Case counts should be positive integers'
        self.examples: list = [555, 654, 941, 1434, 2118]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class casecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of cases (confirmed, deaths, recovered, active)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Case counts should be positive integers'
        self.examples: list = [555, 654, 941, 1434, 2118]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class newcasecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of new cases (newcases, newdeaths, newrecovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'New case counts should be positive integers'
        self.examples: list = [0, 99, 287, 493, 684]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class newcasecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of new cases (newcases, newdeaths, newrecovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'New case counts should be positive integers'
        self.examples: list = [0, 99, 287, 493, 684]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class newcasecount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of new cases (newcases, newdeaths, newrecovered)'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'New case counts should be positive integers'
        self.examples: list = [0, 99, 287, 493, 684]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class countrycount(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of countries'
        self.valid_range: list = [0, len(pycountry.countries)]
        self.dtype: object = int
        self.format: str = 'Country count should be an integer between 0 and total number of countries in the world'
        self.examples: list = [6, 8, 9, 11, 13]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        elif int(val) < 0 or int(val) > len(pycountry.countries):
            raise Exception('Invalid country count')
        else:
            return int(val)


MAPPING = {'date': date, 'confirmed': casecount, 'deaths': casecount, 'recovered': casecount, 'active': casecount, 'newcases': newcasecount, 'newdeaths': newcasecount, 'newrecovered': newcasecount, 'noofcountries': countrycount}"
"class recordidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Record ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Record ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be in the format 'YYYY-MM-DD'""
        self.format = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2020-01-22', '2020-02-01', '2020-02-12', '2020-01-24', '2020-01-25']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d')

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country/Region'
        self.valid_values = 'Country/Region should be a valid country or region name'
        self.format = 'Country/Region should be a string'
        self.examples = ['Afghanistan', 'Azerbaijan', 'Bosnia and Herzegovina', 'Algeria', 'Andorra']

    def cast(self, val):
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country/region')
        return str(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class whoregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'WHO Region'
        self.valid_values = ""WHO Region should be one of the following: ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific', 'South-East Asia']""
        self.format = 'WHO Region should be a string'
        self.examples = ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific']

    def cast(self, val):
        if val not in ['Europe', 'Africa', 'Americas', 'Eastern Mediterranean', 'Western Pacific', 'South-East Asia']:
            raise Exception('Invalid WHO Region')
        return str(val)


MAPPING = {'unnamed0': recordidentifier, 'date': date, 'countryregion': countryregion, 'confirmed': cases, 'deaths': cases, 'recovered': cases, 'active': cases, 'newcases': cases, 'newdeaths': cases, 'newrecovered': cases, 'whoregion': whoregion}"
"class uidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique ID'
        self.valid_values = 'Unique identifiers are typically integers or strings that uniquely identify an entity'
        self.format = 'UIDs must be positive integers'
        self.examples = [16, 316, 580, 63072001, 63072003]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class fips(CategoricalSemanticType):

    def __init__(self):
        self.description = 'FIPS Code'
        self.valid_values = 'FIPS codes are numbers which uniquely identify geographic areas'
        self.format = 'FIPS codes are positive integers'
        self.examples = [60.0, 66.0, 69.0, 72001.0, 72003.0]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State'
        self.valid_values = 'Should be a valid US state or territory'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'Should be a valid country or region'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['US']

    def cast(self, val):
        return str(val).title()

class lat(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude ranges from -90 to 90'
        self.examples = [-14.271, 13.4443, 15.0979, 18.180117000000006, 18.360255]

    def cast(self, val):
        return float(val)

class long(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude ranges from -180 to 180'
        self.examples = [-170.132, 144.7937, 145.6739, -66.754367, -67.17513100000001]

    def cast(self, val):
        return float(val)

class combinedkey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Combined Key'
        self.valid_values = 'Should be a valid combination of province, state, and country'
        self.format = 'The first letter of each word should be capitalized and words should be separated by commas'
        self.examples = ['American Samoa, US', 'Guam, US', 'Northern Mariana Islands, US', 'Adjuntas, Puerto Rico, US', 'Aguada, Puerto Rico, US']

    def cast(self, val):
        return str(val).title()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Should be a valid date'
        self.format = 'Dates should be in the format MM/DD/YY'
        self.examples = ['1/22/20', '1/23/20', '1/24/20', '1/25/20', '1/26/20']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%y').date()

class confirmed(NumericSemanticType):

    def __init__(self):
        self.description = 'Confirmed Cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of confirmed cases should be a non-negative integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class deaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of deaths should be a non-negative integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')


MAPPING = {'uid': uidentifier, 'fips': fips, 'provincestate': provincestate, 'countryregion': countryregion, 'lat': lat, 'long': long, 'combinedkey': combinedkey, 'date': date, 'confirmed': confirmed, 'deaths': deaths}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that represents a valid country'
        self.format = 'The name should be title-cased and should match an entry in the pycountry database'
        self.examples = ['USA', 'Brazil', 'India', 'Russia', 'South Africa']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class continentname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Continent'
        self.valid_values = 'Name should be a string that represents a valid continent'
        self.format = 'The name should be title-cased'
        self.examples = ['Africa', 'Asia', 'Europe', 'North America', 'South America']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).title()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid continent name')

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Population Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be a non-negative integer'
        self.examples = [331198130, 212710692, 1381344997, 145940924, 59381566]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Case Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be a non-negative integer'
        self.examples = [5032179, 2917562, 2025409, 871894, 538184]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class deathcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Death Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Death count should be a non-negative integer'
        self.examples = [162804, 98644, 41638, 14606, 9604]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class testcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Test Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Test count should be a non-negative integer'
        self.examples = [63139605, 13206188, 22149351, 29716907, 3149807]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class whoregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'WHO Region'
        self.valid_values = 'Name should be a string that represents a valid WHO region'
        self.format = 'The name should be title-cased'
        self.examples = ['Europe', 'Africa', 'Americas', 'EasternMediterranean', 'WesternPacific']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).title()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid WHO region')


MAPPING = {'unnamed0': index, 'countryregion': countryname, 'continent': continentname, 'population': populationcount, 'totalcases': casecount, 'totaldeaths': deathcount, 'totaltests': testcount, 'whoregion': whoregion}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique number to identify a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer or zero'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A date refers to the day of the year'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Dates should be converted to datetime objects'
        self.examples = ['2008-08-08', '2008-08-11', '2008-08-12', '2008-08-13', '2008-08-14']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class stockmovement(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise ValueError(f'{val} is not a valid value for Stock Movement. Expected values are 0 or 1.')


MAPPING = {'unnamed0': index, 'date': date, 'label': stockmovement}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the news'
        self.valid_values = ""Dates should be strings in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be strings in the format 'YYYY-MM-DD'""
        self.examples: list[str] = ['2008-10-26', '2009-10-25', '2016-06-20', '2016-06-29', '2016-06-28']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').date()


MAPPING = {'unnamed0': index, 'date': date}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Dates must be in the format YYYY-MM-DD'
        self.format = 'Dates should be stored as strings'
        self.examples = ['2016-07-01', '2016-06-30', '2016-06-29', '2016-06-28', '2016-06-27']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date format')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [17924.240234, 17712.759766, 17456.019531, 17190.509766, 17355.210938]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [17924.240234, 17712.759766, 17456.019531, 17190.509766, 17355.210938]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [17924.240234, 17712.759766, 17456.019531, 17190.509766, 17355.210938]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [17924.240234, 17712.759766, 17456.019531, 17190.509766, 17355.210938]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid stock price')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [17924.240234, 17712.759766, 17456.019531, 17190.509766, 17355.210938]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid stock price')

class stockvolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock volume'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be formatted as an integer'
        self.examples = [82160000, 133030000, 106380000, 112190000, 138740000]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid stock volume')


MAPPING = {'date': date, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'close': stockprice, 'adjclose': stockprice, 'volume': stockvolume}"
"class indexcolumn(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class indexcolumn(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples = [2020, 2021, 2022]

    def cast(self, val):
        return int(val)

class employmenttypeenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Employment type'
        self.valid_values = ""The employment type should be one of the following: ['FT', 'PT', 'CT', 'FL']""
        self.format = 'Employment type should be represented as a string'
        self.examples = ['FT', 'PT', 'CT', 'FL']

    def cast(self, val):
        return str(val)

class employmenttypeenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Employment type'
        self.valid_values = ""The employment type should be one of the following: ['FT', 'PT', 'CT', 'FL']""
        self.format = 'Employment type should be represented as a string'
        self.examples = ['FT', 'PT', 'CT', 'FL']

    def cast(self, val):
        return str(val)

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job Title'
        self.valid_values = 'Job title should be a string'
        self.format = 'Job title should be capitalized'
        self.examples = ['Data Scientist', 'Data Engineer', 'Data Analyst', 'Machine Learning Engineer', 'Research Scientist']

    def cast(self, val):
        return str(val).title()

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be a non-negative floating point number'
        self.unit = 'In specified currency'
        self.examples = [4000, 70000, 115000, 165000, 30400000]

    def cast(self, val):
        return max(float(val), 0)

class currency(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Currency'
        self.valid_values = 'The currency should be a valid currency code as per ISO 4217'
        self.format = 'Currency should be represented as a 3-letter string'
        self.examples = ['USD', 'EUR', 'GBP', 'INR', 'CAD']

    def cast(self, val):
        val = str(val)
        if pycountry.currencies.get(alpha_3=val):
            return val
        else:
            raise ValueError('Invalid currency code')

class salaryinusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary in USD should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [2859, 62726, 101570, 150000, 600000]

    def cast(self, val):
        return max(float(val), 0)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'The country should be a valid country code as per ISO 3166-1 alpha-2'
        self.format = 'Country should be represented as a 2-letter string'
        self.examples = ['US', 'GB', 'IN', 'CA', 'DE']

    def cast(self, val):
        val = str(val)
        if CountryInfo(val):
            return val
        else:
            raise ValueError('Invalid country code')

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'The country should be a valid country code as per ISO 3166-1 alpha-2'
        self.format = 'Country should be represented as a 2-letter string'
        self.examples = ['US', 'GB', 'IN', 'CA', 'DE']

    def cast(self, val):
        val = str(val)
        if CountryInfo(val):
            return val
        else:
            raise ValueError('Invalid country code')

class remoteratio(NumericSemanticType):

    def __init__(self):
        self.description = 'Remote work ratio'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Remote work ratio should be a floating point number between 0 and 100'
        self.examples = [0, 50, 100]

    def cast(self, val):
        return min(max(float(val), 0), 100)

class companysizeenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Company size'
        self.valid_values = ""The company size should be one of the following: ['S', 'M', 'L']""
        self.format = 'Company size should be represented as a string'
        self.examples = ['S', 'M', 'L']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed01': indexcolumn, 'unnamed0': indexcolumn, 'workyear': year, 'experiencelevel': employmenttypeenum, 'employmenttype': employmenttypeenum, 'jobtitle': jobtitle, 'salary': salary, 'salarycurrency': currency, 'salaryinusd': salaryinusd, 'employeeresidence': country, 'companylocation': country, 'remoteratio': remoteratio, 'companysize': companysizeenum}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Country names should be string values that correspond to an actual country'
        self.format = 'Country names should be capitalized'
        self.examples = ['Finland', 'Denmark', 'Switzerland', 'Iceland', 'Netherlands']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()):
            return val.title()
        else:
            raise Exception('Invalid country name')

class regionalindicator(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Region'
        self.valid_values = 'Region names should be string values that correspond to a defined list of regions'
        self.format = 'Region names should be capitalized'
        self.examples = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']

    def cast(self, val):
        regions = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']
        if val in regions:
            return val
        else:
            raise Exception('Invalid region name')

class ladderscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness scores should be floating point numbers between 0 and 10'
        self.examples = [7.842, 7.62, 7.571, 7.554, 7.464]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 10:
            return num
        else:
            raise Exception('Invalid happiness score')

class ladderscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness scores should be floating point numbers between 0 and 10'
        self.examples = [7.842, 7.62, 7.571, 7.554, 7.464]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 10:
            return num
        else:
            raise Exception('Invalid happiness score')

class standarderror(NumericSemanticType):

    def __init__(self):
        self.description = 'Standard Error'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Standard errors should be non-negative floating point numbers'
        self.examples = [0.032, 0.035, 0.036, 0.059, 0.027]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid standard error')

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker value for boxplot'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Whisker values should be floating point numbers between 0 and 10'
        self.examples = [7.904, 7.687, 7.643, 7.67, 7.518]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 10:
            return num
        else:
            raise Exception('Invalid whisker value')

class whisker(NumericSemanticType):

    def __init__(self):
        self.description = 'Whisker value for boxplot'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Whisker values should be floating point numbers between 0 and 10'
        self.examples = [7.904, 7.687, 7.643, 7.67, 7.518]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 10:
            return num
        else:
            raise Exception('Invalid whisker value')

class loggedgdppercapita(NumericSemanticType):

    def __init__(self):
        self.description = 'Logged GDP per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Logged GDP per capita should be non-negative floating point numbers'
        self.examples = [10.775, 10.933, 11.117, 10.878, 10.932]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid GDP per capita')

class loggedgdppercapita(NumericSemanticType):

    def __init__(self):
        self.description = 'Logged GDP per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Logged GDP per capita should be non-negative floating point numbers'
        self.examples = [10.775, 10.933, 11.117, 10.878, 10.932]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid GDP per capita')

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Social support'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Social support should be floating point numbers between 0 and 1'
        self.examples = [0.954, 0.954, 0.942, 0.983, 0.942]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid social support')

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'Social support'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Social support should be floating point numbers between 0 and 1'
        self.examples = [0.954, 0.954, 0.942, 0.983, 0.942]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid social support')

class healthylifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Healthy life expectancy'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy life expectancy should be non-negative floating point numbers'
        self.examples = [72.0, 72.7, 74.4, 73.0, 72.4]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid healthy life expectancy')

class healthylifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Healthy life expectancy'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy life expectancy should be non-negative floating point numbers'
        self.examples = [72.0, 72.7, 74.4, 73.0, 72.4]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid healthy life expectancy')

class freedomtomakelifechoices(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom to make life choices'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom to make life choices should be floating point numbers between 0 and 1'
        self.examples = [0.949, 0.946, 0.919, 0.955, 0.913]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid freedom to make life choices')

class freedomtomakelifechoices(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom to make life choices'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom to make life choices should be floating point numbers between 0 and 1'
        self.examples = [0.949, 0.946, 0.919, 0.955, 0.913]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid freedom to make life choices')

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Generosity should be floating point numbers between -1 and 1'
        self.examples = [-0.098, 0.03, 0.025, 0.16, 0.175]

    def cast(self, val):
        num = float(val)
        if num >= -1 and num <= 1:
            return num
        else:
            raise Exception('Invalid generosity')

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Generosity should be floating point numbers between -1 and 1'
        self.examples = [-0.098, 0.03, 0.025, 0.16, 0.175]

    def cast(self, val):
        num = float(val)
        if num >= -1 and num <= 1:
            return num
        else:
            raise Exception('Invalid generosity')

class perceptionsofcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Perceptions of corruption'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Perceptions of corruption should be floating point numbers between 0 and 1'
        self.examples = [0.186, 0.179, 0.292, 0.673, 0.338]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid perceptions of corruption')

class perceptionsofcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Perceptions of corruption'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Perceptions of corruption should be floating point numbers between 0 and 1'
        self.examples = [0.186, 0.179, 0.292, 0.673, 0.338]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid perceptions of corruption')

class dystopiaresidual(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia residual'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia residual should be non-negative floating point numbers'
        self.examples = [3.253, 2.868, 2.839, 2.967, 2.798]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid dystopia residual')


MAPPING = {'unnamed0': index, 'countryname': countryname, 'regionalindicator': regionalindicator, 'ladderscore': ladderscore, 'ladderscoreindystopia': ladderscore, 'standarderrorofladderscore': standarderror, 'upperwhisker': whisker, 'lowerwhisker': whisker, 'loggedgdppercapita': loggedgdppercapita, 'explainedbyloggdppercapita': loggedgdppercapita, 'socialsupport': socialsupport, 'explainedbysocialsupport': socialsupport, 'healthylifeexpectancy': healthylifeexpectancy, 'explainedbyhealthylifeexpectancy': healthylifeexpectancy, 'freedomtomakelifechoices': freedomtomakelifechoices, 'explainedbyfreedomtomakelifechoices': freedomtomakelifechoices, 'generosity': generosity, 'explainedbygenerosity': generosity, 'perceptionsofcorruption': perceptionsofcorruption, 'explainedbyperceptionsofcorruption': perceptionsofcorruption, 'dystopiaresidual': dystopiaresidual}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'The name of the country should be a valid country name as per the ISO 3166 standard'
        self.format = 'Country name should be a string and the first letter of each word should be capitalized'
        self.examples = ['Afghanistan', 'Zimbabwe', 'Russia', 'Philippines', 'Mexico']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year in which the data was collected'
        self.valid_range = [2005, 2020]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2008, 2009, 2010, 2011, 2012]

    def cast(self, val):
        return int(val)

class lifeladder(NumericSemanticType):

    def __init__(self):
        self.description = 'Life Ladder is a measure of overall life satisfaction'
        self.valid_range = [2.375, 8.019]
        self.dtype = float
        self.format = 'Life Ladder should be a floating point number'
        self.examples = [3.724, 4.402, 4.758, 3.832, 3.783]

    def cast(self, val):
        return round(float(val), 3)

class loggdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Log GDP per capita'
        self.valid_range = [6.635, 11.648]
        self.dtype = float
        self.format = 'Log GDP per capita should be a floating point number'
        self.unit = 'Log of GDP per capita in international dollars, using purchasing power parity rates'
        self.examples = [7.37, 7.54, 7.647, 7.62, 7.705]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class socialsupport(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Social support contributed to the calculation of the Happiness Score'
        self.valid_range = [0.29, 0.987]
        self.dtype = float
        self.format = 'Social support should be a floating point number'
        self.examples = [0.451, 0.552, 0.539, 0.521, 0.521]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class healthylifeexpectancyatbirth(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Healthy life expectancy at birth'
        self.valid_range = [32.3, 77.1]
        self.dtype = float
        self.format = 'Healthy life expectancy at birth should be a floating point number'
        self.unit = 'Years'
        self.examples = [50.8, 51.2, 51.6, 51.92, 52.24]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 2)

class freedomtomakelifechoices(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Freedom contributed to the calculation of the Happiness Score'
        self.valid_range = [0.258, 0.985]
        self.dtype = float
        self.format = 'Freedom should be a floating point number'
        self.examples = [0.718, 0.679, 0.6, 0.496, 0.531]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Generosity contributed to the calculation of the Happiness Score'
        self.valid_range = [-0.335, 0.698]
        self.dtype = float
        self.format = 'Generosity should be a floating point number'
        self.examples = [0.168, 0.19, 0.121, 0.162, 0.236]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class perceptionsofcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Perception of Corruption contributes to Happiness Score'
        self.valid_range = [0.035, 0.983]
        self.dtype = float
        self.format = 'Perceptions of corruption should be a floating point number'
        self.examples = [0.882, 0.85, 0.707, 0.731, 0.776]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class positiveaffect(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Positive affect contributes to Happiness Score'
        self.valid_range = [0.322, 0.944]
        self.dtype = float
        self.format = 'Positive affect should be a floating point number'
        self.examples = [0.518, 0.584, 0.618, 0.611, 0.71]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

class negativeaffect(NumericSemanticType):

    def __init__(self):
        self.description = 'The extent to which Negative affect contributes to Happiness Score'
        self.valid_range = [0.083, 0.705]
        self.dtype = float
        self.format = 'Negative affect should be a floating point number'
        self.examples = [0.258, 0.237, 0.275, 0.267, 0.268]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)


MAPPING = {'unnamed0': index, 'countryname': countryname, 'year': year, 'lifeladder': lifeladder, 'loggdppercapita': loggdppercapita, 'socialsupport': socialsupport, 'healthylifeexpectancyatbirth': healthylifeexpectancyatbirth, 'freedomtomakelifechoices': freedomtomakelifechoices, 'generosity': generosity, 'perceptionsofcorruption': perceptionsofcorruption, 'positiveaffect': positiveaffect, 'negativeaffect': negativeaffect}"
"class phvalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'pH is a measure of how acidic/basic water is'
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = 'pH values are represented as floating point numbers'
        self.unit = 'pH'
        self.examples = [7.0, 8.5, 6.8, 7.2, 6.9]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 14:
            return round(num, 3)
        else:
            return float('nan')

class waterhardness(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Water hardness is a measure of the amount of calcium and magnesium in water'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Water hardness values are represented as floating point numbers'
        self.unit = 'mg/L'
        self.examples = [180.0, 120.5, 150.8, 170.2, 160.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class watersolids(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total dissolved solids (TDS) are the total amount of mobile charged ions in a given volume of water'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'TDS values are represented as floating point numbers'
        self.unit = 'ppm'
        self.examples = [500.0, 1000.5, 1500.8, 2000.2, 2500.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class waterchloramines(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Chloramines are derivatives of ammonia by substitution of one, two or three hydrogen atoms with chlorine atoms'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Chloramines values are represented as floating point numbers'
        self.unit = 'ppm'
        self.examples = [1.0, 2.5, 3.8, 4.2, 5.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class watersulfate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sulfate ions are a common component of many minerals and chemical compounds'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulfate values are represented as floating point numbers'
        self.unit = 'mg/L'
        self.examples = [250.0, 300.5, 350.8, 400.2, 450.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class waterconductivity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Conductivity is a measure of water's capability to pass electrical flow""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Conductivity values are represented as floating point numbers'
        self.unit = 'μS/cm'
        self.examples = [1400.0, 1500.5, 1600.8, 1700.2, 1800.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class organiccarbon(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Organic carbon is a measure of the amount of carbon bound in an organic compound'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Organic carbon values are represented as floating point numbers'
        self.unit = 'mg/L'
        self.examples = [10.0, 15.5, 20.8, 25.2, 30.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class trihalomethanes(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Trihalomethanes are chemical compounds in which three of the four hydrogen atoms of methane are replaced by halogen atoms'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trihalomethanes values are represented as floating point numbers'
        self.unit = 'μg/L'
        self.examples = [60.0, 70.5, 80.8, 90.2, 100.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class waterturbidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Turbidity is the cloudiness or haziness of a fluid caused by large numbers of individual particles'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Turbidity values are represented as floating point numbers'
        self.unit = 'NTU'
        self.examples = [1.0, 2.5, 3.8, 4.2, 5.9]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

class waterpotability(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return float('nan')


MAPPING = {'ph': phvalue, 'hardness': waterhardness, 'solids': watersolids, 'chloramines': waterchloramines, 'sulfate': watersulfate, 'conductivity': waterconductivity, 'organiccarbon': organiccarbon, 'trihalomethanes': trihalomethanes, 'turbidity': waterturbidity, 'potability': waterpotability}"
"class animeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each Anime'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Anime ID should be a positive integer'
        self.examples = [32281, 5114, 28977, 9253, 9969]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid Anime ID')
        return val

class animename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Anime'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be a string with the first letter of each word capitalized'
        self.examples = ['Kimi No Na Wa.', 'Fullmetal Alchemist: Brotherhood', 'Gintama°', 'Steins;Gate', 'Gintama&#039;']

    def cast(self, val):
        return str(val).title()

class animegenre(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Genre of the Anime'
        self.valid_values = 'Genre should be a string'
        self.format = 'Genre should be a string with the first letter of each word capitalized'
        self.examples = ['Drama, Romance, School, Supernatural', 'Action, Adventure, Drama, Fantasy, Magic, Military, Shounen', 'Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen', 'Sci-Fi, Thriller', 'Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen']

    def cast(self, val):
        return str(val).title()

class animetype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of the Anime'
        self.valid_values = ""Type should be one of ['TV', 'OVA', 'Movie', 'Special', 'ONA', 'Music', 'Unknown']""
        self.format = 'Type should be a string with the first letter capitalized'
        self.examples = ['Tv', 'Ova', 'Movie', 'Special', 'Ona']

    def cast(self, val):
        val = str(val).title()
        if val not in ['Tv', 'Ova', 'Movie', 'Special', 'Ona', 'Music', 'Unknown']:
            raise Exception('Invalid Anime Type')
        return val

class animeepisodes(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of episodes in the Anime'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Number of episodes should be a positive integer'
        self.examples = [1, 64, 51, 24, 51]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid number of episodes')
        return val

class animerating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of the Anime'
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = 'Rating should be a float between 1 and 10'
        self.examples = [9.37, 9.26, 9.25, 9.17, 9.16]

    def cast(self, val):
        val = float(val)
        if val < 1 or val > 10:
            raise Exception('Invalid Rating')
        return val

class animemembers(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of members who have watched the Anime'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Number of members should be a positive integer'
        self.examples = [200630, 793665, 114262, 673572, 151266]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid number of members')
        return val


MAPPING = {'animeid': animeidentifier, 'name': animename, 'genre': animegenre, 'type': animetype, 'episodes': animeepisodes, 'rating': animerating, 'members': animemembers}"
"class useridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a user'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'User ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class animeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an anime'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Anime ID should be a positive integer'
        self.examples = [20, 24, 79, 226, 241]

    def cast(self, val):
        return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating value of an anime, given by a user'
        self.valid_range = [-1, 10]
        self.dtype = int
        self.format = ""Rating should be an integer between -1 (indicating the user hasn't watched it) and 10""
        self.examples = [-1, 6, 7, 8, 9]

    def cast(self, val):
        if val < -1 or val > 10:
            raise Exception('Invalid rating')
        return int(val)


MAPPING = {'userid': useridentifier, 'animeid': animeidentifier, 'rating': rating}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class loanamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The loan amount in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class loanamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The loan amount in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class activity(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Activity'
        self.valid_values = 'Activity should be a string that represents activity name'
        self.format = 'Activity name should be capitalized'
        self.examples = ['Farming', 'General Store', 'Personal Housing Expenses', 'Agriculture', 'Retail']

    def cast(self, val):
        return str(val).title()

class sector(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Sector'
        self.valid_values = 'Sector should be a string that represents sector name'
        self.format = 'Sector name should be capitalized'
        self.examples = ['Agriculture', 'Food', 'Retail', 'Services', 'Housing']

    def cast(self, val):
        return str(val).title()

class countrycode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country Code'
        self.valid_values = 'Country code should be a two-letter string that represents country ISO code'
        self.format = 'Country code should be in uppercase'
        self.examples = ['US', 'GB', 'FR', 'DE', 'IT']

    def cast(self, val):
        return str(val).upper()

class countrycode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country Code'
        self.valid_values = 'Country code should be a two-letter string that represents country ISO code'
        self.format = 'Country code should be in uppercase'
        self.examples = ['US', 'GB', 'FR', 'DE', 'IT']

    def cast(self, val):
        return str(val).upper()

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region'
        self.valid_values = 'Region should be a string that represents region name'
        self.format = 'Region name should be capitalized'
        self.examples = ['Lahore', 'Kaduna', 'Cusco', 'Narra, Palawan', 'Cordova, Cebu']

    def cast(self, val):
        return str(val).title() if pd.notna(val) else float('nan')

class currency(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Currency'
        self.valid_values = 'Currency should be a three-letter string that represents currency ISO code'
        self.format = 'Currency code should be in uppercase'
        self.examples = ['USD', 'EUR', 'GBP', 'JPY', 'AUD']

    def cast(self, val):
        return str(val).upper()

class partneridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Partner ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Partner ID should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class lendercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Lender count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Lender count should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class lendercount(NumericSemanticType):

    def __init__(self):
        self.description = 'Lender count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Lender count should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class borrowergenders(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Borrower genders'
        self.valid_values = 'Borrower genders should be a string that represents gender of borrowers'
        self.format = 'Genders should be lowercase'
        self.examples = ['female', 'male', 'female, female, female', 'female, female', 'female, female, female, female']

    def cast(self, val):
        return str(val).lower() if pd.notna(val) else float('nan')

class repaymentinterval(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Repayment interval'
        self.valid_values = 'Repayment interval should be one of: monthly, irregular, bullet, weekly'
        self.format = 'Repayment interval should be lowercase'
        self.examples = ['monthly', 'irregular', 'bullet', 'weekly']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': identifier, 'id': identifier, 'fundedamount': loanamount, 'loanamount': loanamount, 'activity': activity, 'sector': sector, 'countrycode': countrycode, 'country': countrycode, 'region': region, 'currency': currency, 'partnerid': partneridentifier, 'terminmonths': lendercount, 'lendercount': lendercount, 'borrowergenders': borrowergenders, 'repaymentinterval': repaymentinterval}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index Number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index number should be represented as an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Country'
        self.valid_values: str = 'Country names should be a string that matches the English short name for the country in the ISO 3166 standard'
        self.format: str = 'Country names should be formatted as the English short name in the ISO 3166 standard'
        self.examples: list = ['Afghanistan', 'Nigeria', 'Indonesia', 'Malawi', 'Brazil']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class worldregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'World Region'
        self.valid_values: str = 'World region should be one of the seven regions as defined by the World Bank'
        self.format: str = 'World regions should be formatted as a string that matches one of the seven regions as defined by the World Bank'
        self.examples: list = ['Sub-Saharan Africa', 'Latin America and Caribbean', 'East Asia and the Pacific', 'Arab States', 'South Asia']

    def cast(self, val):
        valid_regions = ['Sub-Saharan Africa', 'Latin America and Caribbean', 'East Asia and the Pacific', 'Arab States', 'South Asia', 'North America', 'Europe']
        if val in valid_regions:
            return val
        else:
            raise Exception('Invalid world region')

class mpi(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Multidimensional Poverty Index'
        self.valid_range: list = [0, 1]
        self.dtype: object = float
        self.format: str = 'MPI should be a floating point number between 0 and 1'
        self.examples: list = [0.387, 0.466, 0.3, 0.301, 0.325]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid MPI value')

class geocoordinates(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Geo Coordinates'
        self.valid_values: str = 'Geo coordinates should be a tuple of two floating point numbers representing the latitude and longitude of a location'
        self.format: str = 'Geo coordinates should be formatted as a tuple of two floating point numbers (latitude, longitude)'
        self.examples: list = ['(36.7347725, 70.81199529999999)', '(35.1671339, 63.7695384)', '(35.8042947, 69.2877535)', '(36.7550603, 66.8975372)', '(34.8100067, 67.8212104)']

    def cast(self, val):
        (lat, lon) = map(float, re.findall('-?\\d+\\.\\d+', val))
        if lat >= -90 and lat <= 90 and (lon >= -180) and (lon <= 180):
            return (lat, lon)
        else:
            raise Exception('Invalid geo coordinates')


MAPPING = {'unnamed0': index, 'country': countryname, 'worldregion': worldregion, 'mpi': mpi, 'geo': geocoordinates}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifiers are non-negative integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifiers are non-negative integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class themeidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Loan Theme ID'
        self.valid_values = 'Loan Theme ID should be a string of alphanumeric characters'
        self.format = 'Strings of alphanumeric characters'
        self.examples = ['a1050000000skGl', 'a1050000000wf0q', 'a1050000000wf14', 'a1050000000wf1Z', 'a1050000000wf0h']

    def cast(self, val):
        return str(val)

class themetype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Loan Theme Type'
        self.valid_values = 'Loan Theme Type should be a string of characters'
        self.format = 'Strings of characters'
        self.examples = ['General', 'Underserved', 'Agriculture', 'Rural Inclusion', 'Higher Education']

    def cast(self, val):
        return str(val)

class partneridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Partner Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Partner Identifiers are non-negative floating point values'
        self.examples = [151.0, 160.0, 336.0, 120.0, 198.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': uniqueidentifier, 'id': uniqueidentifier, 'loanthemeid': themeidentifier, 'loanthemetype': themetype, 'partnerid': partneridentifier}"
"class partneridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Partner ID'
        self.valid_range = [9, 545]
        self.dtype = int
        self.format = 'Partner ID should be a whole number between 9 and 545'
        self.examples = [9, 123, 154, 217, 545]

    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid partner ID')
        return num

class fieldpartnername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Field Partner Name'
        self.valid_values = 'Field Partner Name should be a string'
        self.format = 'Field Partner Name should be in title case'
        self.examples = ['Alalay Sa Kaunlaran (Aski)', 'Sef International', 'Gata Daku Multi-Purpose Cooperative (Gdmpc)', 'Paglaum Multi-Purpose Cooperative (Pmpc)', 'Interactuar']

    def cast(self, val):
        return str(val).title()

class sector(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sector'
        self.valid_values = 'Sector should be one of the following: General Financial Inclusion, Clean Energy, Other, Agriculture, Mobile Money and ICT'
        self.format = 'Sector should be in title case'
        self.examples = ['General Financial Inclusion', 'Clean Energy', 'Other', 'Agriculture', 'Mobile Money And Ict']

    def cast(self, val):
        return str(val).title()

class loanthemeidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Loan Theme ID'
        self.valid_values = ""Loan Theme ID should be a string that starts with 'a105000000'""
        self.format = 'Loan Theme ID should be in lower case'
        self.examples = ['a1050000000wf0v', 'a1050000000wf0h', 'a1050000000wf0y', 'a1050000005yinr', 'a1050000002vk6u']

    def cast(self, val):
        return str(val).lower()

class loanthemetype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Loan Theme Type'
        self.valid_values = 'Loan Theme Type should be one of the following: General, Agriculture, Underserved, Higher Education, Startup'
        self.format = 'Loan Theme Type should be in title case'
        self.examples = ['General', 'Agriculture', 'Underserved', 'Higher Education', 'Startup']

    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'Country should be a valid country name'
        self.format = 'Country should be in title case'
        self.examples = ['Philippines', 'Armenia', 'Colombia', 'Mexico', 'Vietnam']

    def cast(self, val):
        return str(val).title()

class forkiva(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region'
        self.valid_values = 'Region should be a string'
        self.format = 'Region should be in title case'
        self.examples = ['Chouf', 'Tripoli', 'Nabatieh', 'Nablus', 'La UniÍ_n']

    def cast(self, val):
        return str(val).title()

class iso(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISO'
        self.valid_values = 'ISO should be a string'
        self.format = 'ISO should be in uppercase'
        self.examples = ['PHL', 'ARM', 'COL', 'MEX', 'VNM']

    def cast(self, val):
        return str(val).upper()

class number(NumericSemanticType):

    def __init__(self):
        self.description = 'Number'
        self.valid_range = [1, 22538]
        self.dtype = int
        self.format = 'Number should be a whole number between 1 and 22538'
        self.examples = [1, 4, 15, 100, 22538]

    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid number')
        return num

class amount(NumericSemanticType):

    def __init__(self):
        self.description = 'Amount'
        self.valid_range = [25, float('inf')]
        self.dtype = float
        self.format = 'Amount should be a floating point number (in USD units)'
        self.examples = [950.0, 2600.0, 8750.0, 4929900.0, 25.0]

    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid amount')
        return num

class locationname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location Name'
        self.valid_values = 'Location Name should be a string'
        self.format = 'Location Name should be in title case'
        self.examples = ['Chouf, Lebanon', 'Tripoli, Lebanon', 'Nabatieh, Lebanon', 'Nablus, Palestine', 'UsulutÍ\x8dn, El Salvador']

    def cast(self, val):
        return str(val).title()

class ruralpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Rural Percentage'
        self.valid_range = [0.0, 100.0]
        self.dtype = float
        self.format = 'Rural Percentage should be a floating point number between 0.0 and 100.0'
        self.examples = [60.0, 73.0, 85.0, 100.0, 0.0]

    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid rural percentage')
        return num


MAPPING = {'partnerid': partneridentifier, 'fieldpartnername': fieldpartnername, 'sector': sector, 'loanthemeid': loanthemeidentifier, 'loanthemetype': loanthemetype, 'country': country, 'forkiva': forkiva, 'region': region, 'iso': iso, 'number': number, 'amount': amount, 'locationname': locationname, 'ruralpct': ruralpercent}"
""
"class bookauthor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Author of a book'
        self.valid_values = 'Author name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['JJ Smith', 'Stephen King', 'Jordan B. Peterson', 'George Orwell', 'National Geographic Kids']

    def cast(self, val):
        return str(val).title()

class bookrating(NumericSemanticType):

    def __init__(self):
        self.description = 'User rating for a book'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a floating point number, rounded to one decimal place'
        self.examples = [4.7, 4.6, 4.7, 4.7, 4.8]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 5:
            raise Exception('Invalid rating')
        return round(num, 1)

class bookreviews(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of reviews for a book'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Reviews should be an integer'
        self.examples = [17350, 2052, 18979, 21424, 7665]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of reviews')
        return num

class bookprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a book in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be an integer'
        self.unit = 'In USD'
        self.examples = [8, 22, 15, 6, 12]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid price')
        return num

class bookpublicationyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year a book was published'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [2016, 2011, 2018, 2017, 2019]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class bookgenre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Genre of a book'
        self.valid_values = ""Genre should be either 'Non Fiction' or 'Fiction'""
        self.format = 'Genre should be a string'
        self.examples = ['Non Fiction', 'Fiction', 'Non Fiction', 'Fiction', 'Non Fiction']

    def cast(self, val):
        genre = str(val)
        if genre not in ['Non Fiction', 'Fiction']:
            raise Exception('Invalid genre')
        return genre


MAPPING = {'author': bookauthor, 'userrating': bookrating, 'reviews': bookreviews, 'price': bookprice, 'year': bookpublicationyear, 'genre': bookgenre}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class caratweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The weight of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Weight should be a non-negative float'
        self.unit = 'In carats'
        self.examples = [0.23, 0.21, 0.23, 0.29, 0.31]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid weight')
        return val

class cutquality(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Quality of the cut of a diamond'
        self.valid_values = 'Should be one of: Ideal, Premium, Very Good, Good, Fair'
        self.format = 'String representing quality of cut'
        self.examples = ['Ideal', 'Premium', 'Good', 'Premium', 'Good']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val)
        if val not in ['Ideal', 'Premium', 'Very Good', 'Good', 'Fair']:
            raise Exception('Invalid cut quality')
        return val

class diamondcolor(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Color of a diamond'
        self.valid_values = 'Should be one of: D, E, F, G, H, I, J'
        self.format = 'String representing color'
        self.examples = ['E', 'E', 'E', 'I', 'J']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val)
        if val not in ['D', 'E', 'F', 'G', 'H', 'I', 'J']:
            raise Exception('Invalid diamond color')
        return val

class claritygrade(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Clarity grade of a diamond'
        self.valid_values = 'Should be one of: IF, VVS1, VVS2, VS1, VS2, SI1, SI2, I1, I2, I3'
        self.format = 'String representing clarity grade'
        self.examples = ['SI2', 'SI1', 'VS1', 'VS2', 'SI2']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val)
        if val not in ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1', 'I2', 'I3']:
            raise Exception('Invalid clarity grade')
        return val

class dimension(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dimension should be a non-negative float'
        self.unit = 'In mm'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

class dimension(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dimension should be a non-negative float'
        self.unit = 'In mm'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

class dimension(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dimension should be a non-negative float'
        self.unit = 'In mm'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

class dimension(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dimension should be a non-negative float'
        self.unit = 'In mm'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

class dimension(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dimension should be a non-negative float'
        self.unit = 'In mm'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a diamond'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative float'
        self.unit = 'In USD'
        self.examples = [326, 326, 327, 334, 335]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return val


MAPPING = {'unnamed01': index, 'unnamed0': index, 'carat': caratweight, 'cut': cutquality, 'color': diamondcolor, 'clarity': claritygrade, 'depth': dimension, 'table': dimension, 'x': dimension, 'y': dimension, 'z': dimension, 'price': priceusd}"
"class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['M', 'F']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid gender')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of a certain attribute'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number (in percentage units) with two decimal places'
        self.unit = 'Percentage'
        self.examples = [10.5, 1.3, 100.0, 0.9, 99.99]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of a certain attribute'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number (in percentage units) with two decimal places'
        self.unit = 'Percentage'
        self.examples = [10.5, 1.3, 100.0, 0.9, 99.99]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of a certain attribute'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number (in percentage units) with two decimal places'
        self.unit = 'Percentage'
        self.examples = [10.5, 1.3, 100.0, 0.9, 99.99]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of a certain attribute'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number (in percentage units) with two decimal places'
        self.unit = 'Percentage'
        self.examples = [10.5, 1.3, 100.0, 0.9, 99.99]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage of a certain attribute'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be formatted as a floating point number (in percentage units) with two decimal places'
        self.unit = 'Percentage'
        self.examples = [10.5, 1.3, 100.0, 0.9, 99.99]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid percentage')

class board(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of board'
        self.valid_values = ""Board should be either 'Central' or 'Others'""
        self.format = 'Board type should be stored as strings'
        self.examples = ['Central', 'Others', 'Central', 'Others', 'Central']

    def cast(self, val):
        if val == 'Central' or val == 'Others':
            return val
        else:
            raise Exception('Invalid board type')

class board(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of board'
        self.valid_values = ""Board should be either 'Central' or 'Others'""
        self.format = 'Board type should be stored as strings'
        self.examples = ['Central', 'Others', 'Central', 'Others', 'Central']

    def cast(self, val):
        if val == 'Central' or val == 'Others':
            return val
        else:
            raise Exception('Invalid board type')

class stream(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Stream of study'
        self.valid_values = ""Stream should be one of 'Commerce', 'Science', 'Arts'""
        self.format = 'Stream of study should be stored as strings'
        self.examples = ['Commerce', 'Science', 'Arts', 'Science', 'Commerce']

    def cast(self, val):
        if val in ['Commerce', 'Science', 'Arts']:
            return val
        else:
            raise Exception('Invalid stream')

class workexperience(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid work experience')

class specialisation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Specialisation of study'
        self.valid_values = ""Specialisation should be either 'Mkt&Fin' or 'Mkt&HR'""
        self.format = 'Specialisation should be stored as strings'
        self.examples = ['Mkt&HR', 'Mkt&Fin', 'Mkt&Fin', 'Mkt&HR', 'Mkt&Fin']

    def cast(self, val):
        if val == 'Mkt&Fin' or val == 'Mkt&HR':
            return val
        else:
            raise Exception('Invalid specialisation')

class placementstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Placed', 'Not Placed']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid placement status')

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [270000.0, 200000.0, 250000.0, 425000.0, 940000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        return round(num, 2)


MAPPING = {'gender': gender, 'sscp': percent, 'hscp': percent, 'degreep': percent, 'etestp': percent, 'mbap': percent, 'sscb': board, 'hscb': board, 'hscs': stream, 'workex': workexperience, 'specialisation': specialisation, 'status': placementstatus, 'salary': salary}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'ID number of an entity'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as a whole number'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class creditlimit(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The credit limit of an entity'
        self.valid_range = [10000.0, float('inf')]
        self.dtype = float
        self.format = 'Credit Limit should be formatted as a floating point number'
        self.unit = 'In currency unit'
        self.examples = [20000.0, 120000.0, 90000.0, 50000.0, 50000.0]

    def cast(self, val):
        return float(val)

class sex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sex of an entity'
        self.valid_values = 'Sex should be either 1 or 2'
        self.format = 'Sex should be stored as integers'
        self.examples = [1, 2]

    def cast(self, val):
        return int(val)

class education(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Education level of an entity'
        self.valid_values = 'Education should be a number from 0 to 6'
        self.format = 'Education should be stored as integers'
        self.examples = [0, 1, 2, 3, 4, 5, 6]

    def cast(self, val):
        return int(val)

class marriage(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Marriage status of an entity'
        self.valid_values = 'Marriage status should be a number from 0 to 3'
        self.format = 'Marriage status should be stored as integers'
        self.examples = [0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of an entity'
        self.valid_range = [21, float('inf')]
        self.dtype = int
        self.format = 'Age should be formatted as a whole number'
        self.examples = [21, 26, 34, 37, 57]

    def cast(self, val):
        return int(val)

class repaymentstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Repayment status of an entity'
        self.valid_range = [-2, 8]
        self.dtype = int
        self.format = 'Repayment status should be formatted as a whole number'
        self.examples = [-2, -1, 0, 2, 8]

    def cast(self, val):
        return int(val)

class defaultpayment(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': indexnumber, 'id': idnumber, 'limitbal': creditlimit, 'sex': sex, 'education': education, 'marriage': marriage, 'age': age, 'pay0': repaymentstatus, 'defaultpaymentnextmonth': defaultpayment}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be integer and non-negative'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Datetime stamp in the format of 'DD-MM-YYYY HH:MM'""
        self.valid_values = ""Datetime stamp must be in the format of 'DD-MM-YYYY HH:MM'""
        self.format = 'Datetime stamp must be stored as strings'
        self.examples = ['15-05-2020 00:00', '16-05-2020 23:45', '17-05-2020 00:00', '17-05-2020 00:15', '01-06-2020 12:45']

    def cast(self, val):
        return datetime.strptime(str(val), '%d-%m-%Y %H:%M')

class plantidentifier(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'ID of the plant'
        self.valid_values = 'Plant ID is a specific integer'
        self.format = 'Plant ID should be stored as strings'
        self.examples = ['4135001']

    def cast(self, val):
        return str(int(val))

class sourcekey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source key of the solar power generator'
        self.valid_values = 'Source key is alphanumeric'
        self.format = 'Source key must be stored as strings'
        self.examples = ['1BY6WEcLGh8j5v7', '1IF53ai7Xc0U56Y', '3PZuoBAID5Wc2HD', '7JYdWkrLSPkdwr4', 'McdE0feGgRqW7Ca']

    def cast(self, val):
        return str(val)

class power(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Power generated by the solar power generator'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power should be formatted as a floating point number'
        self.unit = 'In Watt'
        self.examples = [0.0, 41.494, 623.619, 1410.95, 14471.125]

    def cast(self, val):
        return float(val)

class power(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Power generated by the solar power generator'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power should be formatted as a floating point number'
        self.unit = 'In Watt'
        self.examples = [0.0, 41.494, 623.619, 1410.95, 14471.125]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'datetime': datetimeclass, 'plantid': plantidentifier, 'sourcekey': sourcekey, 'dcpower': power, 'acpower': power}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of a record'
        self.valid_values = ""Timestamps should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Strings representing date and time'
        self.examples = ['2020-05-15 00:00:00', '2020-05-15 00:15:00', '2020-05-15 00:30:00', '2020-05-15 00:45:00', '2020-05-15 01:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class plantidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [4135001, 4135001, 4135001, 4135001, 4135001]

    def cast(self, val):
        return int(val)

class sensoridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a sensor'
        self.valid_values = 'Sensor ID should be a string'
        self.format = 'Strings representing sensor id'
        self.examples = ['HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe']

    def cast(self, val):
        return str(val)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature recorded by a sensor'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.unit = 'In degrees Celsius'
        self.examples = [25.184316133333333, 25.08458866666667, 24.935752600000004, 24.8461304, 24.621525357142858]

    def cast(self, val):
        return float(val)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature recorded by a sensor'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.unit = 'In degrees Celsius'
        self.examples = [25.184316133333333, 25.08458866666667, 24.935752600000004, 24.8461304, 24.621525357142858]

    def cast(self, val):
        return float(val)

class irradiation(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Irradiation recorded by a sensor'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.unit = 'In W/m^2'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'datetime': timestamp, 'plantid': plantidentifier, 'sourcekey': sensoridentifier, 'ambienttemperature': temperature, 'moduletemperature': temperature, 'irradiation': irradiation}"
"class datetimeformat(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime in the format of Year-Month-Day Hour:Minute:Second'
        self.valid_values = ""Datetime strings must be of the form 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Datetime strings must be of the form 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-05-15 00:00:00', '2020-06-12 11:15:00', '2020-06-11 18:30:00', '2020-06-11 18:45:00', '2020-06-11 19:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class power(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The power generated in kilowatts (kW)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power should be represented as a float in kilowatts'
        self.unit = 'In kilowatts (kW)'
        self.examples = [0.0, 200.0, 500.0, 1000.0, 1500.0]

    def cast(self, val):
        return float(val)

class power(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The power generated in kilowatts (kW)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power should be represented as a float in kilowatts'
        self.unit = 'In kilowatts (kW)'
        self.examples = [0.0, 200.0, 500.0, 1000.0, 1500.0]

    def cast(self, val):
        return float(val)

class yieldvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The energy yield in watt-hours (Wh)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Yield should be represented as a float in watt-hours'
        self.examples = [0.0, 1000.0, 5000.0, 10000.0, 15000.0]

    def cast(self, val):
        return float(val)

class yieldvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The energy yield in watt-hours (Wh)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Yield should be represented as a float in watt-hours'
        self.examples = [0.0, 1000.0, 5000.0, 10000.0, 15000.0]

    def cast(self, val):
        return float(val)


MAPPING = {'datetime': datetimeformat, 'dcpower': power, 'acpower': power, 'dailyyield': yieldvalue, 'totalyield': yieldvalue}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier or index for a record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of the record'
        self.valid_values = ""Timestamps must be in the form 'yyyy-mm-dd HH:MM:SS'""
        self.format = 'Timestamps should be in datetime format'
        self.examples = ['2020-05-15 00:00:00', '2020-05-15 00:15:00', '2020-05-15 00:30:00', '2020-05-15 00:45:00', '2020-05-15 01:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class plantidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Plant identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Plant id should be an integer'
        self.examples = [4136001, 4136001, 4136001, 4136001, 4136001]

    def cast(self, val):
        return int(val)

class sourcekey(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Key for data source'
        self.valid_values = 'Source keys must be alphanumeric strings'
        self.format = 'Source keys should be strings'
        self.examples = ['iq8k7ZNt4Mwm3w0', 'iq8k7ZNt4Mwm3w0', 'iq8k7ZNt4Mwm3w0', 'iq8k7ZNt4Mwm3w0', 'iq8k7ZNt4Mwm3w0']

    def cast(self, val):
        return str(val)

class temperature(NumericSemanticType):

    def __init__(self):
        self.description = 'Temperature measurement in Celsius'
        self.valid_range = [-273.15, float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.examples = [27.004763700000005, 26.880811433333328, 26.682055344827592, 26.500588900000004, 26.596148]

    def cast(self, val):
        return round(float(val), 2)

class temperature(NumericSemanticType):

    def __init__(self):
        self.description = 'Temperature measurement in Celsius'
        self.valid_range = [-273.15, float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a float'
        self.examples = [27.004763700000005, 26.880811433333328, 26.682055344827592, 26.500588900000004, 26.596148]

    def cast(self, val):
        return round(float(val), 2)

class irradiation(NumericSemanticType):

    def __init__(self):
        self.description = 'Irradiation measurement'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Irradiation should be a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return round(float(val), 3)


MAPPING = {'unnamed0': identifier, 'datetime': timestamp, 'plantid': plantidentifier, 'sourcekey': sourcekey, 'ambienttemperature': temperature, 'moduletemperature': temperature, 'irradiation': irradiation}"
"class pregnancycount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Pregnancies'
        self.valid_range = [0, 20]
        self.dtype = int
        self.format = 'Pregnancy count should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class glucoselevel(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Glucose Level in the blood'
        self.valid_range = [0, 200]
        self.dtype = int
        self.unit = 'mg/dL'
        self.format = 'Glucose level should be an integer'
        self.examples = [70, 90, 110, 130, 150]

    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood Pressure Level'
        self.valid_range = [0, 200]
        self.dtype = int
        self.unit = 'mmHg'
        self.format = 'Blood Pressure Level should be an integer'
        self.examples = [60, 80, 100, 120, 140]

    def cast(self, val):
        return int(val)

class skinthickness(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Skin Thickness'
        self.valid_range = [0, 100]
        self.dtype = int
        self.unit = 'mm'
        self.format = 'Skin Thickness should be an integer'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class insulinlevel(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Insulin Level in the blood'
        self.valid_range = [0, 1000]
        self.dtype = int
        self.unit = 'mu U/ml'
        self.format = 'Insulin Level should be an integer'
        self.examples = [100, 200, 300, 400, 500]

    def cast(self, val):
        return int(val)

class bmi(NumericSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index'
        self.valid_range = [0, 70]
        self.dtype = float
        self.format = 'BMI should be a floating point number with one decimal place'
        self.examples = [18.5, 24.9, 29.9, 34.9, 39.9]

    def cast(self, val):
        return round(float(val), 1)

class diabetespedigreefunction(NumericSemanticType):

    def __init__(self):
        self.description = 'Diabetes Pedigree Function value'
        self.valid_range = [0, 2.5]
        self.dtype = float
        self.format = 'Diabetes Pedigree Function value should be a floating point number with three decimal places'
        self.examples = [0.123, 0.456, 0.789, 1.123, 1.456]

    def cast(self, val):
        return round(float(val), 3)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the person'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class diabetesoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'pregnancies': pregnancycount, 'glucose': glucoselevel, 'bloodpressure': bloodpressure, 'skinthickness': skinthickness, 'insulin': insulinlevel, 'bmi': bmi, 'diabetespedigreefunction': diabetespedigreefunction, 'age': age, 'outcome': diabetesoutcome}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Index must be a non-negative integer')
        return num

class stateorut(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the state or union territory in India'
        self.valid_values = ""Name should be a string that is of the form 'first name last name' and matches a real state or union territory in India""
        self.format = 'Each word in the name should be capitalized'
        self.examples = ['Andaman and Nicobar', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar']

    def cast(self, val):
        return str(val).title()

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be a non-negative integer'
        self.examples = [10747, 2339078, 66891, 746100, 851404]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Case count must be a non-negative integer')
        return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be a non-negative integer'
        self.examples = [10747, 2339078, 66891, 746100, 851404]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Case count must be a non-negative integer')
        return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be a non-negative integer'
        self.examples = [10747, 2339078, 66891, 746100, 851404]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Case count must be a non-negative integer')
        return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Case count should be a non-negative integer'
        self.examples = [10747, 2339078, 66891, 746100, 851404]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Case count must be a non-negative integer')
        return num

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.examples = [0.0, 0.63, 0.44, 1.08, 1.45]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Percentage must be between 0 and 100')
        return num

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.examples = [0.0, 0.63, 0.44, 1.08, 1.45]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Percentage must be between 0 and 100')
        return num

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'A percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number between 0 and 100'
        self.examples = [0.0, 0.63, 0.44, 1.08, 1.45]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Percentage must be between 0 and 100')
        return num

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'The population count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be a non-negative integer'
        self.examples = [100896618, 128500364, 658019, 290492, 40100376]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Population count must be a non-negative integer')
        return num


MAPPING = {'unnamed0': index, 'stateuts': stateorut, 'totalcases': casecount, 'active': casecount, 'discharged': casecount, 'deaths': casecount, 'activeratio': percent, 'dischargeratio': percent, 'deathratio': percent, 'population': populationcount}"
"class questionidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each survey question'
        self.valid_range = [0, 149]
        self.dtype = int
        self.format = 'Question ID is a whole number ranging from 0 to 149'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class questiontext(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The full text of a survey question'
        self.valid_values = 'The question text is a string value representing a question'
        self.format = 'Question text should start with a capitalized letter and end with a punctuation mark'
        self.examples = ['I enjoy listening to music.', 'I prefer.', 'Dance, Disco, Funk', 'Folk music', 'Country']

    def cast(self, val):
        val = str(val).strip()
        if not val.endswith('.'):
            val += '.'
        return val.title()

class questioncategory(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The category of a survey question'
        self.valid_values = 'The question category is a string value representing a category'
        self.format = 'Question category should be a single capitalized word or a list of capitalized words separated by commas'
        self.examples = ['Music', 'Slow songs or fast songs', 'Dance', 'Folk', 'Country']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': questionidentifier, 'original': questiontext, 'short': questioncategory}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index for an item'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integer numbers starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return max(0, num)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating for an item'
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = 'Ratings should be floating point numbers within the range 1 to 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 1.0:
            return 1.0
        elif num > 5.0:
            return 5.0
        else:
            return round(num, 1)


MAPPING = {'unnamed0': index, 'music': rating, 'slowsongsorfastsongs': rating, 'dance': rating, 'folk': rating, 'country': rating, 'classicalmusic': rating, 'musical': rating, 'pop': rating, 'rock': rating, 'metalorhardrock': rating, 'punk': rating, 'hiphoprap': rating, 'reggaeska': rating, 'swingjazz': rating, 'rocknroll': rating, 'alternative': rating, 'latino': rating, 'technotrance': rating, 'opera': rating, 'movies': rating, 'horror': rating, 'thriller': rating, 'comedy': rating, 'romantic': rating, 'scifi': rating, 'war': rating, 'fantasyfairytales': rating, 'animated': rating, 'documentary': rating}"
"class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a Movie'
        self.valid_values = 'Title should be a string'
        self.format = 'Title should be a string with each word starting with a capital letter'
        self.examples = ['The Irishman', 'Dangal', 'David Attenborough: A Life on Our Planet', 'Lagaan: Once Upon a Time in India', 'Roma']

    def cast(self, val):
        return str(val).title()

class movieyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of release of a movie'
        self.valid_range = [1800, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2019, 2016, 2020, 2001, 2018]

    def cast(self, val):
        return int(val)

class movierating(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Age rating of a Movie'
        self.valid_values = ""Rating should be one of the following: ['18+', '7+', '13+', 'all', '16+']""
        self.format = 'Rating should be a string'
        self.examples = ['18+', '7+', '13+', 'all', '16+']

    def cast(self, val):
        if val in ['18+', '7+', '13+', 'all', '16+']:
            return val
        else:
            return 'Not Rated'

class rottentomatoesrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rotten Tomatoes rating for a movie'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Ratings are integers between 0 and 100'
        self.examples = [98, 97, 95, 94, 94]

    def cast(self, val):
        rating = int(val.split('/')[0])
        if rating >= 0 and rating <= 100:
            return rating
        else:
            return 'Invalid Rating'

class moviestreaming(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return 'Invalid Value'

class moviestreaming(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return 'Invalid Value'

class moviestreaming(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return 'Invalid Value'

class moviestreaming(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return 'Invalid Value'


MAPPING = {'title': movietitle, 'year': movieyear, 'age': movierating, 'rottentomatoes': rottentomatoesrating, 'netflix': moviestreaming, 'hulu': moviestreaming, 'primevideo': moviestreaming, 'disney': moviestreaming}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class length(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The length measurement of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be a floating point number with one decimal place'
        self.unit = 'In cm'
        self.examples: list[float] = [5.1, 4.9, 4.7, 4.6, 5.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class length(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The length measurement of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be a floating point number with one decimal place'
        self.unit = 'In cm'
        self.examples: list[float] = [5.1, 4.9, 4.7, 4.6, 5.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class width(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The width measurement of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Width should be a floating point number with one decimal place'
        self.unit = 'In cm'
        self.examples: list[float] = [3.5, 3.0, 3.2, 3.1, 3.6]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class width(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The width measurement of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Width should be a floating point number with one decimal place'
        self.unit = 'In cm'
        self.examples: list[float] = [3.5, 3.0, 3.2, 3.1, 3.6]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class irisspecies(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Species of Iris Flower'
        self.valid_values = ""'Iris-setosa', 'Iris-versicolor', 'Iris-virginica'""
        self.format = ""Species names should be strings of the form 'Iris-xxxx'""
        self.examples = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'sepallength': length, 'petallength': length, 'sepalwidth': width, 'petalwidth': width, 'species': irisspecies}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score in a game'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Score should be a floating point number'
        self.examples = [14.0, 8.0, 9.0, 5.0, 2.0]

    def cast(self, val):
        return float(val)

class status(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['D', float('nan')]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)


MAPPING = {'unnamed0': index, 'constructorresultsid': identifier, 'raceid': identifier, 'constructorid': identifier, 'points': score, 'status': status}"
"class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class racepoints(NumericSemanticType):

    def __init__(self):
        self.description = 'Points earned in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Race points should be floating point values'
        self.examples = [14.0, 8.0, 9.0, 5.0, 2.0]

    def cast(self, val):
        return float(val)

class raceposition(NumericSemanticType):

    def __init__(self):
        self.description = 'Position in a race'
        self.valid_range = [1, 22]
        self.dtype = int
        self.format = 'Race positions should be integer values'
        self.examples = [1, 3, 2, 4, 5]

    def cast(self, val):
        return int(val)

class positiontext(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position in a race in text format'
        self.valid_values = 'Valid positions are integers from 1 to 22 in string format'
        self.format = 'Positions should be string representations of integer values'
        self.examples = ['1', '3', '2', '4', '5']

    def cast(self, val):
        return str(val)

class racewins(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of wins in a race'
        self.valid_range = [0, 19]
        self.dtype = int
        self.format = 'Number of wins should be integer values'
        self.examples = [1, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': idnumber, 'constructorstandingsid': idnumber, 'raceid': idnumber, 'constructorid': idnumber, 'points': racepoints, 'position': raceposition, 'positiontext': positiontext, 'wins': racewins}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return np.nan
        else:
            return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return np.nan
        else:
            return int(val)

class racingteam(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Racing Team'
        self.valid_values = ""Name should be a string that is of the form 'TeamName'""
        self.format = 'All words in the team name should be capitalized'
        self.examples = ['McLaren', 'BMW Sauber', 'Williams', 'Renault', 'Toro Rosso']

    def cast(self, val):
        return str(val).title()

class racingteam(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Racing Team'
        self.valid_values = ""Name should be a string that is of the form 'TeamName'""
        self.format = 'All words in the team name should be capitalized'
        self.examples = ['McLaren', 'BMW Sauber', 'Williams', 'Renault', 'Toro Rosso']

    def cast(self, val):
        return str(val).title()

class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be a string that is a valid country name according to the pycountry library'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['British', 'American', 'Italian', 'French', 'German']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val).capitalize())
        if country:
            return country.name
        else:
            raise ValueError('Invalid country name')


MAPPING = {'unnamed0': identifier, 'constructorid': identifier, 'constructorref': racingteam, 'name': racingteam, 'nationality': country}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a race in Formula 1'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Race ID should be an integer'
        self.examples = [18, 1, 329, 566, 769]

    def cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid raceid')

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a driver in Formula 1'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Driver ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid driverid')

class points(NumericSemanticType):

    def __init__(self):
        self.description = 'Points scored by a driver in a race'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Points should be a floating point number'
        self.examples = [10.0, 8.0, 6.0, 5.0, 4.0]

    def cast(self, val):
        if isinstance(val, float) and val >= 0.0:
            return val
        else:
            raise Exception('Invalid points value')

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'Position of a driver in a race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Position should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid position')

class positiontext(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position of a driver in a race expressed in text format'
        self.valid_values = 'Position text should be an integer in text format'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return val
        else:
            raise Exception('Invalid position text')

class wins(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of wins by a driver in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Wins should be an integer'
        self.examples = [1, 0, 0, 0, 0]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid wins')


MAPPING = {'raceid': raceidentifier, 'driverid': driveridentifier, 'points': points, 'position': position, 'positiontext': positiontext, 'wins': wins}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'RaceIDs should be integers'
        self.examples = [841, 842, 843, 844, 845]

    def cast(self, val):
        return int(val)

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each driver'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'DriverIDs should be integers'
        self.examples = [20, 21, 22, 23, 24]

    def cast(self, val):
        return int(val)

class lap(NumericSemanticType):

    def __init__(self):
        self.description = 'The lap number in a race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Lap numbers should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'The position of a driver in a race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Positions should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The lap time of a driver'
        self.valid_values = ""Times should be formatted as 'MM:SS.xxx'""
        self.format = 'Times should be strings'
        self.examples = ['1:38.109', '1:33.006', '1:32.713', '1:32.803', '1:32.342']

    def cast(self, val):
        if re.match('^\\d+:\\d+\\.\\d+$', val):
            return val
        else:
            raise Exception('Invalid time format')

class milliseconds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The lap time of a driver in milliseconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Times should be integers'
        self.unit = 'Milliseconds'
        self.examples = [98109, 93006, 92713, 92803, 92342]

    def cast(self, val):
        return int(val)


MAPPING = {'raceid': raceidentifier, 'driverid': driveridentifier, 'lap': lap, 'position': position, 'time': time, 'milliseconds': milliseconds}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each race in the Formula 1 dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Race IDs should be integers with no decimal places'
        self.examples = [841, 868, 902, 950, 988]

    def cast(self, val):
        return int(val)

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each driver in the Formula 1 dataset'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Driver IDs should be integers with no decimal places, and should not be zero'
        self.examples = [153, 30, 17, 4, 13]

    def cast(self, val):
        if val < 1:
            raise Exception('Invalid driverid')
        return int(val)

class pitstopnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The order of pit stops made by a driver in a race'
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = 'Pit stop numbers should be integers from 1 to 6'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 6:
            raise Exception('Invalid pitstop number')
        return num

class lapnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The lap number on which a pit stop was made'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Lap numbers should be integers and should not be zero'
        self.examples = [1, 13, 24, 35, 74]

    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid lap number')
        return num

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The timestamp at which a pit stop was made'
        self.valid_values = 'Timestamps should be in the format HH:MM:SS'
        self.format = 'Timestamps should be in the format HH:MM:SS'
        self.examples = ['14:56:46', '15:20:50', '15:01:38', '14:31:32', '14:40:12']

    def cast(self, val):
        time_obj = datetime.strptime(val, '%H:%M:%S')
        return time_obj.strftime('%H:%M:%S')

class pitstopduration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The duration of a pit stop'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pit stop durations should be floating point numbers with three decimal places for milliseconds'
        self.unit = 'In seconds'
        self.examples = [22.303, 22.838, 21.012, 24.083, 23.732]

    def cast(self, val):
        num = float(val)
        return round(num, 3)


MAPPING = {'raceid': raceidentifier, 'driverid': driveridentifier, 'stop': pitstopnumber, 'lap': lapnumber, 'time': timestamp, 'duration': pitstopduration}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'Position in a ranking or competition'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Position should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': identifier, 'qualifyid': identifier, 'raceid': identifier, 'driverid': identifier, 'constructorid': identifier, 'number': identifier, 'position': position}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID of a race in the Formula 1 Race Data dataset.'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Race IDs should be positive integers.'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1:
            raise ValueError('Invalid race ID')
        return num

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of a race in the Formula 1 Race Data dataset.'
        self.valid_range = [1950, 2018]
        self.dtype = int
        self.format = 'Years should be positive integers between 1950 and 2018.'
        self.examples = [1950, 1960, 1970, 1980, 1990]

    def cast(self, val):
        num = int(val)
        if num < 1950 or num > 2018:
            raise ValueError('Invalid year')
        return num

class roundclass(NumericSemanticType):

    def __init__(self):
        self.description = 'The round of a race in the Formula 1 Race Data dataset.'
        self.valid_range = [1, 21]
        self.dtype = int
        self.format = 'Rounds should be positive integers between 1 and 21.'
        self.examples = [1, 5, 10, 15, 20]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 21:
            raise ValueError('Invalid round')
        return num

class circuitidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID of a circuit in the Formula 1 Race Data dataset.'
        self.valid_range = [1, 73]
        self.dtype = int
        self.format = 'Circuit IDs should be positive integers between 1 and 73.'
        self.examples = [1, 10, 20, 30, 40]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 73:
            raise ValueError('Invalid circuit ID')
        return num

class grandprixname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a Grand Prix in the Formula 1 Race Data dataset.'
        self.valid_values = 'The name of a Grand Prix should be a string.'
        self.format = 'The first letter of each word in a Grand Prix name should be capitalized.'
        self.examples = ['British Grand Prix', 'Italian Grand Prix', 'Monaco Grand Prix', 'German Grand Prix', 'Belgian Grand Prix']

    def cast(self, val):
        return str(val).title()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of a race in the Formula 1 Race Data dataset.'
        self.valid_values = ""Dates should be strings in the format 'YYYY-MM-DD'.""
        self.format = ""Dates should be strings in the format 'YYYY-MM-DD'.""
        self.examples = ['2009-03-29', '2009-04-05', '2009-04-19', '2009-04-26', '2009-05-10']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise ValueError('Incorrect data format, should be YYYY-MM-DD')

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The time of a race in the Formula 1 Race Data dataset.'
        self.valid_values = ""Times should be strings in the format 'HH:MM:SS'.""
        self.format = ""Times should be strings in the format 'HH:MM:SS'.""
        self.examples = ['12:00:00', '14:00:00', '06:00:00', '13:00:00', '16:00:00']

    def cast(self, val):
        try:
            datetime.strptime(val, '%H:%M:%S')
            return val
        except ValueError:
            raise ValueError('Incorrect time format, should be HH:MM:SS')


MAPPING = {'raceid': raceidentifier, 'year': year, 'round': roundclass, 'circuitid': circuitidentifier, 'name': grandprixname, 'date': date, 'time': time}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identification number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class racingpoints(NumericSemanticType):

    def __init__(self):
        self.description = 'Points scored in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points should be a non-negative float'
        self.examples = [10.0, 8.0, 6.0, 5.0, 4.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Points cannot be negative')
        return num

class racinglaps(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of laps completed in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Laps should be a non-negative integer'
        self.examples = [58, 57, 56, 55, 54]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Laps cannot be negative')
        return num

class raceposition(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Position in the race'
        self.valid_values = 'Position should be a positive integer or a special code (R, F, etc.)'
        self.format = 'Position should be a string'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': identifier, 'resultid': identifier, 'raceid': identifier, 'driverid': identifier, 'constructorid': identifier, 'number': identifier, 'grid': identifier, 'positionorder': identifier, 'points': racingpoints, 'laps': racinglaps, 'positiontext': raceposition}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year representation'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a four digit integer'
        self.examples = [1950, 2000, 2020, 1995, 1984]

    def cast(self, val):
        year = int(val)
        if len(str(year)) != 4 or year < 0:
            raise Exception('Invalid year')
        return year


MAPPING = {'year': year}"
"class unnamed(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unnamed column with numerical values'
        self.valid_values = 'Any integer value'
        self.format = 'Integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return str(int(val))

class statusidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID for each status'
        self.valid_range = [1, 136]
        self.dtype = int
        self.format = 'Integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class racestatus(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Status of the race'
        self.valid_values = 'Any string value'
        self.format = 'Strings'
        self.examples = ['Finished', 'Disqualified', 'Accident', 'Collision', 'Engine']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': unnamed, 'statusid': statusidentifier, 'status': racestatus}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number that is used to represent the objects or records in a data set.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer value.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number that is used to represent the objects or records in a data set.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer value.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number that is used to represent the objects or records in a data set.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer value.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number that is used to represent the objects or records in a data set.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer value.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number that is used to represent the objects or records in a data set.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer value.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class binaryoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'last name, title. first name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Kelly, Mr. James', 'Wilkes, Mrs. James (Ellen Needs)', 'Myles, Mr. Thomas Francis', 'Wirz, Mr. Albert', 'Hirvonen, Mrs. Alexander (Helga E Lindqvist)']

    def cast(self, val):
        return str(val).title()

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""Should be either 'male' or 'female'""
        self.format = ""Lowercase string, either 'male' or 'female'""
        self.examples = ['male', 'female', 'male', 'female', 'male']

    def cast(self, val):
        return str(val).lower()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a non-negative floating point number'
        self.examples: list = [34.5, 47.0, 62.0, 27.0, 22.0]

    def cast(self, val):
        return float(val)

class ticketnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ticket number of a passenger'
        self.valid_values = 'A string of alphanumeric characters'
        self.format = 'Alphanumeric string'
        self.examples = ['330911', '363272', '240276', '315154', '3101298']

    def cast(self, val):
        return str(val)

class fare(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The fare paid by a passenger'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fare should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples: list = [7.8292, 7.0, 9.6875, 8.6625, 12.2875]

    def cast(self, val):
        return float(val)

class cabinnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cabin number of a passenger'
        self.valid_values = 'A string of alphanumeric characters'
        self.format = 'Alphanumeric string'
        self.examples = ['B57 B59 B63 B66', 'C31', 'B45', 'C116', 'C78']

    def cast(self, val):
        return str(val)

class port(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Port of Embarkation'
        self.valid_values = ""Should be either 'S', 'C', or 'Q'""
        self.format = ""Uppercase string, either 'S', 'C', or 'Q'""
        self.examples = ['S', 'C', 'Q', 'S', 'C']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'unnamed0': identifier, 'passengerid': identifier, 'pclass': identifier, 'sibsp': identifier, 'parch': identifier, 'survived': binaryoutcome, 'name': personname, 'sex': gender, 'age': age, 'ticket': ticketnumber, 'fare': fare, 'cabin': cabinnumber, 'embarked': port}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An ID used to uniquely identify an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class socialmediausername(NumericSemanticType):

    def __init__(self):
        self.description = 'A username used to uniquely identify a user on social media platforms'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Usernames should be formatted as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class socialmediascreenname(NumericSemanticType):

    def __init__(self):
        self.description = 'A screen name used to publicly identify a user on social media platforms'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Screen names should be formatted as a positive integer'
        self.examples = [44953, 44954, 44955, 44956, 44957]

    def cast(self, val):
        return int(val)

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The geographical location of a user'
        self.valid_values = 'Location should be a string containing the name of a city and/or country'
        self.format = ""Location should be formatted as 'City, Country'""
        self.examples = ['NYC', 'Seattle, WA', 'Chicagoland', 'Melbourne, Victoria', 'London, England']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

class tweetdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date a tweet was posted'
        self.valid_values = ""Date should be a string in the format 'dd-mm-yyyy'""
        self.format = ""Date should be formatted as 'dd-mm-yyyy'""
        self.examples = ['02-03-2020', '12-03-2020', '14-03-2020', '15-03-2020', '16-03-2020']

    def cast(self, val):
        return datetime.strptime(val, '%d-%m-%Y').date()

class sentiment(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The sentiment expressed in a tweet'
        self.valid_values = ""Sentiment should be one of the following: 'Negative', 'Positive', 'Neutral', 'Extremely Positive', 'Extremely Negative'""
        self.format = 'Sentiment should be a string'
        self.examples = ['Negative', 'Positive', 'Neutral', 'Extremely Positive', 'Extremely Negative']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': identifier, 'username': socialmediausername, 'screenname': socialmediascreenname, 'location': location, 'tweetat': tweetdate, 'sentiment': sentiment}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country names are strings that should be recognized by the pycountry library'
        self.format = 'Country names should be capitalized'
        self.examples = ['Hungary', 'Netherlands', 'Austria', 'United States of America', 'United Kingdom']

    def cast(self, val):
        try:
            pycountry.countries.lookup(val)
            return val.title()
        except:
            raise ValueError('Invalid country name')

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [1985, 1990, 1999, 2007, 2016]

    def cast(self, val):
        year = int(val)
        if 0 <= year <= datetime.now().year:
            return year
        else:
            raise ValueError('Invalid year')

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a Person'
        self.valid_values = ""Gender should be either 'male' or 'female'""
        self.format = 'Gender should be lower-case'
        self.examples = ['male', 'female']

    def cast(self, val):
        if val.lower() in ['male', 'female']:
            return val.lower()
        else:
            raise ValueError('Invalid gender')

class agegroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age Group'
        self.valid_values = ""Age group should be one of the following: '15-24 years', '25-34 years', '35-54 years', '5-14 years', '55-74 years'""
        self.format = ""Age group should be in the form of 'X-Y years'""
        self.examples = ['15-24 years', '25-34 years', '35-54 years', '5-14 years', '55-74 years']

    def cast(self, val):
        match = re.match('\\d+-\\d+ years', val)
        if match:
            return match.group()
        else:
            raise ValueError('Invalid age group')

class suicidescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Suicides'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of suicides should be a non-negative integer'
        self.examples = [0, 1, 14, 91, 22338]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        count = int(val)
        if count >= 0:
            return count
        else:
            raise ValueError('Invalid count')

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Population Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be a non-negative integer'
        self.examples = [259, 85112, 380655, 1305698, 43805214]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        count = int(val)
        if count >= 0:
            return count
        else:
            raise ValueError('Invalid count')


MAPPING = {'country': countryname, 'year': year, 'sex': gender, 'age': agegroup, 'suicidesno': suicidescount, 'population': populationcount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class basenumber(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The base number of a dispatching center'
        self.valid_values = ""Should be a string of the form 'B0xxxx'""
        self.format = ""Valid base numbers are: ['B02512', 'B02765', 'B02764', 'B02682', 'B02617']""
        self.examples = ['B02512', 'B02765', 'B02764', 'B02682', 'B02617']

    def cast(self, val):
        if re.match('B0[0-9]{4}', val):
            return val
        else:
            raise Exception('Invalid base number')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date of an Uber trip'
        self.valid_values = ""Should be a string of the form 'mm/dd/yyyy'""
        self.format = ""Dates should be stored as strings in the form 'mm/dd/yyyy'""
        self.examples = ['1/1/2015', '1/16/2015', '1/3/2015', '1/4/2015', '1/5/2015']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y').strftime('%m/%d/%Y')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of either vehicles or trips'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [190, 225, 3427, 945, 1228, 1132, 1765, 29421, 7679, 9537]

    def cast(self, val):
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'A count of either vehicles or trips'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [190, 225, 3427, 945, 1228, 1132, 1765, 29421, 7679, 9537]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'dispatchingbasenumber': basenumber, 'date': date, 'activevehicles': count, 'trips': count}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer greater than or equal to 0'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise ValueError('Invalid index value')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when the pickup was made'
        self.valid_values = ""Date should be of the format 'm/d/yyyy'""
        self.format = ""Date should be a string in the format 'm/d/yyyy'""
        self.examples = ['7/1/2014', '8/2/2014', '9/6/2014', '8/9/2014', '8/16/2014']

    def cast(self, val):
        try:
            datetime.strptime(val, '%m/%d/%Y')
            return val
        except ValueError:
            raise ValueError('Incorrect data format, should be m/d/yyyy')

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time when the pickup was made'
        self.valid_values = ""Time should be of the format 'h:mm:ss AM/PM'""
        self.format = ""Time should be a string in the format 'h:mm:ss AM/PM'""
        self.examples = ['7:39:00 AM', '8:49:00 AM', '7:46:00 AM', '7:45:00 AM', '11:22:00 PM']

    def cast(self, val):
        try:
            datetime.strptime(val, '%I:%M:%S %p')
            return val
        except ValueError:
            raise ValueError('Incorrect time format, should be h:mm:ss AM/PM')

class pickupaddress(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address where the pickup was made'
        self.valid_values = 'Address should be a string containing the street, neighborhood, and city'
        self.format = ""Address should be a string in the format 'street neighborhood, city'""
        self.examples = [' 874 E 139th St Mott Haven, BX', ' 628 E 141st St Mott Haven, BX', ' 601 E 156th St South Bronx, BX', ' 708 E 138th St Mott Haven, BX', ' 700 E 140th St Mott Haven, BX']

    def cast(self, val):
        return str(val).strip()


MAPPING = {'unnamed0': index, 'date': date, 'time': time, 'pickupaddress': pickupaddress}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return max(0, int(val))

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates should be in the format 'YYYY.MM.DD'""
        self.format = ""Dates should be stored as strings in the format 'YYYY.MM.DD'""
        self.examples = ['2014.07.06', '2014.07.04', '2014.07.05', '2014.07.06', '2014.07.05']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y.%m.%d').strftime('%Y.%m.%d')
        except ValueError:
            raise Exception('Invalid date format')

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time'
        self.valid_values = ""Times should be in the format 'HH:MM'""
        self.format = ""Times should be stored as strings in the format 'HH:MM'""
        self.examples = ['14:30', '7:15', '5:45', '4:30', '7:45']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%H:%M').strftime('%H:%M')
        except ValueError:
            raise Exception('Invalid time format')

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location'
        self.valid_values = 'Locations are represented as string values'
        self.format = 'Locations are represented as strings'
        self.examples = ['MANHATTAN', 'MANHATTAN', 'MANHATTAN', 'MANHATTAN', 'MANHATTAN']

    def cast(self, val):
        return str(val)

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address'
        self.valid_values = 'Addresses should be numerical values'
        self.format = 'Addresses should be stored as strings'
        self.examples = ['50', '143', '125', '217', '521']

    def cast(self, val):
        return str(val)

class street(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Street'
        self.valid_values = 'Streets are represented as string values'
        self.format = 'Streets are represented as strings'
        self.examples = ['MURRAY ST           ', 'AVENUE B            ', 'CHRISTOPHER ST      ', 'E 7 ST              ', 'W 26 ST             ']

    def cast(self, val):
        return str(val).strip()


MAPPING = {'unnamed0': rowindex, 'date': date, 'time': time, 'pufrom': location, 'address': address, 'street': street}"
"class basenumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Base number for the car service'
        self.valid_values = ""Base number should be a string that starts with 'B' followed by five digits""
        self.format = ""Base number format should be 'BXXXXX'""
        self.examples = ['B00013', 'B00014', 'B00029', 'B00053', 'B00095']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid base number')

class basename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the car service'
        self.valid_values = 'Name should be a string'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['MITA LIMOUSINE, INC.', 'BELL RADIO INC', 'NY 88 EXPRESS CORP.', 'JOY CAR SERVICES INC.', 'TEL-A-CAR OF NEW YORK, LLC']

    def cast(self, val):
        return str(val).title()

class pickupdate(NumericSemanticType):

    def __init__(self):
        self.description = 'Pickup date'
        self.valid_range = [datetime(2015, 1, 1), datetime(2015, 12, 31)]
        self.dtype = datetime
        self.format = ""Date should be in the format 'MM/DD/YYYY'""
        self.examples = ['01/01/2015', '02/01/2015', '03/01/2015', '04/01/2015', '05/01/2015']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y')

class numberoftrips(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of trips'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of trips should be an integer'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return int(val.strip())

class numberofvehicles(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vehicles'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of vehicles should be an integer'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        if val.strip() == '-':
            return 0
        return int(val.strip())


MAPPING = {'basenumber': basenumber, 'basename': basename, 'pickupdate': pickupdate, 'numberoftrips': numberoftrips, 'numberofvehicles': numberofvehicles}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time value'
        self.valid_values = ""Date and Time must fit the following format: 'MM/DD/YYYY hh:mm AM/PM'""
        self.format = ""Datetime should be a string of the form 'MM/DD/YYYY hh:mm AM/PM'""
        self.examples = ['07/01/2014 07:15 AM', '07/01/2014 07:30 AM', '07/01/2014 08:00 AM', '07/01/2014 09:00 AM', '07/01/2014 09:30 AM']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %I:%M %p')

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time value'
        self.valid_values = ""Date and Time must fit the following format: 'MM/DD/YYYY hh:mm AM/PM'""
        self.format = ""Datetime should be a string of the form 'MM/DD/YYYY hh:mm AM/PM'""
        self.examples = ['07/01/2014 07:15 AM', '07/01/2014 07:30 AM', '07/01/2014 08:00 AM', '07/01/2014 09:00 AM', '07/01/2014 09:30 AM']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %I:%M %p')

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address location'
        self.valid_values = 'Address must be a string that includes the street name, number, city, and state'
        self.format = ""Address should be a string in the format 'street number, street name, city, state'""
        self.examples = ['Brooklyn Museum, 200 Eastern Pkwy., BK NY;', '33 Robert Dr., Short Hills NJ;', '60 Glenmore Ave., BK NY;', '128 East 31 St., BK NY;', '139-39 35 Ave., Flushing NY;']

    def cast(self, val):
        return str(val)

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address location'
        self.valid_values = 'Address must be a string that includes the street name, number, city, and state'
        self.format = ""Address should be a string in the format 'street number, street name, city, state'""
        self.examples = ['Brooklyn Museum, 200 Eastern Pkwy., BK NY;', '33 Robert Dr., Short Hills NJ;', '60 Glenmore Ave., BK NY;', '128 East 31 St., BK NY;', '139-39 35 Ave., Flushing NY;']

    def cast(self, val):
        return str(val)

class statusenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of the trip'
        self.valid_values = ""Status should be one of the following: ['Arrived', 'Assigned', 'Cancelled']""
        self.format = ""Status should be a string that is either 'Arrived', 'Assigned', or 'Cancelled'""
        self.examples = ['Cancelled', 'Arrived', 'Assigned', 'Assigned', 'Assigned']

    def cast(self, val):
        if str(val) in ['Arrived', 'Assigned', 'Cancelled']:
            return str(val)
        else:
            raise Exception('Invalid status')


MAPPING = {'unnamed0': index, 'date': datetimeclass, 'time': datetimeclass, 'puaddress': address, 'doaddress': address, 'status': statusenum}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

class datetimeobject(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time of the Event'
        self.valid_values = ""Values must fit the following format: 'MM/DD/YYYY HH:MM'""
        self.format = 'Values are stored as strings'
        self.examples = ['9/4/2014 9:51', '8/27/2014 21:13', '9/4/2014 14:16', '9/4/2014 16:08', '8/28/2014 2:41']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %H:%M').strftime('%m/%d/%Y %H:%M')
        except ValueError:
            return float('nan')

class latitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Values should be decimal numbers'
        self.units = 'Degrees'
        self.examples = [40.64705, 40.74916, 40.64065, 40.75002, 40.76715]

    def cast(self, val):
        try:
            num = float(val)
            if num >= -90 and num <= 90:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')

class longitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Values should be decimal numbers'
        self.units = 'Degrees'
        self.examples = [-73.77988, -73.98373, -73.97594, -73.99514, -73.98636]

    def cast(self, val):
        try:
            num = float(val)
            if num >= -180 and num <= 180:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')


MAPPING = {'unnamed0': identifier, 'timeoftrip': datetimeobject, 'startlat': latitude, 'startlng': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be of the form 'mm/dd/yyyy'""
        self.format = ""Date should be a string that is of the form 'mm/dd/yyyy'""
        self.examples = ['9/10/2014', '9/4/2014', '7/16/2014', '9/9/2014', '7/23/2014']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y').strftime('%m/%d/%Y')

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time'
        self.valid_values = ""Time should be of the form 'hh:mm'""
        self.format = ""Time should be a string that is of the form 'hh:mm'""
        self.examples = ['20:27', '21:04', '22:20', '12:28', '16:45']

    def cast(self, val):
        return val.strip()

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address'
        self.valid_values = 'Address should be a string representing a location'
        self.format = 'Address should be a string with leading and trailing whitespaces removed'
        self.examples = ['622 THIRD AV', 'E 77TH ST', '67 WEST PALISADES BLVD', '130 MIDDLE NECK RD', '36 E 31ST ST']

    def cast(self, val):
        return val.strip()

class citystate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City or State'
        self.valid_values = 'City or State should be a string representing a location'
        self.format = 'City or State should be a string with leading and trailing whitespaces removed'
        self.examples = ['M', 'BK', 'QU', 'BX', 'JFK']

    def cast(self, val):
        return val.strip()


MAPPING = {'unnamed0': index, 'date': date, 'time': time, 'streetaddress': address, 'citystate': citystate}"
"class recordindex(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the record'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Record index should be an integer greater or equal to 0'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description: str = ""Timestamp in the format of 'month/day/year hour:minute:second'""
        self.valid_values: str = 'Timestamps must be strings that can be parsed into datetime objects'
        self.format: str = ""Timestamps should be in the format of 'month/day/year hour:minute:second'""
        self.examples: list = ['4/1/2014 0:11:00', '4/1/2014 0:17:00', '4/1/2014 0:21:00', '4/1/2014 0:28:00', '4/1/2014 0:33:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M:%S')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Latitude coordinate'
        self.valid_range: list = [-90, 90]
        self.dtype: object = float
        self.format: str = 'Latitude should be a floating point number between -90 and 90'
        self.examples: list = [40.769, 40.7267, 40.7316, 40.7588, 40.7594]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Longitude coordinate'
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = 'Longitude should be a floating point number between -180 and 180'
        self.examples: list = [-73.9549, -74.0345, -73.9873, -73.9776, -73.9722]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num

class uberbase(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Uber base code'
        self.valid_values: str = ""Uber base codes should be either 'B02598' or 'B02512'""
        self.format: str = ""Uber base codes should be strings of the form 'B025XX'""
        self.examples: list = ['B02512', 'B02598']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid base code')
        return val


MAPPING = {'unnamed0': recordindex, 'datetime': timestamp, 'lat': latitude, 'lon': longitude, 'base': uberbase}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row Number should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = ""Datetime should be a string in the form 'M/D/YYYY H:MM:SS'""
        self.format = 'Datetime should be a datetime.datetime object'
        self.examples = ['8/1/2014 0:03:00', '8/1/2014 0:09:00', '8/1/2014 0:12:00', '8/1/2014 0:12:00', '8/1/2014 0:12:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M:%S')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be formatted as a floating point number'
        self.examples = [40.7366, 40.726, 40.7209, 40.7387, 40.7323]

    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be formatted as a floating point number'
        self.examples = [-73.9906, -73.9918, -74.0507, -73.9856, -74.0077]

    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid longitude')
        return num

class basecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Base Code'
        self.valid_values = ""Base Code should be a string that is either 'B02598' or 'B02512'""
        self.format = 'Base Code should be a string'
        self.examples = ['B02598', 'B02512', 'B02598', 'B02512', 'B02598']

    def cast(self, val):
        if val not in ['B02598', 'B02512']:
            raise ValueError('Invalid base code')
        return str(val)


MAPPING = {'unnamed0': rownumber, 'datetime': datetimeclass, 'lat': latitude, 'lon': longitude, 'base': basecode}"
"class dispatchnumber(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Dispatching base number'
        self.valid_values = ""Dispatching base numbers should be strings beginning with 'B'""
        self.format = ""Dispatching base numbers should be strings of the form 'B#####'""
        self.examples = ['B02764', 'B02682', 'B02598', 'B02617']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid dispatching base number')

class pickuptime(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of the pickup'
        self.valid_values = ""Pickup dates should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Pickup dates should be datetime objects'
        self.examples = ['2015-03-27 19:28:00', '2015-06-16 17:36:00', '2015-03-31 20:21:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class affiliatednumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Affiliated base number'
        self.valid_values = ""Affiliated base numbers should be strings beginning with 'B'""
        self.format = ""Affiliated base numbers should be strings of the form 'B#####'""
        self.examples = ['B02764', 'B02682', 'B02598', 'B02617', 'B02765']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            return float('nan')

class locationidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Location ID'
        self.valid_range = [1, 265]
        self.dtype = int
        self.format = 'Location IDs should be integers'
        self.examples = [141, 65, 100, 80, 90]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 265:
            raise Exception('Invalid location ID')
        else:
            return num


MAPPING = {'dispatchingbasenum': dispatchnumber, 'pickupdate': pickuptime, 'affiliatedbasenum': affiliatednumber, 'locationid': locationidentifier}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes must be nonnegative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0 or not val.is_integer():
            raise Exception('Invalid index')
        else:
            return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = ""Datetime must fit the following format: 'm/d/yyyy h:mm:ss'""
        self.format = ""Datetime must be stored as a string in the following format: 'm/d/yyyy h:mm:ss'""
        self.examples = ['7/1/2014 0:03:00', '7/1/2014 0:05:00', '7/1/2014 0:06:00', '7/1/2014 0:09:00', '7/1/2014 0:20:00']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')
        except ValueError:
            raise Exception('Invalid datetime')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number in degrees'
        self.examples = [40.7586, 40.7605, 40.732, 40.7635, 40.7204]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        else:
            return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number in degrees'
        self.examples = [-73.9706, -73.9994, -73.9999, -73.9793, -74.0047]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        else:
            return num

class baseidentifier(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Base ID of an Uber trip'
        self.valid_values = ""Base ID should be one of the following: ['B02598', 'B02512']""
        self.format = 'Base ID should be a string'
        self.examples = ['B02512', 'B02512', 'B02512', 'B02512', 'B02512']

    def cast(self, val):
        if val in ['B02598', 'B02512']:
            return str(val)
        else:
            raise Exception('Invalid Base ID')


MAPPING = {'unnamed0': index, 'datetime': datetimeclass, 'lat': latitude, 'lon': longitude, 'base': baseidentifier}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Numeric index for rows in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values, starting from 0 and incrementing by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'DateTime represented as strings'
        self.valid_values = ""DateTime should be of the form 'MM/DD/YYYY HH:MM:SS'""
        self.format = 'DateTime should be parsed to datetime objects'
        self.examples = ['6/1/2014 0:00:00', '6/1/2014 0:01:00', '6/1/2014 0:04:00', '6/1/2014 0:04:00', '6/1/2014 0:07:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M:%S')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinate for a location'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Floating point number with precision up to 4 decimal places'
        self.examples = [40.7293, 40.7131, 40.3461, 40.7555, 40.688]

    def cast(self, val):
        val = round(float(val), 4)
        if self.valid_range[0] <= val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid latitude value')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinate for a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Floating point number with precision up to 4 decimal places'
        self.examples = [-73.992, -74.0097, -74.661, -73.9833, -74.1831]

    def cast(self, val):
        val = round(float(val), 4)
        if self.valid_range[0] <= val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid longitude value')

class base(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Categorical variable representing the base of an Uber vehicle'
        self.valid_values = ""Valid values for base are: ['B02598', 'B02512']""
        self.format = 'Should be a string'
        self.examples = ['B02512', 'B02598']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid base value')


MAPPING = {'unnamed0': index, 'datetime': datetimeclass, 'lat': latitude, 'lon': longitude, 'base': base}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The row index in a tabular dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices must be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid row index')
        return num

class datetimestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time represented as a string'
        self.valid_values = 'Strings that can be parsed into a datetime object'
        self.format = 'MM/DD/YYYY HH:MM:SS'
        self.examples = ['5/1/2014 0:02:00', '5/1/2014 0:06:00', '5/1/2014 0:15:00', '5/1/2014 0:17:00', '5/1/2014 0:17:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M:%S')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude coordinates must be floating point numbers between -90 and 90'
        self.examples = [40.7521, 40.6965, 40.7464, 40.7463, 40.7594]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude coordinates must be floating point numbers between -180 and 180'
        self.examples = [-73.9914, -73.9715, -73.9838, -74.0011, -73.9734]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num

class uberbaseidentifier(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'ID of Uber base'
        self.valid_values = ""IDs must be of the form 'B0XXXX'""
        self.format = ""IDs are strings that start with 'B0' followed by 4 digits""
        self.examples = ['B02598', 'B02512']

    def cast(self, val):
        match_obj = re.match('B0[0-9]{4}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid base ID')


MAPPING = {'unnamed0': rowindex, 'datetime': datetimestamp, 'lat': latitude, 'lon': longitude, 'base': uberbaseidentifier}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not math.isfinite(val):
            raise Exception('Invalid index')
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime in string format'
        self.valid_values = ""Datetime should be of the format 'M/D/YYYY H:MM:SS'""
        self.format = 'Datetime should be a string'
        self.examples = ['9/1/2014 0:01:00', '9/1/2014 0:01:00', '9/1/2014 0:03:00', '9/1/2014 0:06:00', '9/1/2014 0:11:00']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')
        except ValueError:
            raise Exception('Invalid datetime format')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinate'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [40.2201, 40.75, 40.7559, 40.745, 40.8145]

    def cast(self, val):
        lat = float(val)
        if lat < -90 or lat > 90:
            raise Exception('Invalid latitude')
        return lat

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinate'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-74.0021, -74.0027, -73.9864, -73.9889, -73.9444]

    def cast(self, val):
        lon = float(val)
        if lon < -180 or lon > 180:
            raise Exception('Invalid longitude')
        return lon

class uberbase(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Uber base code'
        self.valid_values = ""Base code should be one of ['B02598', 'B02512']""
        self.format = 'Base code should be a string'
        self.examples = ['B02512', 'B02512', 'B02512', 'B02512', 'B02512']

    def cast(self, val):
        if val not in ['B02598', 'B02512']:
            raise Exception('Invalid base code')
        return val


MAPPING = {'unnamed0': index, 'datetime': datetimeclass, 'lat': latitude, 'lon': longitude, 'base': uberbase}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Index Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datasetidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dataset Identifier'
        self.valid_values = 'Dataset Identifier should be a single character string'
        self.format = 'Dataset Identifier should be a single character string'
        self.examples = ['a', 'b', 'c', 'd', 'e']

    def cast(self, val):
        return str(val)

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename'
        self.valid_values = 'Filename should be a string'
        self.format = 'Filename should be a string'
        self.examples = ['set_a/artifact__201012172012.wav', 'set_a/artifact__201105040918.wav', 'set_a/artifact__201106021541.wav', 'set_a/artifact__201105041959.wav', 'set_a/artifact__201105051017.wav']

    def cast(self, val):
        return str(val)

class labeltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Label Type'
        self.valid_values = ""Label Type should be one of the following: ['artifact', 'murmur', 'normal', 'extrahls']""
        self.format = 'Label Type should be a string'
        self.examples = ['artifact', 'murmur', 'normal', 'extrahls']

    def cast(self, val):
        if val in ['artifact', 'murmur', 'normal', 'extrahls']:
            return str(val)
        else:
            return 'Invalid Label Type'

class sublabeltype(NumericSemanticType):

    def __init__(self):
        self.description = 'Sub Label Type'
        self.valid_range = [float('nan'), float('nan')]
        self.dtype = float
        self.format = 'Sub Label Type should be a NaN value'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return 'Invalid Sub Label Type'


MAPPING = {'unnamed0': indexidentifier, 'dataset': datasetidentifier, 'fname': filename, 'label': labeltype, 'sublabel': sublabeltype}"
"class recordingfilename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of a sound recording'
        self.valid_values = ""Filename should be a string that follows the format 'set_a/<label>__<timestamp>.wav'""
        self.format = ""Set name, label, and timestamp should be separated by double underscores and the file extension should be '.wav'""
        self.examples = ['set_a/normal__201105011626.wav', 'set_a/normal__201105021804.wav', 'set_a/normal__201103090635.wav', 'set_a/normal__201102081321.wav', 'set_a/normal__201108011118.wav']

    def cast(self, val):
        val = str(val)
        match_obj = re.match('set_a/[a-z]+__\\d{12}\\.wav$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid filename')

class recordingcycle(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The cycle number of a sound recording'
        self.valid_range: list = [1, float('inf')]
        self.dtype: object = int
        self.format: str = 'Cycle should be an integer greater than or equal to 1'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid cycle number')
        return val

class soundtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of heart sound'
        self.valid_values = ""The sound type should be either 'S1' or 'S2'""
        self.format = 'The sound type should be represented as a string'
        self.examples = ['S1', 'S2']

    def cast(self, val):
        val = str(val)
        if val not in ['S1', 'S2']:
            raise Exception('Invalid sound type')
        return val

class soundlocation(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The location of a sound in the recording'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Location should be an integer greater than or equal to 0'
        self.examples: list = [10021, 20759, 35075, 47244, 62992]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid location')
        return val


MAPPING = {'fname': recordingfilename, 'cycle': recordingcycle, 'sound': soundtype, 'location': soundlocation}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datasetlabel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Label of the dataset'
        self.valid_values = ""Dataset label should be 'b'""
        self.format = 'Dataset label should be stored as strings'
        self.examples = ['b', 'b', 'b', 'b', 'b']

    def cast(self, val):
        return str(val)

class heartbeatlabel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Label of the heart beat sound'
        self.valid_values = ""Heart beat label should be one of the following: ['normal', 'murmur', 'extrastole']""
        self.format = 'Heart beat label should be stored as strings'
        self.examples = ['normal', 'murmur', 'extrastole']

    def cast(self, val):
        return str(val)

class subheartbeatlabel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Sublabel of the heart beat sound'
        self.valid_values = ""Sublabel should be one of the following: ['noisynormal', 'noisymurmur'] or nan""
        self.format = 'Sublabel should be stored as strings or nan'
        self.examples = ['noisynormal', 'noisymurmur', float('nan')]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)


MAPPING = {'unnamed0': index, 'dataset': datasetlabel, 'label': heartbeatlabel, 'sublabel': subheartbeatlabel}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class stateus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'U.S. State names'
        self.valid_values = 'U.S. state names should be strings and match one of the 50 U.S. states or Washington, D.C.'
        self.format = 'State names should be capitalized and spelled correctly'
        self.examples = ['Vermont', 'New Hampshire', 'Missouri', 'North Carolina', 'Indiana']

    def cast(self, val):
        val = str(val).title()
        if val in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            return val
        else:
            raise Exception('Invalid U.S. state name')

class countyus(CategoricalSemanticType):

    def __init__(self):
        self.description = 'U.S. County names'
        self.valid_values = 'U.S. county names should be strings'
        self.format = 'County names should be capitalized and spelled correctly'
        self.examples = ['Jefferson County', 'Wayne County', 'Lincoln County', 'Randolph County', 'Madison County']

    def cast(self, val):
        return str(val).title()

class votecount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a positive integer'
        self.units = 'Votes'
        self.examples = [1089, 3778, 13230, 1198049, 1210507]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class votecount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The number of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a positive integer'
        self.units = 'Votes'
        self.examples = [1089, 3778, 13230, 1198049, 1210507]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A percentage value'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number with two decimal places'
        self.units = 'Percent'
        self.examples = [80, 99.88, 100]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)


MAPPING = {'unnamed0': identifier, 'state': stateus, 'county': countyus, 'currentvotes': votecount, 'totalvotes': votecount, 'percent': percent}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index number should be represented as integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'US States should be valid state names in the United States'
        self.format = 'US States should be represented as full names with the first letter capitalized'
        self.examples = ['Delaware', 'Vermont', 'New Hampshire', 'Missouri', 'North Carolina']

    def cast(self, val):
        if str(val).title() in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            return str(val).title()
        else:
            raise Exception('Invalid US state')

class countyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'County Name'
        self.valid_values = 'County name should be valid county names in the United States'
        self.format = 'County name should be represented as full names with the first letter capitalized'
        self.examples = ['Wayne County', 'Lincoln County', 'Jefferson County', 'Jackson County', 'Morgan County']

    def cast(self, val):
        return str(val).title()

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['John Carney', 'Julianne Murray', 'Kathy DeMatteis', 'John Machurek', 'Erynn Whitney']

    def cast(self, val):
        return str(val).title()

class politicalparty(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Political Party'
        self.valid_values = 'Political party should be one of the recognized political parties in the United States'
        self.format = 'Political party should be represented as an abbreviation'
        self.examples = ['DEM', 'REP', 'IND', 'LIB', 'WRI']

    def cast(self, val):
        return str(val).upper()

class votecount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Count of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be represented as an integer'
        self.unit = 'votes'
        self.examples = [44352, 39332, 1115, 616, 191678]

    def cast(self, val):
        return int(val)

class electionresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': indexnumber, 'state': usstate, 'county': countyname, 'candidate': personname, 'party': politicalparty, 'votes': votecount, 'won': electionresult}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a state in the United States'
        self.valid_values = 'Name should be a string that is a valid US state name'
        self.format = 'State names should be capitalized and spelled correctly'
        self.examples = ['Delaware', 'Indiana', 'Missouri', 'Montana', 'New Hampshire']

    def cast(self, val):
        val = str(val).strip().title()
        if pycountry.subdivisions.get(code=f'US-{val.upper()}'):
            return val
        else:
            raise Exception('Invalid US state name')

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote counts should be integers'
        self.examples = [492635, 3020383, 3012274, 603587, 792804]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'state': usstate, 'votes': votecount}"
"class electiondistrict(CategoricalSemanticType):

    def __init__(self):
        self.description = 'An election district in the United States'
        self.valid_values = ""Districts are in the format 'State’s District Number' or 'State at large'""
        self.format = ""Districts should be capitalized and follow the format 'State’s District Number' or 'State at large'""
        self.examples = ['Louisiana’s 5th district', 'Vermont at large', 'Hawaii’s 2nd district', 'New York’s 17th district', 'Louisiana’s 2nd district']

    def cast(self, val):
        return str(val).title()

class candidate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a candidate'
        self.valid_values = ""Candidate name should be a string in the format 'First name Last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Lisa Blunt Rochester', 'Lee Murphy', 'Catherine Purcell', 'David Rogers', 'Matt Gaetz']

    def cast(self, val):
        return str(val).title()

class politicalparty(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Political party of a candidate'
        self.valid_values = ""Common values are 'DEM', 'REP', 'LIB', 'WRI', 'IND'""
        self.format = 'Party should be represented by an abbreviation'
        self.examples = ['DEM', 'REP', 'LIB', 'WRI', 'IND']

    def cast(self, val):
        return str(val).upper()

class totalvotes(NumericSemanticType):

    def __init__(self):
        self.description = 'The total votes received by a candidate'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be represented as integers'
        self.examples = [281382, 196392, 6682, 3814, 283352]

    def cast(self, val):
        return int(val)

class electionwon(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'district': electiondistrict, 'candidate': candidate, 'party': politicalparty, 'totalvotes': totalvotes, 'won': electionwon}"
"class district(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The political district for a given state'
        self.valid_values = ""The district should be a string that starts with the state's name followed by the district type and number""
        self.format = ""Districts should be represented as 'State’s District Number'""
        self.examples = ['Delaware at large', 'Florida’s 1st district', 'Florida’s 2nd district', 'Florida’s 3rd district', 'Florida’s 4th district']

    def cast(self, val):
        return str(val)

class votes(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of votes cast in an election'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be represented as an integer'
        self.examples = [488270, 438562, 311999, 390401, 504940]

    def cast(self, val):
        return int(val)

class votes(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of votes cast in an election'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be represented as an integer'
        self.examples = [488270, 438562, 311999, 390401, 504940]

    def cast(self, val):
        return int(val)

class votepercent(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage of votes cast for a candidate'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be represented as a floating point number'
        self.examples = [100.0, 95.0, 90.0, 85.0, 80.0]

    def cast(self, val):
        percent = float(val)
        if percent < 0 or percent > 100:
            raise Exception('Invalid percentage')
        return percent


MAPPING = {'district': district, 'currentvotes': votes, 'totalvotes': votes, 'percent': votepercent}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier that is generally used as the primary key'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return abs(int(val))

class usstate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'U.S. State'
        self.valid_values = 'Name of a U.S. state or territory'
        self.format = 'U.S. states should be represented as capitalized strings'
        self.examples = ['Maine', 'Massachusetts', 'Texas', 'Vermont', 'New Hampshire']

    def cast(self, val):
        return str(val).title()

class uscounty(CategoricalSemanticType):

    def __init__(self):
        self.description = 'U.S. County'
        self.valid_values = 'Name of a U.S. county'
        self.format = 'U.S. counties should be represented as capitalized strings'
        self.examples = ['Washington County', 'Jefferson County', 'Jackson County', 'Lincoln County', 'Franklin County']

    def cast(self, val):
        return str(val).title()

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a non-negative integer'
        self.examples = [87025, 287633, 129352, 41681, 32881]

    def cast(self, val):
        return abs(int(val))

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a non-negative integer'
        self.examples = [87025, 287633, 129352, 41681, 32881]

    def cast(self, val):
        return abs(int(val))

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'The percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number within the range 0-100'
        self.examples = [100, 99.5, 75, 50, 0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        elif num < 0:
            return 0
        else:
            return 100


MAPPING = {'unnamed0': identifier, 'state': usstate, 'county': uscounty, 'currentvotes': votecount, 'totalvotes': votecount, 'percent': percent}"
"class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'States within the United States of America'
        self.valid_values = 'Names of states should be strings that match with the official names of states in the USA'
        self.format = 'Names should be capitalized and full (not abbreviated)'
        self.examples = ['New York', 'California', 'Texas', 'Florida', 'Illinois']

    def cast(self, val):
        return str(val).title()

class county(CategoricalSemanticType):

    def __init__(self):
        self.description = 'County names within the United States of America'
        self.valid_values = 'County names should be strings that match with the official names of counties in the USA'
        self.format = ""Names should be capitalized and contain the word 'County'""
        self.examples = ['Washington County', 'Jefferson County', 'Jackson County', 'Lincoln County', 'Franklin County']

    def cast(self, val):
        return str(val).title()

class candidate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of presidential candidates'
        self.valid_values = 'Names should be strings that match with the official names of the candidates'
        self.format = 'Names should be capitalized'
        self.examples = ['Joe Biden', 'Donald Trump', 'Jo Jorgensen', 'Howie Hawkins']

    def cast(self, val):
        return str(val).title()

class party(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Abbreviations of political parties in the USA'
        self.valid_values = 'Abbreviations should be strings that match with the official abbreviations of political parties in the USA'
        self.format = 'Abbreviations should be uppercase'
        self.examples = ['DEM', 'REP', 'LIB', 'WRI', 'IND']

    def cast(self, val):
        return str(val).upper()

class totalvotes(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of votes cast'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Votes should be formatted as an integer'
        self.examples = [44552, 41009, 1044, 420, 195034]

    def cast(self, val):
        return int(val)

class won(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'state': state, 'county': county, 'candidate': candidate, 'party': party, 'totalvotes': totalvotes, 'won': won}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'Valid US State names'
        self.format = 'The name of the state with the first letter capitalized'
        self.examples = ['Delaware', 'District of Columbia', 'Florida', 'Georgia', 'Hawaii']

    def cast(self, val):
        return str(val).title()

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote count in US elections'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be formatted as an integer'
        self.examples = [504010, 344356, 11067456, 4997716, 574469]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'state': usstate, 'totalvotes': votecount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an ordered, numeric index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid index')
        return val

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US State Name'
        self.valid_values = 'A valid U.S. state name'
        self.format = 'State names should be capitalized and spelled out fully'
        self.examples = ['Maine', 'Massachusetts', 'Georgia', 'Texas', 'New Hampshire']

    def cast(self, val):
        val = str(val).title()
        if val not in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            raise Exception('Invalid US state')
        return val

class countyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'County Name'
        self.valid_values = 'A valid county name'
        self.format = 'County names should be capitalized and spelled out fully'
        self.examples = ['Jackson County', 'Lincoln County', 'Washington County', 'Jefferson County', 'Clay County']

    def cast(self, val):
        val = str(val).title()
        return val

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a non-negative integer'
        self.examples = [84975, 279462, 126498, 8187, 3097]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid vote count')
        return val

class votecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote Count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a non-negative integer'
        self.examples = [84975, 279462, 126498, 8187, 3097]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid vote count')
        return val

class votepercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Vote percentage should be a non-negative float between 0 and 100'
        self.examples = [100, 100, 100, 100, 100]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 100:
            raise Exception('Invalid vote percentage')
        return val


MAPPING = {'unnamed0': index, 'state': usstate, 'county': countyname, 'currentvotes': votecount, 'totalvotes': votecount, 'percent': votepercent}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index, often used to uniquely identify rows in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'US States should be a string that matches one of the 50 US States or 5 territories'
        self.format = 'The string should be in title format, with the first letter of each word capitalized'
        self.examples = ['Georgia', 'Maine', 'Tennessee', 'Louisiana', 'Texas']

    def cast(self, val):
        return str(val).title()

class county(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US Counties'
        self.valid_values = 'US Counties should be a string that matches a county in the US'
        self.format = ""The string should be in title format, with the first letter of each word capitalized and 'County' after the name of the county""
        self.examples = ['Jackson County', 'Washington County', 'Jefferson County', 'Lincoln County', 'Clay County']

    def cast(self, val):
        return str(val).title()

class candidate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Candidate Names'
        self.valid_values = 'Candidate Names should be a string'
        self.format = 'The string should be in title format, with the first letter of each word capitalized'
        self.examples = ['Lauren Witzke', 'Mark Turley', 'Nadine Frost', 'Lauren Witzke', 'Mark Turley']

    def cast(self, val):
        return str(val).title()

class party(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Political Parties'
        self.valid_values = 'Political Parties should be a string'
        self.format = 'The string should be in upper case'
        self.examples = ['DEM', 'IND', 'LIB', 'REP', 'WRI']

    def cast(self, val):
        return str(val).upper()

class totalvotes(NumericSemanticType):

    def __init__(self):
        self.description = 'Total Votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total Votes should be a non-negative integer'
        self.examples = [38571, 1553, 958, 80081, 4277]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'state': state, 'county': county, 'candidate': candidate, 'party': party, 'totalvotes': totalvotes}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index representing the order of the rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'U.S. State'
        self.valid_values = 'Any of the 50 U.S. states'
        self.format = 'State names should be capitalized'
        self.examples = ['Delaware', 'Georgia', 'Idaho', 'Illinois', 'Iowa']

    def cast(self, val):
        return str(val).title()

class votecount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The count of total votes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote count should be a non-negative integer'
        self.unit = 'In Count'
        self.examples = [490935, 4952440, 858826, 5969702, 1670617]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'state': usstate, 'totalvotes': votecount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a record in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a record in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job title for a specific role'
        self.valid_values = 'Job titles should be string values'
        self.format = 'Job titles could be in any capitalization format'
        self.examples = ['Data Analyst', 'Senior Data Analyst', 'Junior Data Analyst', 'Business Data Analyst', 'Sr. Data Analyst']

    def cast(self, val):
        return str(val)

class salaryestimate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Salary estimates for a specific role'
        self.valid_values = 'Salary estimates should be string values'
        self.format = 'Salary estimates are typically represented as ranges (min-max) in USD'
        self.examples = ['$42K-$76K (Glassdoor est.)', '$41K-$78K (Glassdoor est.)', '$50K-$86K (Glassdoor est.)', '$35K-$67K (Glassdoor est.)', '$43K-$76K (Glassdoor est.)']

    def cast(self, val):
        return str(val)

class rating(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Average ratings for a company'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a float between 0 and 5'
        self.unit = 'Ratings are typically represented on a scale of 0-5'
        self.examples = [3.2, 3.8, 3.4, 4.1, 3.9]

    def cast(self, val):
        return round(float(val), 1)

class easyapply(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['True', '-1']

    def cast(self, val):
        if val == 'True':
            return True
        else:
            return False


MAPPING = {'unnamed01': index, 'unnamed0': index, 'jobtitle': jobtitle, 'salaryestimate': salaryestimate, 'rating': rating, 'easyapply': easyapply}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the index of a row in a dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid index')
        return int(val)

class authorname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the author'
        self.valid_values = 'Name should be a string'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Barracuda Brigade', 'Reasoning With Facts', 'Fed Up', 'Starkman', 'Admin']

    def cast(self, val):
        if pd.isnull(val):
            return val
        return str(val).title()

class datetimeiso(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents date and time in ISO 8601 format'
        self.valid_range = [datetime.min, datetime.max]
        self.dtype = datetime
        self.format = 'Date and time should be represented as a datetime object'
        self.examples = [datetime(2020, 1, 1, 12, 0, 0), datetime(2022, 12, 31, 23, 59, 59), datetime.now()]

    def cast(self, val):
        if pd.isnull(val):
            return val
        return datetime.fromisoformat(val)

class datetimeiso(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents date and time in ISO 8601 format'
        self.valid_range = [datetime.min, datetime.max]
        self.dtype = datetime
        self.format = 'Date and time should be represented as a datetime object'
        self.examples = [datetime(2020, 1, 1, 12, 0, 0), datetime(2022, 12, 31, 23, 59, 59), datetime.now()]

    def cast(self, val):
        if pd.isnull(val):
            return val
        return datetime.fromisoformat(val)

class languagecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a language code'
        self.valid_values = 'Should be a valid ISO 639-1 language code'
        self.format = 'Should be a string of 2 lowercase letters'
        self.examples = ['en', 'ru', 'es', 'de', 'fr']

    def cast(self, val):
        if pd.isnull(val):
            return val
        return str(val).lower()

class url(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Represents a URL'
        self.valid_values = 'Should be a valid URL'
        self.format = 'Should be a string'
        self.examples = ['www.google.com', 'www.facebook.com', 'www.wikipedia.org', 'www.amazon.com', 'www.twitter.com']

    def cast(self, val):
        if pd.isnull(val):
            return val
        return str(val)

class countrycode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a country code'
        self.valid_values = 'Should be a valid ISO 3166-1 alpha-2 country code'
        self.format = 'Should be a string of 2 uppercase letters'
        self.examples = ['US', 'GB', 'RU', 'DE', 'FR']

    def cast(self, val):
        if pd.isnull(val):
            return val
        return str(val).upper()

class domainrank(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the rank of a domain'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating-point number'
        self.examples = [0.0, 100.0, 1000.0, 10000.0, 50000.0]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid domain rank')
        return float(val)

class spamscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a spam score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Should be a floating-point number between 0 and 1'
        self.examples = [0.0, 0.1, 0.2, 0.3, 0.4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0 or val > 1:
            raise Exception('Invalid spam score')
        return float(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid count')
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid count')
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid count')
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid count')
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents a count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid count')
        return int(val)

class fakenewstype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a type of fake news'
        self.valid_values = ""Should be one of the following: 'bs', 'bias', 'conspiracy', 'hate', 'satire'""
        self.format = 'Should be a string'
        self.examples = ['bs', 'bias', 'conspiracy', 'hate', 'satire']

    def cast(self, val):
        if pd.isnull(val):
            return val
        if val not in self.examples:
            raise Exception('Invalid fake news type')
        return str(val)


MAPPING = {'unnamed0': index, 'author': authorname, 'published': datetimeiso, 'crawled': datetimeiso, 'language': languagecode, 'siteurl': url, 'country': countrycode, 'domainrank': domainrank, 'spamscore': spamscore, 'repliescount': count, 'participantscount': count, 'likes': count, 'comments': count, 'shares': count, 'type': fakenewstype}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as integer values with no decimal places'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class username(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The username of a Twitter account'
        self.valid_values = ""Usernames must fit the following regex: '^([a-zA-Z0-9_]+)$'""
        self.format = 'Usernames should be strings with no spaces or special characters, except for underscores'
        self.examples = ['user123', 'name_example', 'Name', 'user_name', 'USERNAME']

    def cast(self, val):
        return re.sub('\\W+', '', val)

class userlocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of the user on their Twitter profile'
        self.valid_values = 'User locations must be a valid location name (city, state, country, etc.)'
        self.format = 'User locations should be strings with no special characters'
        self.examples = ['New York, NY', 'London, UK', 'Paris, France', 'Tokyo, Japan', 'Berlin, Germany']

    def cast(self, val):
        return str(val).replace('\n', ' ').replace('\r', '')

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of when the user created their Twitter account'
        self.valid_values = ""Timestamps must fit the following regex: '^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$'""
        self.format = ""Timestamps should be strings in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-01-01 00:00:00', '2019-12-31 23:59:59', '2020-02-29 12:34:56', '2019-02-28 01:23:45', '2020-12-31 11:11:11']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of when the user created their Twitter account'
        self.valid_values = ""Timestamps must fit the following regex: '^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$'""
        self.format = ""Timestamps should be strings in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-01-01 00:00:00', '2019-12-31 23:59:59', '2020-02-29 12:34:56', '2019-02-28 01:23:45', '2020-12-31 11:11:11']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class followercount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of followers a user has on Twitter'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Follower counts should be formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class friendcount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of friends (users that the user is following) a user has on Twitter'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Friend counts should be formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class favouritecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of favourites (likes) a user has given on Twitter'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Favourite counts should be formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class userverified(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class hashtags(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Hashtags used in the tweet'
        self.valid_values = ""Hashtags must fit the following regex: '^#[a-zA-Z0-9_]+$'""
        self.format = ""Hashtags should be strings beginning with a '#' and containing no spaces or special characters, except for underscores""
        self.examples = ['#COVID19', '#coronavirus', '#pandemic', '#virus', '#stayhome']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).replace('[', '').replace(']', '').replace(""'"", '').replace(' ', '').split(',')

class source(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of the tweet'
        self.valid_values = ""Sources must be a valid Twitter client (e.g. 'Twitter for iPhone', 'Twitter for Android', 'Twitter Web App', etc.)""
        self.format = 'Sources should be strings with no special characters'
        self.examples = ['Twitter for iPhone', 'Twitter for Android', 'Twitter Web App', 'TweetDeck', 'Hootsuite Inc.']

    def cast(self, val):
        return val

class isretweet(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'unnamed0': identifier, 'username': username, 'userlocation': userlocation, 'usercreated': timestamp, 'date': timestamp, 'userfollowers': followercount, 'userfriends': friendcount, 'userfavourites': favouritecount, 'userverified': userverified, 'hashtags': hashtags, 'source': source, 'isretweet': isretweet}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number assigned to an object or record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number assigned to an object or record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier is a unique number assigned to an object or record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class calorielevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Calorie level represents the level of calories in a food item'
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = 'Calorie level should be formatted as an integer, 0 for low, 1 for medium and 2 for high'
        self.examples = [0, 0, 1, 0, 0]

    def cast(self, val):
        if val >= 0 and val <= 2:
            return int(val)
        else:
            raise Exception('Invalid calorie level')


MAPPING = {'unnamed0': identifier, 'id': identifier, 'i': identifier, 'calorielevel': calorielevel}"
"class useridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a user'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'User ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class useridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a user'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'User ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class itemcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of items associated with a user'
        self.valid_range = [2, float('inf')]
        self.dtype = int
        self.format = 'Count should be a positive integer'
        self.examples = [31, 39, 27, 1513, 376]

    def cast(self, val):
        return int(val)

class ratingcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of ratings given by a user'
        self.valid_range = [2, float('inf')]
        self.dtype = int
        self.format = 'Count should be a positive integer'
        self.examples = [31, 39, 27, 1513, 376]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': useridentifier, 'u': useridentifier, 'nitems': itemcount, 'nratings': ratingcount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A column that represents an index or ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class useridentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""A column that represents a user's unique ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'User ID should be represented as an integer'
        self.examples = [38094, 1293707, 8937, 126440, 57222]

    def cast(self, val):
        return int(val)

class recipeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""A column that represents a recipe's unique ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Recipe ID should be represented as an integer'
        self.examples = [40893, 40893, 44394, 85009, 85009]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A column that represents a date'
        self.valid_values = 'Dates should be in the format: YYYY-MM-DD'
        self.format = 'Dates should be stored as strings in the format: YYYY-MM-DD'
        self.examples = ['2003-02-17', '2011-12-21', '2002-12-01', '2010-02-27', '2011-10-01']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').date()

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'A column that represents a rating value'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Ratings should be represented as a floating point number'
        self.examples = [4.0, 5.0, 4.0, 5.0, 5.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'userid': useridentifier, 'recipeid': recipeidentifier, 'date': date, 'rating': rating}"
"class recipeindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the recipe in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Recipe index should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class recipename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a recipe'
        self.valid_values = 'Recipe name should be a string'
        self.format = 'Recipe name should be represented as a string'
        self.examples = ['arriba   baked winter squash mexican style', 'a bit different  breakfast pizza', 'all in the kitchen  chili', 'alouette  potatoes', 'amish  tomato ketchup  for canning']

    def cast(self, val):
        return str(val)

class recipeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID for a recipe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Recipe ID should be represented as an integer'
        self.examples = [137739, 31490, 112140, 59389, 44061]

    def cast(self, val):
        return int(val)

class recipepreparationtime(NumericSemanticType):

    def __init__(self):
        self.description = 'Time in minutes required for preparing a recipe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Preparation time should be represented as an integer'
        self.examples = [55, 30, 130, 45, 190]

    def cast(self, val):
        return int(val)

class recipecontributoridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique ID for a recipe contributor'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Contributor ID should be represented as an integer'
        self.examples = [47892, 26278, 196586, 68585, 41706]

    def cast(self, val):
        return int(val)

class recipedate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when the recipe was submitted'
        self.valid_values = 'Recipe date should be a string in the format YYYY-MM-DD'
        self.format = 'Recipe date should be represented as a string in the format YYYY-MM-DD'
        self.examples = ['2005-09-16', '2002-06-17', '2005-02-25', '2003-04-14', '2002-10-25']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class recipesteps(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of steps in a recipe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of steps should be represented as an integer'
        self.examples = [11, 9, 6, 11, 5]

    def cast(self, val):
        return int(val)

class recipeingredients(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of ingredients in a recipe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of ingredients should be represented as an integer'
        self.examples = [7, 6, 13, 11, 8]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': recipeindex, 'name': recipename, 'id': recipeidentifier, 'minutes': recipepreparationtime, 'contributorid': recipecontributoridentifier, 'submitted': recipedate, 'nsteps': recipesteps, 'ningredients': recipeingredients}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be in the format 'yyyy-mm-dd'""
        self.format = ""Date should be a string of the form 'yyyy-mm-dd'""
        self.examples = ['2005-12-23', '2006-10-07', '2008-04-12', '2007-11-13', '2013-07-31']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a float between 0 and 5'
        self.examples = [0.0, 1.0, 2.5, 3.5, 5.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 5:
            raise Exception('Invalid rating')
        return round(num, 2)


MAPPING = {'unnamed0': identifier, 'userid': identifier, 'recipeid': identifier, 'u': identifier, 'i': identifier, 'date': date, 'rating': rating}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.format = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2000-02-25', '2005-04-25', '2005-03-13', '2002-09-15', '2002-09-23']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a float between 0 and 5'
        self.examples = [5.0, 4.0, 3.0, 2.0, 1.0]

    def cast(self, val):
        return float(val) if 0 <= float(val) <= 5 else float('nan')


MAPPING = {'unnamed0': identifier, 'userid': identifier, 'recipeid': identifier, 'u': identifier, 'i': identifier, 'date': date, 'rating': rating}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a data entry in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class useridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a user'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'User ID should be formatted as an integer'
        self.examples: list = [76535, 160497, 930021, 58439, 628951]

    def cast(self, val):
        return int(val)

class recipeidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a recipe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Recipe ID should be formatted as an integer'
        self.examples: list = [33627, 75307, 100961, 154105, 14525]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of an event'
        self.valid_values = ""Dates must fit the following regex: '[0-9]{4}-[0-9]{2}-[0-9]{2}'""
        self.format = ""Dates must be of the form 'YYYY-MM-DD'""
        self.examples = ['2005-02-15', '2005-10-24', '2008-11-30', '2007-03-24', '2008-02-16']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating of a recipe'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be formatted as a floating point number between 0 and 5'
        self.examples: list = [4.0, 4.0, 4.0, 4.0, 5.0]

    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 5:
            return round(num, 1)
        else:
            raise ValueError('Invalid rating')

class u(NumericSemanticType):

    def __init__(self):
        self.description = 'Unknown numeric attribute'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be formatted as an integer'
        self.examples: list = [5, 23, 31, 44, 45]

    def cast(self, val):
        return int(val)

class i(NumericSemanticType):

    def __init__(self):
        self.description = 'Unknown numeric attribute'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be formatted as an integer'
        self.examples: list = [177317, 170785, 165555, 177453, 142367]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'userid': useridentifier, 'recipeid': recipeidentifier, 'date': date, 'rating': rating, 'u': u, 'i': i}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a game'
        self.valid_range = [2000020001, float('inf')]
        self.dtype = int
        self.format = 'Game id should be a positive integer number'
        self.examples = [2016020045, 2017020812, 2015020314, 2015020849, 2017020586]

    def cast(self, val):
        return int(val)

class gametype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of a game'
        self.valid_values = ""Game type should be one of the following: 'R', 'P', 'A'""
        self.format = 'Game type should be a string'
        self.examples = ['R', 'P', 'A']

    def cast(self, val):
        return str(val)

class datetimegmt(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime in GMT'
        self.valid_values = ""Datetime should be in the format 'yyyy-mm-ddThh:mm:ssZ'""
        self.format = 'Datetime should be a string'
        self.examples = ['2016-10-19T00:30:00Z', '2018-02-07T00:00:00Z', '2015-11-24T01:00:00Z', '2016-02-17T00:00:00Z', '2017-12-30T03:00:00Z']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%dT%H:%M:%SZ')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a team'
        self.valid_range = [1, 90]
        self.dtype = int
        self.format = 'Team id should be a positive integer number'
        self.examples = [4, 24, 21, 52, 20]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a team'
        self.valid_range = [1, 90]
        self.dtype = int
        self.format = 'Team id should be a positive integer number'
        self.examples = [4, 24, 21, 52, 20]

    def cast(self, val):
        return int(val)

class goalcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of goals scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Goal count should be a non-negative integer number'
        self.examples = [4, 1, 3, 2, 0]

    def cast(self, val):
        return int(val)

class goalcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of goals scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Goal count should be a non-negative integer number'
        self.examples = [4, 1, 3, 2, 0]

    def cast(self, val):
        return int(val)

class gameoutcome(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Outcome of a game'
        self.valid_values = 'Outcome should be a string'
        self.format = 'Outcome should be a string'
        self.examples = ['home win REG', 'away win OT', 'away win REG', 'home win REG', 'home win REG']

    def cast(self, val):
        return str(val)

class rinkside(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Side of the rink where the home team started the game'
        self.valid_values = ""Rink side should be one of the following: 'right', 'left'""
        self.format = 'Rink side should be a string'
        self.examples = ['right', 'left']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class venue(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Venue where the game was played'
        self.valid_values = 'Venue should be a string'
        self.format = 'Venue should be a string'
        self.examples = ['United Center', 'KeyBank Center', 'MTS Centre', 'PNC Arena', 'Honda Center']

    def cast(self, val):
        return str(val)

class venuelink(CategoricalSemanticType):

    def __init__(self):
        self.description = 'API link to the venue'
        self.valid_values = 'Venue link should be a string'
        self.format = 'Venue link should be a string'
        self.examples = ['/api/v1/venues/null', '/api/v1/venues/5059', '/api/v1/venues/5098', '/api/v1/venues/5054', '/api/v1/venues/5092']

    def cast(self, val):
        return str(val)

class venuetimezoneoffset(NumericSemanticType):

    def __init__(self):
        self.description = 'Timezone offset of the venue location'
        self.valid_range = [-8, -4]
        self.dtype = int
        self.format = 'Timezone offset should be an integer number'
        self.examples = [-5, -4, -5, -4, -7]

    def cast(self, val):
        return int(val)

class venuetimezonetz(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Timezone of the venue location'
        self.valid_values = ""Timezone should be one of the following: 'EDT', 'CDT', 'PDT', 'EST', 'MDT'""
        self.format = 'Timezone should be a string'
        self.examples = ['CDT', 'EDT', 'CDT', 'EDT', 'PDT']

    def cast(self, val):
        return str(val)


MAPPING = {'gameid': gameidentifier, 'type': gametype, 'datetimegmt': datetimegmt, 'awayteamid': teamidentifier, 'hometeamid': teamidentifier, 'awaygoals': goalcount, 'homegoals': goalcount, 'outcome': gameoutcome, 'homerinksidestart': rinkside, 'venue': venue, 'venuelink': venuelink, 'venuetimezoneoffset': venuetimezoneoffset, 'venuetimezonetz': venuetimezonetz}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Game IDs'
        self.valid_range = [2000020001, 2019040653]
        self.dtype = int
        self.format = 'Game IDs are numerical and should be represented as integers'
        self.examples = [2016020045, 2016020045, 2016020045, 2017020812, 2017020812]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Player IDs'
        self.valid_range = [8445275, 8480925]
        self.dtype = int
        self.format = 'Player IDs are numerical and should be represented as integers'
        self.examples = [8473607, 8473461, 8470645, 8468011, 8475215]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Team IDs'
        self.valid_range = [1, 90]
        self.dtype = int
        self.format = 'Team IDs are numerical and should be represented as integers'
        self.examples = [4, 4, 16, 24, 7]

    def cast(self, val):
        return int(val)

class timeonice(NumericSemanticType):

    def __init__(self):
        self.description = 'Time on ice'
        self.valid_range = [0, 9027]
        self.dtype = int
        self.format = 'Time on ice is measured in seconds and should be represented as an integer'
        self.examples = [1504, 2011, 3598, 3696, 3539]

    def cast(self, val):
        return int(val)

class decision(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Decisions'
        self.valid_values = ""Decisions can be 'W' (win), 'L' (loss), or NaN""
        self.format = ""Decisions are represented as strings ('W', 'L', or NaN)""
        self.examples = ['W', 'L', np.nan, 'W', 'L']

    def cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return str(val)


MAPPING = {'gameid': gameidentifier, 'playerid': playeridentifier, 'teamid': teamidentifier, 'timeonice': timeonice, 'decision': decision}"
"class playidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Identifier for a play in a hockey game'
        self.valid_values = ""A string that is of the form 'YYYYMMDDHH_MM', which represents the date and time of the play""
        self.format = ""A string of the form 'YYYYMMDDHH_MM'""
        self.examples = ['2016020045_6', '2016020045_97', '2016020045_103', '2016020045_140', '2016020045_197']

    def cast(self, val):
        return str(val)

class teamstrength(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The strength of a team during a play in a hockey game'
        self.valid_values = ""A string that is one of the following: ['Even', 'Power Play', 'Short Handed']""
        self.format = ""A string that is one of the following: ['Even', 'Power Play', 'Short Handed']""
        self.examples = ['Even', 'Power Play', 'Short Handed']

    def cast(self, val):
        return str(val)

class isgamewinninggoal(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class isemptynet(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'playid': playidentifier, 'strength': teamstrength, 'gamewinninggoal': isgamewinninggoal, 'emptynet': isemptynet}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Game ID of an NHL game'
        self.valid_range = [2000020001, float('inf')]
        self.dtype = int
        self.format = 'Game ID should be a numeric integer'
        self.examples = [2016020045, 2017020812, 2011020265, 2016020364, 2019040653]

    def cast(self, val):
        return int(val)

class officialname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the official in NHL games'
        self.valid_values = 'The official name should be a string'
        self.format = ""The official name should be in the format 'first name last name'""
        self.examples = ['Derek Amell', 'Pierre Racicot', 'Brad Kovachik', ""Dan O'Halloran"", 'Kevin Pollock']

    def cast(self, val):
        return str(val).title()

class officialtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Role of the official in NHL games'
        self.valid_values = ""The official type should be either 'Referee' or 'Linesman'""
        self.format = ""The official type should be in the format 'Referee' or 'Linesman'""
        self.examples = ['Referee', 'Linesman', 'Referee', 'Linesman', 'Referee']

    def cast(self, val):
        if val in ['Referee', 'Linesman']:
            return val
        else:
            raise Exception('Invalid official type')


MAPPING = {'gameid': gameidentifier, 'officialname': officialname, 'officialtype': officialtype}"
"class sequence(NumericSemanticType):

    def __init__(self):
        self.description = 'A sequence of integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequence should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Sequence number cannot be negative')
        return num

class playidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Play ID of a game'
        self.valid_values = ""Play ID should be a string and of the form 'YYYYMMDDHH_MMM'""
        self.format = ""Play ID is a string in the form 'YYYYMMDDHH_MMM'""
        self.examples = ['2016020045_41', '2016020045_101', '2016020045_134', '2016020045_174', '2016020045_189']

    def cast(self, val):
        return str(val)

class penaltyseverity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Severity of the penalty'
        self.valid_values = ""Penalty severity should be one of: ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']""
        self.format = 'Penalty severity is a string representing the severity of the penalty'
        self.examples = ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']

    def cast(self, val):
        if val in ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']:
            return str(val)
        else:
            raise ValueError('Invalid penalty severity')

class penaltyminutes(NumericSemanticType):

    def __init__(self):
        self.description = 'Length of the penalty in minutes'
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = 'Penalty minutes should be a non-negative integer in the range 0-10'
        self.examples = [2, 2, 2, 2, 2]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 10:
            raise ValueError('Invalid penalty minutes')
        return num


MAPPING = {'unnamed0': sequence, 'playid': playidentifier, 'penaltyseverity': penaltyseverity, 'penaltyminutes': penaltyminutes}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique numerical identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'GameID should be an integer'
        self.examples = [2016020045, 2016020045, 2016020045, 2016020045, 2016020045]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'TeamID should be an integer'
        self.examples = [18, 13, 1, 8, 17]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'TeamID should be an integer'
        self.examples = [18, 13, 1, 8, 17]

    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class eventtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of event that occured'
        self.valid_values = ""The event types are ['Faceoff', 'Shot', 'Stoppage', 'Hit', 'Blocked Shot']""
        self.format = 'Event type should be a string'
        self.examples = ['Faceoff', 'Shot', 'Stoppage', 'Hit', 'Blocked Shot']

    def cast(self, val):
        return str(val)

class period(NumericSemanticType):

    def __init__(self):
        self.description = 'The period in which the event took place'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Period should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class periodtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The type of period in which the event took place'
        self.valid_values = ""The period types are ['REGULAR', 'OVERTIME', 'SHOOTOUT']""
        self.format = 'Period type should be a string'
        self.examples = ['REGULAR', 'OVERTIME', 'SHOOTOUT']

    def cast(self, val):
        return str(val)

class periodtime(NumericSemanticType):

    def __init__(self):
        self.description = 'The time in seconds at which the event took place in the given period'
        self.valid_range = [0, 1200]
        self.dtype = int
        self.format = 'Period time should be an integer between 0 and 1200'
        self.examples = [0, 269, 582, 904, 1200]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The datetime at which the event took place'
        self.format = ""Datetime should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2016-10-18 23:40:58', '2016-10-19 01:35:28', '2016-10-19 01:40:50', '2016-10-19 01:40:50', '2016-10-19 01:41:44']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class goals(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of goals scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Goals should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class goals(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of goals scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Goals should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'gameid': gameidentifier, 'teamidfor': teamidentifier, 'teamidagainst': teamidentifier, 'event': eventtype, 'period': period, 'periodtype': periodtype, 'periodtime': periodtime, 'datetime': datetimeclass, 'goalsaway': goals, 'goalshome': goals}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID number of a game in the NHL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Game IDs should be formatted as integers with no decimal places'
        self.examples: list[int] = [2016020045, 2016020045, 2016020045, 2016020045, 2016020045]

    def cast(self, val):
        return int(val)

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID number of a game in the NHL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Game IDs should be formatted as integers with no decimal places'
        self.examples: list[int] = [2016020045, 2016020045, 2016020045, 2016020045, 2016020045]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID number of a player in the NHL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player IDs should be formatted as integers with no decimal places'
        self.examples: list[int] = [8473604, 8473512, 8473573, 8473607, 8474141]

    def cast(self, val):
        return int(val)

class playertype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The role a player had in a play during an NHL game'
        self.valid_values = ""Player type can take one of the following values: ['Shooter', 'Goalie', 'Winner', 'Loser', 'Hitter']""
        self.format = 'Player type should be one of the predefined strings'
        self.examples = ['Winner', 'Loser', 'Shooter', 'Goalie', 'Scorer']

    def cast(self, val):
        return str(val)


MAPPING = {'playid': gameidentifier, 'gameid': gameidentifier, 'playerid': playeridentifier, 'playertype': playertype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to keep track of the records'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be a positive integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a game'
        self.valid_range = [2002020002, float('inf')]
        self.dtype = int
        self.format = 'Game id should be a positive integer value'
        self.examples = [2016020045, 2016020045, 2016020045, 2016020045, 2016020045]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a team'
        self.valid_range = [1, 54]
        self.dtype = int
        self.format = 'Team id should be an integer value between 1 and 54'
        self.examples = [16, 16, 16, 4, 4]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a player'
        self.valid_range = [8444919, 8480776]
        self.dtype = int
        self.format = 'Player id should be an integer value between 8444919 and 8480776'
        self.examples = [8477845, 8477451, 8465058, 8476393, 8475462]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'gameid': gameidentifier, 'teamid': teamidentifier, 'playerid': playeridentifier}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index values'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integer values starting from 0'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Game ID'
        self.valid_range = [2018020001, 2018020070]
        self.dtype = int
        self.format = 'Game ID should be integer values'
        self.examples: list[int] = [2018020001, 2018020002, 2018020003, 2018020004, 2018020005]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Player ID'
        self.valid_range = [8464989, 8480965]
        self.dtype = int
        self.format = 'Player ID should be integer values'
        self.examples: list[int] = [8466139, 8466140, 8466141, 8466142, 8466143]

    def cast(self, val):
        return int(val)

class period(NumericSemanticType):

    def __init__(self):
        self.description = 'Period of Game'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Period should be integer values in the range 1 to 4'
        self.examples: list[int] = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class shiftstart(NumericSemanticType):

    def __init__(self):
        self.description = 'Shift Start Time in Seconds'
        self.valid_range = [0, 3891]
        self.dtype = int
        self.format = 'Shift Start Time should be integer values in seconds'
        self.examples: list[int] = [0, 207, 375, 556, 605]

    def cast(self, val):
        return int(val)

class shiftend(NumericSemanticType):

    def __init__(self):
        self.description = 'Shift End Time in Seconds'
        self.valid_range = [7, 3900]
        self.dtype = int
        self.format = 'Shift End Time should be integer values in seconds'
        self.examples: list[int] = [42, 247, 413, 574, 631]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'gameid': gameidentifier, 'playerid': playeridentifier, 'period': period, 'shiftstart': shiftstart, 'shiftend': shiftend}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid identifier')
        return num

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'GameID should be a positive integer'
        self.examples = [2016020045, 2016020045, 2016020045, 2016020045, 2016020045]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid GameID')
        return num

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'PlayerID should be a positive integer'
        self.examples = [8468513, 8476906, 8474668, 8473512, 8471762]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid PlayerID')
        return num

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'TeamID should be a positive integer'
        self.examples = [4, 4, 4, 4, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid TeamID')
        return num

class timeonice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The time on ice for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Time on Ice should be a positive integer'
        self.unit = 'In seconds'
        self.examples = [955, 1396, 915, 1367, 676]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid Time on Ice')
        return num

class assists(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of assists'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Assists should be a positive integer'
        self.examples = [1, 1, 0, 3, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of assists')
        return num

class goals(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of goals'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Goals should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of goals')
        return num

class shots(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of shots'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Shots should be a positive integer'
        self.examples = [0, 4, 1, 0, 3]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of shots')
        return num

class hits(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of hits'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Hits should be a positive integer'
        self.examples = [2, 2, 1, 0, 2]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of hits')
        return num

class powerplaygoals(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of power play goals'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Power Play Goals should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of power play goals')
        return num

class powerplayassists(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of power play assists'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Power Play Assists should be a positive integer'
        self.examples = [0, 0, 0, 2, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of power play assists')
        return num

class penaltyminutes(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of penalty minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Penalty Minutes should be a positive integer'
        self.examples = [0, 2, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of penalty minutes')
        return num

class faceoffwins(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of face-off wins'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Face-Off Wins should be a positive integer'
        self.examples = [0, 0, 0, 11, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of face-off wins')
        return num

class faceofftaken(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of face-offs taken'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Face-Offs Taken should be a positive integer'
        self.examples = [0, 0, 0, 27, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of face-offs taken')
        return num

class takeaways(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of takeaways'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Takeaways should be a positive integer'
        self.examples = [1, 1, 2, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of takeaways')
        return num

class giveaways(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of giveaways'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Giveaways should be a positive integer'
        self.examples = [1, 2, 0, 0, 1]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of giveaways')
        return num

class shorthandedgoals(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of short handed goals'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Short Handed Goals should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of short handed goals')
        return num

class shorthandedassists(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of short handed assists'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Short Handed Assists should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of short handed assists')
        return num

class blocked(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of blocks'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Blocks should be a positive integer'
        self.examples = [1, 2, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of blocks')
        return num

class plusminus(NumericSemanticType):

    def __init__(self):
        self.description = 'The plus-minus statistic'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Plus-Minus can be any integer'
        self.examples = [1, 0, -1, -1, -1]

    def cast(self, val):
        return int(val)

class eventimeonice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The even strength time on ice for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Even Strength Time on Ice should be a positive integer'
        self.unit = 'In seconds'
        self.examples = [858, 1177, 805, 1083, 613]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid Even Strength Time on Ice')
        return num

class shorthandedtimeonice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The short handed time on ice for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Short Handed Time on Ice should be a positive integer'
        self.unit = 'In seconds'
        self.examples = [97, 0, 0, 19, 63]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid Short Handed Time on Ice')
        return num

class powerplaytimeonice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The power play time on ice for a player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Power Play Time on Ice should be a positive integer'
        self.unit = 'In seconds'
        self.examples = [0, 219, 110, 265, 0]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid Power Play Time on Ice')
        return num


MAPPING = {'unnamed0': identifier, 'gameid': gameidentifier, 'playerid': playeridentifier, 'teamid': teamidentifier, 'timeonice': timeonice, 'assists': assists, 'goals': goals, 'shots': shots, 'hits': hits, 'powerplaygoals': powerplaygoals, 'powerplayassists': powerplayassists, 'penaltyminutes': penaltyminutes, 'faceoffwins': faceoffwins, 'faceofftaken': faceofftaken, 'takeaways': takeaways, 'giveaways': giveaways, 'shorthandedgoals': shorthandedgoals, 'shorthandedassists': shorthandedassists, 'blocked': blocked, 'plusminus': plusminus, 'eventimeonice': eventimeonice, 'shorthandedtimeonice': shorthandedtimeonice, 'powerplaytimeonice': powerplaytimeonice}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a game'
        self.valid_range = [2000020001, float('inf')]
        self.dtype = int
        self.format = 'Game ID should be a positive integer'
        self.examples = [2016020045, 2017020812, 2015020314]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a team'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Team ID should be a positive integer'
        self.examples = [4, 16, 24, 7, 21]

    def cast(self, val):
        return int(val)

class homeoraway(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['away', 'home']

    def cast(self, val):
        if val.lower() == 'away':
            return 'away'
        elif val.lower() == 'home':
            return 'home'
        else:
            raise ValueError('Invalid home or away value')

class gameoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        return bool(val)

class gamesettledin(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'How the game was settled'
        self.valid_values = ""Game can be settled in 'REG', 'OT', or 'tbc'""
        self.format = ""Game settled in should be one of 'REG', 'OT', or 'tbc'""
        self.examples = ['REG', 'OT', 'tbc']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid game settled in value')

class coachname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the coach'
        self.valid_values = 'Coach name should be a string'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Barry Trotz', 'Joel Quenneville', 'John Tortorella', 'Claude Julien', 'Mike Babcock']

    def cast(self, val):
        return str(val).title()

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class gamestat(NumericSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid game stat value')
        return num

class startrinkside(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Start rink side of the game'
        self.valid_values = ""Start rink side should be 'left', 'right', or None""
        self.format = ""Start rink side should be one of 'left', 'right', or None""
        self.examples = ['left', 'right', None]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid start rink side value')


MAPPING = {'gameid': gameidentifier, 'teamid': teamidentifier, 'hoa': homeoraway, 'won': gameoutcome, 'settledin': gamesettledin, 'headcoach': coachname, 'goals': gamestat, 'shots': gamestat, 'hits': gamestat, 'pim': gamestat, 'powerplayopportunities': gamestat, 'powerplaygoals': gamestat, 'faceoffwinpercentage': gamestat, 'giveaways': gamestat, 'takeaways': gamestat, 'blocked': gamestat, 'startrinkside': startrinkside}"
"class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a player in NHL'
        self.valid_range = [8444894, 8481813]
        self.dtype = int
        self.format = 'Player ID should be a 7-digit number'
        self.examples = [8466148, 8465058, 8476906, 8466285, 8470607]

    def cast(self, val):
        val = int(val)
        if val < 8444894 or val > 8481813:
            raise Exception('Invalid Player ID')
        return val

class firstname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'First name of the player'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Marian', 'Michal', 'Shayne', 'Brian', 'Brent']

    def cast(self, val):
        return str(val).title()

class lastname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Last name of the player'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Hossa', 'Rozsival', 'Gostisbehere', 'Campbell', 'Seabrook']

    def cast(self, val):
        return str(val).title()

class nationality(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Nationality of the player'
        self.valid_values = 'ISO 3166-1 alpha-3 Country Codes'
        self.format = 'Three-letter country code'
        self.examples = ['CAN', 'USA', 'SWE', 'RUS', 'CZE']

    def cast(self, val):
        if val not in [i.alpha_3 for i in list(pycountry.countries)]:
            raise Exception('Invalid Country Code')
        return val

class birthdate(NumericSemanticType):

    def __init__(self):
        self.description = 'Birthdate of the player'
        self.valid_range = [datetime.strptime('1900-01-01 00:00:00', '%Y-%m-%d %H:%M:%S'), datetime.now()]
        self.dtype = datetime
        self.format = ""Datetime object in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['1991-01-03 00:00:00', '1993-04-20 01:00:00', '1987-03-17 00:00:00', '1990-07-03 01:00:00', '1975-01-20 00:00:00']

    def cast(self, val):
        val = datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
        if val < datetime.strptime('1900-01-01 00:00:00', '%Y-%m-%d %H:%M:%S') or val > datetime.now():
            raise Exception('Invalid date')
        return val

class heightcm(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of the player'
        self.valid_range = [162.56, 205.74]
        self.dtype = float
        self.format = 'Height should be a floating point number'
        self.unit = 'In cm'
        self.examples = [185.42, 185.42, 180.34, 177.8, 190.5]

    def cast(self, val):
        val = float(val)
        if val < 162.56 or val > 205.74:
            raise Exception('Invalid height')
        return val

class weight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of the player'
        self.valid_range = [140.0, 265.0]
        self.dtype = float
        self.format = 'Weight should be a floating point number'
        self.unit = 'In lbs'
        self.examples = [207.0, 210.0, 180.0, 192.0, 220.0]

    def cast(self, val):
        val = float(val)
        if val < 140.0 or val > 265.0:
            raise Exception('Invalid weight')
        return val

class shootscatches(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Shooting or Catching Hand of the player'
        self.valid_values = ""Either 'L' or 'R'""
        self.format = 'One letter string'
        self.examples = ['L', 'R']

    def cast(self, val):
        if val not in ['L', 'R']:
            raise Exception('Invalid value for shooting/catching hand')
        return val


MAPPING = {'playerid': playeridentifier, 'firstname': firstname, 'lastname': lastname, 'nationality': nationality, 'birthdate': birthdate, 'heightcm': heightcm, 'weight': weight, 'shootscatches': shootscatches}"
"class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Team ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Team ID should be an integer'
        self.examples = [1, 4, 26, 14, 6]

    def cast(self, val):
        return int(val)

class franchiseidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Franchise ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Franchise ID should be an integer'
        self.examples = [23, 16, 14, 31, 6]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Team Name'
        self.valid_values = 'Team name should be a string'
        self.format = 'First letter of each word in the team name should be capitalized'
        self.examples = ['Devils', 'Flyers', 'Kings', 'Lightning', 'Bruins']

    def cast(self, val):
        return str(val).title()

class abbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Team Abbreviation'
        self.valid_values = 'Abbreviation should be a string of capitalized alphabets'
        self.format = 'All letters in the abbreviation should be capitalized'
        self.examples = ['NJD', 'PHI', 'LAK', 'TBL', 'BOS']

    def cast(self, val):
        return str(val).upper()

class link(CategoricalSemanticType):

    def __init__(self):
        self.description = 'API Link'
        self.valid_values = 'Link should be a string'
        self.format = ""Link should start with '/api/v1/teams/' followed by team id""
        self.examples = ['/api/v1/teams/1', '/api/v1/teams/4', '/api/v1/teams/26', '/api/v1/teams/14', '/api/v1/teams/6']

    def cast(self, val):
        return str(val)


MAPPING = {'teamid': teamidentifier, 'franchiseid': franchiseidentifier, 'teamname': teamname, 'abbreviation': abbreviation, 'link': link}"
"class carname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Name'
        self.valid_values = 'Car Name should be a string that contains the car manufacturer name followed by the car model name'
        self.format = 'Car names should be in lower case with words separated by a space'
        self.examples = ['alfa-romero giulia', 'alfa-romero stelvio', 'audi 100 ls', 'toyota corolla', 'subaru dl']

    def cast(self, val):
        return str(val).lower()

class fueltype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['gas', 'diesel']

    def cast(self, val):
        return str(val).lower()

class carbody(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Body Type'
        self.valid_values = ""Car body type must be one of the following: ['sedan', 'hatchback', 'wagon', 'hardtop', 'convertible']""
        self.format = 'Car body type should be in lower case'
        self.examples = ['sedan', 'hatchback', 'wagon', 'hardtop', 'convertible']

    def cast(self, val):
        return str(val).lower()

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [13495.0, 16500.0, 13950.0, 17450.0, 10295.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class carlength(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The length of the car in inches'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be formatted as a floating point number (in inches) with one decimal place'
        self.unit = 'In Inches'
        self.examples = [168.8, 171.2, 176.6, 141.1, 208.1]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'carname': carname, 'fueltype': fueltype, 'carbody': carbody, 'price': carprice, 'carlength': carlength}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row indices in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be formatted as integers, starting from 0 and monotonically increasing by 1'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid row index')
        return num

class categoryidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Category ID in an ecommerce store'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Category ID should be formatted as integers'
        self.examples: list[int] = [1016, 809, 570, 1691, 536]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid category ID')
        return num

class parentcategoryidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Parent category ID in an ecommerce store'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Parent category ID should be formatted as integers'
        self.examples: list[float] = [213.0, 169.0, 9.0, 885.0, 1691.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise Exception('Invalid parent category ID')
        return num


MAPPING = {'unnamed0': rowindex, 'categoryid': categoryidentifier, 'parentid': parentcategoryidentifier}"
"class eventidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Event ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val

class unixtimestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp in Unix format'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Timestamp should be a positive integer'
        self.examples = [1433221332117, 1433224214164, 1433221999827, 1433221955914, 1433221337106]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val

class visitoridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a visitor'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Visitor ID should be a positive integer'
        self.examples = [257597, 992329, 111016, 483717, 951259]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val

class eventtype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of event'
        self.valid_values = ""Valid values are 'view', 'addtocart', 'transaction'""
        self.format = 'Event type should be a string'
        self.examples = ['view', 'addtocart', 'transaction']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class itemidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an item'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Item ID should be a positive integer'
        self.examples = [355908, 248676, 318965, 253185, 367447]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val

class transactionidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a transaction'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Transaction ID should be a positive integer'
        self.examples = [2, 4002, 9438, 13534, 17593]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val


MAPPING = {'unnamed0': eventidentifier, 'timestamp': unixtimestamp, 'visitorid': visitoridentifier, 'event': eventtype, 'itemid': itemidentifier, 'transactionid': transactionidentifier}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp of an event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Timestamp should be formatted as an integer'
        self.examples = [1435460400000, 1441508400000, 1439089200000, 1431226800000, 1431831600000]

    def cast(self, val):
        return int(val)

class itemidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Item ID should be formatted as an integer'
        self.examples = [460429, 206783, 395014, 59481, 156781]

    def cast(self, val):
        return int(val)

class property(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Property of an item'
        self.valid_values = 'Property should be a string that represents a characteristic of an item'
        self.format = 'Property should be stored as a string'
        self.examples = ['categoryid', '888', '400', '790', '917']

    def cast(self, val):
        return str(val)

class value(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Value of an item property'
        self.valid_values = ""Value should be a string that represents a value of an item's property""
        self.format = 'Value should be stored as a string'
        self.examples = ['1338', '1116713 960601 n277.200', 'n552.000 639502 n720.000 424566', 'n15360.000', '828513']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'timestamp': timestamp, 'itemid': itemidentifier, 'property': property, 'value': value}"
"class indexvalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index value is an integer greater than or equal to 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class unixtimestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Unix Timestamp'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unix timestamp is a system for describing a point in time, defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970'
        self.examples = [1433041200000, 1439694000000, 1435460400000, 1431831600000, 1435460400000]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        timestamp = datetime.fromtimestamp(int(val) / 1000)
        return timestamp.strftime('%Y-%m-%d %H:%M:%S')

class itemidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Item ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Item ID is a unique identifier for an item in a dataset'
        self.examples = [183478, 132256, 420307, 403324, 230701]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class propertyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Property Name'
        self.valid_values = 'Property Name is a string identifier for a property in a dataset'
        self.format = 'Property Names are alphanumeric strings'
        self.examples = ['561', '976', 'available', 'categoryid', '6']

    def cast(self, val):
        return str(val)

class propertyvalue(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Property Value'
        self.valid_values = 'Property Value is a string value for a property in a dataset'
        self.format = 'Property Values are alphanumeric strings'
        self.examples = ['769062', '0', '1', '1285872', '519769']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': indexvalue, 'timestamp': unixtimestamp, 'itemid': itemidentifier, 'property': propertyname, 'value': propertyvalue}"
"class pokemonidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Pokemon ID'
        self.valid_range = [0, 808]
        self.dtype = int
        self.format = 'Pokemon ID should be a non-negative integer less than or equal to 808'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class pokemonname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Pokemon Name'
        self.valid_values = 'Pokemon names are unique and vary widely'
        self.format = 'Pokemon names should be capitalized and not contain any special characters or numbers'
        self.examples = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Charmander', 'Charmeleon']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': pokemonidentifier, 'name': pokemonname}"
"class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a Movie'
        self.valid_values = 'Title should be a string'
        self.format = 'Title should be in title case'
        self.examples = ['Cinderella', 'The Three Musketeers', 'Treasure Island', 'Hero', 'Alice in Wonderland']

    def cast(self, val):
        return str(val).title()

class movieorigin(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Origin/Ethnicity of a Movie'
        self.valid_values = ""Origin/Ethnicity should be one of the recognized country names or 'Bollywood', 'Tamil', 'Telugu'""
        self.format = 'Origin/Ethnicity should be capitalized'
        self.examples = ['American', 'British', 'Bollywood', 'Tamil', 'Telugu']

    def cast(self, val):
        return str(val).capitalize()

class moviedirector(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Director of a Movie'
        self.valid_values = 'Director name should be a string'
        self.format = 'Director name should be in title case'
        self.examples = ['Michael Curtiz', 'Hanna-Barbera', 'Lloyd Bacon', 'Jules White']

    def cast(self, val):
        return str(val).title()

class moviegenre(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Genre of a Movie'
        self.valid_values = 'Genre should be a string'
        self.format = 'Genre should be in lower case'
        self.examples = ['drama', 'comedy', 'horror', 'action']

    def cast(self, val):
        return str(val).lower()

class movieyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Release Year of a Movie'
        self.valid_range = [1901, 2017]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [1901, 1957, 1988, 2007, 2017]

    def cast(self, val):
        val = int(val)
        if 1901 <= val <= 2017:
            return val
        else:
            raise Exception('Invalid year')


MAPPING = {'title': movietitle, 'originethnicity': movieorigin, 'director': moviedirector, 'genre': moviegenre, 'releaseyear': movieyear}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index or ID of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        return num

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.valid_values = 'City name should be a string'
        self.format = 'City name should be capitalized'
        self.examples = ['Ahmedabad', 'Delhi', 'Mumbai', 'Bengaluru', 'Lucknow']

    def cast(self, val):
        return str(val).title()

class date(NumericSemanticType):

    def __init__(self):
        self.description = 'Date of the data point'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = datetime
        self.format = ""Date should be of the form 'YYYY-MM-DD'""
        self.examples = ['2015-01-01', '2015-01-02', '2015-01-03', '2015-01-04', '2015-01-05']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class pollutantconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airqualityindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index (AQI)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'AQI should be a floating point number'
        self.examples = [81.0, 118.0, 208.0, 2049.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class aqibucket(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Bucket or category of the AQI'
        self.valid_values = ['Moderate', 'Satisfactory', 'Poor', 'Very Poor', 'Good']
        self.format = ""AQI Bucket should be one of the following categories: 'Moderate', 'Satisfactory', 'Poor', 'Very Poor', 'Good'""
        self.examples = ['Moderate', 'Satisfactory', 'Poor', 'Very Poor', 'Good']

    def cast(self, val):
        if val not in ['Moderate', 'Satisfactory', 'Poor', 'Very Poor', 'Good']:
            raise Exception('Invalid AQI bucket')
        else:
            return val


MAPPING = {'unnamed0': index, 'city': cityname, 'date': date, 'no': pollutantconcentration, 'nox': pollutantconcentration, 'co': pollutantconcentration, 'benzene': pollutantconcentration, 'toluene': pollutantconcentration, 'xylene': pollutantconcentration, 'aqi': airqualityindex, 'aqibucket': aqibucket}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Row index in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values starting at 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a city'
        self.valid_values = 'Names should be strings consisting of alphabetic characters'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Ahmedabad', 'Amritsar', 'Amaravati', 'Aizawl']

    def cast(self, val):
        return str(val).title()

class datetimeformat(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = 'Datetime should be in the format: YYYY-MM-DD HH:MM:SS'
        self.format = 'Datetime format'
        self.examples = ['2020-07-01 00:00:00', '2020-06-10 14:00:00', '2020-06-19 04:00:00', '2020-06-19 05:00:00', '2020-06-19 06:00:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airpollutantconcentration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.unit = 'μg/m³'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airqualityindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number'
        self.examples = [17.0, 78.0, 139.0, 290.0, 3133.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class airqualitycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Air Quality Category'
        self.valid_values = ""One of: ['Moderate', 'Satisfactory', 'Severe', 'Poor', 'Good', 'Very Poor', 'Excellent']""
        self.format = 'String in title format (first letter capitalized)'
        self.examples = ['Moderate', 'Satisfactory', 'Severe', 'Poor', 'Good']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()


MAPPING = {'unnamed0': index, 'city': cityname, 'datetime': datetimeformat, 'no': airpollutantconcentration, 'nox': airpollutantconcentration, 'co': airpollutantconcentration, 'benzene': airpollutantconcentration, 'toluene': airpollutantconcentration, 'xylene': airpollutantconcentration, 'aqi': airqualityindex, 'aqibucket': airqualitycategory}"
"class stationidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Station ID'
        self.valid_values = ""Station IDs must be strings of the form 'XYnnn', where XY are uppercase letters and nnn are digits.""
        self.format = 'Station IDs must be uppercase strings'
        self.examples = ['DL007', 'KA003', 'GJ001', 'KA009', 'DL013']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates must be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2020-06-19', '2020-04-16', '2020-06-18', '2020-07-01', '2020-06-30']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be represented as a floating point number'
        self.unit = 'µg/m³'
        self.examples = [0.01, 0.1, 1.0, 10.0, 100.0]

    def cast(self, val):
        return float(val)

class aqi(NumericSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'AQI should be represented as a floating point number'
        self.examples = [10.0, 50.0, 100.0, 150.0, 200.0]

    def cast(self, val):
        return float(val)

class aqibucket(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index Bucket'
        self.valid_values = ""AQI Bucket values should be one of the following: 'Good', 'Satisfactory', 'Moderate', 'Poor', 'Very Poor', 'Severe'""
        self.format = 'AQI Bucket values should be capitalized strings'
        self.examples = ['Good', 'Satisfactory', 'Moderate', 'Poor', 'Very Poor', 'Severe']

    def cast(self, val):
        return str(val).title()


MAPPING = {'stationid': stationidentifier, 'date': date, 'no': pollutant, 'nox': pollutant, 'co': pollutant, 'benzene': pollutant, 'toluene': pollutant, 'xylene': pollutant, 'aqi': aqi, 'aqibucket': aqibucket}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class stationidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Identifier for different stations'
        self.valid_values = 'Station IDs are unique and can be any string'
        self.format = 'Station IDs are strings that start with two uppercase letters followed by three numbers'
        self.examples = ['AP005', 'BR007', 'AP001', 'AS001', 'BR005']

    def cast(self, val):
        return str(val)

class datetimesemantictype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime string'
        self.valid_values = ""Datetime strings should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Datetime strings should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-11-24 17:00:00', '2017-11-24 18:00:00', '2017-11-24 19:00:00', '2017-11-24 20:00:00', '2017-11-24 21:00:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class pollutant(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pollutant concentration should be a non-negative floating point number'
        self.unit = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class aqi(NumericSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'AQI should be a non-negative floating point number'
        self.examples = [70, 106, 186, 16, 1109]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class aqibucket(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index bucket'
        self.valid_values = ""AQI bucket can be any of the following: ['Good', 'Satisfactory', 'Moderate', 'Poor', 'Very Poor', 'Severe']""
        self.format = 'AQI bucket is a string that represents the severity of air quality'
        self.examples = ['Good', 'Satisfactory', 'Moderate', 'Poor', 'Very Poor']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()


MAPPING = {'unnamed0': index, 'stationid': stationidentifier, 'datetime': datetimesemantictype, 'no': pollutant, 'nox': pollutant, 'co': pollutant, 'benzene': pollutant, 'toluene': pollutant, 'xylene': pollutant, 'aqi': aqi, 'aqibucket': aqibucket}"
"class stationidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Station Id'
        self.valid_values = ""Station id should be a string of the form 'AP001'""
        self.format = 'Station id should be a string of two uppercase alphabets followed by three digits'
        self.examples = ['AP001', 'DL012', 'DL011', 'AP003', 'AP004']

    def cast(self, val):
        return str(val).upper()

class stationname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Station Name'
        self.valid_values = 'Station name should be a string'
        self.format = 'Station name can be of any format'
        self.examples = ['Secretariat, Amaravati - APPCB', 'IGI Airport (T3), Delhi - IMD', 'East Arjun Nagar, Delhi - CPCB', 'Tirumala, Tirupati - APPCB', 'PWD Grounds, Vijayawada - APPCB']

    def cast(self, val):
        return str(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City Name'
        self.valid_values = 'City name should be a string'
        self.format = 'City name should have the first letter of each word capitalized'
        self.examples = ['Delhi', 'Bengaluru', 'Mumbai', 'Kolkata', 'Patna']

    def cast(self, val):
        return str(val).title()

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State Name'
        self.valid_values = 'State name should be a string'
        self.format = 'State name should have the first letter of each word capitalized'
        self.examples = ['Delhi', 'Haryana', 'Uttar Pradesh', 'Maharashtra', 'Karnataka']

    def cast(self, val):
        return str(val).title()

class stationstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Station Status'
        self.valid_values = ""Status should either be 'Active' or 'Inactive'""
        self.format = ""Status should be either 'Active' or 'Inactive'""
        self.examples = ['Active', 'Inactive', float('nan')]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()


MAPPING = {'stationid': stationidentifier, 'stationname': stationname, 'city': city, 'state': state, 'status': stationstatus}"
"class videogame(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a videogame'
        self.valid_values = 'Name should be a string'
        self.format = 'All words should be capitalized'
        self.examples = ['Need for Speed: Most Wanted', 'FIFA 14', 'LEGO Marvel Super Heroes', 'Madden NFL 07', 'Ratatouille']

    def cast(self, val):
        return str(val).title()

class gamingplatform(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gaming platform'
        self.valid_values = ""Valid platforms are 'DS', 'PS2', 'PS3', 'Wii', 'X360' etc.""
        self.format = 'Platform code should be a string'
        self.examples = ['DS', 'PS2', 'PS3', 'Wii', 'X360']

    def cast(self, val):
        return str(val).upper()

class videogameyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The year the videogame was released'
        self.valid_range = [1980, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit number'
        self.examples = [2006, 1985, 2008, 2009, 1996]

    def cast(self, val):
        return int(val)

class videogamegenre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Genre of the videogame'
        self.valid_values = ""Valid genres are 'Action', 'Sports', 'Misc', 'Role-Playing', 'Shooter' etc.""
        self.format = 'Genre should be a string'
        self.examples = ['Action', 'Sports', 'Misc', 'Role-Playing', 'Shooter']

    def cast(self, val):
        return str(val).title()

class videogamepublisher(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Publisher of the videogame'
        self.valid_values = 'Publisher name should be a string'
        self.format = 'All words should be capitalized'
        self.examples = ['Electronic Arts', 'Activision', 'Namco Bandai Games', 'Ubisoft', 'Konami Digital Entertainment']

    def cast(self, val):
        return str(val).title()

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of the videogame in a particular region'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be formatted as a floating point number with two decimal places'
        self.unit = 'In million units'
        self.examples = [0.0, 0.08, 0.24, 41.49, 29.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of the videogame in a particular region'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be formatted as a floating point number with two decimal places'
        self.unit = 'In million units'
        self.examples = [0.0, 0.08, 0.24, 41.49, 29.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of the videogame in a particular region'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be formatted as a floating point number with two decimal places'
        self.unit = 'In million units'
        self.examples = [0.0, 0.08, 0.24, 41.49, 29.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of the videogame in a particular region'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be formatted as a floating point number with two decimal places'
        self.unit = 'In million units'
        self.examples = [0.0, 0.08, 0.24, 41.49, 29.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sales of the videogame in a particular region'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be formatted as a floating point number with two decimal places'
        self.unit = 'In million units'
        self.examples = [0.0, 0.08, 0.24, 41.49, 29.02]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'name': videogame, 'platform': gamingplatform, 'year': videogameyear, 'genre': videogamegenre, 'publisher': videogamepublisher, 'nasales': sales, 'eusales': sales, 'jpsales': sales, 'othersales': sales, 'globalsales': sales}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique index of the record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique index of the record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the record'
        self.valid_values = ""Dates should be in the form 'YYYY-MM-DD'""
        self.format = ""Dates should be in the form 'YYYY-MM-DD'""
        self.examples = ['2015-12-27', '2015-12-20', '2015-12-13', '2015-12-06', '2015-11-29']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of an avocado'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [1.33, 1.35, 0.93, 1.08, 1.28]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of avocados sold'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of avocados'
        self.examples = [64236.62, 54876.98, 118220.22, 78992.15, 51039.6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of avocados sold'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of avocados'
        self.examples = [64236.62, 54876.98, 118220.22, 78992.15, 51039.6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of avocados sold'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of avocados'
        self.examples = [64236.62, 54876.98, 118220.22, 78992.15, 51039.6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of avocados sold'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of avocados'
        self.examples = [64236.62, 54876.98, 118220.22, 78992.15, 51039.6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of avocados sold'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of avocados'
        self.examples = [64236.62, 54876.98, 118220.22, 78992.15, 51039.6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

class avocadotype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['conventional', 'organic']

    def cast(self, val):
        if str(val).lower() not in self.valid_values:
            raise Exception('Invalid avocado type')
        return str(val).lower()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of the record'
        self.valid_range = [2015, 2018]
        self.dtype = int
        self.format = 'Year should be a 4 digit integer'
        self.examples = [2015, 2016, 2017, 2018]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region of the record'
        self.valid_values = 'Region should be a string representing a city or a region in USA'
        self.format = 'Names should be Titlecase'
        self.examples = ['Albany', 'Denver', 'Midsouth', 'BaltimoreWashington', 'Boise']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed01': index, 'unnamed0': index, 'date': date, 'averageprice': price, 'totalvolume': volume, 'totalbags': volume, 'smallbags': volume, 'largebags': volume, 'xlargebags': volume, 'type': avocadotype, 'year': year, 'region': region}"
"class patientidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Patient Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient IDs should be positive integers'
        self.examples = [842302, 842517, 84300903, 84348301, 84358402]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid patient ID')
        return num

class cancerdiagnosis(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['M', 'B']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid diagnosis value')
        return val

class radius(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Radius of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Radii should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [17.99, 20.57, 19.69, 11.42, 20.29]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid radius')
        return num

class radius(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Radius of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Radii should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [17.99, 20.57, 19.69, 11.42, 20.29]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid radius')
        return num

class texture(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Texture of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Texture should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [10.38, 17.77, 21.25, 20.38, 14.34]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid texture')
        return num

class texture(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Texture of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Texture should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [10.38, 17.77, 21.25, 20.38, 14.34]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid texture')
        return num

class perimeter(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Perimeter of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Perimeter should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [122.8, 132.9, 130.0, 77.58, 135.1]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid perimeter')
        return num

class perimeter(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Perimeter of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Perimeter should be positive floating point numbers'
        self.units = 'mm'
        self.examples = [122.8, 132.9, 130.0, 77.58, 135.1]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid perimeter')
        return num

class area(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Area should be positive floating point numbers'
        self.units = 'mm^2'
        self.examples = [1001.0, 1326.0, 1203.0, 386.1, 1297.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid area')
        return num

class area(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area of cancer cells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Area should be positive floating point numbers'
        self.units = 'mm^2'
        self.examples = [1001.0, 1326.0, 1203.0, 386.1, 1297.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid area')
        return num

class smoothness(NumericSemanticType):

    def __init__(self):
        self.description = 'Smoothness of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Smoothness should be floating point numbers in the range [0, 1]'
        self.examples = [0.1184, 0.08474, 0.1096, 0.1425, 0.1003]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid smoothness')
        return num

class smoothness(NumericSemanticType):

    def __init__(self):
        self.description = 'Smoothness of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Smoothness should be floating point numbers in the range [0, 1]'
        self.examples = [0.1184, 0.08474, 0.1096, 0.1425, 0.1003]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid smoothness')
        return num

class compactness(NumericSemanticType):

    def __init__(self):
        self.description = 'Compactness of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Compactness should be floating point numbers in the range [0, 1]'
        self.examples = [0.2776, 0.07864, 0.1599, 0.2839, 0.1328]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid compactness')
        return num

class compactness(NumericSemanticType):

    def __init__(self):
        self.description = 'Compactness of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Compactness should be floating point numbers in the range [0, 1]'
        self.examples = [0.2776, 0.07864, 0.1599, 0.2839, 0.1328]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid compactness')
        return num

class concavity(NumericSemanticType):

    def __init__(self):
        self.description = 'Concavity of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Concavity should be floating point numbers in the range [0, 1]'
        self.examples = [0.3001, 0.0869, 0.1974, 0.2414, 0.198]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid concavity')
        return num

class concavity(NumericSemanticType):

    def __init__(self):
        self.description = 'Concavity of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Concavity should be floating point numbers in the range [0, 1]'
        self.examples = [0.3001, 0.0869, 0.1974, 0.2414, 0.198]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid concavity')
        return num

class concavepoints(NumericSemanticType):

    def __init__(self):
        self.description = 'Concave points of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Concave points should be floating point numbers in the range [0, 1]'
        self.examples = [0.1471, 0.07017, 0.1279, 0.1052, 0.1043]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid concave points')
        return num

class symmetry(NumericSemanticType):

    def __init__(self):
        self.description = 'Symmetry of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Symmetry should be floating point numbers in the range [0, 1]'
        self.examples = [0.2419, 0.1812, 0.2069, 0.2597, 0.1809]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid symmetry')
        return num

class fractaldimension(NumericSemanticType):

    def __init__(self):
        self.description = 'Fractal dimension of cancer cells'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Fractal dimension should be floating point numbers in the range [0, 1]'
        self.examples = [0.07871, 0.05667, 0.05999, 0.09744, 0.05883]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid fractal dimension')
        return num


MAPPING = {'id': patientidentifier, 'diagnosis': cancerdiagnosis, 'radiusmean': radius, 'radiusworst': radius, 'texturemean': texture, 'textureworst': texture, 'perimetermean': perimeter, 'perimeterworst': perimeter, 'areamean': area, 'areaworst': area, 'smoothnessmean': smoothness, 'smoothnessworst': smoothness, 'compactnessmean': compactness, 'compactnessworst': compactness, 'concavitymean': concavity, 'concavityworst': concavity, 'concavepointsmean': concavepoints, 'symmetrymean': symmetry, 'fractaldimensionmean': fractaldimension}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Acidity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def cast(self, val):
        return float(val)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Acidity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def cast(self, val):
        return float(val)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Acidity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def cast(self, val):
        return float(val)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Acidity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def cast(self, val):
        return float(val)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Acidity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def cast(self, val):
        return float(val)

class chlorides(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Chlorides'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Chlorides should be a floating point number'
        self.units = 'In g/dm3'
        self.examples = [0.076, 0.098, 0.092, 0.075, 0.076]

    def cast(self, val):
        return float(val)

class sulfurdioxide(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sulfur Dioxide'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulfur Dioxide should be a floating point number'
        self.units = 'In mg/dm3'
        self.examples = [11.0, 25.0, 15.0, 17.0, 11.0]

    def cast(self, val):
        return float(val)

class sulfurdioxide(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sulfur Dioxide'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulfur Dioxide should be a floating point number'
        self.units = 'In mg/dm3'
        self.examples = [11.0, 25.0, 15.0, 17.0, 11.0]

    def cast(self, val):
        return float(val)

class density(NumericSemanticType):

    def __init__(self):
        self.description = 'Density'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Density should be a floating point number'
        self.examples = [0.9978, 0.9968, 0.997, 0.998, 0.9978]

    def cast(self, val):
        return float(val)

class ph(NumericSemanticType):

    def __init__(self):
        self.description = 'pH'
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = 'pH should be a floating point number'
        self.examples = [3.51, 3.2, 3.26, 3.16, 3.51]

    def cast(self, val):
        return float(val)

class alcoholcontent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Alcohol Content'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Alcohol content should be a floating point number'
        self.units = 'In vol. %'
        self.examples = [9.4, 9.8, 9.8, 9.8, 9.4]

    def cast(self, val):
        return float(val)

class qualityscore(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Quality Score'
        self.valid_values = 'Quality score should be an integer between 1 and 10'
        self.format = 'Quality score should be an integer with no decimal places'
        self.examples = [5, 5, 5, 6, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'fixedacidity': acidity, 'volatileacidity': acidity, 'citricacid': acidity, 'residualsugar': acidity, 'sulphates': acidity, 'chlorides': chlorides, 'freesulfurdioxide': sulfurdioxide, 'totalsulfurdioxide': sulfurdioxide, 'density': density, 'ph': ph, 'alcohol': alcoholcontent, 'quality': qualityscore}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of an entity'
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples: list[int] = [1, 30, 40, 70, 100]

    def cast(self, val):
        return int(val)

class booleanattrition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val == 'Yes':
            return True
        elif val == 'No':
            return False
        else:
            raise ValueError('Invalid value for boolean attrition')

class businesstravel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Business travel frequency'
        self.valid_values = 'Travel_Rarely, Travel_Frequently, Non-Travel'
        self.format = 'Should be one of the valid values'
        self.examples = ['Travel_Rarely', 'Travel_Frequently', 'Non-Travel']

    def cast(self, val):
        return str(val)

class dailyrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The daily rate in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Daily rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class department(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Department in a company'
        self.valid_values = 'Research & Development, Sales, Human Resources'
        self.format = 'Should be one of the valid values'
        self.examples = ['Research & Development', 'Sales', 'Human Resources']

    def cast(self, val):
        return str(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        if val == 'Male':
            return True
        elif val == 'Female':
            return False
        else:
            raise ValueError('Invalid value for gender')

class hourlyrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The hourly rate in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Hourly rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class jobrole(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Job role in a company'
        self.valid_values = 'Sales Executive, Research Scientist, Laboratory Technician, Manufacturing Director, Healthcare Representative'
        self.format = 'Should be one of the valid values'
        self.examples = ['Sales Executive', 'Research Scientist', 'Laboratory Technician', 'Manufacturing Director', 'Healthcare Representative']

    def cast(self, val):
        return str(val)

class maritalstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Marital status of an entity'
        self.valid_values = 'Married, Single, Divorced'
        self.format = 'Should be one of the valid values'
        self.examples = ['Married', 'Single', 'Divorced']

    def cast(self, val):
        return str(val)

class monthlyincome(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The monthly income in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Monthly income should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class monthlyrate(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The monthly rate in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Monthly rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class overtime(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val == 'Yes':
            return True
        elif val == 'No':
            return False
        else:
            raise ValueError('Invalid value for overtime')

class percentsalaryhike(NumericSemanticType):

    def __init__(self):
        self.description = 'The percent salary hike of an entity'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percent salary hike should be a floating point number'
        self.examples: list[float] = [1.0, 10.0, 20.0, 50.0, 100.0]

    def cast(self, val):
        return float(val)

class standardhours(NumericSemanticType):

    def __init__(self):
        self.description = 'The standard hours of an entity'
        self.valid_range = [0, 24]
        self.dtype = int
        self.format = 'Standard hours should be an integer'
        self.examples: list[int] = [1, 8, 12, 16, 24]

    def cast(self, val):
        return int(val)

class totalworkingyears(NumericSemanticType):

    def __init__(self):
        self.description = 'The total working years of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total working years should be an integer'
        self.examples: list[int] = [1, 5, 10, 20, 40]

    def cast(self, val):
        return int(val)


MAPPING = {'age': age, 'attrition': booleanattrition, 'businesstravel': businesstravel, 'dailyrate': dailyrate, 'department': department, 'gender': gender, 'hourlyrate': hourlyrate, 'jobrole': jobrole, 'maritalstatus': maritalstatus, 'monthlyincome': monthlyincome, 'monthlyrate': monthlyrate, 'overtime': overtime, 'percentsalaryhike': percentsalaryhike, 'standardhours': standardhours, 'totalworkingyears': totalworkingyears}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Numbers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Names'
        self.valid_values = 'Country names should be valid and recognized by the pycountry library'
        self.format = 'Country names should be capitalized properly'
        self.examples = ['Norway', 'Latvia', 'Denmark', 'United States', 'Russia']

    def cast(self, val):
        try:
            country = pycountry.countries.get(name=val.title())
            return country.name
        except AttributeError:
            raise Exception('Invalid country name')

class isocode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country ISO codes'
        self.valid_values = 'ISO codes should be valid and recognized by the pycountry library'
        self.format = 'ISO codes should be all uppercase'
        self.examples = ['NOR', 'LVA', 'DNK', 'USA', 'RUS']

    def cast(self, val):
        try:
            country = pycountry.countries.get(alpha_3=val.upper())
            return country.alpha_3
        except AttributeError:
            raise Exception('Invalid ISO code')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Dates'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Dates should be stored as strings'
        self.examples = ['2021-08-19', '2021-08-21', '2021-08-17', '2021-08-15', '2021-08-14']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise Exception('Invalid date format')

class vaccinations(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.unit = 'Number of vaccinations'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinations(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.unit = 'Number of vaccinations'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinations(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.unit = 'Number of vaccinations'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinations(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.unit = 'Number of vaccinations'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinations(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.unit = 'Number of vaccinations'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinationsperhundred(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations per hundred people'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Vaccinations per hundred should be stored as floating point numbers'
        self.unit = 'Number of vaccinations per hundred people'
        self.examples = [0.0, 16.05, 67.52, 132.735, 345.37]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinationsperhundred(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations per hundred people'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Vaccinations per hundred should be stored as floating point numbers'
        self.unit = 'Number of vaccinations per hundred people'
        self.examples = [0.0, 16.05, 67.52, 132.735, 345.37]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinationsperhundred(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of vaccinations per hundred people'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Vaccinations per hundred should be stored as floating point numbers'
        self.unit = 'Number of vaccinations per hundred people'
        self.examples = [0.0, 16.05, 67.52, 132.735, 345.37]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class vaccinationspermillion(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of daily vaccinations per million people'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Vaccinations per million should be stored as floating point numbers'
        self.unit = 'Number of daily vaccinations per million people'
        self.examples = [0.0, 636.0, 2050.0, 4682.0, 117497.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class sourcename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of Data'
        self.valid_values = 'Source names should be valid and recognized organizations or institutions'
        self.format = 'Source names should be capitalized properly'
        self.examples = ['World Health Organization', 'Ministry of Health', 'SPC Public Health Division', 'Pan American Health Organization', 'Africa Centres for Disease Control and Prevention']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'country': country, 'isocode': isocode, 'date': date, 'totalvaccinations': vaccinations, 'peoplevaccinated': vaccinations, 'peoplefullyvaccinated': vaccinations, 'dailyvaccinationsraw': vaccinations, 'dailyvaccinations': vaccinations, 'totalvaccinationsperhundred': vaccinationsperhundred, 'peoplevaccinatedperhundred': vaccinationsperhundred, 'peoplefullyvaccinatedperhundred': vaccinationsperhundred, 'dailyvaccinationspermillion': vaccinationspermillion, 'sourcename': sourcename}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country name'
        self.valid_values = 'Should be a valid country name'
        self.format = 'Should be a string with the first letter of each word capitalized'
        self.examples = ['European Union', 'Argentina', 'Germany', 'South Korea', 'Latvia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Should be a valid date'
        self.format = 'Should be a string in the format YYYY-MM-DD'
        self.examples = ['2021-07-23', '2021-07-30', '2022-01-07', '2022-01-28', '2021-06-18']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').date()
        except ValueError:
            raise Exception('Invalid date')

class vaccine(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Vaccine type'
        self.valid_values = 'Should be a valid vaccine type'
        self.format = 'Should be a string with the first letter of each word capitalized'
        self.examples = ['Pfizer/BioNTech', 'Moderna', 'Oxford/AstraZeneca', 'Johnson&Johnson', 'Sinovac']

    def cast(self, val):
        return str(val).title()

class totalvaccinations(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of vaccinations'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer with no decimal places'
        self.examples = [2, 3, 1, 20481, 2]

    def cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            raise Exception('Invalid number of vaccinations')


MAPPING = {'unnamed0': identifier, 'location': location, 'date': date, 'vaccine': vaccine, 'totalvaccinations': totalvaccinations}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number or row number of a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integer values starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier or ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be integer values'
        self.examples = [7129300520, 6414100192, 5631500400, 2487200875, 1954400510]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time information'
        self.valid_values = ""Date and time should be in the format 'YYYYMMDDTHHMMSS'""
        self.format = 'Date and time information should be stored as strings'
        self.examples = ['20141013T000000', '20141209T000000', '20150225T000000', '20141209T000000', '20150218T000000']

    def cast(self, val):
        return datetime.strptime(val, '%Y%m%dT%H%M%S').strftime('%Y%m%dT%H%M%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a house'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [221900.0, 538000.0, 180000.0, 604000.0, 510000.0]

    def cast(self, val):
        return round(float(val), 2)

class bedroomcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of bedrooms in a house'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of bedrooms should be integer values'
        self.examples = [3, 3, 2, 4, 3]

    def cast(self, val):
        return int(val)

class bathroomcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of bathrooms in a house'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Number of bathrooms should be floating point values'
        self.examples = [1.0, 2.25, 1.0, 3.0, 2.0]

    def cast(self, val):
        return float(val)

class squarefeet(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Area should be integer values'
        self.unit = 'In square feet'
        self.examples = [1180, 2570, 770, 1960, 1680]

    def cast(self, val):
        return int(val)

class squarefeet(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Area should be integer values'
        self.unit = 'In square feet'
        self.examples = [1180, 2570, 770, 1960, 1680]

    def cast(self, val):
        return int(val)

class squarefeet(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Area should be integer values'
        self.unit = 'In square feet'
        self.examples = [1180, 2570, 770, 1960, 1680]

    def cast(self, val):
        return int(val)

class squarefeet(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Area in square feet'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Area should be integer values'
        self.unit = 'In square feet'
        self.examples = [1180, 2570, 770, 1960, 1680]

    def cast(self, val):
        return int(val)

class floorcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of floors in a house'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Number of floors should be floating point values'
        self.examples = [1.0, 2.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        return float(val)

class waterfront(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class viewcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a house has been viewed'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of views should be integer values'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)

class conditionlevel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Condition level of a house'
        self.valid_values = 'Condition level should be an integer between 1 and 5'
        self.format = 'Condition level should be an integer value'
        self.examples = [3, 3, 3, 5, 3]

    def cast(self, val):
        return int(val)

class gradecategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Grade category of a house'
        self.valid_values = 'Grade category should be an integer between 1 and 13'
        self.format = 'Grade category should be an integer value'
        self.examples = [7, 7, 6, 7, 8]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year information'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer value'
        self.examples = [1955, 1951, 1933, 1965, 1987]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year information'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer value'
        self.examples = [1955, 1951, 1933, 1965, 1987]

    def cast(self, val):
        return int(val)

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zipcode or postal code'
        self.valid_values = 'Zipcodes should be 5-digit numbers stored as strings'
        self.format = 'Zipcodes should be 5-digit numbers stored as strings'
        self.examples = ['98178', '98125', '98028', '98136', '98074']

    def cast(self, val):
        return str(val)

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinate'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [47.5112, 47.721, 47.7379, 47.5208, 47.6168]

    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinate'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-122.257, -122.319, -122.233, -122.393, -122.045]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'id': idnumber, 'date': datetimeclass, 'price': price, 'bedrooms': bedroomcount, 'bathrooms': bathroomcount, 'sqftliving': squarefeet, 'sqftlot': squarefeet, 'sqftabove': squarefeet, 'sqftbasement': squarefeet, 'floors': floorcount, 'waterfront': waterfront, 'view': viewcount, 'condition': conditionlevel, 'grade': gradecategory, 'yrbuilt': year, 'yrrenovated': year, 'zipcode': zipcode, 'lat': latitude, 'long': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index values'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class harmonizedsystemcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Harmonized System code'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'HS codes are 2-digit integers'
        self.examples = [2, 3, 4, 5, 6]

    def cast(self, val):
        return int(val)

class tradevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Trade value'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trade value should be a floating point number'
        self.examples = [1.4, 0.08, 3.89, float('nan'), float('nan')]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return float(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a recognized country name'
        self.format = 'Country names should be capitalized'
        self.examples = ['AFGHANISTAN', 'GERMANY', 'NEPAL', 'MALAYSIA', 'CHINA P RP']

    def cast(self, val):
        country = pycountry.countries.get(name=val.title())
        if country is not None:
            return country.name.upper()
        else:
            raise Exception('Invalid country name')

class tradeyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Trade Year'
        self.valid_range = [2010, 2016]
        self.dtype = int
        self.format = 'Trade Year should be an integer'
        self.examples = [2010, 2011, 2012, 2013, 2014]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'hscode': harmonizedsystemcode, 'value': tradevalue, 'country': countryname, 'year': tradeyear}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number for the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class harmonizedsystemcode(NumericSemanticType):

    def __init__(self):
        self.description = 'HS Code (Harmonized Commodity Description and Coding System) used for international trade'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'HS Code should be an integer between 1 and 99'
        self.examples = [7, 8, 9, 12, 13]

    def cast(self, val):
        return int(val)

class tradevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'The trade value in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trade value should be a floating point number with two decimal places for cents'
        self.examples = [9.14, 93.82, 2.54, 0.32, 37.67]

    def cast(self, val):
        num = float(val)
        return round(num, 2) if not math.isnan(num) else float('nan')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of the country'
        self.valid_values = 'The name of the country should be a valid country name according to the pycountry library'
        self.format = 'Country name should be capitalized'
        self.examples = ['GERMANY', 'ITALY', 'FRANCE', 'CHINA P RP', 'SINGAPORE']

    def cast(self, val):
        val = str(val).upper()
        if pycountry.countries.get(name=val):
            return val
        else:
            return 'UNKNOWN'

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of the trade'
        self.valid_range = [2010, 2021]
        self.dtype = int
        self.format = 'Year should be an integer between 2010 and 2021'
        self.examples = [2010, 2011, 2012, 2013, 2014]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'hscode': harmonizedsystemcode, 'value': tradevalue, 'country': countryname, 'year': year}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of an entity in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indices should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class hscode(NumericSemanticType):

    def __init__(self):
        self.description = 'Harmonized System (HS) code, a standardized numerical method of classifying traded products'
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = 'HS codes are integers between 1 and 99'
        self.examples = [2, 3, 4, 6, 7]

    def cast(self, val):
        return int(val)

class tradevalue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The trade value of an entity'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Trade values should be formatted as floating point numbers'
        self.unit = 'In million USD'
        self.examples = [0.18, 0.0, 12.48, 0.0, 1.89]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Country names should be in capitalized form'
        self.examples = ['AFGHANISTAN TIS', 'GERMANY', 'CHINA P RP', 'BANGLADESH PR', 'FRANCE']

    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of a particular event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Years should be formatted as 4-digit integers'
        self.examples = [2018, 2017, 2016, 2015, 2014]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'hscode': hscode, 'value': tradevalue, 'country': countryname, 'year': year}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class hscodes(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Harmonized System (HS) code is a standardized system of names and numbers to classify traded products'
        self.valid_values = 'HS code should be an integer between 1 and 99'
        self.format = 'HS code should be an integer'
        self.examples = [5, 7, 8, 9, 11]

    def cast(self, val):
        return int(val)

class tradevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Value of traded goods'
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Trade Value should be a floating point number'
        self.examples = [0.0, 12.38, 268.6, 35.48, float('nan')]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country name'
        self.valid_values = 'Country name should be a valid country name'
        self.format = 'Country name should be in proper title case'
        self.examples = ['BELGIUM', 'AUSTRALIA', 'U S A', 'GERMANY', 'ITALY']

    def cast(self, val):
        if pycountry.countries.get(name=val.title()) is None:
            return None
        else:
            return val.title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [2010, 2011, 2012, 2013, 2014]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'hscode': hscodes, 'value': tradevalue, 'country': countryname, 'year': year}"
"class respondentidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each respondent'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Respondent ID should be a positive integer'
        self.examples = [1, 3, 4, 5, 7]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Names should match with the official names of countries'
        self.format = 'Names should be capitalized and in English'
        self.examples = ['Kenya', 'United Kingdom', 'United States', 'South Africa', 'India']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if pycountry.countries.get(name=val):
            return val
        else:
            return float('nan')

class employmentstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Employment status of a respondent'
        self.valid_values = ['Employed full-time', 'Independent contractor, freelancer, or self-employed', 'Not employed, but looking for work', 'Employed part-time', 'Not employed, and not looking for work']
        self.format = 'Each value should be a string representing an employment status from the defined set'
        self.examples = ['Employed part-time', 'Employed full-time', 'Not employed, but looking for work', 'Employed part-time', 'Not employed, and not looking for work']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val in self.valid_values:
            return val
        else:
            return float('nan')

class companysize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of the company where a respondent is employed'
        self.valid_values = ['20 to 99 employees', '100 to 499 employees', '10,000 or more employees', '10 to 19 employees', '1,000 to 4,999 employees']
        self.format = 'Each value should be a string representing a company size from the defined set'
        self.examples = ['20 to 99 employees', '10,000 or more employees', '20 to 99 employees', '100 to 499 employees', '10,000 or more employees']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val in self.valid_values:
            return val
        else:
            return float('nan')

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in various currencies of a respondent'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number with no decimal places'
        self.unit = 'Various currencies'
        self.examples = [0, 60000, 100000, 50000, 80000]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'respondent': respondentidentifier, 'hobby': booleanvalue, 'opensource': booleanvalue, 'country': countryname, 'employment': employmentstatus, 'companysize': companysize, 'salary': salary}"
"class surveyidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each survey response'
        self.valid_range = [0, 128]
        self.dtype = int
        self.format = 'Identifier should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class surveyquestion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Survey question'
        self.valid_values = 'Survey questions are strings that correspond to the question asked in the survey'
        self.format = 'Questions should be capitalized and have no trailing or leading whitespace'
        self.examples = ['Respondent', 'Hobby', 'OpenSource', 'Country', 'Student']

    def cast(self, val):
        return str(val).strip().capitalize()


MAPPING = {'unnamed0': surveyidentifier, 'column': surveyquestion}"
"class postindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a Reddit post in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class postscore(NumericSemanticType):

    def __init__(self):
        self.description = 'The score of a Reddit post'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The score should be an integer'
        self.examples = [55, 110, 0, 29, 71]

    def cast(self, val):
        return int(val)

class postidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Reddit post'
        self.valid_values = 'The ID is a string of alphanumeric characters'
        self.format = 'Post IDs are alphanumeric strings'
        self.examples = ['l6ulcx', 'l6uibd', 'l6uhhn', 'l6ugk6', 'l6ufgy']

    def cast(self, val):
        return str(val)

class commssize(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of comments in a Reddit post'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number of comments should be an integer'
        self.examples = [6, 23, 47, 74, 156]

    def cast(self, val):
        return int(val)

class postcreationtime(NumericSemanticType):

    def __init__(self):
        self.description = 'The UNIX timestamp when the Reddit post was created'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'The UNIX timestamp should be a floating point number'
        self.examples = [1611862661.0, 1611862330.0, 1611862235.0, 1611862137.0, 1611862016.0]

    def cast(self, val):
        return float(val)

class posttimestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The human-readable timestamp when the Reddit post was created'
        self.valid_values = ""The timestamp should be a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Timestamps are formatted as 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2021-01-28 21:37:41', '2021-01-28 21:32:10', '2021-01-28 21:30:35', '2021-01-28 21:28:57', '2021-01-28 21:26:56']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')


MAPPING = {'unnamed0': postindex, 'score': postscore, 'id': postidentifier, 'commsnum': commssize, 'created': postcreationtime, 'timestamp': posttimestamp}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique ID should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class geographicregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The region a country belongs to'
        self.valid_values = 'Must be a valid geographical region'
        self.format = 'Must be a string'
        self.examples = ['Africa', 'Asia', 'Europe', 'North America', 'South America']

    def cast(self, val):
        return str(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a country'
        self.valid_values = 'Must be a valid country name'
        self.format = 'Must be a string'
        self.examples = ['Ethiopia', 'Algeria', 'Benin', 'Central African Republic', 'Egypt']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a city'
        self.valid_values = 'Must be a valid city name'
        self.format = 'Must be a string'
        self.examples = ['Addis Ababa', 'Algiers', 'Cotonou', 'Bangui', 'Cairo']

    def cast(self, val):
        return str(val).title()

class month(NumericSemanticType):

    def __init__(self):
        self.description = 'Month of the year'
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = 'Month should be an integer between 1 and 12'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 12:
            raise Exception('Invalid month number')
        return num

class day(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the month'
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = 'Day should be an integer between 1 and 31'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 31:
            raise Exception('Invalid day number')
        return num

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [1995, 2000, 2005, 2010, 2015]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year number')
        return num

class temperature(NumericSemanticType):

    def __init__(self):
        self.description = 'Average temperature'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a floating point number'
        self.examples = [64.2, 49.4, 48.8, 46.4, 47.9]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': uniqueidentifier, 'region': geographicregion, 'country': countryname, 'city': cityname, 'month': month, 'day': day, 'year': year, 'avgtemperature': temperature}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The row index of a dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The row index of a dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The row index of a dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class companyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the company'
        self.valid_values = 'Name should be a string'
        self.format = 'Names should be string with the first letter of each word capitalized'
        self.examples = ['RVSN USSR', 'Arianespace', 'CASC', 'General Dynamics', 'NASA']

    def cast(self, val):
        return str(val).title()

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time in UTC'
        self.valid_values = ""Date and time should fit the format: 'Day Mon DD, YYYY HH:MM UTC'""
        self.format = 'Date and time stored as strings'
        self.examples = ['Wed Nov 05, 2008 00:15 UTC', 'Tue Aug 28, 1990 09:05 UTC', 'Wed Feb 07, 1990 01:33 UTC', 'Tue Jun 26, 1973', 'Sun Aug 25, 1991 08:40 UTC']

    def cast(self, val):
        return datetime.strptime(val, '%a %b %d, %Y %H:%M %Z')

class rocketdetail(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Details of the rocket'
        self.valid_values = 'Details should be a string'
        self.format = 'Details stored as string'
        self.examples = ['Cosmos-3MRB (65MRB) | BOR-5 Shuttle', 'Titan IV(402)B | DSP', 'Titan IIID | KH-11', 'Lambda-IV S | Osumi', 'Proton K/Block D | Zond']

    def cast(self, val):
        return str(val)

class rocketstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['StatusRetired', 'StatusActive']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(f'Invalid status. Expected one of: {self.valid_values}')

class cost(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The cost in million USD of launching a rocket'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Cost should be formatted as a floating point number (in million USD units) with two decimal places for cents'
        self.unit = 'In million USD'
        self.examples = [450.0, 200.0, 40.0, 62.0, 30.8]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 2)

class missionstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Success', 'Failure', 'Partial Failure', 'Prelaunch Failure']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(f'Invalid status. Expected one of: {self.valid_values}')


MAPPING = {'unnamed02': rowindex, 'unnamed01': rowindex, 'unnamed0': rowindex, 'companyname': companyname, 'datum': datetimeclass, 'detail': rocketdetail, 'statusrocket': rocketstatus, 'rocket': cost, 'statusmission': missionstatus}"
"class schoolname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a School'
        self.valid_values = 'The name of the school should be a string'
        self.format = 'The name of the school should be a string'
        self.examples = ['GP', 'MS']

    def cast(self, val):
        return str(val)

class gender(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gender of the Student'
        self.valid_values = ""Gender should be either 'F' or 'M'""
        self.format = ""Gender should be either 'F' or 'M'""
        self.examples = ['F', 'M']

    def cast(self, val):
        return str(val)

class studentage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the Student'
        self.valid_range = [15, 22]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [15, 16, 17, 18, 19, 20, 21, 22]

    def cast(self, val):
        return int(val)

class studentaddress(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address of the Student'
        self.valid_values = ""Address should be either 'U' or 'R'""
        self.format = ""Address should be either 'U' or 'R'""
        self.examples = ['U', 'R']

    def cast(self, val):
        return str(val)

class parentscohabitationstatus(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Cohabitation status of the student's parents""
        self.valid_values = ""Cohabitation status should be either 'T' or 'A'""
        self.format = ""Cohabitation status should be either 'T' or 'A'""
        self.examples = ['T', 'A']

    def cast(self, val):
        return str(val)

class mothereducation(NumericSemanticType):

    def __init__(self):
        self.description = ""Education level of the student's mother""
        self.valid_range = [0, 4]
        self.dtype = int
        self.format = 'Education level should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class fathereducation(NumericSemanticType):

    def __init__(self):
        self.description = ""Education level of the student's father""
        self.valid_range = [0, 4]
        self.dtype = int
        self.format = 'Education level should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class traveltime(NumericSemanticType):

    def __init__(self):
        self.description = 'Travel time to school'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Travel time should be an integer'
        self.examples = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class studytime(NumericSemanticType):

    def __init__(self):
        self.description = 'Weekly study time'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Study time should be an integer'
        self.examples = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class numberoffailures(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of past class failures'
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = 'Number of failures should be an integer'
        self.examples = [0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class schoolsupport(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class familysupport(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class paidtuition(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class extracurricularactivities(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class attendednursery(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class wantshighereducation(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class hasinternet(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class inromanticrelationship(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['yes', 'no']

    def cast(self, val):
        return str(val)

class familyrelationships(NumericSemanticType):

    def __init__(self):
        self.description = 'Quality of family relationships'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Quality should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class freetime(NumericSemanticType):

    def __init__(self):
        self.description = 'Free time after school'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Free time should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class goingout(NumericSemanticType):

    def __init__(self):
        self.description = 'Going out with friends'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Going out should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class weekdayalcoholconsumption(NumericSemanticType):

    def __init__(self):
        self.description = 'Alcohol consumption on weekdays'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Consumption should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class weekendalcoholconsumption(NumericSemanticType):

    def __init__(self):
        self.description = 'Alcohol consumption on weekends'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Consumption should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class currenthealthstatus(NumericSemanticType):

    def __init__(self):
        self.description = 'Current health status'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'school': schoolname, 'sex': gender, 'age': studentage, 'address': studentaddress, 'pstatus': parentscohabitationstatus, 'medu': mothereducation, 'fedu': fathereducation, 'traveltime': traveltime, 'studytime': studytime, 'failures': numberoffailures, 'schoolsup': schoolsupport, 'famsup': familysupport, 'paid': paidtuition, 'activities': extracurricularactivities, 'nursery': attendednursery, 'higher': wantshighereducation, 'internet': hasinternet, 'romantic': inromanticrelationship, 'famrel': familyrelationships, 'freetime': freetime, 'goout': goingout, 'dalc': weekdayalcoholconsumption, 'walc': weekendalcoholconsumption, 'health': currenthealthstatus}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid index')

class gamedate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the game'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2020-12-23', '2020-12-29', '2016-11-25', '2011-04-13', '2022-11-07']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid game date')

class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Game IDs are non-negative integers'
        self.examples = [22200477, 22200478, 22200466, 22200467, 22200468]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid game ID')

class gamestatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of the game'
        self.valid_values = ""The game status can only be 'Final'""
        self.format = 'Game status is a string'
        self.examples = ['Final', 'Final', 'Final', 'Final', 'Final']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val == 'Final':
            return val
        else:
            raise Exception('Invalid game status')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Team IDs are non-negative integers'
        self.examples = [1610612740, 1610612762, 1610612739, 1610612755, 1610612737]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid team ID')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Team IDs are non-negative integers'
        self.examples = [1610612740, 1610612762, 1610612739, 1610612755, 1610612737]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid team ID')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Team IDs are non-negative integers'
        self.examples = [1610612740, 1610612762, 1610612739, 1610612755, 1610612737]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid team ID')

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier of a team'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Team IDs are non-negative integers'
        self.examples = [1610612740, 1610612762, 1610612739, 1610612755, 1610612737]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid team ID')

class season(NumericSemanticType):

    def __init__(self):
        self.description = 'Season of the game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Seasons are non-negative integers'
        self.examples = [2022, 2022, 2022, 2022, 2022]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid season')

class points(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of points scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points are non-negative floating point numbers'
        self.examples = [126.0, 120.0, 114.0, 113.0, 108.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid points')

class points(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of points scored by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points are non-negative floating point numbers'
        self.examples = [126.0, 120.0, 114.0, 113.0, 108.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid points')

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are floating point numbers between 0 and 1'
        self.examples = [0.484, 0.488, 0.482, 0.441, 0.429]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are floating point numbers between 0 and 1'
        self.examples = [0.484, 0.488, 0.482, 0.441, 0.429]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are floating point numbers between 0 and 1'
        self.examples = [0.484, 0.488, 0.482, 0.441, 0.429]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid percentage')

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentages are floating point numbers between 0 and 1'
        self.examples = [0.484, 0.488, 0.482, 0.441, 0.429]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid percentage')

class assistsrebounds(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of assists or rebounds made by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Assists/Rebounds are non-negative floating point numbers'
        self.examples = [25.0, 16.0, 22.0, 27.0, 22.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid assists/rebounds')

class assistsrebounds(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of assists or rebounds made by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Assists/Rebounds are non-negative floating point numbers'
        self.examples = [25.0, 16.0, 22.0, 27.0, 22.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid assists/rebounds')

class assistsrebounds(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of assists or rebounds made by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Assists/Rebounds are non-negative floating point numbers'
        self.examples = [25.0, 16.0, 22.0, 27.0, 22.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid assists/rebounds')

class assistsrebounds(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of assists or rebounds made by a team'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Assists/Rebounds are non-negative floating point numbers'
        self.examples = [25.0, 16.0, 22.0, 27.0, 22.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return val
        else:
            raise Exception('Invalid assists/rebounds')

class hometeamwins(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid home team wins')


MAPPING = {'unnamed0': index, 'gamedateest': gamedate, 'gameid': gameidentifier, 'gamestatustext': gamestatus, 'hometeamid': teamidentifier, 'visitorteamid': teamidentifier, 'teamidhome': teamidentifier, 'teamidaway': teamidentifier, 'season': season, 'ptshome': points, 'ptsaway': points, 'fgpcthome': percent, 'ftpcthome': percent, 'fgpctaway': percent, 'ftpctaway': percent, 'asthome': assistsrebounds, 'rebhome': assistsrebounds, 'astaway': assistsrebounds, 'rebaway': assistsrebounds, 'hometeamwins': hometeamwins}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Game ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Game ID should be a positive integer'
        self.examples = [22200477, 22781792, 22000175, 22100032, 22101013]

    def cast(self, val):
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Team ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Team ID should be a positive integer'
        self.examples = [1610612759, 1610612751, 1610612744, 1610612759, 1610612766]

    def cast(self, val):
        return int(val)

class teamabbreviation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Team Abbreviation'
        self.valid_values = 'Team abbreviation should be a unique string with length 3'
        self.format = 'Team Abbreviation should be a 3 character string'
        self.examples = ['SAS', 'BOS', 'MIA', 'MIL', 'DAL']

    def cast(self, val):
        return str(val).upper()

class teamcity(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Team City'
        self.valid_values = 'Team city should be a string that represents the city of the team'
        self.format = 'Team City should be a string'
        self.examples = ['San Antonio', 'Boston', 'Miami', 'Milwaukee', 'Dallas']

    def cast(self, val):
        return str(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Player ID'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be a positive integer'
        self.examples = [1155065, 203503, 1628391, 1629655, 1631466]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Player Name'
        self.valid_values = 'Player name should be a string that represents the full name of the player'
        self.format = 'Player Name should be a string'
        self.examples = ['Torrey Craig', 'Grant Williams', 'Duncan Robinson', 'Mikal Bridges', 'Jayson Tatum']

    def cast(self, val):
        return str(val)

class startposition(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Player's position in the game""
        self.valid_values = ""Player position should be a string in the set {'G', 'F', 'C'}""
        self.format = 'Player position should be a string'
        self.examples = ['G', 'F', 'C']

    def cast(self, val):
        if val in {'G', 'F', 'C'}:
            return str(val)
        else:
            raise ValueError('Invalid start position')

class points(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of points scored by the player'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Points should be a positive integer'
        self.examples = [10, 15, 20, 25, 30]

    def cast(self, val):
        return int(val)


MAPPING = {'gameid': gameidentifier, 'teamid': teamidentifier, 'teamabbreviation': teamabbreviation, 'teamcity': teamcity, 'playerid': playeridentifier, 'playername': playername, 'startposition': startposition, 'pts': points}"
"class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NBA player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = [""Royce O'Neale"", 'Bojan Bogdanovic', 'Rudy Gobert', 'Donovan Mitchell', 'Mike Conley']

    def cast(self, val):
        return str(val).title()

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for NBA teams'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Team ID should be formatted as integers'
        self.examples = [1610612762, 1610612762, 1610612762, 1610612762, 1610612762]

    def cast(self, val):
        return int(val)

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for NBA players'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Player ID should be formatted as integers'
        self.examples = [1626220, 202711, 203497, 1628378, 201144]

    def cast(self, val):
        return int(val)

class season(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the NBA season'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Season should be formatted as integers representing the year'
        self.examples = [2019, 2019, 2019, 2019, 2019]

    def cast(self, val):
        return int(val)


MAPPING = {'playername': playername, 'teamid': teamidentifier, 'playerid': playeridentifier, 'season': season}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an index or a position.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer and non-negative.'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0:
            raise ValueError('Negative index is not allowed.')
        return int(val)

class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each team.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'TeamID should be a positive integer.'
        self.examples = [1610612743, 1610612763, 1610612740, 1610612756, 1610612746]

    def cast(self, val):
        if val < 0:
            raise ValueError('Negative teamID is not allowed.')
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the game.'
        self.valid_values = 'Date should follow the format YYYY-MM-DD.'
        self.format = 'Date should be a string in the format YYYY-MM-DD.'
        self.examples = ['2022-12-22', '2022-12-22', '2022-12-22', '2022-12-22', '2022-12-22']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class conference(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Conference to which the team belongs.'
        self.valid_values = ""Conference can be either 'West' or 'East'.""
        self.format = 'Conference should be a string.'
        self.examples = ['West', 'East', 'East', 'West', 'West']

    def cast(self, val):
        if val not in ['West', 'East']:
            raise ValueError('Invalid conference value.')
        return str(val)

class team(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the team.'
        self.valid_values = 'Team name should be a string.'
        self.format = 'Team name should be capitalized.'
        self.examples = ['Denver', 'Memphis', 'New Orleans', 'Phoenix', 'LA Clippers']

    def cast(self, val):
        return str(val).title()

class gamesplayed(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of games played.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Games played should be a non-negative integer.'
        self.examples = [30, 30, 31, 32, 33]

    def cast(self, val):
        if val < 0:
            raise ValueError('Negative value for games played is not allowed.')
        return int(val)

class gamesplayed(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of games played.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Games played should be a non-negative integer.'
        self.examples = [30, 30, 31, 32, 33]

    def cast(self, val):
        if val < 0:
            raise ValueError('Negative value for games played is not allowed.')
        return int(val)

class gamesplayed(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of games played.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Games played should be a non-negative integer.'
        self.examples = [30, 30, 31, 32, 33]

    def cast(self, val):
        if val < 0:
            raise ValueError('Negative value for games played is not allowed.')
        return int(val)

class record(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The win-loss record of the team.'
        self.valid_values = ""Record should be of the form 'wins-losses'.""
        self.format = ""Record should be a string in the form 'wins-losses'.""
        self.examples = ['10-3', '13-2', '13-4', '14-4', '11-7']

    def cast(self, val):
        match_obj = re.match('^[0-9]*-[0-9]*$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid record format.')

class record(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The win-loss record of the team.'
        self.valid_values = ""Record should be of the form 'wins-losses'.""
        self.format = ""Record should be a string in the form 'wins-losses'.""
        self.examples = ['10-3', '13-2', '13-4', '14-4', '11-7']

    def cast(self, val):
        match_obj = re.match('^[0-9]*-[0-9]*$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid record format.')

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError('Invalid boolean value.')
        return int(val)


MAPPING = {'unnamed0': index, 'teamid': teamidentifier, 'standingsdate': date, 'conference': conference, 'team': team, 'g': gamesplayed, 'w': gamesplayed, 'l': gamesplayed, 'homerecord': record, 'roadrecord': record, 'returntoplay': booleanvalue}"
"class teamidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each NBA team'
        self.valid_range = [1610612737, 1610612766]
        self.dtype = int
        self.format = 'Team ID should be a 10-digit integer'
        self.examples = [1610612737, 1610612738, 1610612740, 1610612741, 1610612742]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year when a team was active'
        self.valid_range = [1946, 2019]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1946, 1949, 1966, 1980, 2002]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year when a team was active'
        self.valid_range = [1946, 2019]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1946, 1949, 1966, 1980, 2002]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year when a team was active'
        self.valid_range = [1946, 2019]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1946, 1949, 1966, 1980, 2002]

    def cast(self, val):
        return int(val)

class abbreviation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of NBA team names'
        self.valid_values = 'Abbreviation should be a string of 3 capital letters'
        self.format = 'Abbreviation is usually the first three letters of the team name'
        self.examples = ['ATL', 'BOS', 'NOP', 'CHI', 'DAL']

    def cast(self, val):
        return str(val).upper()

class nickname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nickname of NBA team'
        self.valid_values = 'Nickname should be a string'
        self.format = 'Nickname should be capitalized and without any special characters'
        self.examples = ['Hawks', 'Celtics', 'Pelicans', 'Bulls', 'Mavericks']

    def cast(self, val):
        return str(val).title()

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City where NBA team is located'
        self.valid_values = 'City name should be a string'
        self.format = 'City name should be capitalized and without any special characters'
        self.examples = ['Atlanta', 'Boston', 'New Orleans', 'Chicago', 'Dallas']

    def cast(self, val):
        return str(val).title()

class arenacapacity(NumericSemanticType):

    def __init__(self):
        self.description = ""Seating capacity of NBA team's home arena""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Arena capacity should be a positive floating point number'
        self.examples = [18729.0, 18624.0, float('nan'), 21711.0, 19200.0]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Tony Ressler', 'Wyc Grousbeck', 'Tom Benson', 'Jerry Reinsdorf', 'Mark Cuban']

    def cast(self, val):
        return str(val).title()

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Tony Ressler', 'Wyc Grousbeck', 'Tom Benson', 'Jerry Reinsdorf', 'Mark Cuban']

    def cast(self, val):
        return str(val).title()

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Tony Ressler', 'Wyc Grousbeck', 'Tom Benson', 'Jerry Reinsdorf', 'Mark Cuban']

    def cast(self, val):
        return str(val).title()


MAPPING = {'teamid': teamidentifier, 'minyear': year, 'maxyear': year, 'yearfounded': year, 'abbreviation': abbreviation, 'nickname': nickname, 'city': city, 'arenacapacity': arenacapacity, 'owner': personname, 'generalmanager': personname, 'headcoach': personname}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A numerical identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A numerical identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of countries'
        self.valid_values = 'Names should correspond to official country names according to ISO standards'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Algeria', 'Egypt', 'South Africa', 'Zimbabwe', 'Angola']

    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [1800, datetime.now().year]
        self.dtype = int
        self.format = 'Four-digit integer number'
        self.examples = [1870, 1871, 1872, 1873, 1874]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class exchangerateusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Exchange rate of local currency to USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Exchange rate should be represented as a decimal number'
        self.unit = 'In USD'
        self.examples = [0.052264, 0.052798, 0.052274, 0.05168, 0.051308]

    def cast(self, val):
        return round(float(val), 6)

class percent(NumericSemanticType):

    def __init__(self):
        self.description = 'Percentage value'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Percentage should be represented as a decimal number'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return round(float(val), 2)

class inflation(NumericSemanticType):

    def __init__(self):
        self.description = 'Inflation rate'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Inflation rate should be represented as a decimal number'
        self.examples = [3.441455696, 14.14913958, -3.718592965, 11.20389701, -3.848560701]

    def cast(self, val):
        return round(float(val), 9)

class crisis(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Crisis status'
        self.valid_values = ""Values should be either 'crisis' or 'no_crisis'""
        self.format = 'All characters should be lowercase'
        self.examples = ['crisis', 'no_crisis', 'no_crisis', 'no_crisis', 'no_crisis']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': identifier, 'case': identifier, 'country': countryname, 'year': year, 'systemiccrisis': binaryvalue, 'domesticdebtindefault': binaryvalue, 'sovereignexternaldebtdefault': binaryvalue, 'independence': binaryvalue, 'currencycrises': binaryvalue, 'inflationcrises': binaryvalue, 'exchusd': exchangerateusd, 'gdpweighteddefault': percent, 'inflationannualcpi': inflation, 'bankingcrisis': crisis}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index of the row in a dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid index')
        return int(val)

class jobpostdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the job posting'
        self.valid_values = ""Dates should be strings in the format 'MMM d, yyyy'""
        self.format = 'Dates should be datetime objects'
        self.examples = ['May 6, 2014', 'Nov 9, 2007', 'Mar 21, 2014', 'Aug 20, 2012', 'Jul 17, 2009']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return datetime.strptime(val, '%b %d, %Y')

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of the job'
        self.valid_values = 'Job titles should be a string'
        self.format = 'Job titles should be a capitalized string'
        self.examples = ['Accountant', 'Chief Accountant', 'Medical Representative', 'Sales Manager', 'Administrative Assistant']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).title()

class companyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the company'
        self.valid_values = 'Company names should be a string'
        self.format = 'Company names should be a capitalized string'
        self.examples = ['ArmenTel CJSC', 'World Vision Armenia', 'Mentor Graphics Development Services CJSC', 'Career Center NGO', 'Orange Armenia']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the job posting'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a four-digit integer'
        self.examples = [2004, 2007, 2010, 2012, 2015]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise Exception('Invalid year')
        return int(val)

class month(NumericSemanticType):

    def __init__(self):
        self.description = 'Month of the job posting'
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = 'Month should be an integer between 1 and 12'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 1 or val > 12:
            raise Exception('Invalid month')
        return int(val)

class itjob(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [False, True]

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid boolean value')
        return bool(val)


MAPPING = {'unnamed0': index, 'date': jobpostdate, 'title': jobtitle, 'company': companyname, 'year': year, 'month': month, 'it': itjob}"
"class incidentidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an incident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Incident IDs should be integer values'
        self.examples = [632747, 1032257, 1428412, 1725039, 1978652]

    def cast(self, val):
        return int(val)

class incidentdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the incident'
        self.valid_values = ""Date should be in the format 'Month Day, Year'""
        self.format = ""In 'Month Day, Year' format""
        self.examples = ['July 5, 2020', 'May 23, 2020', 'June 20, 2020', 'September 6, 2020', 'June 22, 2020']

    def cast(self, val):
        return datetime.strptime(str(val), '%B %d, %Y').strftime('%B %d, %Y')

class usstate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.valid_values = 'Names of the 50 US states'
        self.format = 'Full name of the state with the first letter capitalized'
        self.examples = ['Illinois', 'California', 'Texas', 'Florida', 'Pennsylvania']

    def cast(self, val):
        return str(val).title()

class uscity(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US Cities'
        self.valid_values = 'Names of cities in the US'
        self.format = 'Full name of the city with the first letter capitalized'
        self.examples = ['Chicago', 'Philadelphia', 'Baltimore', 'Houston', 'Saint Louis']

    def cast(self, val):
        return str(val).title()

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Physical address'
        self.valid_values = 'A valid US address string'
        self.format = 'Street number, street name, and optional apartment/unit number'
        self.examples = ['700 block of Chalfonte Pl', '600 block of Parkway Dr', '2900 Travis St', '3900 Martin Luther King Jr Ave SW', '1300 block of Columbia Rd NW']

    def cast(self, val):
        return str(val)

class numberofpeople(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of people involved in an incident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value'
        self.examples = [0, 1, 3, 4, 5]

    def cast(self, val):
        return int(val)

class numberofpeople(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of people involved in an incident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value'
        self.examples = [0, 1, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'incidentid': incidentidentifier, 'incidentdate': incidentdate, 'state': usstate, 'cityorcounty': uscity, 'address': address, 'killed': numberofpeople, 'injured': numberofpeople}"
"class shootingevent(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Shooting Event'
        self.valid_values = 'Name of the shooting event should be a string, representing the event'
        self.format = 'Each word of the event name should be capitalized'
        self.examples = ['Uvalde Elementary School Massacre', 'Buffalo Supermarket Massacre', 'Sacramento County Church Shooting', 'Oxford High School Shooting', 'San Jose VTA Shooting']

    def cast(self, val):
        return str(val).title()

class citystate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City and State'
        self.valid_values = 'Name of the city followed by comma and the full name of the state'
        self.format = 'The first letter of the city, state should be capitalized'
        self.examples = ['Uvalde, Texas', 'Buffalo, New York', 'Sacramento, California', 'Oxford, Michigan', 'San Jose, California']

    def cast(self, val):
        return str(val).title()

class dateofevent(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the Event'
        self.valid_values = 'Date should be a string in the format MM/DD/YY'
        self.format = 'Date should be in the format MM/DD/YY'
        self.examples = ['5/24/22', '5/14/22', '2/28/22', '11/30/21', '5/26/21']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%y').strftime('%m/%d/%y')

class numberofvictims(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Victims'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of victims should be an integer'
        self.examples = [7, 5, 11, 15, 3]

    def cast(self, val):
        return int(val)

class numberofvictims(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Victims'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of victims should be an integer'
        self.examples = [7, 5, 11, 15, 3]

    def cast(self, val):
        return int(val)

class numberofvictims(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Victims'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of victims should be an integer'
        self.examples = [7, 5, 11, 15, 3]

    def cast(self, val):
        return int(val)

class ageofshooter(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the Shooter'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [21, 28, 44, 26, 20]

    def cast(self, val):
        if val == '-':
            return float('nan')
        return int(val)

class mentalhealthissues(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class weaponslegallyobtained(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class weapontype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of Weapon'
        self.valid_values = 'Type of weapon should be a string, representing the weapon'
        self.format = 'Each word of the weapon type should be lowercase'
        self.examples = ['one semiautomatic handgun', 'semiautomatic handgun', 'semiautomatic rifle', 'handgun', 'two semiautomatic handguns']

    def cast(self, val):
        return str(val).lower()

class genderofshooter(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of the Shooter'
        self.valid_values = ""Gender should be one of the following: ['Male', 'Female', 'Male & Female']""
        self.format = 'Gender should be capitalized'
        self.examples = ['Male', 'Female', 'Male & Female']

    def cast(self, val):
        return str(val).capitalize()

class shooterlocation(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Geographical location of the Shooter'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Geographical location should be a floating point number'
        self.unit = 'Degree'
        self.examples = [40.052151, 42.84410784, 37.316097, 39.68663, 38.60111019]

    def cast(self, val):
        return float(val) if val != '-' else float('nan')

class shooterlocation(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Geographical location of the Shooter'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Geographical location should be a floating point number'
        self.unit = 'Degree'
        self.examples = [40.052151, 42.84410784, 37.316097, 39.68663, 38.60111019]

    def cast(self, val):
        return float(val) if val != '-' else float('nan')

class typeofshooting(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Shooting'
        self.valid_values = ""Type of shooting should be one of the following: ['Mass', 'Spree']""
        self.format = 'Type of shooting should be capitalized'
        self.examples = ['Mass', 'Spree']

    def cast(self, val):
        return str(val).capitalize()

class yearofshooting(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Shooting'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year of shooting should be an integer'
        self.examples = [2009, 2010, 2011, 2012, 2013]

    def cast(self, val):
        return int(val)


MAPPING = {'case': shootingevent, 'location': citystate, 'date': dateofevent, 'fatalities': numberofvictims, 'injured': numberofvictims, 'totalvictims': numberofvictims, 'ageofshooter': ageofshooter, 'priorsignsmentalhealthissues': mentalhealthissues, 'weaponsobtainedlegally': weaponslegallyobtained, 'weapontype': weapontype, 'gender': genderofshooter, 'latitude': shooterlocation, 'longitude': shooterlocation, 'type': typeofshooting, 'year': yearofshooting}"
"class videogamename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Video Game'
        self.valid_values = 'Name should be a non-empty string.'
        self.format = 'First character of each word should be capitalized.'
        self.examples = ['Need For Speed: Most Wanted', 'Ratatouille', 'Lego Marvel Super Heroes', 'Madden Nfl 07', 'Fifa 14']

    def cast(self, val):
        return str(val).title()

class videogameplatform(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Platform of a Video Game'
        self.valid_values = 'Platform name should be a non-empty string.'
        self.format = 'All characters should be uppercase.'
        self.examples = ['PS2', 'DS', 'PS3', 'WII', 'X360']

    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Release'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit number'
        self.examples = [2006, 1985, 2008, 2009, 1996]

    def cast(self, val):
        return int(val)

class videogamegenre(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Genre of a Video Game'
        self.valid_values = 'Genre name should be a non-empty string.'
        self.format = 'First character of each word should be capitalized.'
        self.examples = ['Action', 'Sports', 'Misc', 'Role-Playing', 'Shooter']

    def cast(self, val):
        return str(val).title()

class videogamepublisher(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Publisher of a Video Game'
        self.valid_values = 'Publisher name should be a non-empty string.'
        self.format = ""Each word's first character should be capitalized.""
        self.examples = ['Electronic Arts', 'Activision', 'Namco Bandai Games', 'Ubisoft', 'Konami Digital Entertainment']

    def cast(self, val):
        return str(val).title()

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In millions'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def cast(self, val):
        return float(val)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In millions'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def cast(self, val):
        return float(val)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In millions'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def cast(self, val):
        return float(val)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In millions'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def cast(self, val):
        return float(val)

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In millions'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Score should be a floating point number'
        self.examples = [76.0, 82.0, 80.0]

    def cast(self, val):
        return float(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a Video Game'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Score should be a floating point number'
        self.examples = [76.0, 82.0, 80.0]

    def cast(self, val):
        return float(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Critics/Users'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer'
        self.examples = [51, 73, 36]

    def cast(self, val):
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of Critics/Users'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be an integer'
        self.examples = [51, 73, 36]

    def cast(self, val):
        return int(val)

class videogamedeveloper(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Developer of a Video Game'
        self.valid_values = 'Developer name should be a non-empty string.'
        self.format = ""Each word's first character should be capitalized.""
        self.examples = ['Ubisoft', 'EA Sports', 'EA Canada', 'Konami', 'Capcom']

    def cast(self, val):
        return str(val).title()

class gamerating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Rating of a Video Game'
        self.valid_values = ""Rating should be one of ['E', 'T', 'M', 'E10+', 'EC', 'AO', 'RP', 'KA']""
        self.format = 'All characters should be uppercase.'
        self.examples = ['E', 'T', 'M', 'E10+', 'EC']

    def cast(self, val):
        return str(val).upper()


MAPPING = {'name': videogamename, 'platform': videogameplatform, 'yearofrelease': year, 'genre': videogamegenre, 'publisher': videogamepublisher, 'nasales': sales, 'eusales': sales, 'jpsales': sales, 'othersales': sales, 'globalsales': sales, 'criticscore': score, 'userscore': score, 'criticcount': count, 'usercount': count, 'developer': videogamedeveloper, 'rating': gamerating}"
"class identifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique accident identifier'
        self.valid_values = 'ID is a string that starts with year in the format 2017S and ends with an 6-digit number'
        self.format = 'ID should be in the format 2017SXXXXXX where X is a digit'
        self.examples = ['2017S008429', '2017S007316', '2017S010210', '2017S006364', '2017S004615']

    def cast(self, val):
        id_str = str(val).strip()
        if re.match('2017S\\d{6}', id_str):
            return id_str
        else:
            raise Exception('Invalid ID')

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the district where accident happened'
        self.valid_values = 'District name should be a string'
        self.format = 'District name should be a string in title case'
        self.examples = ['Eixample', 'Sant Martí', 'Sants-Montjuïc', 'Sarrià-Sant Gervasi', 'Horta-Guinardó']

    def cast(self, val):
        return str(val).title()

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the neighborhood where accident happened'
        self.valid_values = 'Neighborhood name should be a string'
        self.format = 'Neighborhood name should be a string in title case'
        self.examples = [""la Dreta de l'Eixample"", ""l'Antiga Esquerra de l'Eixample"", ""la Nova Esquerra de l'Eixample"", 'Sant Gervasi - Galvany', 'la Sagrada Família']

    def cast(self, val):
        return str(val).title()

class weekday(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Day of the week when accident happened'
        self.valid_values = ""Weekday should be one of ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']""
        self.format = 'Weekday should be a string in title case'
        self.examples = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

    def cast(self, val):
        day = str(val).title()
        if day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
            return day
        else:
            raise Exception('Invalid weekday')

class month(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Month of the year when accident happened'
        self.valid_values = ""Month should be one of ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']""
        self.format = 'Month should be a string in title case'
        self.examples = ['January', 'February', 'March', 'April', 'May']

    def cast(self, val):
        month = str(val).title()
        if month in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']:
            return month
        else:
            raise Exception('Invalid month')

class day(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the month when accident happened'
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = 'Day should be a number between 1 and 31'
        self.examples = [1, 15, 30, 31, 28]

    def cast(self, val):
        day = int(val)
        if 1 <= day <= 31:
            return day
        else:
            raise Exception('Invalid day')

class hour(NumericSemanticType):

    def __init__(self):
        self.description = 'Hour of the day when accident happened'
        self.valid_range = [0, 23]
        self.dtype = int
        self.format = 'Hour should be a number between 0 and 23'
        self.examples = [0, 12, 23, 15, 20]

    def cast(self, val):
        hour = int(val)
        if 0 <= hour <= 23:
            return hour
        else:
            raise Exception('Invalid hour')

class partoftheday(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Part of the day when accident happened'
        self.valid_values = ""Part of the day should be one of ['Morning', 'Afternoon', 'Night']""
        self.format = 'Part of the day should be a string in title case'
        self.examples = ['Morning', 'Afternoon', 'Night']

    def cast(self, val):
        part = str(val).title()
        if part in ['Morning', 'Afternoon', 'Night']:
            return part
        else:
            raise Exception('Invalid part of the day')

class mildinjuries(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of mild injuries in the accident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of mild injuries should be a non-negative integer'
        self.examples = [0, 1, 2, 5, 10]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of mild injuries')

class seriousinjuries(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of serious injuries in the accident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of serious injuries should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of serious injuries')

class victims(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of victims in the accident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of victims should be a non-negative integer'
        self.examples = [0, 1, 2, 5, 10]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of victims')

class vehiclesinvolved(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of vehicles involved in the accident'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of vehicles involved should be a non-negative integer'
        self.examples = [0, 1, 2, 5, 14]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of vehicles involved')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude where accident happened'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number between -180 and 180'
        self.examples = [2.12562442, 2.12045245, 2.1673561, 2.12452894, 2.185272]

    def cast(self, val):
        num = float(val)
        if -180 <= num <= 180:
            return num
        else:
            raise Exception('Invalid longitude')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude where accident happened'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number between -90 and 90'
        self.examples = [41.34004482, 41.33942606, 41.3608855, 41.33766786, 41.416365]

    def cast(self, val):
        num = float(val)
        if -90 <= num <= 90:
            return num
        else:
            raise Exception('Invalid latitude')


MAPPING = {'id': identifier, 'districtname': districtname, 'neighborhoodname': neighborhoodname, 'weekday': weekday, 'month': month, 'day': day, 'hour': hour, 'partoftheday': partoftheday, 'mildinjuries': mildinjuries, 'seriousinjuries': seriousinjuries, 'victims': victims, 'vehiclesinvolved': vehiclesinvolved, 'longitude': longitude, 'latitude': latitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location'
        self.valid_values = 'Location should be a string'
        self.format = ""Location should be of the form 'City - Area'""
        self.examples = ['Barcelona - Sants', 'Barcelona - Eixample', 'Barcelona - Gràcia', 'Barcelona - Ciutadella', 'Barcelona - Vall Hebron']

    def cast(self, val):
        return str(val)

class airqualitystatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Air Quality Status'
        self.valid_values = ""Air Quality Status should be one of: ['Good', 'Moderate', '--']""
        self.format = 'Air Quality Status should be a string'
        self.examples = ['Good', 'Moderate', '--']

    def cast(self, val):
        if val in ['Good', 'Moderate', '--']:
            return str(val)
        else:
            raise Exception('Invalid air quality status')

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [2.1331, 2.1538, 2.1534, 2.1874, 2.148]

    def cast(self, val):
        num = float(val)
        if num >= -180 and num <= 180:
            return num
        else:
            raise Exception('Invalid longitude value')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [41.3788, 41.3853, 41.3987, 41.3864, 41.4261]

    def cast(self, val):
        num = float(val)
        if num >= -90 and num <= 90:
            return num
        else:
            raise Exception('Invalid latitude value')

class timestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Timestamp should be an integer'
        self.examples = [1541027104, 1541027104, 1541027104, 1541027104, 1541027104]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = ""Datetime should be a string in the format '%d/%m/%Y %H:%M'""
        self.format = 'Datetime should be a string'
        self.examples = ['01/11/2018 0:00', '01/11/2018 0:00', '01/11/2018 0:00', '01/11/2018 0:00', '01/11/2018 0:00']

    def cast(self, val):
        return datetime.strptime(val, '%d/%m/%Y %H:%M')


MAPPING = {'unnamed0': index, 'station': location, 'airquality': airqualitystatus, 'longitude': longitude, 'latitude': latitude, 'datetime': timestamp, 'generated': datetimeclass}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index values should be positive integers'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class airstationname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the air station'
        self.valid_values: str = 'Names of air stations in Barcelona'
        self.format: str = 'Air station names should be capitalized strings'
        self.examples: list = ['Barcelona - Ciutadella', 'Barcelona - Eixample', 'Barcelona - Gràcia', 'Barcelona - Palau Reial', 'Barcelona - Poblenou']

    def cast(self, val):
        return str(val).title()

class geographiccoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographic coordinate'
        self.valid_range: list = [-float('inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Geographic coordinates should be floating point numbers'
        self.examples: list = [2.1874, 2.1538, 41.3864, 41.3853]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class geographiccoordinate(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Geographic coordinate'
        self.valid_range: list = [-float('inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Geographic coordinates should be floating point numbers'
        self.examples: list = [2.1874, 2.1538, 41.3864, 41.3853]

    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the district'
        self.valid_values: str = 'Names of districts in Barcelona'
        self.format: str = 'District names should be capitalized strings'
        self.examples: list = ['Ciutat Vella', 'Eixample', 'Gracia', 'Les Corts', 'Sant Marti']

    def cast(self, val):
        return str(val).title()

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of the neighborhood'
        self.valid_values: str = 'Names of neighborhoods in Barcelona'
        self.format: str = 'Neighborhood names should be capitalized strings'
        self.examples: list = ['Sant Pere, Santa Caterina i la Ribera', ""la Nova Esquerra de l'Eixample"", 'la Vila de Gracia', 'Pedralbes', 'el Poblenou']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'station': airstationname, 'longitude': geographiccoordinate, 'latitude': geographiccoordinate, 'districtname': districtname, 'neighborhoodname': neighborhoodname}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Year of an event'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Year should be a four digit number'
        self.examples: list = [2013, 2014, 2015, 2016, 2017]

    def cast(self, val):
        return int(val)

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Numeric code for a district'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'District code should be a number'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a district'
        self.valid_values: str = 'Name of a district in Barcelona, Spain'
        self.format: str = 'District name should be a string'
        self.examples: list = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val)

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Numeric code for a neighborhood'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Neighborhood code should be a number'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a neighborhood'
        self.valid_values: str = 'Name of a neighborhood in Barcelona, Spain'
        self.format: str = 'Neighborhood name should be a string'
        self.examples: list = ['el Raval', 'Vallbona', 'la Barceloneta', 'Sant Pere, Santa Caterina i la Ribera', 'el Fort Pienc']

    def cast(self, val):
        return str(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['Boys', 'Girls']

    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(f'Invalid gender: {val}')
        return val

class number(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of births'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Number should be an integer'
        self.examples: list = [43, 84, 129, 283]

    def cast(self, val):
        return int(val)


MAPPING = {'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'gender': gender, 'number': number}"
"class busstopcode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Bus stop code'
        self.valid_values = ""A string of the form 'Kxxx' where xxx are numbers""
        self.format = ""A string of length 4, where the first character is 'K' and the remaining are digits""
        self.examples = ['K014', 'K015', 'K016', 'K017']

    def cast(self, val):
        return str(val)

class transporttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of bus stop'
        self.valid_values = ""One of the following strings: 'Day bus stop', 'Night bus stop', 'Airport bus stop', 'Bus station'""
        self.format = 'A string indicating the type of bus stop'
        self.examples = ['Day bus stop', 'Night bus stop', 'Airport bus stop', 'Bus station']

    def cast(self, val):
        return str(val)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude of a location on Earth'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'A floating point number'
        self.examples = [2.171619, 2.134902, 2.162913, 2.163667, 2.120212]

    def cast(self, val):
        num = float(val)
        return num if -180 <= num <= 180 else float('nan')

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude of a location on Earth'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'A floating point number'
        self.examples = [41.413744, 41.420222, 41.423187, 41.422899, 41.397209]

    def cast(self, val):
        num = float(val)
        return num if -90 <= num <= 90 else float('nan')

class busstopidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Bus Stop Identifier'
        self.valid_values = ""A string of the form 'BUS -xxx--' where xxx are numbers""
        self.format = 'A string indicating the bus stop identifier'
        self.examples = ['BUS -192--', 'BUS -124--', 'BUS -117--', 'BUS -117--', 'BUS -130--']

    def cast(self, val):
        return str(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a district in Barcelona'
        self.valid_values = 'A string indicating the name of a district in Barcelona'
        self.format = 'A string of the district name'
        self.examples = ['Sarrià-Sant Gervasi', 'Sants-Montjuïc', 'Eixample', 'Horta-Guinardó', 'Sant Martí']

    def cast(self, val):
        return str(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a neighborhood in Barcelona'
        self.valid_values = 'A string indicating the name of a neighborhood in Barcelona'
        self.format = 'A string of the neighborhood name'
        self.examples = [""la Dreta de l'Eixample"", 'la Marina del Prat Vermell', 'Vallvidrera, el Tibidabo i les Planes', 'el Poble-sec', ""l'Antiga Esquerra de l'Eixample""]

    def cast(self, val):
        return str(val)


MAPPING = {'code': busstopcode, 'transport': transporttype, 'longitude': longitude, 'latitude': latitude, 'busstop': busstopidentifier, 'districtname': districtname, 'neighborhoodname': neighborhoodname}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2015, 2016, 2017, 2018, 2019]

    def cast(self, val):
        return int(val)

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description = 'District Code'
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = 'District Code should be an integer from 1 to 10'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'District Name'
        self.valid_values = 'District Name should be a string'
        self.format = 'District Name should be capitalized'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val).title()

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Code'
        self.valid_range = [1, 73]
        self.dtype = int
        self.format = 'Neighborhood Code should be an integer from 1 to 73'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Name'
        self.valid_values = 'Neighborhood Name should be a string'
        self.format = 'Neighborhood Name should be capitalized'
        self.examples = ['el Raval', 'el Barri Gòtic', 'la Barceloneta', 'Sant Pere, Santa Caterina i la Ribera', 'el Fort Pienc']

    def cast(self, val):
        return str(val).title()

class age(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Age Range'
        self.valid_values = 'Age should be a string representing an age range'
        self.format = ""Age should be formatted as 'x-y' where x and y are integers and x < y""
        self.examples = ['0-4', '5-9', '10-14', '15-19', '20-24']

    def cast(self, val):
        return str(val)

class number(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': identifier, 'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'age': age, 'number': number}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year in the Gregorian Calendar'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit number'
        self.examples = [2015, 2016, 2017, 2018, 2019]

    def cast(self, val):
        year = int(val)
        if year >= 0 and year <= datetime.now().year:
            return year
        else:
            raise ValueError('Invalid year')

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description = 'District Code'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'District Code should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        code = int(val)
        if code > 0:
            return code
        else:
            raise ValueError('Invalid district code')

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'District Name'
        self.valid_values = 'District name should be a string'
        self.format = 'District name should have the first letter capitalized'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val).title()

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Code'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Neighborhood Code should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        code = int(val)
        if code > 0:
            return code
        else:
            raise ValueError('Invalid neighborhood code')

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Name'
        self.valid_values = 'Neighborhood name should be a string'
        self.format = 'Neighborhood name should have the first letter capitalized'
        self.examples = ['El Raval', 'El Barri Gòtic', 'La Barceloneta', 'Sant Pere, Santa Caterina i la Ribera', 'El Fort Pienc']

    def cast(self, val):
        return str(val).title()

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Nationality'
        self.valid_values = 'Nationality should be a string that matches a country name'
        self.format = 'Nationality should have the first letter capitalized'
        self.examples = ['Spain', 'France', 'Peru', 'China', 'Colombia']

    def cast(self, val):
        country = str(val).title()
        if pycountry.countries.get(name=country):
            return country
        else:
            raise ValueError('Invalid nationality')

class number(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of immigrants'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise ValueError('Invalid number of immigrants')


MAPPING = {'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'nationality': nationality, 'number': number}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as an integer value'
        self.examples = [2000, 2010, 2015, 2020, 2025]

    def cast(self, val):
        return int(val)

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description = 'District code'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'District code should be formatted as an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'District name'
        self.valid_values = 'District name should be a string'
        self.format = 'String representing district name'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val)

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Neighborhood code'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Neighborhood code should be formatted as an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Neighborhood name'
        self.valid_values = 'Neighborhood name should be a string'
        self.format = 'String representing neighborhood name'
        self.examples = ['el Raval', 'Sants', 'Sant Pere, Santa Caterina i la Ribera', 'el Fort Pienc', 'la Sagrada Família']

    def cast(self, val):
        return str(val)

class age(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Age'
        self.valid_values = 'Age should be a string representing age range'
        self.format = 'String representing age range'
        self.examples = ['0-4', '5-9', '10-14', '15-19', '20-24']

    def cast(self, val):
        return str(val)

class immigrants(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of immigrants'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of immigrants should be formatted as an integer value'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class emigrants(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of emigrants'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of emigrants should be formatted as an integer value'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)


MAPPING = {'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'age': age, 'immigrants': immigrants, 'emigrants': emigrants}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index or identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a region or country'
        self.valid_values = 'A string representing the name of a region or country'
        self.format = 'The name should be in title case'
        self.examples = ['Barcelona', 'Castilla-La Mancha', 'Aragon', 'Asturias', 'Balearic Islands']

    def cast(self, val):
        return str(val).title()

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a region or country'
        self.valid_values = 'A string representing the name of a region or country'
        self.format = 'The name should be in title case'
        self.examples = ['Barcelona', 'Castilla-La Mancha', 'Aragon', 'Asturias', 'Balearic Islands']

    def cast(self, val):
        return str(val).title()

class weight(NumericSemanticType):

    def __init__(self):
        self.description = 'A weight of some sort'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [53085, 2416, 811, 323, 1634]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'from': region, 'to': region, 'weight': weight}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An Index should be a positive integer with no decimal values'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class district(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'District in Barcelona'
        self.valid_values = 'Districts in Barcelona'
        self.format = 'Names of Districts in Barcelona'
        self.examples = ['Ciutat Vella', 'Nou Barris', 'Sant Andreu', 'Horta-Guinardó', 'Les Corts']

    def cast(self, val):
        return str(val)

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Regions in Spain'
        self.valid_values = 'Regions in Spain'
        self.format = 'Names of Regions in Spain'
        self.examples = ['Andalusia', 'Aragon', 'Canary Islands', 'Cantabria', 'Castilla-La Mancha']

    def cast(self, val):
        return str(val)

class weight(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight of the migration'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Weight of migration should be a positive integer with no decimal values'
        self.examples = [188, 64, 95, 17, 23]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'from': district, 'to': region, 'weight': weight}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Calendar Year'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a four digit integer'
        self.examples = [2000, 2010, 2020, 2030, 2040]

    def cast(self, val):
        return int(val)

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description = 'District Code'
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = 'District code should be a single digit integer between 1 and 10'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a District'
        self.valid_values = 'District names should be strings that represent names of districts'
        self.format = 'First character of each word should be uppercase'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val).title()

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Code'
        self.valid_range = [1, 73]
        self.dtype = int
        self.format = 'Neighborhood code should be an integer between 1 and 73'
        self.examples = [1, 10, 20, 30, 40]

    def cast(self, val):
        return int(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Neighborhood'
        self.valid_values = 'Neighborhood names should be strings that represent names of neighborhoods'
        self.format = 'First character of each word should be uppercase'
        self.examples = ['El Raval', 'El Barri Gòtic', 'La Barceloneta', 'Sant Pere, Santa Caterina I La Ribera', 'El Fort Pienc']

    def cast(self, val):
        return str(val).title()

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        if str(val).lower() in ['male', 'female']:
            return str(val).title()
        else:
            raise Exception('Invalid gender')

class immigrants(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Immigrants'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of immigrants should be a non-negative integer'
        self.examples = [5, 100, 1000, 10000, 50000]

    def cast(self, val):
        return int(val)

class emigrants(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Emigrants'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of emigrants should be a non-negative integer'
        self.examples = [3, 50, 500, 5000, 25000]

    def cast(self, val):
        return int(val)


MAPPING = {'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'gender': gender, 'immigrants': immigrants, 'emigrants': emigrants}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An index number used for ordering or labeling items'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index number should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid index number')

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a neighborhood'
        self.valid_values = 'Neighborhood names should be strings'
        self.format = 'Each word in the neighborhood name should be capitalized'
        self.examples = ['El Raval', 'El Barri Gòtic', 'La Barceloneta', 'Sant Pere, Santa Caterina I La Ribera', 'El Fort Pienc']

    def cast(self, val):
        return str(val).title()

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a person is expected to live'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [84.93, 82.467, 82.783, 83.098, 83.455]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid life expectancy')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a person is expected to live'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [84.93, 82.467, 82.783, 83.098, 83.455]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid life expectancy')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a person is expected to live'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [84.93, 82.467, 82.783, 83.098, 83.455]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid life expectancy')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a person is expected to live'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [84.93, 82.467, 82.783, 83.098, 83.455]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid life expectancy')

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The average number of years a person is expected to live'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Life expectancy should be a positive floating point number'
        self.unit = 'In years'
        self.examples = [84.93, 82.467, 82.783, 83.098, 83.455]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid life expectancy')

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The gender of a person'
        self.valid_values = ""Gender should be either 'Female' or 'Male'""
        self.format = 'The first letter of the gender should be capitalized'
        self.examples = ['Female', 'Male']

    def cast(self, val):
        if str(val).lower() in ['female', 'male']:
            return str(val).title()
        else:
            raise Exception('Invalid gender')


MAPPING = {'unnamed0': indexnumber, 'neighborhood': neighborhoodname, '20062010': lifeexpectancy, '20072011': lifeexpectancy, '20082012': lifeexpectancy, '20092013': lifeexpectancy, '20102014': lifeexpectancy, 'gender': gender}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a four digit integer'
        self.examples = [1996, 2001, 2006, 2011, 2016]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > datetime.now().year:
            raise Exception('Invalid year')
        return val

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender'
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = 'Gender should be capitalized'
        self.examples = ['Male', 'Female']

    def cast(self, val):
        val = str(val).capitalize()
        if val not in ['Male', 'Female']:
            raise Exception('Invalid gender')
        return val

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Laura', 'Maria', 'Marta', 'Andrea', 'Anna']

    def cast(self, val):
        return str(val).title()

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Frequency'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Frequency should be a non-negative integer'
        self.examples = [44, 69, 89, 122, 348]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid frequency')
        return val


MAPPING = {'year': year, 'gender': gender, 'name': personname, 'frequency': frequency}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for rows in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid index')

class ordernumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique number representing the order in which something occurs'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Order numbers should be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid order number')

class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = 'Name should be a string'
        self.format = 'Names should be capitalized'
        self.examples = ['MARIA', 'CARMEN', 'JOSEFA', 'MONTSERRAT', 'ROSA']

    def cast(self, val):
        return str(val).upper()

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""Should be 'Male' or 'Female'""
        self.format = 'Values should be capitalized'
        self.examples = ['Female', 'Male']

    def cast(self, val):
        gender = str(val).capitalize()
        if gender in ['Male', 'Female']:
            return gender
        else:
            raise Exception('Invalid gender')

class decade(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Decade in which a person was born'
        self.valid_values = ""Should be a string representing a decade or 'Before 1930'""
        self.format = ""Values should be in the format 'YYYY' or 'Before 1930'""
        self.examples = ['Before 1930', '1930', '1940', '1950', '1960']

    def cast(self, val):
        decade = str(val)
        if decade in ['Before 1930'] or (len(decade) == 4 and decade.isdigit()):
            return decade
        else:
            raise Exception('Invalid decade')

class frequency(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of occurrences of a certain event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Frequency should be a non-negative integer'
        self.examples = [2085, 1463, 1032, 879, 762]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid frequency')


MAPPING = {'unnamed0': index, 'order': ordernumber, 'name': personname, 'gender': gender, 'decade': decade, 'frequency': frequency}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataframe'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be an integer'
        self.examples = [2017, 2016, 2015, 2014, 2013]

    def cast(self, val):
        return int(val)

class districtcode(NumericSemanticType):

    def __init__(self):
        self.description = 'District code of the data'
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = 'District code should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'District name of the data'
        self.valid_values = 'District name should be a string'
        self.format = 'District name should be capitalized'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val).title()

class neighborhoodcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Neighborhood code of the data'
        self.valid_range = [1, 73]
        self.dtype = int
        self.format = 'Neighborhood code should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Neighborhood name of the data'
        self.valid_values = 'Neighborhood name should be a string'
        self.format = 'Neighborhood name should be capitalized'
        self.examples = ['el Raval', 'el Barri Gòtic', 'la Barceloneta', 'Sant Pere, Santa Caterina i la Ribera', 'el Fort Pienc']

    def cast(self, val):
        return str(val).title()

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        return str(val)

class age(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Age group of the population'
        self.valid_values = 'Age group should be a string'
        self.format = ""Age group should be in the format 'start-end'""
        self.examples = ['0-4', '5-9', '10-14', '15-19', '20-24']

    def cast(self, val):
        return str(val)

class number(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of people'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number should be an integer'
        self.examples = [224, 50, 43, 95, 124]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'year': year, 'districtcode': districtcode, 'districtname': districtname, 'neighborhoodcode': neighborhoodcode, 'neighborhoodname': neighborhoodname, 'gender': gender, 'age': age, 'number': number}"
"class ordinalindex(NumericSemanticType):

    def __init__(self):
        self.description = 'An ordinal number used as an index or identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Ordinal Index should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class transportcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A unique identifier code for a type of transport'
        self.valid_values = 'Transport codes should be alphanumeric strings'
        self.format = 'Transport codes should be alphanumeric strings'
        self.examples = ['K001', 'K011', 'K002', 'K003', 'K008']

    def cast(self, val):
        return str(val)

class transporttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'A type of transport'
        self.valid_values = ""Transport types should be one of the known types such as 'Underground', 'Tram', 'Railway (FGC)', 'RENFE', 'Maritime station'""
        self.format = 'Transport types should be string'
        self.examples = ['Underground', 'Tram', 'Railway (FGC)', 'RENFE', 'Maritime station']

    def cast(self, val):
        return str(val)

class gpscoordinate(NumericSemanticType):

    def __init__(self):
        self.description = 'A GPS coordinate'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'GPS coordinates should be floating point numbers'
        self.examples = [41.399203, 2.135427, 41.451492, 2.174473, 2.168588]

    def cast(self, val):
        return float(val)

class gpscoordinate(NumericSemanticType):

    def __init__(self):
        self.description = 'A GPS coordinate'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'GPS coordinates should be floating point numbers'
        self.examples = [41.399203, 2.135427, 41.451492, 2.174473, 2.168588]

    def cast(self, val):
        return float(val)

class stationname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A station name'
        self.valid_values = 'Station names should be strings'
        self.format = 'Station names should be strings'
        self.examples = [""FGC (L6) - REINA ELISENDA (Sortida Duquesa d'Orleans)-"", 'FGC (L6) - LA BONANOVA-', ""METRO (L11) - CASA DE L'AIGUA (C. Vila-Real)-"", 'METRO (L11) - CIUTAT MERIDIANA (C. Pedraforca)-', 'METRO (L1) - CATALUNYA (Rda. Universitat)-']

    def cast(self, val):
        return str(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A district name'
        self.valid_values = 'District names should be strings'
        self.format = 'District names should be strings'
        self.examples = ['Eixample', 'Sant Martí', 'Sarrià-Sant Gervasi', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val)

class neighborhoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A neighborhood name'
        self.valid_values = 'Neighborhood names should be strings'
        self.format = 'Neighborhood names should be strings'
        self.examples = [""la Dreta de l'Eixample"", 'Sants', 'Sant Gervasi - Galvany', 'Sant Antoni', 'Sant Andreu']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': ordinalindex, 'code': transportcode, 'transport': transporttype, 'longitude': gpscoordinate, 'latitude': gpscoordinate, 'station': stationname, 'districtname': districtname, 'neighborhoodname': neighborhoodname}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [2017, 2016, 2015, 2014, 2013]

    def cast(self, val):
        return int(val)

class month(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Month of the year'
        self.valid_values = ""Month names ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')""
        self.format = 'Month should be a string representing one of the 12 months of the year'
        self.examples = ['January', 'February', 'March', 'April', 'May']

    def cast(self, val):
        return str(val)

class districtname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a district'
        self.valid_values = 'String representing a district name'
        self.format = 'Every word in the district name should start with a capital letter'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def cast(self, val):
        return str(val).title()

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender category'
        self.valid_values = ""Either 'Male' or 'Female'""
        self.format = ""Gender should be represented as either the string 'Male' or 'Female'""
        self.examples = ['Male', 'Female']

    def cast(self, val):
        if str(val).lower() == 'male':
            return 'Male'
        elif str(val).lower() == 'female':
            return 'Female'
        else:
            raise ValueError('Invalid gender')

class demandoccupation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Demand occupation category'
        self.valid_values = ""Either 'Registered unemployed' or 'Unemployment demand'""
        self.format = ""Demand occupation should be represented as either the string 'Registered unemployed' or 'Unemployment demand'""
        self.examples = ['Registered unemployed', 'Unemployment demand']

    def cast(self, val):
        if str(val).lower() == 'registered unemployed':
            return 'Registered unemployed'
        elif str(val).lower() == 'unemployment demand':
            return 'Unemployment demand'
        else:
            raise ValueError('Invalid demand occupation')

class number(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of people'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number should be formatted as a positive integer'
        self.examples = [0, 121, 296, 685, 3094]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Number cannot be negative')
        return num


MAPPING = {'year': year, 'month': month, 'districtname': districtname, 'gender': gender, 'demandoccupation': demandoccupation, 'number': number}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year as a four digit number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a four digit integer'
        self.examples = [2008, 2010, 2012, 2014, 2016]

    def cast(self, val):
        val = int(val)
        if val < 0 or val > datetime.now().year:
            raise Exception('Invalid year')
        return val

class countrycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 country code'
        self.valid_values = 'A three letter code representing a country according to ISO 3166-1 alpha-3 standard'
        self.format = 'Country code should be a three letter uppercase string'
        self.examples = ['ALB', 'DZA', 'AGO', 'ARG', 'ARM']

    def cast(self, val):
        val = str(val).upper()
        if pycountry.countries.get(alpha_3=val) is None:
            raise Exception('Invalid country code')
        return val

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string representing a country name'
        self.format = 'Country name should be in title case'
        self.examples = ['Albania', 'Algeria', 'Angola', 'Argentina', 'Armenia']

    def cast(self, val):
        val = str(val).title()
        if CountryInfo(val) is None:
            raise Exception('Invalid country name')
        return val

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Geographical region'
        self.valid_values = 'Region should be a string representing a geographical region'
        self.format = 'Region should be in title case'
        self.examples = ['Sub-Saharan Africa', 'Latin America & The Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def cast(self, val):
        return str(val).title()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score on a scale of 0 to 10'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0, 2.5, 5, 7.5, 10]

    def cast(self, val):
        val = float(val)
        if val < 0 or val > 10:
            raise Exception('Invalid score')
        return round(val, 2)


MAPPING = {'year': year, 'isocode': countrycode, 'countries': countryname, 'region': region, 'pfrolprocedural': score, 'pfrolcivil': score, 'pfrolcriminal': score, 'pfrol': score, 'pfsshomicide': score, 'pfssdisappearancesdisap': score, 'pfssdisappearancesviolent': score, 'pfssdisappearancesorganized': score, 'pfssdisappearancesfatalities': score, 'pfssdisappearancesinjuries': score, 'pfssdisappearances': score, 'pfsswomenfgm': score, 'pfsswomenmissing': score, 'pfsswomeninheritancewidows': score, 'pfsswomeninheritancedaughters': score, 'pfsswomeninheritance': score, 'pfsswomen': score, 'pfss': score, 'pfmovementdomestic': score, 'pfmovementforeign': score, 'pfmovementwomen': score, 'pfmovement': score, 'pfreligionestopestablish': score, 'pfreligionestopoperate': score, 'pfreligionestop': score}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A specific year within the Gregorian Calendar'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year must be a 4-digit number'
        self.examples = [2008, 2010, 2012, 2015, 2017]

    def cast(self, val):
        return int(val)

class countrycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 – three-letter country codes which allow a better visual between the codes and the country names than the alpha-2 codes'
        self.valid_values = 'The country code should be a string of three uppercase letters'
        self.format = 'ISO 3166-1 alpha-3 format'
        self.examples = ['ALB', 'DZA', 'AGO', 'ARG', 'ARM']

    def cast(self, val):
        if pycountry.countries.get(alpha_3=val):
            return val
        else:
            raise Exception('Invalid country code')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Official short name of a country in English'
        self.valid_values = 'The country name should be a string'
        self.format = 'Proper names of countries'
        self.examples = ['Albania', 'Algeria', 'Angola', 'Argentina', 'Armenia']

    def cast(self, val):
        country = CountryInfo(val)
        if country:
            return country.name()
        else:
            raise Exception('Invalid country name')

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a geographic region'
        self.valid_values = 'Region name should be a string'
        self.format = 'Proper names of regions'
        self.examples = ['Sub-Saharan Africa', 'Latin America & the Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def cast(self, val):
        return str(val)

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class score(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.unit = 'In points'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        score = float(val)
        if 0 <= score <= 10:
            return round(score, 2)
        else:
            raise Exception('Invalid score')

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'A rank number'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be an integer greater than or equal to 1'
        self.examples = [1, 33, 87, 46, 97]

    def cast(self, val):
        return int(val)

class quartile(NumericSemanticType):

    def __init__(self):
        self.description = 'A quartile number'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def cast(self, val):
        quartile = int(val)
        if 1 <= quartile <= 4:
            return quartile
        else:
            raise Exception('Invalid quartile')


MAPPING = {'year': year, 'isocode': countrycode, 'countries': countryname, 'region': regionname, 'hfscore': score, 'pfrolprocedural': score, 'pfrolcivil': score, 'pfrolcriminal': score, 'pfrol': score, 'pfsshomicide': score, 'pfssdisappearancesdisap': score, 'pfssdisappearancesviolent': score, 'pfssdisappearancesorganized': score, 'pfssdisappearancesfatalities': score, 'pfssdisappearancesinjuries': score, 'pfssdisappearances': score, 'pfsswomenfgm': score, 'pfsswomeninheritancewidows': score, 'pfsswomeninheritancedaughters': score, 'pfsswomeninheritance': score, 'pfsswomen': score, 'pfss': score, 'pfmovementdomestic': score, 'pfmovementforeign': score, 'pfmovementwomen': score, 'pfmovement': score, 'pfreligionestopestablish': score, 'hfrank': rank, 'hfquartile': quartile}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to uniquely identify rows of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to uniquely identify rows of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year in the Gregorian Calendar'
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2008, 2010, 2013, 2016, 2018]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid Year')
        return num

class isocode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 codes are three-letter country codes defined in ISO 3166-1, part of the ISO 3166 standard'
        self.valid_values = 'ISO 3166-1 alpha-3 codes'
        self.format = 'ISO 3166-1 alpha-3 codes are three-letter country codes'
        self.examples = ['ALB', 'CYP', 'BWA', 'BHR', 'AGO']

    def cast(self, val):
        if pycountry.countries.get(alpha_3=val) is None:
            raise Exception('Invalid ISO country code')
        else:
            return val

class countries(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name of any country'
        self.format = 'Name of a country'
        self.examples = ['Albania', 'Cyprus', 'Botswana', 'Bahrain', 'Angola']

    def cast(self, val):
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country name')
        else:
            return val

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a geographical region'
        self.valid_values = 'Name of any geographical region'
        self.format = 'Name of a geographical region'
        self.examples = ['Sub-Saharan Africa', 'Latin America & the Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def cast(self, val):
        return val

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score representing a measurement or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.81, 7.78, 7.63, 7.55, 7.65]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 10:
            raise Exception('Invalid score')
        return round(num, 2)

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'A rank representing the position in a hierarchy or scale'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be an integer starting from 1'
        self.examples = [43, 44, 50, 52, 48]

    def cast(self, val):
        return int(val)

class quartile(NumericSemanticType):

    def __init__(self):
        self.description = 'A quartile representing a statistical value of a data set'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples = [2, 2, 2, 2, 2]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 4:
            raise Exception('Invalid quartile')
        return num


MAPPING = {'unnamed01': index, 'unnamed0': index, 'year': year, 'isocode': isocode, 'countries': countries, 'region': region, 'hfscore': score, 'pfrolprocedural': score, 'pfrolcivil': score, 'pfrolcriminal': score, 'pfrol': score, 'pfsshomicide': score, 'pfssdisappearancesdisap': score, 'pfssdisappearancesviolent': score, 'pfssdisappearancesorganized': score, 'pfssdisappearancesfatalities': score, 'pfssdisappearancesinjuries': score, 'pfssdisappearances': score, 'pfsswomenfgm': score, 'pfsswomeninheritance': score, 'pfsswomen': score, 'pfss': score, 'pfmovementdomestic': score, 'pfmovementforeign': score, 'pfmovementwomen': score, 'pfmovement': score, 'pfreligionfreedom': score, 'pfreligionrepression': score, 'hfrank': rank, 'hfquartile': quartile}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index or identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'A year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be represented as a four digit integer'
        self.examples = [2008, 2009, 2010, 2011, 2012]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Country name should be a string and a valid country name'
        self.format = 'Country name should be in its full form, capitalized and in English'
        self.examples = ['Albania', 'Algeria', 'Angola', 'Argentina', 'Armenia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class isocode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 code of a country'
        self.valid_values = 'ISO code should be a string and a valid ISO 3166-1 alpha-3 code'
        self.format = 'ISO code should be in uppercase and consist of three letters'
        self.examples = ['ALB', 'DZA', 'AGO', 'ARG', 'ARM']

    def cast(self, val):
        country = pycountry.countries.get(alpha_3=val)
        if country:
            return country.alpha_3
        else:
            raise Exception('Invalid ISO code')

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region of the world'
        self.valid_values = 'Region should be a string and a known region of the world'
        self.format = 'Region name should be in its full form and capitalized'
        self.examples = ['Sub-Saharan Africa', 'Latin America & the Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def cast(self, val):
        return val.title()

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'A score or rating'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return num
        else:
            raise Exception('Invalid score')

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'A rank or position'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be an integer greater than or equal to 1'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num >= 1:
            return num
        else:
            raise Exception('Invalid rank')

class quartile(NumericSemanticType):

    def __init__(self):
        self.description = 'A quartile'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 4:
            return num
        else:
            raise Exception('Invalid quartile')


MAPPING = {'unnamed0': index, 'year': year, 'countries': countryname, 'iso': isocode, 'region': region, 'hfscore': score, 'pfrolprocedural': score, 'pfrolcivil': score, 'pfrolcriminal': score, 'pfrol': score, 'pfsshomicide': score, 'pfssdisappearancesdisap': score, 'pfssdisappearancesviolent': score, 'pfssdisappearancesorganized': score, 'pfssdisappearancesfatalities': score, 'pfssdisappearancesinjuries': score, 'pfssdisappearancestorture': score, 'pfsskillings': score, 'pfssdisappearances': score, 'pfss': score, 'pfmovementvdemforeign': score, 'pfmovementvdemmen': score, 'pfmovementvdemwomen': score, 'pfmovementvdem': score, 'pfmovementcld': score, 'pfmovement': score, 'pfreligionsuppression': score, 'pfreligionfreedomvdem': score, 'hfrank': rank, 'hfquartile': quartile}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index or identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val < 0:
            raise ValueError('Index should be a non-negative integer')
        return int_val

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be a positive integer'
        self.examples: list = [2000, 2010, 2020, 2030, 2040]

    def cast(self, val):
        int_val = int(val)
        if int_val <= 0:
            raise ValueError('Year should be a positive integer')
        return int_val

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Country name should be properly capitalized'
        self.examples = ['Albania', 'Korea, Rep.', 'Angola', 'Argentina', 'Armenia']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise ValueError('Invalid country name')
        return country.name

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Region'
        self.valid_values = 'Name should be a string that is a valid region name'
        self.format = 'Region name should be properly capitalized'
        self.examples = ['Sub-Saharan Africa', 'Latin America & the Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def cast(self, val):
        return str(val).title()

class hfiscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples: list = [3.15, 6.21, 7.23, 8.18, 9.3]

    def cast(self, val):
        float_val = float(val)
        if float_val < 0 or float_val > 10:
            raise ValueError('Score should be between 0 and 10')
        return round(float_val, 2)

class hfirank(NumericSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Rank'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank should be a positive integer'
        self.examples: list = [1, 37, 74, 110, 165]

    def cast(self, val):
        int_val = int(val)
        if int_val <= 0:
            raise ValueError('Rank should be a positive integer')
        return int_val

class hfiquartile(NumericSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Quartile'
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val < 1 or int_val > 4:
            raise ValueError('Quartile should be between 1 and 4')
        return int_val


MAPPING = {'unnamed0': index, 'year': year, 'countries': countryname, 'region': regionname, 'hfscore': hfiscore, 'hfrank': hfirank, 'hfquartile': hfiquartile}"
"class unnamed(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unnamed entity, usually representing an index or an identifier'
        self.valid_values = 'Any integer value'
        self.format = 'Integer values represented as strings'
        self.examples = ['0', '1', '2', '3', '4']

    def cast(self, val):
        return str(int(val))

class refseqaccessionnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'RefSeq Accession Number, a unique identifier for a version of a reference sequence'
        self.valid_values = ""Strings starting with 'NP_' followed by numbers""
        self.format = 'NP_xxxxxx'
        self.examples = ['NP_958782', 'NP_036467', 'NP_002462', 'NP_001367', 'NP_958786']

    def cast(self, val):
        match_obj = re.match('NP_[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid RefSeq Accession Number')

class genesymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gene Symbol, a short abbreviation for the gene name'
        self.valid_values = 'Any string value'
        self.format = 'Gene symbols are typically all uppercase'
        self.examples = ['PLEC', 'TPM1', 'RAP1GDS1', 'FHL1', 'SORBS2']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).upper()

class genename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gene Name, the full name of the gene'
        self.valid_values = 'Any string value'
        self.format = 'Gene names are typically capitalized and may contain spaces and special characters'
        self.examples = ['NADH dehydrogenase', 'poly', 'isocitrate dehydrogenase', 'dimethylaniline monooxygenase', 'PREDICTED: peptidyl-prolyl cis-trans isomerase A-like']

    def cast(self, val):
        return str(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)

class proteomevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': unnamed, 'refseqaccessionnumber': refseqaccessionnumber, 'genesymbol': genesymbol, 'genename': genename, 'c8a13101tcga': proteomevalue, 'bha18q02tcga': proteomevalue, 'c8a13002tcga': proteomevalue, 'c8a13803tcga': proteomevalue, 'e2a15403tcga': proteomevalue, 'c8a12l04tcga': proteomevalue, 'a2a0ex04tcga': proteomevalue, 'c8a12t06tcga': proteomevalue, 'a8a06z07tcga': proteomevalue, 'a2a0cm07tcga': proteomevalue, 'bha18u08tcga': proteomevalue, 'a2a0eq08tcga': proteomevalue, 'a7a13f12tcga': proteomevalue, 'a7a0ce13tcga': proteomevalue, 'a2a0yc13tcga': proteomevalue, 'a8a08z14tcga': proteomevalue, 'a8a07615tcga': proteomevalue, 'aoa12615tcga': proteomevalue, 'a2a0ey16tcga': proteomevalue, 'c8a13517tcga': proteomevalue, 'a2a0ev18tcga': proteomevalue, 'd8a14218tcga': proteomevalue, 'c8a12z20tcga': proteomevalue, 'a7a0cj22tcga': proteomevalue, 'a8a07923tcga': proteomevalue, 'a2a0t324tcga': proteomevalue}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class genesymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gene Symbol'
        self.valid_values = 'Gene Symbols should be a string of upper-case characters'
        self.format = 'Gene Symbols should be a string of upper-case characters'
        self.examples = ['MDM2', 'NAT1', 'MAPT', 'UBE2C', 'EGFR']

    def cast(self, val):
        return val.upper()

class proteinidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Protein ID'
        self.valid_values = ""Protein ID should be in the form of 'NP_######'""
        self.format = ""Protein ID should be in the form 'NP_######' where '#' represents digits""
        self.examples = ['NP_006524', 'NP_002002', 'NP_998812', 'NP_075252', 'NP_055188']

    def cast(self, val):
        match_obj = re.match('NP_\\d{6}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Protein ID')

class species(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Species'
        self.valid_values = ""The species should be 'Homo sapiens'""
        self.format = ""Species should be in the form 'Homo sapiens'""
        self.examples = ['Homo sapiens']

    def cast(self, val):
        if val.lower() == 'homo sapiens':
            return 'Homo sapiens'
        else:
            raise Exception('Invalid species')

class genename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gene Name'
        self.valid_values = 'Gene Names should be a string of characters'
        self.format = 'Gene Names should be a string of characters'
        self.examples = ['melanoma inhibitory activity', 'fibroblast growth factor receptor 4', 'fibroblast growth factor receptor 4', 'fibroblast growth factor receptor 4', 'G protein-coupled receptor 160']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': index, 'genesymbol': genesymbol, 'refseqproteinid': proteinidentifier, 'species': species, 'genename': genename}"
"class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a person'
        self.valid_values = ""The gender of a person can either be 'MALE' or 'FEMALE'""
        self.format = 'Gender should be a string and capitalized'
        self.examples = ['MALE', 'FEMALE', 'MALE', 'FEMALE', 'MALE']

    def cast(self, val):
        return str(val).upper()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person at the time of initial pathologic diagnosis'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be an integer'
        self.examples = [30, 49, 58, 67, 88]

    def cast(self, val):
        return int(val)

class status(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of a person'
        self.valid_values = ""The status of a person can either be 'Positive', 'Negative' or 'Indeterminate'""
        self.format = 'Status should be a string and capitalized'
        self.examples = ['Positive', 'Negative', 'Indeterminate', 'Positive', 'Negative']

    def cast(self, val):
        return str(val).upper()

class status(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of a person'
        self.valid_values = ""The status of a person can either be 'Positive', 'Negative' or 'Indeterminate'""
        self.format = 'Status should be a string and capitalized'
        self.examples = ['Positive', 'Negative', 'Indeterminate', 'Positive', 'Negative']

    def cast(self, val):
        return str(val).upper()

class nodecoded(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Positive', 'Negative']

    def cast(self, val):
        return str(val).upper()

class nodecoded(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Positive', 'Negative']

    def cast(self, val):
        return str(val).upper()

class vitalstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['LIVING', 'DECEASED']

    def cast(self, val):
        return str(val).upper()

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cluster(NumericSemanticType):

    def __init__(self):
        self.description = 'Cluster number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cluster number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'gender': gender, 'ageatinitialpathologicdiagnosis': age, 'erstatus': status, 'prstatus': status, 'nodecoded': nodecoded, 'metastasiscoded': nodecoded, 'vitalstatus': vitalstatus, 'sigclustunsupervisedmrna': cluster, 'sigclustintrinsicmrna': cluster, 'mirnaclusters': cluster, 'methylationclusters': cluster, 'cnclusters': cluster, 'integratedclusterswithpam50': cluster, 'integratedclustersnoexp': cluster, 'integratedclustersunsupexp': cluster}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Row index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class englishword(CategoricalSemanticType):

    def __init__(self):
        self.description = 'English word'
        self.valid_values = 'A string of alphabets'
        self.format = 'Lowercase letters'
        self.examples = ['the', 'of', 'and', 'to', 'a']

    def cast(self, val):
        if val is None:
            return None
        else:
            return str(val).lower()

class wordcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Word frequency count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer number'
        self.examples = [23135851162, 13151942776, 12997637966, 12136980858, 9081174698]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)


MAPPING = {'unnamed0': index, 'word': englishword, 'count': wordcount}"
"class stationcode(NumericSemanticType):

    def __init__(self):
        self.description = 'Station codes are numerical identifiers for weather stations.'
        self.valid_range = [10001, 50304]
        self.dtype = int
        self.format = 'Station codes are integers with a range from 10001 to 50304.'
        self.examples = [10001, 11610, 20501, 32805, 50304]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the weather data'
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be formatted as strings in the form 'YYYY-MM-DD'""
        self.examples = ['1945-4-27', '1945-4-19', '1945-4-20', '1945-4-22', '1945-4-23']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class precipitation(NumericSemanticType):

    def __init__(self):
        self.description = 'Precipitation levels in inches'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Precipitation should be a floating point number indicating inches of precipitation.'
        self.examples = [0, 0.254, 0.508, 0.762, 1.016]

    def cast(self, val):
        if val == 'T':
            return 0.0
        return round(float(val), 3)

class windspeed(NumericSemanticType):

    def __init__(self):
        self.description = 'Wind gust speed in kilometers per hour'
        self.valid_range = [18.52, 75.932]
        self.dtype = float
        self.format = 'Wind gust speed should be a floating point number indicating speed in kilometers per hour.'
        self.examples = [18.52, 29.632, 37.04, 43.059, 75.932]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 3)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.valid_range = [-38.333, 50.0]
        self.dtype = float
        self.format = 'Temperature should be a floating point number indicating temperature in degrees Celsius.'
        self.unit = 'Degrees Celsius'
        self.examples = [-38.333, 13.889, 20.556, 23.333, 50.0]

    def cast(self, val):
        return round(float(val), 3)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.valid_range = [-38.333, 50.0]
        self.dtype = float
        self.format = 'Temperature should be a floating point number indicating temperature in degrees Celsius.'
        self.unit = 'Degrees Celsius'
        self.examples = [-38.333, 13.889, 20.556, 23.333, 50.0]

    def cast(self, val):
        return round(float(val), 3)

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.valid_range = [-38.333, 50.0]
        self.dtype = float
        self.format = 'Temperature should be a floating point number indicating temperature in degrees Celsius.'
        self.unit = 'Degrees Celsius'
        self.examples = [-38.333, 13.889, 20.556, 23.333, 50.0]

    def cast(self, val):
        return round(float(val), 3)


MAPPING = {'sta': stationcode, 'date': date, 'precip': precipitation, 'windgustspd': windspeed, 'maxtemp': temperature, 'mintemp': temperature, 'meantemp': temperature}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class wban(NumericSemanticType):

    def __init__(self):
        self.description = 'Weather Bureau Army Navy identifier'
        self.valid_range = [10001, 82506]
        self.dtype = int
        self.format = 'WBAN should be represented as an integer'
        self.examples = [33013, 33031, 33023, 33044, 12001]

    def cast(self, val):
        return int(val)

class weatherstationname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Weather Station'
        self.valid_values = 'Name should be a string'
        self.format = 'All capital letters'
        self.examples = ['AIN EL', 'LA SENIA', 'MAISON BLANCHE', 'TELERGMA', 'TINDOUF']

    def cast(self, val):
        return str(val).upper()

class countryidentifier(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country identifier'
        self.valid_values = 'Must be a valid 2-letter country code as per ISO 3166-1 alpha-2'
        self.format = '2-letter string'
        self.examples = ['AL', 'AU', 'IN', 'PM', 'BZ']

    def cast(self, val):
        if pycountry.countries.get(alpha_2=val):
            return str(val).upper()
        else:
            raise Exception('Invalid Country Code')

class latitudelongitude(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Latitude or Longitude'
        self.valid_values = 'Format: DDDMM[N/S/E/W]'
        self.format = 'Latitude and Longitude should be represented as strings'
        self.examples = ['0855N', '2616N', '2643N', '2129N', '2735S']

    def cast(self, val):
        match_obj = re.match('^\\d{4}[N|S|E|W]$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Latitude/Longitude')

class latitudelongitude(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Latitude or Longitude'
        self.valid_values = 'Format: DDDMM[N/S/E/W]'
        self.format = 'Latitude and Longitude should be represented as strings'
        self.examples = ['0855N', '2616N', '2643N', '2129N', '2735S']

    def cast(self, val):
        match_obj = re.match('^\\d{4}[N|S|E|W]$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Latitude/Longitude')

class elevation(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Elevation in meters'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Elevation should be represented as a floating point number'
        self.unit = 'Meters'
        self.examples = [611.0, 88.0, 23.0, 754.0, 443.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Elevation')

class latitudedecimal(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude in decimal degrees'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be represented as a floating point number'
        self.examples = [36.38333333, 35.61666667, 36.71666667, 36.11666667, 27.68333333]

    def cast(self, val):
        num = float(val)
        if -90 <= num <= 90:
            return num
        else:
            raise Exception('Invalid Latitude')

class longitudedecimal(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude in decimal degrees'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be represented as a floating point number'
        self.examples = [6.65, 0.583333333, 3.216666667, 6.416666667, -8.083333333]

    def cast(self, val):
        num = float(val)
        if -180 <= num <= 180:
            return num
        else:
            raise Exception('Invalid Longitude')


MAPPING = {'unnamed0': identifier, 'wban': wban, 'name': weatherstationname, 'statecountryid': countryidentifier, 'lat': latitudelongitude, 'lon': latitudelongitude, 'elev': elevation, 'latitude': latitudedecimal, 'longitude': longitudedecimal}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row number in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row number must be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datestring(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date represented as a string'
        self.valid_values = 'Date must be in the format mm/dd/yyyy'
        self.format = 'Date represented as a string in the format mm/dd/yyyy'
        self.examples = ['08/30/2013', '08/30/2013', '08/30/2013', '08/30/2013', '08/30/2013']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y')

class usstate(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'US state code'
        self.valid_values = 'US state code should be one of the 50 US states or 14 territories'
        self.format = 'State code must be two uppercase letters'
        self.examples = ['CA', 'FL', 'TX', 'NY', 'NJ']

    def cast(self, val):
        if val in pycountry.subdivisions.get(country_code='US'):
            return str(val)
        else:
            raise Exception('Invalid US state code')

class yesno(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid boolean value')

class yesno(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid boolean value')

class complaintidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique id for a complaint'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Complaint id must be an integer'
        self.examples = [511074, 511080, 510473, 510326, 511067]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': rownumber, 'datereceived': datestring, 'state': usstate, 'timelyresponse': yesno, 'consumerdisputed': yesno, 'complaintid': complaintidentifier}"
"class refractiveindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Refractive index of a material'
        self.valid_range = [1, 2]
        self.dtype = float
        self.format = 'Refractive index should be a floating point number'
        self.examples = [1.33, 1.5, 1.7, 1.8, 1.9]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class weightpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class glasstype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of glass'
        self.valid_values = 'Glass type should be an integer between 1 to 7'
        self.format = 'Glass type should be an integer'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def cast(self, val):
        return int(val)


MAPPING = {'ri': refractiveindex, 'na': weightpercent, 'mg': weightpercent, 'al': weightpercent, 'si': weightpercent, 'k': weightpercent, 'ca': weightpercent, 'ba': weightpercent, 'fe': weightpercent, 'type': glasstype}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique identifier for a record in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid index')
        return val

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique identifier for a record in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid index')
        return val

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the flight'
        self.valid_range = [1900, float('inf')]
        self.dtype = int
        self.format = ""Year should be a positive integer in the format 'YYYY'""
        self.examples = [2008, 2008, 2008, 2008, 2008]

    def cast(self, val):
        if val < 1900 or not isinstance(val, int):
            raise Exception('Invalid year')
        return val

class month(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Month of the year'
        self.valid_values = 'Integer between 1 and 12'
        self.format = 'Month should be represented as an integer between 1 and 12'
        self.examples = [1, 1, 1, 1, 1]

    def cast(self, val):
        if val < 1 or val > 12 or (not isinstance(val, int)):
            raise Exception('Invalid month')
        return val

class dayofmonth(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the month'
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = 'Day of month should be a positive integer between 1 and 31'
        self.examples = [3, 3, 3, 3, 3]

    def cast(self, val):
        if val < 1 or val > 31 or (not isinstance(val, int)):
            raise Exception('Invalid day of month')
        return val

class dayofweek(NumericSemanticType):

    def __init__(self):
        self.description = 'Day of the week'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Day of the week should be a positive integer between 1 and 7 (1 for Monday, 7 for Sunday)'
        self.examples = [4, 4, 4, 4, 4]

    def cast(self, val):
        if val < 1 or val > 7 or (not isinstance(val, int)):
            raise Exception('Invalid day of week')
        return val

class timeofday(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of day in military format'
        self.valid_range = [0, 2400]
        self.dtype = int
        self.format = 'Time of day should be a positive integer between 0000 and 2400 (military time)'
        self.examples = [2003, 754, 628, 1829, 1940]

    def cast(self, val):
        if val < 0 or val > 2400 or (not isinstance(val, int)):
            raise Exception('Invalid time of day')
        return val

class timeofday(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of day in military format'
        self.valid_range = [0, 2400]
        self.dtype = int
        self.format = 'Time of day should be a positive integer between 0000 and 2400 (military time)'
        self.examples = [2003, 754, 628, 1829, 1940]

    def cast(self, val):
        if val < 0 or val > 2400 or (not isinstance(val, int)):
            raise Exception('Invalid time of day')
        return val

class timeofday(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of day in military format'
        self.valid_range = [0, 2400]
        self.dtype = int
        self.format = 'Time of day should be a positive integer between 0000 and 2400 (military time)'
        self.examples = [2003, 754, 628, 1829, 1940]

    def cast(self, val):
        if val < 0 or val > 2400 or (not isinstance(val, int)):
            raise Exception('Invalid time of day')
        return val

class timeofday(NumericSemanticType):

    def __init__(self):
        self.description = 'Time of day in military format'
        self.valid_range = [0, 2400]
        self.dtype = int
        self.format = 'Time of day should be a positive integer between 0000 and 2400 (military time)'
        self.examples = [2003, 754, 628, 1829, 1940]

    def cast(self, val):
        if val < 0 or val > 2400 or (not isinstance(val, int)):
            raise Exception('Invalid time of day')
        return val

class airlinecode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airline code'
        self.valid_values = 'String representation of an airline code'
        self.format = 'Airline code should be a string of 2 or 3 uppercase alphabetic characters'
        self.examples = ['WN', 'OO', 'UA', 'XE', 'US']

    def cast(self, val):
        val = str(val)
        if not re.match('^[A-Z]{2,3}$', val):
            raise Exception('Invalid airline code')
        return val

class airlinecode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airline code'
        self.valid_values = 'String representation of an airline code'
        self.format = 'Airline code should be a string of 2 or 3 uppercase alphabetic characters'
        self.examples = ['WN', 'OO', 'UA', 'XE', 'US']

    def cast(self, val):
        val = str(val)
        if not re.match('^[A-Z]{2,3}$', val):
            raise Exception('Invalid airline code')
        return val

class airlinecode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airline code'
        self.valid_values = 'String representation of an airline code'
        self.format = 'Airline code should be a string of 2 or 3 uppercase alphabetic characters'
        self.examples = ['WN', 'OO', 'UA', 'XE', 'US']

    def cast(self, val):
        val = str(val)
        if not re.match('^[A-Z]{2,3}$', val):
            raise Exception('Invalid airline code')
        return val

class flightnum(NumericSemanticType):

    def __init__(self):
        self.description = 'Flight number'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Flight number should be a positive integer'
        self.examples = [335, 3231, 448, 3920, 378]

    def cast(self, val):
        if val < 1 or not isinstance(val, int):
            raise Exception('Invalid flight number')
        return val

class tailnum(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Aircraft tail number'
        self.valid_values = 'String representation of an aircraft tail number'
        self.format = 'Aircraft tail number should be a string of alphanumeric characters'
        self.examples = ['N712SW', 'N772SW', 'N428WN', 'N464WN', 'N726SW']

    def cast(self, val):
        val = str(val)
        if not re.match('^[A-Z0-9]+$', val):
            raise Exception('Invalid aircraft tail number')
        return val

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class delay(NumericSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative float'
        self.examples = [18.314, 3.753, 13.867, 0.129]

    def cast(self, val):
        if isinstance(val, float) and val >= 0:
            return val
        elif math.isnan(val):
            return 0.0
        else:
            raise Exception('Invalid delay time')

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid boolean value')
        return val

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid boolean value')
        return val


MAPPING = {'unnamed01': index, 'unnamed0': index, 'year': year, 'month': month, 'dayofmonth': dayofmonth, 'dayofweek': dayofweek, 'deptime': timeofday, 'crsdeptime': timeofday, 'arrtime': timeofday, 'crsarrtime': timeofday, 'uniquecarrier': airlinecode, 'origin': airlinecode, 'dest': airlinecode, 'flightnum': flightnum, 'tailnum': tailnum, 'actualelapsedtime': delay, 'crselapsedtime': delay, 'airtime': delay, 'arrdelay': delay, 'depdelay': delay, 'distance': delay, 'taxiin': delay, 'taxiout': delay, 'carrierdelay': delay, 'weatherdelay': delay, 'nasdelay': delay, 'securitydelay': delay, 'cancelled': boolean, 'diverted': boolean}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index that represents an ordered sequence of data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integer values starting from 0'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class symptom(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Medical symptom'
        self.valid_values = 'Symptoms should be strings describing medical conditions'
        self.format = 'All letters should be in lower case and spaces should be replaced by underscores'
        self.examples = ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')

class severityscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Severity score of a symptom'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Severity scores should be integers in the range 1 to 7'
        self.examples: list = [1, 3, 4, 5, 7]

    def cast(self, val):
        score = int(val)
        if score < 1 or score > 7:
            raise ValueError('Severity score should be in the range 1 to 7')
        return score


MAPPING = {'unnamed0': index, 'symptom': symptom, 'weight': severityscore}"
"class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Row ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row ID should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class disease(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Disease Name'
        self.valid_values = 'Name of the disease in string form'
        self.format = 'Each word in the disease name should be capitalized'
        self.examples = ['Fungal Infection', 'Allergy', 'Gerd', 'Chronic Cholestasis', 'Drug Reaction']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': rowidentifier, 'disease': disease}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be represented as integer numbers'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class disease(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Disease'
        self.valid_values = 'Disease name should be a string'
        self.format = 'Each word in the disease name should be capitalized'
        self.examples = ['Drug Reaction', 'Malaria', 'Allergy', 'Hypothyroidism', 'Psoriasis']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'disease': disease}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Generic Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class disease(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Disease Name'
        self.valid_values = 'Disease name can be any string that is a recognized disease name'
        self.format = 'Disease name should be capitalized and formatted as a string'
        self.examples = ['Drug Reaction', 'Malaria', 'Allergy', 'Hypothyroidism', 'Psoriasis']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': identifier, 'disease': disease}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier used to uniquely identify a record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifiers should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class dailyaggregation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Aggregation method used'
        self.valid_values = ""Should only contain the value 'Daily'""
        self.format = ""Strings with value 'Daily'""
        self.examples = ['Daily', 'Daily', 'Daily', 'Daily', 'Daily']

    def cast(self, val):
        if val == 'Daily':
            return val
        else:
            raise Exception('Invalid aggregation method')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when data was collected'
        self.valid_values = 'Should contain a valid date'
        self.format = ""Strings in the format 'YYYY-MM-DD'""
        self.examples = ['2020-04-03', '2020-04-13', '2020-07-10', '2020-09-02', '2020-10-31']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').date()
        except ValueError:
            raise Exception('Invalid date format')

class version(NumericSemanticType):

    def __init__(self):
        self.description = 'Version of the data'
        self.valid_range = [1, 1]
        self.dtype = float
        self.format = 'Version should be 1.0'
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        return float(val)

class airportname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an airport'
        self.valid_values = 'Should contain the name of a real airport'
        self.format = 'Strings containing the name of an airport'
        self.examples = ['Kingsford Smith', 'Hartsfield-Jackson Atlanta International', 'John F. Kennedy International', 'Montreal Trudeau', 'Los Angeles International']

    def cast(self, val):
        return str(val)

class percentofbaseline(NumericSemanticType):

    def __init__(self):
        self.description = 'Percent of baseline traffic at an airport'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Percentages should be integers between 0 and 100'
        self.examples = [64, 29, 54, 18, 22]

    def cast(self, val):
        return int(val)

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City where an airport is located'
        self.valid_values = 'Should contain the name of a real city'
        self.format = 'Strings containing the name of a city'
        self.examples = ['Sydney', 'New York', 'College Park', 'Grapevine', 'Dorval']

    def cast(self, val):
        return str(val)

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'State where an airport is located'
        self.valid_values = 'Should contain the name of a real state'
        self.format = 'Strings containing the name of a state'
        self.examples = ['New South Wales', 'New York', 'California', 'Ontario', 'Quebec']

    def cast(self, val):
        return str(val)

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country where an airport is located'
        self.valid_values = 'Should contain the name of a real country'
        self.format = 'Strings containing the name of a country'
        self.examples = ['Australia', 'United States of America (the)', 'Canada', 'Chile']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val)
        else:
            raise Exception('Invalid country name')


MAPPING = {'unnamed0': identifier, 'aggregationmethod': dailyaggregation, 'date': date, 'version': version, 'airportname': airportname, 'percentofbaseline': percentofbaseline, 'city': city, 'state': state, 'country': country}"
""
"class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count or number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return int(0)
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count or number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return int(0)
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count or number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return int(0)
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count or number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return int(0)
        return int(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'The count or number of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return int(0)
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of the Cricket Teams'
        self.valid_values = 'Names should be a string, each word starts with a capital letter'
        self.format = 'Each word in the team name should start with a capital letter'
        self.examples = ['Rising Pune Supergiant', 'Mumbai Indians', 'Chennai Super Kings', 'Delhi Capitals', 'Sunrisers Hyderabad']

    def cast(self, val):
        return str(val).title()

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage representation of a certain entity'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a non-negative floating point number, less than or equal to 100'
        self.units = 'Percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float(0)
        elif val < 0:
            return float(0)
        elif val > 100:
            return float(100)
        else:
            return round(val, 2)

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage representation of a certain entity'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a non-negative floating point number, less than or equal to 100'
        self.units = 'Percentage'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float(0)
        elif val < 0:
            return float(0)
        elif val > 100:
            return float(100)
        else:
            return round(val, 2)


MAPPING = {'unnamed0': count, 'homewins': count, 'awaywins': count, 'homematches': count, 'awaymatches': count, 'team': teamname, 'homewinpercentage': percent, 'awaywinpercentage': percent}"
"class batsman(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Batsman'
        self.valid_values = ""Name should be a string that is of the form 'initials lastname'""
        self.format = 'Only the first letter of the initials and last name should be capitalized'
        self.examples = ['V Kohli', 'SK Raina', 'RG Sharma', 'DA Warner', 'S Dhawan']

    def cast(self, val):
        return str(val).title()

class totalruns(NumericSemanticType):

    def __init__(self):
        self.description = 'Total runs scored by a batsman in IPL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total runs should be an integer'
        self.examples = [5426, 5386, 4902, 4717, 4601]

    def cast(self, val):
        return int(val)

class out(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a batsman got out in IPL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of outs should be an integer'
        self.examples = [152, 160, 161, 114, 137]

    def cast(self, val):
        return int(val)

class numberofballs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of balls faced by a batsman in IPL'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of balls should be an integer'
        self.examples = [4111, 3916, 3742, 3292, 3665]

    def cast(self, val):
        return int(val)

class average(NumericSemanticType):

    def __init__(self):
        self.description = 'Average runs scored by a batsman in IPL'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Average runs should be a floating point number with three decimal places'
        self.examples = [35.697, 33.662, 30.447, 41.377, 33.583]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 3)

class strikerate(NumericSemanticType):

    def __init__(self):
        self.description = 'Strike rate of a batsman in IPL'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Strike rate should be a floating point number with three decimal places'
        self.examples = [131.987, 137.538, 130.999, 143.286, 125.538]

    def cast(self, val):
        return round(float(val), 3)


MAPPING = {'batsman': batsman, 'totalruns': totalruns, 'out': out, 'numberofballs': numberofballs, 'average': average, 'strikerate': strikerate}"
"class matchidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a match'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Match ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a team participating in IPL'
        self.valid_values = 'Team names should be string, one of the 13 IPL teams'
        self.format = 'Each word in the team name should start with a capital letter'
        self.examples = ['Mumbai Indians', 'Royal Challengers Bangalore', 'Kings XI Punjab', 'Kolkata Knight Riders', 'Delhi Daredevils']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a team participating in IPL'
        self.valid_values = 'Team names should be string, one of the 13 IPL teams'
        self.format = 'Each word in the team name should start with a capital letter'
        self.examples = ['Mumbai Indians', 'Royal Challengers Bangalore', 'Kings XI Punjab', 'Kolkata Knight Riders', 'Delhi Daredevils']

    def cast(self, val):
        return str(val).title()

class over(NumericSemanticType):

    def __init__(self):
        self.description = 'Over number in a cricket match'
        self.valid_range = [1, 20]
        self.dtype = int
        self.format = 'Over number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player participating in IPL'
        self.valid_values = 'Player names should be a string, first and last name'
        self.format = ""Player name should be in the form 'first name last name'""
        self.examples = ['G Gambhir', 'SK Raina', 'RG Sharma', 'JH Kallis', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player participating in IPL'
        self.valid_values = 'Player names should be a string, first and last name'
        self.format = ""Player name should be in the form 'first name last name'""
        self.examples = ['G Gambhir', 'SK Raina', 'RG Sharma', 'JH Kallis', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a player participating in IPL'
        self.valid_values = 'Player names should be a string, first and last name'
        self.format = ""Player name should be in the form 'first name last name'""
        self.examples = ['G Gambhir', 'SK Raina', 'RG Sharma', 'JH Kallis', 'SR Tendulkar']

    def cast(self, val):
        return str(val).title()

class issuperover(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class dismissalmethod(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Method of dismissal of a player'
        self.valid_values = 'Method of dismissal should be a string, one of the 9 dismissal methods in cricket'
        self.format = 'Dismissal method should be in lower case'
        self.examples = ['caught', 'bowled', 'run out', 'lbw', 'stumped']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'matchid': matchidentifier, 'battingteam': teamname, 'bowlingteam': teamname, 'over': over, 'batsman': playername, 'nonstriker': playername, 'bowler': playername, 'issuperover': issuperover, 'wideruns': runs, 'byeruns': runs, 'legbyeruns': runs, 'noballruns': runs, 'penaltyruns': runs, 'batsmanruns': runs, 'extraruns': runs, 'totalruns': runs, 'dismissalkind': dismissalmethod}"
"class season(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Season of Indian Premier League (IPL)'
        self.valid_values = ""IPL season should be of the form 'IPL-YYYY'""
        self.format = 'IPL followed by a hyphen and a 4-digit year'
        self.examples = ['IPL-2013', 'IPL-2012', 'IPL-2011', 'IPL-2010', 'IPL-2014']

    def cast(self, val):
        return str(val).upper()

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cities in India'
        self.valid_values = 'Valid city names in India'
        self.format = 'City name should be capitalized'
        self.examples = ['Mumbai', 'Kolkata', 'Delhi', 'Bangalore', 'Hyderabad']

    def cast(self, val):
        return str(val).title()

class date(NumericSemanticType):

    def __init__(self):
        self.description = 'Date of the match'
        self.valid_range = [0, float('inf')]
        self.dtype = str
        self.format = ""Date should be in the format 'DD-MM-YYYY'""
        self.examples = ['17-04-2011', '21-05-2008', '25-05-2008', '30-04-2017', '26-04-2009']

    def cast(self, val):
        return datetime.strptime(str(val), '%d-%m-%Y').strftime('%d-%m-%Y')

class decision(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['field', 'bat']

    def cast(self, val):
        return str(val).lower() if str(val).lower() in self.valid_values else 'field'

class result(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Result of the match'
        self.valid_values = ""Result should be one of the following: 'normal', 'tie', 'no result'""
        self.format = 'Result should be in lowercase'
        self.examples = ['normal', 'tie', 'no result', 'normal', 'normal']

    def cast(self, val):
        return str(val).lower()

class binary(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if int(val) in self.valid_values else 0

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the IPL team'
        self.valid_values = 'Valid team names in IPL'
        self.format = 'Team name should be capitalized'
        self.examples = ['Mumbai Indians', 'Chennai Super Kings', 'Kolkata Knight Riders', 'Royal Challengers Bangalore', 'Kings XI Punjab']

    def cast(self, val):
        return str(val).title()

class runs(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of runs should be an integer'
        self.examples = [35, 0, 0, 0, 15]

    def cast(self, val):
        return int(val)

class wickets(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of wickets'
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = 'Number of wickets should be an integer between 0 and 10'
        self.examples = [0, 7, 10, 6, 0]

    def cast(self, val):
        return int(val) if 0 <= int(val) <= 10 else 0

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the player'
        self.valid_values = 'Player name should be a string'
        self.format = 'Player name should be capitalized'
        self.examples = ['CH Gayle', 'AB de Villiers', 'RG Sharma', 'MS Dhoni', 'DA Warner']

    def cast(self, val):
        return str(val).title()

class venue(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the cricket stadium'
        self.valid_values = 'Name of the valid cricket stadiums in IPL'
        self.format = 'Stadium name should be capitalized'
        self.examples = ['Eden Gardens', 'Wankhede Stadium', 'M Chinnaswamy Stadium', 'Feroz Shah Kotla', 'Rajiv Gandhi International Stadium, Uppal']

    def cast(self, val):
        return str(val).title()


MAPPING = {'season': season, 'city': city, 'date': date, 'tossdecision': decision, 'result': result, 'dlapplied': binary, 'winner': teamname, 'winbyruns': runs, 'winbywickets': wickets, 'playerofmatch': playername, 'venue': venue}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            raise Exception('Index value cannot be NaN')
        return int(val)

class covid19date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date when a COVID-19 case was reported'
        self.valid_values = 'Dates must be of the format YYYY-MM-DD'
        self.format = ""Dates must be strings of the form 'YYYY-MM-DD'""
        self.examples = ['2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-24']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
        except ValueError:
            raise Exception('Incorrect date format, should be YYYY-MM-DD')
        return val

class countyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a county'
        self.valid_values = 'Any string that represents a valid county name'
        self.format = 'County names should be capitalized and stored as strings'
        self.examples = ['Snohomish', 'Cook', 'Washington', 'Jefferson', 'Franklin']

    def cast(self, val):
        return str(val).title()

class statename(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a state in the US'
        self.valid_values = 'Must be a valid US state name'
        self.format = 'State names should be capitalized and stored as strings'
        self.examples = ['Washington', 'Illinois', 'Texas', 'Georgia', 'Virginia']

    def cast(self, val):
        if val not in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            raise Exception('Invalid US state name')
        return str(val).title()

class fipscode(NumericSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code for US counties'
        self.valid_range = [1001.0, 78030.0]
        self.dtype = float
        self.format = 'FIPS codes should be floating point numbers'
        self.examples = [53061.0, 17031.0, 18011.0, 28145.0, 42131.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class numcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer'
        self.examples = [1, 3, 9, 40, 170124]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Number of cases cannot be negative or NaN')
        return int(val)

class numdeaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 deaths'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of deaths should be a positive integer'
        self.examples = [0, 1, 9, 40, 17597]

    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Number of deaths cannot be negative or NaN')
        return int(val)


MAPPING = {'unnamed0': index, 'date': covid19date, 'county': countyname, 'state': statename, 'fips': fipscode, 'cases': numcases, 'deaths': numdeaths}"
"class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Dates must be in the format 'YYYY-MM-DD'""
        self.format = ""Dates must be stored as strings in the format 'YYYY-MM-DD'""
        self.examples = ['2022-05-18', '2022-05-13', '2022-05-16', '2022-07-04', '2022-05-09']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise ValueError('Incorrect date format, should be YYYY-MM-DD')

class bhk(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Bedrooms'
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = 'Number of bedrooms should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class rent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Rent of a House'
        self.valid_range = [1200, 3500000]
        self.dtype = float
        self.format = 'Rent should be a floating point number'
        self.unit = 'In currency of the country'
        self.examples = [1200.0, 10000.0, 16000.0, 33000.0, 3500000.0]

    def cast(self, val):
        return float(val)

class size(NumericSemanticType):

    def __init__(self):
        self.description = 'Size of a House'
        self.valid_range = [10, 8000]
        self.dtype = int
        self.format = 'Size should be an integer'
        self.examples = [10, 550, 850, 1200, 8000]

    def cast(self, val):
        return int(val)

class floor(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Floor Number'
        self.valid_values = ""Floor number should be of the form 'x out of y'""
        self.format = 'Floor number should be stored as a string'
        self.examples = ['1 out of 2', 'Ground out of 2', '2 out of 3', '2 out of 4', '1 out of 3']

    def cast(self, val):
        match_obj = re.match('(\\d+|Ground) out of (\\d+)', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid floor number')

class areatype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Area Type of a House'
        self.valid_values = ""Area type should be one of the following: 'Super Area', 'Carpet Area', 'Built Area'""
        self.format = 'Area type should be stored as a string'
        self.examples = ['Super Area', 'Carpet Area', 'Built Area']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid area type')

class arealocality(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Area Locality'
        self.valid_values = 'Area locality should be a string describing the location of the house'
        self.format = 'Area locality should be stored as a string'
        self.examples = ['Bandra West', 'Gachibowli', 'Electronic City', 'Velachery', 'Miyapur, NH 9']

    def cast(self, val):
        return str(val)

class city(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'City'
        self.valid_values = ""City should be one of the following: 'Mumbai', 'Chennai', 'Bangalore', 'Hyderabad', 'Delhi', 'Kolkata'""
        self.format = 'City should be stored as a string'
        self.examples = ['Mumbai', 'Chennai', 'Bangalore', 'Hyderabad', 'Delhi', 'Kolkata']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid city')

class furnishingstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Furnishing Status of a House'
        self.valid_values = ""Furnishing status should be one of the following: 'Semi-Furnished', 'Unfurnished', 'Furnished'""
        self.format = 'Furnishing status should be stored as a string'
        self.examples = ['Semi-Furnished', 'Unfurnished', 'Furnished']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid furnishing status')

class tenantpreferred(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Tenant Preference'
        self.valid_values = ""Tenant preference should be one of the following: 'Bachelors/Family', 'Bachelors', 'Family'""
        self.format = 'Tenant preference should be stored as a string'
        self.examples = ['Bachelors/Family', 'Bachelors', 'Family']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid tenant preference')

class bathroom(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Bathrooms'
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = 'Number of bathrooms should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class pointofcontact(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Point of Contact'
        self.valid_values = ""Point of contact should be one of the following: 'Contact Owner', 'Contact Agent', 'Contact Builder'""
        self.format = 'Point of contact should be stored as a string'
        self.examples = ['Contact Owner', 'Contact Agent', 'Contact Builder']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid point of contact')


MAPPING = {'postedon': date, 'bhk': bhk, 'rent': rent, 'size': size, 'floor': floor, 'areatype': areatype, 'arealocality': arealocality, 'city': city, 'furnishingstatus': furnishingstatus, 'tenantpreferred': tenantpreferred, 'bathroom': bathroom, 'pointofcontact': pointofcontact}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'Name must be a recognized country name in English'
        self.format = 'Country name must be a string'
        self.examples = ['USA', 'India', 'France', 'Brazil', 'Germany']

    def cast(self, val):
        return pycountry.countries.get(name=val).name

class totalcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total cases must be an integer'
        self.examples = [98166904, 44587307, 35342950, 34706757, 33312373]

    def cast(self, val):
        return int(val.replace(',', ''))

class totaldeaths(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of deaths due to Covid-19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total deaths must be an integer'
        self.examples = [1084282, 528629, 155078, 686027, 149948]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))

class newdeaths(NumericSemanticType):

    def __init__(self):
        self.description = 'New deaths due to Covid-19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'New deaths must be an integer'
        self.examples = [18, 21, 3, 6, 9]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class totalrecovered(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of recoveries from Covid-19'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total recoveries must be an integer'
        self.examples = [94962112, 44019095, 34527115, 33838636, 32315200]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))

class activecases(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of active Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Active cases must be an integer'
        self.examples = [2120510, 39583, 660757, 182094, 847225]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))

class seriouscritical(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of serious or critical Covid-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Serious or critical cases must be an integer'
        self.examples = [2970, 698, 869, 8318, 1406]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))

class totaltests(NumericSemanticType):

    def __init__(self):
        self.description = 'Total number of Covid-19 tests conducted'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total tests must be an integer'
        self.examples = [1118158870, 894416853, 271490188, 63776166, 122332384]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))

class population(NumericSemanticType):

    def __init__(self):
        self.description = 'Total population of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population must be an integer'
        self.examples = [334805269, 1406631776, 65584518, 215353593, 83883596]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.replace(',', ''))


MAPPING = {'unnamed0': index, 'countryother': countryname, 'totalcases': totalcases, 'totaldeaths': totaldeaths, 'newdeaths': newdeaths, 'totalrecovered': totalrecovered, 'activecases': activecases, 'seriouscritical': seriouscritical, 'totaltests': totaltests, 'population': population}"
"class sequentialnumericidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier that increases sequentially by 1, starting from 0 or 1.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequential identifiers should be integer values, increasing by 1.'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class sequentialnumericidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier that increases sequentially by 1, starting from 0 or 1.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sequential identifiers should be integer values, increasing by 1.'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in the form YYYY-MM-DD'
        self.valid_values = 'Date should be a string in the format YYYY-MM-DD'
        self.format = 'Date must be in the format YYYY-MM-DD'
        self.examples = ['2014-10-09', '2015-06-16', '2015-06-24', '2020-10-12', '2020-09-02']

    def cast(self, val):
        try:
            date = datetime.strptime(val, '%Y-%m-%d')
            return date.strftime('%Y-%m-%d')
        except ValueError:
            return float('nan')

class twittertarget(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Entity being targeted in a tweet, usually represented by a hyphen-separated string'
        self.valid_values = 'Target should be a string, usually hyphen-separated'
        self.format = 'Target should be lowercase and hyphen-separated'
        self.examples = ['the-media', 'democrats', 'hillary-clinton', 'trump-russia', 'joe-biden']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).lower()

class twitterinsult(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Insult contained in a tweet, usually represented by a string'
        self.valid_values = 'Insult should be a string'
        self.format = 'Insult should be capitalized correctly'
        self.examples = ['Fake News', 'Crooked', 'Sleepy Joe', 'failing', 'Crooked Hillary']

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()


MAPPING = {'unnamed01': sequentialnumericidentifier, 'unnamed0': sequentialnumericidentifier, 'date': datestamp, 'target': twittertarget, 'insult': twitterinsult}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index value')
        else:
            return num

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index value')
        else:
            return num

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a NBA Player'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Vince Carter', 'Dirk Nowitzki', 'Kevin Garnett', 'Jamal Crawford', 'Kobe Bryant']

    def cast(self, val):
        return str(val).title()

class teamabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of NBA Team'
        self.valid_values = 'Abbreviation should be a string containing 3 uppercase letters'
        self.format = 'Abbreviation should be a string containing 3 uppercase letters'
        self.examples = ['CLE', 'TOR', 'MIA', 'LAC', 'DAL']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{3}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid team abbreviation')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the NBA Player'
        self.valid_range = [18, 44]
        self.dtype = float
        self.format = 'Age should be a floating point number'
        self.examples = [36.0, 28.0, 39.0, 24.0, 34.0]

    def cast(self, val):
        num = float(val)
        if 18 <= num <= 44:
            return round(num, 2)
        else:
            raise Exception('Invalid age')

class playerheight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Height of the NBA Player'
        self.valid_range = [160.02, 231.14]
        self.dtype = float
        self.format = 'Height should be a floating point number (in cm units)'
        self.unit = 'In cm'
        self.examples = [198.12, 215.9, 205.74, 203.2, 205.74]

    def cast(self, val):
        num = float(val)
        if 160.02 <= num <= 231.14:
            return round(num, 2)
        else:
            raise Exception('Invalid height')

class playerweight(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Weight of the NBA Player'
        self.valid_range = [60.327736, 163.29312]
        self.dtype = float
        self.format = 'Weight should be a floating point number (in Kg units)'
        self.unit = 'In Kg'
        self.examples = [99.79024, 117.93392, 95.25432, 100.697424, 108.86208]

    def cast(self, val):
        num = float(val)
        if 60.327736 <= num <= 163.29312:
            return round(num, 2)
        else:
            raise Exception('Invalid weight')

class college(CategoricalSemanticType):

    def __init__(self):
        self.description = 'College of the NBA Player'
        self.valid_values = 'College should be a string'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['None', 'Kentucky', 'Duke', 'North Carolina', 'UCLA']

    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of the NBA Player'
        self.valid_values = 'Country should be a string'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['USA', 'Canada', 'France', 'Australia', 'Spain']

    def cast(self, val):
        country = pycountry.countries.get(name=str(val).title())
        if country is None:
            raise Exception('Invalid country')
        else:
            return country.name

class draftyear(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Draft Year of the NBA Player'
        self.valid_values = 'Draft Year should be a string'
        self.format = ""Draft Year should be formatted as 'YYYY'""
        self.examples = ['Undrafted', '1998', '2003', '2005', '2008']

    def cast(self, val):
        string = str(val)
        if string.isdigit() and len(string) == 4:
            return string
        elif string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft year')

class draftround(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Draft Round of the NBA Player'
        self.valid_values = 'Draft Round should be a string'
        self.format = ""Draft Round should be a string containing a number or 'Undrafted'""
        self.examples = ['1', '2', 'Undrafted', '3', '4']

    def cast(self, val):
        string = str(val)
        if string.isdigit():
            return string
        elif string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft round')

class draftnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Draft Number of the NBA Player'
        self.valid_values = 'Draft Number should be a string'
        self.format = ""Draft Number should be a string containing a number or 'Undrafted'""
        self.examples = ['Undrafted', '1', '5', '4', '3']

    def cast(self, val):
        string = str(val)
        if string.isdigit():
            return string
        elif string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft number')

class gp(NumericSemanticType):

    def __init__(self):
        self.description = 'Games Played by the NBA Player'
        self.valid_range = [1, 85]
        self.dtype = int
        self.format = 'Games Played should be an integer'
        self.examples = [55, 15, 9, 64, 27]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 85:
            return num
        else:
            raise Exception('Invalid games played')

class pts(NumericSemanticType):

    def __init__(self):
        self.description = 'Points Scored by the NBA Player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points Scored should be a floating point number'
        self.examples = [5.7, 2.3, 0.8, 3.7, 2.4]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid points scored')

class reb(NumericSemanticType):

    def __init__(self):
        self.description = 'Rebounds by the NBA Player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rebounds should be a floating point number'
        self.examples = [16.1, 1.5, 1.0, 2.3, 2.4]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid rebounds')

class ast(NumericSemanticType):

    def __init__(self):
        self.description = 'Assists by the NBA Player'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Assists should be a floating point number'
        self.examples = [3.1, 0.3, 0.4, 0.6, 0.2]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 2)
        else:
            raise Exception('Invalid assists')

class netrating(NumericSemanticType):

    def __init__(self):
        self.description = 'Net Rating of the NBA Player'
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = 'Net Rating should be a floating point number'
        self.examples = [16.1, 12.3, -2.1, -8.7, -11.2]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class orebpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Offensive Rebound Percentage of the NBA Player'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Offensive Rebound Percentage should be a floating point number between 0 and 1'
        self.examples = [0.186, 0.078, 0.105, 0.06, 0.109]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid offensive rebound percentage')

class drebpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Defensive Rebound Percentage of the NBA Player'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Defensive Rebound Percentage should be a floating point number between 0 and 1'
        self.examples = [0.3229999999999999, 0.151, 0.102, 0.149, 0.179]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid defensive rebound percentage')

class usgpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Usage Percentage of the NBA Player'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Usage Percentage should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.175, 0.103, 0.1669999999999999, 0.127]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid usage percentage')

class tspercent(NumericSemanticType):

    def __init__(self):
        self.description = 'True Shooting Percentage of the NBA Player'
        self.valid_range = [0, 1.5]
        self.dtype = float
        self.format = 'True Shooting Percentage should be a floating point number between 0 and 1.5'
        self.examples = [0.479, 0.43, 0.376, 0.3989999999999999, 0.611]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1.5:
            return round(num, 2)
        else:
            raise Exception('Invalid true shooting percentage')

class astpercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Assist Percentage of the NBA Player'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Assist Percentage should be a floating point number between 0 and 1'
        self.examples = [0.113, 0.048, 0.148, 0.077, 0.04]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid assist percentage')

class season(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Season of the NBA Player'
        self.valid_values = 'Season should be a string'
        self.format = ""Season should be formatted as 'YYYY-YY'""
        self.examples = ['2021-22', '2020-21', '2017-18', '2018-19', '2019-20']

    def cast(self, val):
        string = str(val)
        match_obj = re.match('\\d{4}-\\d{2}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid season')


MAPPING = {'unnamed01': index, 'unnamed0': index, 'playername': playername, 'teamabbreviation': teamabbreviation, 'age': age, 'playerheight': playerheight, 'playerweight': playerweight, 'college': college, 'country': country, 'draftyear': draftyear, 'draftround': draftround, 'draftnumber': draftnumber, 'gp': gp, 'pts': pts, 'reb': reb, 'ast': ast, 'netrating': netrating, 'orebpct': orebpercent, 'drebpct': drebpercent, 'usgpct': usgpercent, 'tspct': tspercent, 'astpct': astpercent, 'season': season}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index, or a position of a data point in an ordered list'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index, or a position of a data point in an ordered list'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class acousticmeasurement(NumericSemanticType):

    def __init__(self):
        self.description = 'A measure of the acoustic quality of a song'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Acoustic measurement should be a floating point number between 0 and 1'
        self.examples = [0.0102, 0.199, 0.0344, 0.604, 0.18]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid acoustic measurement')

class durationms(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Duration of a song'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Duration should be an integer representing milliseconds'
        self.unit = 'milliseconds'
        self.examples = [204600, 326933, 185707, 199413, 392893]

    def cast(self, val):
        return int(val)

class energy(NumericSemanticType):

    def __init__(self):
        self.description = 'A measure of the energy of a song'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Energy should be a floating point number between 0 and 1'
        self.examples = [0.434, 0.359, 0.412, 0.338, 0.561]

    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid energy measurement')

class key(NumericSemanticType):

    def __init__(self):
        self.description = 'A key of a song'
        self.valid_range = [0, 11]
        self.dtype = int
        self.format = 'Key should be an integer between 0 and 11'
        self.examples = [2, 1, 2, 5, 5]

    def cast(self, val):
        val = int(val)
        if 0 <= val <= 11:
            return val
        else:
            raise Exception('Invalid key')

class mode(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        val = int(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid mode')

class timesignature(NumericSemanticType):

    def __init__(self):
        self.description = 'Time signature of a song'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'Time signature should be an integer between 1 and 5'
        self.examples = [4, 4, 4, 4, 4]

    def cast(self, val):
        val = int(val)
        if 1 <= val <= 5:
            return val
        else:
            raise Exception('Invalid time signature')

class songtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a song'
        self.valid_values = 'A song title must be a string'
        self.format = 'Song title should be a string'
        self.examples = ['Mask Off', 'Redbone', 'Xanny Family', 'Master Of None', 'Parallel Lines']

    def cast(self, val):
        return str(val)

class artist(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an artist'
        self.valid_values = 'An artist name must be a string'
        self.format = 'Artist name should be a string'
        self.examples = ['Future', 'Childish Gambino', 'Future', 'Beach House', 'Junior Boys']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed01': index, 'unnamed0': index, 'acousticness': acousticmeasurement, 'durationms': durationms, 'energy': energy, 'key': key, 'mode': mode, 'timesignature': timesignature, 'songtitle': songtitle, 'artist': artist}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the patient'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [65, 62, 58, 72, 4]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of the patient'
        self.valid_values = ""Gender is either 'Male' or 'Female'""
        self.format = ""Gender should be a string ('Male' or 'Female')""
        self.examples = ['Male', 'Female']

    def cast(self, val):
        if val not in self.examples:
            raise ValueError(f'Invalid gender value {val}')
        return val

class totalbilirubin(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total Bilirubin level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total Bilirubin level should be a non-negative float'
        self.unit = 'mg/dL'
        self.examples = [0.7, 10.9, 7.3, 1.0, 3.9]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise ValueError(f'Invalid Total Bilirubin level {val}')
        return round(val, 2)

class directbilirubin(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Direct Bilirubin level'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Direct Bilirubin level should be a non-negative float'
        self.unit = 'mg/dL'
        self.examples = [0.1, 5.5, 4.1, 0.4, 2.0]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise ValueError(f'Invalid Direct Bilirubin level {val}')
        return round(val, 2)


MAPPING = {'unnamed0': identifier, 'age': age, 'gender': gender, 'totalbilirubin': totalbilirubin, 'directbilirubin': directbilirubin}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [67, 22, 49, 45, 53]

    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['male', 'female']

    def cast(self, val):
        return str(val).lower()

class jobcategory(NumericSemanticType):

    def __init__(self):
        self.description = 'Job category of a person'
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = 'Job category should be an integer between 0 and 3'
        self.examples = [2, 2, 1, 2, 2]

    def cast(self, val):
        return int(val)

class housingstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Housing status of a person'
        self.valid_values = ['own', 'rent', 'free']
        self.format = ""Housing status should be either 'own', 'rent', or 'free'""
        self.examples = ['own', 'rent', 'free']

    def cast(self, val):
        return str(val).lower()

class savingaccountstatus(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Saving account status of a person'
        self.valid_values = ""Saving account status should be a string representing the financial status of the person's saving account""
        self.format = 'Saving account status should be a string'
        self.examples = ['little', 'moderate', 'quite rich', 'rich']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).lower()

class checkingaccountstatus(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Checking account status of a person'
        self.valid_values = ""Checking account status should be a string representing the financial status of the person's checking account""
        self.format = 'Checking account status should be a string'
        self.examples = ['little', 'moderate', 'rich']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).lower()

class creditamount(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""The credit amount in a person's account""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Credit amount should be formatted as a floating point number'
        self.unit = 'In currency'
        self.examples = [1169, 5951, 2096, 7882, 4870]

    def cast(self, val):
        return float(val)

class duration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Duration of a credit'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Duration should be a non-negative integer'
        self.unit = 'In months'
        self.examples = [6, 48, 12, 42, 24]

    def cast(self, val):
        return int(val)

class creditpurpose(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Purpose of the credit'
        self.valid_values = 'Purpose should be a string representing the reason for the credit'
        self.format = 'Purpose should be a string'
        self.examples = ['car', 'radio/TV', 'furniture/equipment', 'business', 'education']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed01': identifier, 'unnamed0': identifier, 'age': age, 'sex': gender, 'job': jobcategory, 'housing': housingstatus, 'savingaccounts': savingaccountstatus, 'checkingaccount': checkingaccountstatus, 'creditamount': creditamount, 'duration': duration, 'purpose': creditpurpose}"
"class twitterusername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Twitter Username'
        self.valid_values = 'Username must be string and can contain alphanumeric characters with underscores'
        self.format = 'Names are case sensitive and must start with an alphabet or underscore, followed by a combination of alphabets, numbers and underscores'
        self.examples = ['Rachel Roh', 'Albert Fong', 'eli🇱🇹🇪🇺👌', 'Charles Adler', 'Citizen News Channel']

    def cast(self, val):
        if re.match('^[A-Za-z_][A-Za-z_0-9]*$', val):
            return val
        else:
            return 'Invalid Username'

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country Name must be a string and a valid country name'
        self.format = 'Country names must start with a capital letter and rest of the characters must be small letters'
        self.examples = ['Malaysia', 'London, England', 'India', 'Petaling Jaya', 'London']

    def cast(self, val):
        if val is None or math.isnan(val):
            return None
        if pycountry.countries.get(name=val.title()):
            return val.title()
        else:
            return 'Invalid Country Name'

class dateandtime(NumericSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = datetime
        self.format = ""Date and time should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-12-20 06:06:44', '2020-12-13 16:27:13', '2020-12-12 20:33:45', '2020-12-12 20:23:59', '2020-12-12 20:17:19']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class userverificationstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return None

class hashtaglist(CategoricalSemanticType):

    def __init__(self):
        self.description = 'List of Hashtags'
        self.valid_values = 'List of string hashtags, can contain alphanumeric characters and underscores'
        self.format = 'Hashtags must start with #, followed by a combination of alphabets, numbers and underscores'
        self.examples = [""['PfizerBioNTech']"", ""['coronavirus', 'SputnikV', 'AstraZeneca', 'PfizerBioNTech', 'Moderna', 'Covid_19']"", ""['whereareallthesickpeople', 'PfizerBioNTech']""]

    def cast(self, val):
        if val is None or math.isnan(val):
            return None
        else:
            hashtags = re.findall('\\b#\\w\\w+\\b', val)
            return hashtags if len(hashtags) > 0 else None

class twitterapp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Twitter App from which the tweet was made'
        self.valid_values = 'Must be a string and a valid twitter app'
        self.format = 'Names are case sensitive and can contain spaces and special characters'
        self.examples = ['Twitter for iPhone', 'Twitter Web App', 'Twitter for Android', 'TweetDeck', 'Twitter for iPad']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid Twitter App'


MAPPING = {'username': twitterusername, 'userlocation': countryname, 'date': dateandtime, 'userverified': userverificationstatus, 'hashtags': hashtaglist, 'source': twitterapp}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class ufosightingtime(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of UFO sighting'
        self.valid_values = ""Date and time in the format 'mm/dd/yyyy hh:mm'""
        self.format = ""Date and Time should be in the format 'mm/dd/yyyy hh:mm'""
        self.examples = ['10/10/1949 20:30', '10/10/1949 21:00', '10/10/1955 17:00', '10/10/1956 21:00', '10/10/1960 20:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a city'
        self.valid_values = 'City name should be a string'
        self.format = 'The first letter of the city name should be capitalized'
        self.examples = ['San Marcos', 'Lackland AFB', 'Chester (UK/England)', 'Edna', 'Kaneohe']

    def cast(self, val):
        return str(val).title()

class stateabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of a state'
        self.valid_values = 'Abbreviation should be a string of two upper-case letters'
        self.format = 'State abbreviation should be a string of two upper-case letters'
        self.examples = ['CA', 'TX', 'NY', 'WA', 'FL']

    def cast(self, val):
        return str(val).upper()

class countryabbreviation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of a country'
        self.valid_values = 'Abbreviation should be a string of two lower-case letters'
        self.format = 'Country abbreviation should be a string of two lower-case letters'
        self.examples = ['us', 'ca', 'gb', 'au', 'de']

    def cast(self, val):
        return str(val).lower()

class ufosightingshape(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Shape of the UFO'
        self.valid_values = 'Shape should be a string of lower-case letters'
        self.format = 'Shape should be a string of lower-case letters'
        self.examples = ['light', 'triangle', 'circle', 'fireball', 'other']

    def cast(self, val):
        return str(val).lower()

class ufosightingduration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Duration of a UFO sighting'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Duration should be a floating point number in seconds'
        self.unit = 'seconds'
        self.examples = [2700.0, 7200.0, 20.0, 20.0, 900.0]

    def cast(self, val):
        return float(val)

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude of a location'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [29.8830556, 29.38421, 53.2, 28.9783333, 21.4180556]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude of a location'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-97.9411111, -98.581082, -2.916667, -96.6458333, -157.8036111]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num


MAPPING = {'unnamed0': rowindex, 'datetime': ufosightingtime, 'city': cityname, 'state': stateabbreviation, 'country': countryabbreviation, 'shape': ufosightingshape, 'durationseconds': ufosightingduration, 'latitude': latitude, 'longitude': longitude}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class smartphoneaxisacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def cast(self, val):
        return float(val)

class correlation(NumericSemanticType):

    def __init__(self):
        self.description = 'Correlation'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Correlation should be formatted as a float between -1 and 1'
        self.examples: list = [0.1, -0.5, 0.75]

    def cast(self, val):
        num = float(val)
        if num < -1 or num > 1:
            raise ValueError('Invalid correlation value')
        return num

class correlation(NumericSemanticType):

    def __init__(self):
        self.description = 'Correlation'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Correlation should be formatted as a float between -1 and 1'
        self.examples: list = [0.1, -0.5, 0.75]

    def cast(self, val):
        num = float(val)
        if num < -1 or num > 1:
            raise ValueError('Invalid correlation value')
        return num

class correlation(NumericSemanticType):

    def __init__(self):
        self.description = 'Correlation'
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = 'Correlation should be formatted as a float between -1 and 1'
        self.examples: list = [0.1, -0.5, 0.75]

    def cast(self, val):
        num = float(val)
        if num < -1 or num > 1:
            raise ValueError('Invalid correlation value')
        return num


MAPPING = {'unnamed0': index, 'tbodyaccmeanx': smartphoneaxisacceleration, 'tbodyaccmeany': smartphoneaxisacceleration, 'tbodyaccmeanz': smartphoneaxisacceleration, 'tbodyaccstdx': smartphoneaxisacceleration, 'tbodyaccstdy': smartphoneaxisacceleration, 'tbodyaccstdz': smartphoneaxisacceleration, 'tbodyaccmadx': smartphoneaxisacceleration, 'tbodyaccmady': smartphoneaxisacceleration, 'tbodyaccmadz': smartphoneaxisacceleration, 'tbodyaccmaxx': smartphoneaxisacceleration, 'tbodyaccmaxy': smartphoneaxisacceleration, 'tbodyaccmaxz': smartphoneaxisacceleration, 'tbodyaccminx': smartphoneaxisacceleration, 'tbodyaccminy': smartphoneaxisacceleration, 'tbodyaccminz': smartphoneaxisacceleration, 'tbodyaccsma': smartphoneaxisacceleration, 'tbodyaccenergyx': smartphoneaxisacceleration, 'tbodyaccenergyy': smartphoneaxisacceleration, 'tbodyaccenergyz': smartphoneaxisacceleration, 'tbodyacciqrx': smartphoneaxisacceleration, 'tbodyacciqry': smartphoneaxisacceleration, 'tbodyacciqrz': smartphoneaxisacceleration, 'tbodyaccentropyx': smartphoneaxisacceleration, 'tbodyaccentropyy': smartphoneaxisacceleration, 'tbodyaccentropyz': smartphoneaxisacceleration, 'tgravityaccmeanx': smartphoneaxisacceleration, 'tbodyacccorrelationxy': correlation, 'tbodyacccorrelationxz': correlation, 'tbodyacccorrelationyz': correlation}"
"class activityindex(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of an activity in human activity recognition dataset'
        self.valid_range = [0, 7351]
        self.dtype = int
        self.format = 'The activity index should be a non-negative integer'
        self.examples = [0, 1837, 3675, 5513, 7351]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 7351:
            raise Exception('Invalid activity index')
        return num

class bodyacceleration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mean body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration')
        return round(num, 6)

class bodyacceleration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mean body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration')
        return round(num, 6)

class bodyacceleration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mean body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration')
        return round(num, 6)

class bodyaccelerationstd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The standard deviation of body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration standard deviation should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration standard deviation is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration standard deviation')
        return round(num, 6)

class bodyaccelerationstd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The standard deviation of body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration standard deviation should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration standard deviation is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration standard deviation')
        return round(num, 6)

class bodyaccelerationstd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The standard deviation of body acceleration in a certain direction'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration standard deviation should be a floating point number between -1 and 1'
        self.units = 'The unit of body acceleration standard deviation is 1g, where g is the acceleration due to gravity'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration standard deviation')
        return round(num, 6)

class bodyaccelerationcorrelation(NumericSemanticType):

    def __init__(self):
        self.description = 'The correlation between body accelerations in two different directions'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration correlation should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration correlation')
        return round(num, 6)

class bodyaccelerationcorrelation(NumericSemanticType):

    def __init__(self):
        self.description = 'The correlation between body accelerations in two different directions'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration correlation should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration correlation')
        return round(num, 6)

class bodyaccelerationcorrelation(NumericSemanticType):

    def __init__(self):
        self.description = 'The correlation between body accelerations in two different directions'
        self.valid_range = [-1.0, 1.0]
        self.dtype = float
        self.format = 'Body acceleration correlation should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration correlation')
        return round(num, 6)

class gravityacceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'The mean gravity acceleration in the x direction'
        self.valid_range = [-1.0, 0.99154906]
        self.dtype = float
        self.format = 'Gravity acceleration should be a floating point number between -1 and 0.99154906'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 0.99154906]

    def cast(self, val):
        num = float(val)
        if num < -1.0 or num > 0.99154906:
            raise Exception('Invalid gravity acceleration')
        return round(num, 6)


MAPPING = {'unnamed0': activityindex, 'tbodyaccmeanx': bodyacceleration, 'tbodyaccmeany': bodyacceleration, 'tbodyaccmeanz': bodyacceleration, 'tbodyaccstdx': bodyaccelerationstd, 'tbodyaccstdy': bodyaccelerationstd, 'tbodyaccstdz': bodyaccelerationstd, 'tbodyacccorrelationxy': bodyaccelerationcorrelation, 'tbodyacccorrelationxz': bodyaccelerationcorrelation, 'tbodyacccorrelationyz': bodyaccelerationcorrelation, 'tgravityaccmeanx': gravityacceleration}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinates'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples: list[float] = [40.2978759, 40.2580614, 40.1211818, 40.116153, 40.251492]

    def cast(self, val):
        lat = float(val)
        if not -90 <= lat <= 90:
            raise Exception('Invalid latitude')
        return lat

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinates'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples: list[float] = [-75.5812935, -75.2646799, -75.3519752, -75.343513, -75.6033497]

    def cast(self, val):
        lng = float(val)
        if not -180 <= lng <= 180:
            raise Exception('Invalid longitude')
        return lng

class zipcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.valid_values = ""Zip Codes must must fit the following regex: '[0-9]{5}(?:-[0-9]{4})?'""
        self.format = 'Zip Codes must be 5-digit numbers stored as strings'
        self.examples = ['19525', '19446', '19401', '19401', 'NaN']

    def cast(self, val):
        if math.isnan(val):
            return 'NaN'
        string = str(int(val))
        match_obj = re.match('[0-9]{5}(?:-[0-9]{4})?', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class incidenttype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of Incident'
        self.valid_values = 'Incident type can be any string'
        self.format = 'Incident type should be a string with an uppercase first character'
        self.examples = ['EMS: BACK PAINS/INJURY', 'EMS: DIABETIC EMERGENCY', 'Fire: GAS-ODOR/LEAK', 'EMS: CARDIAC EMERGENCY', 'EMS: DIZZINESS']

    def cast(self, val):
        return str(val).title()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = 'Timestamp must be a string in the format YYYY-MM-DD HH:MM:SS'
        self.format = 'Timestamp should be a string in the format YYYY-MM-DD HH:MM:SS'
        self.examples = ['2015-12-10 17:10:52', '2015-12-10 17:29:21', '2015-12-10 14:39:21', '2015-12-10 16:47:36', '2015-12-10 16:56:52']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            return val
        except ValueError:
            raise Exception('Invalid timestamp')

class township(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Township'
        self.valid_values = 'Township can be any string'
        self.format = 'Township should be a string with an uppercase first character'
        self.examples = ['NEW HANOVER', 'HATFIELD TOWNSHIP', 'NORRISTOWN', 'NORRISTOWN', 'LOWER POTTSGROVE']

    def cast(self, val):
        return str(val).title()

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address'
        self.valid_values = 'Address can be any string'
        self.format = 'Address should be a string with an uppercase first character'
        self.examples = ['REINDEER CT & DEAD END', 'BRIAR PATH & WHITEMARSH LN', 'HAWS AVE', 'AIRY ST & SWEDE ST', 'CHERRYWOOD CT & DEAD END']

    def cast(self, val):
        return str(val).title()

class emergencycall(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [1]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'lat': latitude, 'lng': longitude, 'zip': zipcode, 'title': incidenttype, 'timestamp': timestamp, 'twp': township, 'addr': address, 'e': emergencycall}"
"class serialnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Serial numbers are unique identifiers'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Serial numbers are integers with no decimal places'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid serial number')

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country name in English'
        self.valid_values = 'Country names are strings and should be valid names of countries in English'
        self.format = 'Country names should be capitalized'
        self.examples = ['USA', 'India', 'France', 'Germany', 'Brazil']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country name')
        else:
            return val

class casescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

class casescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

class casescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

class casescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

class casescount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

class populationcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Population count of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be an integer with no decimal places'
        self.examples = [334805269, 1406631776, 65584518, 83883596, 215353593]

    def cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid population count')


MAPPING = {'serialnumber': serialnumber, 'country': countryname, 'totalcases': casescount, 'totaldeaths': casescount, 'totalrecovered': casescount, 'activecases': casescount, 'totaltest': casescount, 'population': populationcount}"
"class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The acidity level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be formatted as a floating point number with two decimal places'
        self.unit = 'In g/dm³'
        self.examples = [5.0, 1.3, 8.0, 0.9, 15.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The acidity level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be formatted as a floating point number with two decimal places'
        self.unit = 'In g/dm³'
        self.examples = [5.0, 1.3, 8.0, 0.9, 15.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class acidity(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The acidity level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acidity should be formatted as a floating point number with two decimal places'
        self.unit = 'In g/dm³'
        self.examples = [5.0, 1.3, 8.0, 0.9, 15.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sugar(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sugar level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sugar level should be formatted as a floating point number with two decimal places'
        self.unit = 'In g/dm³'
        self.examples = [1.9, 2.6, 2.2, 1.9, 1.9]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class chlorides(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The chlorides level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Chlorides level should be formatted as a floating point number with three decimal places'
        self.unit = 'In g/dm³'
        self.examples = [0.076, 0.098, 0.092, 0.075, 0.076]

    def cast(self, val):
        num = float(val)
        return round(num, 3)

class sulfurdioxide(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sulfur dioxide level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulfur dioxide level should be formatted as a floating point number with no decimal places'
        self.unit = 'In mg/dm³'
        self.examples = [11.0, 25.0, 15.0, 17.0, 11.0]

    def cast(self, val):
        num = float(val)
        return round(num)

class sulfurdioxide(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sulfur dioxide level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulfur dioxide level should be formatted as a floating point number with no decimal places'
        self.unit = 'In mg/dm³'
        self.examples = [11.0, 25.0, 15.0, 17.0, 11.0]

    def cast(self, val):
        num = float(val)
        return round(num)

class density(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The density of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Density should be formatted as a floating point number with five decimal places'
        self.unit = 'In g/cm³'
        self.examples = [0.9978, 0.9968, 0.997, 0.998, 0.9978]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class phlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'The pH level of a substance'
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = 'pH level should be formatted as a floating point number with two decimal places'
        self.examples = [3.51, 3.2, 3.26, 3.16, 3.51]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class sulphates(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The sulphates level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sulphates level should be formatted as a floating point number with two decimal places'
        self.unit = 'In g/dm³'
        self.examples = [0.56, 0.68, 0.65, 0.58, 0.56]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class alcohol(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The alcohol level of a substance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Alcohol level should be formatted as a floating point number with one decimal place'
        self.unit = 'In % vol'
        self.examples = [9.4, 9.8, 9.8, 9.8, 9.4]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class quality(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Quality of a substance'
        self.valid_values = 'Quality should be an integer from 1 to 10'
        self.format = 'Quality should be formatted as an integer'
        self.examples = ['3', '4', '5', '6', '7']

    def cast(self, val):
        return int(val)


MAPPING = {'fixedacidity': acidity, 'volatileacidity': acidity, 'citricacid': acidity, 'residualsugar': sugar, 'chlorides': chlorides, 'freesulfurdioxide': sulfurdioxide, 'totalsulfurdioxide': sulfurdioxide, 'density': density, 'ph': phlevel, 'sulphates': sulphates, 'alcohol': alcohol, 'quality': quality}"
"class indianfoodname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Indian Food'
        self.valid_values = 'Name should be a string that represents a type of Indian food'
        self.format = 'The name of the food should be capitalized'
        self.examples = ['Balu Shahi', 'Boondi', 'Gajar Ka Halwa', 'Ghevar', 'Gulab Jamun']

    def cast(self, val):
        return str(val).title()

class fooddiet(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['vegetarian', 'non vegetarian']

    def cast(self, val):
        return str(val).lower()

class foodpreptime(NumericSemanticType):

    def __init__(self):
        self.description = 'The preparation time for a food'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Preparation time should be an integer representing the number of minutes'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class foodcooktime(NumericSemanticType):

    def __init__(self):
        self.description = 'The cooking time for a food'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cooking time should be an integer representing the number of minutes'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        return int(val)

class foodflavorprofile(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Flavor profile of a food'
        self.valid_values = ""Flavor profile must be one of the following: ['spicy', 'sweet', '-1', 'bitter', 'sour']""
        self.format = 'The flavor profile should be a lowercase string'
        self.examples = ['spicy', 'sweet', 'bitter', 'sour', '-1']

    def cast(self, val):
        return str(val).lower()

class foodcourse(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Course in which a food is served'
        self.valid_values = ""Course must be one of the following: ['main course', 'dessert', 'snack', 'starter']""
        self.format = 'The course should be a lowercase string'
        self.examples = ['main course', 'dessert', 'snack', 'starter']

    def cast(self, val):
        return str(val).lower()

class indianstate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Indian state'
        self.valid_values = 'Name should be a string that represents a state in India'
        self.format = 'The name of the state should be capitalized'
        self.examples = ['Gujarat', 'Punjab', 'Maharashtra', 'West Bengal', 'Rajasthan']

    def cast(self, val):
        return str(val).title()

class indianregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Indian region'
        self.valid_values = ""Region must be one of the following: ['West', 'South', 'North', 'East', 'North East']""
        self.format = 'The region should be a capitalized string'
        self.examples = ['West', 'South', 'North', 'East', 'North East']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': indianfoodname, 'diet': fooddiet, 'preptime': foodpreptime, 'cooktime': foodcooktime, 'flavorprofile': foodflavorprofile, 'course': foodcourse, 'state': indianstate, 'region': indianregion}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index representing the row number in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            raise Exception('Invalid index')
        return int(val)

class province(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State'
        self.valid_values = 'Name of the province or state. It should be a string'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Shanghai', 'Yunnan', 'Beijing', 'Taiwan', 'Jilin']

    def cast(self, val):
        return str(val).title()

class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country'
        self.valid_values = 'Name of the country. It should be a string and must be a valid country as defined by the pycountry library'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Mainland China', 'US', 'Thailand', 'South Korea', 'Japan']

    def cast(self, val):
        val = val.title()
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country')
        return val

class datetimeupdated(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime when the data was last updated'
        self.valid_values = ""Datetime should be of the format 'm/d/yyyy h:mm AM/PM' or 'm/d/yyyy'""
        self.format = 'Datetime should be converted to datetime object in python'
        self.examples = ['1/25/2020 12:00 PM', '1/23/20 12:00 PM', '1/26/2020 11:00 AM', '1/25/2020 12:00 AM', '1/24/2020 12:00 PM']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %I:%M %p')
        except ValueError:
            try:
                return datetime.strptime(val, '%m/%d/%Y')
            except ValueError:
                raise Exception('Invalid datetime')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed/suspected/recovered/deaths cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be a positive floating point number'
        self.examples = [1.0, 2.0, 5.0, 18.0, 1058.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0:
            raise Exception('Invalid count')
        return float(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed/suspected/recovered/deaths cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be a positive floating point number'
        self.examples = [1.0, 2.0, 5.0, 18.0, 1058.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0:
            raise Exception('Invalid count')
        return float(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed/suspected/recovered/deaths cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be a positive floating point number'
        self.examples = [1.0, 2.0, 5.0, 18.0, 1058.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0:
            raise Exception('Invalid count')
        return float(val)

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed/suspected/recovered/deaths cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Count should be a positive floating point number'
        self.examples = [1.0, 2.0, 5.0, 18.0, 1058.0]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0:
            raise Exception('Invalid count')
        return float(val)


MAPPING = {'unnamed0': index, 'provincestate': province, 'country': country, 'datelastupdated': datetimeupdated, 'confirmed': count, 'suspected': count, 'recovered': count, 'deaths': count}"
"class indexnumeric(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class indexnumeric(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region or Country name'
        self.valid_values = 'Names of regions or countries in the world'
        self.format = 'Region/Country names should be capitalized and correctly spelled'
        self.examples = ['Shanghai', 'Yunnan', 'Beijing', 'Taiwan', 'Jilin']

    def cast(self, val):
        return str(val).strip().title()

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region or Country name'
        self.valid_values = 'Names of regions or countries in the world'
        self.format = 'Region/Country names should be capitalized and correctly spelled'
        self.examples = ['Shanghai', 'Yunnan', 'Beijing', 'Taiwan', 'Jilin']

    def cast(self, val):
        return str(val).strip().title()

class datetimeformat(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time in a certain format'
        self.valid_values = ""Date and time should be in the following format: 'M/D/YYYY' or 'M/D/YYYY hh:mm AM/PM'""
        self.format = 'Date and time are stored as strings'
        self.examples = ['1/21/2020', '1/25/2020 12:00 PM', '1/23/20 12:00 PM', '1/26/2020 11:00 AM', '1/25/2020 12:00 AM']

    def cast(self, val):
        try:
            return datetime.strptime(str(val), '%m/%d/%Y %I:%M %p').strftime('%m/%d/%Y %I:%M %p')
        except ValueError:
            return datetime.strptime(str(val), '%m/%d/%Y').strftime('%m/%d/%Y')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases (confirmed, suspected, recovered, deaths) related to a disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Case counts should be non-negative real numbers'
        self.examples = [10.0, 0.0, 42.0, 52.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            return float('nan')
        else:
            return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases (confirmed, suspected, recovered, deaths) related to a disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Case counts should be non-negative real numbers'
        self.examples = [10.0, 0.0, 42.0, 52.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            return float('nan')
        else:
            return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases (confirmed, suspected, recovered, deaths) related to a disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Case counts should be non-negative real numbers'
        self.examples = [10.0, 0.0, 42.0, 52.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            return float('nan')
        else:
            return num

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases (confirmed, suspected, recovered, deaths) related to a disease'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Case counts should be non-negative real numbers'
        self.examples = [10.0, 0.0, 42.0, 52.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            return float('nan')
        else:
            return num


MAPPING = {'unnamed01': indexnumeric, 'unnamed0': indexnumeric, 'provincestate': region, 'country': region, 'datelastupdated': datetimeformat, 'confirmed': casecount, 'suspected': casecount, 'recovered': casecount, 'deaths': casecount}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a province or state'
        self.valid_values = 'Must be a valid province or state name'
        self.format = 'Should be a string'
        self.examples = ['Hubei', 'Zhejiang', 'Henan', 'Guangdong', 'Chongqing']

    def cast(self, val):
        return str(val)

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country or region'
        self.valid_values = 'Must be a valid country or region name'
        self.format = 'Should be a string'
        self.examples = ['Mainland China', 'United States', 'Taiwan', 'Japan', 'Thailand']

    def cast(self, val):
        return str(val)

class lastupdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of last update'
        self.valid_values = 'Must be a valid date and time'
        self.format = ""Should be a string in the format 'month/day/year hour:minute'""
        self.examples = ['1/25/2020 12:00 PM', '1/27/2020 20:30', '1/27/2020 19:00', '1/27/2020 9:00', '1/26/2020 23:00']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [2714.0, 173.0, 168.0, 151.0, 132.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [2714.0, 173.0, 168.0, 151.0, 132.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [2714.0, 173.0, 168.0, 151.0, 132.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class casecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a floating point number'
        self.examples = [2714.0, 173.0, 168.0, 151.0, 132.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')


MAPPING = {'unnamed0': identifier, 'provincestate': provincestate, 'countryregion': countryregion, 'lastupdate': lastupdate, 'confirmed': casecount, 'suspected': casecount, 'recovered': casecount, 'death': casecount}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State of a country'
        self.valid_values = 'Should be a valid province/state of a country'
        self.format = 'Each word should be capitalized'
        self.examples = ['Hubei', 'Guangdong', 'Zhejiang', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'Should be a valid country or region'
        self.format = 'Each word should be capitalized'
        self.examples = ['Mainland China', 'United States', 'Australia', 'Hong Kong', 'Japan']

    def cast(self, val):
        return pycountry.countries.get(name=str(val).title()).name

class lastupdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Last update of the information'
        self.valid_values = 'Should be a valid datetime'
        self.format = ""Should be of the form 'mm/dd/yyyy hh:mm'""
        self.examples = ['1/25/2020 12:00', '1/28/2020 18:00', '1/27/2020 20:30', '1/28/2020 13:00', '1/27/2020 19:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %H:%M')

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [3554.0, 207.0, 173.0, 168.0, 143.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [3554.0, 207.0, 173.0, 168.0, 143.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [3554.0, 207.0, 173.0, 168.0, 143.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a non-negative floating point number'
        self.examples = [3554.0, 207.0, 173.0, 168.0, 143.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'provincestate': provincestate, 'countryregion': countryregion, 'lastupdate': lastupdate, 'confirmed': cases, 'suspected': cases, 'recovered': cases, 'death': cases}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'A unique numerical identifier'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Unique Identifiers should be integer values'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Province or State'
        self.valid_values: str = 'Name should be a string representing the name of a Province or State'
        self.format: str = 'Only the first letter of each word should be capitalized'
        self.examples: list = ['Hubei', 'Zhejiang', 'Guangdong', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Country or Region'
        self.valid_values: str = 'Name should be a string representing the name of a Country or Region'
        self.format: str = 'Only the first letter of each word should be capitalized'
        self.examples: list = ['Mainland China', 'United States', 'Australia', 'Hong Kong', 'Taiwan']

    def cast(self, val):
        return str(val).title()

class datetimeupdate(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date and Time of the Last Update'
        self.valid_values: str = 'Date and Time should be in the format: MM/DD/YYYY HH:MM'
        self.format: str = 'Date and Time should be a string in the format: MM/DD/YYYY HH:MM'
        self.examples: list = ['1/25/2020 12:00 PM', '1/30/2020 21:30', '1/30/2020 11:00', '1/29/2020 21:00', '1/29/2020 14:30']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %H:%M')

class numberofcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of Cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Number of cases should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class numberofsuspectedcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of Suspected Cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Number of suspected cases should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class numberofrecoveredcases(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of Recovered Cases'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Number of recovered cases should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class numberofdeaths(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Number of Deaths'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Number of deaths should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')


MAPPING = {'unnamed0': uniqueidentifier, 'provincestate': provincestate, 'countryregion': countryregion, 'lastupdate': datetimeupdate, 'confirmed': numberofcases, 'suspected': numberofsuspectedcases, 'recovered': numberofrecoveredcases, 'death': numberofdeaths}"
"class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Province or State'
        self.valid_values = 'A string that represents the name of a province or state'
        self.format = 'The string should be in title case'
        self.examples = ['Hubei', 'Zhejiang', 'Guangdong', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.valid_values = 'A string that represents the name of a country or region recognized by the United Nations'
        self.format = 'The string should be in title case'
        self.examples = ['Mainland China', 'United States', 'Australia', 'Taiwan', 'Japan']

    def cast(self, val):
        return pycountry.countries.get(name=str(val).title())

class lastupdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of the last update'
        self.valid_values = ""A string that represents a date and time in the format 'M/D/YYYY HH:MM'""
        self.format = ""The string should be in the format 'M/D/YYYY HH:MM'""
        self.examples = ['1/25/2020 12:00 PM', '1/31/2020 19:00', '1/31/2020 14:00', '1/30/2020 21:30', '1/30/2020 11:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %H:%M')

class confirmedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of confirmed cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number should be an integer'
        self.examples = [7153, 537, 436, 352, 332]

    def cast(self, val):
        return int(val)

class suspectedcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of suspected cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number should be an integer'
        self.examples = [244, 22, 4, 1, 1]

    def cast(self, val):
        return int(val) if not math.isnan(val) else 0

class recoveredcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of recovered cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number should be an integer'
        self.examples = [169, 14, 10, 3, 3]

    def cast(self, val):
        return int(val) if not math.isnan(val) else 0

class deathcases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of death cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The number should be an integer'
        self.examples = [249, 2, 1, 1, 1]

    def cast(self, val):
        return int(val) if not math.isnan(val) else 0


MAPPING = {'provincestate': provincestate, 'countryregion': countryregion, 'lastupdate': lastupdate, 'confirmed': confirmedcases, 'suspected': suspectedcases, 'recovered': recoveredcases, 'death': deathcases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer or zero'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class provincestate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a province or state'
        self.valid_values = 'Name should be a string representing a valid province or state'
        self.format = 'Each word in the name should have the first letter capitalized'
        self.examples = ['Hubei', 'Zhejiang', 'Guangdong', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country or region'
        self.valid_values = 'Name should be a string representing a valid country or region'
        self.format = 'Each word in the name should have the first letter capitalized'
        self.examples = ['Mainland China', 'United States', 'Australia', 'Canada', 'Thailand']

    def cast(self, val):
        return str(val).title()

class lastupdate(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp of the last update'
        self.valid_range = [0, float('inf')]
        self.dtype = datetime
        self.format = ""Timestamp should be in '%m/%d/%Y %H:%M' format""
        self.examples = ['2/1/2020 23:33', '2/2/2020 2:13', '2/2/2020 1:23', '2/2/2020 0:53', '2/2/2020 1:53']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cases(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of cases should be a positive integer or zero'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'provincestate': provincestate, 'countryregion': countryregion, 'lastupdate': lastupdate, 'confirmed': cases, 'suspected': cases, 'recovered': cases, 'death': cases}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are integer values starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a province, state, or region'
        self.valid_values = 'Any valid province, state, or region name'
        self.format = 'Names should be a string with the first letter of each word capitalized'
        self.examples = ['Hubei', 'Guangdong', 'Zhejiang', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class country(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Any valid country name'
        self.format = 'Names should be a string with the first letter of each word capitalized'
        self.examples = ['Mainland China', 'United States', 'Australia', 'Canada', 'Thailand']

    def cast(self, val):
        country_info = CountryInfo(val)
        return country_info.name()

class datetimefield(NumericSemanticType):

    def __init__(self):
        self.description = 'Datetime field'
        self.valid_range = [0, float('inf')]
        self.dtype = str
        self.format = ""Datetime should be in the format 'MM/DD/YYYY HH:MM'""
        self.examples = ['2/5/20 16:43', '2/5/20 13:23', '2/5/20 15:13', '2/5/20 15:03', '2/5/20 15:23']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts should be stored as floats'
        self.examples = [16678.0, 895.0, 895.0, 764.0, 661.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts should be stored as floats'
        self.examples = [16678.0, 895.0, 895.0, 764.0, 661.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts should be stored as floats'
        self.examples = [16678.0, 895.0, 895.0, 764.0, 661.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class count(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of cases'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Counts should be stored as floats'
        self.examples = [16678.0, 895.0, 895.0, 764.0, 661.0]

    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')


MAPPING = {'unnamed0': index, 'provincestate': region, 'countryregion': country, 'lastupdate': datetimefield, 'confirmed': count, 'suspected': count, 'recovered': count, 'death': count}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index or Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes must be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class region(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Region (Province/State) within a country'
        self.valid_values = 'Region names should be strings'
        self.format = 'Region names should be capitalized words'
        self.examples = ['Hubei', 'Guangdong', 'Zhejiang', 'Henan', 'Hunan']

    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country names'
        self.valid_values = 'Country names should be strings'
        self.format = 'Country names should be capitalized words'
        self.examples = ['Mainland China', 'United States', 'Australia', 'Canada', 'Thailand']

    def cast(self, val):
        if pycountry.countries.get(name=str(val).title()):
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class datetimeupdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of the last update'
        self.valid_values = ""Dates should be in the format of 'mm/dd/yy hh:mm'""
        self.format = ""Dates should be in the format of 'mm/dd/yy hh:mm'""
        self.examples = ['2/5/20 16:43', '2/5/20 13:23', '2/5/20 15:13', '2/5/20 15:03', '2/5/20 15:23']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%y %H:%M')

class patientcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of patients (confirmed, suspected, recovered, deceased)'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient counts must be non-negative integers'
        self.examples = [1, 2, 10, 64, 16678]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid patient count')
        return num

class patientcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of patients (confirmed, suspected, recovered, deceased)'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient counts must be non-negative integers'
        self.examples = [1, 2, 10, 64, 16678]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid patient count')
        return num

class patientcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of patients (confirmed, suspected, recovered, deceased)'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient counts must be non-negative integers'
        self.examples = [1, 2, 10, 64, 16678]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid patient count')
        return num

class patientcount(NumericSemanticType):

    def __init__(self):
        self.description = 'Count of patients (confirmed, suspected, recovered, deceased)'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Patient counts must be non-negative integers'
        self.examples = [1, 2, 10, 64, 16678]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid patient count')
        return num


MAPPING = {'unnamed0': index, 'provincestate': region, 'countryregion': country, 'lastupdate': datetimeupdate, 'confirmed': patientcount, 'suspected': patientcount, 'recovered': patientcount, 'death': patientcount}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row number in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row numbers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid row number')
        return num

class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row number in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row numbers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid row number')
        return num

class countrycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country currency codes'
        self.valid_values = 'Country currency codes should be in the form of ISO 4217 currency codes'
        self.format = 'Country currency codes are three-letter codes'
        self.examples = ['USD', 'EUR', 'INR', 'GBP', 'BRL']

    def cast(self, val):
        val = str(val).upper()
        if val not in [currency.alpha_3 for currency in pycountry.currencies]:
            raise Exception('Invalid country currency code')
        return val

class exchangerate(NumericSemanticType):

    def __init__(self):
        self.description = 'Exchange rate of currency with respect to USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Exchange rate should be a non-negative floating point number'
        self.examples = [1.0, 1.195826, 0.01562, 1.324188, 0.32135]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid exchange rate')
        return round(num, 5)


MAPPING = {'unnamed01': rownumber, 'unnamed0': rownumber, 'origincountry': countrycode, 'exchangerate': exchangerate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be represented as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of an entity'
        self.valid_values = ""Gender can take values such as 'Male', 'Female', 'Attack Helicopter', etc.""
        self.format = 'Gender should be represented as a string'
        self.examples = ['Male', 'Attack Helicopter', 'Female', 'Attack helicopter', 'male']

    def cast(self, val):
        return str(val).lower()

class motivation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Motivation of an entity'
        self.valid_values = 'Motivation can take a variety of values'
        self.format = 'Motivation should be represented as a string'
        self.examples = ['Curiosity', 'Fun', 'learning', 'Learning', 'hobby']

    def cast(self, val):
        return str(val).lower()

class jobtitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Job title of an entity'
        self.valid_values = 'Job title can take a variety of values'
        self.format = 'Job title should be represented as a string'
        self.examples = ['Project Manager', 'Professor', 'Consultant', 'Actuary', 'Product Manager']

    def cast(self, val):
        return str(val).title()

class mltool(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Machine Learning tool for the next year'
        self.valid_values = 'ML tool can take a variety of values'
        self.format = 'ML tool should be represented as a string'
        self.examples = ['PyTorch', 'pytorch', 'Keras', 'Pytorch', 'Scala']

    def cast(self, val):
        return str(val).lower()

class mlmethod(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Machine Learning method for the next year'
        self.valid_values = 'ML method can take a variety of values'
        self.format = 'ML method should be represented as a string'
        self.examples = ['Reinforcement Learning', 'Reinforcement learning', 'GANs', 'reinforcement learning', 'GAN']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': index, 'genderfreeform': gender, 'kagglemotivationfreeform': motivation, 'currentjobtitlefreeform': jobtitle, 'mltoolnextyearfreeform': mltool, 'mlmethodnextyearfreeform': mlmethod}"
"class surveyquestionidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Survey Question ID'
        self.valid_range = [0, 289]
        self.dtype = int
        self.format = 'Survey Question ID should be a integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class surveyquestion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Survey Question'
        self.valid_values = 'Survey question is a string that represents a question asked in the survey'
        self.format = 'Survey question is a string'
        self.examples = ['GenderSelect', 'GenderFreeForm', 'Country', 'Age', 'EmploymentStatus']

    def cast(self, val):
        return str(val)

class respondentgroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Respondent Group'
        self.valid_values = ""Respondent group is a string that represents a group of respondents such as 'CodingWorker', 'All', 'Learners', 'Worker1', 'CodingWorker-NC'""
        self.format = 'Respondent group is a string'
        self.examples = ['CodingWorker', 'All', 'Learners', 'Worker1', 'CodingWorker-NC']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': surveyquestionidentifier, 'column': surveyquestion, 'asked': respondentgroup}"
"class schoolname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a School'
        self.valid_values = 'Name should be a string that represents a valid school name'
        self.format = 'Each word in the name should be capitalized'
        self.examples = ['Massachusetts Institute of Technology (MIT)', 'California Institute of Technology (CIT)', 'Harvey Mudd College', 'Polytechnic University of New York, Brooklyn', 'Cooper Union']

    def cast(self, val):
        return str(val).title()

class schooltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of a School'
        self.valid_values = ""Type of a School should be one of the following: ['State', 'Liberal Arts', 'Party', 'Engineering', 'Ivy League']""
        self.format = 'The school type should be a string with the first letter capitalized'
        self.examples = ['State', 'Liberal Arts', 'Party', 'Engineering', 'Ivy League']

    def cast(self, val):
        val = str(val).title()
        if val not in self.examples:
            raise Exception('Invalid school type')
        return val

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [42600.0, 41400.0, 45400.0, 44700.0, 44500.0]

    def cast(self, val):
        val = float(val.replace('$', '').replace(',', ''))
        return round(val, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [42600.0, 41400.0, 45400.0, 44700.0, 44500.0]

    def cast(self, val):
        val = float(val.replace('$', '').replace(',', ''))
        return round(val, 2)


MAPPING = {'schoolname': schoolname, 'schooltype': schooltype, 'startingmediansalary': salary, 'midcareermediansalary': salary}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Row index in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index must be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class schoolname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a School'
        self.valid_values = 'Name should be a string'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Stanford University', 'California Institute of Technology (CIT)', 'Harvey Mudd College', 'University of California, Berkeley', 'Occidental College']

    def cast(self, val):
        return str(val).title()

class region(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Region of the country'
        self.valid_values = ""Must be one of the following: 'Northeastern', 'Southern', 'Midwestern', 'Western', 'California'""
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Northeastern', 'Southern', 'Midwestern', 'Western', 'California']

    def cast(self, val):
        return str(val).title()

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [70400.0, 75500.0, 71800.0, 59900.0, 51900.0]

    def cast(self, val):
        num = float(val.replace(',', '').replace('$', ''))
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The salary in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples = [70400.0, 75500.0, 71800.0, 59900.0, 51900.0]

    def cast(self, val):
        num = float(val.replace(',', '').replace('$', ''))
        return round(num, 2)


MAPPING = {'unnamed0': rowindex, 'schoolname': schoolname, 'region': region, 'startingmediansalary': salary, 'midcareermediansalary': salary}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class major(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Undergraduate Major'
        self.valid_values = 'Major should be a string that represents an undergraduate major'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Accounting', 'Aerospace Engineering', 'Agriculture', 'Anthropology', 'Architecture']

    def cast(self, val):
        return str(val).title()

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [35000.0, 57700.0, 38800.0, 39900.0, 40800.0]

    def cast(self, val):
        num = float(val.replace('$', '').replace(',', ''))
        return round(num, 2)

class salary(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Salary in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [35000.0, 57700.0, 38800.0, 39900.0, 40800.0]

    def cast(self, val):
        num = float(val.replace('$', '').replace(',', ''))
        return round(num, 2)

class percentchange(NumericSemanticType):

    def __init__(self):
        self.description = 'Percent Change'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Percent change should be represented as a floating point number'
        self.examples = [67.6, 75.0, 68.8, 67.1, 84.6]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'undergraduatemajor': major, 'startingmediansalary': salary, 'midcareermediansalary': salary, 'percentchangefromstartingtomidcareersalary': percentchange}"
"class gameidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a Game'
        self.valid_values = 'An id should be a string consisting of alphanumeric characters'
        self.format = 'Alphanumeric strings'
        self.examples = ['XRuQPSzH', 'igSDFKv0', 'edYOVb5F', 'GstYv2mJ', 'CvakmVNb']

    def cast(self, val):
        return str(val)

class ratedgame(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class epochtimestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp in epoch milliseconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values representing time in epoch milliseconds'
        self.examples = [1376771633173, 1477547500000, 1496010000000, 1503170000000, 1504493143790]

    def cast(self, val):
        return int(val)

class epochtimestamp(NumericSemanticType):

    def __init__(self):
        self.description = 'Timestamp in epoch milliseconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values representing time in epoch milliseconds'
        self.examples = [1376771633173, 1477547500000, 1496010000000, 1503170000000, 1504493143790]

    def cast(self, val):
        return int(val)

class numberofturns(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Turns in a Game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values'
        self.examples = [37, 55, 79, 1, 349]

    def cast(self, val):
        return int(val)

class victorystatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Victory Status of a Game'
        self.valid_values = ""Must be one of the following: 'resign', 'mate', 'outoftime', 'draw'""
        self.format = 'Strings representing the victory status'
        self.examples = ['resign', 'mate', 'outoftime', 'draw']

    def cast(self, val):
        return str(val)

class winner(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Winner of a Game'
        self.valid_values = ""Must be one of the following: 'white', 'black', 'draw'""
        self.format = 'Strings representing the winner'
        self.examples = ['white', 'black', 'draw']

    def cast(self, val):
        return str(val)

class timecontrol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The increment code of the game'
        self.valid_values = ""String of the format 'x+y' where x and y are integers""
        self.format = ""Strings in the format 'x+y'""
        self.examples = ['10+0', '15+0', '15+15', '5+5', '5+8']

    def cast(self, val):
        return str(val)

class username(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Username of a Player'
        self.valid_values = 'Usernames must be alphanumeric strings'
        self.format = 'Alphanumeric strings'
        self.examples = ['taranga', 'chess-brahs', 'a_p_t_e_m_u_u', 'ssf7', 'bleda']

    def cast(self, val):
        return str(val)

class username(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Username of a Player'
        self.valid_values = 'Usernames must be alphanumeric strings'
        self.format = 'Alphanumeric strings'
        self.examples = ['taranga', 'chess-brahs', 'a_p_t_e_m_u_u', 'ssf7', 'bleda']

    def cast(self, val):
        return str(val)

class userrating(NumericSemanticType):

    def __init__(self):
        self.description = 'The rating of a user'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Integer values representing the user's rating""
        self.examples = [784, 1398, 1567, 1793, 2700]

    def cast(self, val):
        return int(val)

class userrating(NumericSemanticType):

    def __init__(self):
        self.description = 'The rating of a user'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Integer values representing the user's rating""
        self.examples = [784, 1398, 1567, 1793, 2700]

    def cast(self, val):
        return int(val)

class openingcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The opening code of a game'
        self.valid_values = ""Must be a string of the format 'X00' where X is a letter""
        self.format = ""Strings in the format 'X00'""
        self.examples = ['A00', 'C00', 'D00', 'B01', 'C41']

    def cast(self, val):
        return str(val)

class openingname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of the opening used in a game'
        self.valid_values = 'Must be a string representing the name of an opening'
        self.format = 'Strings representing the name of an opening'
        self.examples = [""Van't Kruijs Opening"", 'Sicilian Defense', 'Sicilian Defense: Bowdler Attack', 'Scotch Game', 'French Defense: Knight Variation']

    def cast(self, val):
        return str(val)

class openingply(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of moves in the opening phase'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values'
        self.examples = [3, 4, 6, 1, 28]

    def cast(self, val):
        return int(val)


MAPPING = {'id': gameidentifier, 'rated': ratedgame, 'createdat': epochtimestamp, 'lastmoveat': epochtimestamp, 'turns': numberofturns, 'victorystatus': victorystatus, 'winner': winner, 'incrementcode': timecontrol, 'whiteid': username, 'blackid': username, 'whiterating': userrating, 'blackrating': userrating, 'openingeco': openingcode, 'openingname': openingname, 'openingply': openingply}"
"class airlinecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'IATA airline code'
        self.valid_values = 'IATA airline codes consist of two-character airline designators'
        self.format = 'The codes should be uppercase strings'
        self.examples = ['UA', 'AA', 'US', 'F9', 'B6']

    def cast(self, val):
        return str(val).upper()

class airlinename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an airline'
        self.valid_values = 'Airline names should be strings'
        self.format = 'The names should be properly capitalized'
        self.examples = ['United Air Lines Inc.', 'American Airlines Inc.', 'US Airways Inc.', 'Frontier Airlines Inc.', 'JetBlue Airways']

    def cast(self, val):
        return str(val).title()


MAPPING = {'iatacode': airlinecode, 'airline': airlinename}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be an integer starting from 0 and incrementing by 1 for each subsequent row'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class iatacode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'IATA Airport Code'
        self.valid_values = 'IATA code should be a three-letter string'
        self.format = 'IATA code should be in upper case'
        self.examples = ['ABE', 'CWA', 'ABR', 'ABY', 'ACK']

    def cast(self, val):
        return str(val).upper()

class airportname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airport Name'
        self.valid_values = 'Airport name should be a string'
        self.format = 'Airport name should start with a capital letter'
        self.examples = ['Lehigh Valley International Airport', 'Central Wisconsin Airport', 'Aberdeen Regional Airport', 'Southwest Georgia Regional Airport', 'Nantucket Memorial Airport']

    def cast(self, val):
        return str(val).title()

class cityname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City Name'
        self.valid_values = 'City name should be a string'
        self.format = 'City name should start with a capital letter'
        self.examples = ['Allentown', 'Abilene', 'Albuquerque', 'Aberdeen', 'Albany']

    def cast(self, val):
        return str(val).title()

class statename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US State Name'
        self.valid_values = 'State name should be a two-letter string'
        self.format = 'State name should be in upper case'
        self.examples = ['PA', 'TX', 'NM', 'SD', 'GA']

    def cast(self, val):
        return str(val).upper()

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Name'
        self.valid_values = 'Country name should be a string'
        self.format = 'Country name should be in upper case'
        self.examples = ['USA']

    def cast(self, val):
        return str(val).upper()

class latitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be a floating point number'
        self.examples = [40.65236, 32.41132, 35.04022, 45.44906, 31.53552]

    def cast(self, val):
        num = float(val)
        return round(num, 5)

class longitude(NumericSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be a floating point number'
        self.examples = [-75.4404, -99.6819, -106.60919, -98.42183, -84.19447]

    def cast(self, val):
        num = float(val)
        return round(num, 5)


MAPPING = {'unnamed0': identifier, 'iatacode': iatacode, 'airport': airportname, 'city': cityname, 'state': statename, 'country': countryname, 'latitude': latitude, 'longitude': longitude}"
"class year(NumericSemanticType):

    def __init__(self):
        self.description = 'The year of an event'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Year should be formatted as a four digit integer'
        self.examples = [2015, 2000, 1999, 2020, 1889]

    def cast(self, val):
        num = int(val)
        if len(str(num)) != 4:
            raise Exception('Invalid year format')
        else:
            return num

class month(NumericSemanticType):

    def __init__(self):
        self.description = 'The month of an event'
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = 'Month should be formatted as an integer from 1 to 12'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 12:
            raise Exception('Invalid month')
        else:
            return num

class day(NumericSemanticType):

    def __init__(self):
        self.description = 'The day of an event'
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = 'Day should be formatted as an integer from 1 to 31'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 31:
            raise Exception('Invalid day')
        else:
            return num

class dayofweek(NumericSemanticType):

    def __init__(self):
        self.description = 'The day of the week of an event'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Day of week should be formatted as an integer from 1 (Monday) to 7 (Sunday)'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 1 or num > 7:
            raise Exception('Invalid day of week')
        else:
            return num

class airlinecode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airline codes'
        self.valid_values = 'Airline codes should be 2-letter or 3-letter codes defined by IATA'
        self.format = 'Airline codes should be uppercase'
        self.examples = ['WN', 'DL', 'EV', 'OO', 'AA']

    def cast(self, val):
        code = str(val).upper()
        if len(code) == 2 or len(code) == 3:
            return code
        else:
            raise Exception('Invalid airline code')

class flightnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of a flight'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Flight number should be formatted as an integer'
        self.examples = [1, 2336, 840, 258, 135]

    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid flight number')
        else:
            return num

class airportcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airport codes'
        self.valid_values = 'Airport codes should be 3-letter codes defined by IATA'
        self.format = 'Airport codes should be uppercase'
        self.examples = ['ATL', 'DFW', 'ORD', 'DEN', 'LAX']

    def cast(self, val):
        code = str(val).upper()
        if len(code) == 3:
            return code
        else:
            raise Exception('Invalid airport code')

class airportcode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Airport codes'
        self.valid_values = 'Airport codes should be 3-letter codes defined by IATA'
        self.format = 'Airport codes should be uppercase'
        self.examples = ['ATL', 'DFW', 'ORD', 'DEN', 'LAX']

    def cast(self, val):
        code = str(val).upper()
        if len(code) == 3:
            return code
        else:
            raise Exception('Invalid airport code')

class diverted(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid value for diverted')
        else:
            return num

class cancelled(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid value for cancelled')
        else:
            return num

class cancellationreason(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Reasons for flight cancellation'
        self.valid_values = ""Cancellation reasons should be 'A' for airline/carrier, 'B' for weather, 'C' for National Air System, or 'D' for security""
        self.format = 'Cancellation reasons should be a single uppercase letter'
        self.examples = ['A', 'B', 'C']

    def cast(self, val):
        reason = str(val).upper()
        if reason in ['A', 'B', 'C', 'D']:
            return reason
        else:
            raise Exception('Invalid cancellation reason')


MAPPING = {'year': year, 'month': month, 'day': day, 'dayofweek': dayofweek, 'airline': airlinecode, 'flightnumber': flightnumber, 'originairport': airportcode, 'destinationairport': airportcode, 'diverted': diverted, 'cancelled': cancelled, 'cancellationreason': cancellationreason}"
"class incidentidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Incident Identification Number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Incident ID should be a positive integer number.'
        self.examples = [92114, 165199, 270161, 364823, 1079952]

    def cast(self, val):
        if math.isnan(val):
            return val
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Incident Date'
        self.valid_values = ""Date should be in the format 'yyyy-mm-dd'""
        self.format = ""Date should be in the format 'yyyy-mm-dd'""
        self.examples = ['2014-09-06', '2014-01-01', '2015-01-01', '2014-07-05', '2015-07-04']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class state(CategoricalSemanticType):

    def __init__(self):
        self.description = 'US State'
        self.valid_values = 'State should be a valid US state'
        self.format = 'State should be the full name (not abbreviation) with the first letter capitalized'
        self.examples = ['California', 'Illinois', 'Texas', 'Florida', 'New York']

    def cast(self, val):
        if val.title() in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            return val.title()
        else:
            raise Exception('Invalid State')

class cityorcounty(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City or County'
        self.valid_values = 'City or County should be a valid city or county in the US'
        self.format = 'City or County should be a string with the first letter capitalized'
        self.examples = ['Chicago', 'Baltimore', 'Philadelphia', 'Washington', 'New Orleans']

    def cast(self, val):
        return str(val).title()

class address(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Address'
        self.valid_values = 'Address should be a valid address in the US'
        self.format = 'Address should be a string with the first letter of each word capitalized'
        self.examples = ['6000 N Terminal Pkwy', '2375 International Pkwy', '3400 E Sky Harbor Blvd', '8500 Peña Blvd', '2800 N Terminal Rd']

    def cast(self, val):
        return str(val).title()

class incidenturlfieldsmissing(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)


MAPPING = {'incidentid': incidentidentifier, 'date': date, 'state': state, 'cityorcounty': cityorcounty, 'address': address, 'incidenturlfieldsmissing': incidenturlfieldsmissing}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a list or a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers starting from 0 and incrementing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class posttitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a Reddit post'
        self.valid_values = 'Post titles should be strings, with a variable length'
        self.format = 'Strings of varying length'
        self.examples = ['Health Canada approves AstraZeneca COVID-19 vaccine', ""COVID-19 in Canada: 'Vaccination passports' a near certainty says bio-ethicist"", ""Coronavirus variants could fuel Canada's third wave"", 'Canadian government to extend COVID-19 emergency benefits', ""Canada: Pfizer is 'extremely committed' to meeting vaccine delivery targets""]

    def cast(self, val):
        return str(val)

class postscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of a Reddit post'
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = int
        self.format = 'Scores should be integers'
        self.examples = [-12, 1, 3, 7, 1187]

    def cast(self, val):
        return int(val)

class postidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'ID of a Reddit post'
        self.valid_values = 'Post IDs should be strings of 6 alphanumeric characters'
        self.format = 'Alphanumeric strings of length 6'
        self.examples = ['lt74vw', 'lsh0ij', 'lohlle', 'lnptv8', 'lkslm6']

    def cast(self, val):
        return str(val)

class numcomments(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of comments on a Reddit post'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of comments should be integers'
        self.examples = [0, 1, 595]

    def cast(self, val):
        return int(val)

class creationdate(NumericSemanticType):

    def __init__(self):
        self.description = 'Creation date of a Reddit post in Unix time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unix time represented as a floating point number'
        self.examples = [1389595375.0, 1554367455.75, 1569226482.0, 1584900970.5, 1640822169.0]

    def cast(self, val):
        return float(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of a Reddit post'
        self.valid_values = ""Timestamps should be strings in the format 'yyyy-mm-dd hh:mm:ss'""
        self.format = ""Timestamps should be strings in the format 'yyyy-mm-dd hh:mm:ss'""
        self.examples = ['2021-02-27 06:33:45', '2021-02-26 07:11:07', '2021-02-21 07:50:08', '2021-02-20 06:35:13', '2021-02-16 11:36:28']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')


MAPPING = {'unnamed0': index, 'title': posttitle, 'score': postscore, 'id': postidentifier, 'commsnum': numcomments, 'created': creationdate, 'timestamp': timestamp}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class signlanguagecategory(NumericSemanticType):

    def __init__(self):
        self.description = 'The label of a sign language gesture'
        self.valid_range = [0, 24]
        self.dtype = int
        self.format = 'The label should be an integer between 0 and 24'
        self.examples: list[int] = [6, 5, 10, 0, 3]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 24:
            raise Exception('Invalid label')
        return num


MAPPING = {'unnamed0': index, 'label': signlanguagecategory}"
"class imageidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The id of an image'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Image ids should be non-negative integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class signlanguageletter(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A letter in the sign language alphabet'
        self.valid_values = 'A letter in the sign language alphabet is represented by an integer between 0-24'
        self.format = 'Each letter should be represented as an integer'
        self.examples = [3, 6, 2, 2, 13]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': imageidentifier, 'label': signlanguageletter}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of rows in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class circuitidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of a circuit'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Circuit ID should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class circuitreference(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The reference name of a circuit'
        self.valid_values = 'Circuit reference should be a string'
        self.format = 'Circuit reference should be in lowercase and words separated by underscores'
        self.examples = ['albert_park', 'brands_hatch', 'bahrain', 'catalunya', 'istanbul']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')

class circuitname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a circuit'
        self.valid_values = 'Circuit name should be a string'
        self.format = 'Circuit name should be formatted with each word capitalized'
        self.examples = ['Albert Park Grand Prix Circuit', 'Brands Hatch', 'Bahrain International Circuit', 'Circuit de Barcelona-Catalunya', 'Istanbul Park']

    def cast(self, val):
        return str(val).title()

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The location of a circuit'
        self.valid_values = 'Location should be a string'
        self.format = 'Location should be formatted with each word capitalized'
        self.examples = ['Melbourne', 'Kuala Lumpur', 'Sakhir', 'Montmeló', 'Istanbul']

    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The country of a circuit'
        self.valid_values = 'Country should be a string'
        self.format = ""Country should be formatted as capitalized if it's a single word, all uppercase if it's an abbreviation""
        self.examples = ['Australia', 'Malaysia', 'Bahrain', 'Spain', 'Turkey']

    def cast(self, val):
        if len(val) > 2:
            return str(val).title()
        else:
            return str(val).upper()

class latitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""The latitude of a circuit's location""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = 'Latitude should be formatted as a floating point number'
        self.unit = 'In degrees'
        self.examples = [-37.8497, 2.76083, 26.0325, 41.57, 40.9517]

    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""The longitude of a circuit's location""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = 'Longitude should be formatted as a floating point number'
        self.unit = 'In degrees'
        self.examples = [144.968, 101.738, 50.5106, 2.26111, 29.405]

    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude')
        return num

class altitude(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""The altitude of a circuit's location""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Altitude should be formatted as an integer'
        self.unit = 'In meters'
        self.examples = [10, 18, 7, 109, 130]

    def cast(self, val):
        if str(val) == '\\N':
            return float('nan')
        else:
            return int(val)


MAPPING = {'unnamed0': index, 'circuitid': circuitidentifier, 'circuitref': circuitreference, 'name': circuitname, 'location': location, 'country': country, 'lat': latitude, 'lng': longitude, 'alt': altitude}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier is represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier is represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier is represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An identifier is represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class f1points(NumericSemanticType):

    def __init__(self):
        self.description = 'Points gained by a team in a Formula 1 race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points should be represented as a non-negative floating point number'
        self.examples = [14.0, 8.0, 9.0, 5.0, 2.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid points')
        else:
            return num

class f1status(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['\\N', 'D']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid status')
        else:
            return val


MAPPING = {'unnamed0': identifier, 'constructorresultsid': identifier, 'raceid': identifier, 'constructorid': identifier, 'points': f1points, 'status': f1status}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid id')
        return val

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid id')
        return val

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid id')
        return val

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Id should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid id')
        return val

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Score should be a non-negative floating point number'
        self.examples: list = [14.0, 8.0, 9.0, 5.0, 2.0]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid score')
        return val

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'Position'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Position should be a positive integer'
        self.examples: list = [1, 3, 2, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid position')
        return val

class positiontext(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Position Text'
        self.valid_values = 'Position Text should be a positive integer in string format'
        self.format = 'Position Text should be a positive integer in string format'
        self.examples = ['1', '3', '2', '4', '5']

    def cast(self, val):
        val = str(val)
        match_obj = re.match('^[1-9][0-9]*$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid position text')

class wins(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of Wins'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of Wins should be a non-negative integer'
        self.examples: list = [1, 0, 0, 0, 0]

    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid wins')
        return val


MAPPING = {'unnamed0': identifier, 'constructorstandingsid': identifier, 'raceid': identifier, 'constructorid': identifier, 'points': score, 'position': position, 'positiontext': positiontext, 'wins': wins}"
"class constructoridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a constructor in Formula 1 racing'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        val = int(val)
        if val < 1:
            raise Exception('Invalid constructor ID')
        return val

class constructorref(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Reference name for a constructor in Formula 1 racing'
        self.valid_values = 'Reference name should be a string'
        self.format = 'Names should be in lowercase with underscores replacing spaces'
        self.examples = ['mclaren', 'bmw_sauber', 'williams', 'renault', 'toro_rosso']

    def cast(self, val):
        return str(val).lower().replace(' ', '_')

class constructorname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Full name of a constructor in Formula 1 racing'
        self.valid_values = 'Names should be a string'
        self.format = 'Names should be capitalized properly'
        self.examples = ['McLaren', 'BMW Sauber', 'Williams', 'Renault', 'Toro Rosso']

    def cast(self, val):
        return str(val).title()

class constructorcountry(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Country of origin of a constructor in Formula 1 racing'
        self.valid_values = 'Names should be one of the recognized country names'
        self.format = 'Names should be capitalized properly'
        self.examples = ['British', 'German', 'French', 'Italian', 'American']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country')
        return country.name


MAPPING = {'constructorid': constructoridentifier, 'constructorref': constructorref, 'name': constructorname, 'nationality': constructorcountry}"
"class driverstandingsidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The id of the driver standings'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Driver standings id should be an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The id of the race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Race id should be an integer value'
        self.examples = [18, 18, 18, 18, 18]

    def cast(self, val):
        return int(val)

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The id of the driver'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Driver id should be an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class points(NumericSemanticType):

    def __init__(self):
        self.description = 'The points scored by the driver'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Points should be a floating point value'
        self.examples = [10.0, 8.0, 6.0, 5.0, 4.0]

    def cast(self, val):
        return float(val)

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'The position of the driver'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Position should be an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class positiontext(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The position of the driver in text'
        self.valid_values = 'Position text should be a string representation of an integer value'
        self.format = 'Position text should be a string representation of an integer value'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(val)

class wins(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of wins by the driver'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Wins should be an integer value'
        self.examples = [1, 0, 0, 0, 0]

    def cast(self, val):
        return int(val)


MAPPING = {'driverstandingsid': driverstandingsidentifier, 'raceid': raceidentifier, 'driverid': driveridentifier, 'points': points, 'position': position, 'positiontext': positiontext, 'wins': wins}"
"class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Driver ID'
        self.valid_range: list = [1, float('inf')]
        self.dtype: object = int
        self.format: str = 'Driver ID should be an integer greater than 0.'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val >= 1 and isinstance(val, int):
            return val
        else:
            raise Exception('Invalid Driver ID')

class driverref(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Driver reference'
        self.valid_values: str = 'Driver reference should be a string.'
        self.format: str = 'Driver reference should be in lower case.'
        self.examples: list = ['hamilton', 'heidfeld', 'rosberg', 'alonso', 'kovalainen']

    def cast(self, val):
        return str(val).lower()

class number(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Driver number'
        self.valid_values: str = ""Driver number can be a string of digits or '\\N'.""
        self.format: str = ""Driver number should be in digit format or '\\N' to represent missing value.""
        self.examples: list = ['44', '10', '\\N', '6', '4']

    def cast(self, val):
        if val == '\\N' or val.isdigit():
            return val
        else:
            raise Exception('Invalid driver number')

class code(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Driver code'
        self.valid_values: str = 'Driver code should be a string.'
        self.format: str = 'Driver code should be in upper case.'
        self.examples: list = ['HAM', 'HEI', 'ROS', 'ALO', 'KOV']

    def cast(self, val):
        return str(val).upper()

class forename(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Driver forename'
        self.valid_values: str = 'Driver forename should be a string.'
        self.format: str = 'Only the first letter of the forename should be capitalized.'
        self.examples: list = ['Lewis', 'Nick', 'Nico', 'Fernando', 'Heikki']

    def cast(self, val):
        return str(val).title()

class surname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Driver surname'
        self.valid_values: str = 'Driver surname should be a string.'
        self.format: str = 'Only the first letter of the surname should be capitalized.'
        self.examples: list = ['Hamilton', 'Heidfeld', 'Rosberg', 'Alonso', 'Kovalainen']

    def cast(self, val):
        return str(val).title()

class dob(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Date of birth'
        self.valid_range: list = []
        self.dtype: object = datetime
        self.format: str = ""Date of birth should be in the format 'YYYY-MM-DD'.""
        self.examples: list = ['1985-01-07', '1977-05-10', '1985-06-27', '1981-07-29', '1981-10-19']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class nationality(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Nationality'
        self.valid_values: str = 'Nationality should be a string and should be a valid country name.'
        self.format: str = 'Nationality should be capitalized.'
        self.examples: list = ['British', 'German', 'Spanish', 'Finnish', 'Italian']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid nationality')


MAPPING = {'driverid': driveridentifier, 'driverref': driverref, 'number': number, 'code': code, 'forename': forename, 'surname': surname, 'dob': dob, 'nationality': nationality}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each race.'
        self.valid_range = [1, 99999]
        self.dtype = int
        self.format = 'Race IDs are represented as integers.'
        self.examples = [841, 860, 880, 902, 933]

    def cast(self, val):
        return int(val)

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each driver.'
        self.valid_range = [1, 833]
        self.dtype = int
        self.format = 'Driver IDs are represented as integers.'
        self.examples = [20, 13, 67, 815, 833]

    def cast(self, val):
        return int(val)

class lap(NumericSemanticType):

    def __init__(self):
        self.description = 'The lap number in a race.'
        self.valid_range = [1, 78]
        self.dtype = int
        self.format = 'Lap numbers are represented as integers.'
        self.examples = [1, 14, 29, 44, 78]

    def cast(self, val):
        return int(val)

class position(NumericSemanticType):

    def __init__(self):
        self.description = 'The current position of a driver in a race.'
        self.valid_range = [1, 24]
        self.dtype = int
        self.format = 'Positions are represented as integers.'
        self.examples = [1, 5, 11, 16, 24]

    def cast(self, val):
        return int(val)

class laptime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The time taken to complete a lap.'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Lap times are represented as floating-point numbers, in the form of minutes and seconds (MM:SS).'
        self.unit = 'Time is measured in seconds.'
        self.examples = ['1:38.109', '1:33.006', '1:32.713', '1:32.803', '1:32.342']

    def cast(self, val):
        min_sec = val.split(':')
        return float(min_sec[0]) * 60 + float(min_sec[1])

class milliseconds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The time taken to complete a lap, in milliseconds.'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Lap times are represented as floating-point numbers.'
        self.unit = 'Time is measured in milliseconds.'
        self.examples = [98109, 93006, 92713, 92803, 92342]

    def cast(self, val):
        return float(val)


MAPPING = {'raceid': raceidentifier, 'driverid': driveridentifier, 'lap': lap, 'position': position, 'time': laptime, 'milliseconds': milliseconds}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of a Race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Race ID should be a positive integer'
        self.examples = [841, 950, 965, 980, 995]

    def cast(self, val):
        return int(val)

class driveridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID of a Driver'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Driver ID should be a positive integer'
        self.examples = [153, 30, 17, 4, 13]

    def cast(self, val):
        return int(val)

class lap(NumericSemanticType):

    def __init__(self):
        self.description = 'Lap in a Race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Lap should be a positive integer'
        self.examples = [1, 10, 20, 30, 40]

    def cast(self, val):
        return int(val)

class time(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time of a Pit Stop'
        self.valid_values = ""Time should be in the format 'HH:MM:SS'""
        self.format = 'Hour should be between 00 and 23, Minute and Second should be between 00 and 59'
        self.examples = ['17:05:23', '17:05:52', '17:20:48', '17:22:34', '17:24:10']

    def cast(self, val):
        return datetime.strptime(val, '%H:%M:%S').time()

class duration(NumericSemanticType):

    def __init__(self):
        self.description = 'Duration of a Pit Stop'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Duration should be a floating point number representing seconds'
        self.examples = [22.534, 22.745, 22.105, 23.477, 22.684]

    def cast(self, val):
        return round(float(val), 3)

class milliseconds(NumericSemanticType):

    def __init__(self):
        self.description = 'Duration of a Pit Stop in Milliseconds'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Duration should be a positive integer representing milliseconds'
        self.examples = [26898, 25021, 23426, 23251, 23842]

    def cast(self, val):
        return int(val)


MAPPING = {'raceid': raceidentifier, 'driverid': driveridentifier, 'lap': lap, 'time': time, 'duration': duration, 'milliseconds': milliseconds}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid ID')
        return int(val)

class raceposition(NumericSemanticType):

    def __init__(self):
        self.description = 'The position of a driver in a race'
        self.valid_range = [1, 28]
        self.dtype = int
        self.format = 'Position should be an integer between 1 and 28'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if val < 1 or val > 28 or (not isinstance(val, int)):
            raise Exception('Invalid position')
        return int(val)


MAPPING = {'unnamed0': identifier, 'qualifyid': identifier, 'raceid': identifier, 'driverid': identifier, 'constructorid': identifier, 'number': identifier, 'position': raceposition}"
"class raceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a specific race'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'RaceIDs should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the race'
        self.valid_range = [1950, float('inf')]
        self.dtype = int
        self.format = 'Years should be a positive integer starting from 1950'
        self.examples = [1950, 1960, 1970, 1980, 1990]

    def cast(self, val):
        return int(val)

class roundclass(NumericSemanticType):

    def __init__(self):
        self.description = 'Round of the race in a given year'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Round should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class circuitidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a specific circuit'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'CircuitIDs should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class grandprixname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Grand Prix'
        self.valid_values = 'Name should be a string'
        self.format = 'Capitalized first letter of each word'
        self.examples = ['Italian Grand Prix', 'British Grand Prix', 'Monaco Grand Prix', 'Belgian Grand Prix', 'German Grand Prix']

    def cast(self, val):
        return str(val).title()

class racetime(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Time of the race'
        self.valid_values = 'Time should be a string in the format HH:MM:SS'
        self.format = '24-hour time format (HH:MM:SS)'
        self.examples = ['12:00:00', '13:00:00', '14:00:00', '15:00:00', '16:00:00']

    def cast(self, val):
        if re.match('^\\d{2}:\\d{2}:\\d{2}$', val):
            return val
        else:
            raise Exception('Invalid time format')


MAPPING = {'raceid': raceidentifier, 'year': year, 'round': roundclass, 'circuitid': circuitidentifier, 'name': grandprixname, 'time': racetime}"
""
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        index = int(val)
        if index < 0:
            raise Exception('Invalid index')
        return index

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of the Formula 1 season'
        self.valid_range = [1950, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [1950, 1960, 1970, 1980, 1990]

    def cast(self, val):
        year = int(val)
        if year < 1950 or year > datetime.now().year:
            raise Exception('Invalid year')
        return year


MAPPING = {'unnamed0': index, 'year': year}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'IDs should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 10000, 90, 1000000]

    def cast(self, val):
        return int(val)

class gridposition(NumericSemanticType):

    def __init__(self):
        self.description = 'Grid position in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Grid positions should be formatted as positive integers, with no decimal places'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class ranking(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ranking position in a race'
        self.valid_values = 'Ranking positions must be integers stored as strings'
        self.format = 'Ranking positions should be formatted as positive integers, with no decimal places, stored as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(int(val))

class ranking(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ranking position in a race'
        self.valid_values = 'Ranking positions must be integers stored as strings'
        self.format = 'Ranking positions should be formatted as positive integers, with no decimal places, stored as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(int(val))

class ranking(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ranking position in a race'
        self.valid_values = 'Ranking positions must be integers stored as strings'
        self.format = 'Ranking positions should be formatted as positive integers, with no decimal places, stored as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(int(val))

class ranking(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Ranking position in a race'
        self.valid_values = 'Ranking positions must be integers stored as strings'
        self.format = 'Ranking positions should be formatted as positive integers, with no decimal places, stored as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def cast(self, val):
        return str(int(val))

class lapscompleted(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of laps completed in a race'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Number of laps should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 24, 18, 21]

    def cast(self, val):
        return int(val)

class racetime(NumericSemanticType):

    def __init__(self):
        self.description = 'Time taken to complete a race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Race times should be formatted as floating point numbers, with decimal places for milliseconds'
        self.examples = [25.38, 1.43, 7.502, 11.278, 24.111]

    def cast(self, val):
        if val == '\\N':
            return float('nan')
        else:
            time_parts = val.split(':')
            total_seconds = float(time_parts[0]) * 60 + float(time_parts[1])
            return total_seconds

class racetime(NumericSemanticType):

    def __init__(self):
        self.description = 'Time taken to complete a race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Race times should be formatted as floating point numbers, with decimal places for milliseconds'
        self.examples = [25.38, 1.43, 7.502, 11.278, 24.111]

    def cast(self, val):
        if val == '\\N':
            return float('nan')
        else:
            time_parts = val.split(':')
            total_seconds = float(time_parts[0]) * 60 + float(time_parts[1])
            return total_seconds

class racetime(NumericSemanticType):

    def __init__(self):
        self.description = 'Time taken to complete a race'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Race times should be formatted as floating point numbers, with decimal places for milliseconds'
        self.examples = [25.38, 1.43, 7.502, 11.278, 24.111]

    def cast(self, val):
        if val == '\\N':
            return float('nan')
        else:
            time_parts = val.split(':')
            total_seconds = float(time_parts[0]) * 60 + float(time_parts[1])
            return total_seconds


MAPPING = {'unnamed0': identifier, 'resultid': identifier, 'raceid': identifier, 'driverid': identifier, 'constructorid': identifier, 'number': identifier, 'statusid': identifier, 'grid': gridposition, 'position': ranking, 'positiontext': ranking, 'positionorder': ranking, 'fastestlap': ranking, 'laps': lapscompleted, 'time': racetime, 'milliseconds': racetime, 'fastestlaptime': racetime}"
"class raceresult(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Describes the status of a race participant at the end of the race'
        self.valid_values = ""Race result can be 'Finished', 'Disqualified', 'Accident', 'Collision', 'Engine' or 'Lap' status""
        self.format = 'Race results should be capitalized strings'
        self.examples = ['Finished', 'Disqualified', 'Accident', 'Collision', 'Engine']

    def cast(self, val):
        return str(val).title()


MAPPING = {'status': raceresult}"
"class restaurantname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Restaurant'
        self.valid_values = 'Name should be a string'
        self.format = 'Each word in the name should start with a capital letter'
        self.examples = ['Cafe Coffee Day', 'Onesta', 'Just Bake', 'Empire Restaurant', 'Five Star Chicken']

    def cast(self, val):
        return str(val).title()

class ordertype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).capitalize()
        else:
            raise Exception('Invalid value')

class ordertype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).capitalize()
        else:
            raise Exception('Invalid value')

class restaurantvote(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Votes for a Restaurant'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Votes should be an integer number'
        self.examples: list = [775, 787, 918, 88, 166]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid vote number')
        else:
            return num

class restaurantlocation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location of a Restaurant'
        self.valid_values = 'Location should be a string'
        self.format = 'Each word in the location should start with a capital letter'
        self.examples = ['BTM', 'HSR', 'Koramangala 5th Block', 'JP Nagar', 'Whitefield']

    def cast(self, val):
        return str(val).title()

class restauranttype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of a Restaurant'
        self.valid_values = 'Type should be a string'
        self.format = 'Each word in the type should start with a capital letter'
        self.examples = ['Quick Bites', 'Casual Dining', 'Cafe', 'Delivery', 'Dessert Parlor']

    def cast(self, val):
        return str(val).title()

class restaurantcuisine(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cuisine of a Restaurant'
        self.valid_values = 'Cuisine should be a string'
        self.format = 'Each word in the cuisine should start with a capital letter'
        self.examples = ['North Indian', 'Chinese, North Indian, Thai', 'Cafe, Mexican, Italian', 'South Indian, North Indian', 'North Indian, Rajasthani']

    def cast(self, val):
        return str(val).title()

class restaurantcost(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Approximate cost for two people at a Restaurant'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Cost should be an integer number'
        self.examples: list = [300, 400, 500, 200, 600]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid cost number')
        else:
            return num

class listedtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Listed type of a Restaurant'
        self.valid_values = 'Listed type should be a string'
        self.format = 'Each word in the listed type should start with a capital letter'
        self.examples = ['Delivery', 'Dine-out', 'Desserts', 'Cafes', 'Drinks & nightlife']

    def cast(self, val):
        return str(val).title()

class listedcity(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City where the restaurant is listed'
        self.valid_values = 'City should be a string'
        self.format = 'Each word in the city should start with a capital letter'
        self.examples = ['BTM', 'Koramangala 7th Block', 'Koramangala 5th Block', 'Koramangala 4th Block', 'Koramangala 6th Block']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': restaurantname, 'onlineorder': ordertype, 'booktable': ordertype, 'votes': restaurantvote, 'location': restaurantlocation, 'resttype': restauranttype, 'cuisines': restaurantcuisine, 'approxcostfortwopeople': restaurantcost, 'listedintype': listedtype, 'listedincity': listedcity}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class companyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a company'
        self.valid_values = 'Name should be a string'
        self.format = 'Company name should be capitalized'
        self.examples = ['Soma', 'Bonnat', 'Fresco', 'Pralus', 'A. Morin']

    def cast(self, val):
        return str(val).title()

class beanorigin(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Specific bean origin'
        self.valid_values = 'Origin should be a string'
        self.format = 'Origin name should be capitalized'
        self.examples = ['Madagascar', 'Peru', 'Ecuador', 'Dominican Republic', 'Venezuela']

    def cast(self, val):
        return str(val).title()

class reference(NumericSemanticType):

    def __init__(self):
        self.description = 'Reference'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Reference should be a whole number'
        self.examples = [1876, 1676, 1676, 1680, 1704]

    def cast(self, val):
        return int(val)

class reviewyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Review Year'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Review Year should be a whole number'
        self.examples = [2016, 2015, 2015, 2015, 2015]

    def cast(self, val):
        return int(val)

class cocoapercent(NumericSemanticType):

    def __init__(self):
        self.description = 'Cocoa Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Cocoa Percentage should be a floating point number'
        self.examples = [70.0, 75.0, 72.0, 65.0, 80.0]

    def cast(self, val):
        return float(val.strip('%'))

class companycountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Company Location'
        self.valid_values = 'Country name should be a string'
        self.format = 'Country name should be capitalized'
        self.examples = ['U.S.A.', 'France', 'Canada', 'U.K.', 'Italy']

    def cast(self, val):
        return str(val).title()

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating'
        self.valid_range = [0, 5]
        self.dtype = float
        self.format = 'Rating should be a floating point number'
        self.examples = [3.75, 2.75, 3.0, 3.5, 3.5]

    def cast(self, val):
        return float(val)

class beantype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of bean'
        self.valid_values = 'Bean type should be a string'
        self.format = 'Bean type should be capitalized'
        self.examples = ['Trinitario', 'Criollo', 'Forastero', 'Forastero (Nacional)']

    def cast(self, val):
        return str(val).title() if pd.notna(val) else float('nan')

class broadbeanorigin(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Broad bean origin'
        self.valid_values = 'Origin should be a string'
        self.format = 'Origin name should be capitalized'
        self.examples = ['Venezuela', 'Ecuador', 'Peru', 'Madagascar', 'Dominican Republic']

    def cast(self, val):
        return str(val).title() if pd.notna(val) else float('nan')


MAPPING = {'unnamed0': index, 'companymakerifknown': companyname, 'specificbeanoriginorbarname': beanorigin, 'ref': reference, 'reviewdate': reviewyear, 'cocoapercent': cocoapercent, 'companylocation': companycountry, 'rating': rating, 'beantype': beantype, 'broadbeanorigin': broadbeanorigin}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to uniquely identify each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val < 0:
            raise Exception('Invalid index')
        else:
            return int_val

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used to uniquely identify each row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        int_val = int(val)
        if int_val < 0:
            raise Exception('Invalid index')
        else:
            return int_val

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The name of the cryptocurrency'
        self.valid_values = 'Valid cryptocurrency names'
        self.format = 'The name should be properly capitalized'
        self.examples = ['Dogecoin']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The ticker symbol of the cryptocurrency'
        self.valid_values = 'Valid ticker symbols'
        self.format = 'The ticker symbol should be in upper case'
        self.examples = ['DOGE']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of the data point'
        self.valid_values = ""Valid dates should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Date should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2013-12-16 23:59:59', '2013-12-17 23:59:59', '2013-12-18 23:59:59', '2013-12-19 23:59:59', '2013-12-20 23:59:59']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with maximum 8 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0008658739970996, 0.0002887900045607, 0.0003616310132201, 0.0015196700114756, 0.0011429199948906]

    def cast(self, val):
        num = float(val)
        return round(num, 8)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with maximum 8 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0008658739970996, 0.0002887900045607, 0.0003616310132201, 0.0015196700114756, 0.0011429199948906]

    def cast(self, val):
        num = float(val)
        return round(num, 8)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with maximum 8 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0008658739970996, 0.0002887900045607, 0.0003616310132201, 0.0015196700114756, 0.0011429199948906]

    def cast(self, val):
        num = float(val)
        return round(num, 8)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with maximum 8 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0008658739970996, 0.0002887900045607, 0.0003616310132201, 0.0015196700114756, 0.0011429199948906]

    def cast(self, val):
        num = float(val)
        return round(num, 8)

class cryptocurrencyvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Volume of the cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number with no decimal places'
        self.unit = 'In USD'
        self.examples = [0.0, 253613.75, 5582480.0, 50982439.084, 69410680685.37]

    def cast(self, val):
        num = float(val)
        return round(num, 0)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market capitalization of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market capitalization should be formatted as a floating point number with two decimal places'
        self.unit = 'In USD'
        self.examples = [1509085.15965, 2169687.9813, 3188943.20963, 11150339.2183, 7284337.11836]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': date, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': cryptocurrencyvolume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'Name should be a valid cryptocurrency name'
        self.format = 'Name should be a string in uppercase'
        self.examples = ['EOS', 'BTC', 'ETH', 'XRP', 'LTC']

    def cast(self, val):
        return str(val).upper()

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'Name should be a valid cryptocurrency name'
        self.format = 'Name should be a string in uppercase'
        self.examples = ['EOS', 'BTC', 'ETH', 'XRP', 'LTC']

    def cast(self, val):
        return str(val).upper()

class cryptocurrencydate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of a cryptocurrency value'
        self.valid_values = ""Date should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Datetime object in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-07-02 23:59:59', '2017-07-04 23:59:59', '2017-07-06 23:59:59', '2017-07-07 23:59:59', '2017-07-08 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [2.877510070800781, 5.395969867706299, 4.191239833831787, 3.5234999656677246, 3.8674700260162354]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [2.877510070800781, 5.395969867706299, 4.191239833831787, 3.5234999656677246, 3.8674700260162354]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [2.877510070800781, 5.395969867706299, 4.191239833831787, 3.5234999656677246, 3.8674700260162354]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [2.877510070800781, 5.395969867706299, 4.191239833831787, 3.5234999656677246, 3.8674700260162354]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptocurrencyvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In units of the cryptocurrency'
        self.examples = [320452000.0, 414950016.0, 218559008.0, 124339000.0, 177463008.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptocurrencymarketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [0.0, 654930710.727, 550155156.975, 500626421.883, 568361515.182]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyname, 'date': cryptocurrencydate, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': cryptocurrencyvolume, 'marketcap': cryptocurrencymarketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of the Cryptocurrency'
        self.valid_values = 'Name should be a string that represents a known cryptocurrency'
        self.format = 'The name should be capitalized'
        self.examples = ['Ethereum', 'Bitcoin', 'Ripple', 'Litecoin', 'Tether']

    def cast(self, val):
        return str(val).title()

class cryptocurrenciesymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the Cryptocurrency'
        self.valid_values = 'Symbol should be a string that represents a known cryptocurrency'
        self.format = 'The symbol should be uppercase'
        self.examples = ['ETH', 'BTC', 'XRP', 'LTC', 'USDT']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Date should be a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2015-08-08 23:59:59', '2015-08-09 23:59:59', '2015-08-10 23:59:59', '2015-08-11 23:59:59', '2015-08-12 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [0.4829879999160766, 2.7988100051879883, 1.131410002708435, 0.8798099756240845, 0.7147250175476074]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [0.4829879999160766, 2.7988100051879883, 1.131410002708435, 0.8798099756240845, 0.7147250175476074]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [0.4829879999160766, 2.7988100051879883, 1.131410002708435, 0.8798099756240845, 0.7147250175476074]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [0.4829879999160766, 2.7988100051879883, 1.131410002708435, 0.8798099756240845, 0.7147250175476074]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of the cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In number of coins'
        self.examples = [674188.0, 532170.0, 405283.0, 1463100.0, 2150620.0]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of the cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market Cap should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [32213626.1748, 45486894.2408, 64569288.4328, 73645010.9863, 1135576401.195]

    def cast(self, val):
        num = float(val)
        return round(num, 6)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrenciesymbol, 'date': date, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of the cryptocurrency'
        self.valid_values = 'Name should be a string representing the official name of a cryptocurrency'
        self.format = 'The name should be capitalized'
        self.examples = ['Bitcoin', 'Ethereum', 'Litecoin', 'Ripple', 'IOTA']

    def cast(self, val):
        return str(val).capitalize()

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the cryptocurrency'
        self.valid_values = 'Symbol should be a string representing the official symbol of a cryptocurrency'
        self.format = 'The symbol should be capitalized'
        self.examples = ['BTC', 'ETH', 'LTC', 'XRP', 'MIOTA']

    def cast(self, val):
        return str(val).upper()

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of the data entry'
        self.valid_values = ""Date should be a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""The date should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-06-14 23:59:59', '2017-06-15 23:59:59', '2017-06-16 23:59:59', '2017-06-17 23:59:59', '2017-06-18 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [0.6061959862709045, 0.5282840132713318, 0.353285014629364, 0.4267620146274566, 0.4205969870090484]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [0.6061959862709045, 0.5282840132713318, 0.353285014629364, 0.4267620146274566, 0.4205969870090484]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [0.6061959862709045, 0.5282840132713318, 0.353285014629364, 0.4267620146274566, 0.4205969870090484]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [0.6061959862709045, 0.5282840132713318, 0.353285014629364, 0.4267620146274566, 0.4205969870090484]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Volume of the cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In units of the cryptocurrency'
        self.examples = [14194900.0, 10300400.0, 6920690.0, 3100660.0, 2514450.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market capitalization of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [1470138039.16, 1010806762.25, 1141711520.45, 1167141443.01, 1128105719.72]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': datetimeclass, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of the Cryptocurrency'
        self.valid_values = 'Name should be a string and one of the existing Cryptocurrencies'
        self.format = 'Cryptocurrency name should be in title case'
        self.examples = ['Litecoin', 'Bitcoin', 'Ethereum', 'Ripple', 'Stellar']

    def cast(self, val):
        return str(val).title()

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of the Cryptocurrency'
        self.valid_values = 'Symbol should be a string and one of the existing Cryptocurrency symbols'
        self.format = 'Cryptocurrency symbol should be in uppercase'
        self.examples = ['LTC', 'BTC', 'ETH', 'XRP', 'XLM']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the data entry'
        self.valid_values = 'Date should be a valid datetime string'
        self.format = ""Date should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2013-04-29 23:59:59', '2013-04-30 23:59:59', '2013-05-01 23:59:59', '2013-05-02 23:59:59', '2013-05-03 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [4.573599815368652, 4.572380065917969, 4.356860160827637, 4.039299964904785, 3.4536099433898926]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [4.573599815368652, 4.572380065917969, 4.356860160827637, 4.039299964904785, 3.4536099433898926]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [4.573599815368652, 4.572380065917969, 4.356860160827637, 4.039299964904785, 3.4536099433898926]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [4.573599815368652, 4.572380065917969, 4.356860160827637, 4.039299964904785, 3.4536099433898926]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of the Cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.unit = 'In number of coins'
        self.examples = [0.0, 10.0, 100.0, 1000.0, 10000.0]

    def cast(self, val):
        return float(val)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of the Cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market Cap should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [75388963.842, 74020917.9127, 65604596.3778, 58287978.8404, 52694847.0708]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': date, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index that represents the position of an entity in a list'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise ValueError('Invalid index')
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index that represents the position of an entity in a list'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise ValueError('Invalid index')
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Names should be well-known cryptocurrencies'
        self.format = 'Names should be capitalized'
        self.examples = ['Bitcoin', 'Ethereum', 'Litecoin', 'Monero', 'Ripple']

    def cast(self, val):
        return str(val).title()

class cryptosymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Cryptocurrency'
        self.valid_values = 'Symbols should be well-known cryptocurrency symbols'
        self.format = 'Symbols should be uppercase'
        self.examples = ['BTC', 'ETH', 'LTC', 'XMR', 'XRP']

    def cast(self, val):
        return str(val).upper()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp representing a specific point in time'
        self.valid_values = ""Timestamps should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Timestamps should be strings'
        self.examples = ['2014-05-22 23:59:59', '2014-05-23 23:59:59', '2014-05-24 23:59:59', '2014-05-25 23:59:59', '2014-05-26 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [2.18887996673584, 3.4343700408935547, 4.01423978805542, 4.04302978515625, 3.762350082397461]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid price')
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [2.18887996673584, 3.4343700408935547, 4.01423978805542, 4.04302978515625, 3.762350082397461]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid price')
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [2.18887996673584, 3.4343700408935547, 4.01423978805542, 4.04302978515625, 3.762350082397461]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid price')
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [2.18887996673584, 3.4343700408935547, 4.01423978805542, 4.04302978515625, 3.762350082397461]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid price')
        return float(val)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.unit = 'In USD'
        self.examples = [132918.0, 266852.0, 248028.0, 283545.0, 220148.0]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid volume')
        return float(val)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a floating point number'
        self.unit = 'In USD'
        self.examples = [1855607.93064, 2692180.34199, 3456657.53448, 2993339.41728, 2946133.3216]

    def cast(self, val):
        if val < 0 or not isinstance(val, float):
            raise ValueError('Invalid market cap')
        return float(val)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptosymbol, 'date': timestamp, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index number for the rows in the table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index number for the rows in the table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The name of the cryptocurrency'
        self.valid_values = 'The name should be a valid cryptocurrency name'
        self.format = 'The name should be a string'
        self.examples = ['NEM']

    def cast(self, val):
        return str(val)

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The symbol of the cryptocurrency'
        self.valid_values = 'The symbol should be a valid cryptocurrency symbol'
        self.format = 'The symbol should be a string'
        self.examples = ['XEM']

    def cast(self, val):
        return str(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The date and time'
        self.valid_values = ""The date and time should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'The date and time should be a string'
        self.examples = ['2015-04-02 23:59:59', '2015-04-03 23:59:59', '2015-04-04 23:59:59', '2015-04-05 23:59:59', '2015-04-06 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with at least 5 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0003230780130252, 0.0003296759969089, 0.0003182360087521, 0.0002826320123858, 0.0002986830077134]

    def cast(self, val):
        return round(float(val), 5)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with at least 5 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0003230780130252, 0.0003296759969089, 0.0003182360087521, 0.0002826320123858, 0.0002986830077134]

    def cast(self, val):
        return round(float(val), 5)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with at least 5 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0003230780130252, 0.0003296759969089, 0.0003182360087521, 0.0002826320123858, 0.0002986830077134]

    def cast(self, val):
        return round(float(val), 5)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with at least 5 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0003230780130252, 0.0003296759969089, 0.0003182360087521, 0.0002826320123858, 0.0002986830077134]

    def cast(self, val):
        return round(float(val), 5)

class volumeusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [28549.400390625, 20677.900390625, 23550.19921875, 26800.19921875, 22511.5]

    def cast(self, val):
        return float(val)

class marketcapusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market cap in USD of the cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [2823533.99969, 2792456.99969, 2488769.99972, 2087387.99977, 2598353.99971]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': datetimeclass, 'high': priceusd, 'low': priceusd, 'open': priceusd, 'close': priceusd, 'volume': volumeusd, 'marketcap': marketcapusd}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Name should be a string representing a valid cryptocurrency'
        self.format = 'All characters should be capitalized'
        self.examples = ['Polkadot']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticker symbol of a Cryptocurrency'
        self.valid_values = 'Ticker should be a string representing a valid cryptocurrency ticker'
        self.format = 'All characters should be in uppercase'
        self.examples = ['DOT']

    def cast(self, val):
        return str(val).upper()

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = ""Datetime should be in the format of 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Datetime should be formatted as a string in the format of 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-08-21 23:59:59', '2020-08-22 23:59:59', '2020-08-23 23:59:59', '2020-08-24 23:59:59', '2020-08-25 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with up to 11 decimal places'
        self.unit = 'In USD'
        self.examples = [3.09009266777, 4.51061338901, 4.48705836489, 4.78315823996, 5.76077535015]

    def cast(self, val):
        num = float(val)
        return round(num, 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with up to 11 decimal places'
        self.unit = 'In USD'
        self.examples = [3.09009266777, 4.51061338901, 4.48705836489, 4.78315823996, 5.76077535015]

    def cast(self, val):
        num = float(val)
        return round(num, 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with up to 11 decimal places'
        self.unit = 'In USD'
        self.examples = [3.09009266777, 4.51061338901, 4.48705836489, 4.78315823996, 5.76077535015]

    def cast(self, val):
        num = float(val)
        return round(num, 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with up to 11 decimal places'
        self.unit = 'In USD'
        self.examples = [3.09009266777, 4.51061338901, 4.48705836489, 4.78315823996, 5.76077535015]

    def cast(self, val):
        num = float(val)
        return round(num, 11)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number with up to 6 decimal places'
        self.unit = 'In USD'
        self.examples = [49313136.825242, 485801095.84575, 320749483.243806, 407690170.881454, 898847538.456415]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market capitalization should be formatted as a floating point number with up to 3 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0, 4191878370.217, 14873760069.721, 30272529781.718, 44973584932.56]

    def cast(self, val):
        num = float(val)
        return round(num, 3)


MAPPING = {'unnamed0': identifier, 'sno': identifier, 'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': datetimeclass, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a record in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a record in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index')
        return num

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'The name must be an existing cryptocurrency'
        self.format = 'The name should be a string'
        self.examples = ['Solana', 'Bitcoin', 'Ethereum', 'Ripple', 'Litecoin']

    def cast(self, val):
        return str(val)

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a cryptocurrency'
        self.valid_values = 'The symbol must correspond to an existing cryptocurrency'
        self.format = 'The symbol should be a string'
        self.examples = ['SOL', 'BTC', 'ETH', 'XRP', 'LTC']

    def cast(self, val):
        return str(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime string'
        self.valid_values = ""Datetime string in the format of 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Datetime string in the format of 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-04-11 23:59:59', '2020-04-12 23:59:59', '2020-04-13 23:59:59', '2020-04-14 23:59:59', '2020-04-15 23:59:59']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            return val
        except ValueError:
            raise Exception('Invalid datetime format')

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [1.04907270025, 0.956669837035, 0.891602782787, 0.796472356866, 0.704963548631]

    def cast(self, val):
        num = float(val)
        return num

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [1.04907270025, 0.956669837035, 0.891602782787, 0.796472356866, 0.704963548631]

    def cast(self, val):
        num = float(val)
        return num

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [1.04907270025, 0.956669837035, 0.891602782787, 0.796472356866, 0.704963548631]

    def cast(self, val):
        num = float(val)
        return num

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [1.04907270025, 0.956669837035, 0.891602782787, 0.796472356866, 0.704963548631]

    def cast(self, val):
        num = float(val)
        return num

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of trading'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.examples = [43862443.7931816, 38736897.0186422, 18211285.4666889, 16747614.1218552, 13075275.285934]

    def cast(self, val):
        num = float(val)
        return num

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'The market capitalization'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market capitalization should be a floating point number'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        num = float(val)
        return num


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': datetimeclass, 'high': priceusd, 'low': priceusd, 'open': priceusd, 'close': priceusd, 'volume': volume, 'marketcap': marketcap}"
"class recordindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value of a record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Index value cannot be negative')
        return num

class recordindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Index value of a record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Index value cannot be negative')
        return num

class currencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'Name should be a string that represents the name of a cryptocurrency'
        self.format = 'The name of the cryptocurrency should be title-cased'
        self.examples = ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Cardano']

    def cast(self, val):
        return str(val).title()

class currencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a cryptocurrency'
        self.valid_values = 'Symbol should be a string that represents the symbol of a cryptocurrency'
        self.format = 'The symbol of the cryptocurrency should be upper-cased'
        self.examples = ['BTC', 'ETH', 'XRP', 'LTC', 'ADA']

    def cast(self, val):
        return str(val).upper()

class datetimestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of data capture'
        self.valid_values = ""Timestamp should be a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Timestamps should be formatted as datetime objects'
        self.examples = ['2014-08-06 23:59:59', '2014-08-07 23:59:59', '2014-08-08 23:59:59', '2014-08-09 23:59:59', '2014-08-10 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [0.0034024699125438, 0.0030419500544667, 0.0032433199230581, 0.0037104899529367, 0.0076201697811484]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [0.0034024699125438, 0.0030419500544667, 0.0032433199230581, 0.0037104899529367, 0.0076201697811484]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [0.0034024699125438, 0.0030419500544667, 0.0032433199230581, 0.0037104899529367, 0.0076201697811484]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.unit = 'In USD'
        self.examples = [0.0034024699125438, 0.0030419500544667, 0.0032433199230581, 0.0037104899529367, 0.0076201697811484]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')

class cryptocurrencyvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Volume of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.unit = 'In USD'
        self.examples = [35819.80078125, 142864.0, 93707.796875, 233579.0, 352737.0]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')

class cryptocurrencymarketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market cap of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a floating point number'
        self.unit = 'In USD'
        self.examples = [966369.516387, 1079147.57674, 1260109.49815, 1645185.47325, 2216011.86288]

    def cast(self, val):
        num = float(val)
        return round(num, 8) if not math.isnan(num) else float('nan')


MAPPING = {'unnamed0': recordindex, 'sno': recordindex, 'name': currencyname, 'symbol': currencysymbol, 'date': datetimestamp, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': cryptocurrencyvolume, 'marketcap': cryptocurrencymarketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique index or identifier for each row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indices should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique index or identifier for each row in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indices should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Names of different cryptocurrencies'
        self.valid_values = 'Cryptocurrency names should be strings and fit one of the existing cryptocurrencies'
        self.format = 'Cryptocurrency names should be capitalized strings'
        self.examples = ['Bitcoin', 'Ethereum', 'Tether', 'Ripple', 'Litecoin']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticker symbols of different cryptocurrencies'
        self.valid_values = 'Cryptocurrency ticker symbols should be strings and fit one of the existing cryptocurrencies'
        self.format = 'Cryptocurrency ticker symbols should be upper case strings'
        self.examples = ['BTC', 'ETH', 'USDT', 'XRP', 'LTC']

    def cast(self, val):
        return str(val).upper()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Timestamps in the format 'YYYY-MM-DD HH:MM:SS'""
        self.valid_values = ""Timestamps should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Timestamps should be strings in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2015-02-26 23:59:59', '2015-03-02 23:59:59', '2015-03-03 23:59:59', '2015-03-06 23:59:59', '2015-03-07 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units) with up to 15 decimal places'
        self.unit = 'In USD'
        self.examples = [1.0, 1.003, 1.011, 1.2123199701309204, 0.6062290072441101]

    def cast(self, val):
        return round(float(val), 15)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units) with up to 15 decimal places'
        self.unit = 'In USD'
        self.examples = [1.0, 1.003, 1.011, 1.2123199701309204, 0.6062290072441101]

    def cast(self, val):
        return round(float(val), 15)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units) with up to 15 decimal places'
        self.unit = 'In USD'
        self.examples = [1.0, 1.003, 1.011, 1.2123199701309204, 0.6062290072441101]

    def cast(self, val):
        return round(float(val), 15)

class priceusd(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units) with up to 15 decimal places'
        self.unit = 'In USD'
        self.examples = [1.0, 1.003, 1.011, 1.2123199701309204, 0.6062290072441101]

    def cast(self, val):
        return round(float(val), 15)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The trading volume of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number with up to 2 decimal places'
        self.examples = [0.1104969978332519, 985801.75, 2507339904.0, 24603177861.519, 279067455600.19]

    def cast(self, val):
        return round(float(val), 2)

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'The market cap of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a floating point number with up to 2 decimal places'
        self.examples = [152527.2164, 6951589.796, 2021074415.645, 4133153930.656, 62746499836.1]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': timestamp, 'high': priceusd, 'low': priceusd, 'open': priceusd, 'close': priceusd, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index representing the row number of a data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index representing the row number of a data entry'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Cryptocurrency name should be a string representing a valid cryptocurrency'
        self.format = 'First letter capitalized, the rest lower case'
        self.examples = ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Tron']

    def cast(self, val):
        return str(val).title()

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Cryptocurrency'
        self.valid_values = 'Cryptocurrency symbol should be a string representing a valid cryptocurrency symbol'
        self.format = 'All capital letters'
        self.examples = ['BTC', 'ETH', 'XRP', 'LTC', 'TRX']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and time of data entry'
        self.valid_values = 'Date and time should follow the format: YYYY-MM-DD HH:MM:SS'
        self.format = 'YYYY-MM-DD HH:MM:SS'
        self.examples = ['2017-09-14 23:59:59', '2017-09-15 23:59:59', '2017-09-16 23:59:59', '2017-09-17 23:59:59', '2017-09-18 23:59:59']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number'
        self.examples = [0.1, 1.23, 123.45, 1234.56, 12345.67]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid price')
        return round(num, 9)

class cryptocurrencyprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number'
        self.examples = [0.1, 1.23, 123.45, 1234.56, 12345.67]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid price')
        return round(num, 9)

class cryptocurrencyprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number'
        self.examples = [0.1, 1.23, 123.45, 1234.56, 12345.67]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid price')
        return round(num, 9)

class cryptocurrencyprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number'
        self.examples = [0.1, 1.23, 123.45, 1234.56, 12345.67]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid price')
        return round(num, 9)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a non-negative floating point number'
        self.examples = [1000.0, 5000.0, 10000.0, 50000.0, 100000.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid volume')
        return round(num, 2)

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a non-negative floating point number'
        self.examples = [1000000.0, 5000000.0, 10000000.0, 50000000.0, 100000000.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid market cap')
        return round(num, 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': date, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used for ordering'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer index starting from 0 or 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used for ordering'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An integer index starting from 0 or 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency Name'
        self.valid_values = 'Valid names of cryptocurrencies'
        self.format = 'A string representing the name of a cryptocurrency'
        self.examples = ['USD Coin']

    def cast(self, val):
        return str(val)

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency Symbol'
        self.valid_values = 'Valid symbols of cryptocurrencies'
        self.format = 'A string representing the symbol of a cryptocurrency'
        self.examples = ['USDC']

    def cast(self, val):
        return str(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = 'Valid timestamps'
        self.format = ""A string representing a timestamp in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2018-10-09 23:59:59', '2018-10-10 23:59:59', '2018-10-11 23:59:59', '2018-10-12 23:59:59', '2018-10-13 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Cryptocurrency Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the price of a cryptocurrency in USD'
        self.unit = 'USD'
        self.examples = [1.00833, 1.01908, 1.03123, 1.01871, 1.02029]

    def cast(self, val):
        return round(float(val), 5)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Cryptocurrency Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the price of a cryptocurrency in USD'
        self.unit = 'USD'
        self.examples = [1.00833, 1.01908, 1.03123, 1.01871, 1.02029]

    def cast(self, val):
        return round(float(val), 5)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Cryptocurrency Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the price of a cryptocurrency in USD'
        self.unit = 'USD'
        self.examples = [1.00833, 1.01908, 1.03123, 1.01871, 1.02029]

    def cast(self, val):
        return round(float(val), 5)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Cryptocurrency Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the price of a cryptocurrency in USD'
        self.unit = 'USD'
        self.examples = [1.00833, 1.01908, 1.03123, 1.01871, 1.02029]

    def cast(self, val):
        return round(float(val), 5)

class tradingvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Trading Volume'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the trading volume of a cryptocurrency'
        self.unit = 'Volume'
        self.examples = [108803.0, 711783.0, 4177290.0, 1322240.0, 698507.0]

    def cast(self, val):
        return round(float(val), 1)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market Cap'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A float representing the market capitalization of a cryptocurrency in USD'
        self.unit = 'USD'
        self.examples = [0.0, 359259507.884, 483846022.39, 2807819535.8, 25791977537.21]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': timestamp, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': tradingvolume, 'marketcap': marketcap}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique row index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid row index')
        return int(val)

class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique row index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid row index')
        return int(val)

class cryptocurrency(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name or symbol of a cryptocurrency'
        self.valid_values = 'Cryptocurrency name should be a string that is listed in CoinMarketCap'
        self.format = 'Cryptocurrency name should be capitalized and symbol should be in uppercase'
        self.examples = ['Bitcoin', 'Ethereum', 'XRP', 'Litecoin', 'Bitcoin Cash', 'UNI']

    def cast(self, val):
        return str(val).strip().upper()

class cryptocurrency(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name or symbol of a cryptocurrency'
        self.valid_values = 'Cryptocurrency name should be a string that is listed in CoinMarketCap'
        self.format = 'Cryptocurrency name should be capitalized and symbol should be in uppercase'
        self.examples = ['Bitcoin', 'Ethereum', 'XRP', 'Litecoin', 'Bitcoin Cash', 'UNI']

    def cast(self, val):
        return str(val).strip().upper()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of the cryptocurrency value'
        self.valid_values = ""Timestamp should fit the format: '%Y-%m-%d %H:%M:%S'""
        self.format = ""Timestamp should be a string formatted as '%Y-%m-%d %H:%M:%S'""
        self.examples = ['2020-09-18 23:59:59', '2020-09-19 23:59:59', '2020-09-20 23:59:59', '2020-09-21 23:59:59', '2020-09-22 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [8.43853740886, 7.44327478773, 6.05032562987, 5.62215475892, 4.5540924279]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid price')
        return round(float(val), 8)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [8.43853740886, 7.44327478773, 6.05032562987, 5.62215475892, 4.5540924279]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid price')
        return round(float(val), 8)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [8.43853740886, 7.44327478773, 6.05032562987, 5.62215475892, 4.5540924279]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid price')
        return round(float(val), 8)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [8.43853740886, 7.44327478773, 6.05032562987, 5.62215475892, 4.5540924279]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid price')
        return round(float(val), 8)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.unit = 'In units of the cryptocurrency'
        self.examples = [6061110197.71016, 2447471305.09283, 1554143599.05737, 1329464490.16774, 816282684.413704]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid volume')
        return round(float(val), 5)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market cap in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [668111645.023516, 554507578.80579, 507985734.869998, 413239181.608882, 378276197.429285]

    def cast(self, val):
        if pd.isnull(val) or math.isnan(val) or val < 0:
            raise Exception('Invalid market cap')
        return round(float(val), 6)


MAPPING = {'unnamed0': rowindex, 'sno': rowindex, 'name': cryptocurrency, 'symbol': cryptocurrency, 'date': timestamp, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class cryptosymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Cryptocurrency'
        self.valid_values = 'Cryptocurrency symbol should be a string that identifies the cryptocurrency'
        self.format = 'Cryptocurrency symbols are usually all uppercase'
        self.examples = ['BTC', 'ETH', 'LTC', 'XRP', 'WBTC']

    def cast(self, val):
        return str(val).upper()

class cryptoname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Cryptocurrency name should be a string that identifies the cryptocurrency'
        self.format = 'Cryptocurrency names are usually capitalized words'
        self.examples = ['Bitcoin', 'Ethereum', 'Litecoin', 'Ripple', 'Wrapped Bitcoin']

    def cast(self, val):
        return str(val).title()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Date and time in the format 'YYYY-MM-DD HH:MM:SS'""
        self.valid_values = ""Timestamp should be a string that follows the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Timestamps should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2019-01-31 23:59:59', '2019-02-12 23:59:59', '2019-02-13 23:59:59', '2019-02-02 23:59:59', '2019-02-03 23:59:59']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class cryptoprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptoprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptoprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cryptoprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.unit = 'In units of the cryptocurrency'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market cap of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)


MAPPING = {'symbol': cryptosymbol, 'name': cryptoname, 'date': timestamp, 'high': cryptoprice, 'low': cryptoprice, 'open': cryptoprice, 'close': cryptoprice, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the entry'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Index of the entry'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Index should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Name of the cryptocurrency'
        self.valid_values: str = 'Names of valid cryptocurrencies'
        self.format: str = 'Names should be strings'
        self.examples: list = ['XRP', 'BTC', 'ETH', 'LTC', 'BCH']

    def cast(self, val):
        return str(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'Name of the cryptocurrency'
        self.valid_values: str = 'Names of valid cryptocurrencies'
        self.format: str = 'Names should be strings'
        self.examples: list = ['XRP', 'BTC', 'ETH', 'LTC', 'BCH']

    def cast(self, val):
        return str(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Date and time'
        self.valid_values: str = ""Values should be of the form 'YYYY-MM-DD HH:MM:SS'""
        self.format: str = ""Values should be strings of the form 'YYYY-MM-DD HH:MM:SS'""
        self.examples: list = ['2013-08-05 23:59:59', '2013-08-06 23:59:59', '2013-08-07 23:59:59', '2013-08-08 23:59:59', '2013-08-09 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [0.0058747800067067, 0.005636760033667, 0.0046692299656569, 0.0043966500088572, 0.00425725011155]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [0.0058747800067067, 0.005636760033667, 0.0046692299656569, 0.0043966500088572, 0.00425725011155]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [0.0058747800067067, 0.005636760033667, 0.0046692299656569, 0.0043966500088572, 0.00425725011155]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The price of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [0.0058747800067067, 0.005636760033667, 0.0046692299656569, 0.0043966500088572, 0.00425725011155]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)

class cryptocurrencyvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The volume of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Volume should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)

class cryptocurrencymarketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description: str = 'The market capitalization of a cryptocurrency in USD'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Market capitalization should be formatted as a floating point number (in USD units) with an arbitrary number of decimal places'
        self.unit: str = 'In USD'
        self.examples: list = [43879157.32, 36591007.7403, 34534120.936, 33258632.2164, 33547503.2442]

    def cast(self, val):
        if np.isnan(val):
            return None
        else:
            return float(val)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyname, 'date': datetimeclass, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': cryptocurrencyvolume, 'marketcap': cryptocurrencymarketcap}"
"class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Row ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row ID should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class rowidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Row ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row ID should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency Name'
        self.valid_values = 'Cryptocurrency Name should be a string representing the name of the Cryptocurrency'
        self.format = 'Cryptocurrency Name should be a capitalized string'
        self.examples = ['Aave']

    def cast(self, val):
        return str(val).title()

class cryptocurrenciesymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency Symbol'
        self.valid_values = 'Cryptocurrency Symbol should be a string representing the symbol of the Cryptocurrency'
        self.format = 'Cryptocurrency Symbol should be an uppercase string'
        self.examples = ['AAVE']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = ""Date should be a string in the format: 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Date should be a string in the format: 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-10-05 23:59:59', '2020-10-06 23:59:59', '2020-10-07 23:59:59', '2020-10-08 23:59:59', '2020-10-09 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [55.11235847, 53.40227002, 42.40831364, 44.90251114, 47.56953274]

    def cast(self, val):
        return round(float(val), 8)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [55.11235847, 53.40227002, 42.40831364, 44.90251114, 47.56953274]

    def cast(self, val):
        return round(float(val), 8)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [55.11235847, 53.40227002, 42.40831364, 44.90251114, 47.56953274]

    def cast(self, val):
        return round(float(val), 8)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [55.11235847, 53.40227002, 42.40831364, 44.90251114, 47.56953274]

    def cast(self, val):
        return round(float(val), 8)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a floating point number'
        self.examples = [0.0, 583091.4597628, 682834.18632335, 1658816.92260445, 815537.6607835]

    def cast(self, val):
        return round(float(val), 8)

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'Market Cap of Cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market Cap should be a floating point number'
        self.examples = [89128128.86084658, 71011441.25451232, 67130036.89981823, 220265142.10956785, 235632208.16269892]

    def cast(self, val):
        return round(float(val), 8)


MAPPING = {'unnamed0': rowidentifier, 'sno': rowidentifier, 'name': cryptocurrencyname, 'symbol': cryptocurrenciesymbol, 'date': date, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integers starting from 0 or 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'A numeric index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be integers starting from 0 or 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'Valid cryptocurrency name'
        self.format = 'The name of the cryptocurrency in string format'
        self.examples = ['Binance Coin', 'Bitcoin', 'Ethereum', 'Ripple', 'Litecoin']

    def cast(self, val):
        return str(val)

class cryptosymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a cryptocurrency'
        self.valid_values = 'Valid cryptocurrency symbol'
        self.format = 'The symbol of the cryptocurrency in string format'
        self.examples = ['BNB', 'BTC', 'ETH', 'XRP', 'LTC']

    def cast(self, val):
        return str(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = 'Valid timestamp string'
        self.format = ""The timestamp should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-07-26 23:59:59', '2017-07-27 23:59:59', '2017-07-28 23:59:59', '2017-07-29 23:59:59', '2017-07-30 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In USD'
        self.examples = [0.1051379963755607, 0.1077369973063469, 0.1040669977664947, 0.1078109964728355, 0.1064139977097511]

    def cast(self, val):
        return round(float(val), 9)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In USD'
        self.examples = [0.1051379963755607, 0.1077369973063469, 0.1040669977664947, 0.1078109964728355, 0.1064139977097511]

    def cast(self, val):
        return round(float(val), 9)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In USD'
        self.examples = [0.1051379963755607, 0.1077369973063469, 0.1040669977664947, 0.1078109964728355, 0.1064139977097511]

    def cast(self, val):
        return round(float(val), 9)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.units = 'In USD'
        self.examples = [0.1051379963755607, 0.1077369973063469, 0.1040669977664947, 0.1078109964728355, 0.1064139977097511]

    def cast(self, val):
        return round(float(val), 9)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.examples = [200395.0, 344499.0, 342568.0, 340218.0, 224261.0]

    def cast(self, val):
        return round(float(val), 2)

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number'
        self.examples = [10513800.0, 10773700.0, 10406700.0, 10781100.0, 10641400.0]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': indexnumber, 'sno': indexnumber, 'name': cryptocurrencyname, 'symbol': cryptosymbol, 'date': timestamp, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers greater than or equal to 0'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid index')

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be integers greater than or equal to 0'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid index')

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Name should be a string that is the name of a cryptocurrency'
        self.format = 'The name should be capitalized'
        self.examples = ['Bitcoin', 'Ethereum', 'Litecoin', 'Dogecoin', 'Ripple']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticker symbol of a Cryptocurrency'
        self.valid_values = 'Ticker symbol should be a string that is the symbol of a cryptocurrency'
        self.format = 'The ticker symbol should be uppercase'
        self.examples = ['BTC', 'ETH', 'LTC', 'DOGE', 'XRP']

    def cast(self, val):
        return str(val).upper()

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.valid_values = ""Datetime should fit the following regex: '\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}'""
        self.format = 'Datetime should be of the format YYYY-MM-DD HH:MM:SS'
        self.examples = ['2013-04-29 23:59:59', '2013-04-30 23:59:59', '2013-05-01 23:59:59', '2013-05-02 23:59:59', '2013-05-03 23:59:59']

    def cast(self, val):
        match_obj = re.match('\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid datetime')

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.examples: list[float] = [147.48800659179688, 146.92999267578125, 139.88999938964844, 125.5999984741211, 108.12799835205078]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid price')

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.examples: list[float] = [147.48800659179688, 146.92999267578125, 139.88999938964844, 125.5999984741211, 108.12799835205078]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid price')

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.examples: list[float] = [147.48800659179688, 146.92999267578125, 139.88999938964844, 125.5999984741211, 108.12799835205078]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid price')

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in USD of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.examples: list[float] = [147.48800659179688, 146.92999267578125, 139.88999938964844, 125.5999984741211, 108.12799835205078]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid price')

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'The volume of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.examples: list[float] = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid volume')

class marketcap(NumericSemanticType):

    def __init__(self):
        self.description = 'The market cap of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be formatted as a floating point number'
        self.examples: list[float] = [1603768864.5, 1542813125.0, 1298954593.75, 1168517495.25, 1085995168.75]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid market cap')


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': datetimeclass, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique identifier for a row within a database. It is used to retrieve and sort data efficiently.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index is a unique identifier for a row within a database. It is used to retrieve and sort data efficiently.'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'An index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency names are the official names given to digital or virtual currencies.'
        self.valid_values = 'Cryptocurrency names must be valid and officially recognized names of digital or virtual currencies.'
        self.format = 'Cryptocurrency names should be stored as strings.'
        self.examples = ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Cardano']

    def cast(self, val):
        return str(val)

class cryptocurrencysymbol(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Cryptocurrency symbols are the official abbreviations used to represent digital or virtual currencies.'
        self.valid_values = 'Cryptocurrency symbols must be valid and officially recognized abbreviations of digital or virtual currencies.'
        self.format = 'Cryptocurrency symbols should be stored as strings.'
        self.examples = ['BTC', 'ETH', 'XRP', 'LTC', 'ADA']

    def cast(self, val):
        return str(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamps are a sequence of characters or encoded information identifying when a certain event occurred.'
        self.valid_values = ""Timestamps must follow the format: 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Timestamps should be stored as strings.'
        self.examples = ['2017-10-02 23:59:59', '2017-10-03 23:59:59', '2017-10-04 23:59:59', '2017-10-05 23:59:59', '2017-10-06 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency at a given point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with decimal places'
        self.unit = 'In USD'
        self.examples = [0.27, 0.24, 0.255, 0.256]

    def cast(self, val):
        return round(float(val), 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency at a given point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with decimal places'
        self.unit = 'In USD'
        self.examples = [0.27, 0.24, 0.255, 0.256]

    def cast(self, val):
        return round(float(val), 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency at a given point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with decimal places'
        self.unit = 'In USD'
        self.examples = [0.27, 0.24, 0.255, 0.256]

    def cast(self, val):
        return round(float(val), 2)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency at a given point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with decimal places'
        self.unit = 'In USD'
        self.examples = [0.27, 0.24, 0.255, 0.256]

    def cast(self, val):
        return round(float(val), 2)

class tradingvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Trading volume is a measure of how much of a given financial asset has traded in a period of time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Trading volume should be formatted as a floating point number'
        self.unit = 'In number of trades'
        self.examples = [893418323.182, 2107653409.209, 1739460.0, 50148301.862, 118674162.577]

    def cast(self, val):
        return float(val)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Market capitalization is the total value of all a company's shares of stock""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market capitalization should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [7603454207.955, 13038782727.941, 480664553.411, 1191263233.529, 2270888587.1]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': timestamp, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': tradingvolume, 'marketcap': marketcap}"
"class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Name should be a string that represents a known cryptocurrency'
        self.format = 'The name should be capitalized and free of any numeric or special characters'
        self.examples = ['Bitcoin', 'Ethereum', 'Chainlink', 'Litecoin', 'Ripple']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticker symbol for a Cryptocurrency'
        self.valid_values = 'Ticker should be a string that represents a known cryptocurrency ticker'
        self.format = 'The ticker should be in upper case and free of any numeric or special characters'
        self.examples = ['BTC', 'ETH', 'LINK', 'LTC', 'XRP']

    def cast(self, val):
        return str(val).upper()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp of data point'
        self.valid_values = ""Should be a string representing a timestamp in the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""The timestamp should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-09-21 23:59:59', '2017-09-22 23:59:59', '2017-09-23 23:59:59', '2017-09-24 23:59:59', '2017-09-25 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with at least 6 decimal places for precision'
        self.unit = 'In USD'
        self.examples = [0.189132, 0.169826, 0.149562, 0.13111, 0.170636]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with at least 6 decimal places for precision'
        self.unit = 'In USD'
        self.examples = [0.189132, 0.169826, 0.149562, 0.13111, 0.170636]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with at least 6 decimal places for precision'
        self.unit = 'In USD'
        self.examples = [0.189132, 0.169826, 0.149562, 0.13111, 0.170636]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with at least 6 decimal places for precision'
        self.unit = 'In USD'
        self.examples = [0.189132, 0.169826, 0.149562, 0.13111, 0.170636]

    def cast(self, val):
        num = float(val)
        return round(num, 6)

class marketvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total volume of a cryptocurrency traded'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a positive floating point number'
        self.unit = 'In USD'
        self.examples = [2126270.0, 1423220.0, 1186670.0, 1025740.0, 1021370.0]

    def cast(self, val):
        return float(val)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a positive floating point number'
        self.unit = 'In USD'
        self.examples = [59388000.0, 52676050.0, 45895150.0, 59597300.0, 63769300.0]

    def cast(self, val):
        return float(val)


MAPPING = {'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': timestamp, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': marketvolume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index must be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.valid_values = 'Name of a known cryptocurrency'
        self.format = 'The name of the cryptocurrency, capitalized'
        self.examples = ['Bitcoin', 'Ethereum', 'Cosmos', 'Cardano', 'Tether']

    def cast(self, val):
        return str(val).title()

class cryptocurrencysymbol(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Cryptocurrency'
        self.valid_values = 'Symbol of a known cryptocurrency'
        self.format = 'The symbol of the cryptocurrency, in uppercase'
        self.examples = ['BTC', 'ETH', 'ATOM', 'ADA', 'USDT']

    def cast(self, val):
        return str(val).upper()

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = 'Timestamps must be in the format YYYY-MM-DD HH:MM:SS'
        self.format = 'Timestamp should be a string in the format YYYY-MM-DD HH:MM:SS'
        self.examples = ['2019-03-15 23:59:59', '2019-03-16 23:59:59', '2019-03-17 23:59:59', '2019-03-18 23:59:59', '2019-03-19 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [1.81353406203, 8.30561528612, 7.35744302658, 5.22998151145, 5.20617165191]

    def cast(self, val):
        return round(float(val), 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [1.81353406203, 8.30561528612, 7.35744302658, 5.22998151145, 5.20617165191]

    def cast(self, val):
        return round(float(val), 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [1.81353406203, 8.30561528612, 7.35744302658, 5.22998151145, 5.20617165191]

    def cast(self, val):
        return round(float(val), 11)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [1.81353406203, 8.30561528612, 7.35744302658, 5.22998151145, 5.20617165191]

    def cast(self, val):
        return round(float(val), 11)

class volume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The volume of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be formatted as a floating point number'
        self.units = 'In units of the cryptocurrency'
        self.examples = [6057301.36630816, 3477392.63637224, 2653565.21355002, 2567200.53305075, 3891084.29346652]

    def cast(self, val):
        return round(float(val), 11)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market Cap of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market Cap should be formatted as a floating point number (in USD units)'
        self.units = 'In USD'
        self.examples = [0.0, 561156547.108, 843739242.755, 1229057706.565, 6203965905.6]

    def cast(self, val):
        return round(float(val), 11)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencysymbol, 'date': timestamp, 'high': price, 'low': price, 'open': price, 'close': price, 'volume': volume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequential index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Sequential index number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cryptocurrencyname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.valid_values = 'Name should be a string and correspond to an existent cryptocurrency'
        self.format = 'Cryptocurrency name should be capitalized and without special characters'
        self.examples = ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Bitcoin Cash']

    def cast(self, val):
        return str(val).title()

class cryptocurrencyticker(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ticker symbol of a cryptocurrency'
        self.valid_values = 'Ticker symbol should be a string and correspond to an existent cryptocurrency'
        self.format = 'Cryptocurrency ticker symbol should be in all uppercase letters'
        self.examples = ['BTC', 'ETH', 'XRP', 'LTC', 'BCH']

    def cast(self, val):
        return str(val).upper()

class datetimeobject(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamp'
        self.valid_values = ""Timestamp should be a string and follow the format 'YYYY-MM-DD HH:MM:SS'""
        self.format = 'Timestamp should be a datetime object'
        self.examples = ['2018-12-15 23:59:59', '2018-12-16 23:59:59', '2018-12-17 23:59:59', '2018-12-18 23:59:59', '2018-12-19 23:59:59']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0172433664486, 0.0153006720049, 0.0144480443353, 0.0162596370181, 0.0207902317496]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return round(val, 10)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0172433664486, 0.0153006720049, 0.0144480443353, 0.0162596370181, 0.0207902317496]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return round(val, 10)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0172433664486, 0.0153006720049, 0.0144480443353, 0.0162596370181, 0.0207902317496]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return round(val, 10)

class cryptocurrencyprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0172433664486, 0.0153006720049, 0.0144480443353, 0.0162596370181, 0.0207902317496]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid price')
        return round(val, 10)

class cryptocurrencyvolume(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Volume of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Volume should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [989709.642797211, 717174.017781968, 615622.639000056, 764474.467656781, 1025195.83098842]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid volume')
        return round(val, 10)

class marketcap(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Market capitalization of a cryptocurrency'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Market cap should be a non-negative floating point number with up to 10 decimal places'
        self.unit = 'In USD'
        self.examples = [0.0, 0.0, 15470622.8156846, 17855902.7527537, 23400877.2889336]

    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid market cap')
        return round(val, 10)


MAPPING = {'unnamed0': index, 'sno': index, 'name': cryptocurrencyname, 'symbol': cryptocurrencyticker, 'date': datetimeobject, 'high': cryptocurrencyprice, 'low': cryptocurrencyprice, 'open': cryptocurrencyprice, 'close': cryptocurrencyprice, 'volume': cryptocurrencyvolume, 'marketcap': marketcap}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of rows in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index values must be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that exists in the pycountry list of countries'
        self.format = 'Country names should be capitalized and in English'
        self.examples = ['Switzerland', 'Iceland', 'Denmark', 'Norway', 'Canada']

    def cast(self, val):
        name = str(val).title()
        if pycountry.countries.get(name=name):
            return name
        else:
            raise Exception('Invalid country name')

class regionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Global Region'
        self.valid_values = 'Name should be a string that exists in the predefined list of regions'
        self.format = 'Region names should be capitalized and in English'
        self.examples = ['Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa']

    def cast(self, val):
        return str(val).title()

class rank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of happiness for a country'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Rank values must be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class score(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of happiness for a country'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score values must be floating point numbers between 0 and 10'
        self.examples = [7.587, 7.561, 7.527, 7.522, 7.427]

    def cast(self, val):
        return float(val)

class error(NumericSemanticType):

    def __init__(self):
        self.description = 'Standard Error of the happiness score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Standard Error values must be non-negative floating point numbers'
        self.examples = [0.03411, 0.04884, 0.03328, 0.0388, 0.03553]

    def cast(self, val):
        return float(val)

class economy(NumericSemanticType):

    def __init__(self):
        self.description = 'GDP per Capita of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per Capita values must be non-negative floating point numbers'
        self.examples = [1.39651, 1.30232, 1.32548, 1.459, 1.32629]

    def cast(self, val):
        return float(val)

class family(NumericSemanticType):

    def __init__(self):
        self.description = 'Family support score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Family support values must be floating point numbers between 0 and 1'
        self.examples = [1.34951, 1.40223, 1.36058, 1.33095, 1.32261]

    def cast(self, val):
        return float(val)

class health(NumericSemanticType):

    def __init__(self):
        self.description = 'Life Expectancy score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Life Expectancy scores must be floating point numbers between 0 and 1'
        self.examples = [0.94143, 0.94784, 0.87464, 0.88521, 0.90563]

    def cast(self, val):
        return float(val)

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom scores must be floating point numbers between 0 and 1'
        self.examples = [0.66557, 0.62877, 0.64938, 0.66973, 0.63297]

    def cast(self, val):
        return float(val)

class trust(NumericSemanticType):

    def __init__(self):
        self.description = 'Government Corruption score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Government Corruption scores must be floating point numbers between 0 and 1'
        self.examples = [0.41978, 0.14145, 0.48357, 0.36503, 0.32957]

    def cast(self, val):
        return float(val)

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Generosity scores must be floating point numbers between 0 and 1'
        self.examples = [0.29678, 0.4363, 0.34139, 0.34699, 0.45811]

    def cast(self, val):
        return float(val)

class dystopia(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia Residual score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Dystopia Residual scores must be non-negative floating point numbers'
        self.examples = [2.51738, 2.70201, 2.49204, 2.46531, 2.45176]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'country': countryname, 'region': regionname, 'happinessrank': rank, 'happinessscore': score, 'standarderror': error, 'economygdppercapita': economy, 'family': family, 'healthlifeexpectancy': health, 'freedom': freedom, 'trustgovernmentcorruption': trust, 'generosity': generosity, 'dystopiaresidual': dystopia}"
"class unnamed(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unnamed column with no semantic meaning'
        self.valid_values = 'This column can have any values without a specific format'
        self.format = 'No specific format'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return val

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of Countries'
        self.valid_values = 'Country names should be valid names recognized globally'
        self.format = 'Each country name should be capitalized'
        self.examples = ['Denmark', 'Switzerland', 'Iceland', 'Norway', 'Finland']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class regionname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Names of Regions'
        self.valid_values = 'Regions are pre-defined and should be valid names'
        self.format = 'Each region name should be capitalized'
        self.examples = ['Sub-Saharan Africa', 'Central and Eastern Europe', 'Latin America and Caribbean', 'Western Europe', 'Middle East and Northern Africa']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid region name')

class happinessrank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of happiness score'
        self.valid_range = [1, 157]
        self.dtype = int
        self.format = 'Rank should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid happiness rank')

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of happiness'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [7.526, 7.509, 7.501, 7.498, 7.413]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 10:
            return round(val, 3)
        else:
            raise Exception('Invalid happiness score')

class confidenceinterval(NumericSemanticType):

    def __init__(self):
        self.description = 'Confidence interval for happiness score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Confidence interval should be a floating point number between 0 and 10'
        self.examples = [7.46, 7.428, 7.333, 7.421, 7.351]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 10:
            return round(val, 3)
        else:
            raise Exception('Invalid confidence interval')

class confidenceinterval(NumericSemanticType):

    def __init__(self):
        self.description = 'Confidence interval for happiness score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Confidence interval should be a floating point number between 0 and 10'
        self.examples = [7.46, 7.428, 7.333, 7.421, 7.351]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 10:
            return round(val, 3)
        else:
            raise Exception('Invalid confidence interval')

class economygdppercapita(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'GDP per capita of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per capita should be a positive floating point number'
        self.unit = 'In international dollars'
        self.examples = [1.44178, 1.52733, 1.42666, 1.57744, 1.40598]

    def cast(self, val):
        if isinstance(val, float) and val > 0:
            return round(val, 5)
        else:
            raise Exception('Invalid GDP per capita')

class family(NumericSemanticType):

    def __init__(self):
        self.description = 'Family score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Family score should be a floating point number between 0 and 1'
        self.examples = [1.16374, 1.14524, 1.18326, 1.1269, 1.13464]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 1:
            return round(val, 5)
        else:
            raise Exception('Invalid family score')

class healthlifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Health Life Expectancy'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Health life expectancy score should be a floating point number between 0 and 1'
        self.unit = 'In years'
        self.examples = [0.79504, 0.86303, 0.86733, 0.79579, 0.81091]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 1:
            return round(val, 5)
        else:
            raise Exception('Invalid health life expectancy score')

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom score should be a floating point number between 0 and 1'
        self.examples = [0.57941, 0.58557, 0.56624, 0.59609, 0.57104]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 1:
            return round(val, 5)
        else:
            raise Exception('Invalid freedom score')

class trustgovernmentcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Trust in government corruption score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Trust in government corruption score should be a floating point number between 0 and 1'
        self.examples = [0.44453, 0.41203, 0.14975, 0.35776, 0.41004]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 1:
            return round(val, 5)
        else:
            raise Exception('Invalid trust in government corruption score')

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Generosity score should be a floating point number between 0 and 1'
        self.examples = [0.36171, 0.28083, 0.47678, 0.37895, 0.25492]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 1:
            return round(val, 5)
        else:
            raise Exception('Invalid generosity score')

class dystopiaresidual(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia residual score'
        self.valid_range = [0, 4]
        self.dtype = float
        self.format = 'Dystopia residual score should be a floating point number between 0 and 4'
        self.examples = [2.73939, 2.69463, 2.83137, 2.66465, 2.82596]

    def cast(self, val):
        if isinstance(val, float) and 0 <= val <= 4:
            return round(val, 5)
        else:
            raise Exception('Invalid dystopia residual score')


MAPPING = {'unnamed0': unnamed, 'country': countryname, 'region': regionname, 'happinessrank': happinessrank, 'happinessscore': happinessscore, 'lowerconfidenceinterval': confidenceinterval, 'upperconfidenceinterval': confidenceinterval, 'economygdppercapita': economygdppercapita, 'family': family, 'healthlifeexpectancy': healthlifeexpectancy, 'freedom': freedom, 'trustgovernmentcorruption': trustgovernmentcorruption, 'generosity': generosity, 'dystopiaresidual': dystopiaresidual}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'General index'
        self.valid_range = [0, 154]
        self.dtype = int
        self.format = 'Integer index'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = 'The name must be a valid country name as defined by the pycountry library'
        self.format = 'Country names should start with an uppercase letter'
        self.examples = ['Norway', 'Denmark', 'Iceland', 'Switzerland', 'Finland']

    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val.title()
        else:
            raise Exception('Invalid country name')

class happinessrank(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of happiness'
        self.valid_range = [1, 155]
        self.dtype = int
        self.format = 'Integer rank'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Score of happiness'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Float score with three decimal places'
        self.examples = [7.537, 7.522, 7.504, 7.494, 7.469]

    def cast(self, val):
        return round(float(val), 3)

class whiskerhigh(NumericSemanticType):

    def __init__(self):
        self.description = 'High whisker value of happiness score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Float score with three decimal places'
        self.examples = [7.594, 7.582, 7.622, 7.562, 7.528]

    def cast(self, val):
        return round(float(val), 3)

class whiskerlow(NumericSemanticType):

    def __init__(self):
        self.description = 'Low whisker value of happiness score'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Float score with three decimal places'
        self.examples = [7.48, 7.462, 7.386, 7.426, 7.41]

    def cast(self, val):
        return round(float(val), 3)

class economygdppercapita(NumericSemanticType):

    def __init__(self):
        self.description = 'GDP per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [1.616, 1.482, 1.481, 1.565, 1.444]

    def cast(self, val):
        return round(float(val), 3)

class family(NumericSemanticType):

    def __init__(self):
        self.description = 'Family support score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [1.534, 1.551, 1.611, 1.517, 1.54]

    def cast(self, val):
        return round(float(val), 3)

class healthlifeexpectancy(NumericSemanticType):

    def __init__(self):
        self.description = 'Health life expectancy score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [0.797, 0.793, 0.834, 0.858, 0.809]

    def cast(self, val):
        return round(float(val), 3)

class freedom(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [0.635, 0.626, 0.627, 0.62, 0.618]

    def cast(self, val):
        return round(float(val), 3)

class generosity(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [0.362, 0.355, 0.476, 0.291, 0.245]

    def cast(self, val):
        return round(float(val), 3)

class trustgovernmentcorruption(NumericSemanticType):

    def __init__(self):
        self.description = 'Trust in government corruption score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [0.316, 0.401, 0.154, 0.367, 0.383]

    def cast(self, val):
        return round(float(val), 3)

class dystopiaresidual(NumericSemanticType):

    def __init__(self):
        self.description = 'Dystopia residual score'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Float value with three decimal places'
        self.examples = [2.277, 2.314, 2.323, 2.277, 2.43]

    def cast(self, val):
        return round(float(val), 3)


MAPPING = {'unnamed0': index, 'country': countryname, 'happinessrank': happinessrank, 'happinessscore': happinessscore, 'whiskerhigh': whiskerhigh, 'whiskerlow': whiskerlow, 'economygdppercapita': economygdppercapita, 'family': family, 'healthlifeexpectancy': healthlifeexpectancy, 'freedom': freedom, 'generosity': generosity, 'trustgovernmentcorruption': trustgovernmentcorruption, 'dystopiaresidual': dystopiaresidual}"
"class ranking(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of an entity based on a defined criteria'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Ranking should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class ranking(NumericSemanticType):

    def __init__(self):
        self.description = 'Ranking of an entity based on a defined criteria'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Ranking should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Name should be a string that is a valid country name'
        self.format = 'Country name should be capitalized'
        self.examples = ['Finland', 'Sweden', 'United States', 'Denmark', 'Iceland']

    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val):
            return val.title()
        else:
            raise Exception('Invalid country name')

class happinessscore(NumericSemanticType):

    def __init__(self):
        self.description = 'Score indicating the level of happiness'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Happiness score should be a floating point number between 0 and 10'
        self.examples = [7.632, 7.594, 7.555, 7.495, 7.487]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 10:
            return round(num, 3)
        else:
            raise Exception('Invalid happiness score')

class gdp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Gross Domestic Product per Capita'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per Capita should be a floating point number'
        self.unit = 'In international dollars, based on purchasing power parity (PPP)'
        self.examples = [1.305, 1.456, 1.351, 1.343, 1.42]

    def cast(self, val):
        return round(float(val), 3)

class socialsupportindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Social Support Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Social Support Index should be a floating point number'
        self.examples = [1.592, 1.582, 1.59, 1.644, 1.549]

    def cast(self, val):
        return round(float(val), 3)

class lifeexpectancy(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Healthy Life Expectancy'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Healthy Life Expectancy should be a floating point number'
        self.unit = 'In years'
        self.examples = [0.874, 0.861, 0.868, 0.914, 0.927]

    def cast(self, val):
        return round(float(val), 3)

class freedomindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Freedom to make life choices index'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Freedom to make life choices index should be a floating point number between 0 and 1'
        self.examples = [0.681, 0.686, 0.683, 0.677, 0.66]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            raise Exception('Invalid freedom index')

class generosityindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Generosity Index'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Generosity Index should be a floating point number between 0 and 1'
        self.examples = [0.202, 0.286, 0.284, 0.353, 0.256]

    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            raise Exception('Invalid generosity index')

class corruptionperceptionindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Perception of Corruption Index'
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = 'Perception of Corruption Index should be a floating point number between 0 and 1'
        self.examples = [0.393, 0.34, 0.408, 0.138, 0.357]

    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            raise Exception('Invalid corruption perception index')


MAPPING = {'unnamed0': ranking, 'overallrank': ranking, 'countryorregion': countryname, 'score': happinessscore, 'gdppercapita': gdp, 'socialsupport': socialsupportindex, 'healthylifeexpectancy': lifeexpectancy, 'freedomtomakelifechoices': freedomindex, 'generosity': generosityindex, 'perceptionsofcorruption': corruptionperceptionindex}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used for identification'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index used for identification'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.valid_values = 'Country name should be a string that matches a country name in the pycountry library'
        self.format = 'The country name should be capitalized and in English'
        self.examples = ['Finland', 'Denmark', 'Norway', 'Iceland', 'Netherlands']

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        country = pycountry.countries.get(name=val)
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class happinessindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Happiness index should be a non-negative float'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

class gdpindex(NumericSemanticType):

    def __init__(self):
        self.description = 'GDP per capita index of a country'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'GDP per capita index should be a non-negative float'
        self.examples = [1.34, 1.383, 1.488, 1.38, 1.396]

    def cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': index, 'overallrank': index, 'countryorregion': countryname, 'score': happinessindex, 'socialsupport': happinessindex, 'healthylifeexpectancy': happinessindex, 'freedomtomakelifechoices': happinessindex, 'generosity': happinessindex, 'perceptionsofcorruption': happinessindex, 'gdppercapita': gdpindex}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of a row in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as a whole number'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class movieidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie ID should be formatted as a whole number'
        self.examples: list[int] = [19995, 285, 206647, 49026, 49529]

    def cast(self, val):
        return int(val)

class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a movie'
        self.valid_values = 'Title should be a string'
        self.format = 'Movie title should be capitalized'
        self.examples: list[str] = ['Avatar', ""Pirates of the Caribbean: At World's End"", 'Spectre', 'The Dark Knight Rises', 'John Carter']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'movieid': movieidentifier, 'title': movietitle}"
"class movieidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a Movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie Id should be a positive integer'
        self.examples = [19995, 285, 206647, 49026, 49529]

    def cast(self, val):
        return int(val)

class movieidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for a Movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Movie Id should be a positive integer'
        self.examples = [19995, 285, 206647, 49026, 49529]

    def cast(self, val):
        return int(val)

class budget(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Budget of the movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Budget should be a positive integer'
        self.unit = 'In USD'
        self.examples = [237000000, 300000000, 245000000, 250000000, 260000000]

    def cast(self, val):
        return int(val)

class homepage(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Homepage of a Movie'
        self.valid_values = 'Should be a valid URL'
        self.format = 'URLs'
        self.examples = ['http://www.avatarmovie.com/', 'http://disney.go.com/disneypictures/pirates/', 'http://www.sonypictures.com/movies/spectre/', 'http://www.thedarkknightrises.com/', 'http://movies.disney.com/john-carter']

    def cast(self, val):
        if re.match('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', val):
            return val
        else:
            raise Exception('Invalid URL')

class language(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Original Language of the Movie'
        self.valid_values = 'ISO 639-1 language codes'
        self.format = 'Two-letter ISO 639-1 language codes'
        self.examples = ['en', 'fr', 'es', 'zh', 'de']

    def cast(self, val):
        if pycountry.languages.get(alpha_2=val):
            return val
        else:
            raise Exception('Invalid Language Code')

class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Original Title of a Movie'
        self.valid_values = 'Any valid string'
        self.format = 'String'
        self.examples = ['Avatar', ""Pirates of the Caribbean: At World's End"", 'Spectre', 'The Dark Knight Rises', 'John Carter']

    def cast(self, val):
        return str(val)

class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Original Title of a Movie'
        self.valid_values = 'Any valid string'
        self.format = 'String'
        self.examples = ['Avatar', ""Pirates of the Caribbean: At World's End"", 'Spectre', 'The Dark Knight Rises', 'John Carter']

    def cast(self, val):
        return str(val)

class moviepopularity(NumericSemanticType):

    def __init__(self):
        self.description = 'Popularity of a Movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Popularity should be a positive float'
        self.examples = [150.437577, 139.082615, 107.376788, 112.31295, 43.926995]

    def cast(self, val):
        return float(val)

class movierelease(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Release Date of a Movie'
        self.valid_values = 'Dates in the format YYYY-MM-DD'
        self.format = 'Dates in the format YYYY-MM-DD'
        self.examples = ['2009-12-10', '2007-05-19', '2015-10-26', '2012-07-16', '2012-03-07']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class movierevenue(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Revenue of the movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Revenue should be a positive integer'
        self.unit = 'In USD'
        self.examples = [2787965087, 961000000, 880674609, 1084939099, 284139100]

    def cast(self, val):
        return int(val)

class movieruntime(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Runtime of the movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Runtime should be a positive integer'
        self.unit = 'In minutes'
        self.examples = [162.0, 169.0, 148.0, 165.0, 132.0]

    def cast(self, val):
        return float(val)

class moviestatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of the Movie'
        self.valid_values = ""['Released', 'Rumored', 'Post Production']""
        self.format = ""One of the three statuses: 'Released', 'Rumored', 'Post Production'""
        self.examples = ['Released', 'Rumored', 'Post Production', 'Released', 'Released']

    def cast(self, val):
        if val in ['Released', 'Rumored', 'Post Production']:
            return val
        else:
            raise Exception('Invalid Movie Status')

class movievoteaverage(NumericSemanticType):

    def __init__(self):
        self.description = 'Average Vote of a Movie'
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = 'Average Vote should be a float between 0 and 10'
        self.examples = [7.2, 6.9, 6.3, 7.6, 6.1]

    def cast(self, val):
        if 0 <= float(val) <= 10:
            return float(val)
        else:
            raise Exception('Invalid Vote Average')

class movievotecount(NumericSemanticType):

    def __init__(self):
        self.description = 'Vote Count of a Movie'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vote Count should be a positive integer'
        self.examples = [11800, 4500, 4466, 9106, 2124]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': movieidentifier, 'id': movieidentifier, 'budget': budget, 'homepage': homepage, 'originallanguage': language, 'originaltitle': movietitle, 'title': movietitle, 'popularity': moviepopularity, 'releasedate': movierelease, 'revenue': movierevenue, 'runtime': movieruntime, 'status': moviestatus, 'voteaverage': movievoteaverage, 'votecount': movievotecount}"
"class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.valid_values = ""Name should be a string that matches a country's name in the pycountry database""
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Albania', 'Brazil', 'Iceland', 'Austria', 'Netherlands']

    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['male', 'female']

    def cast(self, val):
        if str(val).lower() in self.valid_values:
            return str(val).lower()
        else:
            raise Exception('Invalid gender')

class agegroup(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age group'
        self.valid_values = ""Age group should be a string that matches one of the following categories: ['15-24 years', '25-34 years', '35-54 years', '55-74 years', '75+ years']""
        self.format = ""The format should be 'lower bound - upper bound years'""
        self.examples = ['15-24 years', '25-34 years', '35-54 years', '55-74 years', '75+ years']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid age group')

class suicidecount(NumericSemanticType):

    def __init__(self):
        self.description = 'The count of suicides'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid suicide count')
        return num

class population(NumericSemanticType):

    def __init__(self):
        self.description = 'Population count'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Population count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid population count')
        return num

class suicidesperpopulation(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of suicides per 100k population'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Rate should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid suicide rate')
        return num

class gdp(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Gross Domestic Product per capita'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'GDP per capita should be a non-negative integer'
        self.unit = 'In USD'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid GDP per capita')
        return num

class generation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Generation name'
        self.valid_values = ""Generation name should be a string that matches one of the following categories: ['Generation X', 'Silent', 'Millenials', 'Boomers', 'G.I. Generation']""
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Generation X', 'Silent', 'Millenials', 'Boomers', 'G.I. Generation']

    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid generation')


MAPPING = {'country': countryname, 'sex': gender, 'age': agegroup, 'suicidesno': suicidecount, 'population': population, 'suicides100kpop': suicidesperpopulation, 'gdppercapita': gdp, 'generation': generation}"
"class customeridentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Customer ID'
        self.valid_values = 'Customer ID is a string of alphanumeric characters'
        self.format = 'Customer ID should be a string'
        self.examples = ['7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW', '9237-HQITU']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanoption(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class tenure(NumericSemanticType):

    def __init__(self):
        self.description = 'Tenure in months'
        self.valid_range = [0, 72]
        self.dtype = int
        self.format = 'Tenure should be an integer'
        self.examples = [1, 34, 2, 45, 2]

    def cast(self, val):
        return int(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class multioption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.valid_values = ""The options are 'No', 'Yes', 'No phone service', 'No internet service'""
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def cast(self, val):
        return str(val)

class contracttype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Contract type'
        self.valid_values = ""The contract types are 'Month-to-month', 'Two year', 'One year'""
        self.format = 'Contract type should be one of the valid values'
        self.examples = ['Month-to-month', 'Two year', 'One year']

    def cast(self, val):
        return str(val)

class paymentmethod(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Payment method'
        self.valid_values = ""The payment methods are 'Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)'""
        self.format = 'Payment method should be one of the valid values'
        self.examples = ['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']

    def cast(self, val):
        return str(val)

class monthlycharges(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Monthly charges in USD'
        self.valid_range = [18.25, 118.75]
        self.dtype = float
        self.format = 'Monthly charges should be a floating point number'
        self.unit = 'USD'
        self.examples = [29.85, 56.95, 53.85, 42.3, 70.7]

    def cast(self, val):
        return round(float(val), 2)

class totalcharges(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total charges in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total charges should be a floating point number'
        self.unit = 'USD'
        self.examples = [29.85, 1889.5, 108.15, 1840.75, 151.65]

    def cast(self, val):
        if val.strip() == '':
            return float('nan')
        else:
            return round(float(val), 2)


MAPPING = {'customerid': customeridentifier, 'gender': booleanoption, 'seniorcitizen': booleanoption, 'partner': booleanoption, 'dependents': booleanoption, 'phoneservice': booleanoption, 'paperlessbilling': booleanoption, 'churn': booleanoption, 'tenure': tenure, 'multiplelines': multioption, 'internetservice': multioption, 'onlinesecurity': multioption, 'onlinebackup': multioption, 'deviceprotection': multioption, 'techsupport': multioption, 'streamingtv': multioption, 'streamingmovies': multioption, 'contract': contracttype, 'paymentmethod': paymentmethod, 'monthlycharges': monthlycharges, 'totalcharges': totalcharges}"
"class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a Person'
        self.valid_range = [0, 122]
        self.dtype = int
        self.format = 'Age should be a whole number'
        self.examples = [18, 25, 35, 60, 80]

    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of a Person'
        self.valid_values = ['M', 'F']
        self.format = ""Gender should be 'M' or 'F'""
        self.examples = ['M', 'F', 'F', 'M', 'M']

    def cast(self, val):
        return str(val).upper()

class chestpaintype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of chest pain'
        self.valid_values = ['ASY', 'NAP', 'ATA', 'TA']
        self.format = ""Chest pain type should be one of 'ASY', 'NAP', 'ATA', 'TA'""
        self.examples = ['ASY', 'NAP', 'ATA', 'TA', 'ASY']

    def cast(self, val):
        return str(val).upper()

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Resting blood pressure of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Blood pressure should be a whole number'
        self.unit = 'In mmHg'
        self.examples = [120, 130, 140, 150, 160]

    def cast(self, val):
        return int(val)

class cholesterollevel(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Cholesterol level of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Cholesterol level should be a whole number'
        self.unit = 'In mg/dL'
        self.examples = [150, 200, 250, 300, 350]

    def cast(self, val):
        return int(val)

class fastingbloodsugar(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class restingecg(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Resting electrocardiographic results'
        self.valid_values = ['Normal', 'LVH', 'ST']
        self.format = ""Resting ECG results should be one of 'Normal', 'LVH', 'ST'""
        self.examples = ['Normal', 'LVH', 'ST', 'Normal', 'LVH']

    def cast(self, val):
        return str(val).capitalize()

class heartrate(NumericSemanticType):

    def __init__(self):
        self.description = 'Maximum heart rate achieved by a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Heart rate should be a whole number'
        self.examples = [120, 130, 140, 150, 160]

    def cast(self, val):
        return int(val)

class exerciseinducedangina(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['N', 'Y']

    def cast(self, val):
        return str(val).upper()

class oldpeak(NumericSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'ST depression should be a floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def cast(self, val):
        return float(val)

class stslope(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.valid_values = ['Flat', 'Up', 'Down']
        self.format = ""ST slope should be one of 'Flat', 'Up', 'Down'""
        self.examples = ['Flat', 'Up', 'Down', 'Flat', 'Up']

    def cast(self, val):
        return str(val).capitalize()

class heartdisease(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)


MAPPING = {'age': age, 'sex': gender, 'chestpaintype': chestpaintype, 'restingbp': bloodpressure, 'cholesterol': cholesterollevel, 'fastingbs': fastingbloodsugar, 'restingecg': restingecg, 'maxhr': heartrate, 'exerciseangina': exerciseinducedangina, 'oldpeak': oldpeak, 'stslope': stslope, 'heartdisease': heartdisease}"
"class customeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Customer ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Customer ID should be an integer without any special characters'
        self.examples = [768805383, 818770008, 713982108, 769911858, 709106358]

    def cast(self, val):
        return int(val)

class customerstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Existing Customer', 'Attrited Customer']

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid customer status')

class customerage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the customer'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be an integer representing the age in years'
        self.examples = [45, 49, 51, 40, 40]

    def cast(self, val):
        return int(val)

class customersex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sex of the customer'
        self.valid_values = ""Sex must be either 'M' for Male or 'F' for Female""
        self.format = ""Sex should be represented as single character 'M' or 'F'""
        self.examples = ['M', 'F', 'M', 'F', 'M']

    def cast(self, val):
        if val in ['M', 'F']:
            return val
        else:
            raise ValueError('Invalid gender')

class educationlevel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Education level of the customer'
        self.valid_values = ""Education level should be one of the following categories: ['Graduate', 'High School', 'Unknown', 'Uneducated', 'College']""
        self.format = 'Education level should be represented as a string'
        self.examples = ['High School', 'Graduate', 'Graduate', 'High School', 'Uneducated']

    def cast(self, val):
        if val in ['Graduate', 'High School', 'Unknown', 'Uneducated', 'College']:
            return val
        else:
            raise ValueError('Invalid education level')

class creditlimit(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Credit limit of the customer'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Credit limit should be a floating point number'
        self.unit = 'In USD'
        self.examples = [12691.0, 8256.0, 3418.0, 3313.0, 4716.0]

    def cast(self, val):
        return float(val)


MAPPING = {'clientnum': customeridentifier, 'attritionflag': customerstatus, 'customerage': customerage, 'gender': customersex, 'educationlevel': educationlevel, 'creditlimit': creditlimit}"
"class school(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of the school'
        self.valid_values = ""Names of the schools must be either 'GP' or 'MS'""
        self.format = ""The school name must be a string and must be either 'GP' or 'MS'""
        self.examples = ['GP', 'MS']

    def cast(self, val):
        val = str(val).upper()
        if val not in ['GP', 'MS']:
            raise ValueError(""Invalid value for school. Expected 'GP' or 'MS'"")
        return val

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of the student'
        self.valid_values = ""Gender must be either 'F' or 'M'""
        self.format = ""The gender must be a string and must be either 'F' or 'M'""
        self.examples = ['F', 'M']

    def cast(self, val):
        val = str(val).upper()
        if val not in ['F', 'M']:
            raise ValueError(""Invalid value for gender. Expected 'F' or 'M'"")
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the student'
        self.valid_range = [15, 22]
        self.dtype = int
        self.format = 'Age must be an integer between 15 and 22'
        self.examples = [15, 16, 17, 18, 19]

    def cast(self, val):
        val = int(val)
        if not 15 <= val <= 22:
            raise ValueError('Invalid value for age. Expected a value between 15 and 22')
        return val

class address(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Type of student's home address location""
        self.valid_values = ""Type of address must be either 'U' or 'R'""
        self.format = ""The address type must be a string and must be either 'U' or 'R'""
        self.examples = ['U', 'R']

    def cast(self, val):
        val = str(val).upper()
        if val not in ['U', 'R']:
            raise ValueError(""Invalid value for address type. Expected 'U' or 'R'"")
        return val

class famsize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of the family'
        self.valid_values = ""Family size must be either 'GT3' or 'LE3'""
        self.format = ""The family size must be a string and must be either 'GT3' or 'LE3'""
        self.examples = ['GT3', 'LE3']

    def cast(self, val):
        val = str(val).upper()
        if val not in ['GT3', 'LE3']:
            raise ValueError(""Invalid value for family size. Expected 'GT3' or 'LE3'"")
        return val


MAPPING = {'school': school, 'sex': gender, 'age': age, 'address': address, 'famsize': famsize}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The unique identifier for a row in a table'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'The index should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class schoolname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'The name of a school'
        self.valid_values: str = 'School names should be strings'
        self.format: str = 'School names should be capitalized'
        self.examples: list = ['GP', 'MS']

    def cast(self, val):
        return str(val).upper()

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'The gender of a person'
        self.valid_values: str = 'Gender can be either male (M) or female (F)'
        self.format: str = 'Gender should be represented as a single capitalized letter (M/F)'
        self.examples: list = ['M', 'F']

    def cast(self, val):
        return str(val).upper()

class age(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The age of a person'
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = 'Age should be represented as an integer'
        self.examples: list = [15, 16, 17, 18, 22]

    def cast(self, val):
        return int(val)

class address(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'The type of address'
        self.valid_values: str = 'Address can be either urban (U) or rural (R)'
        self.format: str = 'Address type should be represented as a single capitalized letter (U/R)'
        self.examples: list = ['U', 'R']

    def cast(self, val):
        return str(val).upper()

class familysize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'The size of the family'
        self.valid_values: str = 'Family size can be either greater than 3 (GT3) or less than or equal to 3 (LE3)'
        self.format: str = 'Family size should be represented as a capitalized string (GT3/LE3)'
        self.examples: list = ['GT3', 'LE3']

    def cast(self, val):
        return str(val).upper()

class parentalstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'The cohabitation status of the parents'
        self.valid_values: str = 'Parental status can be either living together (T) or apart (A)'
        self.format: str = 'Parental status should be represented as a single capitalized letter (T/A)'
        self.examples: list = ['T', 'A']

    def cast(self, val):
        return str(val).upper()

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The education level of a person'
        self.valid_range: list = [0, 4]
        self.dtype: object = int
        self.format: str = 'Education level should be represented as an integer (0-4)'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The education level of a person'
        self.valid_range: list = [0, 4]
        self.dtype: object = int
        self.format: str = 'Education level should be represented as an integer (0-4)'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class job(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'The job of a person'
        self.valid_values: str = 'Job should be a string'
        self.format: str = 'Job should be in lowercase'
        self.examples: list = ['at_home', 'health', 'other', 'services', 'teacher']

    def cast(self, val):
        return str(val).lower()

class job(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'The job of a person'
        self.valid_values: str = 'Job should be a string'
        self.format: str = 'Job should be in lowercase'
        self.examples: list = ['at_home', 'health', 'other', 'services', 'teacher']

    def cast(self, val):
        return str(val).lower()

class reason(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'The reason for choosing a school'
        self.valid_values: str = 'Reason can be either course preference, proximity to home, reputation, or other'
        self.format: str = 'Reason should be represented as a lowercase string'
        self.examples: list = ['course', 'home', 'reputation', 'other']

    def cast(self, val):
        return str(val).lower()

class guardian(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = ""The student's guardian""
        self.valid_values: str = 'Guardian can be either mother, father, or other'
        self.format: str = 'Guardian should be represented as a lowercase string'
        self.examples: list = ['mother', 'father', 'other']

    def cast(self, val):
        return str(val).lower()

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class time(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The amount of time spent on an activity'
        self.valid_range: list = [1, 4]
        self.dtype: object = int
        self.format: str = 'Time should be represented as an integer (1-4)'
        self.examples: list = [1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class failures(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The number of past class failures'
        self.valid_range: list = [0, 3]
        self.dtype: object = int
        self.format: str = 'Number of failures should be represented as an integer (0-3)'
        self.examples: list = [0, 1, 2, 3]

    def cast(self, val):
        return int(val)

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class binaryoption(CategoricalEnumSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.valid_values: str = 'Option can be either yes or no'
        self.format: str = 'Option should be represented as a lowercase string'
        self.examples: list = ['yes', 'no']

    def cast(self, val):
        return str(val).lower()

class relation(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The quality of family relationships'
        self.valid_range: list = [1, 5]
        self.dtype: object = int
        self.format: str = 'Relationship quality should be represented as an integer (1-5)'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class health(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The health status of a student'
        self.valid_range: list = [1, 5]
        self.dtype: object = int
        self.format: str = 'Health status should be represented as an integer (1-5)'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'school': schoolname, 'sex': gender, 'age': age, 'address': address, 'famsize': familysize, 'pstatus': parentalstatus, 'medu': educationlevel, 'fedu': educationlevel, 'mjob': job, 'fjob': job, 'reason': reason, 'guardian': guardian, 'traveltime': time, 'studytime': time, 'freetime': time, 'goout': time, 'dalc': time, 'walc': time, 'failures': failures, 'schoolsup': binaryoption, 'famsup': binaryoption, 'paid': binaryoption, 'activities': binaryoption, 'nursery': binaryoption, 'higher': binaryoption, 'internet': binaryoption, 'romantic': binaryoption, 'famrel': relation, 'health': health}"
"class newsidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a news article'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class newssubject(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Subject of the news article'
        self.valid_values = 'Subject can be a string representing the general topic of the news article'
        self.format = 'Subject should be a single string word or phrase'
        self.examples = ['News', 'politics', 'left-news', 'Government News', 'US_News']

    def cast(self, val):
        return str(val).lower()

class newsdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the news article'
        self.valid_values = ""Date should be a string in the format 'Month Day, Year'""
        self.format = 'Date should be a datetime object'
        self.examples = ['May 10, 2017', 'May 6, 2016', 'May 5, 2016', 'May 26, 2016', 'May 11, 2016']

    def cast(self, val):
        return datetime.strptime(str(val), '%B %d, %Y')


MAPPING = {'unnamed0': newsidentifier, 'subject': newssubject, 'date': newsdate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the news article'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class newscategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Category of the news article'
        self.valid_values = ['politicsNews', 'worldnews']
        self.format = ""The category should be a string and either 'politicsNews' or 'worldnews'""
        self.examples = ['politicsNews', 'worldnews']

    def cast(self, val):
        return str(val)

class newsdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date of the news article'
        self.valid_values = ""Dates should be in the following format: 'Month Day, Year'""
        self.format = ""Dates should be in the following format: 'Month Day, Year'""
        self.examples = ['December 20, 2017', 'December 6, 2017', 'November 30, 2017', 'November 9, 2017', 'October 13, 2017']

    def cast(self, val):
        return datetime.strptime(str(val).strip(), '%B %d, %Y')


MAPPING = {'unnamed0': index, 'subject': newscategory, 'date': newsdate}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of the table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class accessoryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of accessory'
        self.valid_values = 'Name of the accessory represented as a string'
        self.format = 'Accessory names should be title-cased strings'
        self.examples = ['3D Glasses', 'Bandage', 'Beak', 'Birthday Shades']

    def cast(self, val):
        return str(val).title()

class color(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color variation of the accessory'
        self.valid_values = 'Color of the accessory represented as a string'
        self.format = 'Color names should be title-cased strings'
        self.examples = ['White', 'Black', 'Beige', 'Yellow']

    def cast(self, val):
        return str(val).title()

class diyflag(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [560, 880, 1100, 1040, 1560]

    def cast(self, val):
        if val == 'NFS':
            return 0
        else:
            return int(val)

class sellprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The sell price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Sell price should be formatted as an integer'
        self.examples = [122, 35, 620]

    def cast(self, val):
        return int(val)

class size(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of the entity'
        self.valid_values = ""Size should be a string of the format 'nxn'""
        self.format = ""Size should be in the format 'nxn'""
        self.examples = ['1x1']

    def cast(self, val):
        return str(val)

class milesprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The miles price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Miles price should be formatted as an integer'
        self.examples = [400]

    def cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

class source(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of the entity'
        self.valid_values = 'Source should be a string'
        self.format = 'Source names should be title-cased strings'
        self.examples = ['Able Sisters', 'Labelle', 'Birthday', 'Gulliver', 'Dodo Airlines']

    def cast(self, val):
        return str(val).title()

class availability(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Seasonal availability of the entity'
        self.valid_values = 'Availability should be a string'
        self.format = 'Availability should be title-cased strings'
        self.examples = ['All Year', 'Summer', 'Winter']

    def cast(self, val):
        return str(val).title()

class mannequinpiece(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class version(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Version of the entity'
        self.valid_values = 'Version should be a string'
        self.format = ""Version should be a string of the form 'n.n.n'""
        self.examples = ['1.0.0']

    def cast(self, val):
        return str(val)

class style(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of the entity'
        self.valid_values = 'Style should be a string'
        self.format = 'Style names should be title-cased strings'
        self.examples = ['Simple', 'Cute', 'Active', 'Cool', 'Gorgeous']

    def cast(self, val):
        return str(val).title()

class labelthemes(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Label themes of the entity'
        self.valid_values = 'Label themes should be a string'
        self.format = 'Label themes should be lower-cased strings'
        self.examples = ['party; vacation', 'comfy', 'fairy tale; party; theatrical', 'party; theatrical', 'everyday; party; vacation']

    def cast(self, val):
        return str(val).lower()

class type(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of the accessory'
        self.valid_values = 'Type should be a string'
        self.format = 'Type names should be CamelCased strings'
        self.examples = ['AccessoryEye', 'AccessoryMouth', 'AccessoryMouthInvisibleNose', 'AcceEyeMouth', 'AccessoryEyeMouthInvisibleNose']

    def cast(self, val):
        words = str(val).split('_')
        return ''.join((word.capitalize() for word in words))

class villagerequippable(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class catalog(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Catalog status of the entity'
        self.valid_values = 'Catalog status should be a string'
        self.format = 'Catalog status should be title-cased strings'
        self.examples = ['For sale', 'Not for sale']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of the entity'
        self.valid_values = 'Filename should be a string'
        self.format = 'Filename should be a CamelCased string'
        self.examples = ['AccessoryGlassThreed0', 'AccessoryGlassLoose4', 'AccessoryGlassLoose5', 'AccessoryMouthBandageSkin', 'AccessoryMouthBeakYellow']

    def cast(self, val):
        words = str(val).split('_')
        return ''.join((word.capitalize() for word in words))

class internalidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The internal ID of the entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Internal ID should be formatted as an integer'
        self.examples = [4463, 11020, 4677, 3549, 4510]

    def cast(self, val):
        return int(val)

class uniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique entry ID of the entity'
        self.valid_values = 'Unique entry ID should be a string'
        self.format = 'Unique entry ID should be a lowercase string of alphanumeric characters'
        self.examples = ['FNxEraBTeWRiCvtFu', 'mM9SXPCcGPfPJAmtm', '2qFT5iPkk8bREvpkj', 'T5CpsJi4xBSachNL5', 'S6CiB9ZvzBTMhEnDz']

    def cast(self, val):
        return str(val).lower()


MAPPING = {'unnamed0': index, 'name': accessoryname, 'variation': color, 'diy': diyflag, 'buy': price, 'sell': sellprice, 'size': size, 'milesprice': milesprice, 'source': source, 'seasonalavailability': availability, 'mannequinpiece': mannequinpiece, 'version': version, 'style': style, 'labelthemes': labelthemes, 'type': type, 'villagerequippable': villagerequippable, 'catalog': catalog, 'filename': filename, 'internalid': internalidentifier, 'uniqueentryid': uniqueentryidentifier}"
"class achievementidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each achievement'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Achievement ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0 or not float(val).is_integer():
            raise Exception('Invalid achievementid')
        else:
            return int(float(val))

class achievementname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of the achievement'
        self.valid_values = 'Achievement names should be string'
        self.format = 'Achievement names should be string'
        self.examples = ['(island name) Miles!', 'Angling for Perfection!', 'Island Ichthyologist', 'Island Togetherness', ""You've Got the Bug""]

    def cast(self, val):
        return str(val)

class tierlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'The number of tiers for each achievement'
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = 'Tier level should be an integer between 1 and 6'
        self.examples = [1, 5, 3, 2, 6]

    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif not 1 <= float(val) <= 6 or not float(val).is_integer():
            raise Exception('Invalid tierlevel')
        else:
            return int(float(val))

class sequential(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val) not in self.valid_values:
            raise Exception('Invalid sequential value')
        else:
            return str(val)

class version(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The version of the game when the achievement was added'
        self.valid_values = ""Version numbers should be string in the form 'x.y.z'""
        self.format = ""Version numbers should be string in the form 'x.y.z'""
        self.examples = ['1.0.0', '1.2.0', '1.1.0', '1.3.0', '1.4.0']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': achievementidentifier, 'name': achievementname, 'numoftiers': tierlevel, 'sequential': sequential, 'version': version}"
"class artworkname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a work of art'
        self.valid_values = 'Names should be strings and can include any characters'
        self.format = 'Names should be capitalized and spaces should be used to separate words'
        self.examples = ['Academic Painting', 'Scary Painting', 'Ancient Statue', 'Basic Painting', 'Beautiful Statue']

    def cast(self, val):
        return str(val).title()

class booleananswer(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid boolean answer')

class booleananswer(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid boolean answer')

class furniturecategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Category of a furniture item'
        self.valid_values = 'Categories include Wall-mounted, Housewares, and Miscellaneous'
        self.format = 'Categories should be capitalized and spaces should be used to separate words'
        self.examples = ['Wall-mounted', 'Housewares', 'Miscellaneous']

    def cast(self, val):
        if str(val).title() in ['Wall-Mounted', 'Housewares', 'Miscellaneous']:
            return str(val).title()
        else:
            raise Exception('Invalid furniture category')

class bells(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The currency in Animal Crossing, stored as integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Bells should be integers'
        self.unit = 'In Bells'
        self.examples = [4980, 1245, 0, 99999999]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of bells')
        return num

class bells(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The currency in Animal Crossing, stored as integers'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Bells should be integers'
        self.unit = 'In Bells'
        self.examples = [4980, 1245, 0, 99999999]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of bells')
        return num

class itemsize(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of a furniture item'
        self.valid_values = ""Sizes should be strings of the form 'NxM' where N and M are integers""
        self.format = ""Sizes should be strings of the form 'NxM' where N and M are integers""
        self.examples = ['1x1', '2x1', '2x2', '1x2', '2x1.5']

    def cast(self, val):
        match_obj = re.match('[0-9]+x[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid item size')

class artworktitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of a work of art'
        self.valid_values = 'Titles should be strings and can include any characters'
        self.format = 'Titles should be capitalized and spaces should be used to separate words'
        self.examples = ['Folding Screen of Fūjin and Raijin', 'Beauty Looking Back', 'Olmec Colossal Head', 'Jōmon Period ""Dogū"" Figurine Shakōki-dogū', 'The Blue Boy']

    def cast(self, val):
        return str(val).title()

class version(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Version of the game'
        self.valid_values = ""Versions should be strings in the form of 'X.Y.Z' where X, Y, and Z are integers""
        self.format = ""Versions should be strings in the form of 'X.Y.Z' where X, Y, and Z are integers""
        self.examples = ['1.2.0']

    def cast(self, val):
        match_obj = re.match('[0-9]+\\.[0-9]+\\.[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid version')

class none(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a None value'
        self.valid_values = ""Only 'None' is valid""
        self.format = ""Only 'None' is valid""
        self.examples = ['None']

    def cast(self, val):
        if str(val).lower() == 'none':
            return 'None'
        else:
            raise Exception('Invalid none value')

class none(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a None value'
        self.valid_values = ""Only 'None' is valid""
        self.format = ""Only 'None' is valid""
        self.examples = ['None']

    def cast(self, val):
        if str(val).lower() == 'none':
            return 'None'
        else:
            raise Exception('Invalid none value')

class none(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents a None value'
        self.valid_values = ""Only 'None' is valid""
        self.format = ""Only 'None' is valid""
        self.examples = ['None']

    def cast(self, val):
        if str(val).lower() == 'none':
            return 'None'
        else:
            raise Exception('Invalid none value')

class artworktype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of a work of art'
        self.valid_values = 'Types include Picture and Sculpture'
        self.format = 'Types should be capitalized'
        self.examples = ['Picture', 'Sculpture']

    def cast(self, val):
        if str(val).title() in ['Picture', 'Sculpture']:
            return str(val).title()
        else:
            raise Exception('Invalid artwork type')

class nolighting(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Represents a 'No lighting' value""
        self.valid_values = ""Only 'No lighting' is valid""
        self.format = ""Only 'No lighting' is valid""
        self.examples = ['No lighting']

    def cast(self, val):
        if str(val).lower() == 'no lighting':
            return 'No lighting'
        else:
            raise Exception('Invalid no lighting value')

class notforsale(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Represents a 'Not for sale' value""
        self.valid_values = ""Only 'Not for sale' is valid""
        self.format = ""Only 'Not for sale' is valid""
        self.examples = ['Not for sale']

    def cast(self, val):
        if str(val).lower() == 'not for sale':
            return 'Not for sale'
        else:
            raise Exception('Invalid not for sale value')

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of a work of art'
        self.valid_values = 'Filenames should be strings and can include any characters'
        self.format = 'Filenames should be capitalized and spaces should be used to separate words'
        self.examples = ['FtrArtVitruvianMan', 'FtrSculptureMilo', 'FtrArtNightWatchFake', 'FtrSculptureDoguu', 'FtrSculptureDoguuFake']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': artworkname, 'genuine': booleananswer, 'interact': booleananswer, 'category': furniturecategory, 'buy': bells, 'sell': bells, 'size': itemsize, 'realartworktitle': artworktitle, 'version': version, 'hhaseries': none, 'hhaset': none, 'speakertype': none, 'tag': artworktype, 'lightingtype': nolighting, 'catalog': notforsale, 'filename': filename}"
"class bagname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a bag'
        self.valid_values = 'Bag name should be a string'
        self.format = 'Bag name should start with a capital letter and rest in lower case'
        self.examples = ['Acorn Pochette', 'Basket Pack', 'Bug Cage', 'Bunny Day Bag', 'Butterfly Backpack']

    def cast(self, val):
        return str(val).title()

class bagcolor(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Color of a bag'
        self.valid_values = 'Bag color should be one of: Blue, Green, Black, Pink, Red'
        self.format = 'Bag color should start with a capital letter and rest in lower case'
        self.examples = ['Blue', 'Green', 'Black', 'Pink', 'Red']

    def cast(self, val):
        return str(val).title()

class bagdiy(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).capitalize()

class bagprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a bag in bells'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [1200, 1500, 1700, 1900, 2100]

    def cast(self, val):
        if val == 'NFS':
            return None
        return int(val)

class bagprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a bag in bells'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [1200, 1500, 1700, 1900, 2100]

    def cast(self, val):
        if val == 'NFS':
            return None
        return int(val)

class bagsize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of a bag in Animal Crossing'
        self.valid_values = 'Bag size should be one of: 1x1'
        self.format = ""Bag size should be of the format '1x1'""
        self.examples = ['1x1']

    def cast(self, val):
        return str(val)

class bagmilesprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The price of a bag in miles'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [800]

    def cast(self, val):
        if pd.isna(val):
            return None
        return int(val)

class bagsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of a bag in Animal Crossing'
        self.valid_values = 'Bag source should be a string'
        self.format = 'Bag source should start with a capital letter and rest in lower case'
        self.examples = ['Kicks', 'Crafting', 'Mom', 'Bug-Off', 'Fishing Tourney']

    def cast(self, val):
        return str(val).title()

class bagavailability(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Seasonal availability of a bag in Animal Crossing'
        self.valid_values = 'Availability should be one of: All Year'
        self.format = ""Availability should be of the format 'All Year'""
        self.examples = ['All Year']

    def cast(self, val):
        return str(val)

class bagversion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of a bag in Animal Crossing'
        self.valid_values = 'Bag version should be one of: 1.0.0, 1.1.0a'
        self.format = ""Bag version should be of the format '1.0.0' or '1.1.0a'""
        self.examples = ['1.0.0', '1.1.0a']

    def cast(self, val):
        return str(val)

class bagstyle(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Style of a bag in Animal Crossing'
        self.valid_values = 'Bag style should be one of: Active, Cute, Simple, Elegant, Cool'
        self.format = 'Bag style should start with a capital letter and rest in lower case'
        self.examples = ['Active', 'Cute', 'Simple', 'Elegant', 'Cool']

    def cast(self, val):
        return str(val).title()

class baglabeltheme(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Label themes of a bag in Animal Crossing'
        self.valid_values = 'Bag label theme should be a string'
        self.format = 'Bag label theme should start with a lower case letter'
        self.examples = ['outdoorsy; sporty', 'everyday; outdoorsy; sporty', 'everyday; outdoorsy', 'comfy', 'formal; party']

    def cast(self, val):
        return str(val)

class bagequippable(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['No']

    def cast(self, val):
        return str(val).capitalize()

class bagcatalog(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['For sale', 'Not for sale']

    def cast(self, val):
        return str(val).capitalize()


MAPPING = {'name': bagname, 'variation': bagcolor, 'diy': bagdiy, 'buy': bagprice, 'sell': bagprice, 'size': bagsize, 'milesprice': bagmilesprice, 'source': bagsource, 'seasonalavailability': bagavailability, 'version': bagversion, 'style': bagstyle, 'labelthemes': baglabeltheme, 'villagerequippable': bagequippable, 'catalog': bagcatalog}"
"class clothingitem(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a clothing item'
        self.valid_values = 'Name should be a string that describes a specific clothing item'
        self.format = 'All letters should be lowercase'
        self.examples = ['draped skirt', 'formal shorts', 'chino pants', 'career skirt', 'basketball shorts']

    def cast(self, val):
        return str(val).lower()

class color(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color variations of a clothing item'
        self.valid_values = 'Color should be a string that describes a specific color'
        self.format = 'First letter of the color should be capitalized'
        self.examples = ['Blue', 'Green', 'Red', 'Black', 'Pink']

    def cast(self, val):
        return str(val).title()

class yesno(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid value')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a clothing item in Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number in Bells'
        self.units = 'In Bells'
        self.examples = [1320, 1100, 700, 330, 275]

    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid price')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a clothing item in Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number in Bells'
        self.units = 'In Bells'
        self.examples = [1320, 1100, 700, 330, 275]

    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid price')

class itemsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of a clothing item'
        self.valid_values = 'Source should be a string that describes where the item can be obtained'
        self.format = 'All letters should be capitalized'
        self.examples = ['Able Sisters', 'Labelle', 'Recycle bin', 'Crafting']

    def cast(self, val):
        return str(val).title()

class season(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Seasonal availability of a clothing item'
        self.valid_values = 'Season should be a string that describes when the item can be obtained'
        self.format = 'All words should be capitalized'
        self.examples = ['All Year', 'Winter', 'Summer']

    def cast(self, val):
        return str(val).title()

class style(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of a clothing item'
        self.valid_values = 'Style should be a string that describes the style of the item'
        self.format = 'All words should be capitalized'
        self.examples = ['Simple', 'Active', 'Cool', 'Cute', 'Elegant']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': clothingitem, 'variation': color, 'diy': yesno, 'buy': price, 'sell': price, 'source': itemsource, 'seasonalavailability': season, 'style': style}"
"class constructionidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Construction ID'
        self.valid_range = [0, 235]
        self.dtype = int
        self.format = 'Construction ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class constructionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Construction'
        self.valid_values = 'Should be a string that represents the name of the construction'
        self.format = 'Name should be a capitalized string'
        self.examples = ['Brick Bridge', 'Iron Bridge', 'Log Bridge', 'Red Zen Bridge', 'Stone Bridge']

    def cast(self, val):
        return str(val).title()

class constructionprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a construction'
        self.valid_range = [5000, 228000]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Bells units) with two decimal places for cents'
        self.unit = 'In Bells'
        self.examples: list = [198000.0, 228000.0, 98000.0, 5000.0, 168000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class constructioncategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Category of the Construction'
        self.valid_values = ""Should be one of the following: ['Door', 'Mailbox', 'Roofing', 'Siding', 'Bridge']""
        self.format = 'Category should be a capitalized string'
        self.examples = ['Door', 'Mailbox', 'Roofing', 'Siding', 'Bridge']

    def cast(self, val):
        return str(val).title()

class constructionsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of the Construction'
        self.valid_values = 'Source should be a string that represents the source of the construction'
        self.format = 'Source should be a capitalized string'
        self.examples = ['Resident Services Upgrade', '4th House Upgrade (Right Room)', '3rd House Upgrade (Left Room)', '5th House Upgrade (2nd Floor)', 'Initial House']

    def cast(self, val):
        return str(val).title()

class constructionversion(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of the Construction'
        self.valid_values = ""Should be one of the following: ['1.0.0']""
        self.format = 'Version should be a string in the form x.x.x'
        self.examples = ['1.0.0']

    def cast(self, val):
        return str(val)

class constructionuniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID of the Construction'
        self.valid_values = 'Unique Entry ID should be a string that represents the unique id of the construction'
        self.format = 'Unique Entry ID should be a string'
        self.examples = ['Rvkrg9tcubTMakcBS', 'RmQ6iiKkFf3Sy4iSQ', 'Px55sTfjKSbbMtjAK', 'jTziEHXkeYaugKDQQ', 'JmrwC2tRRCCgbZnrp']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': constructionidentifier, 'name': constructionname, 'buy': constructionprice, 'category': constructioncategory, 'source': constructionsource, 'version': constructionversion, 'uniqueentryid': constructionuniqueentryidentifier}"
"class clothingname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Clothing Piece'
        self.valid_values = 'Names should be strings'
        self.format = 'All words in the name should be lower-cased and separated by spaces'
        self.examples = ['ninja costume', 'instant-muscles suit', 'jockey uniform', 'magical dress', 'baby romper']

    def cast(self, val):
        return str(val).lower()

class booleanyesno(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return 'Yes' if val == 'Yes' else 'No' if val == 'No' else 'Invalid Value'

class priceinteger(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in Bells of an entity in the game Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.examples = [1600, 2520, 2000, 1800, 2240]

    def cast(self, val):
        return int(val)

class priceinteger(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in Bells of an entity in the game Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.examples = [1600, 2520, 2000, 1800, 2240]

    def cast(self, val):
        return int(val)

class clothingstyle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of a Clothing Piece'
        self.valid_values = 'Styles should be strings'
        self.format = 'All words in the style should be lower-cased and separated by spaces'
        self.examples = ['Elegant', 'Cute', 'Active', 'Simple', 'Gorgeous']

    def cast(self, val):
        return str(val).lower()

class catalogstatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['For sale', 'Not for sale']

    def cast(self, val):
        return 'For sale' if val == 'For sale' else 'Not for sale' if val == 'Not for sale' else 'Invalid Value'


MAPPING = {'name': clothingname, 'diy': booleanyesno, 'buy': priceinteger, 'sell': priceinteger, 'style': clothingstyle, 'catalog': catalogstatus}"
"class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be stored as integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'ID number'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID numbers should be stored as integers'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class fencingname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the fencing'
        self.valid_values = 'Fencing names must be a string'
        self.format = 'The string should be in title case'
        self.examples = ['Bamboo Lattice Fence', 'Barbed-Wire Fence', 'Brick Fence', 'Bunny Day Fence', 'Corral Fence']

    def cast(self, val):
        return str(val).title()

class fencingname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the fencing'
        self.valid_values = 'Fencing names must be a string'
        self.format = 'The string should be in title case'
        self.examples = ['Bamboo Lattice Fence', 'Barbed-Wire Fence', 'Brick Fence', 'Bunny Day Fence', 'Corral Fence']

    def cast(self, val):
        return str(val).title()

class diyproject(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes':
            return 'Yes'
        else:
            return 'No'

class stacksize(NumericSemanticType):

    def __init__(self):
        self.description = 'Stack size'
        self.valid_range = [1, 100]
        self.dtype = int
        self.format = 'Stack size should be stored as integers'
        self.examples = [50, 25, 75, 100, 1]

    def cast(self, val):
        return int(val)

class sellprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells for selling an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Bells) with no decimal places'
        self.unit = 'In Bells'
        self.examples = [960, 1980, 1200, 2400, 720]

    def cast(self, val):
        return int(val)

class sellprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells for selling an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Bells) with no decimal places'
        self.unit = 'In Bells'
        self.examples = [960, 1980, 1200, 2400, 720]

    def cast(self, val):
        return int(val)

class versionnumber(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Software version number'
        self.valid_values = ""Version numbers must be of the form 'major.minor.revision'""
        self.format = 'Stored as strings, each number in the version number is separated by a period'
        self.examples = ['1.0.0', '2.3.4', '1.2.0', '1.1.0a', '2.0.1']

    def cast(self, val):
        return str(val)

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of the data'
        self.valid_values = 'Filenames must be a string without any special characters or spaces'
        self.format = ""The string must start with 'Item' followed by the name of the fence""
        self.examples = ['ItemFenceBamboo', 'ItemFenceBarbedWire', 'ItemFenceWallRenga', 'ItemFenceEgg', 'ItemFenceHorizontalWood']

    def cast(self, val):
        return str(val).replace(' ', '').replace('-', '')

class uniquentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID'
        self.valid_values = 'Unique Entry ID must be a string of alphanumeric characters'
        self.format = 'The string is a combination of lower case letters and numbers'
        self.examples = ['XaLnmQsQ47HfHQ9g5', 'dNgibaR9jFqaDwuDZ', 'WAzanA7e5MREzJdMh', 'CLQGhAfSNykpxrh3a', 'rqwqYy7Aphvh5zBSA']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': idnumber, 'internalid': idnumber, 'name': fencingname, 'source': fencingname, 'diy': diyproject, 'stacksize': stacksize, 'buy': sellprice, 'sell': sellprice, 'version': versionnumber, 'filename': filename, 'uniqueentryid': uniquentryidentifier}"
"class fishname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Fish'
        self.valid_values = 'Fish name should be a string'
        self.format = 'Fish name can have any valid string format'
        self.examples = ['anchovy', 'angelfish', 'arapaima', 'arowana', 'barred knifejaw']

    def cast(self, val):
        return str(val)

class bells(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a fish in Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a whole number (in Bells units)'
        self.units = 'In Bells'
        self.examples: list[str] = [200, 3000, 10000, 5000, 15000]

    def cast(self, val):
        num = float(val)
        return round(num, 0)

class waterbody(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Water body where the fish is found'
        self.valid_values = ""Fish can be found in 'Sea', 'River', 'Pond', 'Pier', 'River (clifftop)'""
        self.format = 'Water body name should be a string'
        self.examples = ['Sea', 'River', 'Pond', 'Pier', 'River (clifftop)']

    def cast(self, val):
        return str(val)

class fishshadow(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Shadow size of the fish'
        self.valid_values = ""Fish shadow size can be 'Small', 'Medium', 'X-Small', 'Large', 'X-Large'""
        self.format = 'Shadow size should be a string'
        self.examples = ['Small', 'Medium', 'X-Small', 'Large', 'X-Large']

    def cast(self, val):
        return str(val)

class fishrainsnow(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Does the fish appear during rain or snow?'
        self.valid_values = ""Fish can appear during 'Yes' or 'No' rain/snow""
        self.format = 'Rain/Snow appearance should be a string'
        self.examples = ['Yes', 'No']

    def cast(self, val):
        return str(val)


MAPPING = {'name': fishname, 'sell': bells, 'wherehow': waterbody, 'shadow': fishshadow, 'rainsnowcatchup': fishrainsnow}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'An identification number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'ID should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class floorname(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Name of a floor design'
        self.valid_values: str = 'Floor name should be a string'
        self.format: str = 'Floor names should be title case'
        self.examples: list = ['Aqua Tile Flooring', 'Arabesque Flooring', 'Arched-Brick Flooring', 'Argyle Tile Flooring', 'Artsy Parquet Flooring']

    def cast(self, val):
        return str(val).title()

class vfx(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class diy(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class price(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Price should be an integer'
        self.examples: list = [3000, 1500, 1040, 2200, 900]

    def cast(self, val):
        return int(val)

class sell(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Selling price of an entity'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Sell price should be an integer'
        self.examples: list = [225, 530, 275, 437, 450]

    def cast(self, val):
        return int(val)

class milesprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of an entity in Nook Miles'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Miles price should be an integer'
        self.examples: list = [1200, float('nan'), float('nan'), float('nan'), float('nan')]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class sourcename(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Source of a floor design'
        self.valid_values: str = 'Source name should be a string'
        self.format: str = 'Source names should be title case'
        self.examples: list = [""Nook's Cranny"", 'Saharah', 'Crafting', 'Wedding Season', 'Nook Miles Shop']

    def cast(self, val):
        return str(val).title()

class version(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Version of the game'
        self.valid_values: str = 'Version should be a string of the form x.y.z'
        self.format: str = 'Version should be a string with numbers and dots'
        self.examples: list = ['1.0.0', '1.2.0', '1.1.0', '1.1.0', '1.1.0']

    def cast(self, val):
        return str(val)

class hhaseries(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'HHA series of a floor design'
        self.valid_values: str = 'HHA series should be a string'
        self.format: str = 'HHA series names should be lowercase'
        self.examples: list = ['None', 'wedding', 'bamboo', 'Bunny Day', 'cherry blossoms']

    def cast(self, val):
        return str(val).lower()

class tag(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Tag for a floor design'
        self.valid_values: str = 'Tag should be a string'
        self.format: str = 'Tag names should be title case'
        self.examples: list = ['Tile Floors', 'Wood Floors', 'Stone Floors', 'Nature - Brown', 'Sidewalk']

    def cast(self, val):
        return str(val).title()

class catalog(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = ['For sale', 'Not for sale']

    def cast(self, val):
        return str(val)

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Filename of the floor design image'
        self.valid_values: str = 'Filename should be a string'
        self.format: str = 'Filename should be a string with no spaces'
        self.examples: list = ['RoomTexFloorTile01', 'RoomTexFloorArabesque00', 'RoomTexFloorBirch00', 'RoomTexFloorArchBrick00', 'RoomTexFloorTileWood00']

    def cast(self, val):
        return str(val).replace(' ', '')

class internalidentifier(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Internal identification number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Internal ID should be an integer'
        self.examples: list = [4797, 4992, 5039, 5233, 12434]

    def cast(self, val):
        return int(val)

class uniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description: str = 'Unique identification string'
        self.valid_values: str = 'Unique entry ID should be a string'
        self.format: str = 'Unique entry ID should be a string with no spaces'
        self.examples: list = ['JmNGqRhEow3PH7bgk', '4dabyuetmZD5dDdCH', '2tg7thFuaxAAiDTsv', 'CSPoYJzCnzWjqWrj5', 'BH8PqRSou2XjQ8ppQ']

    def cast(self, val):
        return str(val).replace(' ', '')


MAPPING = {'unnamed0': identifier, 'name': floorname, 'vfx': vfx, 'diy': diy, 'buy': price, 'sell': sell, 'milesprice': milesprice, 'source': sourcename, 'version': version, 'hhaseries': hhaseries, 'tag': tag, 'catalog': catalog, 'filename': filename, 'internalid': internalidentifier, 'uniqueentryid': uniqueentryidentifier}"
"class fossilname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Fossil'
        self.valid_values = ""Fossil name should be a string that is of the form 'first word second word'""
        self.format = 'Only the first letter of the first and second word should be capitalized'
        self.examples = ['Acanthostega', 'Amber', 'Ammonite', 'Ankylo Skull', 'Ankylo Tail']

    def cast(self, val):
        return str(val).title()

class sizecategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size Category of a Fossil'
        self.valid_values = ""Size Category should be either '2x2' or '1x1'""
        self.format = 'The category should be formatted as a string'
        self.examples = ['2x2', '1x1']

    def cast(self, val):
        val_str = str(val)
        if val_str in ['2x2', '1x1']:
            return val_str
        else:
            raise Exception('Invalid size category')

class museumlocation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Location of a Fossil in a Museum'
        self.valid_values = ""Museum location should be either 'Room 1', 'Room 2' or 'Room 3'""
        self.format = 'The location should be formatted as a string'
        self.examples = ['Room 1', 'Room 2', 'Room 3']

    def cast(self, val):
        val_str = str(val)
        if val_str in ['Room 1', 'Room 2', 'Room 3']:
            return val_str
        else:
            raise Exception('Invalid museum location')

class fossilprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Selling Price of a Fossil'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [2000, 1200, 1100, 3500, 2500]

    def cast(self, val):
        return int(val)

class interaction(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        val_str = str(val)
        if val_str in self.valid_values:
            return val_str
        else:
            raise Exception('Invalid interaction value')


MAPPING = {'name': fossilname, 'size': sizecategory, 'museum': museumlocation, 'sell': fossilprice, 'interact': interaction}"
"class itemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Item'
        self.valid_values = ""Name should be a string that is of the form 'item name'""
        self.format = 'First letter of each word in the item name should be capitalized'
        self.examples = ['Acorn Knit Cap', 'Zen Hair Clip', 'Rain Hat', 'Bicycle Helmet', 'Soft-Serve Hat']

    def cast(self, val):
        return str(val).title()

class color(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color of an Item'
        self.valid_values = ""Color should be a string that is of the form 'color name'""
        self.format = 'First letter of each word in the color name should be capitalized'
        self.examples = ['Blue', 'Red', 'Green', 'Pink', 'White']

    def cast(self, val):
        return str(val).title()

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in bells of an item in Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be an integer with no decimal places'
        self.unit = 'In Bells'
        self.examples = [880, 560, 1100, 880, 1120]

    def cast(self, val):
        num = int(val)
        return num

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in bells of an item in Animal Crossing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be an integer with no decimal places'
        self.unit = 'In Bells'
        self.examples = [880, 560, 1100, 880, 1120]

    def cast(self, val):
        num = int(val)
        return num

class itemstyle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Style of an Item'
        self.valid_values = ""Style should be a string that is of the form 'style name'""
        self.format = 'First letter of each word in the style name should be capitalized'
        self.examples = ['Cute', 'Active', 'Simple', 'Elegant', 'Cool']

    def cast(self, val):
        return str(val).title()

class itemtype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Type of an Item'
        self.valid_values = ""Type should be a string that is of the form 'type name'""
        self.format = 'First letter of each word in the type name should be capitalized'
        self.examples = ['HeadCap', 'HeadFullFace', 'Headgear_HasBang', 'HeadHairOrnament_Left', 'Headgear_NoEarNoJaw']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': itemname, 'variation': color, 'diy': binaryvalue, 'villagerequippable': binaryvalue, 'catalog': binaryvalue, 'buy': price, 'sell': price, 'style': itemstyle, 'type': itemtype}"
"class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Name'
        self.valid_values = 'Product name should be a string'
        self.format = 'Product name should be in title format'
        self.examples = ['Acoustic Guitar', 'Loft Bed With Desk', 'Rock Guitar', 'Changing Room', 'Electric Guitar']

    def cast(self, val):
        return str(val).title()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Variation'
        self.valid_values = 'Variation should be a string'
        self.format = 'Variation should be in title format'
        self.examples = ['Black', 'White', 'Blue', 'Red', 'Green']

    def cast(self, val):
        return str(val).title()

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val.lower() == 'yes':
            return 'Yes'
        elif val.lower() == 'no':
            return 'No'
        else:
            raise ValueError('Invalid boolean value')

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val.lower() == 'yes':
            return 'Yes'
        elif val.lower() == 'no':
            return 'No'
        else:
            raise ValueError('Invalid boolean value')

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val.lower() == 'yes':
            return 'Yes'
        elif val.lower() == 'no':
            return 'No'
        else:
            raise ValueError('Invalid boolean value')

class productsize(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Size'
        self.valid_values = ""Size should be a string of format 'length x width'""
        self.format = ""Size should be a string of format 'length x width'""
        self.examples = ['1x1', '2x1', '2x2', '1x0.5', '1.5x1.5']

    def cast(self, val):
        return str(val).strip()

class productsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Source'
        self.valid_values = 'Source should be a string'
        self.format = 'Source should be in title format'
        self.examples = [""Nook's Cranny"", 'Crafting', 'Nook Miles Shop', 'Wedding Season', 'Fishing Tourney']

    def cast(self, val):
        return str(val).title()

class productversion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Product Version'
        self.valid_values = ""Version should be a string of format '1.0.0'""
        self.format = ""Version should be a string of format '1.0.0'""
        self.examples = ['1.0.0', '1.2.0', '1.1.0a', '1.1.0']

    def cast(self, val):
        return str(val).strip()

class outdoorvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val.lower() == 'yes':
            return 'Yes'
        elif val.lower() == 'no':
            return 'No'
        else:
            raise ValueError('Invalid boolean value')


MAPPING = {'name': productname, 'variation': productvariation, 'diy': booleanvalue, 'bodycustomize': booleanvalue, 'patterncustomize': booleanvalue, 'size': productsize, 'source': productsource, 'version': productversion, 'outdoor': outdoorvalue}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An incrementing index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val) if val >= 0 else None

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An incrementing index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val) if val >= 0 else None

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An incrementing index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val) if val >= 0 else None

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An incrementing index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val) if val >= 0 else None

class insectname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Insect'
        self.valid_values = 'Insect name should be a string'
        self.format = 'Insect name should be in lowercase'
        self.examples = ['agrias butterfly', 'ant', 'Atlas moth', 'bagworm', 'banded dragonfly']

    def cast(self, val):
        return str(val).lower()

class bells(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells (currency of Animal Crossing) of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [3000, 80, 3000, 600, 4500]

    def cast(self, val):
        return int(val) if val >= 0 else None

class location(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Location where the insect can be found'
        self.valid_values = 'Location should be a string'
        self.format = 'Location should be in title case'
        self.examples = ['On The Ground', 'Flying Near Flowers', 'On Trees (Any Kind)', 'On Palm Trees', 'On Hardwood/Cedar Trees']

    def cast(self, val):
        return str(val).title()

class weathercondition(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The weather conditions where the insect can be found'
        self.valid_values = ""Valid values are 'Any except rain', 'Any weather', 'Rain only'""
        self.format = 'Weather condition should be in title case'
        self.examples = ['Any Except Rain', 'Any Weather', 'Rain Only']

    def cast(self, val):
        if str(val).title() in ['Any Except Rain', 'Any Weather', 'Rain Only']:
            return str(val).title()
        else:
            return None

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a file'
        self.valid_values = 'File name should be a string'
        self.format = 'File name should be in title case'
        self.examples = ['Ins46', 'Ins40', 'Ins10', 'Ins36', 'Ins24']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a file'
        self.valid_values = 'File name should be a string'
        self.format = 'File name should be in title case'
        self.examples = ['Ins46', 'Ins40', 'Ins10', 'Ins36', 'Ins24']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a file'
        self.valid_values = 'File name should be a string'
        self.format = 'File name should be in title case'
        self.examples = ['Ins46', 'Ins40', 'Ins10', 'Ins36', 'Ins24']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a file'
        self.valid_values = 'File name should be a string'
        self.format = 'File name should be in title case'
        self.examples = ['Ins46', 'Ins40', 'Ins10', 'Ins36', 'Ins24']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': index, 'totalcatchestounlock': index, 'spawnrates': index, 'internalid': index, 'name': insectname, 'sell': bells, 'wherehow': location, 'weather': weathercondition, 'iconfilename': filename, 'critterpediafilename': filename, 'furniturefilename': filename, 'uniqueentryid': filename}"
"class itemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Item'
        self.valid_values = 'Name should be a string that represents the name of an item'
        self.format = 'Name should be capitalized'
        self.examples = ['Magazine Rack', 'Mug', 'Laptop', 'Record Box', 'Desktop Computer']

    def cast(self, val):
        return str(val).title()

class color(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Color of an Item'
        self.valid_values = 'Color should be a string that represents a standard color'
        self.format = 'Color should be capitalized'
        self.examples = ['White', 'Black', 'Red', 'Pink', 'Blue']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class boolean(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val).title()

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in bells of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in bells units)'
        self.examples: list[str] = [10.0, 1.0, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        return float(val.replace(',', ''))

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'The price in bells of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in bells units)'
        self.examples: list[str] = [10.0, 1.0, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        return float(val.replace(',', ''))

class size(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of an Item'
        self.valid_values = 'Size should be a string that represents a standard size'
        self.format = ""Size should be of the form 'NxM'""
        self.examples = ['1x1', '2x1', '3x3']

    def cast(self, val):
        return str(val)

class version(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of the Game'
        self.valid_values = 'Version should be a string that represents a standard version'
        self.format = ""Version should be of the form 'N.N.N'""
        self.examples = ['1.0.0', '1.1.0', '1.2.0']

    def cast(self, val):
        return str(val)

class series(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Series of an Item'
        self.valid_values = 'Series should be a string that represents a standard series'
        self.format = 'Series should be capitalized'
        self.examples = ['Motherly', 'Throwback', 'Stars', 'Bamboo']

    def cast(self, val):
        return str(val).title()

class set(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Set of an Item'
        self.valid_values = 'Set should be a string that represents a standard set'
        self.format = 'Set should be capitalized'
        self.examples = ['Bear', 'Birthday', 'Pet', 'Cherry']

    def cast(self, val):
        return str(val).title()

class tag(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Tag of an Item'
        self.valid_values = 'Tag should be a string that represents a standard tag'
        self.format = 'Tag should be capitalized'
        self.examples = ['Dining', 'Study', 'Office', 'Kitchen Things', 'Toy']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': itemname, 'variation': color, 'diy': boolean, 'bodycustomize': boolean, 'patterncustomize': boolean, 'interact': boolean, 'outdoor': boolean, 'catalog': boolean, 'buy': price, 'sell': price, 'size': size, 'version': version, 'hhaseries': series, 'hhaset': set, 'tag': tag}"
"class songname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Song'
        self.valid_values = ""Name should be a string that is of the form 'Artist Song'""
        self.format = 'Only the first letter of the artist and song name should be capitalized'
        self.examples = ['Agent K.K.', 'K.K. Chorale', 'Bubblegum K.K.', 'Café K.K.', 'Comrade K.K.']

    def cast(self, val):
        return str(val).title()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in game currency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in game currency units) with no decimal places'
        self.unit = 'In game currency'
        self.examples = [3200, 800, 500, 1200, 100]

    def cast(self, val):
        if str(val).lower() == 'nfs':
            return float('nan')
        else:
            return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in game currency of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in game currency units) with no decimal places'
        self.unit = 'In game currency'
        self.examples = [3200, 800, 500, 1200, 100]

    def cast(self, val):
        if str(val).lower() == 'nfs':
            return float('nan')
        else:
            return float(val)

class size(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of the item'
        self.valid_values = ""Size should be a string that is of the form 'nXn'""
        self.format = ""Size should be a 3 character string, with numbers on either end and 'X' in the middle""
        self.examples = ['1x1', '1x2', '2x2', '3x3', '4x4']

    def cast(self, val):
        return str(val).lower()

class source(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of the item'
        self.valid_values = 'Source should be a string'
        self.format = 'Source should start with a capital letter'
        self.examples = ['K.K. concert, Nook Shopping Catalog', 'K.K. concert']

    def cast(self, val):
        return str(val).title()

class version(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of the game'
        self.valid_values = ""Version should be a string of the form 'n.n.n'""
        self.format = ""Version should be a string of the form 'n.n.n'""
        self.examples = ['1.0.0', '1.1.0', '1.2.0', '1.3.0', '1.4.0']

    def cast(self, val):
        return str(val)

class catalogstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Catalog status of the item'
        self.valid_values = ""Status should be one of three strings: 'For sale', 'Not for sale', 'Not in catalog'""
        self.format = 'Each word in the status should start with a capital letter'
        self.examples = ['For sale', 'Not for sale', 'Not in catalog']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of the song'
        self.valid_values = 'Filename should be a string'
        self.format = 'Filename should be a lowercase string'
        self.examples = ['mjk_Keiji', 'mjk_Sanbika', 'mjk_Idol', 'mjk_Paris', 'mjk_ShowaKayo']

    def cast(self, val):
        return str(val).lower()

class internalidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Internal ID of the item'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Internal ID should be a non-negative integer'
        self.examples = [2405, 2429, 2453, 2477, 4318]

    def cast(self, val):
        return int(val)

class uniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID of the item'
        self.valid_values = 'Unique Entry ID should be a string of alphanumeric characters'
        self.format = 'Unique Entry ID should be a string of alphanumeric characters'
        self.examples = ['omxkkikQ5jwtoGiXa', 'rijxxXt45dqkXze5A', 'ZgwCoTem6x9efZAnD', 'ZXwXi8YnFpks2RPuK', '5ufeoTSFwRxQTrXdq']

    def cast(self, val):
        return str(val)


MAPPING = {'name': songname, 'buy': price, 'sell': price, 'size': size, 'source': source, 'version': version, 'catalog': catalogstatus, 'filename': filename, 'internalid': internalidentifier, 'uniqueentryid': uniqueentryidentifier}"
"class itemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an Item'
        self.valid_values = 'Item names are strings that can take on any value'
        self.format = 'Item names should be strings with the first letter of each word capitalized'
        self.examples = ['Lost Item', 'What Was This Again?', 'Nook Miles Ticket', 'Black Lilies', 'Aries Fragment']

    def cast(self, val):
        return str(val).title()

class binaryvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise ValueError(f'Invalid value. Expected ""Yes"" or ""No"", but got {val}.')

class itemprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The price of an item in bells'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Item price should be a non-negative floating point number'
        self.examples: list = [200.0, 500.0, 300.0, 500.0, float('nan')]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif isinstance(val, str) and val.lower() == 'nfs':
            return float('nan')
        elif float(val) >= 0:
            return float(val)
        else:
            raise ValueError('Invalid value. Expected a non-negative number.')

class itemprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The price of an item in bells'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Item price should be a non-negative floating point number'
        self.examples: list = [200.0, 500.0, 300.0, 500.0, float('nan')]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif isinstance(val, str) and val.lower() == 'nfs':
            return float('nan')
        elif float(val) >= 0:
            return float(val)
        else:
            raise ValueError('Invalid value. Expected a non-negative number.')

class milesprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'The price of an item in Nook Miles'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Price should be a non-negative floating point number'
        self.examples: list = [2000.0, float('nan'), float('nan'), float('nan'), 2000.0]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif float(val) >= 0:
            return float(val)
        else:
            raise ValueError('Invalid value. Expected a non-negative number.')

class version(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Version of Animal Crossing'
        self.valid_values = ""Version numbers should be in the format 'X.X.X'""
        self.format = ""Version numbers should be strings formatted as 'X.X.X'""
        self.examples = ['1.0.0', '1.2.0', '1.1.0a']

    def cast(self, val):
        match_obj = re.match('[0-9]+(\\.[0-9]+){0,2}[a-z]*', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid version number.')


MAPPING = {'name': itemname, 'diy': binaryvalue, 'buy': itemprice, 'sell': itemprice, 'milesprice': milesprice, 'version': version}"
"class animalphotoidentifier(NumericSemanticType):

    def __init__(self):
        self.description = ""The id number of an animal's photo""
        self.valid_range = [0, 3127]
        self.dtype = int
        self.format = 'The id number should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class animalphotovariation(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""Variation of an animal's photo""
        self.valid_values = ""Valid variations are 'Natural wood', 'Dark wood', 'Pastel', 'White', 'Pop'""
        self.format = 'Variation should be one of the valid values'
        self.examples = ['Natural wood', 'Dark wood', 'Pastel', 'White', 'Pop']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            raise Exception('Invalid variation')

class kitcost(NumericSemanticType):

    def __init__(self):
        self.description = 'The cost of a kit in terms of in-game currency'
        self.valid_range = [1, 1]
        self.dtype = int
        self.format = 'The cost should be an integer'
        self.examples = [1, 1, 1, 1, 1]

    def cast(self, val):
        return int(val)

class sellprice(NumericSemanticType):

    def __init__(self):
        self.description = 'The selling price of an item in terms of in-game currency'
        self.valid_range = [10, 10]
        self.dtype = int
        self.format = 'The selling price should be an integer'
        self.examples = [10, 10, 10, 10, 10]

    def cast(self, val):
        return int(val)

class itemsize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The size of an item'
        self.valid_values = ""Valid sizes are '1x1'""
        self.format = 'Size should be one of the valid values'
        self.examples = ['1x1', '1x1', '1x1', '1x1', '1x1']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            raise Exception('Invalid size')


MAPPING = {'unnamed0': animalphotoidentifier, 'variation': animalphotovariation, 'kitcost': kitcost, 'sell': sellprice, 'size': itemsize}"
"class postername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Poster'
        self.valid_values = ""Name should be a string that is of the form '<Character's> poster'""
        self.format = ""Only the first letter of the character's name should be capitalized""
        self.examples = [""Admiral's poster"", ""Agent S's poster"", ""Agnes's poster"", ""Al's poster"", ""Alfonso's poster""]

    def cast(self, val):
        return str(val).title()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a poster'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.units = 'In Bells'
        self.examples = [1000, 250, 500, 750, 1000]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a poster'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.units = 'In Bells'
        self.examples = [1000, 250, 500, 750, 1000]

    def cast(self, val):
        return int(val)

class size(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of a Poster'
        self.valid_values = ""Size should be a string representing the dimensions in the form of 'width x height'""
        self.format = ""Size is formatted as '1x1'""
        self.examples = ['1x1', '1x1', '1x1', '1x1', '1x1']

    def cast(self, val):
        return str(val)

class source(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Source of a Poster'
        self.valid_values = 'Source should be a string representing the source of the poster'
        self.format = 'Source is formatted as ""Nook\'s Shopping - Posters""'
        self.examples = [""Nook's Shopping - Posters"", ""Nook's Shopping - Posters"", ""Nook's Shopping - Posters"", ""Nook's Shopping - Posters"", ""Nook's Shopping - Posters""]

    def cast(self, val):
        return str(val)

class version(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Version of a Poster'
        self.valid_values = 'Version should be a string representing the version of the poster'
        self.format = ""Version is formatted as '1.0.0'""
        self.examples = ['1.0.0', '1.0.0', '1.0.0', '1.0.0', '1.0.0']

    def cast(self, val):
        return str(val)

class catalog(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Catalog of a Poster'
        self.valid_values = 'Catalog should be a string representing the catalog of the poster'
        self.format = ""Catalog is formatted as 'For sale'""
        self.examples = ['For sale', 'For sale', 'For sale', 'For sale', 'For sale']

    def cast(self, val):
        return str(val)

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename of a Poster'
        self.valid_values = 'Filename should be a string representing the filename of the poster'
        self.format = ""Filename should start with 'PosterNpcNml'""
        self.examples = ['PosterNpcNmlBrd06', 'PosterNpcNmlSqu05', 'PosterNpcNmlPig17', 'PosterNpcNmlGor08', 'PosterNpcNmlCrd00']

    def cast(self, val):
        return str(val)

class internalidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The internal ID of a poster'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Internal ID should be formatted as an integer number'
        self.examples = [10814, 10425, 10401, 10590, 10382]

    def cast(self, val):
        return int(val)

class uniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID of a Poster'
        self.valid_values = 'Unique Entry ID should be a string representing the unique entry id of the poster'
        self.format = 'Unique Entry ID should be a string of alphanumeric characters'
        self.examples = ['3LW8HyqLZTJRaGQT9', 'bZu92nbNfGmQvp54D', '2wZBfe8Ed7QMvQ8tX', 'sat2PG8L97DymZbQw', 'NjW35Zc7MnTipYZbg']

    def cast(self, val):
        return str(val)


MAPPING = {'name': postername, 'buy': price, 'sell': price, 'size': size, 'source': source, 'version': version, 'catalog': catalog, 'filename': filename, 'internalid': internalidentifier, 'uniqueentryid': uniqueentryidentifier}"
"class reactionsourceidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier for reaction data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Reaction source ID should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class reactionname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a reaction'
        self.valid_values = 'Reaction names should be string values that describe the reaction'
        self.format = 'Reaction names should be title-cased strings'
        self.examples = ['Aggravation', 'Agreement', 'Amazed', 'Apologetic', 'Bashfulness']

    def cast(self, val):
        return str(val).title()

class reactionsource(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Source of a reaction'
        self.valid_values = 'Reaction sources should be string values that describe the type of character that gives the reaction'
        self.format = 'Reaction sources should be title-cased strings'
        self.examples = ['Peppy', 'Cranky', 'Snooty', 'Big Sister', 'Lazy']

    def cast(self, val):
        return str(val).title()

class reactionsourceuniqueidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for reaction data'
        self.valid_values = 'Reaction source unique IDs should be string values'
        self.format = 'Reaction source unique IDs should be alphanumeric strings'
        self.examples = ['6suhKYAAhh5QMKt64', '7smqwK9J7eFBxta28', 'vosig4bbr4kPq57AT', 'jBKsQYCAd7PtymQeB', 'wzvKbFrEJCseTohoz']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': reactionsourceidentifier, 'name': reactionname, 'source': reactionsource, 'uniqueentryid': reactionsourceuniqueidentifier}"
"class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Product'
        self.valid_values = ""Name should be a string that is of the form 'first word second word'""
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Acorn Pochette', 'Acoustic Guitar', 'Angled Signpost', 'Apple Chair', 'Apple Dress']

    def cast(self, val):
        return str(val).title()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Bells units) with no decimal places'
        self.units = 'In Bells'
        self.examples: list[str] = [200, 280, 300, 500, 1000]

    def cast(self, val):
        if val == 'NFS':
            return float('nan')
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Bells units) with no decimal places'
        self.units = 'In Bells'
        self.examples: list[str] = [200, 280, 300, 500, 1000]

    def cast(self, val):
        if val == 'NFS':
            return float('nan')
        return float(val)

class milesprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Miles of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in Miles units) with no decimal places'
        self.units = 'In Miles'
        self.examples: list[str] = [800, 1000, 2000, 5000]

    def cast(self, val):
        return float(val) if pd.notnull(val) else float('nan')

class source(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of an item'
        self.valid_values = ""Source should be a string that is of the form 'first word second word'""
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Balloons', 'All Villagers', 'Celeste', 'Jock Villagers', 'Lazy Villagers']

    def cast(self, val):
        return str(val).title()

class version(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Version of Animal Crossing'
        self.valid_values = ""Version should be a string in the form 'X.Y.Z'""
        self.format = ""Version should be a string in the form 'X.Y.Z'""
        self.examples = ['1.0.0', '1.1.0a', '1.2.0']

    def cast(self, val):
        return str(val)

class category(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Category of an item'
        self.valid_values = ""Category should be a string in the form 'first word second word'""
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Housewares', 'Wall-mounted', 'Miscellaneous', 'Headwear', 'Wallpaper']

    def cast(self, val):
        return str(val).title()


MAPPING = {'name': productname, 'buy': price, 'sell': price, 'milesprice': milesprice, 'source': source, 'version': version, 'category': category}"
"class rugname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Rug'
        self.valid_values = ""Name should be a string that is in the form of 'adjective noun'""
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Aluminum Rug', 'Apple Rug', 'Bell-bag Rug', 'Black Blocks Rug', 'Black Wooden-deck Rug']

    def cast(self, val):
        return str(val).title()

class diy(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Whether the rug is do-it-yourself'
        self.valid_values = ""The column should either take the value 'Yes' or 'No'""
        self.format = ""The values should be either 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def cast(self, val):
        if str(val).lower() == 'yes':
            return 'Yes'
        elif str(val).lower() == 'no':
            return 'No'
        else:
            raise Exception('Invalid value')

class rugprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a rug'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [1500, 2000, 1000, 500, 10000]

    def cast(self, val):
        if str(val).lower() == 'nfs':
            return None
        else:
            return int(val)

class rugprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of a rug'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [1500, 2000, 1000, 500, 10000]

    def cast(self, val):
        if str(val).lower() == 'nfs':
            return None
        else:
            return int(val)

class rugsize(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Size of a Rug'
        self.valid_values = ""Size should be in the form 'numberxnumber'""
        self.format = ""The size should be in the form 'numberxnumber'""
        self.examples = ['3x3', '2x1', '4x3', '3x2', '5x5']

    def cast(self, val):
        match_obj = re.match('\\d+x\\d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid rug size')

class mileprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Nook Miles of a rug'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer number (in Nook Miles units)'
        self.unit = 'In Nook Miles'
        self.examples = [950, 1000, 1050, 1200, 900]

    def cast(self, val):
        if math.isnan(float(val)):
            return None
        else:
            return int(val)

class rugsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of a Rug'
        self.valid_values = 'Source should be a string'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Saharah', 'Crafting', 'Nook Miles Shop', 'Mom', 'Fishing Tourney']

    def cast(self, val):
        return str(val).title()

class catalog(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Whether the rug is for sale'
        self.valid_values = ""The column should either take the value 'For sale' or 'Not for sale'""
        self.format = ""The values should be either 'For sale' or 'Not for sale'""
        self.examples = ['For sale', 'Not for sale', 'For sale', 'Not for sale', 'For sale']

    def cast(self, val):
        if str(val).lower() == 'for sale':
            return 'For sale'
        elif str(val).lower() == 'not for sale':
            return 'Not for sale'
        else:
            raise Exception('Invalid value')


MAPPING = {'name': rugname, 'diy': diy, 'buy': rugprice, 'sell': rugprice, 'size': rugsize, 'milesprice': mileprice, 'source': rugsource, 'catalog': catalog}"
"class itemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an item'
        self.valid_values = 'Name should be a string that describes the item'
        self.format = 'Only the first letter of each word in the item name should be capitalized'
        self.examples = ['Antique Boots', 'Armor Shoes', 'Babouches', 'Water Sandals', 'Rain Boots']

    def cast(self, val):
        return str(val).title()

class color(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color of an item'
        self.valid_values = 'Color should be a string that describes the color of the item'
        self.format = 'Only the first letter of the color should be capitalized'
        self.examples = ['Black', 'Red', 'Blue', 'Green', 'Pink']

    def cast(self, val):
        return str(val).title()

class itemprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a integer number (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [1080, 350, 1300, 1800, 1260]

    def cast(self, val):
        if val == 'NFS':
            return float('nan')
        return int(val)

class itemprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a integer number (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [1080, 350, 1300, 1800, 1260]

    def cast(self, val):
        if val == 'NFS':
            return float('nan')
        return int(val)

class availability(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Availability of an item'
        self.valid_values = 'Availability should be a string that describes when the item is available'
        self.format = 'Only the first letter of each word in the availability should be capitalized'
        self.examples = ['All Year', 'Summer', 'Winter']

    def cast(self, val):
        return str(val).title()

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'File name of an image'
        self.valid_values = ""File name should be a string that has the form 'ImageTypeNumber'""
        self.format = 'The file name should start with a string describing the image, followed by a number'
        self.examples = ['ShoesKneeAntique0', 'ShoesSandalComfort7', 'ShoesKneeKnightIron', 'ShoesSandalBaboush0', 'ShoesSandalBaboush1']

    def cast(self, val):
        return str(val)


MAPPING = {'name': itemname, 'variation': color, 'buy': itemprice, 'sell': itemprice, 'seasonalavailability': availability, 'filename': filename}"
"class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a product'
        self.valid_values = 'A string representing the name of the product'
        self.format = 'Product names should be in lowercase'
        self.examples = ['mixed-tweed socks', 'tube socks', 'no-show socks', 'simple-accent socks', 'argyle crew socks']

    def cast(self, val):
        return str(val).lower()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color or style variation of a product'
        self.valid_values = 'A string representing the color or style variation of the product'
        self.format = 'Product variation names should be in lowercase'
        self.examples = ['blue', 'green', 'purple', 'pink', 'red']

    def cast(self, val):
        return str(val).lower()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color or style variation of a product'
        self.valid_values = 'A string representing the color or style variation of the product'
        self.format = 'Product variation names should be in lowercase'
        self.examples = ['blue', 'green', 'purple', 'pink', 'red']

    def cast(self, val):
        return str(val).lower()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color or style variation of a product'
        self.valid_values = 'A string representing the color or style variation of the product'
        self.format = 'Product variation names should be in lowercase'
        self.examples = ['blue', 'green', 'purple', 'pink', 'red']

    def cast(self, val):
        return str(val).lower()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color or style variation of a product'
        self.valid_values = 'A string representing the color or style variation of the product'
        self.format = 'Product variation names should be in lowercase'
        self.examples = ['blue', 'green', 'purple', 'pink', 'red']

    def cast(self, val):
        return str(val).lower()

class productvariation(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Color or style variation of a product'
        self.valid_values = 'A string representing the color or style variation of the product'
        self.format = 'Product variation names should be in lowercase'
        self.examples = ['blue', 'green', 'purple', 'pink', 'red']

    def cast(self, val):
        return str(val).lower()

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of a product'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [720, 600, 480, 840, 940]

    def cast(self, val):
        return int(val)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of a product'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [720, 600, 480, 840, 940]

    def cast(self, val):
        return int(val)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Price of a product'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.examples = [720, 600, 480, 840, 940]

    def cast(self, val):
        return int(val)

class availability(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Availability of a product'
        self.valid_values = ""Either 'For sale' or 'Not for sale'""
        self.format = ""Availability should be a string in the format 'For sale' or 'Not for sale'""
        self.examples = ['For sale', 'Not for sale']

    def cast(self, val):
        return str(val)


MAPPING = {'name': productname, 'source': productname, 'version': productname, 'filename': productname, 'internalid': productname, 'uniqueentryid': productname, 'variation': productvariation, 'size': productvariation, 'seasonalavailability': productvariation, 'style': productvariation, 'labelthemes': productvariation, 'diy': booleanvalue, 'mannequinpiece': booleanvalue, 'villagerequippable': booleanvalue, 'buy': price, 'sell': price, 'milesprice': price, 'catalog': availability}"
"class toolname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a tool'
        self.valid_values = 'Tool name should be a string'
        self.format = 'Tool names should be stored as strings'
        self.examples = ['axe', 'bamboo wand', 'bug wand', 'Bunny Day wand', 'cherry-blossom wand']

    def cast(self, val):
        return str(val)

class diytool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val) if val in self.valid_values else 'No'

class customizetool(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val) if val in self.valid_values else 'No'

class tooluses(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of uses of a tool'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tool uses should be a positive integer'
        self.examples = [30, 100, 20, 60, 10]

    def cast(self, val):
        return int(val) if val != 'Unlimited' else float('inf')

class toolsize(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of a tool'
        self.valid_values = ""Tool size should be '1x1'""
        self.format = ""Tool size should be stored as string '1x1'""
        self.examples = ['1x1', '1x1', '1x1', '1x1', '1x1']

    def cast(self, val):
        return str(val) if val == '1x1' else 'Invalid'

class toolprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a tool'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [2500, 900, 2400, 800]

    def cast(self, val):
        return int(val) if val != 'NFS' else 0

class toolprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a tool'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer (in Bells units)'
        self.unit = 'In Bells'
        self.examples = [2500, 900, 2400, 800]

    def cast(self, val):
        return int(val) if val != 'NFS' else 0


MAPPING = {'name': toolname, 'diy': diytool, 'customize': customizetool, 'uses': tooluses, 'size': toolsize, 'buy': toolprice, 'sell': toolprice}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An identifier for a game entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Game ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class clothingname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a clothing item in a game'
        self.valid_values = 'Any string'
        self.format = 'All words in the clothing name should start with a capital letter'
        self.examples = ['A Tee', 'Acid-Washed Jacket', 'After-School Jacket', 'Thick-Stripes Shirt', 'Fitness Tank']

    def cast(self, val):
        return str(val).title()

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if val.lower() == 'yes':
            return 'Yes'
        elif val.lower() == 'no':
            return 'No'
        else:
            raise ValueError(f'Invalid value {val} for BooleanSemanticType')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be a positive integer'
        self.unit = 'In Bells'
        self.examples = [560, 1680, 1050, 420, 262]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity in a game'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be a positive integer'
        self.unit = 'In Bells'
        self.examples = [560, 1680, 1050, 420, 262]

    def cast(self, val):
        return int(val)

class sizemeasure(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Size of an entity in a game'
        self.valid_values = ""A string in the format '1x1', '2x2', etc.""
        self.format = ""Size should be represented as 'NxN' where N is a positive integer""
        self.examples = ['1x1', '2x2', '3x3', '4x4', '5x5']

    def cast(self, val):
        match_obj = re.match('[1-9]x[1-9]', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid size measure')

class version(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Version of a game'
        self.valid_values = ""Any string in the format '1.0.0', '2.1.0', etc.""
        self.format = ""Version should be represented as 'N.N.N' where N is a non-negative integer""
        self.examples = ['1.0.0', '1.2.0', '2.0.0', '2.1.0', '3.0.0']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': gameidentifier, 'name': clothingname, 'diy': booleanvalue, 'buy': price, 'sell': price, 'size': sizemeasure, 'version': version}"
"class umbrellaitemname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an umbrella item in Animal Crossing'
        self.valid_values = 'Names should be strings'
        self.format = 'Names should be properly capitalized strings'
        self.examples = ['Apple Umbrella', 'Bat Umbrella', 'Beach Umbrella', 'Bear Umbrella', 'Black Chic Umbrella']

    def cast(self, val):
        return str(val).title()

class umbrellaitemavailability(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid availability value')

class umbrellaitemprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of an umbrella item in Animal Crossing'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Prices should be integers'
        self.examples: list = [840, 770, 1570, 1620, 192]

    def cast(self, val):
        if val == 'NFS':
            return 0
        return int(val)

class umbrellaitemprice(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Price of an umbrella item in Animal Crossing'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Prices should be integers'
        self.examples: list = [840, 770, 1570, 1620, 192]

    def cast(self, val):
        if val == 'NFS':
            return 0
        return int(val)

class umbrellaitemsource(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of an umbrella item in Animal Crossing'
        self.valid_values = 'Source should be a string'
        self.format = 'Source should be a properly capitalized string'
        self.examples = [""Nook's Cranny"", 'Crafting', 'Dodo Airlines', 'Fishing Tourney', 'Bug-Off']

    def cast(self, val):
        return str(val).title()

class umbrellaitemforsale(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['For sale', 'Not for sale']

    def cast(self, val):
        if str(val).lower() in ['for sale', 'not for sale']:
            return str(val).title()
        else:
            raise Exception('Invalid for sale value')


MAPPING = {'name': umbrellaitemname, 'diy': umbrellaitemavailability, 'buy': umbrellaitemprice, 'sell': umbrellaitemprice, 'source': umbrellaitemsource, 'catalog': umbrellaitemforsale}"
"class entityidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Entity ID must be a positive integer, represented as an integer.'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class villagername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Names of the villagers in Animal Crossing'
        self.valid_values = 'Names should be strings, and may contain alphanumeric characters and spaces'
        self.format = 'Names should be capitalized'
        self.examples = ['Admiral', 'Agent S', 'Agnes', 'Al', 'Alfonso']

    def cast(self, val):
        return str(val).title()

class species(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Species of the villagers in Animal Crossing'
        self.valid_values = 'Species should be a string that is one of the 35 species in the game'
        self.format = 'Species should be capitalized'
        self.examples = ['Bird', 'Squirrel', 'Pig', 'Gorilla', 'Alligator']

    def cast(self, val):
        return str(val).title()

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        if str(val).lower() not in ['male', 'female']:
            raise Exception('Invalid gender')
        return str(val).title()

class personality(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Personality of the villagers in Animal Crossing'
        self.valid_values = 'Personality should be a string that is one of the 8 personalities in the game'
        self.format = 'Personality should be capitalized'
        self.examples = ['Lazy', 'Normal', 'Cranky', 'Snooty', 'Jock']

    def cast(self, val):
        return str(val).title()

class hobby(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Hobby of the villagers in Animal Crossing'
        self.valid_values = 'Hobby should be a string that is one of the 6 hobbies in the game'
        self.format = 'Hobby should be capitalized'
        self.examples = ['Nature', 'Fitness', 'Fashion', 'Play', 'Education']

    def cast(self, val):
        return str(val).title()

class birthday(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Birthday of the villagers in Animal Crossing'
        self.valid_values = ""Birthday should be a string in the format 'DD-MMM'""
        self.format = ""Birthday should be a string in the format 'DD-MMM'""
        self.examples = ['27-Jan', '2-Jul', '21-Apr', '18-Oct', '9-Jun']

    def cast(self, val):
        return datetime.strptime(str(val), '%d-%b').strftime('%d-%b')

class catchphrase(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Catchphrase of the villagers in Animal Crossing'
        self.valid_values = 'Catchphrase should be a string'
        self.format = 'Catchphrase should be a string'
        self.examples = ['aye aye', 'sidekick', 'snuffle', 'ayyyeee', ""it'sa me""]

    def cast(self, val):
        return str(val)

class favoritesong(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Favorite song of the villagers in Animal Crossing'
        self.valid_values = 'Favorite song should be a string'
        self.format = 'Favorite song should be a string'
        self.examples = ['Steep Hill', 'Go K.K. Rider', 'K.K. House', 'Go K.K. Rider', 'Forest Life']

    def cast(self, val):
        return str(val)

class wallpaper(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Wallpaper preference of the villagers in Animal Crossing'
        self.valid_values = 'Wallpaper should be a string'
        self.format = 'Wallpaper should be a string'
        self.examples = ['dirt-clod wall', 'concrete wall', 'gray molded-panel wall', 'concrete wall', 'yellow playroom wall']

    def cast(self, val):
        return str(val)

class flooring(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Flooring preference of the villagers in Animal Crossing'
        self.valid_values = 'Flooring should be a string'
        self.format = 'Flooring should be a string'
        self.examples = ['tatami', 'colorful tile flooring', 'arabesque flooring', 'green rubber flooring', 'green honeycomb tile']

    def cast(self, val):
        return str(val)

class filename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Filename associated with the villagers in Animal Crossing'
        self.valid_values = 'Filename should be a string'
        self.format = 'Filename should be a string'
        self.examples = ['brd06', 'squ05', 'pig17', 'gor08', 'crd00']

    def cast(self, val):
        return str(val)

class uniqueentryidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique entry ID of the villagers in Animal Crossing'
        self.valid_values = 'Unique entry ID should be a string'
        self.format = 'Unique entry ID should be a string'
        self.examples = ['B3RyfNEqwGmcccRC3', 'SGMdki6dzpDZyXAw5', 'jzWCiDPm9MqtCfecP', 'LBifxETQJGEaLhBjC', 'REpd8KxB8p9aGBRSE']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': entityidentifier, 'name': villagername, 'species': species, 'gender': gender, 'personality': personality, 'hobby': hobby, 'birthday': birthday, 'catchphrase': catchphrase, 'favoritesong': favoritesong, 'wallpaper': wallpaper, 'flooring': flooring, 'filename': filename, 'uniqueentryid': uniqueentryidentifier}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be represented as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.valid_values = 'Name should be a string'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def cast(self, val):
        return str(val).title()

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class booleanvalue(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'true', 1]:
            return 'Yes'
        elif str(val).lower() in ['no', 'false', 0]:
            return 'No'

class cost(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The cost of an entity in bells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Cost should be represented as a floating point number (in bells units)'
        self.unit = 'In bells'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val)

class cost(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The cost of an entity in bells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Cost should be represented as a floating point number (in bells units)'
        self.unit = 'In bells'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val)

class cost(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The cost of an entity in bells'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Cost should be represented as a floating point number (in bells units)'
        self.unit = 'In bells'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': identifier, 'internalid': identifier, 'name': name, 'variation': name, 'bodytitle': name, 'pattern': name, 'patterntitle': name, 'size': name, 'source': name, 'version': name, 'hhaseries': name, 'hhaset': name, 'tag': name, 'lightingtype': name, 'catalog': name, 'filename': name, 'variantid': name, 'uniqueentryid': name, 'diy': booleanvalue, 'bodycustomize': booleanvalue, 'patterncustomize': booleanvalue, 'interact': booleanvalue, 'outdoor': booleanvalue, 'doordeco': booleanvalue, 'kitcost': cost, 'buy': cost, 'sell': cost}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class wallpapername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Wallpaper'
        self.valid_values = 'Name should be a string that represents the name of a wallpaper'
        self.format = 'Name should be stored as a string'
        self.examples = ['abstract wall', 'ancient wall', 'apple wall', 'aqua tile wall', 'arched-window wall']

    def cast(self, val):
        return str(val)

class booleanenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Boolean Enum'
        self.valid_values = ""Either 'Yes' or 'No'""
        self.format = 'Stored as a string'
        self.examples = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes':
            return 'Yes'
        elif str(val).lower() == 'no':
            return 'No'
        else:
            raise Exception('Invalid value')

class booleanenum(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Boolean Enum'
        self.valid_values = ""Either 'Yes' or 'No'""
        self.format = 'Stored as a string'
        self.examples = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() == 'yes':
            return 'Yes'
        elif str(val).lower() == 'no':
            return 'No'
        else:
            raise Exception('Invalid value')

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in Bells of an item'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.unit = 'In Bells'
        self.examples = [3000, 1780, 1880, 1720, 1560]

    def cast(self, val):
        num = int(val)
        return num

class sources(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Source of a Wallpaper'
        self.valid_values = 'Name should be a string that represents the source of a wallpaper'
        self.format = 'Name should be stored as a string'
        self.examples = [""Nook's Cranny"", 'Saharah', 'Crafting', 'Wedding Season', 'Bug-Off']

    def cast(self, val):
        return str(val)

class availability(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Availability of an item'
        self.valid_values = ""Either 'For sale' or 'Not for sale'""
        self.format = 'Stored as a string'
        self.examples = ['For sale', 'Not for sale']

    def cast(self, val):
        if str(val).lower() == 'for sale':
            return 'For sale'
        elif str(val).lower() == 'not for sale':
            return 'Not for sale'
        else:
            raise Exception('Invalid value')


MAPPING = {'unnamed0': identifier, 'name': wallpapername, 'vfx': booleanenum, 'diy': booleanenum, 'buy': price, 'source': sources, 'catalog': availability}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Index number of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index number should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Identifier for the data row'
        self.valid_values = ""Identifier should be a string starting with 'id' followed by a two-digit number""
        self.format = ""Identifier should be a string of form 'idXX', where XX is a two-digit number""
        self.examples = ['id01', 'id02', 'id03', 'id04', 'id05']

    def cast(self, val):
        match_obj = re.match('id[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid identifier')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Age should be a positive floating point number'
        self.examples = [2.0, 9.0, 27.0, 75.0, 24.0]

    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid age')

class city(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'City of residence'
        self.valid_values = ""City should be one of the specified cities in South Korea: ['경기', '서울', '대구', '부산']""
        self.format = 'City should be a string in Korean'
        self.examples = ['경기', '서울', '대구', '부산']

    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid city')


MAPPING = {'unnamed0': indexnumber, 'id': identifier, 'age': age, 'city': city}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of Rows'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integers from 0 to inf'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date in Year-Month-Day format'
        self.valid_values = 'Dates should be in the format YYYY-MM-DD'
        self.format = 'Dates should be string in the format YYYY-MM-DD'
        self.examples = ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05']

    def cast(self, val):
        try:
            datetime_object = datetime.strptime(val, '%Y-%m-%d')
            return datetime_object.strftime('%Y-%m-%d')
        except ValueError:
            return 'Invalid Date format'

class sales(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Sales in Korean Won'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be a floating point number'
        self.unit = 'In KRW'
        self.examples = [22711525, 36779, 13943875, 8088593, 2395374]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class pv(NumericSemanticType):

    def __init__(self):
        self.description = 'Page views'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Page views should be an integer from 0 to inf'
        self.examples = [397349, 3969, 373890, 142054, 190684]

    def cast(self, val):
        return int(val)

class uv(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique views'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Unique views should be a floating point number from 0 to inf'
        self.examples = [4421.0, 2289.0, float('nan'), 2157.0, float('nan')]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class events(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return None


MAPPING = {'unnamed0': index, 'date': date, 'sales': sales, 'pv': pv, 'uv': uv, 'events': events}"
"class patientidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = ""Patient's ID""
        self.valid_values = ""ID should be a string starting with 'p' followed by numerals""
        self.format = ""Patient ID must be a string in the format 'pnnn'""
        self.examples = ['p001', 'p002', 'p003', 'p004', 'p005']

    def cast(self, val):
        return str(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        return str(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a positive integer'
        self.examples: list[int] = [33, 39, 70, 41, 48]

    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure measurement'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a positive floating point number'
        self.unit = 'In mmHg'
        self.examples: list[float] = [149, 168, 176, 169, 160]

    def cast(self, val):
        return float(val)

class bloodpressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Blood pressure measurement'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Blood pressure should be a positive floating point number'
        self.unit = 'In mmHg'
        self.examples: list[float] = [149, 168, 176, 169, 160]

    def cast(self, val):
        return float(val)


MAPPING = {'id': patientidentifier, 'sex': gender, 'age': age, 'bppre': bloodpressure, 'bppost': bloodpressure}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class date(NumericSemanticType):

    def __init__(self):
        self.description = 'Date value'
        self.valid_range = [20221129, 20221225]
        self.dtype = int
        self.format = 'Date should be an integer of the form YYYYMMDD'
        self.examples = [20221129, 20221130, 20221201, 20221201, 20221202]

    def cast(self, val):
        return int(val)

class hour(NumericSemanticType):

    def __init__(self):
        self.description = 'Hour of the day'
        self.valid_range = [8, 17]
        self.dtype = int
        self.format = 'Hour should be an integer between 8 (inclusive) and 17 (inclusive)'
        self.examples = [13, 12, 14, 16, 17]

    def cast(self, val):
        return int(val)

class menu(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Menu item'
        self.valid_values = 'Menu item should be a string that represents a coffee drink'
        self.format = 'Menu item should be capitalized'
        self.examples = ['딸기라떼', '카페라떼', '바닐라라떼', '초코라떼', '모카라떼']

    def cast(self, val):
        return str(val).strip().capitalize()

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in KRW of a menu item'
        self.valid_range = [2000, 4000]
        self.dtype = int
        self.format = 'Price should be an integer representing the price in KRW'
        self.unit = 'In KRW'
        self.examples = [4000, 3000, 3500, 3500, 3500]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'date': date, 'hour': hour, 'menu': menu, 'price': price}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.valid_values = 'Car Model should be a string that represents a unique model of a car'
        self.format = 'Car model should be capitalized with a leading space'
        self.examples = [' A3', ' Q3', ' A4', ' A1', ' A5']

    def cast(self, val):
        return str(val).title().strip()

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [12500.0, 16500.0, 11000.0, 16800.0, 17300.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cartransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Transmission'
        self.valid_values = ""Transmission should be one of ['Manual', 'Semi-Auto', 'Automatic']""
        self.format = 'Transmission type should be capitalized'
        self.examples = ['Manual', 'Semi-Auto', 'Automatic']

    def cast(self, val):
        if str(val).title() in self.examples:
            return str(val).title()
        else:
            raise Exception('Invalid transmission type')

class carmileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Mileage of a car in miles'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mileage should be a positive floating point number'
        self.examples = [15735.0, 36203.0, 29946.0, 25952.0, 1998.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Mileage cannot be negative')
        return num

class cartax(NumericSemanticType):

    def __init__(self):
        self.description = 'Tax of a car in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be a positive floating point number in USD'
        self.examples = [150.0, 20.0, 30.0, 145.0, 145.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Tax cannot be negative')
        return num

class carmpg(NumericSemanticType):

    def __init__(self):
        self.description = 'Miles per gallon of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be a positive floating point number'
        self.examples = [55.4, 64.2, 55.4, 67.3, 49.6]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('MPG cannot be negative')
        return num

class carenginesize(NumericSemanticType):

    def __init__(self):
        self.description = 'Engine size of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be a positive floating point number'
        self.examples = [1.4, 2.0, 1.4, 2.0, 1.0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Engine size cannot be negative')
        return num


MAPPING = {'model': carmodel, 'price': carprice, 'transmission': cartransmission, 'mileage': carmileage, 'tax': cartax, 'mpg': carmpg, 'enginesize': carenginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Car model should be a string, preferably with the first letter capitalized'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['3 Series', '1 Series', '2 Series', '5 Series', '4 Series']

    def cast(self, val):
        return str(val).strip().title()

class year(NumericSemanticType):

    def __init__(self):
        self.description = ""Year of the car's model""
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1996, 2016, 2017, 2019, 2020]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in GBP of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer (in GBP units)'
        self.units = 'In GBP'
        self.examples = [1200, 14950, 20462, 27940, 123456]

    def cast(self, val):
        return int(val)

class transmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of car transmission'
        self.valid_values = ""The car should either be 'Semi-Auto', 'Automatic' or 'Manual'""
        self.format = 'Each word should be capitalized'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual']

    def cast(self, val):
        return str(val).strip().title()

class mileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be formatted as an integer'
        self.examples = [1, 5529, 18347, 38206, 214000]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of fuel used by the car'
        self.valid_values = ""The car should use either 'Diesel', 'Petrol', 'Hybrid', 'Other' or 'Electric' fuel""
        self.format = 'Each word should be capitalized'
        self.examples = ['Diesel', 'Petrol', 'Hybrid', 'Other', 'Electric']

    def cast(self, val):
        return str(val).strip().title()

class tax(NumericSemanticType):

    def __init__(self):
        self.description = 'Tax on a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tax should be formatted as an integer'
        self.examples = [0, 135, 145, 580]

    def cast(self, val):
        return int(val)

class mpg(NumericSemanticType):

    def __init__(self):
        self.description = 'Miles Per Gallon (MPG) of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be formatted as a float'
        self.examples = [5.5, 45.6, 53.3, 62.8, 470.8]

    def cast(self, val):
        return float(val)

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a float'
        self.units = 'In Litres'
        self.examples = [0.0, 2.0, 2.0, 2.0, 6.6]

    def cast(self, val):
        return float(val)


MAPPING = {'model': carmodel, 'year': year, 'price': price, 'transmission': transmission, 'mileage': mileage, 'fueltype': fueltype, 'tax': tax, 'mpg': mpg, 'enginesize': enginesize}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'An index identifier for the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index identifiers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid index identifier')
        return num

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.valid_values = 'Model should be a string that describes a car model'
        self.format = 'First character should be a space followed by the model name capitalized'
        self.examples = [' C Class']

    def cast(self, val):
        return str(val).strip().title()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture of a car'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year of manufacture should be an integer'
        self.examples = [2020, 2019, 2018, 2017, 2016]

    def cast(self, val):
        num = int(val)
        if num < 1886 or num > datetime.now().year:
            raise Exception('Invalid year of manufacture')
        return num

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples: list = [30495.0, 29989.0, 37899.0, 30399.0, 29899.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cartransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission type of a car'
        self.valid_values = ""Should be one of 'Semi-Auto', 'Automatic', 'Manual', 'Other'""
        self.format = 'Each word should be capitalized'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual', 'Other']

    def cast(self, val):
        val = str(val).title()
        if val not in self.examples:
            raise Exception('Invalid car transmission type')
        return val

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mileage should be formatted as a floating point number with no decimal places'
        self.unit = 'In miles'
        self.examples: list = [1200.0, 1000.0, 500.0, 5000.0, 4500.0]

    def cast(self, val):
        num = float(val)
        return round(num)

class carfueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel type of a car'
        self.valid_values = ""Should be one of 'Diesel', 'Petrol', 'Hybrid', 'Other'""
        self.format = 'Should be capitalized'
        self.examples = ['Diesel', 'Petrol', 'Hybrid', 'Other']

    def cast(self, val):
        val = str(val).capitalize()
        if val not in self.examples:
            raise Exception('Invalid car fuel type')
        return val

class carenginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The engine size of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number with one decimal place'
        self.unit = 'In litres'
        self.examples: list = [2.0, 1.5, 2.1, 2.2, 2.3]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'unnamed0': indexidentifier, 'model': carmodel, 'year': yearofmanufacture, 'price': price, 'transmission': cartransmission, 'mileage': carmileage, 'fueltype': carfueltype, 'enginesize': carenginesize}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a Car'
        self.valid_values = 'Model name should be a string'
        self.format = 'First character should be capitalized'
        self.examples = [' Focus', ' Mustang', ' Fiesta', ' Puma', ' Kuga']

    def cast(self, val):
        return str(val).title().strip()

class manufactureyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year a car was manufactured'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Manufacture year should be a four-digit integer'
        self.examples = [2002, 2010, 2015, 2020]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.unit = 'In local currency'
        self.examples = [495, 10489, 13299, 16987, 54995]

    def cast(self, val):
        return int(val)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission type of a car'
        self.valid_values = ""Should be one of ['Manual', 'Automatic', 'Semi-Auto']""
        self.format = 'All characters should be capitalized'
        self.examples = ['Manual', 'Automatic', 'Semi-Auto']

    def cast(self, val):
        return str(val).title()

class mileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be an integer'
        self.examples = [1, 9137, 15944, 30000, 177644]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel type of a car'
        self.valid_values = ""Should be one of ['Petrol', 'Diesel']""
        self.format = 'First character should be capitalized'
        self.examples = ['Petrol', 'Diesel']

    def cast(self, val):
        return str(val).title()

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = ""Size of a car's engine""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be a floating point number'
        self.unit = 'In liters'
        self.examples = [0.0, 1.0, 1.5, 1.6, 2.5]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'model': carmodel, 'year': manufactureyear, 'price': price, 'transmission': transmissiontype, 'mileage': mileage, 'fueltype': fueltype, 'enginesize': enginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car model'
        self.valid_values = 'Car model name which is a string'
        self.format = 'Capitalized words, may contain hyphens or spaces'
        self.examples = ['Focus', 'Fiesta', 'Kuga', 'EcoSport', 'C-MAX']

    def cast(self, val):
        return str(val).strip()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Four digit year'
        self.examples = [2017, 2018, 2019, 2020, 2021]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with no decimal places'
        self.unit = 'In USD'
        self.examples = [12000, 14000, 13000, 17500, 16500]

    def cast(self, val):
        return round(float(val), 0)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission type'
        self.valid_values = 'Manual, Automatic, Semi-Auto'
        self.format = 'Single words with the first letter capitalized'
        self.examples = ['Manual', 'Automatic', 'Semi-Auto']

    def cast(self, val):
        return str(val).strip()

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car mileage'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values'
        self.unit = 'In miles'
        self.examples = [15944, 9083, 12456, 10460, 1482]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel type'
        self.valid_values = 'Petrol, Diesel, Hybrid, Electric, Other'
        self.format = 'Single words with the first letter capitalized'
        self.examples = ['Petrol', 'Diesel', 'Hybrid', 'Electric', 'Other']

    def cast(self, val):
        return str(val).strip()

class cartax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Tax on car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer values'
        self.unit = 'In USD'
        self.examples = [150, 145, 140, 135, 130]

    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class carmpg(NumericSemanticType):

    def __init__(self):
        self.description = 'Miles per gallon'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point values'
        self.examples = [57.7, 40.3, 48.7, 50.0, 60.0]

    def cast(self, val):
        if math.isnan(val):
            return None
        return round(float(val), 1)

class carenginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point values'
        self.unit = 'In liters'
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]

    def cast(self, val):
        if math.isnan(val):
            return None
        return round(float(val), 1)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': carprice, 'transmission': transmissiontype, 'mileage': carmileage, 'fueltype': fueltype, 'tax': cartax, 'mpg': carmpg, 'enginesize': carenginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.valid_values = 'Car model should be a string representing the model of the car'
        self.format = 'The model name should be capitalized and start with a whitespace'
        self.examples = [' Tucson', ' I10', ' I30', ' I20', ' Kona']

    def cast(self, val):
        return ' ' + str(val).title()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be represented as a 4 digit integer'
        self.examples = [2000, 2010, 2015, 2018, 2020]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car Price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be represented as a float'
        self.unit = 'Currency is not specified, the price is represented as a numerical value'
        self.examples = [500.5, 1500.3, 10000.0, 20000.9, 1000000.0]

    def cast(self, val):
        return float(val)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Transmission'
        self.valid_values = ""The type of transmission should be one of the following values: ['Manual', 'Automatic', 'Semi-Auto', 'Other']""
        self.format = 'Transmission type should be represented as a string'
        self.examples = ['Manual', 'Automatic', 'Semi-Auto', 'Other']

    def cast(self, val):
        val = str(val)
        if val in self.examples:
            return val
        else:
            return 'Other'

class mileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mileage of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be represented as an integer'
        self.unit = 'Mileage is represented in miles'
        self.examples = [1000, 5000, 10000, 15000, 20000]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Fuel'
        self.valid_values = ""The type of fuel should be one of the following values: ['Petrol', 'Diesel', 'Hybrid', 'Other']""
        self.format = 'Fuel type should be represented as a string'
        self.examples = ['Petrol', 'Diesel', 'Hybrid', 'Other']

    def cast(self, val):
        val = str(val)
        if val in self.examples:
            return val
        else:
            return 'Other'

class tax(NumericSemanticType):

    def __init__(self):
        self.description = 'Tax on the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be represented as a float'
        self.examples = [0.0, 50.0, 100.0, 150.0, 200.0]

    def cast(self, val):
        return float(val)

class mileagepergallon(NumericSemanticType):

    def __init__(self):
        self.description = 'Mileage per Gallon'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be represented as a float'
        self.examples = [10.1, 15.2, 20.3, 25.4, 30.5]

    def cast(self, val):
        return float(val)

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine Size'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be represented as a float'
        self.unit = 'Engine size is represented in liters'
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]

    def cast(self, val):
        return float(val)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': price, 'transmission': transmissiontype, 'mileage': mileage, 'fueltype': fueltype, 'tax': tax, 'mpg': mileagepergallon, 'enginesize': enginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car model type'
        self.valid_values = ""Car model should be a string that is of the form ' A Class'""
        self.format = 'Car model should be stored as strings'
        self.examples = [' C Class', ' A Class', ' E Class', ' GLC Class', ' GLA Class']

    def cast(self, val):
        return str(val).strip()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of car manufacture'
        self.valid_range = [1970, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a four-digit number'
        self.examples = [2000, 2010, 2015, 2018, 2020]

    def cast(self, val):
        return int(val)

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.unit = 'In USD'
        self.examples = [5200, 34948, 49948, 61948, 73948]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car transmission type'
        self.valid_values = ""Transmission type should be one of the following: 'Semi-Auto', 'Automatic', 'Manual', 'Other'""
        self.format = 'Transmission type should be stored as strings'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual', 'Other']

    def cast(self, val):
        return str(val)

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be formatted as an integer'
        self.unit = 'In miles'
        self.examples = [1000, 5000, 10000, 50000, 100000]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car fuel type'
        self.valid_values = ""Fuel type should be one of the following: 'Diesel', 'Petrol', 'Hybrid', 'Other'""
        self.format = 'Fuel type should be stored as strings'
        self.examples = ['Diesel', 'Petrol', 'Hybrid', 'Other']

    def cast(self, val):
        return str(val)

class cartax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car tax'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be formatted as a floating point number'
        self.unit = 'In USD'
        self.examples = [125, 145, 200, 250, 580]

    def cast(self, val):
        return float(val)

class carmpg(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car miles per gallon (mpg)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be formatted as a floating point number'
        self.unit = 'In MPG'
        self.examples = [1.1, 45.6, 56.5, 64.2, 217.3]

    def cast(self, val):
        return float(val)

class carenginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number'
        self.unit = 'In liters'
        self.examples = [1.8, 2.0, 2.1, 4.0, 5.5]

    def cast(self, val):
        return float(val)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': carprice, 'transmission': transmissiontype, 'mileage': carmileage, 'fueltype': fueltype, 'tax': cartax, 'mpg': carmpg, 'enginesize': carenginesize}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of an entry in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes should be formatted as integer values'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Model of a Car'
        self.valid_values = 'Model should be a string representing a car model'
        self.format = 'Car model names should be capitalized'
        self.examples = ['Octavia', 'Citigo', 'Yeti Outdoor', 'Superb', 'Fabia']

    def cast(self, val):
        return str(val).strip().title()

class manufactureyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples = [2017, 2018, 2019, 2015, 2020]

    def cast(self, val):
        return int(val)

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of a Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples: list[float] = [10550.0, 8200.0, 15650.0, 14000.0, 18350.0]

    def cast(self, val):
        return float(val)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Car Transmission'
        self.valid_values = ""Should be one of the following: 'Manual', 'Semi-Auto', 'Automatic', 'Other'""
        self.format = 'Transmission type should be capitalized'
        self.examples = ['Manual', 'Semi-Auto', 'Automatic', 'Other']

    def cast(self, val):
        return str(val).title()

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mileage of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be formatted as an integer (in miles units)'
        self.unit = 'In miles'
        self.examples: list[int] = [25250, 1264, 6825, 28431, 10912]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel type for a car'
        self.valid_values = ""Should be one of the following: 'Petrol', 'Diesel', 'Hybrid', 'Other'""
        self.format = 'Fuel type should be capitalized'
        self.examples = ['Petrol', 'Diesel', 'Hybrid', 'Other']

    def cast(self, val):
        return str(val).title()

class cartax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The tax of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be formatted as a floating point number (in USD units)'
        self.unit = 'In USD'
        self.examples: list[float] = [150.0, 145.0, 145.0, 165.0, 150.0]

    def cast(self, val):
        return float(val)

class mpg(NumericSemanticType):

    def __init__(self):
        self.description = 'Miles per Gallon'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be formatted as a floating point number'
        self.examples = [54.3, 67.3, 67.3, 51.4, 40.9]

    def cast(self, val):
        return float(val)

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number (in Liters units)'
        self.unit = 'In Liters'
        self.examples: list[float] = [1.4, 1.0, 2.0, 2.0, 1.5]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'model': carmodel, 'year': manufactureyear, 'price': carprice, 'transmission': transmissiontype, 'mileage': carmileage, 'fueltype': fueltype, 'tax': cartax, 'mpg': mpg, 'enginesize': enginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model Names'
        self.valid_values = 'Model names should be a string representing the name of the car model.'
        self.format = 'First letter of each word should be capitalized, with the rest of the letters in lowercase.'
        self.examples = ['GT86', 'Yaris', 'Aygo', 'Auris', 'C-HR', 'RAV4']

    def cast(self, val):
        return str(val).title().strip()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Car Manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [1998, 2016, 2017, 2018, 2020]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of a car in GBP'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Price should be formatted as an integer'
        self.unit = 'In GBP'
        self.examples = [850, 8290, 10795, 14995, 59995]

    def cast(self, val):
        return int(val)

class cartransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission Type of the Car'
        self.valid_values = ""The transmission type should be one of the following: ['Manual', 'Automatic', 'Semi-Auto', 'Other']""
        self.format = 'Each word should be capitalized'
        self.examples = ['Manual', 'Automatic', 'Semi-Auto', 'Other']

    def cast(self, val):
        val = str(val).title().strip()
        if val not in self.examples:
            raise ValueError(f'Invalid transmission type: {val}')
        return val

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The mileage of a car in miles'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be formatted as an integer'
        self.unit = 'In miles'
        self.examples = [2, 9446, 18513, 31063, 174419]

    def cast(self, val):
        return int(val)

class carfueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel Type of the Car'
        self.valid_values = ""The fuel type should be one of the following: ['Petrol', 'Hybrid', 'Diesel', 'Other']""
        self.format = 'Each word should be capitalized'
        self.examples = ['Petrol', 'Hybrid', 'Diesel', 'Other']

    def cast(self, val):
        val = str(val).title().strip()
        if val not in self.examples:
            raise ValueError(f'Invalid fuel type: {val}')
        return val

class cartax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The tax of a car in GBP'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Tax should be formatted as an integer'
        self.unit = 'In GBP'
        self.examples = [0, 135, 145, 565]

    def cast(self, val):
        return int(val)

class carmpg(NumericSemanticType):

    def __init__(self):
        self.description = 'The miles per gallon (mpg) of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'mpg should be formatted as a floating point number'
        self.examples = [2.8, 55.4, 62.8, 69.0, 235.0]

    def cast(self, val):
        return float(val)

class carenginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The engine size of a car in liters'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number'
        self.unit = 'In liters'
        self.examples = [0.0, 1.0, 1.5, 1.8, 4.5]

    def cast(self, val):
        return float(val)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': price, 'transmission': cartransmission, 'mileage': carmileage, 'fueltype': carfueltype, 'tax': cartax, 'mpg': carmpg, 'enginesize': carenginesize}"
"class carmodel(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.valid_values = 'Car model should be a string representing the model of the car'
        self.format = 'Car model should be in title case'
        self.examples = ['C Class', 'S Class']

    def cast(self, val):
        return str(val).title()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year of manufacture should be formatted as a four digit integer'
        self.examples = [1991, 2000, 2010, 2015, 2020]

    def cast(self, val):
        return int(val)

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in GBP of a car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in GBP units) with no decimal places'
        self.units = 'In GBP'
        self.examples = [1000.0, 15000.0, 20000.0, 30000.0, 50000.0]

    def cast(self, val):
        num = float(re.sub('[^\\d.]', '', val))
        return round(num, 2)

class cartransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Transmission Type'
        self.valid_values = ""Car transmission type should be a string representing the type of the car's transmission""
        self.format = 'Car transmission type should be in title case'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual', 'Other']

    def cast(self, val):
        return str(val).title()

class carmileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Mileage'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Mileage should be formatted as a floating point number with no decimal places'
        self.examples = [1000.0, 15000.0, 20000.0, 30000.0, 50000.0]

    def cast(self, val):
        if pd.isna(val):
            return val
        return float(re.sub('[^\\d.]', '', val))

class carfueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Fuel Type'
        self.valid_values = ""Car fuel type should be a string representing the type of the car's fuel""
        self.format = 'Car fuel type should be in title case'
        self.examples = ['Diesel', 'Petrol', 'Electric', 'Hybrid']

    def cast(self, val):
        return str(val).title()

class carenginesize(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Engine Size'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number with one decimal place'
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]

    def cast(self, val):
        return round(float(val), 1)

class carreference(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Reference ID'
        self.valid_values = ""Car reference ID should be a string representing the URL of the car's advertisement""
        self.format = ""Car reference ID should be in the form '/ad/xxxxxx'""
        self.examples = ['/ad/25017331', '/ad/25043746', '/ad/25142894', '/ad/24942816', '/ad/24913660']

    def cast(self, val):
        return str(val)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': carprice, 'transmission': cartransmission, 'mileage': carmileage, 'fueltype': carfueltype, 'enginesize': carenginesize, 'reference': carreference}"
"class unnamed0(NumericSemanticType):

    def __init__(self):
        self.description = 'Unnamed Sequential Column'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The values in this column are integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class model(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.valid_values = 'The model of the car as a string'
        self.format = 'Car model should be a string'
        self.examples = [' Focus', ' Focus', ' Focus', ' Focus', ' Focus']

    def cast(self, val):
        return str(val).strip()

class year(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of Car Manufacture'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2016, 2019, 2019, 2016, 2015]

    def cast(self, val):
        return int(val)

class price(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Price in Pound Sterling'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number with no currency symbols'
        self.examples = ['£8,000', '£13,400', '£14,600', '£9,450', '£9,999']

    def cast(self, val):
        return float(val.replace('£', '').replace(',', ''))

class transmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Car Transmission Type'
        self.valid_values = ""Transmission type should be one of: 'Manual', 'Automatic', 'Semi-Auto'""
        self.format = 'Transmission type should be a string'
        self.examples = ['Manual', 'Manual', 'Manual', 'Manual', 'Manual']

    def cast(self, val):
        return str(val)

class mileage(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Mileage'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be an integer'
        self.examples = ['7,999', '4,000', '7,000', '10,000', '9,999']

    def cast(self, val):
        return int(str(val).replace(',', ''))

class fueltype(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Fuel Type'
        self.valid_values = ""Fuel type should be one of: 'Petrol', 'Diesel'""
        self.format = 'Fuel type should be a string'
        self.examples = ['Petrol', 'Petrol', 'Petrol', 'Diesel', 'Diesel']

    def cast(self, val):
        return str(val)

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Car Engine Size'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be a floating point number'
        self.unit = 'In litres'
        self.examples = ['0.999', '0.999', '1.498', '1.56', '1.56']

    def cast(self, val):
        return float(val)

class reference(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Ad Reference'
        self.valid_values = ""Reference should be a string in the form '/ad/<number>'""
        self.format = 'Ad reference should be a string'
        self.examples = ['/ad/25451236', '/ad/25466927', '/ad/25484363', '/ad/20444868', '/ad/22551057']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': unnamed0, 'model': model, 'year': year, 'price': price, 'transmission': transmission, 'mileage': mileage, 'fueltype': fueltype, 'enginesize': enginesize, 'reference': reference}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car model'
        self.valid_values = ""Car model should be a string that is of the form ' Brand Model'""
        self.format = 'Should start with a space, followed by the Brand name, space and then Model name'
        self.examples = [' Mercedes C300', ' Ford Mustang', ' Toyota Corolla', ' BMW 3Series', ' Tesla ModelS']

    def cast(self, val):
        return str(val).strip()

class caryear(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture of the car'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a 4 digit integer'
        self.examples = [1999, 2005, 2010, 2015, 2020]

    def cast(self, val):
        year = int(val)
        if self.valid_range[0] <= year <= self.valid_range[1]:
            return year
        else:
            raise Exception('Invalid Year')

class carprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price in USD of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class cartransmission(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission type of the car'
        self.valid_values = ""Transmission type should be one of: ['Manual', 'Automatic', 'Semi-Auto', 'Other']""
        self.format = 'Should be stored as a string'
        self.examples = ['Manual', 'Automatic', 'Semi-Auto', 'Other']

    def cast(self, val):
        return str(val).strip()

class carmileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Number of miles driven by the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be formatted as an integer'
        self.units = 'In Miles'
        self.examples: list = [1000, 5000, 10000, 50000, 100000]

    def cast(self, val):
        return int(val)

class cartax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Tax in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.units = 'In USD'
        self.examples: list = [10.5, 1.3, 100.0, 0.9, 1000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class carmpg(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Miles per gallon of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'MPG should be formatted as a floating point number with one decimal place'
        self.units = 'In MPG'
        self.examples: list = [10.5, 25.3, 30.0, 40.9, 50.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)

class carenginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size of the car in litres'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be formatted as a floating point number with one decimal place'
        self.units = 'In Litres'
        self.examples: list = [1.0, 1.5, 2.0, 2.5, 3.0]

    def cast(self, val):
        num = float(val)
        return round(num, 1)


MAPPING = {'model': carmodel, 'year': caryear, 'price': carprice, 'transmission': cartransmission, 'mileage': carmileage, 'tax': cartax, 'mpg': carmpg, 'enginesize': carenginesize}"
"class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.valid_values = 'Car model should be a string that refers to a known car model'
        self.format = 'The first letter of the car model should be capitalized'
        self.examples = [' Golf', ' Polo', ' Tiguan', ' Passat', ' Up']

    def cast(self, val):
        return str(val).strip().title()

class yearofmanufacture(NumericSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture of the car'
        self.valid_range = [1886, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be a four digit integer'
        self.examples = [2019, 2018, 2017, 2016, 2015]

    def cast(self, val):
        return int(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Price of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a positive floating point number'
        self.unit = 'In USD'
        self.examples = [899, 10990, 15497, 20998, 69994]

    def cast(self, val):
        return float(val)

class transmissiontype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Transmission type of the car'
        self.valid_values = ""Can be one of the following: ['Manual', 'Semi-Auto', 'Automatic']""
        self.format = 'Should be a string and capitalized'
        self.examples = ['Manual', 'Semi-Auto', 'Automatic']

    def cast(self, val):
        return str(val).strip().title()

class mileage(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Mileage of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Mileage should be a positive integer'
        self.unit = 'In miles'
        self.examples = [1, 5962, 16393, 31824, 212000]

    def cast(self, val):
        return int(val)

class fueltype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Fuel type of the car'
        self.valid_values = ""Can be one of the following: ['Petrol', 'Diesel', 'Hybrid', 'Other']""
        self.format = 'Should be a string and capitalized'
        self.examples = ['Petrol', 'Diesel', 'Hybrid', 'Other']

    def cast(self, val):
        return str(val).strip().title()

class tax(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Tax on the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Tax should be a positive floating point number'
        self.unit = 'In USD'
        self.examples = [0, 30, 145, 580, 145]

    def cast(self, val):
        return float(val)

class mpg(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Miles per gallon (mpg) of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'mpg should be a positive floating point number'
        self.unit = 'Miles per gallon'
        self.examples = [0.3, 46.3, 53.3, 60.1, 188.3]

    def cast(self, val):
        return float(val)

class enginesize(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Engine size of the car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be a positive floating point number'
        self.unit = 'litres'
        self.examples = [0.0, 1.2, 1.6, 2.0, 3.2]

    def cast(self, val):
        return float(val)


MAPPING = {'model': carmodel, 'year': yearofmanufacture, 'price': price, 'transmission': transmissiontype, 'mileage': mileage, 'fueltype': fueltype, 'tax': tax, 'mpg': mpg, 'enginesize': enginesize}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Female', 'Male']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid gender')
        return val

class customertype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Loyal Customer', 'disloyal Customer']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid customer type')
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [27, 40, 51, 7, 85]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class typeoftravel(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Business travel', 'Personal Travel']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid type of travel')
        return val

class flightclass(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Class of flight'
        self.valid_values = ""Flight class should be one of ['Business', 'Eco', 'Eco Plus']""
        self.format = 'Flight class should be a string'
        self.examples = ['Business', 'Eco', 'Eco Plus']

    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid flight class')
        return val

class flightdistance(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Flight distance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Flight distance should be a non-negative floating point number'
        self.unit = 'In kilometers'
        self.examples = [31.0, 414.0, 849.0, 1744.0, 4983.0]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating on a scale of 0 to 5'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val not in self.examples:
            raise Exception('Invalid rating')
        return val

class delayinminutes(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Delay in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay should be a non-negative floating point number'
        self.unit = 'In minutes'
        self.examples = [0.0, 12.0, 1115.0]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

class delayinminutes(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Delay in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay should be a non-negative floating point number'
        self.unit = 'In minutes'
        self.examples = [0.0, 12.0, 1115.0]

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

class satisfaction(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['neutral or dissatisfied', 'satisfied']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid satisfaction')
        return val


MAPPING = {'unnamed01': identifier, 'unnamed0': identifier, 'id': identifier, 'gender': gender, 'customertype': customertype, 'age': age, 'typeoftravel': typeoftravel, 'class': flightclass, 'flightdistance': flightdistance, 'inflightwifiservice': rating, 'departurearrivaltimeconvenient': rating, 'easeofonlinebooking': rating, 'gatelocation': rating, 'foodanddrink': rating, 'onlineboarding': rating, 'seatcomfort': rating, 'inflightentertainment': rating, 'onboardservice': rating, 'legroomservice': rating, 'baggagehandling': rating, 'checkinservice': rating, 'inflightservice': rating, 'cleanliness': rating, 'departuredelayinminutes': delayinminutes, 'arrivaldelayinminutes': delayinminutes, 'satisfaction': satisfaction}"
"class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class uniqueidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Unique Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class gender(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Male', 'Female']

    def cast(self, val):
        if val == 'Male' or val == 'Female':
            return val
        else:
            return None

class customertype(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Loyal Customer', 'disloyal Customer']

    def cast(self, val):
        if val == 'Loyal Customer' or val == 'disloyal Customer':
            return val
        else:
            return None

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [10, 20, 30, 40, 50]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class typeoftravel(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Business travel', 'Personal Travel']

    def cast(self, val):
        if val == 'Business travel' or val == 'Personal Travel':
            return val
        else:
            return None

class travelclass(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Class of Travel'
        self.valid_values = ""Travel class should be one of the following: 'Business', 'Eco', 'Eco Plus'""
        self.format = ""Travel class should be one of the following: 'Business', 'Eco', 'Eco Plus'""
        self.examples = ['Business', 'Eco', 'Eco Plus']

    def cast(self, val):
        if val in ['Business', 'Eco', 'Eco Plus']:
            return val
        else:
            return None

class flightdistance(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The distance of a flight'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Flight distance should be a positive floating point number'
        self.unit = 'In Miles'
        self.examples = [10.0, 100.0, 1000.0, 5000.0, 10000.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class rating(NumericSemanticType):

    def __init__(self):
        self.description = 'Rating given by a passenger'
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = 'Rating should be an integer between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class delaytimeinminutes(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative floating point number'
        self.unit = 'In Minutes'
        self.examples = [0.0, 5.0, 10.0, 15.0, 20.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class delaytimeinminutes(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Delay time should be a non-negative floating point number'
        self.unit = 'In Minutes'
        self.examples = [0.0, 5.0, 10.0, 15.0, 20.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class satisfaction(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['neutral or dissatisfied', 'satisfied']

    def cast(self, val):
        if val == 'neutral or dissatisfied' or val == 'satisfied':
            return val
        else:
            return None


MAPPING = {'unnamed01': uniqueidentifier, 'unnamed0': uniqueidentifier, 'id': uniqueidentifier, 'gender': gender, 'customertype': customertype, 'age': age, 'typeoftravel': typeoftravel, 'class': travelclass, 'flightdistance': flightdistance, 'inflightwifiservice': rating, 'departurearrivaltimeconvenient': rating, 'easeofonlinebooking': rating, 'gatelocation': rating, 'foodanddrink': rating, 'onlineboarding': rating, 'seatcomfort': rating, 'inflightentertainment': rating, 'onboardservice': rating, 'legroomservice': rating, 'baggagehandling': rating, 'checkinservice': rating, 'inflightservice': rating, 'cleanliness': rating, 'departuredelayinminutes': delaytimeinminutes, 'arrivaldelayinminutes': delaytimeinminutes, 'satisfaction': satisfaction}"
"class idnumber(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Unique Identification Number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'ID should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid ID Number')
        else:
            return num

class idnumber(NumericSemanticType):

    def __init__(self):
        self.description: str = 'Unique Identification Number'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'ID should be a positive integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid ID Number')
        else:
            return num

class binaryresponse(BooleanSemanticType):

    def __init__(self):
        self.valid_values: list = [0, 1]

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid Response Value')
        else:
            return int(val)


MAPPING = {'unnamed0': idnumber, 'id': idnumber, 'response': binaryresponse}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Column Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a whole number'
        self.examples = [381110, 381111, 381112, 381113, 381114]

    def cast(self, val):
        return int(val)

class gender(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Gender'
        self.valid_values = ""Gender can be either 'Male' or 'Female'""
        self.format = 'Gender should be capitalized'
        self.examples = ['Male', 'Female']

    def cast(self, val):
        return str(val).capitalize()

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of a person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a whole number'
        self.examples = [25, 40, 47, 24, 27]

    def cast(self, val):
        return int(val)

class licensestatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class regioncode(NumericSemanticType):

    def __init__(self):
        self.description = 'Region Code'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Region Code should be a whole number'
        self.examples = [11.0, 28.0, 28.0, 27.0, 28.0]

    def cast(self, val):
        return int(val)

class insurancestatus(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val)

class vehicleage(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Vehicle Age'
        self.valid_values = ""Vehicle Age can be one of '< 1 Year', '1-2 Year', '> 2 Years'""
        self.format = ""Vehicle Age should be one of '< 1 Year', '1-2 Year', '> 2 Years'""
        self.examples = ['< 1 Year', '1-2 Year', '> 2 Years']

    def cast(self, val):
        return str(val)

class vehicledamage(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        return str(val)

class annualpremium(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Annual Premium in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Annual Premium should be a floating point number'
        self.unit = 'USD'
        self.examples = [35786.0, 33762.0, 40050.0, 37356.0, 59097.0]

    def cast(self, val):
        return float(val)

class policysaleschannel(NumericSemanticType):

    def __init__(self):
        self.description = 'Policy Sales Channel'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Policy Sales Channel should be a whole number'
        self.examples = [152.0, 7.0, 124.0, 152.0, 152.0]

    def cast(self, val):
        return int(val)

class vintage(NumericSemanticType):

    def __init__(self):
        self.description = 'Vintage'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Vintage should be a whole number'
        self.examples = [53, 111, 199, 187, 297]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'id': identifier, 'gender': gender, 'age': age, 'drivinglicense': licensestatus, 'regioncode': regioncode, 'previouslyinsured': insurancestatus, 'vehicleage': vehicleage, 'vehicledamage': vehicledamage, 'annualpremium': annualpremium, 'policysaleschannel': policysaleschannel, 'vintage': vintage}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier used to uniquely identify a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative identifier')
        else:
            return int(val)

class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Identifier used to uniquely identify a row'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Identifier should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative identifier')
        else:
            return int(val)

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Gender of an individual'
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = ""Gender should be a string and should be either 'Male' or 'Female'""
        self.examples = ['Male', 'Female', 'Male', 'Male', 'Female']

    def cast(self, val):
        val = str(val).title()
        if val not in ['Male', 'Female']:
            raise Exception('Invalid gender')
        return val

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of an individual'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [44, 76, 47, 21, 29]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative age')
        else:
            return int(val)

class drivinglicense(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in self.valid_values:
            raise Exception('Invalid driving license status')
        else:
            return int(val)

class regioncode(NumericSemanticType):

    def __init__(self):
        self.description = 'Code representing a region'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Region code should be a non-negative integer'
        self.examples = [28, 3, 28, 11, 41]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative region code')
        else:
            return int(val)

class previouslyinsured(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in self.valid_values:
            raise Exception('Invalid previously insured status')
        else:
            return int(val)

class vehicleage(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Age of the vehicle'
        self.valid_values = ""Vehicle age should be one of '1-2 Year', '< 1 Year', '> 2 Years'""
        self.format = ""Vehicle age should be a string and should be one of '1-2 Year', '< 1 Year', '> 2 Years'""
        self.examples = ['> 2 Years', '1-2 Year', '> 2 Years', '< 1 Year', '< 1 Year']

    def cast(self, val):
        val = str(val)
        if val not in ['1-2 Year', '< 1 Year', '> 2 Years']:
            raise Exception('Invalid vehicle age')
        return val

class vehicledamage(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        val = str(val).title()
        if val not in self.valid_values:
            raise Exception('Invalid vehicle damage status')
        else:
            return val if val == 'Yes' else 0

class annualpremium(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Annual premium for the insurance'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Annual premium should be a non-negative floating point number'
        self.unit = 'In USD'
        self.examples = [40454.0, 33536.0, 38294.0, 28619.0, 27496.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative annual premium')
        else:
            return float(val)

class policysaleschannel(NumericSemanticType):

    def __init__(self):
        self.description = 'Sales channel for the policy'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Sales channel should be a positive integer'
        self.examples = [26, 26, 26, 152, 152]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 1:
            raise Exception('Invalid policy sales channel')
        else:
            return int(val)

class vintage(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of days the customer has been associated with the company'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Vintage should be a positive integer'
        self.examples = [217, 183, 27, 203, 39]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val < 1:
            raise Exception('Invalid vintage')
        else:
            return int(val)

class response(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in self.valid_values:
            raise Exception('Invalid response')
        else:
            return int(val)


MAPPING = {'unnamed0': identifier, 'id': identifier, 'gender': gender, 'age': age, 'drivinglicense': drivinglicense, 'regioncode': regioncode, 'previouslyinsured': previouslyinsured, 'vehicleage': vehicleage, 'vehicledamage': vehicledamage, 'annualpremium': annualpremium, 'policysaleschannel': policysaleschannel, 'vintage': vintage, 'response': response}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class binarycategory(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.valid_values = 'The column should take the integer values 1 or 2'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid value')

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date should be of the form dd/mm/yyyy'
        self.format = 'Date should be a string in the format dd/mm/yyyy'
        self.examples = ['03/05/2020', '03/06/2020', '09/06/2020', '12/06/2020', '21/06/2020']

    def cast(self, val):
        try:
            return datetime.strptime(val, '%d/%m/%Y').date()
        except ValueError:
            return float('nan')

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age in years'
        self.valid_range = [0, 107]
        self.dtype = int
        self.format = 'Age should be an integer with no decimal places'
        self.examples = [65, 72, 55, 53, 68]

    def cast(self, val):
        return int(val)

class classification(NumericSemanticType):

    def __init__(self):
        self.description = 'Classification'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Classification should be an integer with no decimal places'
        self.examples = [3, 5, 3, 7, 3]

    def cast(self, val):
        return int(val)


MAPPING = {'unnamed0': index, 'usmer': binarycategory, 'medicalunit': binarycategory, 'sex': binarycategory, 'patienttype': binarycategory, 'intubed': binarycategory, 'pneumonia': binarycategory, 'pregnant': binarycategory, 'diabetes': binarycategory, 'copd': binarycategory, 'asthma': binarycategory, 'inmsupr': binarycategory, 'hipertension': binarycategory, 'otherdisease': binarycategory, 'cardiovascular': binarycategory, 'obesity': binarycategory, 'renalchronic': binarycategory, 'tobacco': binarycategory, 'icu': binarycategory, 'datedied': date, 'age': age, 'clasifficationfinal': classification}"
"class eventidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an event'
        self.valid_values = 'An alphanumeric string of variable length'
        self.format = 'Alphanumeric strings'
        self.examples = ['jwbOIqLJ/', 'hzAZQwS2/', 'StGWCMt3/', 'EiH4A9Ub/', 'GfG3SPxI/']

    def cast(self, val):
        return str(val)

class eventidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an event'
        self.valid_values = 'An alphanumeric string of variable length'
        self.format = 'Alphanumeric strings'
        self.examples = ['jwbOIqLJ/', 'hzAZQwS2/', 'StGWCMt3/', 'EiH4A9Ub/', 'GfG3SPxI/']

    def cast(self, val):
        return str(val)

class orderofevent(NumericSemanticType):

    def __init__(self):
        self.description = 'Order of occurrence of an event within a match'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'An integer representing the order of the event'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class matchminute(NumericSemanticType):

    def __init__(self):
        self.description = 'The time in minutes at which an event occurs during a match'
        self.valid_range = [1, 90]
        self.dtype = int
        self.format = 'An integer representing the minute of the event'
        self.examples = [2, 4, 7, 10, 15]

    def cast(self, val):
        return int(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a football team'
        self.valid_values = 'A string representing the name of a football team'
        self.format = 'Strings'
        self.examples = ['Atletico Madrid', 'Lille', 'Montpellier', 'Novara', 'Valenciennes']

    def cast(self, val):
        return str(val)

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a football team'
        self.valid_values = 'A string representing the name of a football team'
        self.format = 'Strings'
        self.examples = ['Atletico Madrid', 'Lille', 'Montpellier', 'Novara', 'Valenciennes']

    def cast(self, val):
        return str(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a football player'
        self.valid_values = 'A string representing the name of a football player'
        self.format = 'Strings'
        self.examples = ['nene', 'cristiano ronaldo', 'olivier giroud', 'robert lewandowski', 'lionel messi']

    def cast(self, val):
        return str(val) if pd.notna(val) else float('nan')

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a football player'
        self.valid_values = 'A string representing the name of a football player'
        self.format = 'Strings'
        self.examples = ['nene', 'cristiano ronaldo', 'olivier giroud', 'robert lewandowski', 'lionel messi']

    def cast(self, val):
        return str(val) if pd.notna(val) else float('nan')

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a football player'
        self.valid_values = 'A string representing the name of a football player'
        self.format = 'Strings'
        self.examples = ['nene', 'cristiano ronaldo', 'olivier giroud', 'robert lewandowski', 'lionel messi']

    def cast(self, val):
        return str(val) if pd.notna(val) else float('nan')


MAPPING = {'idodsp': eventidentifier, 'idevent': eventidentifier, 'sortorder': orderofevent, 'time': matchminute, 'eventteam': teamname, 'opponent': teamname, 'player': playername, 'playerin': playername, 'playerout': playername}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique index number for each record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class matchidentifier(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each match'
        self.valid_values = 'Unique string of alphanumeric characters and special symbols'
        self.format = 'String value which is case-sensitive'
        self.examples = ['UFot0hit/', 'Aw5DflLH/', 'bkjpaC6n/', 'CzPV312a/', 'GUOdmtII/']

    def cast(self, val):
        return str(val)

class advancedstats(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [True, False]

    def cast(self, val):
        return bool(val)

class gamedate(NumericSemanticType):

    def __init__(self):
        self.description = 'Date of the match'
        self.valid_range = [datetime(2000, 1, 1), datetime.now()]
        self.dtype = datetime
        self.format = ""Date should be formatted as 'yyyy-mm-dd'""
        self.examples = ['2012-05-13', '2012-04-07', '2013-03-30', '2015-04-04', '2015-05-23']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d')

class leaguecode(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Code representing different football leagues'
        self.valid_values = ""Should be one among 'E0', 'F1', 'I1', 'SP1', 'D1'""
        self.format = 'Alphanumeric string of length 2 or 3'
        self.examples = ['E0', 'F1', 'I1', 'SP1', 'D1']

    def cast(self, val):
        return str(val)

class seasonyear(NumericSemanticType):

    def __init__(self):
        self.description = 'Season year of the match'
        self.valid_range = [2000, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as 'yyyy'""
        self.examples = [2012, 2013, 2014, 2015, 2016]

    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country where the match was held'
        self.valid_values = 'Valid country name'
        self.format = 'Country name in lower case'
        self.examples = ['england', 'france', 'italy', 'spain', 'germany']

    def cast(self, val):
        return str(val).lower()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the football team'
        self.valid_values = 'Valid team name'
        self.format = 'Team name with first letter of each word capitalized'
        self.examples = ['Manchester Utd', 'Manchester City', 'Chelsea', 'Napoli', 'Genoa']

    def cast(self, val):
        return str(val).title()

class teamname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the football team'
        self.valid_values = 'Valid team name'
        self.format = 'Team name with first letter of each word capitalized'
        self.examples = ['Manchester Utd', 'Manchester City', 'Chelsea', 'Napoli', 'Genoa']

    def cast(self, val):
        return str(val).title()

class footballgoal(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of goals scored'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class footballgoal(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of goals scored'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Integer value with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)

class bettingodds(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Floating point number with at most two decimal places'
        self.unit = 'In odds'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def cast(self, val):
        return round(float(val), 2)


MAPPING = {'unnamed0': indexnumber, 'idodsp': matchidentifier, 'advstats': advancedstats, 'date': gamedate, 'league': leaguecode, 'season': seasonyear, 'country': countryname, 'ht': teamname, 'at': teamname, 'fthg': footballgoal, 'ftag': footballgoal, 'oddh': bettingodds, 'oddd': bettingodds, 'odda': bettingodds, 'oddover': bettingodds, 'oddunder': bettingodds, 'oddbts': bettingodds, 'oddbtsn': bettingodds}"
"class indexnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'An integer value used for indexing'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class pregnancynumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Number of times a woman has been pregnant'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Pregnancy numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class bloodglucoselevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood Glucose Level'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Glucose levels should be formatted as integers'
        self.examples = [148, 85, 183, 89, 137]

    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticType):

    def __init__(self):
        self.description = 'Blood Pressure Level'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Blood Pressure levels should be formatted as integers'
        self.examples = [72, 66, 64, 66, 40]

    def cast(self, val):
        return int(val)

class skinthickness(NumericSemanticType):

    def __init__(self):
        self.description = 'Skin Thickness Level'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Skin Thickness levels should be formatted as integers'
        self.examples = [35, 29, 0, 23, 35]

    def cast(self, val):
        return int(val)

class insulinlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Insulin Level'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Insulin levels should be formatted as integers'
        self.examples = [0, 0, 0, 94, 168]

    def cast(self, val):
        return int(val)

class bodymassindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index (BMI)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'BMI should be formatted as a floating point number'
        self.examples = [33.6, 26.6, 23.3, 28.1, 43.1]

    def cast(self, val):
        return float(val)

class diabetespedigreefunction(NumericSemanticType):

    def __init__(self):
        self.description = 'Diabetes Pedigree Function'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Diabetes Pedigree Function should be formatted as a floating point number'
        self.examples = [0.627, 0.351, 0.672, 0.167, 2.288]

    def cast(self, val):
        return float(val)

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the person'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Age should be formatted as integers'
        self.examples = [50, 31, 32, 21, 33]

    def cast(self, val):
        return int(val)

class diabetesoutcome(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        return int(val) if val in self.valid_values else None


MAPPING = {'unnamed0': indexnumber, 'pregnancies': pregnancynumber, 'glucose': bloodglucoselevel, 'bloodpressure': bloodpressure, 'skinthickness': skinthickness, 'insulin': insulinlevel, 'bmi': bodymassindex, 'diabetespedigreefunction': diabetespedigreefunction, 'age': age, 'outcome': diabetesoutcome}"
"class stockindex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Represents the unique identifier for a stock market index'
        self.valid_values = 'Should be one of the known stock market index acronyms'
        self.format = 'Should be a string of the acronym of the stock market index'
        self.examples = ['NYA', 'IXIC', 'GSPTSE', 'HSI', 'GDAXI']

    def cast(self, val):
        return str(val).upper()

class tradedate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Represents the date of stock trading'
        self.valid_values = 'Dates should be valid and fall within the range of trading years'
        self.format = 'Dates should be in YYYY-MM-DD format'
        self.examples = ['2017-11-01', '2020-02-20', '2020-03-11', '2020-03-09', '2020-03-06']

    def cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
            return val
        except ValueError:
            raise Exception('Invalid date format')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the price of a stock at a certain point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [528.690002, 527.210022, 527.840027, 531.119995, 532.070007]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 6)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the price of a stock at a certain point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [528.690002, 527.210022, 527.840027, 531.119995, 532.070007]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 6)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the price of a stock at a certain point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [528.690002, 527.210022, 527.840027, 531.119995, 532.070007]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 6)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the price of a stock at a certain point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [528.690002, 527.210022, 527.840027, 531.119995, 532.070007]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 6)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the price of a stock at a certain point in time'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number'
        self.examples = [528.690002, 527.210022, 527.840027, 531.119995, 532.070007]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 6)

class tradevolume(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents the volume of shares traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [0, 20000, 150000, 500000, 1000000]

    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)


MAPPING = {'index': stockindex, 'date': tradedate, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'close': stockprice, 'adjclose': stockprice, 'volume': tradevolume}"
"class indexidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Index Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class countryregion(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country Region'
        self.valid_values = 'The region must be a valid country name'
        self.format = 'Region names should be capitalized'
        self.examples = ['United States', 'China', 'Hong Kong', 'Japan', 'Europe']

    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country region')

class stockexchange(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Stock Exchange'
        self.valid_values = 'The stock exchange must be a valid name'
        self.format = 'Stock exchange names should be capitalized'
        self.examples = ['New York Stock Exchange', 'NASDAQ', 'Hong Kong Stock Exchange', 'Shanghai Stock Exchange', 'Tokyo Stock Exchange']

    def cast(self, val):
        return val.title()

class stockindex(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Stock Index'
        self.valid_values = 'The stock index must be a valid code'
        self.format = 'Stock index codes should be uppercase'
        self.examples = ['NYA', 'IXIC', 'HSI', '000001.SS', 'N225']

    def cast(self, val):
        return val.upper()

class currency(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Currency'
        self.valid_values = 'The currency must be a valid 3-letter ISO code'
        self.format = 'Currency codes should be uppercase'
        self.examples = ['USD', 'CNY', 'EUR', 'HKD', 'JPY']

    def cast(self, val):
        if len(val) != 3 or not val.isupper():
            raise Exception('Invalid currency code')
        return val


MAPPING = {'unnamed0': indexidentifier, 'region': countryregion, 'exchange': stockexchange, 'index': stockindex, 'currency': currency}"
"class stockindex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Stock Index'
        self.valid_values = 'The value should be a string representing one of the major stock indices'
        self.format = 'The format should be a string with no special characters'
        self.examples = ['NYA', 'N225', 'IXIC', 'GSPTSE', 'HSI']

    def cast(self, val):
        return str(val).upper()

class date(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date'
        self.valid_values = 'Date strings should be in the format YYYY-MM-DD'
        self.format = 'The format should be a string in the format YYYY-MM-DD'
        self.examples = ['2008-06-23', '2007-11-21', '2007-10-25', '2007-09-19', '2007-09-20']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [54.869999, 1951.783, 5397.965, 10032.258, 38957.44141]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [54.869999, 1951.783, 5397.965, 10032.258, 38957.44141]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [54.869999, 1951.783, 5397.965, 10032.258, 38957.44141]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [54.869999, 1951.783, 5397.965, 10032.258, 38957.44141]

    def cast(self, val):
        return float(val)

class stockprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [54.869999, 1951.783, 5397.965, 10032.258, 38957.44141]

    def cast(self, val):
        return float(val)

class volume(NumericSemanticType):

    def __init__(self):
        self.description = 'Volume of stocks traded'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Volume should be an integer'
        self.examples = [0, 1285750, 238433500, 94403740000]

    def cast(self, val):
        return int(float(val))

class usdprice(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Stock price in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number'
        self.unit = 'USD'
        self.examples = [10.2048999, 303.149, 1350.427, 4889.576, 18934.3761734]

    def cast(self, val):
        return float(val)


MAPPING = {'index': stockindex, 'date': date, 'open': stockprice, 'high': stockprice, 'low': stockprice, 'close': stockprice, 'adjclose': stockprice, 'volume': volume, 'closeusd': usdprice}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index of the record'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Indexes are non-negative integers'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

class acceleration(NumericSemanticType):

    def __init__(self):
        self.description = 'Acceleration of the fetus'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Acceleration is a positive float'
        self.examples: list[float] = [0.0, 0.006, 0.003, 0.003, 0.007]

    def cast(self, val):
        return round(float(val), 6)

class movement(NumericSemanticType):

    def __init__(self):
        self.description = 'Movement of the fetus'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Movement is a positive float'
        self.examples: list[float] = [0.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        return round(float(val), 6)

class contraction(NumericSemanticType):

    def __init__(self):
        self.description = 'Uterine contractions'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Uterine contractions is a positive float'
        self.examples: list[float] = [0.0, 0.006, 0.008, 0.008, 0.008]

    def cast(self, val):
        return round(float(val), 6)

class fetalhealth(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Health status of the fetus'
        self.valid_values = 'The health status of the fetus can be 1.0, 2.0 or 3.0'
        self.format = 'Health status of the fetus is a float'
        self.examples = [2.0, 1.0, 1.0, 1.0, 1.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'accelerations': acceleration, 'fetalmovement': movement, 'uterinecontractions': contraction, 'fetalhealth': fetalhealth}"
"class recordidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each record'
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = 'Record Ids are integer values starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class agencycode(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Code representing each agency'
        self.valid_values = 'Agency codes are alphanumeric strings'
        self.format = 'Alphanumeric strings with no specific format'
        self.examples = ['NY03030', 'CA01942', 'ILCPD00', 'MI82349', 'PAPEP00']

    def cast(self, val):
        return str(val)

class agencyname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Agency'
        self.valid_values = 'Agency names are strings'
        self.format = 'Strings with no specific format'
        self.examples = ['New York', 'Los Angeles', 'Chicago', 'Detroit', 'Philadelphia']

    def cast(self, val):
        return str(val)

class agencytype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of the Agency'
        self.valid_values = ""Agency type can be one among these values: ['Municipal Police', 'Sheriff', 'County Police', 'State Police', 'Special Police']""
        self.format = 'Strings representing the agency type'
        self.examples = ['Municipal Police', 'Sheriff', 'County Police', 'State Police', 'Special Police']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class crimesolved(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['Yes', 'No']

    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).lower()
        else:
            return 'Unknown'

class victimsex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sex of the Victim'
        self.valid_values = ""Victim sex can be one among these values: ['Male', 'Female', 'Unknown']""
        self.format = ""Strings representing the victim's sex""
        self.examples = ['Male', 'Female', 'Unknown']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class victimage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the Victim'
        self.valid_range = [0, 998]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [14, 43, 30, 43, 30]

    def cast(self, val):
        return int(val)

class victimrace(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Race of the Victim'
        self.valid_values = ""Victim race can be one among these values: ['White', 'Black', 'Unknown', 'Asian/Pacific Islander', 'Native American/Alaska Native']""
        self.format = ""Strings representing the victim's race""
        self.examples = ['White', 'Black', 'Unknown', 'Asian/Pacific Islander', 'Native American/Alaska Native']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class victimethnicity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ethnicity of the Victim'
        self.valid_values = ""Victim ethnicity can be one among these values: ['Not Hispanic', 'Unknown', 'Hispanic']""
        self.format = ""Strings representing the victim's ethnicity""
        self.examples = ['Not Hispanic', 'Unknown', 'Hispanic']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class perpetratorsex(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Sex of the Perpetrator'
        self.valid_values = ""Perpetrator sex can be one among these values: ['Male', 'Unknown', 'Female']""
        self.format = ""Strings representing the perpetrator's sex""
        self.examples = ['Male', 'Unknown', 'Female']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class perpetratorage(NumericSemanticType):

    def __init__(self):
        self.description = 'Age of the Perpetrator'
        self.valid_range = [0, 99]
        self.dtype = int
        self.format = 'Age should be a non-negative integer'
        self.examples = [15, 42, 0, 42, 0]

    def cast(self, val):
        return int(val)

class perpetratorethnicity(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Ethnicity of the Perpetrator'
        self.valid_values = ""Perpetrator ethnicity can be one among these values: ['Unknown', 'Not Hispanic', 'Hispanic']""
        self.format = ""Strings representing the perpetrator's ethnicity""
        self.examples = ['Unknown', 'Not Hispanic', 'Hispanic']

    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

class weapon(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Weapon used in the crime'
        self.valid_values = 'Weapon can be any string describing the weapon used'
        self.format = 'Strings representing the weapon used'
        self.examples = ['Handgun', 'Knife', 'Blunt Object', 'Shotgun', 'Rifle']

    def cast(self, val):
        return str(val)


MAPPING = {'recordid': recordidentifier, 'agencycode': agencycode, 'agencyname': agencyname, 'agencytype': agencytype, 'crimesolved': crimesolved, 'victimsex': victimsex, 'victimage': victimage, 'victimrace': victimrace, 'victimethnicity': victimethnicity, 'perpetratorsex': perpetratorsex, 'perpetratorage': perpetratorage, 'perpetratorethnicity': perpetratorethnicity, 'weapon': weapon}"
"class rownumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Row number in a table'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row number should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class emotionlevel(NumericSemanticType):

    def __init__(self):
        self.description = 'Emotion level, represented as an integer'
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = 'Emotion level should be an integer between 0 and 6'
        self.examples = [0, 2, 4, 6, 3]

    def cast(self, val):
        return int(val)

class datasetusage(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of usage of the dataset'
        self.valid_values = ""Usage type should be one of the following: ['Training', 'PublicTest', 'PrivateTest']""
        self.format = 'Usage type should be represented as a string'
        self.examples = ['Training', 'PublicTest', 'PrivateTest']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': rownumber, 'emotion': emotionlevel, 'usage': datasetusage}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for an entity'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class ordernumber(NumericSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for an order'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Order number should be an integer'
        self.examples = [307, 48048, 56394, 63724, 70978]

    def cast(self, val):
        return int(val)

class orderstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The status of an order'
        self.valid_values = ""Order status can be 'Completed', 'Returned' or 'Canceled'""
        self.format = 'Order status should be a string'
        self.examples = ['Completed', 'Returned', 'Canceled']

    def cast(self, val):
        return str(val)

class bookname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The name of a book'
        self.valid_values = 'Book name can be any string'
        self.format = 'Book name should be a string'
        self.examples = ['Column Nigari Kese Sekhain', 'Python Programming', 'Blockchain, Cryptocurrency And Bitcoin', 'Product Management', 'Artificial Intelligence']

    def cast(self, val):
        return str(val)

class orderdate(NumericSemanticType):

    def __init__(self):
        self.description = 'The date an order was placed'
        self.valid_range = [0, float('inf')]
        self.dtype = datetime
        self.format = ""Order date should be a datetime object in the format: '%m/%d/%Y %H:%M'""
        self.examples = ['12/30/2020 21:39', '1/9/2021 15:41', '1/9/2021 15:58', '1/9/2021 16:14', '12/30/2020 21:56']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class citybilling(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The city where the billing address is located'
        self.valid_values = 'City name can be any string'
        self.format = 'City name should be a string'
        self.examples = ['Karachi', 'Lahore', 'Islamabad', 'Rawalpindi', 'Faisalabad']

    def cast(self, val):
        return str(val)


MAPPING = {'unnamed0': identifier, 'ordernumber': ordernumber, 'orderstatus': orderstatus, 'bookname': bookname, 'orderdate': orderdate, 'citybilling': citybilling}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index or ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index or ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class orderstatus(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Status of the order'
        self.valid_values = ""Order status should be 'Completed', 'Returned' or 'Cancelled'""
        self.format = 'Status should be a string value representing the order status'
        self.examples = ['Completed', 'Returned', 'Cancelled']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid order status')
        return str(val)

class bookname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the book'
        self.valid_values = 'Book name should be a valid string'
        self.format = 'Book name should be a string value representing the name of the book'
        self.examples = ['Python Programming', 'Blockchain, Cryptocurrency And Bitcoin', 'Product Management', 'Artificial Intelligence']

    def cast(self, val):
        return str(val)

class orderdatetime(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Datetime of the order'
        self.valid_values = 'Order datetime should be a valid date string'
        self.format = ""Datetime should be a string value in the format 'MM/DD/YYYY HH:MM'""
        self.examples = ['12/30/2020 21:39', '1/9/2021 15:41', '1/9/2021 15:58', '1/9/2021 19:00', '1/9/2021 16:05']

    def cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%Y %H:%M')

class city(CategoricalSemanticType):

    def __init__(self):
        self.description = 'City of the order'
        self.valid_values = 'City should be a valid string'
        self.format = 'City should be a string value representing the name of the city'
        self.examples = ['Karachi', 'Lahore', 'Islamabad', 'Rawalpindi', 'Faisalabad']

    def cast(self, val):
        return str(val).title().strip()

class paymentmethod(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Payment method of the order'
        self.valid_values = ['Cash on delivery', 'EasyPaisa', 'JazzCash', 'BankTransfer', 'Cash on Delivery (COD)']
        self.format = 'Payment method should be a string value representing the name of the payment method'
        self.examples = ['Cash on delivery', 'EasyPaisa', 'JazzCash', 'BankTransfer', 'Cash on Delivery (COD)']

    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid payment method')
        return str(val)

class totalitems(NumericSemanticType):

    def __init__(self):
        self.description = 'Total items in the order'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Total items should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class totalweightgrams(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Total weight of the order in grams'
        self.valid_range = [200.0, float('inf')]
        self.dtype = float
        self.format = 'Total weight should be formatted as a floating point number in grams'
        self.unit = 'In grams'
        self.examples = [200.0, 500.0, 1000.0, 1500.0, 2000.0]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'ordernumber': index, 'orderstatus': orderstatus, 'bookname': bookname, 'orderdatetime': orderdatetime, 'city': city, 'paymentmethod': paymentmethod, 'totalitems': totalitems, 'totalweightgrams': totalweightgrams}"
"class crimeindex(NumericSemanticType):

    def __init__(self):
        self.description = 'Crime Index'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Crime index should be represented as a float'
        self.examples: list[float] = [0.00632, 0.02731, 0.02729, 0.03237, 0.06905]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid crime index')
        return num

class populationproportion(NumericSemanticType):

    def __init__(self):
        self.description = 'Proportion of residential land zoned for lots over 25,000 sq.ft.'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Population proportion should be represented as a percentage (0-100)'
        self.examples: list[float] = [18.0, 0.0, 0.0, 0.0, 0.0]

    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid population proportion')
        return num

class isboundedbyriver(BooleanSemanticType):

    def __init__(self):
        self.valid_values = [0, 1]

    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise ValueError('Invalid value')
        return num

class noxconcentration(NumericSemanticType):

    def __init__(self):
        self.description = 'Nitric oxides concentration (parts per 10 million)'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'NOx concentration should be represented as a float'
        self.examples: list[float] = [0.538, 0.469, 0.469, 0.458, 0.458]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid NOx concentration')
        return num

class averageroomsperdwelling(NumericSemanticType):

    def __init__(self):
        self.description = 'Average number of rooms per dwelling'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Average rooms per dwelling should be represented as a float'
        self.examples: list[float] = [6.575, 6.421, 7.185, 6.998, 7.147]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid average rooms per dwelling')
        return num

class propertyagetax(NumericSemanticType):

    def __init__(self):
        self.description = 'Property tax rate'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Property tax rate should be represented as an integer'
        self.examples: list[int] = [296, 242, 242, 222, 222]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid property tax rate')
        return num

class pupilteacherratio(NumericSemanticType):

    def __init__(self):
        self.description = 'Pupil-teacher ratio by town'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Pupil-teacher ratio should be represented as a float'
        self.examples: list[float] = [15.3, 17.8, 17.8, 18.7, 18.7]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid pupil-teacher ratio')
        return num

class housingprice(NumericSemanticType):

    def __init__(self):
        self.description = ""Median value of owner-occupied homes in $1000's""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Housing price should be represented as a float'
        self.examples: list[float] = [24.0, 21.6, 34.7, 33.4, 36.2]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid housing price')
        return num


MAPPING = {'crim': crimeindex, 'zn': populationproportion, 'chas': isboundedbyriver, 'nox': noxconcentration, 'rm': averageroomsperdwelling, 'tax': propertyagetax, 'ptratio': pupilteacherratio, 'medv': housingprice}"
"class gameidentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a game'
        self.valid_range = [21400001, 21400908]
        self.dtype = int
        self.format = 'GameID should be a unique integer'
        self.examples = [21400899, 21400233, 21400449, 21400673, 21400908]

    def cast(self, val):
        return int(val)

class gamematchup(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Details of a game matchup'
        self.valid_values = 'Matchup should be a string containing date, teams and their type (home/away)'
        self.format = ""Matchup should follow the format: 'MMM DD, YYYY - TEAM1 @ TEAM2' or 'MMM DD, YYYY - TEAM1 vs. TEAM2'""
        self.examples = ['FEB 07, 2015 - DAL vs. POR', 'NOV 30, 2014 - TOR @ LAL', 'OCT 29, 2014 - CHA vs. MIL', 'DEC 03, 2014 - SAS @ BKN', 'JAN 21, 2015 - WAS vs. OKC']

    def cast(self, val):
        return str(val)

class gamelocation(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['A', 'H']

    def cast(self, val):
        return str(val)

class gameresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['W', 'L']

    def cast(self, val):
        return str(val)

class shotnumber(NumericSemanticType):

    def __init__(self):
        self.description = 'Shot number in a game'
        self.valid_range = [1, 37]
        self.dtype = int
        self.format = 'Shot number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class gameperiod(NumericSemanticType):

    def __init__(self):
        self.description = 'Game period'
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = 'Game period should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        return int(val)

class shotclock(NumericSemanticType):

    def __init__(self):
        self.description = 'Time left on the shot clock'
        self.valid_range = [0.0, 24.0]
        self.dtype = float
        self.format = 'Shot clock should be a floating point number'
        self.examples = [10.8, 3.4, 0.0, 24.0]

    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class shotdistance(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Distance of the shot'
        self.valid_range = [0.0, 46.7]
        self.dtype = float
        self.format = 'Shot distance should be a floating point number'
        self.unit = 'In feet'
        self.examples = [7.7, 28.2, 10.1, 17.2, 3.7]

    def cast(self, val):
        return float(val)

class pointtype(NumericSemanticType):

    def __init__(self):
        self.description = 'Type of shot'
        self.valid_range = [2, 3]
        self.dtype = int
        self.format = 'Point type should be an integer (2 or 3)'
        self.examples = [2, 3]

    def cast(self, val):
        return int(val)

class shotresult(BooleanSemanticType):

    def __init__(self):
        self.valid_values = ['missed', 'made']

    def cast(self, val):
        return str(val)

class playername(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the player'
        self.valid_values = 'Player name should be a string'
        self.format = 'Player name should be in lowercase'
        self.examples = ['james harden', 'mnta ellis', 'lebron james', 'klay thompson', 'stephen curry']

    def cast(self, val):
        return str(val).lower()

class playeridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a player'
        self.valid_range = [977, 204060]
        self.dtype = int
        self.format = 'PlayerID should be a unique integer'
        self.examples = [101162, 201951, 202708, 203148]

    def cast(self, val):
        return int(val)


MAPPING = {'gameid': gameidentifier, 'matchup': gamematchup, 'location': gamelocation, 'w': gameresult, 'shotnumber': shotnumber, 'period': gameperiod, 'shotclock': shotclock, 'shotdist': shotdistance, 'ptstype': pointtype, 'shotresult': shotresult, 'playername': playername, 'playerid': playeridentifier}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class datetimeclass(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.valid_values = ""Date and Time should be in the form 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Date and Time should be of the form 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-03-10 01:00:00', '2017-03-10 02:00:00', '2017-03-10 03:00:00', '2017-03-10 04:00:00', '2017-03-10 05:00:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number'
        self.unit = 'In percentage'
        self.examples = [55.2, 16.98, 66.91, 1.31, 50.0]

    def cast(self, val):
        return float(val.replace(',', '.'))

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number'
        self.unit = 'In percentage'
        self.examples = [55.2, 16.98, 66.91, 1.31, 50.0]

    def cast(self, val):
        return float(val.replace(',', '.'))

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number'
        self.unit = 'In percentage'
        self.examples = [55.2, 16.98, 66.91, 1.31, 50.0]

    def cast(self, val):
        return float(val.replace(',', '.'))

class percent(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Percentage'
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = 'Percentage should be a floating point number'
        self.unit = 'In percentage'
        self.examples = [55.2, 16.98, 66.91, 1.31, 50.0]

    def cast(self, val):
        return float(val.replace(',', '.'))

class flow(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Flow'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Flow should be a floating point number'
        self.unit = 'In cubic meters per second'
        self.examples = [3019.53, 3024.41, 3043.46, 3047.36, 3033.69]

    def cast(self, val):
        return float(val.replace(',', '.'))

class flow(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Flow'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Flow should be a floating point number'
        self.unit = 'In cubic meters per second'
        self.examples = [3019.53, 3024.41, 3043.46, 3047.36, 3033.69]

    def cast(self, val):
        return float(val.replace(',', '.'))

class flow(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Flow'
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = 'Flow should be a floating point number'
        self.unit = 'In cubic meters per second'
        self.examples = [3019.53, 3024.41, 3043.46, 3047.36, 3033.69]

    def cast(self, val):
        return float(val.replace(',', '.'))

class ph(NumericSemanticType):

    def __init__(self):
        self.description = 'pH Level'
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = 'pH level should be a floating point number'
        self.examples = [10.0664, 10.0672, 10.068, 10.0689, 10.0697]

    def cast(self, val):
        return float(val.replace(',', '.'))

class density(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'Density'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Density should be a floating point number'
        self.unit = 'In kilograms per cubic meter'
        self.examples = [1.74, 1.75, 1.76, 1.77, 1.78]

    def cast(self, val):
        return float(val.replace(',', '.'))


MAPPING = {'unnamed0': identifier, 'date': datetimeclass, 'percentironfeed': percent, 'percentsilicafeed': percent, 'percentironconcentrate': percent, 'percentsilicaconcentrate': percent, 'starchflow': flow, 'aminaflow': flow, 'orepulpflow': flow, 'orepulpph': ph, 'orepulpdensity': density}"
"class school(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The school where the student is studying'
        self.valid_values = ""The values should be either 'GP' or 'MS'""
        self.format = 'The data is a string representing the school name'
        self.examples = ['GP', 'MS', 'GP', 'GP', 'MS']

    def cast(self, val):
        if val in ['GP', 'MS']:
            return str(val)
        else:
            return 'Invalid school name'

class gender(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The gender of the student'
        self.valid_values = ""The values should be either 'F' for Female or 'M' for Male""
        self.format = 'The data is a string representing the gender'
        self.examples = ['F', 'M', 'F', 'M', 'F']

    def cast(self, val):
        if val in ['F', 'M']:
            return str(val)
        else:
            return 'Invalid gender'

class age(NumericSemanticType):

    def __init__(self):
        self.description = 'The age of the student'
        self.valid_range = [15, 22]
        self.dtype = int
        self.format = 'The age should be an integer value between 15 and 22'
        self.examples = [15, 16, 17, 18, 19]

    def cast(self, val):
        num = int(val)
        if 15 <= num <= 22:
            return num
        else:
            return 'Invalid age'

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description = ""The education level of the student's parents""
        self.valid_range = [0, 4]
        self.dtype = int
        self.format = 'The education level should be an integer value between 0 and 4'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if 0 <= num <= 4:
            return num
        else:
            return 'Invalid education level'

class educationlevel(NumericSemanticType):

    def __init__(self):
        self.description = ""The education level of the student's parents""
        self.valid_range = [0, 4]
        self.dtype = int
        self.format = 'The education level should be an integer value between 0 and 4'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        num = int(val)
        if 0 <= num <= 4:
            return num
        else:
            return 'Invalid education level'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class ratingscale(NumericSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def cast(self, val):
        num = int(val)
        if 1 <= num <= 5:
            return num
        else:
            return 'Invalid rating'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'

class yesno(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.valid_values = ""The values should be either 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value'
        self.examples = ['yes', 'no', 'no', 'yes', 'yes']

    def cast(self, val):
        if val in ['yes', 'no']:
            return str(val)
        else:
            return 'Invalid boolean representation'


MAPPING = {'school': school, 'sex': gender, 'age': age, 'medu': educationlevel, 'fedu': educationlevel, 'traveltime': ratingscale, 'studytime': ratingscale, 'famrel': ratingscale, 'freetime': ratingscale, 'goout': ratingscale, 'dalc': ratingscale, 'walc': ratingscale, 'health': ratingscale, 'schoolsup': yesno, 'famsup': yesno, 'paid': yesno, 'activities': yesno, 'nursery': yesno, 'higher': yesno, 'internet': yesno, 'romantic': yesno}"
"class personname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Steven Spielberg', 'Woody Allen', 'Clint Eastwood', 'Martin Scorsese', 'Ridley Scott']

    def cast(self, val):
        return str(val).title()

class movieduration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The duration of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Duration should be formatted as a floating point number (in minutes)'
        self.unit = 'In minutes'
        self.examples: list = [120.0, 90.0, 180.0, 150.0, 105.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class moviecolor(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Color of the movie'
        self.valid_values = ""Color of the movie should either be 'Color' or 'Black and White'""
        self.format = 'The color value should be a string'
        self.examples = ['Color', 'Black and White']

    def cast(self, val):
        val = str(val)
        if val not in ['Color', 'Black and White']:
            raise Exception('Invalid movie color')
        return val.title()

class movietitle(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Title of the movie'
        self.valid_values = 'Title should be a string'
        self.format = 'Title of the movie should be capitalized'
        self.examples = ['Avatar', 'Pirates of the Caribbean', 'Spectre', 'The Dark Knight Rises', 'Star Wars']

    def cast(self, val):
        return str(val).title()

class moviebudget(NumericSemanticType):

    def __init__(self):
        self.description = 'The budget of a movie'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Budget should be formatted as a floating point number'
        self.examples: list = [10000000.0, 5000000.0, 20000000.0, 1000000.0, 5000000.0]

    def cast(self, val):
        num = float(val)
        return round(num, 2)

class movieyear(NumericSemanticType):

    def __init__(self):
        self.description = 'The release year of a movie'
        self.valid_range = [1888, datetime.now().year]
        self.dtype = int
        self.format = 'Year should be formatted as an integer'
        self.examples: list = [2009, 2007, 2015, 2012, 2005]

    def cast(self, val):
        return int(val)

class movielanguage(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Language of the movie'
        self.valid_values = 'Language should be a string and one of the ISO 639-1 language codes'
        self.format = 'Language of the movie should be in lowercase'
        self.examples = ['english', 'french', 'spanish', 'hindi', 'mandarin']

    def cast(self, val):
        val = str(val).lower()
        if val not in [lang.alpha_2 for lang in pycountry.languages if hasattr(lang, 'alpha_2')]:
            raise Exception('Invalid language')
        return val

class moviecountry(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Country of the movie'
        self.valid_values = 'Country should be a string and one of the ISO 3166-1 country codes'
        self.format = 'Country of the movie should be in uppercase'
        self.examples = ['USA', 'UK', 'FRANCE', 'CANADA', 'GERMANY']

    def cast(self, val):
        val = str(val).upper()
        if val not in [country.alpha_2 for country in pycountry.countries]:
            raise Exception('Invalid country')
        return val

class moviecontentrating(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Content rating of the movie'
        self.valid_values = 'Content rating should be one of the MPAA film rating system'
        self.format = 'Content rating should be a string'
        self.examples = ['G', 'PG', 'PG-13', 'R', 'NC-17']

    def cast(self, val):
        val = str(val)
        if val not in ['G', 'PG', 'PG-13', 'R', 'NC-17']:
            raise Exception('Invalid content rating')
        return val


MAPPING = {'directorname': personname, 'duration': movieduration, 'color': moviecolor, 'movietitle': movietitle, 'budget': moviebudget, 'titleyear': movieyear, 'language': movielanguage, 'country': moviecountry, 'contentrating': moviecontentrating}"
"class caridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Id of a Car'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Car id should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class manufacturer(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Manufacturer Name'
        self.valid_values = 'Manufacturer name should be a string'
        self.format = 'Manufacturer name should be capitalized'
        self.examples = ['Dodge', 'Ford', 'Toyota', 'Chevrolet', 'Mercedes-B']

    def cast(self, val):
        return str(val).title()

class carmodel(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Car Model Name'
        self.valid_values = 'Model name should be a string'
        self.format = 'Model name should be capitalized'
        self.examples = ['Neon', '328i', 'Catera', 'CL', 'RL']

    def cast(self, val):
        return str(val).title()

class carsales(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Sales in Thousands'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Sales should be represented as a floating number'
        self.examples = [16.919, 39.384, 14.114, 8.588, 20.397]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carresalevalue(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Resale Value'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Resale value should be represented as a floating number'
        self.examples = [16.36, 19.875, 18.225, 29.725, 22.255]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class vehicletype(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Type of Vehicle'
        self.valid_values = ""Vehicle type should be either 'Passenger' or 'Car'""
        self.format = 'Vehicle type should be capitalized'
        self.examples = ['Passenger', 'Car']

    def cast(self, val):
        return str(val).title()

class carprice(NumericSemanticType):

    def __init__(self):
        self.description = 'Car Price in Thousands'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be represented as a floating number'
        self.examples = [21.5, 28.4, float('nan'), 42.0, 23.99]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class enginsize(NumericSemanticType):

    def __init__(self):
        self.description = 'Engine Size of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Engine size should be represented as a floating number'
        self.examples = [1.8, 3.2, 3.2, 3.5, 1.8]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carhorsepower(NumericSemanticType):

    def __init__(self):
        self.description = 'Horsepower of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Horsepower should be represented as a floating number'
        self.examples = [140.0, 225.0, 225.0, 210.0, 150.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carwheelbase(NumericSemanticType):

    def __init__(self):
        self.description = 'Wheelbase of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wheelbase should be represented as a floating number'
        self.examples = [101.2, 108.1, 106.9, 114.6, 102.6]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carwidth(NumericSemanticType):

    def __init__(self):
        self.description = 'Width of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Width should be represented as a floating number'
        self.examples = [67.3, 70.3, 70.6, 71.4, 68.2]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carlength(NumericSemanticType):

    def __init__(self):
        self.description = 'Length of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Length should be represented as a floating number'
        self.examples = [172.4, 192.9, 192.0, 196.6, 178.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carweight(NumericSemanticType):

    def __init__(self):
        self.description = 'Weight of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Weight should be represented as a floating number'
        self.examples = [2.639, 3.517, 3.47, 3.85, 2.998]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carfuelcapacity(NumericSemanticType):

    def __init__(self):
        self.description = 'Fuel Capacity of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fuel capacity should be represented as a floating number'
        self.examples = [13.2, 17.2, 17.2, 18.0, 16.4]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carfuelefficiency(NumericSemanticType):

    def __init__(self):
        self.description = 'Fuel Efficiency of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Fuel efficiency should be represented as a floating number'
        self.examples = [28.0, 25.0, 26.0, 22.0, 27.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class carlaunchdate(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Latest Car Launch Date'
        self.valid_values = ""Date should be in the format 'month/day/year'""
        self.format = 'Date should be represented as a datetime object'
        self.examples = ['10/5/2012', '8/31/2011', '1/24/2011', '10/30/2012', '2/23/2012']

    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y')

class carpowerperffactor(NumericSemanticType):

    def __init__(self):
        self.description = 'Power Performance Factor of the Car'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power performance factor should be represented as a floating number'
        self.examples = [58.28014952, 91.37077766, float('nan'), 91.38977933, 62.7776392]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'unnamed0': caridentifier, 'manufacturer': manufacturer, 'model': carmodel, 'salesinthousands': carsales, 'yearresalevalue': carresalevalue, 'vehicletype': vehicletype, 'priceinthousands': carprice, 'enginesize': enginsize, 'horsepower': carhorsepower, 'wheelbase': carwheelbase, 'width': carwidth, 'length': carlength, 'curbweight': carweight, 'fuelcapacity': carfuelcapacity, 'fuelefficiency': carfuelefficiency, 'latestlaunch': carlaunchdate, 'powerperffactor': carpowerperffactor}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'An index for the row in a DataFrame'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be an integer starting from 0 and incrementing by 1'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'A timestamp for when a sample was taken'
        self.valid_values = ""Timestamps should be in the format: 'YYYY-MM-DD HH:MM:SS+01:00'""
        self.format = 'Timestamps are strings, but can be parsed into datetime objects for more complex operations'
        self.examples = ['2015-01-01 00:00:00+01:00', '2015-01-01 01:00:00+01:00', '2015-01-01 02:00:00+01:00', '2015-01-01 03:00:00+01:00', '2015-01-01 04:00:00+01:00']

    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S%z')

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powergeneration(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powerforecast(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The forecasted amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power forecast should be a floating point number representing the forecasted amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [6436.0, 5856.0, 5454.0, 5151.0, 4861.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powerforecast(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The forecasted amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power forecast should be a floating point number representing the forecasted amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [6436.0, 5856.0, 5454.0, 5151.0, 4861.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class powerforecast(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The forecasted amount of power generated by a particular type of power plant'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Power forecast should be a floating point number representing the forecasted amount of power generated in MWh'
        self.unit = 'MWh'
        self.examples = [6436.0, 5856.0, 5454.0, 5151.0, 4861.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class totalload(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total load of power'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total load should be a floating point number representing the total load of power in MWh'
        self.unit = 'MWh'
        self.examples = [26118.0, 24934.0, 23515.0, 22642.0, 21785.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class totalload(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The total load of power'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Total load should be a floating point number representing the total load of power in MWh'
        self.unit = 'MWh'
        self.examples = [26118.0, 24934.0, 23515.0, 22642.0, 21785.0]

    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of power'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number representing the price of power in €/MWh'
        self.unit = '€/MWh'
        self.examples = [50.1, 48.1, 47.33, 42.27, 38.41]

    def cast(self, val):
        return float(val)

class price(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The price of power'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be a floating point number representing the price of power in €/MWh'
        self.unit = '€/MWh'
        self.examples = [50.1, 48.1, 47.33, 42.27, 38.41]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'time': timestamp, 'generationbiomass': powergeneration, 'generationfossilbrowncoallignite': powergeneration, 'generationfossilcoalderivedgas': powergeneration, 'generationfossilgas': powergeneration, 'generationfossilhardcoal': powergeneration, 'generationfossiloil': powergeneration, 'generationfossiloilshale': powergeneration, 'generationfossilpeat': powergeneration, 'generationgeothermal': powergeneration, 'generationhydropumpedstorageaggregated': powergeneration, 'generationhydropumpedstorageconsumption': powergeneration, 'generationhydrorunofriverandpoundage': powergeneration, 'generationhydrowaterreservoir': powergeneration, 'generationmarine': powergeneration, 'generationnuclear': powergeneration, 'generationother': powergeneration, 'generationotherrenewable': powergeneration, 'generationsolar': powergeneration, 'generationwaste': powergeneration, 'generationwindoffshore': powergeneration, 'generationwindonshore': powergeneration, 'forecastsolardayahead': powerforecast, 'forecastwindoffshoreedayahead': powerforecast, 'forecastwindonshoredayahead': powerforecast, 'totalloadforecast': totalload, 'totalloadactual': totalload, 'pricedayahead': price, 'priceactual': price}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'The index of the data'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'The index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class timestamp(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Timestamps'
        self.valid_values = ""Timestamps should be in the format of 'yyyy-mm-dd HH:MM:SS+TZ'""
        self.format = 'Timestamps should be stored as strings'
        self.examples = ['2015-01-01 00:00:00+01:00', '2015-01-01 01:00:00+01:00', '2015-01-01 02:00:00+01:00', '2015-01-01 03:00:00+01:00', '2015-01-01 04:00:00+01:00']

    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S%z').isoformat()

class cityname(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.valid_values = 'Names of cities in Spain'
        self.format = 'Each city name should be capitalized'
        self.examples = ['Madrid', 'Valencia', 'Bilbao']

    def cast(self, val):
        return str(val).title()

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The temperature in Kelvin'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a positive floating point number'
        self.units = 'In Kelvin'
        self.examples = [270.475, 270.475, 269.686, 269.686, 269.686]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Temperature cannot be negative')
        return num

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The temperature in Kelvin'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a positive floating point number'
        self.units = 'In Kelvin'
        self.examples = [270.475, 270.475, 269.686, 269.686, 269.686]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Temperature cannot be negative')
        return num

class temperature(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The temperature in Kelvin'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Temperature should be a positive floating point number'
        self.units = 'In Kelvin'
        self.examples = [270.475, 270.475, 269.686, 269.686, 269.686]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Temperature cannot be negative')
        return num

class pressure(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The pressure in hPa'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Pressure should be a positive integer'
        self.units = 'In hPa'
        self.examples = [1001, 1001, 1002, 1002, 1002]

    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Pressure cannot be negative')
        return num

class humidity(NumericSemanticType):

    def __init__(self):
        self.description = 'The humidity in percentage'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Humidity should be a percentage between 0 and 100'
        self.examples = [77, 77, 78, 78, 78]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 100:
            raise ValueError('Humidity should be between 0 and 100')
        return num

class windspeed(NumericSemanticTypeWithUnits):

    def __init__(self):
        self.description = 'The wind speed in m/s'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Wind speed should be a non-negative floating point number'
        self.units = 'In m/s'
        self.examples = [1, 1, 0, 0, 0]

    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Wind speed cannot be negative')
        return num

class winddeg(NumericSemanticType):

    def __init__(self):
        self.description = 'The wind direction in degrees'
        self.valid_range = [0, 360]
        self.dtype = int
        self.format = 'Wind direction should be an integer between 0 and 360'
        self.examples = [62, 62, 23, 23, 23]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 360:
            raise ValueError('Wind direction should be between 0 and 360')
        return num

class cloudsall(NumericSemanticType):

    def __init__(self):
        self.description = 'The cloudiness in percentage'
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = 'Cloudiness should be a percentage between 0 and 100'
        self.examples = [0, 0, 0, 0, 0]

    def cast(self, val):
        num = int(val)
        if num < 0 or num > 100:
            raise ValueError('Cloudiness should be between 0 and 100')
        return num

class weatheridentifier(NumericSemanticType):

    def __init__(self):
        self.description = 'The ID number of weather condition'
        self.valid_range = [200, 804]
        self.dtype = int
        self.format = 'Weather ID should be an integer between 200 and 804'
        self.examples = [800, 800, 800, 800, 800]

    def cast(self, val):
        num = int(val)
        if num < 200 or num > 804:
            raise ValueError('Weather ID should be between 200 and 804')
        return num

class weathermain(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'The main weather condition'
        self.valid_values = ""The main weather condition should be one of the following: ['clear', 'clouds', 'rain', 'mist', 'fog', 'snow', 'drizzle', 'thunderstorm', 'smoke', 'haze']""
        self.format = 'The main weather condition should be in lowercase'
        self.examples = ['clear', 'clouds', 'rain', 'mist', 'fog']

    def cast(self, val):
        return str(val).lower()

class weatherdescription(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The detailed weather condition'
        self.valid_values = 'The detailed weather condition should be a string'
        self.format = 'The detailed weather condition should be in lowercase'
        self.examples = ['sky is clear', 'few clouds', 'scattered clouds', 'broken clouds', 'light rain']

    def cast(self, val):
        return str(val).lower()

class weathericon(CategoricalSemanticType):

    def __init__(self):
        self.description = 'The weather icon'
        self.valid_values = ""The weather icon should be a string of the form 'ddx', where dd is a two-digit number and x is a letter""
        self.format = 'The weather icon should be stored as strings'
        self.examples = ['01n', '02d', '03n', '04d', '09n']

    def cast(self, val):
        match_obj = re.match('\\d{2}[a-z]', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid weather icon')


MAPPING = {'unnamed0': index, 'dtiso': timestamp, 'cityname': cityname, 'temp': temperature, 'tempmin': temperature, 'tempmax': temperature, 'pressure': pressure, 'humidity': humidity, 'windspeed': windspeed, 'winddeg': winddeg, 'cloudsall': cloudsall, 'weatherid': weatheridentifier, 'weathermain': weathermain, 'weatherdescription': weatherdescription, 'weathericon': weathericon}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cropname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the Crop'
        self.valid_values = 'Should be a valid crop name'
        self.format = 'All upper case'
        self.examples = ['ARHAR', 'COTTON', 'GRAM', 'GROUNDNUT', 'MAIZE']

    def cast(self, val):
        return str(val).upper()

class statename(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the State'
        self.valid_values = 'Should be a valid state name in India'
        self.format = 'Title case with spaces between words'
        self.examples = ['Andhra Pradesh', 'Uttar Pradesh', 'Maharashtra', 'Karnataka', 'Rajasthan']

    def cast(self, val):
        return str(val).title()

class yieldquintalhectare(NumericSemanticType):

    def __init__(self):
        self.description = 'Yield in quintal per hectare'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Should be a positive floating point number'
        self.examples = [9.83, 7.47, 9.59, 6.42, 8.72]

    def cast(self, val):
        return float(val)


MAPPING = {'unnamed0': index, 'crop': cropname, 'state': statename, 'yieldquintalhectare': yieldquintalhectare}"
"class identifier(NumericSemanticType):

    def __init__(self):
        self.description = 'Represents an ID'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'ID should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cropname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Represents a Crop Name'
        self.valid_values = 'Crop name should be a string'
        self.format = 'Each word of the crop name should be capitalized'
        self.examples = ['Total Foodgrains', 'Rice', 'Wheat', 'Jowar', 'Bajra']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': identifier, 'crop': cropname}"
"class index(NumericSemanticType):

    def __init__(self):
        self.description = 'Index/Row number in a dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Index should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cropname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of a Crop'
        self.valid_values = 'Crop names should be strings and can take any valid crop name'
        self.format = 'Crop names should be capitalized'
        self.examples = ['Wheat', 'Paddy', 'Pearl Millet', 'Maize', 'Indian Mustard']

    def cast(self, val):
        return str(val).title()

class cropvariety(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Variety of a Crop'
        self.valid_values = 'Variety names should be strings and can take any valid variety name'
        self.format = 'Variety names should be capitalized with an optional code in brackets'
        self.examples = ['Chinsurah Rice (IET 19140)', 'MACS 6222', 'IGKVR-2 (IET 19795)', 'CR Dhan 401 (REETA)', 'CR Dhan 601 (IET 18558)']

    def cast(self, val):
        return str(val).title()

class seasonduration(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Season Duration of a Crop'
        self.valid_values = 'Duration should be strings either specifying a duration in days or a duration category'
        self.format = ""Duration can be a positive integer number of days or a string category such as 'Medium'""
        self.examples = ['110', '108', 'Medium', '120', '145-150']

    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif str(val).isdigit():
            return int(val)
        else:
            return str(val).capitalize()


MAPPING = {'unnamed0': index, 'crop': cropname, 'variety': cropvariety, 'seasondurationindays': seasonduration}"
"class rowindex(NumericSemanticType):

    def __init__(self):
        self.description = 'A row index in the dataset'
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = 'Row indices should be integers'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def cast(self, val):
        return int(val)

class cropname(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Name of the crop'
        self.valid_values = 'Names should be string type. They represent different types of crops.'
        self.format = 'First character of each word in the name should be capitalized'
        self.examples = ['Rice', 'Wheat', 'Coarse Cereals', 'Pulses', 'Vegetables']

    def cast(self, val):
        return str(val).title()


MAPPING = {'unnamed0': rowindex, 'crop': cropname}"
"class frequency(CategoricalEnumSemanticType):

    def __init__(self):
        self.description = 'Frequency of data collection'
        self.valid_values = ""The valid frequencies are 'Annual, Ending mar Of Each Year'""
        self.format = 'Frequencies should be written out in full words, and the month should be abbreviated with the first three letters'
        self.examples = ['Annual, Ending mar Of Each Year']

    def cast(self, val):
        return str(val)

class unit(CategoricalSemanticType):

    def __init__(self):
        self.description = 'Units of the data'
        self.valid_values = ""The valid units are 'Ton mn', 'ha mn', 'kg/ha', 'Ton th', 'Bale mn'""
        self.format = ""Units should be abbreviations, with the magnitude following the unit. The magnitude should be abbreviated as 'mn' for million, 'th' for thousand, and 'ha' for hectare""
        self.examples = ['Ton mn', 'ha mn', 'kg/ha', 'Ton th', 'Bale mn']

    def cast(self, val):
        return str(val)


MAPPING = {'frequency': frequency, 'unit': unit}"
