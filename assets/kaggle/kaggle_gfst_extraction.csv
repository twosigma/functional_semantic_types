gfst_name,gfst_classes
pokemonname,"

class pokemonname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a Pokemon'
        self.format = 'Title-cased string'
        self.examples = ['Bulbasaur', 'Ivysaur', 'Venusaur', 'Mega Venusaur', 'Charmander']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
pokemonstat,"

class pokemonstat(GeneralSemanticType):

    def __init__(self):
        self.description = ""A Pokemon's Stat""
        self.format = 'integer'
        self.examples = [318, 405, 525, 625, 309]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Cannot convert value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pokemongeneration,"

class pokemongeneration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Generation of a Pokemon'
        self.format = 'Generation should be an integer'
        self.examples = [1, 2, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in range(1, 7):
                return val
            else:
                raise Exception('Invalid Generation')
        except ValueError:
            raise Exception('Invalid Generation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 7):
            return True
        else:
            return False"
pokemonlegendary,"

class pokemonlegendary(GeneralSemanticType):

    def __init__(self):
        self.description = 'If a Pokemon is legendary or not'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
indexidentifier,"

class indexidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'An index identifier for data rows'
        self.format = 'Should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Invalid index identifier')
            else:
                return casted_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
hoteltype,"

class hoteltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of the hotel'
        self.format = 'The hotel type should be a string'
        self.examples = ['City Hotel', 'Resort Hotel']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['City Hotel', 'Resort Hotel']:
            return True
        else:
            return False"
bookingcancellation,"

class bookingcancellation(GeneralSemanticType):

    def __init__(self):
        self.description = 'A booking cancellation status'
        self.format = 'As a string'
        self.examples = ['0', '1', '0', '1', '0']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1']:
            return True
        else:
            return False"
days,"

class days(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days'
        self.format = 'Days should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return abs(int(val))
        elif isinstance(val, (int, float)):
            return abs(int(val))
        else:
            raise ValueError('Input value must be numeric')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
year,"

class year(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year'
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2012, 2014, 2016, 2015, 2013]

    def super_cast(self, val):
        try:
            year = int(val)
            return year
        except ValueError:
            raise ValueError('Invalid input for year')

    def validate(self, val):
        casted_val = self.super_cast(val)
        current_year = datetime.now().year
        if casted_val >= 0 and casted_val <= current_year:
            return True
        else:
            return False"
month,"

class month(GeneralSemanticType):
    MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']

    def __init__(self):
        self.description = 'Month of the year'
        self.format = 'Month should be an integer between 1 and 12'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.lower()
            if val in self.MONTHS:
                return self.MONTHS.index(val) + 1
        elif isinstance(val, int) and 1 <= val <= 12:
            return val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 12:
            return True
        else:
            return False"
guests,"

class guests(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of guests'
        self.format = 'Guests should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                return None
            else:
                return casted_val
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
mealtype,"

class mealtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of the meal'
        self.format = 'The meal type should be a string'
        self.examples = ['BB', 'HB', 'SC', 'Undefined', 'FB']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['BB', 'HB', 'SC', 'Undefined', 'FB']:
            return True
        else:
            return False"
countrycode,"

class countrycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country Code'
        self.format = 'Should be a string of 2 or 3 uppercase letters'
        self.examples = ['US', 'GB', 'RU', 'DE', 'FR', 'USA', 'GBR', 'BRA', 'CAN', 'AUS']

    def super_cast(self, val):
        val = str(val).upper()
        if len(val) == 2:
            if pycountry.countries.get(alpha_2=val) is None:
                raise Exception('Invalid country code')
        elif len(val) == 3:
            if pycountry.countries.get(alpha_3=val) is None:
                raise Exception('Invalid country code')
        else:
            raise Exception('Invalid country code')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 2:
            if pycountry.countries.get(alpha_2=casted_val) is None:
                return False
        elif len(casted_val) == 3:
            if pycountry.countries.get(alpha_3=casted_val) is None:
                return False
        else:
            return False
        return True"
marketsegmenttype,"

class marketsegmenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The market segment of the booking'
        self.format = 'Market segment should be a string'
        self.examples = ['Online TA', 'Offline TA/TO', 'Groups', 'Direct', 'Corporate']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val in self.examples:
            return True
        else:
            return False"
roomtype,"

class roomtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of room'
        self.format = 'A string'
        self.examples = ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
price,"

class price(GeneralSemanticType):

    def __init__(self):
        self.description = 'Price of an entity in various units'
        self.format = 'Price should be a floating point number (in USD units) with two decimal places for cents'
        self.examples = [30495.0, 29989.0, 37899.0, 30399.0, 29899.0]

    def super_cast(self, val):
        if isinstance(val, str) and (val.lower() == 'nan' or val.lower() == 'nfs'):
            return float('nan')
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
patientidentifier,"

class patientidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a patient'
        self.format = 'Patient ID is a numerical value with no decimal places'
        self.examples = [1000000001, 1000000002, 1000000003, 1000000004, 1000000005]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
patientage,"

class patientage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the Patient'
        self.format = 'Age should be a positive integer'
        self.examples = [20, 30, 40, 50, 60]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
binaryflag,"

class binaryflag(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary flag'
        self.format = 'Integer (either 0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError('Invalid input value. Expected a binary (0 or 1).') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val not in [0, 1]:
            raise ValueError('Invalid casted value. Expected a binary (0 or 1).')
        else:
            return True"
enzymemarkers,"

class enzymemarkers(GeneralSemanticType):

    def __init__(self):
        self.description = 'Enzyme Markers in the blood'
        self.format = 'Enzyme marker levels should be a positive integer'
        self.examples = [100, 200, 300, 400, 500]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise ValueError('Value cannot be negative.')
        except (TypeError, ValueError):
            raise ValueError('Could not convert to integer.')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not isinstance(casted_val, int):
            return False
        return True"
ejectionpercent,"

class ejectionpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ejection Percentage'
        self.format = 'Ejection percentage should be an integer between 0 and 100'
        self.examples = [20, 30, 40, 50, 60]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input: Ejection percentage should be an integer between 0 and 100'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
plateletcount,"

class plateletcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Platelet count in the blood'
        self.format = 'Platelet count should be a positive floating point number'
        self.examples = [100000.0, 200000.0, 300000.0, 400000.0, 500000.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
serumlevels,"

class serumlevels(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum levels in the blood'
        self.format = 'Serum levels should be a positive floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError('Value should be a positive number or zero')
        except ValueError:
            raise Exception('Cannot cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
followuptime,"

class followuptime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Follow-up Time'
        self.format = 'Positive integer'
        self.examples = [5, 10, 15, 20, 25]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(""Value can't be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
recordidentifier,"

class recordidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each record'
        self.format = 'Record Ids are integer values starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif casted_val < 1:
            return False
        else:
            return True"
indianstate,"

class indianstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indian state'
        self.format = 'The name of the state should be capitalized'
        self.examples = ['Gujarat', 'Punjab', 'Maharashtra', 'West Bengal', 'Rajasthan']

    def super_cast(self, val):
        val = str(val).title()
        if val not in CountryInfo('India').provinces():
            raise Exception('Invalid state in India')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in CountryInfo('India').provinces():
            return True
        else:
            return False"
testcount,"

class testcount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Test Count'
        self.format: str = 'Count of tests should be a non-negative integer'
        self.examples: list = [63139605, 13206188, 22149351, 29716907, 3149807]

    def super_cast(self, val):
        try:
            if pd.isna(val):
                return float('nan')
            elif isinstance(val, str) and val.isdigit():
                return int(val)
            elif isinstance(val, float):
                return int(val)
            elif isinstance(val, int):
                return val
            else:
                return None
        except Exception as e:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
testresultcount,"

class testresultcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of positive or negative test results'
        self.format = 'Test results in integer form or NaN'
        self.examples = [1210, np.nan, np.nan, np.nan, np.nan]

    def super_cast(self, val):
        try:
            if pd.isnull(val):
                return np.nan
            else:
                val = int(val)
                if val < 0:
                    raise Exception('Test result count cannot be negative')
                return val
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
identifier,"

class identifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'An identifier for an entity in the data'
        self.format = 'An integer number'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            if isinstance(val, str) and val.isnumeric():
                return int(val)
            elif isinstance(val, int):
                return val
            else:
                raise ValueError('Invalid value provided')
        except ValueError as ve:
            print(f'ValueError: {ve}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
datetimeclass,"

class datetimeclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'A datetime'
        self.format = ""In the format 'YYYY-MM-DD HH:MM:SS'""

    def super_cast(self, val):
        try:
            if '-' in val:
                if val.count('-') == 2:
                    if ':' in val:
                        return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
                    return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d %H:%M:%S')
                elif '/' in val:
                    return datetime.strptime(val, '%m/%d/%Y %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
                elif 'T' in val:
                    return datetime.strptime(val, '%Y%m%dT%H%M%S').strftime('%Y-%m-%d %H:%M:%S')
            elif ':' in val:
                return datetime.strptime(val, '%I:%M %p').strftime('%Y-%m-%d %H:%M:%S')
            elif ',' in val:
                return datetime.strptime(val, '%a %b %d, %Y %H:%M %Z').strftime('%Y-%m-%d %H:%M:%S')
        except Exception as e:
            raise Exception('Invalid date or time format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
stateunionterritory,"

class stateunionterritory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indian State or Union Territory'
        self.format = 'The name of the State or Union Territory should be capitalized'
        self.examples = ['Kerala', 'Delhi', 'Rajasthan', 'Uttar Pradesh', 'Haryana']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
confirmedcases,"

class confirmedcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of confirmed COVID-19 cases'
        self.format = 'The number should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if pd.isnull(val):
            return 0
        else:
            return int(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        return True"
index,"

class index(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique Index of Each Row'
        self.format: str = 'Positive Integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and np.isnan(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
region,"

class region(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical region'
        self.format = 'In title-case and as a string'
        self.examples = ['Sub-Saharan Africa', 'Latin America & The Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
vaccinecount,"

class vaccinecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vaccine doses administered'
        self.format = 'Count should be represented as a floating point number'
        self.examples = [48276.0, 58604.0, 99449.0, 195525.0, 251280.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if not math.isnan(casted_val):
                return casted_val
            else:
                return float('nan')
        except Exception:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
gender,"

class gender(GeneralSemanticType):

    def __init__(self):
        self.description = 'A gender'
        self.format = 'In lower-case and as a string'
        self.examples = ['male', 'female', 'male', 'female', 'male']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['male', 'female', 'm', 'f', '1', '2']:
            if str_val == 'male' or str_val == 'm' or str_val == '1':
                return 'male'
            elif str_val == 'female' or str_val == 'f' or str_val == '2':
                return 'female'
        else:
            return 'other'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female', 'other']:
            return True
        else:
            return False"
vaccine,"

class vaccine(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of vaccine or number of doses administered'
        self.format = 'Either a capitalized string for vaccine type or a float for number of doses'
        self.examples = ['Pfizer/BioNTech', 'Moderna', 'Oxford/AstraZeneca', 579.0, 635.0]

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return casted_val.istitle()
        elif isinstance(casted_val, float):
            return 0 <= casted_val <= float('inf')
        else:
            return False"
agegroup,"

class agegroup(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Age Group'
        self.format: str = ""Age group should be in the form 'X-Y years'""
        self.examples: list = ['15-24 years', '25-34 years', '35-54 years', '5-14 years', '55-74 years']

    def super_cast(self, val):
        if isinstance(val, str):
            if '-' in val:
                return val
            elif 's' in val:
                return val.replace('s', '-29 years')
            elif 'or older' in val:
                return val.replace(' or older', '-99 years')
            else:
                raise ValueError('Invalid age group')
        elif isinstance(val, (int, float)):
            age_ranges = ['5-14 years', '15-24 years', '25-34 years', '35-54 years', '55-74 years', '75-99 years']
            return age_ranges[int(val) - 1] if int(val) <= len(age_ranges) else '75-99 years'
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        match = re.match('\\d+-\\d+ years', casted_val)
        if match:
            return True
        else:
            return False"
personname,"

class personname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Kevin Lee', 'Richard Lee', 'Michael Lee', 'David Wong', 'Nathaniel Ford', 'Robert De Niro', 'Jodie Foster', 'Albert Brooks', 'Harvey Keitel', 'Cybill Shepherd', 'Tony Ressler', 'Wyc Grousbeck', 'Tom Benson', 'Jerry Reinsdorf', 'Mark Cuban', 'Kelly, Mr. James', 'Wilkes, Mrs. James (Ellen Needs)', 'Myles, Mr. Thomas Francis', 'Wirz, Mr. Albert', 'Hirvonen, Mrs. Alexander (Helga E Lindqvist)', 'Laura', 'Maria', 'Marta', 'Andrea', 'Anna', 'Mary', 'Anna', 'Emma', 'Elizabeth', 'Minnie', 'John Carney', 'Julianne Murray', 'Kathy DeMatteis', 'John Machurek', 'Erynn Whitney', 'Cristiano Ronaldo', 'Robert Lewandowski', 'Lionel Messi', 'Ali Daei', 'Miroslav Klose', 'Tim Elliot', 'Lewis Lee Lembke', 'John Paul Quintero', 'Matthew Hoffman', 'Michael Rodriguez', 'Steven Spielberg', 'Woody Allen', 'Clint Eastwood', 'Martin Scorsese', 'Ridley Scott', 'Lionel Andrés Messi Cuccittini', 'Cristiano Ronaldo dos Santos Aveiro', 'Robert Lewandowski', 'Neymar da Silva Santos Júnior', 'Kevin De Bruyne']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isalpha() and casted_val.istitle():
            return True
        else:
            return False"
timeofgoal,"

class timeofgoal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time in minutes at which a goal was scored'
        self.format = 'Time should be an integer representing the minute of the match'
        self.examples = [44, 55, 70, 75, 2]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        elif not 1 <= casted_val <= 122:
            return False
        return True"
goaltype,"

class goaltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean goal type'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
matchidentifier,"

class matchidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a match'
        self.format = 'Integer format'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
matchdate,"

class matchdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of a match'
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['2008-04-18', '2008-04-19', '2008-04-20', '2008-04-21', '2008-04-22']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
            except ValueError:
                return None
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            try:
                datetime.strptime(casted_val, '%Y-%m-%d')
                return True
            except ValueError:
                return False"
teamname,"

class teamname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a team'
        self.format = 'Each word in the team name should start with a capital letter'

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
score,"

class score(GeneralSemanticType):

    def __init__(self):
        self.description = 'Score'
        self.format = 'Score values must be floating point numbers'
        self.examples = [7.587, 7.561, 7.527, 7.522, 7.427]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
tournamenttype,"

class tournamenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the Tournament'
        self.format = 'Each word in the type should start with a capital letter'
        self.examples = ['Friendly', 'FIFA World Cup qualification', 'UEFA Euro qualification', 'African Cup of Nations qualification', 'FIFA World Cup']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
cityname,"

class cityname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a City'
        self.format = 'City names should be capitalized and in English'
        self.examples = ['Kabul', 'Vienna', 'Brasilia', 'Algiers', 'Tokyo']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        for country in pycountry.countries:
            if casted_val in [city.name for city in CountryInfo(country.name).cities()]:
                return True
        return False"
matchneutral,"

class matchneutral(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value representing if a match is neutral'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
country,"

class country(GeneralSemanticType):

    def __init__(self):
        self.description = 'A country'
        self.format = 'In title-case and as a string'
        self.examples = ['China', 'Canada', 'France', 'United Kingdom', 'Australia']

    def super_cast(self, val):
        if isinstance(val, str):
            if len(val) == 2:
                country = pycountry.countries.get(alpha_2=val.upper())
                if country is not None:
                    return country.name
                else:
                    raise ValueError('Invalid country code')
            else:
                country = pycountry.countries.get(name=val.title())
                if country is not None:
                    return country.name
                else:
                    raise ValueError('Invalid country name')
        else:
            raise TypeError('Input value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        country = pycountry.countries.get(name=casted_val)
        if country is not None:
            return True
        else:
            return False"
booleangroup,"

class booleangroup(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'A boolean value either True or False'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            return 'Invalid value for boolean'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
infectioncase,"

class infectioncase(GeneralSemanticType):

    def __init__(self):
        self.description = 'Infection cases'
        self.format = 'The name should be capitalized and without special characters'
        self.examples = ['Itaewon Clubs', 'Richway', 'Guro-gu Call Center', 'Yangcheon Table Tennis Club', 'Day Care Center']

    def super_cast(self, val):
        return str(val).title().replace('-', ' ')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
patientstate,"

class patientstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Current state of the patient'
        self.format = 'State should be represented as strings'
        self.examples = ['released', 'isolated', 'deceased']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
policyidentifier,"

class policyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each policy'
        self.format = 'Policy ID should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast the value to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 61:
            return True
        else:
            return False"
policytype,"

class policytype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of policy enacted'
        self.format = 'Policy type should be a string starting with a capital letter'
        self.examples = ['Immigration', 'Education', 'Health', 'Technology', 'Social']

    def super_cast(self, val):
        val = str(val)
        if val in ['Immigration', 'Education', 'Health', 'Technology', 'Social']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Immigration', 'Education', 'Health', 'Technology', 'Social']:
            return True
        else:
            return False"
policydetail,"

class policydetail(GeneralSemanticType):

    def __init__(self):
        self.description = 'Details of the policy enacted'
        self.format = 'Policy detail should be a string'
        self.examples = ['Strong', 'from all the countries', '5-day Rotation System', 'from Germany', 'Weak(1st)']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            try:
                return str(val)
            except Exception as e:
                raise ValueError('Unable to cast value to string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
policydate,"

class policydate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date the policy was enacted or ended'
        self.format = 'Date should be represented as a string in the format YYYY-MM-DD'
        self.examples = ['2020-01-03', '2020-01-20', '2020-01-28', '2020-02-23', '2020-02-04']

    def super_cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
regioncode,"

class regioncode(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique integer code representing a region'
        self.format = '5 digit integer code'
        self.examples = [10000, 10010, 10020, 10030, 10040]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        elif val < 0:
            raise Exception('Negative region code')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 10000 and casted_val <= 80000:
            return True
        else:
            return False"
schoolcount,"

class schoolcount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Count of institutions in a region'
        self.format: str = 'Count as an integer'
        self.examples: list = [4, 14, 22, 36, 6087]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
academyratio,"

class academyratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ratio of academies in the region'
        self.format = 'Ratio as a floating point number'
        self.examples = [0.19, 0.87, 1.27, 1.61, 4.18]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Value cannot be casted to a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
populationratio,"

class populationratio(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Ratio of certain population group in the region'
        self.format: str = 'Ratio as a percentage in floating point format'
        self.examples: list = [7.69, 14.11, 18.53, 27.26, 40.26]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception('Invalid input value. A number is expected.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
searchtrend,"

class searchtrend(GeneralSemanticType):

    def __init__(self):
        self.description = 'Search trend for a specific disease'
        self.format = 'Search trend should be a floating point number with 5 decimal places'
        self.examples = [0.11663, 0.13372, 0.14917, 0.17463, 0.17226]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 5)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
hour,"

class hour(GeneralSemanticType):

    def __init__(self):
        self.description = 'The hour of the day'
        self.format = 'Hours should be formatted as integers'
        self.examples = [0, 5, 11, 17, 23]

    def super_cast(self, val):
        hour = int(val)
        if 0 <= hour <= 23:
            return hour
        else:
            return 'Invalid hour'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid hour':
            return False
        elif 0 <= casted_val <= 23:
            return True
        else:
            return False"
birthyear,"

class birthyear(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The birth year of an individual'
        self.format: str = 'Birth years should be formatted as integers'
        self.examples: list = [1920, 1930, 1940, 1950, 1960]

    def super_cast(self, val):
        try:
            year = int(val)
            if 1900 <= year <= datetime.now().year:
                return year
            else:
                raise Exception('Invalid birthyear')
        except ValueError:
            raise Exception('Invalid input. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1900 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
sex,"

class sex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of an entity'
        self.format = ""Sex represented as string 'male', 'female' or 'other'""
        self.examples = ['male', 'female', 'female', 'male', 'other']

    def super_cast(self, val):
        if isinstance(val, int) or (isinstance(val, str) and val.isdigit()):
            int_val = int(val)
            if int_val == 1:
                return 'male'
            elif int_val == 2:
                return 'female'
            else:
                return 'other'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female', 'other']:
            return True
        else:
            return False"
fpnum,"

class fpnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'The floating population number'
        self.format = 'Floating population number should be formatted as integers'
        self.examples = [4970, 19590, 26030, 34020, 125060]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
time,"

class time(GeneralSemanticType):

    def __init__(self):
        self.description = 'A representation of time'
        self.format = 'Time should be a floating point number in seconds'
        self.examples = [30.0, 40.0, 110.0, 120.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if ':' in val:
                if '.' in val:
                    time_parts = val.split(':')
                    return float(time_parts[0]) * 60 + float(time_parts[1])
                elif len(val.split(':')) == 2:
                    time_parts = val.split(':')
                    return float(time_parts[0]) * 3600 + float(time_parts[1]) * 60
                else:
                    time_parts = val.split(':')
                    return float(time_parts[0]) * 3600 + float(time_parts[1]) * 60 + float(time_parts[2])
            else:
                return float(val)
        elif isinstance(val, int):
            return float(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
negativecount,"

class negativecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of Negative Results'
        self.format = 'Count of negative results should be formatted as an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Input cannot be negative.')
            return num
        except ValueError:
            return 'Invalid input. Please enter a non-negative integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
confirmedcount,"

class confirmedcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of Confirmed Cases'
        self.format = 'Count of confirmed cases should be formatted as an integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
releasedcount,"

class releasedcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of Released Cases'
        self.format = 'Count of released cases should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deceasedcount,"

class deceasedcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of Deceased Cases'
        self.format = 'Count of deceased cases should be formatted as an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        else:
            raise ValueError('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
indexnumber,"

class indexnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'An index number'
        self.format = 'A non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise Exception('Invalid index number')
            return casted_val
        except Exception as e:
            raise Exception(f'Invalid value {val}. Could not cast to int. Error: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
count,"

class count(GeneralSemanticType):

    def __init__(self):
        self.description = 'A count of entities or events'
        self.format = 'Non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            if pd.isnull(val):
                return np.nan
            val = float(val)
            if val < 0:
                raise ValueError('Count cannot be negative')
            else:
                return int(val)
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
ordinalindex,"

class ordinalindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'An ordinal index'
        self.format = 'A non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError
            return casted_val
        except ValueError:
            raise ValueError('Invalid value for ordinal index')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
casecount,"

class casecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of confirmed or deceased cases'
        self.format = 'Integer count of cases'
        self.examples = [1591, 2621, 1810, 3002, 1996]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
indexcolumn,"

class indexcolumn(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of a DataFrame'
        self.format = 'Integer index'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if pd.isnull(val):
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
datecolumn,"

class datecolumn(GeneralSemanticType):

    def __init__(self):
        self.description = 'A date'
        self.format = 'In the format YYYY-MM-DD'
        self.examples = ['2020-01-01', '2020-02-02', '2020-03-03', '2020-04-04', '2020-05-05']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').date()
            except ValueError:
                raise Exception('Invalid date format')
        else:
            raise Exception('Input value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        current_date = datetime.now().date()
        if isinstance(casted_val, datetime.date) and casted_val <= current_date:
            return True
        else:
            return False"
timecolumn,"

class timecolumn(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Time column'
        self.format: str = 'Integer time'
        self.examples: list = [16, 16, 16, 16, 16]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                val = int(val)
            except ValueError:
                return None
        if math.isnan(val):
            return int(0)
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
provincecolumn,"

class provincecolumn(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Province column'
        self.format: str = 'Strings representing province names'
        self.examples: list = ['Seoul', 'Busan', 'Daegu', 'Incheon', 'Gwangju']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
releasedcases,"

class releasedcases(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Released cases column'
        self.format: str = 'Integer released cases'
        self.examples: list = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        if pd.isnull(val):
            return int(0)
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val:
            return True
        else:
            return False"
deceasedcases,"

class deceasedcases(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Deceased cases column'
        self.format: str = 'Integer deceased cases'
        self.examples: list = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        if pd.isna(val) or val is None:
            return 0
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
datasetindex,"

class datasetindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of the dataset'
        self.format = 'Non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 0:
                return int_val
            else:
                raise ValueError('Invalid dataset index')
        except ValueError:
            raise ValueError('Invalid dataset index')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
areacode,"

class areacode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Area codes'
        self.format = 'Area code should be a 5-digit number'
        self.examples = [10000, 11000, 12000, 13000, 14000]

    def super_cast(self, val):
        try:
            val = int(val)
            if 10000 <= val <= 70000:
                return val
            else:
                raise ValueError
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 10000 <= casted_val <= 70000:
            return True
        else:
            return False"
temperature,"

class temperature(GeneralSemanticType):

    def __init__(self):
        self.description = 'Temperature in degrees Celsius'
        self.format = 'Temperature should be a float in degrees Celsius'
        self.examples = [-38.333, 13.889, 20.556, 23.333, 50.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            float_val = float(val)
            if 'Fahrenheit' in val:
                return round((float_val - 32) * (5 / 9), 3)
            elif 'Kelvin' in val:
                return round(float_val - 273.15, 3)
            else:
                return round(float_val, 3)
        else:
            return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < -50 or casted_val > 50:
            return False
        else:
            return True"
precipitation,"

class precipitation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount of precipitation'
        self.format = 'Precipitation is in mm and is a floating point number.'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, str) and val == 'T':
            return 0.0
        float_val = float(val)
        if float_val <= 0.1:
            return round(float_val * 25.4, 1)
        else:
            return round(float_val, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
windspeed,"

class windspeed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Wind Speed'
        self.format = 'Wind speed should be a floating point number'
        self.examples = [6.0, 5.0, 0.0, 0.0, 6.5]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception('The value should be convertible to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        return True"
winddirection,"

class winddirection(GeneralSemanticType):

    def __init__(self):
        self.description = 'Wind direction in both forms'
        self.format = 'String for cardinal directions and float for degrees'
        self.examples = ['W', 'N', 340.0, 230.0, 180.0]

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).upper()
        elif isinstance(val, float) or isinstance(val, int):
            val = float(val)
            if val < 0 or val > 360:
                raise ValueError('Invalid wind direction value')
            return round(val, 1)
        else:
            raise TypeError('Invalid type for wind direction')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if casted_val in ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW']:
                return True
            else:
                return False
        elif isinstance(casted_val, float):
            if 0 <= casted_val <= 360:
                return True
            else:
                return False
        else:
            return False"
relativehumidity,"

class relativehumidity(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Relative humidity in %'
        self.format: str = 'A floating point number representing the relative humidity in %'
        self.examples: list = [73.0, 52.1, 70.5, 73.1, 83.9]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 1)
        except ValueError:
            raise ValueError('Could not convert to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            return False
        else:
            return True"
age,"

class age(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Age of a person'
        self.format: str = 'Age should be a non-negative integer'
        self.examples: list = [10, 20, 30, 40, 50]

    def super_cast(self, val):
        if isinstance(val, str):
            if '-' in val:
                val = val.split('-')
                val = val[0]
            val = int(val)
        if isinstance(val, float):
            val = int(val)
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if casted_val < 0 or casted_val > 150:
            return False
        return True"
annualincome,"

class annualincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'The annual income of a person'
        self.format = 'Annual income should be a floating point number with no decimal places'
        self.examples = [15000.0, 35000.0, 86000.0, 59000.0, 38000.0]

    def super_cast(self, val):
        try:
            val = float(val)
        except ValueError:
            raise Exception('Invalid annual income')
        if val < 0:
            raise Exception('Invalid annual income')
        return round(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
enrolleduniversity,"

class enrolleduniversity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of University course enrollment'
        self.format = 'Enrollment type is stored as strings'
        self.examples = ['no_enrollment', 'Full time course', 'Part time course']

    def super_cast(self, val):
        if val not in ['no_enrollment', 'Full time course', 'Part time course']:
            return 'no_enrollment'
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['no_enrollment', 'Full time course', 'Part time course']:
            return True
        else:
            return False"
educationlevel,"

class educationlevel(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Education level of a person'
        self.format: str = 'Education level should be represented as an integer (0-6)'
        self.examples: list = [0, 1, 2, 3, 4, 5, 6]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.lower()
            mapping = {'secondary': 2, 'tertiary': 3, 'primary': 1, 'unknown': 0, 'graduate': 4, 'high school': 2, 'uneducated': 0, 'college': 3, 'masters': 5, 'phd': 6, 'primary school': 1, 'not graduate': 1}
            return mapping.get(val, float('nan'))
        elif isinstance(val, (int, float)):
            if 0 <= val <= 6:
                return int(val)
            else:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 6:
            return True
        else:
            return False"
experience,"

class experience(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experience which could be work experience or game experience'
        self.format = 'Experience is stored as an integer'
        self.examples = [20, 5, 3, 4, 6]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, str) and val.startswith('>'):
            return int(val.lstrip('>'))
        elif isinstance(val, int):
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
companysize,"

class companysize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of a company'
        self.format = 'A string that represents the size of a company'
        self.examples = ['S', 'M', 'L', '50-99', '100-500']

    def super_cast(self, val):
        if isinstance(val, str):
            if val in ['S', 'M', 'L']:
                return val
            if val in ['50-99', '100-500', '10000+', '10/49', '<10']:
                return val
            if val in ['20 to 99 employees', '100 to 499 employees', '10,000 or more employees', '10 to 19 employees', '1,000 to 4,999 employees']:
                return val
            else:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S', 'M', 'L', '50-99', '100-500', '10000+', '10/49', '<10', '20 to 99 employees', '100 to 499 employees', '10,000 or more employees', '10 to 19 employees', '1,000 to 4,999 employees']:
            return True
        else:
            return False"
companytype,"

class companytype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the company'
        self.format = 'Company Type is stored as strings'
        self.examples = ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']

    def super_cast(self, val):
        if val not in ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']:
            return None
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Pvt Ltd', 'Public Sector', 'Funded Startup', 'Early Stage Startup', 'NGO']:
            return True
        else:
            return False"
enrolleeidentifier,"

class enrolleeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each enrollee'
        self.format = 'Enrollee ID must be an integer'
        self.examples = [8949, 29725, 11561, 33241, 666]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1:
            return True
        else:
            return False"
target,"

class target(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean target'
        self.format = 'Either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
probability,"

class probability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Probability is a measure of the likelihood that an event will occur.'
        self.format = 'Probability must be a float between 0 and 1 inclusive.'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def super_cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise Exception('Invalid probability')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
entityidentifier,"

class entityidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Entity ID'
        self.format = 'Entity ID should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Please provide a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
myersbriggspersonalitytype,"

class myersbriggspersonalitytype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Myers Briggs Personality Type'
        self.format = 'Each type is denoted by a four-letter code'
        self.examples = ['INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP']

    def super_cast(self, val):
        val = str(val).upper()
        if val in ['INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP', 'ENTJ', 'ENFP', 'ENFJ', 'ISFP', 'ISFJ', 'ISTP', 'ISTJ', 'ESFP', 'ESFJ', 'ESTP', 'ESTJ']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['INFP', 'INFJ', 'INTP', 'INTJ', 'ENTP', 'ENTJ', 'ENFP', 'ENFJ', 'ISFP', 'ISFJ', 'ISTP', 'ISTJ', 'ESFP', 'ESFJ', 'ESTP', 'ESTJ']:
            return True
        else:
            return False"
worlduniversityrank,"

class worlduniversityrank(GeneralSemanticType):

    def __init__(self):
        self.description = 'World University Rank'
        self.format = 'Rank should be formatted as an integer, where rank 1 is the best'
        self.examples = [1, 2, 3, 100, 500]

    def super_cast(self, val):
        try:
            rank = int(val)
            if rank < 1:
                raise Exception('Invalid rank. Rank should be >= 1')
            return rank
        except ValueError:
            raise Exception('Invalid value. Value should be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1:
            return False
        else:
            return True"
educationquality,"

class educationquality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality of Education at the University'
        self.format = 'Quality of education should be formatted as an integer, where rank 1 is the best'
        self.examples = [1, 100, 200, 300, 400]

    def super_cast(self, val):
        try:
            quality = int(val)
            if quality < 1:
                raise ValueError('Invalid quality. Quality should be >= 1')
            return quality
        except Exception as e:
            raise TypeError('super_cast expects a numeric value') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val:
            return True
        else:
            return False"
rank,"

class rank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ranking of an entity'
        self.format = 'Ranking should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and '-' in val:
            return [int(part) for part in val.split('-')]
        else:
            return [int(val)]

    def validate(self, val):
        casted_val = self.super_cast(val)
        for rank in casted_val:
            if rank < 1 or not isinstance(rank, int):
                return False
        return True"
universityscore,"

class universityscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score of a university'
        self.format = 'The score should be a floating point number between 0 and 100'
        self.examples = [96.1, 96.0, 95.6, 94.3, 94.2]

    def super_cast(self, val):
        try:
            score = float(val)
            if 0 <= score <= 100:
                return score
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
studentpopulation,"

class studentpopulation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of students in a university'
        self.format = 'The number of students should be a positive integer'
        self.examples = [20152, 2243, 11074, 15596, 7929]

    def super_cast(self, val):
        try:
            num_students = int(str(val).replace(',', ''))
            if num_students >= 0:
                return num_students
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        if casted_val >= 0:
            return True
        else:
            return False"
tweetidentifier,"

class tweetidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each tweet'
        self.format = 'Tweet ID should be an integer'
        self.examples = [570306133677760513, 570301130888122368, 570301083672813571, 570301031407624196, 570300817074462722]

    def super_cast(self, val):
        if isinstance(val, str):
            return int(float(val))
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
sentiment,"

class sentiment(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Sentiment of the tweet'
        self.format: str = 'Sentiment should be a string in lower case'
        self.examples: list = ['negative', 'neutral', 'positive', 'extremely positive', 'extremely negative']

    def super_cast(self, val):
        lower_val = str(val).lower()
        if lower_val in ['positive', 'negative', 'neutral', 'extremely positive', 'extremely negative']:
            return lower_val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
confidence,"

class confidence(GeneralSemanticType):

    def __init__(self):
        self.description = 'Confidence of the sentiment'
        self.format = 'Confidence should be a floating point number between 0 and 1'
        self.examples = [1.0, 0.3486, 0.6837, 1.0, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num <= 1:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0 and (casted_val <= 1):
            return True
        else:
            return False"
airline,"

class airline(GeneralSemanticType):

    def __init__(self):
        self.description = 'Airline name'
        self.format = 'Properly capitalized string'
        self.examples = ['United', 'US Airways', 'American', 'Southwest', 'Delta']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            raise TypeError('The value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
username,"

class username(GeneralSemanticType):

    def __init__(self):
        self.description = 'The username'
        self.format = 'Lower-case string without special characters'
        self.examples = ['cairdin', 'jnardino', 'yvonnalynn', 'jnardino', 'jnardino']

    def super_cast(self, val):
        casted_val = str(val).lower()
        return re.sub('\\W+', '', casted_val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^([a-zA-Z0-9_]+)$', casted_val):
            return True
        else:
            return False"
retweetcount,"

class retweetcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a tweet has been retweeted'
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
usertimezone,"

class usertimezone(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timezone of the user'
        self.format = 'Timezone should be a string in title case'
        self.examples = ['Eastern Time (US & Canada)', 'Central Time (US & Canada)', 'Pacific Time (US & Canada)', 'Quito', 'Atlantic Time (Canada)']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
longitude,"

class longitude(GeneralSemanticType):

    def __init__(self):
        self.description = 'Longitude coordinate for a location'
        self.format = 'Floating point number with precision up to 6 decimal places'
        self.examples = [-86.64408227, -87.72207058, -85.3871286, -87.12511459999996, -86.56790593]

    def super_cast(self, val):
        try:
            num = float(val)
            if -180 <= num <= 180:
                return round(num, 6)
            else:
                raise ValueError('Invalid longitude')
        except ValueError:
            raise Exception('Cannot cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -180 <= casted_val <= 180:
            return True
        else:
            return False"
latitude,"

class latitude(GeneralSemanticType):

    def __init__(self):
        self.description = 'Latitude coordinate for a location'
        self.format = 'Floating point number with precision up to 6 decimal places'
        self.examples = [-90.0, 0.0, 90.0, 45.678, -30.456]

    def super_cast(self, val):
        try:
            num = float(val)
            if -90 <= num <= 90:
                return round(num, 6)
            else:
                raise ValueError('Invalid latitude')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not float('nan') and -90 <= casted_val <= 90:
            return True
        else:
            return False"
medianincome,"

class medianincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Median income of a location'
        self.format = 'Median income should be a floating point number rounded up to 4 decimal places'
        self.examples = [0.0, 1.5, 2.0, 8.3252, 15.0001]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid median income')
        return round(num, 4)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= float('inf')"
medianhousevalue,"

class medianhousevalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Median house value of a location'
        self.format = 'Median house value should be a floating point number'
        self.examples = [0.0, 50000.0, 100000.0, 250000.0, 500001.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception()
            return round(num, 2)
        except:
            raise Exception('Invalid median house value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
oceanproximity,"

class oceanproximity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proximity of the location to the ocean'
        self.format = 'A string representing the category of ocean proximity'
        self.examples = ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']

    def super_cast(self, val):
        if val not in ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']:
            raise Exception('Invalid ocean proximity')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND']:
            return True
        else:
            return False"
uniqueidentifier,"

class uniqueidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.format = 'In the form of a non-negative integer'

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                return 'NaN'
        elif isinstance(val, (int, float)):
            if not math.isnan(val):
                return int(val)
            else:
                return 'NaN'
        else:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
employeename,"

class employeename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Employee Name'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Adinolfi, Wilson  K', 'Ait Sidi, Karthikeyan   ', 'Akinkuolie, Sarah', 'Alagbe,Trina', 'Anderson, Carol ']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Z][a-z]*(, [A-Z][a-z]*)?$', casted_val):
            return True
        else:
            return False"
binary,"

class binary(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary values, 0 or 1'
        self.format = 'Values should be either 0 or 1'
        self.examples = [0, 1, 1, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                return 0
        except ValueError:
            return 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
currencyusd,"

class currencyusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amounts in US dollars'
        self.format = 'Amount should be formatted as a floating point number (in USD units)'
        self.examples = [45046, 55501.5, 62810.0, 72036.0, 250000]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid value. Value could not be converted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0:
            return False
        return True"
position,"

class position(GeneralSemanticType):

    def __init__(self):
        self.description = 'Position of an entity'
        self.format = 'Integer or capitalized string'
        self.examples = [1, 2, 3, 'Production Technician I', 'Sr. DBA']

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        elif isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
state,"

class state(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a state'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['California', 'New York', 'Texas', 'Florida', 'Illinois']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if len(casted_val) < 2:
                return False
            else:
                return True
        else:
            return False"
zipcode,"

class zipcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.format = '5-digit number as a string'
        self.examples = ['14409', '9790', '1151', '8775', '13056']

    def super_cast(self, val):
        val = str(val)
        if val.isdigit():
            return val.zfill(5)
        elif re.match('[0-9]{5}(?:-[0-9]{4})?', val):
            return val[:5]
        else:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]{5}$', casted_val) or casted_val == 'NaN':
            return True
        else:
            return False"
date,"

class date(GeneralSemanticType):

    def __init__(self):
        self.description = 'A date'
        self.format = 'In the format YYYY-MM-DD'

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                datetime_obj = datetime.strptime(val, '%Y-%m-%d')
                return datetime_obj.strftime('%Y-%m-%d')
            except ValueError:
                try:
                    datetime_obj = datetime.strptime(val, '%d/%m/%Y')
                    return datetime_obj.strftime('%Y-%m-%d')
                except ValueError:
                    try:
                        datetime_obj = datetime.strptime(val, '%m/%d/%y')
                        return datetime_obj.strftime('%Y-%m-%d')
                    except ValueError:
                        try:
                            datetime_obj = datetime.strptime(val, '%d-%m-%Y')
                            return datetime_obj.strftime('%Y-%m-%d')
                        except ValueError:
                            return None
        return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            try:
                datetime_obj = datetime.strptime(casted_val, '%Y-%m-%d')
                return True
            except ValueError:
                return False
        return False"
recruitment,"

class recruitment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of recruitment'
        self.format = 'Words in the recruitment source should be capitalized'
        self.examples = ['LinkedIn', 'Indeed', 'LinkedIn', 'Indeed', 'Google Search']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
storenumber,"

class storenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Store Number'
        self.format = 'Store numbers should be positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return int(re.search('\\d+', val).group())
            except:
                raise Exception('Invalid store number')
        elif isinstance(val, int) and val > 0:
            return val
        else:
            raise Exception('Invalid store number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
datestring,"

class datestring(GeneralSemanticType):

    def __init__(self):
        self.description = 'A date represented as a string'
        self.format = 'In the format DD/MM/YYYY'
        self.examples = ['05/02/2010', '12/02/2010', '19/02/2010', '26/02/2010', '05/03/2010']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%m/%d/%Y').strftime('%d/%m/%Y')
            except ValueError:
                return datetime.strptime(val, '%d/%m/%Y').strftime('%d/%m/%Y')
        else:
            raise ValueError('Invalid input type. Expected a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%d/%m/%Y')
            return True
        except ValueError:
            return False"
fuelprice,"

class fuelprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fuel Price on the day of data entry'
        self.format = 'Fuel price should be a positive float'
        self.examples = [2.572, 2.548, 2.514, 2.561, 2.625]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid fuel price')
            return num
        except (ValueError, TypeError):
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
cpi,"

class cpi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Consumer Price Index on the day of data entry'
        self.format = 'CPI should be a positive float'
        self.examples = [211.0963582, 211.2421698, 211.2891429, 211.3196429, 211.3501429]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return 'Invalid'
            else:
                return num
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
unemploymentrate,"

class unemploymentrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unemployment rate on the day of data entry'
        self.format = 'Unemployment rate should be a positive float'
        self.examples = [8.106, 8.106, 8.106, 8.106, 8.106]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError('Value is not a positive number')
        except ValueError:
            raise ValueError('Value cannot be cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
isholiday,"

class isholiday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if a day is a holiday'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        else:
            return bool(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
departmentidentifier,"

class departmentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each department'
        self.format = 'Department ID should be an integer between 1 and 99'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 99:
            return val
        else:
            raise Exception('Invalid department ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 99:
            return True
        else:
            return False"
saledate,"

class saledate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when a sale was made'
        self.format = 'Date in the format YYYY-MM-DD'
        self.examples = ['2017-07-19', '2016-12-14', '2016-12-09', '2016-09-23', '2016-11-17']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                return pd.to_datetime(val, format='%d/%m/%Y').strftime('%Y-%m-%d')
            except:
                try:
                    return pd.to_datetime(val, format='%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d')
                except:
                    return np.nan
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != np.nan and pd.Timestamp.min <= pd.to_datetime(casted_val, format='%Y-%m-%d') <= pd.Timestamp.max:
            return True
        else:
            return False"
weeklysales,"

class weeklysales(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total sales for the given department in the given store'
        self.format = 'Weekly sales should be a floating point number with two decimal places'
        self.examples = [24924.5, 46039.49, 41595.55, 19403.54, 21827.9]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception('The value is not a valid number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < -1098.0 or math.isnan(casted_val):
            return False
        else:
            return True"
holidayflag,"

class holidayflag(GeneralSemanticType):

    def __init__(self):
        self.description = 'Holiday flag'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
storetype,"

class storetype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of the store'
        self.format: str = 'One upper-case alphabetical character'
        self.examples: list = ['A', 'B', 'C', 'A', 'B']

    def super_cast(self, val):
        if val is None or pd.isnull(val):
            return float('nan')
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'B', 'C']:
            return True
        else:
            return False"
storesize,"

class storesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the store'
        self.format = 'Size should be a non-negative integer, represented in square feet'
        self.examples = [151315, 202307, 37392, 205863, 34875]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
ramenidentifier,"

class ramenidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each Ramen'
        self.format = 'Unique integer ID'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
ramenreview,"

class ramenreview(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ramen review number'
        self.format = 'Integer review number'
        self.examples = [2580, 2579, 2578, 2577, 2576]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception:
            raise ValueError('Invalid value for ramen review number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
ramenbrand,"

class ramenbrand(GeneralSemanticType):

    def __init__(self):
        self.description = 'Brand of the Ramen'
        self.format = 'Brand names should be capitalized'
        self.examples = ['Nissin', 'Nongshim', 'Maruchan', 'Mama', 'Paldo']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        if casted_val.istitle():
            return True
        else:
            return False"
ramenvariety,"

class ramenvariety(GeneralSemanticType):

    def __init__(self):
        self.description = 'Variety of the Ramen'
        self.format = 'Variety names should be capitalized'
        self.examples = ['Beef', 'Chicken', 'Yakisoba', 'Artificial Chicken', 'Vegetable']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
ramenstyle,"

class ramenstyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of the Ramen'
        self.format = 'Ramen style should be capitalized'
        self.examples = ['Pack', 'Bowl', 'Cup', 'Tray', 'Box']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            raise ValueError('Invalid ramen style')"
ramencountry,"

class ramencountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country of origin for the Ramen'
        self.format = 'Country names should be capitalized'
        self.examples = ['Japan', 'USA', 'South Korea', 'Taiwan', 'Thailand']

    def super_cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
ramenrating,"

class ramenrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ramen rating'
        self.format = 'Rating should be a float in the range 0-5'
        self.examples = [4.0, 5.0, 3.75, 3.5, 3.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 5:
                return round(val, 2)
            else:
                return 'Invalid ramen rating'
        except ValueError:
            return 'Invalid ramen rating'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 5:
            return True
        else:
            return False"
ramentopten,"

class ramentopten(GeneralSemanticType):

    def __init__(self):
        self.description = 'Top Ten Ramen'
        self.format = ""Top Ten ranking should be in the format 'YEAR #RANK'""
        self.examples = ['2015 #4', '2014 #10', '2016 #8', '2016 #5']

    def super_cast(self, val):
        if not pd.isna(val):
            match_obj = re.match('\\d{4} #\\d{1,2}', val)
            if match_obj:
                return match_obj.group()
            else:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val):
            return True
        else:
            return False"
carmodel,"

class carmodel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Model of a car'
        self.format = 'In lower-case and as a string'
        self.examples = ['neon', '328i', 'catera', 'cl', 'rl']

    def super_cast(self, val):
        return str(val).lower().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
yearofmanufacture,"

class yearofmanufacture(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of manufacture of the car'
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [2007, 2007, 2012, 2017, 2014]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 1885 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
priceinrupees,"

class priceinrupees(GeneralSemanticType):

    def __init__(self):
        self.description = 'Selling price of the car'
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [60000.0, 135000.0, 600000.0, 250000.0, 450000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Invalid value {val}. Value cannot be casted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= float('inf'):
            raise Exception(f'Invalid value {casted_val}. Value should be in the range [0, infinity].')
        return True"
distanceinmeters,"

class distanceinmeters(GeneralSemanticType):

    def __init__(self):
        self.description = 'Distance driven by the car in meters'
        self.format = 'Distance should be formatted as a floating point number'
        self.examples = [70000.0, 50000.0, 100000.0, 46000.0, 141000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise ValueError(f'Cannot cast value {val} to float. Original error: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            raise ValueError(f'Value {casted_val} is not in valid range [0, inf]')"
currencyinr,"

class currencyinr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Currency value in INR'
        self.format = 'Currency should be represented as a floating point number'
        self.examples = [450000, 370000, 158000, 225000, 130000]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value for currency in INR')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
distanceinmiles,"

class distanceinmiles(GeneralSemanticType):

    def __init__(self):
        self.description = 'A distance'
        self.format = 'In miles and as a float'
        self.examples = [145500.0, 120000.0, 140000.0, 127000.0, 120000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input. Value could not be converted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isinf(casted_val)):
            return True
        else:
            return False"
ownership,"

class ownership(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ownership history of the car'
        self.format = 'Ownership should be capitalized'
        self.examples = ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']:
            return True
        else:
            return False"
mileageinkmpl,"

class mileageinkmpl(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mileage of the car in kilometers per liter'
        self.format = 'Mileage should be represented as a floating point number'
        self.examples = [23.4, 21.14, 17.7, 23.0, 16.1]

    def super_cast(self, val):
        try:
            return float(val.split()[0])
        except:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
engineincc,"

class engineincc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Engine capacity of the car in cubic centimeters'
        self.format = 'Engine capacity should be represented as an integer'
        self.examples = [1248, 1498, 1497, 1396, 1298]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
powerinbhp,"

class powerinbhp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Power of the car in brake horsepower'
        self.format = 'Power should be represented as a floating point number'
        self.examples = [74.0, 103.52, 78.0, 90.0, 88.2]

    def super_cast(self, val):
        try:
            return float(val.split()[0])
        except:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
torque,"

class torque(GeneralSemanticType):

    def __init__(self):
        self.description = 'Torque of the car'
        self.format = 'In Nm as a floating point number'
        self.examples = [190.0, 250.0, 12.7, 22.4, 11.5]

    def super_cast(self, val):
        try:
            return float(val.split()[0].replace('Nm@', '').replace('kgm at', ''))
        except:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
seats,"

class seats(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of seats in the car'
        self.format = 'Should be an integer'
        self.examples = [5, 7, 9, 3, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
kmsdriven,"

class kmsdriven(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of kilometers driven by the car'
        self.format = 'Kilometers driven should be a positive integer.'
        self.examples = [500, 1000, 5000, 10000, 15000]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except ValueError:
            return None
        if casted_val < 0:
            return None
        else:
            return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val >= 0:
            return True
        else:
            return False"
transmission,"

class transmission(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of car transmission'
        self.format = 'Each word should be capitalized'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in ['Semi-Auto', 'Automatic', 'Manual']"
jobtitle,"

class jobtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job Title'
        self.format = 'Job title should be in capitalized form'
        self.examples = ['Project Manager', 'Professor', 'Consultant', 'Actuary', 'Product Manager']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
salary,"

class salary(GeneralSemanticType):

    def __init__(self):
        self.description = 'The salary of an entity'
        self.format = 'Salary should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [270000.0, 200000.0, 250000.0, 425000.0, 940000.0]

    def super_cast(self, val):
        if isinstance(val, str) and '$' in val:
            num = float(val.replace('$', '').replace(',', ''))
            return round(num, 2)
        elif isinstance(val, str) or isinstance(val, int):
            return max(float(val), 0)
        elif math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
agencyname,"

class agencyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the Agency'
        self.format = 'Strings with no specific format'
        self.examples = ['New York', 'Los Angeles', 'Chicago', 'Detroit', 'Philadelphia']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
rownumber,"

class rownumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Row number in a dataset'
        self.format = 'Row numbers should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val < 0:
                raise Exception('Invalid row number')
            return int_val
        except ValueError:
            raise Exception('Invalid input type. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
frequency,"

class frequency(GeneralSemanticType):

    def __init__(self):
        self.description = 'A frequency'
        self.format = 'In floating point number with three decimal places'
        self.examples = [0.818, 0.909, 1.0, 0.636, 1.0]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return float(val)
            except ValueError:
                return None
        else:
            return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ecgreading,"

class ecgreading(GeneralSemanticType):

    def __init__(self):
        self.description = 'ECG Reading'
        self.format = 'ECG readings should be floating point numbers between 0.0 and 1.0'
        self.examples = [0.0, 0.2, 0.4, 0.6, 0.8]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0.0 <= num <= 1.0:
                return num
            else:
                raise ValueError('Invalid ECG reading')
        except ValueError:
            raise ValueError('Invalid input value. Expected a float between 0.0 and 1.0')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0.0 <= casted_val <= 1.0"
ecgsequenceidentifier,"

class ecgsequenceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Sequence ID for the ECG measurements'
        self.format: str = 'Sequence ID should be a non-negative integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 0:
                return val
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
ecgmeasurement,"

class ecgmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'A single ECG measurement'
        self.format = 'floating point numbers between 0 and 1'
        self.examples = [0.0484330467879772, 0.0, 0.0, 0.0938967168331146, 0.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 1:
                return val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid ECG measurement')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
eegreading,"

class eegreading(GeneralSemanticType):

    def __init__(self):
        self.description = 'Electroencephalography reading'
        self.format = 'Reading should be formatted as a float between 0 and 1'
        self.examples = [0.104, 0.516, 0.298, 0.0, 0.292]

    def super_cast(self, val):
        try:
            val = round(float(val), 3)
            if val < 0 or val > 1:
                raise Exception('Invalid EEG reading')
            return val
        except ValueError:
            raise Exception('Invalid EEG reading')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
normalizedamplitude,"

class normalizedamplitude(GeneralSemanticType):

    def __init__(self):
        self.description = 'Normalized amplitude of heartbeat signal'
        self.format = 'Amplitude should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.25, 0.75]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0.0 <= num <= 1.0:
                return num
            else:
                raise ValueError('Value out of range')
        except ValueError:
            raise TypeError('Invalid type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
tradingday,"

class tradingday(GeneralSemanticType):

    def __init__(self):
        self.description = 'A specific day where stock trading occurs'
        self.format = ""A string in the format: 'YYYY-MM-DD'""
        self.examples = ['2008-05-26', '2008-05-27', '2008-05-28', '2008-05-29', '2008-05-30']

    def super_cast(self, val):
        try:
            return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception(""Invalid data format. It should be 'YYYY-MM-DD'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
volumenumber,"

class volumenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of shares traded'
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Cannot convert {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
turnoveramount,"

class turnoveramount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of shares traded'
        self.format = 'Decimal number'
        self.examples = [1000.0, 5000.0, 10000.0, 50000.0, 100000.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
tradenumber,"

class tradenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of trades executed'
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def super_cast(self, val):
        if pd.isnull(val):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and (casted_val < 0 or not isinstance(casted_val, int)):
            return False
        else:
            return True"
deliverablevolumenumber,"

class deliverablevolumenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of shares delivered'
        self.format = 'Integer number'
        self.examples = [100, 500, 1000, 5000, 10000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deliverablerate,"

class deliverablerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of shares delivered'
        self.format = 'Decimal number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid input, expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
tradedvalue,"

class tradedvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value of stock traded'
        self.format = 'Value should be a floating point number'
        self.examples = [773478560000.0, 69215412470000.0, 103233973572500.0, 159671114968750.03, 1.5700395821970002e+16]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid input, not a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            raise ValueError('Invalid value. It should be a positive floating point number')
        return True"
numberoftrades,"

class numberoftrades(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.format = 'Number of trades should be an integer'
        self.examples = [612, 33748, 46755, 64106, 351215]

    def super_cast(self, val):
        if isinstance(val, float) and math.isnan(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        return False"
tradedate,"

class tradedate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the date of stock trading'
        self.format = 'Dates should be in YYYY-MM-DD format'
        self.examples = ['2017-11-01', '2020-02-20', '2020-03-11', '2020-03-09', '2020-03-06']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        else:
            try:
                datetime.strptime(val, '%Y-%m-%d')
                return val
            except ValueError:
                raise Exception('Invalid date format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
rowidentifier,"

class rowidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Row Identifier'
        self.format = 'Row ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Failed to cast value {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
tradingdate,"

class tradingdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trading Date'
        self.format = ""Date string in the format 'YYYY-MM-DD'""
        self.examples = ['2005-03-23', '2005-03-24', '2005-03-28', '2005-03-29', '2005-03-30']

    def super_cast(self, val):
        if isinstance(val, str):
            if re.match('^\\d{4}-\\d{2}-\\d{2}$', val):
                return val
            elif re.match('^\\d{2}/\\d{2}/\\d{4}$', val):
                return datetime.strptime(val, '%d/%m/%Y').strftime('%Y-%m-%d')
            else:
                raise Exception('Invalid date format')
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^\\d{4}-\\d{2}-\\d{2}$', casted_val):
            return True
        else:
            return False"
tradingvolume,"

class tradingvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock or cryptocurrency traded on a particular day'
        self.format = 'Should be a non-negative float'
        self.examples = [100000.0, 5000000.0, 10000000.0, 50000.0, 1000000000.0]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 1)
            if float_val < 0:
                raise ValueError('Invalid volume')
            else:
                return float_val
        except ValueError:
            raise ValueError('Invalid volume')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
stockname,"

class stockname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the Stock'
        self.format = 'Only uppercase letters should be used'
        self.examples = ['NESTLEIND', 'APPLE', 'MICROSOFT', 'GOOGLE', 'AMAZON']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
stockvalue,"

class stockvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The value of a stock in the stock market'
        self.format = 'Stock value should be formatted as a floating point number'
        self.examples = [80000.0, 90000.0, 75000.0, 176000.0, 50000.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val >= 0:
                return casted_val
            else:
                return None
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
volumecount,"

class volumecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of stocks traded in the stock market'
        self.format = 'Volume count should be an integer'
        self.examples = [648, 825, 68346, 1032, 330361]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value for volume count'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
turnovervalue,"

class turnovervalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The turnover value in the stock market'
        self.format = 'Turnover value should be a floating point number'
        self.examples = [163931630000.0, 205790905000.0, 16985494094999.998, 257168240000.0, 82929564305000.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
tradecount,"

class tradecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of trades in the stock market'
        self.format = 'Trade count as an integer'
        self.examples = [3500, 6352, 14116, 10000, 122364]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
stockdeliverablerate,"

class stockdeliverablerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stocks to traded stocks'
        self.format = 'Deliverable Rate should be represented as a floating point number'
        self.examples = [0.487, 0.617, 0.703, 0.9972, 0.5]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except Exception as e:
            raise ValueError(f'Unable to cast the value {val} to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
volumetraded,"

class volumetraded(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of a stock traded at a given point in time'
        self.format = 'Volume should be formatted as an integer'
        self.examples = [4456424, 9487878, 26833684, 15682286, 19870977]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input, expected an integer value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
volumestock,"

class volumestock(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of the stock'
        self.format = 'An integer'
        self.examples = [2373228, 4495741, 3434058, 6658801, 7873985]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or not isinstance(casted_val, int):
            return False
        return True"
unnamedindex,"

class unnamedindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of row'
        self.format = 'Integer index starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            return 'Could not cast value to integer: {}'.format(e)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
datestock,"

class datestock(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.format = 'Date should be a string of the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def super_cast(self, val):
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', casted_val):
            return True
        else:
            return False"
rowindex,"

class rowindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Row index in a table'
        self.format = 'Row indices should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError()
            else:
                return casted_val
        except ValueError:
            return 'Invalid value for cast'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deliverableratio,"

class deliverableratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'Deliverable ratio of the stock'
        self.format = 'Deliverable ratio should be a float between 0 and 1'
        self.examples = [0.2491, 0.1852, 0.1696, 0.1714, 0.1818]

    def super_cast(self, val):
        try:
            val = float(val)
            return val
        except ValueError:
            raise Exception('Super cast error: Unable to convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False
    pass"
stockdeliverablepercent,"

class stockdeliverablepercent(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Deliverable percent of the stock'
        self.format: str = 'Floating point number'
        self.examples: list = [0.0236, 0.1, 0.25, 0.5, 0.75]

    def super_cast(self, val):
        if pd.isna(val):
            return val
        else:
            return round(float(val), 4)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
ordinal,"

class ordinal(GeneralSemanticType):

    def __init__(self):
        self.description = 'An ordinal number represents the position of an entity'
        self.format = 'The number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            return num if num >= 0 else None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
datestamp,"

class datestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'A date'
        self.format = 'YYYY-MM-DD as a string'
        self.examples = ['2014-10-09', '2015-06-16', '2015-06-24', '2020-10-12', '2020-09-02']

    def super_cast(self, val):
        if isinstance(val, datetime.date):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                date = datetime.strptime(val, '%Y-%m-%d')
                return date.strftime('%Y-%m-%d')
            except ValueError:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
companyname,"

class companyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a company'
        self.format = 'Company names should be a capitalized string'
        self.examples = ['Google', 'YouTube', 'RVSN USSR', 'Arianespace', 'CASC']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).title().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or np.isnan(casted_val):
            return True
        else:
            return False"
industry,"

class industry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Industry vertical of the startup'
        self.format = 'The name should be capitalized'
        self.examples = ['FINANCIAL SERVICES', 'ENERGY', 'CONSUMER GOODS', 'AUTOMOBILE', 'METALS']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
seriestype,"

class seriestype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a stock series'
        self.format = 'Capitalized string'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).upper() if val == 'EQ' else 'UNKNOWN'
        else:
            return 'UNKNOWN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'EQ':
            return True
        else:
            return False"
isincode,"

class isincode(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISIN code of a stock'
        self.format = 'The ISIN code should be capitalized'
        self.examples = ['INE742F01042', 'INE089A01023', 'INE121J01017', 'INE238A01034', 'INE917I01010']

    def super_cast(self, val):
        if len(str(val)) == 12:
            return str(val).upper()
        else:
            return 'INVALID'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 12:
            return True
        else:
            return False"
booleanhealthindicator,"

class booleanhealthindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'A health indicator as a boolean'
        self.format = 'Yes/No String'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if val in ['No', 'Yes']:
            return val
        else:
            return 'No'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
bodymassindex,"

class bodymassindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index'
        self.format = 'A floating point number'
        self.examples = [26.97, 28.73, 25.34, 28.58, 23.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isinf(casted_val):
            return False
        return True"
healthdays,"

class healthdays(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of days of poor health'
        self.format = 'Health days should be formatted as a float'
        self.examples = [3.0, 0.0, 20.0, 0.0, 28.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('The value should be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 30:
            return True
        else:
            return False"
diabetesstatus,"

class diabetesstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of diabetes in the individual'
        self.format = 'Diabetes status should be a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'No']

    def super_cast(self, val):
        if isinstance(val, (int, float, np.number)):
            if val == 1:
                return 'No'
            elif val == 2:
                return 'Yes'
            elif val == 3:
                return 'No, borderline diabetes'
            elif val == 4:
                return 'Yes (during pregnancy)'
            else:
                return 'Unknown'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['No', 'Yes', 'No, borderline diabetes', 'Yes (during pregnancy)', 'Unknown']:
            return True
        else:
            return False"
generalhealthstatus,"

class generalhealthstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'General Health Status'
        self.format = 'General health status should be a string'
        self.examples = ['Very good', 'Very good', 'Fair', 'Good', 'Very good']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Very good', 'Good', 'Excellent', 'Fair', 'Poor']:
            return True
        else:
            return False"
sleeptimehours,"

class sleeptimehours(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of hours of sleep'
        self.format = 'Sleep time should be formatted as a float representing hours'
        self.examples = [5.0, 7.0, 8.0, 6.0, 8.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        else:
            try:
                return float(str(val))
            except ValueError:
                raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 24:
            return True
        else:
            return False"
digitlabel,"

class digitlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label representing the digit in the image'
        self.format = 'Digit'
        self.examples = [7, 2, 1, 0, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError('Invalid value, should be a digit from 0 to 9.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 9:
            return True
        else:
            return False"
mnistlabel,"

class mnistlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'The label of the MNIST image'
        self.format = 'Label should be a single digit integer'
        self.examples: list = [5, 0, 4, 1, 9]

    def super_cast(self, val):
        try:
            num = int(val)
            if 0 <= num <= 9:
                return num
            else:
                raise ValueError('Invalid MNIST label')
        except ValueError as e:
            print(f'Unable to cast value: {val}. Reason: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 9:
            return True
        else:
            return False"
carmanufacturer,"

class carmanufacturer(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a car manufacturer'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Chevrolet', 'Ford', 'Volkswagen', 'Toyota', 'Dodge']

    def super_cast(self, val):
        return str(val).title().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
carmanufacturingyear,"

class carmanufacturingyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year a car was manufactured'
        self.format = 'Years should be integers'
        self.examples = [2011, 2012, 2013, 2014, 2015]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            return 'Invalid data type, cannot convert to integer'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1886 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
enginefueltype,"

class enginefueltype(GeneralSemanticType):

    def __init__(self):
        self.description = ""Type of fuel used by the car's engine""
        self.format = 'Fuel types should be strings, all lowercase'
        self.examples = ['regular unleaded', 'premium unleaded (required)', 'premium unleaded (recommended)', 'flex-fuel (unleaded/E85)', 'diesel']

    def super_cast(self, val):
        return str(val).lower().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['regular unleaded', 'premium unleaded (required)', 'premium unleaded (recommended)', 'flex-fuel (unleaded/E85)', 'diesel']
        if casted_val in valid_values:
            return True
        else:
            return False"
enginehorsepower,"

class enginehorsepower(GeneralSemanticType):

    def __init__(self):
        self.description = ""Horsepower of a car's engine""
        self.format = 'Horsepower should be a floating point number'
        self.examples = [335.0, 300.0, 300.0, 230.0, 230.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
enginecylinders,"

class enginecylinders(GeneralSemanticType):

    def __init__(self):
        self.description = ""Number of cylinders in a car's engine""
        self.format = 'Cylinders should be a floating point number'
        self.examples = [6.0, 6.0, 6.0, 6.0, 6.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
transmissiontype,"

class transmissiontype(GeneralSemanticType):

    def __init__(self):
        self.description = ""Type of car's transmission system""
        self.format = 'Transmission types should be strings, all uppercase'
        self.examples = ['AUTOMATIC', 'MANUAL', 'AUTOMATED_MANUAL', 'DIRECT_DRIVE', 'UNKNOWN']

    def super_cast(self, val):
        if val.lower() in ['manual', 'automatic', 'semi-auto', 'other']:
            return val.upper()
        elif val.upper() in ['AUTOMATIC', 'MANUAL', 'AUTOMATED_MANUAL', 'DIRECT_DRIVE', 'UNKNOWN']:
            return val.upper()
        else:
            raise ValueError('Invalid transmission type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['AUTOMATIC', 'MANUAL', 'AUTOMATED_MANUAL', 'DIRECT_DRIVE', 'UNKNOWN']:
            return True
        else:
            return False"
drivenwheels,"

class drivenwheels(GeneralSemanticType):

    def __init__(self):
        self.description = 'Drive train type of the car'
        self.format = 'Drive trains should be strings, all lowercase'
        self.examples = ['front wheel drive', 'rear wheel drive', 'all wheel drive', 'four wheel drive']

    def super_cast(self, val):
        return str(val).lower().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['front wheel drive', 'rear wheel drive', 'all wheel drive', 'four wheel drive']:
            return True
        else:
            return False"
numberofdoors,"

class numberofdoors(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of doors in a car'
        self.format = 'Number of doors should be an integer'
        self.examples = [2, 3, 4, 5, 5]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError('Invalid input. Please input a valid number of doors.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 2 or casted_val > 5:
            raise ValueError('Invalid value. Number of doors should be between 2 and 5.')
        else:
            return True"
vehiclesize,"

class vehiclesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the vehicle'
        self.format = 'Sizes should be strings, first letter capitalized'
        self.examples = ['Compact', 'Midsize', 'Large']

    def super_cast(self, val):
        return str(val).title().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Compact', 'Midsize', 'Large']:
            return True
        else:
            return False"
vehiclestyle,"

class vehiclestyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of the vehicle'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Sedan', '4dr SUV', 'Coupe', 'Convertible', '4dr Hatchback']

    def super_cast(self, val):
        return str(val).title().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle() and isinstance(casted_val, str):
            return True
        else:
            return False"
highwaymileage,"

class highwaymileage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Highway mileage of a car'
        self.format = 'Mileage should be an integer'
        self.examples = [26, 28, 30, 32, 34]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
citymileage,"

class citymileage(GeneralSemanticType):

    def __init__(self):
        self.description = 'City mileage of a car'
        self.format = 'Mileage should be an integer'
        self.examples = [19, 20, 21, 22, 23]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carpopularity,"

class carpopularity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Popularity of a car'
        self.format = 'Popularity should be an integer'
        self.examples = [3916, 4000, 4100, 4200, 4300]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value can't be converted to int"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
carprice,"

class carprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in USD of a car'
        self.format = 'Price should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [13495.0, 16500.0, 13950.0, 17450.0, 10295.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
personidentifier,"

class personidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a person'
        self.format = 'Person ID should be formatted as a whole number'
        self.examples = [3748, 14658, 7064, 3739, 48933]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for Person ID. It should be a whole number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
movieidentifier,"

class movieidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a movie'
        self.format = ""Movie ID should be stored as a string of the form 'tmXXXXX' or an integer""
        self.examples = ['tm32982', 'tm244149', 19995, 285, 206647]

    def super_cast(self, val):
        if isinstance(val, str):
            match_obj = re.match('tm[0-9]+', val)
            if match_obj:
                return match_obj.group()
        elif isinstance(val, (int, float, np.int64)):
            return int(val)
        else:
            raise Exception('Invalid movie id')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('tm[0-9]+', casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
charactername,"

class charactername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Character'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Travis Bickle', 'Iris Steensma', 'Tom', ""Matthew 'Sport' Higgins"", 'Betsy']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
role,"

class role(GeneralSemanticType):

    def __init__(self):
        self.description = 'Role of a Person in a movie'
        self.format = 'Role should be stored as a string'
        self.examples = ['ACTOR', 'DIRECTOR']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.upper()
        else:
            raise Exception('Invalid role')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['ACTOR', 'DIRECTOR']:
            return True
        else:
            return False"
title,"

class title(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of the film, series or Game of Thrones'
        self.format = 'Title should be capitalized appropriately'
        self.examples = ['Five Came Back: The Reference Films', 'Taxi Driver', 'Deliverance', 'Monty Python and the Holy Grail', 'The Dirty Dozen']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
type,"

class type(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of media'
        self.format = 'In upper-case and as a string'
        self.examples = ['MOVIE', 'SHOW', 'MOVIE', 'SHOW', 'MOVIE']

    def super_cast(self, val):
        if isinstance(val, str) and val.isalpha():
            return str(val).upper()
        else:
            words = str(val).split('_')
            return ''.join((word.capitalize() for word in words))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['MOVIE', 'SHOW']:
            return True
        else:
            return False"
releaseyear,"

class releaseyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year in which the film or series was released'
        self.format = 'A 4-digit integer'
        self.examples = [1994, 2005, 2010, 2020, 1945]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Cannot convert value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1895 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
agecertification,"

class agecertification(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age certification of the film or series'
        self.format = 'String in upper case'
        self.examples = ['TV-MA', 'R', 'TV-14', 'PG-13', 'PG']

    def super_cast(self, val):
        try:
            return str(val).upper()
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
runtime,"

class runtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Runtime of movies or series'
        self.format = 'Runtime should be an integer representing duration in minutes'
        self.examples = [51, 114, 109, 91, 150]

    def super_cast(self, val):
        if isinstance(val, str) and ' ' in val:
            val = val.split(' ')[0]
        try:
            return int(val)
        except ValueError:
            return 'Invalid runtime'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
genres,"

class genres(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genres of the film or series'
        self.format = 'Genres should be a list of strings, each string represents a genre'
        self.examples = [""['Documentation']"", ""['Drama', 'Crime']"", ""['Drama', 'Action', 'Thriller', 'European']"", ""['Fantasy', 'Action', 'Comedy']"", ""['War', 'Action']""]

    def super_cast(self, val):
        return [x.strip().title() for x in re.findall(""'(.*?)'"", val, re.DOTALL)]

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, list) and all((isinstance(i, str) for i in casted_val)):
            return True
        else:
            return False"
productioncountries,"

class productioncountries(GeneralSemanticType):

    def __init__(self):
        self.description = 'Countries where the film or series was produced'
        self.format = 'Countries should be a list of strings, each string represents a country name'
        self.examples = ['United States', 'India', 'Japan', '', 'Korea, Republic of']

    def super_cast(self, val):
        if isinstance(val, str):
            country_codes = [x.strip().upper() for x in re.findall(""'(.*?)'"", val, re.DOTALL)]
            return [pycountry.countries.get(alpha_2=code).name for code in country_codes if pycountry.countries.get(alpha_2=code)]
        elif isinstance(val, list):
            return [pycountry.countries.get(alpha_2=code.upper()).name for code in val if pycountry.countries.get(alpha_2=code.upper())]
        else:
            return []

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, list) and all((isinstance(i, str) for i in casted_val)):
            for i in casted_val:
                if pycountry.countries.get(name=i) is None:
                    return False
            return True
        else:
            return False"
seasons,"

class seasons(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of seasons in the series'
        self.format = 'Number of seasons should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and casted_val >= 1:
            return True
        else:
            return False"
imdbidentifier,"

class imdbidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'IMDB ID of the film or series'
        self.format = 'IMDB ID must be a string'
        self.examples = ['tt0075314', 'tt0060862', 'tt0071853', 'tt0061578', 'tt0063929']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^tt\\d+$', casted_val):
            return True
        else:
            return False"
imdbscore,"

class imdbscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'IMDB score of the film or series'
        self.format = 'IMDB score should be a floating point number'
        self.examples = [8.2, 7.7, 6.6, 5.5, 4.4]

    def super_cast(self, val):
        try:
            score = round(float(val), 1)
            if 0 <= score <= 10:
                return score
            else:
                return None
        except (TypeError, ValueError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 10:
            return True
        else:
            return False"
imdbvotes,"

class imdbvotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of votes the film or series has on IMDB'
        self.format = 'Number of votes should be an integer'
        self.examples = [808582, 107673, 534486, 72662, 10000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
tmdbpopularity,"

class tmdbpopularity(GeneralSemanticType):

    def __init__(self):
        self.description = 'TMDB popularity score of the film or series'
        self.format = 'TMDB popularity score should be a floating point number'
        self.examples = [40.965, 10.01, 15.461, 20.398, 0.6]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return round(float(val), 3)
        elif isinstance(val, (int, float)):
            return round(val, 3)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tmdbscore,"

class tmdbscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'TMDB score of the film or series'
        self.format = 'TMDB score should be a floating point number'
        self.examples = [8.179, 7.3, 7.811, 7.6, 6.5]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 3)
        except ValueError:
            casted_val = None
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return 0 <= casted_val <= 10"
youtubeidentifier,"

class youtubeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'YouTube Video ID'
        self.format = 'YouTube Video IDs must be strings of length 11'
        self.examples = ['-0Gj8-vB1q4', '-0SdAVK79lg', '-0vPFx-wRRI', '-0xzrMun0Rs', '-1LrH01Ei1w']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 11:
            return True
        else:
            return False"
audiosetlabel,"

class audiosetlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'AudioSet Label'
        self.format = 'AudioSet Labels must be strings'
        self.examples = ['/m/0140xf,/m/02cjck,/m/04rlf', '/m/0155w,/m/01lyv,/m/0342h,/m/042v_gx,/m/04rlf,/m/04szw,/m/07s0s5r,/m/0fx80y,/m/0gg8l', '/m/025_jnm,/m/04rlf', '/m/01g90h,/m/04rlf', '/m/02p0sh1,/m/04rlf']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
authoridentifier,"

class authoridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Author ID'
        self.format = 'Author ID should be formatted as an integer between 0 and 9'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 9:
            return True
        else:
            return False"
flag,"

class flag(GeneralSemanticType):

    def __init__(self):
        self.description = 'A flag'
        self.format = 'As a boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val in ['True', 'true', '1', 1]:
            return True
        elif val in ['False', 'false', '0', 0]:
            return False
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
height,"

class height(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of an entity'
        self.format = 'Height should be a float in centimeters'
        self.examples = [150.0, 160.0, 170.0, 180.0, 190.0]

    def super_cast(self, val):
        if isinstance(val, str) and 'nan' not in val:
            (feet, inches) = map(int, re.findall('\\d+', val))
            return feet * 30.48 + inches * 2.54
        elif isinstance(val, int) or isinstance(val, float):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 300:
            return True
        else:
            return False"
weight,"

class weight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight of an entity'
        self.format = 'In kilograms, as an integer'
        self.examples = [67, 80, 80, 95, 92]

    def super_cast(self, val):
        if isinstance(val, str) and 'lbs' in val:
            return round(float(re.findall('\\d+', val)[0]) * 0.45359237)
        elif isinstance(val, float):
            return round(val * 0.45359237)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 500:
            return False
        else:
            return True"
nationality,"

class nationality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nationality of an entity'
        self.format = 'Country name in title case'
        self.examples = ['Argentina', 'Portugal', 'Netherlands', 'Sweden', 'Germany']

    def super_cast(self, val):
        if isinstance(val, str):
            country = str(val).title()
            if pycountry.countries.get(name=country):
                return country
            else:
                raise ValueError('Invalid nationality')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
club,"

class club(GeneralSemanticType):

    def __init__(self):
        self.description = 'Club that a person belongs to'
        self.format = 'Club should be a string'
        self.examples = ['FC Barcelona', 'Real Madrid', 'FC Bayern München', 'Paris Saint-Germain', 'FC Bayern München']

    def super_cast(self, val):
        try:
            return str(val)
        except:
            raise ValueError('Unable to convert value to string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
realface,"

class realface(GeneralSemanticType):

    def __init__(self):
        self.description = 'Is it a real face or not'
        self.format = ""String representation 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'Yes', 'No']

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'yes':
                return 'Yes'
            elif val.lower() == 'no':
                return 'No'
            else:
                raise ValueError(f""'{val}' is not a valid real face value"")
        else:
            raise ValueError(f""'{val}' is not a valid real face value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
playerscore,"

class playerscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The overall/potential score of the player'
        self.format = 'integer'
        self.examples = [94, 94, 92, 91, 91]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(f""Can't convert {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
playerposition,"

class playerposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Position of a player on the field'
        self.format = 'Positions should be a comma-separated string of positions'
        self.examples = ['CM, CAM, LM, ST', 'LM, CM', 'ST', 'LM, CAM', 'CM']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.upper().split(', ')
        else:
            raise TypeError(f'Invalid type {type(val)}. Expected string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        positions = ['ST', 'LW', 'CF', 'RW', 'CAM', 'CM', 'GK']
        if all((position in positions for position in casted_val)):
            return True
        else:
            return False"
playerreputation,"

class playerreputation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The international reputation of the player'
        self.format = 'Reputation should be formatted as an integer'
        self.examples = [5, 5, 5, 4, 4]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 6):
            return True
        else:
            return False"
playerskill,"

class playerskill(GeneralSemanticType):

    def __init__(self):
        self.description = 'The skill moves rating of the player'
        self.format = 'Skill moves rating should be formatted as an integer'
        self.examples = [5, 4, 5, 1, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for playerskill')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
playerworkrate,"

class playerworkrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The work rate of the player'
        self.format = 'Work rate codes should be stored as strings'
        self.examples = ['Medium/Medium', 'High/Medium', 'Medium/High', 'High/High', 'Medium/Low']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
playerrealface,"

class playerrealface(GeneralSemanticType):

    def __init__(self):
        self.description = 'Real face of player'
        self.format = 'In capitalized form as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str):
            cap_string_val = str(val).capitalize()
            if cap_string_val in ['Yes', 'No']:
                return cap_string_val
            else:
                raise Exception('Invalid real face value')
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
playerreleaseclause,"

class playerreleaseclause(GeneralSemanticType):

    def __init__(self):
        self.description = 'The release clause of the player in EUR'
        self.format = 'Release clause should be formatted as a floating point number with two decimal places for cents'
        self.examples = [127100000.0, 226500000.0, 228100000.0, 138600000.0, 196400000.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return round(float(val), 2)
        elif isinstance(val, float):
            return round(val, 2)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
playernationality,"

class playernationality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nationality of a player'
        self.format = 'Nationality should be a full, capitalized country name'
        self.examples = ['Argentina', 'Portugal', 'Poland', 'Brazil', 'Belgium']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
playeroverall,"

class playeroverall(GeneralSemanticType):

    def __init__(self):
        self.description = 'Overall rating of a player'
        self.format = 'Overall rating should be an integer'
        self.examples = [94, 93, 92, 91, 91]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError('Invalid value. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            raise ValueError('Invalid value. Rating should be an integer between 0 and 100.')"
playerpreferredfoot,"

class playerpreferredfoot(GeneralSemanticType):

    def __init__(self):
        self.description = ""Player's preferred foot for playing""
        self.format = ""Preferred foot should be one of 'right' or 'left'""
        self.examples = ['right', 'left', 'right', 'left', 'right']

    def super_cast(self, val):
        val = str(val).lower()
        if val not in ['right', 'left']:
            raise Exception('Invalid Preferred Foot')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['right', 'left']:
            return True
        else:
            return False"
urlidentifier,"

class urlidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'URL ID related to the team or league'
        self.format = 'URL ID should be a positive integer'
        self.examples = [241, 11, 5, 243, 1]

    def super_cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        elif isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if int_val > 0:
                return int_val
            else:
                raise ValueError('Invalid URL ID')
        else:
            raise TypeError('URL ID should be a positive integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
leaguename,"

class leaguename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Football League'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Spain Primera Division', 'English Premier League', 'Italian Serie B', 'Spanish Segunda División', 'Argentina Primera División']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z .]*$', casted_val):
            return True
        else:
            return False"
idnumber,"

class idnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier number'
        self.format = 'ID numbers should be integer values'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid ID Number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
bankruptcyflag,"

class bankruptcyflag(GeneralSemanticType):

    def __init__(self):
        self.description = 'A bankruptcy flag'
        self.format = 'Integer [0,1]'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
proportion,"

class proportion(GeneralSemanticType):

    def __init__(self):
        self.description = 'A proportion or ratio, expressed as a float between 0 and 1'
        self.format = 'Proportions should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 1:
                raise ValueError('Invalid proportion')
            return num
        except Exception as e:
            raise ValueError(f'Error in super_cast: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            assert casted_val >= 0 and casted_val <= 1, 'The proportion value is out of the range [0,1]'
            return True
        except AssertionError as e:
            print(str(e))
            return False"
currency,"

class currency(GeneralSemanticType):

    def __init__(self):
        self.description = 'Currency'
        self.format = 'Currency should be a string of three uppercase letters'
        self.examples = ['USD', 'EUR', 'GBP', 'INR', 'CAD']

    def super_cast(self, val):
        if isinstance(val, float):
            return 'USD'
        else:
            val = str(val).upper()
            if pycountry.currencies.get(alpha_3=val):
                return val
            else:
                return 'USD'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.currencies.get(alpha_3=casted_val):
            return True
        else:
            return False"
growthrate,"

class growthrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'A growth rate'
        self.format = 'Growth rates should be floating point numbers between 0 and 1, inclusive'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError as e:
            raise Exception('Invalid input for growth rate: ' + str(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 1:
            return False
        else:
            return True"
boxoffice,"

class boxoffice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total Box Office'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,443,955', '$11,948,096,650', '$10,993,991,460']

    def super_cast(self, val):
        try:
            casted_val = str(val)
            if ',' in casted_val:
                casted_val = casted_val.replace(',', '')
            if '$' not in casted_val:
                casted_val = '$' + casted_val
            return casted_val
        except Exception as e:
            raise Exception(f'Failed to cast value {val}: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\$\\d+', casted_val):
            return True
        else:
            return False"
inflationadjustedboxoffice,"

class inflationadjustedboxoffice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total Box Office or Total Inflation Adjusted Box Office'
        self.format = 'Numbers represented as strings without comma separators and a dollar sign'
        self.examples = ['3881777912', '2048534616', '11253443955', '11948096650', '10993991460']

    def super_cast(self, val):
        return val.replace(',', '').replace('$', '')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            float(casted_val)
            return True
        except ValueError:
            return False"
averageticketprice,"

class averageticketprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Box Office or Average Ticket Price'
        self.format = 'Numbers represented as strings with comma separators and a dollar sign'
        self.examples = ['$3,881,777,912', '$2,048,534,616', '$11,253,443,955', '$11,948,096,650', '$10,993,991,460']

    def super_cast(self, val):
        if isinstance(val, str) and val[0] == '$':
            return val
        else:
            return '${:,}'.format(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\$\\d+(,\\d{3})*(\\.\\d{2})?$', casted_val):
            return True
        else:
            return False"
movietitle,"

class movietitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a Movie'
        self.format = 'Title should be in title case'
        self.examples = ['Cinderella', 'The Three Musketeers', 'Treasure Island', 'Hero', 'Alice in Wonderland']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
mpaarating,"

class mpaarating(GeneralSemanticType):

    def __init__(self):
        self.description = 'MPAA Rating of the movie'
        self.format = 'Rating should be a string'
        self.examples = ['PG-13', 'PG', 'G', 'R']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
distributor,"

class distributor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Distributor of the movie'
        self.format = 'Distributor should be a string'
        self.examples = ['Walt Disney', 'Warner Bros.', 'Sony Pictures', '20th Century Fox', 'Paramount Pictures']

    def super_cast(self, val):
        try:
            casted_val = str(val)
            return casted_val
        except Exception as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
totalforyear,"

class totalforyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total for the year in USD'
        self.format = 'Total should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [184031112.0, 306169255.0, 250650052.0, 443319081.0, 430443350.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '').replace('$', '')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ranking,"

class ranking(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ranking of an entity based on a defined criteria'
        self.format = 'Ranking should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and val.is_integer():
            return int(val)
        else:
            raise Exception('Invalid ranking')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
creativetype,"

class creativetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of creative work'
        self.format = 'Creative types are strings in title format'
        self.examples = ['Contemporary Fiction', 'Kids Fiction', 'Science Fiction', 'Fantasy', 'Super Hero']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
distributorname,"

class distributorname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Movie Distributor'
        self.format: str = 'The distributor name should be capitalized and may contain spaces or special characters'
        self.examples: list = ['Walt Disney', 'Warner Bros.', 'Sony Pictures', 'Universal', '20th Century Fox']

    def super_cast(self, val):
        if not isinstance(val, str):
            raise ValueError('Expected a string value.')
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and isinstance(casted_val, str):
            return True
        else:
            return False"
currencyamount,"

class currencyamount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Currency amount'
        self.format = 'Amounts should be floating point numbers'
        self.examples = [40472424.278, 36269425.479, 29113002302.0, 28089932569.0, 25857839756.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.startswith('$'):
                return float(val.replace('$', '').replace(',', ''))
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError('Cannot cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
grossrevenue,"

class grossrevenue(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The gross revenue in USD'
        self.format: str = 'Gross revenue should be formatted as a floating point number (in USD units)'
        self.examples: list = [64529536530.0, 49339974493.0, 35586177269.0, 33687992318.0, 19810201102.0]

    def super_cast(self, val):
        if isinstance(val, str) and ('$' in val or ',' in val):
            return float(val.replace(',', '').replace('$', ''))
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            return 'Invalid format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tableindex,"

class tableindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each row in a table'
        self.format = 'An integer starting from 0 and incrementing by 1 for each row'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0:
            return False
        return True"
tableposition,"

class tableposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'The position or rank of an entity in a list or table'
        self.format = 'integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
filmrating,"

class filmrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Motion Picture Association of America (MPAA) film rating system'
        self.format = 'Film ratings should be in string format'
        self.examples = ['PG-13', 'R', 'PG', 'G', 'Not Rated']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['PG-13', 'R', 'PG', 'G', 'Not Rated']:
            return True
        else:
            return False"
currencyvalue,"

class currencyvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A currency value'
        self.format = 'Currency Value should be a floating point number'
        self.examples = [113524789243.0, 63497164978.0, 49124317794.0, 9572240391.0, 1918358283.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace('$', '').replace(',', '')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        return True"
percentvalue,"

class percentvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.format = 'Percentage Value should be a floating point number'
        self.examples = [47.75, 26.71, 20.66, 4.03, 0.81]

    def super_cast(self, val):
        if isinstance(val, str):
            return float(val.replace('%', ''))
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
source,"

class source(GeneralSemanticType):

    def __init__(self):
        self.description = 'The source or origin of an entity'
        self.format = 'A string with each word capitalized'
        self.examples = ['Twitter For Iphone', 'Twitter For Android', 'Twitter Web App', 'Original Screenplay', 'Based On Fiction Book/Short Story']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
marketshare,"

class marketshare(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage share of a particular entity in the market'
        self.format = 'Market share should be a non-negative floating point number between 0 and 100'
        self.examples = [44.74, 19.77, 9.83, 5.4, 4.79]

    def super_cast(self, val):
        try:
            val = float(val.replace('%', ''))
            return val
        except:
            raise Exception('Invalid market share')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
productionmethod,"

class productionmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Method of production for a movie'
        self.format = 'The method of production should be capitalized'
        self.examples = ['Live Action', 'Animation/Live Action', 'Digital Animation', 'Hand Animation', 'Stop-Motion Animation']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
grossmoney,"

class grossmoney(GeneralSemanticType):

    def __init__(self):
        self.description = 'The gross income in USD'
        self.format = 'Floating point number (in USD units)'
        self.examples = [10000.0, 5000.5, 7500.75, 15000.0, 20000.0]

    def super_cast(self, val):
        try:
            return float(str(val).replace(',', '').replace('$', ''))
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and (not np.isnan(casted_val)):
            return True
        else:
            return False"
filmcount,"

class filmcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Films'
        self.format = 'Film count should be formatted as an integer'
        self.examples: list = [5, 10, 15, 20, 25]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Invalid film count')
            return casted_val
        except Exception as e:
            raise ValueError('Invalid value for film count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
scoringcount,"

class scoringcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Scoring Count'
        self.format = 'A non-negative integer'
        self.examples = [194, 196, 421, 728, 2682]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and (str(val).isdigit() or (str(val).lstrip('-').isdigit() and int(val) >= 0)):
            return int(val)
        else:
            raise Exception('Invalid scoring count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
reviewdate,"

class reviewdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review Date'
        self.format = ""Dates should be of the format 'yyyy-mm-dd'""
        self.examples = ['2017-12-19', '2018-08-28', '2017-12-20', '2018-05-19', '2018-05-15']

    def super_cast(self, val):
        try:
            if '-' in val:
                date = datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
                return date.strftime('%Y-%m-%d')
            elif '/' in val:
                date = datetime.strptime(val, '%m/%d/%Y')
                return date.strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid review date')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
averagescore,"

class averagescore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average Score'
        self.format = 'Average Score should be a floating point number between 0 and 10'
        self.examples = [8.4, 8.39, 7.7, 8.9, 9.8]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 10:
                return num
            else:
                raise ValueError('Value not in range 0-10')
        except ValueError as e:
            print(f'Error: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
hotelname,"

class hotelname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hotel Name'
        self.format = 'String that represents a valid hotel name'
        self.examples = ['Britannia International Hotel Canary Wharf', 'Grand Royale London Hyde Park', 'Intercontinental London The O2', 'Park Plaza County Hall London', 'Park Plaza London Riverbank']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
wordcount,"

class wordcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Word frequency count'
        self.format = 'An integer number'
        self.examples = [23135851162, 13151942776, 12997637966, 12136980858, 9081174698]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
reviewcount,"

class reviewcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review Count'
        self.format = 'Review Count should be a non-negative integer'
        self.examples = [1016, 2007, 2903, 9086, 45]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise Exception('Invalid value for review count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
reviewerscore,"

class reviewerscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reviewer Score'
        self.format = 'Reviewer Score should be a floating point number between 0 and 10'
        self.examples = [7.5, 8.8, 9.6, 10.0, 2.5]

    def super_cast(self, val):
        num = float(val)
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 10:
            return True
        else:
            return False"
daysincereview,"

class daysincereview(GeneralSemanticType):

    def __init__(self):
        self.description = 'Days Since Review'
        self.format = ""A string that represents a valid number of days, ending with ' days'""
        self.examples = ['1 days', '120 days', '322 days', '534 days', '464 days']

    def super_cast(self, val):
        match_obj = re.match('(\\d+) days', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Days Since Review')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            days = int(casted_val.split(' ')[0])
            return days >= 0
        except:
            return False"
memberidentifier,"

class memberidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The member id of a customer in a dataset'
        self.format = 'Member id should be an integer with no decimal places'
        self.examples = [1808, 2552, 2300, 1187, 3037]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Error: Invalid input for member identifier. Expected integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1000 <= casted_val <= 5000:
            return True
        else:
            return False"
groceryitem,"

class groceryitem(GeneralSemanticType):

    def __init__(self):
        self.description = 'Description of grocery item'
        self.format = 'Grocery item should be a string'
        self.examples = ['tropical fruit', 'whole milk', 'pip fruit', 'other vegetables', 'whole milk']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
countyidentifier,"

class countyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identifier for a county'
        self.format = 'An integer representing a county identifier'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError(f'Unable to convert {val} to integer: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
stateabbreviation,"

class stateabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of a state'
        self.format = 'A two-letter capitalized string'
        self.examples = ['CA', 'TX', 'NY', 'WA', 'FL']

    def super_cast(self, val):
        casted_val = str(val).upper()
        if len(casted_val) != 2:
            raise Exception('Invalid state abbreviation')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 2 and casted_val.isupper():
            return True
        else:
            return False"
populationcount,"

class populationcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Population count'
        self.format = 'An integer representing population count'
        self.examples = [318857056, 4849377, 55395, 200111, 26887]

    def super_cast(self, val):
        if isinstance(val, str):
            if ',' in val:
                val = val.replace(',', '')
            try:
                return int(val)
            except ValueError:
                raise Exception('Invalid population count')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
percent,"

class percent(GeneralSemanticType):

    def __init__(self):
        self.description = 'A percentage value'
        self.format = 'In percentage as a floating point number with two decimal places'
        self.examples = [10.5, 50.5, 99.99, 0.01, 100.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.strip('%')
        val = float(val)
        if val <= 1:
            val *= 100
        return round(val, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
housingprice,"

class housingprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Median value of owner-occupied homes'
        self.format = 'Housing price should be represented as a float in USD'
        self.examples: list[float] = [24.0, 21.6, 34.7, 33.4, 36.2, 176700, 122500, 136200, 168600, 89200]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
usstate,"

class usstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'US States'
        self.format = 'Full name of the state with the first letter capitalized'
        self.examples = ['Illinois', 'California', 'Texas', 'Florida', 'Pennsylvania']

    def super_cast(self, val):
        if len(val) == 2 and val.isupper():
            for state in list(pycountry.subdivisions.get(country_code='US')):
                if state.code.split('-')[-1] == val:
                    return state.name.title()
        elif isinstance(val, str):
            return val.title()
        else:
            raise ValueError('Invalid input for US state')

    def validate(self, val):
        casted_val = self.super_cast(val)
        for state in list(pycountry.subdivisions.get(country_code='US')):
            if state.name.title() == casted_val:
                return True
        return False"
usstateabbreviation,"

class usstateabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'US State Abbreviations'
        self.format = 'Must be two capital letters'
        self.examples = ['MA', 'TX', 'VT', 'IA', 'GA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z]{2}$', casted_val) and any([state.code == casted_val for state in pycountry.subdivisions.get(country_code='US')]):
            return True
        else:
            return False"
politicalparty,"

class politicalparty(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political party of a candidate'
        self.format = 'Abbreviation in upper-case'
        self.examples = ['DEM', 'REP', 'LIB', 'WRI', 'IND']

    def super_cast(self, val):
        val = str(val)
        if val.upper() in ['DEM', 'REP', 'LIB', 'WRI', 'IND']:
            return val.upper()
        elif val.title() in ['Republican', 'Democrat']:
            if val.title() == 'Republican':
                return 'REP'
            elif val.title() == 'Democrat':
                return 'DEM'
        else:
            return 'IND'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['DEM', 'REP', 'LIB', 'WRI', 'IND']:
            return True
        else:
            return False"
candidate,"

class candidate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Names of presidential candidates'
        self.format = 'Names should be capitalized'
        self.examples = ['Joe Biden', 'Donald Trump', 'Jo Jorgensen', 'Howie Hawkins', 'Bernie Sanders']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val.istitle():
            return False
        return True"
votecount,"

class votecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vote count for an event'
        self.format = 'Integer, Positive'
        self.examples = [0, 50, 100, 150, 200]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
votepercent,"

class votepercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of votes cast for a candidate'
        self.format = 'Percentage should be represented as a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        percent = float(val)
        if percent > 1:
            percent = percent / 100
        return percent

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
bookingidentifier,"

class bookingidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique Booking Identifier'
        self.format: str = ""Booking ID should be of the form 'INNxxxxx', where x represents numbers""
        self.examples: list = ['INN00001', 'INN00002', 'INN00003', 'INN00004', 'INN00005']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = '^INN\\d+$'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
numberofadults,"

class numberofadults(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of adults in a booking'
        self.format: str = 'Number of adults should be an integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Could not cast the value to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
numberofchildren,"

class numberofchildren(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of children in a booking'
        self.format = 'Number of children should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
mealplan,"

class mealplan(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of meal plan selected for the booking'
        self.format = 'Meal plan should be a string'
        self.examples = ['Meal Plan 1', 'Not Selected', 'Meal Plan 2', 'Meal Plan 3']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
marketsegment,"

class marketsegment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market segment type for the booking'
        self.format = 'Market segment should be a string'
        self.examples = ['Online', 'Offline', 'Corporate', 'Complementary', 'Aviation']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Online', 'Offline', 'Corporate', 'Complementary', 'Aviation']:
            return True
        else:
            return False"
bookingstatus,"

class bookingstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Booking status of a reservation'
        self.format = ""A string indicating booking status, either 'Not_Canceled' or 'Canceled'""
        self.examples = ['Not_Canceled', 'Canceled', 'Not_Canceled', 'Canceled', 'Not_Canceled']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['Not_Canceled', 'Canceled']:
            return str_val
        else:
            raise ValueError('Invalid booking status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Not_Canceled', 'Canceled']:
            return True
        else:
            return False"
averagepriceperroom,"

class averagepriceperroom(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average price per room for the booking'
        self.format = 'A floating point number in USD'
        self.examples = [65.0, 106.68, 60.0, 100.0, 94.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
rankidentifier,"

class rankidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rank or id of an entity'
        self.format = 'Rank/Id should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Cannot cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
artistname,"

class artistname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of an artist'
        self.format = 'First letter of each word in the artist name should be capitalized'
        self.examples = ['Gorillaz', 'London Symphony Orchestra', 'Michael Jackson', 'P!nk', 'Eminem']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
albumtype,"

class albumtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of an album'
        self.format = 'Album type should be a string in lower case'
        self.examples = ['album', 'single', 'compilation']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['album', 'single', 'compilation']:
            return True
        else:
            return False"
danceability,"

class danceability(GeneralSemanticType):

    def __init__(self):
        self.description = 'The danceability score of a track'
        self.format = 'Danceability score should be a float between 0 and 1'
        self.examples = [0.818, 0.676, 0.695, 0.689, 0.663]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 3) if 0 <= num <= 1 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, float) and 0 <= casted_val <= 1"
energy,"

class energy(GeneralSemanticType):

    def __init__(self):
        self.description = 'A measure of the energy of a song'
        self.format = 'Energy should be a floating point number between 0 and 1'
        self.examples = [0.434, 0.359, 0.412, 0.338, 0.561]

    def super_cast(self, val):
        val = float(val)
        if np.isnan(val) or 0 <= val <= 1:
            return round(val, 3)
        else:
            raise Exception('Invalid energy measurement')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or 0 <= casted_val <= 1:
            return True
        else:
            return False"
loudness,"

class loudness(GeneralSemanticType):

    def __init__(self):
        self.description = 'The loudness score of a track'
        self.format = 'Loudness score as a float rounded to 3 decimal places'
        self.examples = [-6.679, -5.815, -3.93, -5.81, -8.627]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except Exception as e:
            raise ValueError('Invalid input for loudness: ' + str(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= float('-inf') and casted_val <= float('inf'):
            return True
        else:
            return False"
licensed,"

class licensed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether or not a person is licensed'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'true':
                return True
            elif val.lower() == 'false':
                return False
            else:
                return float('nan')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False, float('nan')]:
            return True
        else:
            return False"
officialvideo,"

class officialvideo(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a video is official or not'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        elif str(val).lower() == 'true':
            return True
        elif str(val).lower() == 'false':
            return False
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
income,"

class income(GeneralSemanticType):

    def __init__(self):
        self.description = 'Income in USD'
        self.format = 'Income should be formatted as a floating point number'
        self.examples = [5849.0, 4583.0, 3000.0, 2583.0, 6000.0]

    def super_cast(self, val):
        if isinstance(val, int) and val in range(1, 9):
            return round(float(val * 10000), 2)
        elif isinstance(val, float) or isinstance(val, int):
            return round(float(val), 2)
        else:
            raise ValueError('Invalid value for income')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        return True"
recency,"

class recency(GeneralSemanticType):

    def __init__(self):
        self.description = 'Days since last purchase'
        self.format = 'Recency should be an integer'
        self.examples = [58, 38, 26, 26, 94]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Cannot cast value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise ValueError('Invalid value: recency should be a non-negative integer')
        return True"
amountspent,"

class amountspent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount spent'
        self.format = 'In USD as floating point number'
        self.examples = [635.0, 11.0, 426.0, 11.0, 173.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        elif isinstance(val, str):
            try:
                return float(val)
            except ValueError:
                raise ValueError(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
numofpurchases,"

class numofpurchases(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of purchases'
        self.format: str = 'Number of purchases should be an integer'
        self.examples: list = [3, 2, 1, 2, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
complain,"

class complain(GeneralSemanticType):

    def __init__(self):
        self.description = 'Complain Status'
        self.format = 'Boolean as Integer (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
constantcolumn,"

class constantcolumn(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Constant column'
        self.format: str = 'Should be a constant integer'
        self.examples: list = [3, 3, 3, 11, 11]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in self.examples:
                return casted_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
response,"

class response(GeneralSemanticType):

    def __init__(self):
        self.description = 'A response'
        self.format = 'Integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
customerdays,"

class customerdays(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Number of days since customer joined'
        self.format = 'Customer days should be an integer'
        self.examples = [2822, 2272, 2471, 2298, 2320]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise ValueError('Invalid input. Expected an integer value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
maritalstatus,"

class maritalstatus(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Marital status of a person'
        self.format: str = 'lower-cased string'
        self.examples: list = ['married', 'single', 'divorced', 'married', 'single']

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 0:
                return 'single'
            elif val == 1:
                return 'married'
            else:
                return 'divorced'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['married', 'single', 'divorced']:
            return True
        else:
            return False"
education,"

class education(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of education'
        self.format = 'In capitalized string form'
        self.examples = ['Secondary / Secondary Special', 'Higher Education', 'Incomplete Higher', 'Lower Secondary', 'Academic Degree']

    def super_cast(self, val):
        if isinstance(val, int) or isinstance(val, float):
            if val == 0:
                return 'No Education'
            elif val in range(1, 7):
                return 'Education Level ' + str(val)
            elif val > 6:
                return 'Higher Education'
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['No Education', 'Education Level 1', 'Education Level 2', 'Education Level 3', 'Education Level 4', 'Education Level 5', 'Education Level 6', 'Higher Education']:
            return True
        elif isinstance(casted_val, str):
            return True
        else:
            return False"
customeridentifier,"

class customeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A unique identifier for a customer'
        self.format: str = 'Alphanumeric string'
        self.examples: list = ['06b8999e2fba1a1fbc88172c00ba8bc7', '18955e83d337fd6b2def6b18a428ac77', '4e7b3e00288586ebd08712fdd0374a03', 'b2b6027bc5c5109e529d4dc6358b12c3', '4f2d8ab171c80ec8364f7c12e35b23ad']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
balance,"

class balance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Balance amount'
        self.format = 'Balance should be represented as a float'
        self.examples = [2343.0, 45.0, 1270.0, 2476.0, 184.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
amount,"

class amount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The amount involved in different types of transactions'
        self.format = 'Amount should be formatted as a floating point number'
        self.examples = [950.0, 2600.0, 8750.0, 4929900.0, 25.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            return 'Invalid amount'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
transactioncount,"

class transactioncount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The count of different types of transactions'
        self.format = 'Transaction count should be formatted as an integer'
        self.examples = [0, 4, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input: Expected an integer value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError(""Invalid transaction count: It can't be negative."")
        return True"
creditlimit,"

class creditlimit(GeneralSemanticType):

    def __init__(self):
        self.description = ""The credit limit of a customer's credit card""
        self.format = 'A floating point number in USD'
        self.examples = [1000.0, 7000.0, 7500.0, 7500.0, 1200.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError('Invalid input for credit limit')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('Credit limit cannot be negative')
        elif not np.isfinite(casted_val):
            raise ValueError('Credit limit must be a finite number')
        else:
            return True"
tenure,"

class tenure(GeneralSemanticType):

    def __init__(self):
        self.description = 'The tenure of a customer in months'
        self.format = 'Integer representing months'
        self.examples = [1, 34, 2, 45, 2]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 72:
            return True
        else:
            return False"
binaryoutcome,"

class binaryoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary Outcome'
        self.format = 'Binary values 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ordinalnumeric,"

class ordinalnumeric(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ordinal data represented as integers'
        self.format = 'Ordinal data should be formatted as integers where higher values represent higher order'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
fullname,"

class fullname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Full name of a person'
        self.format = ""A full name should be formatted as 'First Middle (optional) Last'""
        self.examples = ['John Doe', 'Jane Mary Doe', 'James Smith', 'Michael Johnson', 'Robert Brown']

    def super_cast(self, val):
        parts = str(val).split(',')
        return parts[1].strip() + ' ' + parts[0].strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        parts = casted_val.split(' ')
        if len(parts) < 2:
            return False
        else:
            return True"
ticketnumber,"

class ticketnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ticket number'
        self.format = 'Alphanumeric string'
        self.examples = ['330911', '363272', '240276', '315154', '3101298']

    def super_cast(self, val):
        try:
            return str(val)
        except:
            raise ValueError('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
fare,"

class fare(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fare paid by a passenger'
        self.format = 'A non-negative floating point number rounded to 2 decimal places in USD'
        self.examples = [7.25, 71.2833, 7.925, 53.1, 8.05]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise ValueError('Input value cannot be converted to a floating point number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
cabin,"

class cabin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cabin number'
        self.format = 'Cabin number should be a string with alphanumeric characters'
        self.examples = ['B96 B98', 'C23 C25 C27', 'G6', 'C22 C26', 'F33']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-zA-Z0-9]*$', casted_val):
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
port,"

class port(GeneralSemanticType):

    def __init__(self):
        self.description = 'Port of Embarkation'
        self.format = ""Uppercase string, either 'S', 'C', or 'Q'""
        self.examples = ['S', 'C', 'Q', 'S', 'C']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S', 'C', 'Q', float('nan')]:
            return True
        else:
            return False"
handpreference,"

class handpreference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hand preference of an entity'
        self.format = ""Hand preference should be 'R'""
        self.examples = ['R', 'R', 'R', 'R', 'R']

    def super_cast(self, val):
        if val == 'R':
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'R':
            return True
        else:
            return False"
sociaeconomicstatus,"

class socioeconomicstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Socio-economic status of an entity'
        self.format = 'Socio-economic status should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
delay,"

class delay(GeneralSemanticType):

    def __init__(self):
        self.description = 'Delay time in days or minutes'
        self.format = 'Delay time should be a non-negative float'
        self.examples = [1.0, 2.0, 11.0, 3.753, 13.867]

    def super_cast(self, val):
        try:
            if math.isnan(val):
                return 0.0
            if isinstance(val, int):
                return float(val)
            elif isinstance(val, float) and val >= 0:
                return val
            else:
                raise Exception('Invalid delay time')
        except:
            raise Exception('Invalid delay time')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
subjectidentifier,"

class subjectidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a subject'
        self.format = ""Subject ID must have the format 'OAS2_0001'""
        self.examples = ['OAS2_0001', 'OAS2_0002', 'OAS2_0003', 'OAS2_0004', 'OAS2_0005']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('OAS2_\\d{4}', casted_val):
            return True
        else:
            return False"
group,"

class group(GeneralSemanticType):

    def __init__(self):
        self.description = 'Group to which a subject belongs'
        self.format = 'Group must be a string'
        self.examples = ['Nondemented', 'Demented', 'Converted', 'Nondemented', 'Demented']

    def super_cast(self, val):
        if val in ['Nondemented', 'Demented', 'Converted']:
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Nondemented', 'Demented', 'Converted']:
            return True
        else:
            return False"
hand,"

class hand(GeneralSemanticType):

    def __init__(self):
        self.description = 'Handedness of a subject'
        self.format = 'Handedness must be a string'
        self.examples = ['R', 'R', 'R', 'R', 'R']

    def super_cast(self, val):
        if isinstance(val, str) and val == 'R':
            return str(val)
        else:
            raise Exception('Invalid handedness')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'R':
            return True
        else:
            return False"
ses,"

class ses(GeneralSemanticType):

    def __init__(self):
        self.description = 'Socioeconomic status of the subject'
        self.format = 'SES should be a floating point number'
        self.examples = [2.0, 2.0, float('nan'), float('nan'), float('nan')]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.0 <= casted_val <= 5.0:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
ecommprice,"

class ecommprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Price of a product in an e-commerce platform'
        self.format = 'Price should be a float with 2 decimal places'
        self.examples = [16.0, 8.0, 8.0, 8.0, 2.72]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
isadboostused,"

class isadboostused(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if AdBoost is used'
        self.format = 'A boolean represented as an integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise ValueError(f'Invalid value: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
rating,"

class rating(GeneralSemanticType):

    def __init__(self):
        self.description = 'A rating'
        self.format = 'Float number in range 0-5 with 2 decimal places'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = float(val)
        if val < 0:
            return 0.0
        elif val > 5:
            return 5.0
        else:
            return round(val, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 5:
            return True
        else:
            return False"
productcolor,"

class productcolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of a product'
        self.format = 'Color should be stored as lowercase string'
        self.examples = ['white', 'green', 'leopardprint', 'black', 'yellow']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
productsize,"

class productsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of a product'
        self.format = 'A string in uppercase format'
        self.examples = ['1X1', '2X1', '2X2', '1X0.5', '1.5X1.5', 'M', 'XS', 'L', 'XL', 'S']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        match = re.match('^[A-Z0-9.X]*$', casted_val)
        if match:
            return True
        else:
            return False"
origincountry,"

class origincountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country of origin for a product'
        self.format = 'Country code should be stored as uppercase string'
        self.examples = ['CN', 'US', 'VE', 'SG', 'AT']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 2:
            upper_val = val.upper()
            if upper_val in [country.alpha_2 for country in list(pycountry.countries)]:
                return upper_val
            else:
                return 'Invalid'
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
ecommerceindex,"

class ecommerceindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'An index for ecommerce products'
        self.format = 'Indexes should be formatted as a nonnegative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
producttag,"

class producttag(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tags for ecommerce products'
        self.format = ""Tags are usually separated by spaces or commas, and start with a '#' symbol""
        self.examples = ['#fashion #shorts', '#fashion #tshirt', '#Sport Bra', '#Summer Clothes', '#top #crop']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0] == '#' and (' ' in casted_val or ',' in casted_val):
            return True
        else:
            return False"
keyword,"

class keyword(GeneralSemanticType):

    def __init__(self):
        self.description = 'Keyword representing a particular category'
        self.format = ""Keyword should be in lowercase and capitalized if it's a proper noun""
        self.examples = ['Summer', ""Women's Fashion"", 'Fashion', 'Women', 'Casual']

    def super_cast(self, val):
        words = str(val).split(' ')
        for i in range(len(words)):
            if words[i].lower() in ['summer', 'fashion', 'women', 'casual']:
                words[i] = words[i].capitalize()
        return ' '.join(words)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.lower() in ['summer', 'fashion', 'women', 'casual']:
            return True
        else:
            return False"
hitpoints,"

class hitpoints(GeneralSemanticType):

    def __init__(self):
        self.description = 'The health or hit points of a Pokemon'
        self.format = 'Hit points should be a positive integer'
        self.examples = [45, 60, 80, 80, 39]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise ValueError(f'Cannot convert {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
attackdefense,"

class attackdefense(GeneralSemanticType):

    def __init__(self):
        self.description = 'The attack or defense power of a Pokemon'
        self.format = 'Attack or defense power should be a positive integer'
        self.examples = [49, 63, 83, 123, 43]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Value must be positive')
            return casted_val
        except Exception as e:
            raise ValueError('Invalid input. Expected integer value') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
specialattackdefense,"

class specialattackdefense(GeneralSemanticType):

    def __init__(self):
        self.description = 'The special attack or defense power of a Pokemon'
        self.format = 'Special attack or defense power should be a positive integer'
        self.examples = [65, 80, 100, 122, 60]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Invalid Input: Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (casted_val >= 0 and np.isfinite(casted_val)):
            raise Exception('Invalid value: Special attack or defense power should be a positive integer')
        return True"
speed,"

class speed(GeneralSemanticType):

    def __init__(self):
        self.description = 'The speed of a Pokemon'
        self.format = 'Speed should be a positive integer'
        self.examples = [45, 60, 80, 80, 65]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise ValueError()
        except ValueError:
            return None
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val:
            return True
        else:
            return False"
generation,"

class generation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Generation of a person or a Pokemon'
        self.format = ""Either a positive integer from 1 to 6 or a string that matches one of the following categories: ['Generation X', 'Silent', 'Millenials', 'Boomers', 'G.I. Generation']""
        self.examples = [1, 2, 'Generation X', 'Silent', 'Millenials']

    def super_cast(self, val):
        try:
            val = int(val)
            if val in [1, 2, 3, 4, 5, 6]:
                return val
            else:
                raise Exception()
        except ValueError:
            if str(val) in ['Generation X', 'Silent', 'Millenials', 'Boomers', 'G.I. Generation']:
                return str(val)
            else:
                raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [1, 2, 3, 4, 5, 6]:
            return True
        elif isinstance(casted_val, str) and casted_val in ['Generation X', 'Silent', 'Millenials', 'Boomers', 'G.I. Generation']:
            return True
        else:
            return False"
legendary,"

class legendary(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a entity is legendary'
        self.format = 'Boolean as a string'
        self.examples = ['True', 'False', 'True', 'True', 'False']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['True', 'False']:
            return True
        else:
            return False"
profession,"

class profession(GeneralSemanticType):

    def __init__(self):
        self.description = 'The profession of a person'
        self.format = 'The first letter of the profession should be capitalized'
        self.examples = ['Artist', 'Healthcare', 'Entertainment', 'Engineer', 'Doctor']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
workexperience,"

class workexperience(GeneralSemanticType):

    def __init__(self):
        self.description = 'The work experience of a person'
        self.format = ""Numeric representation where 'Yes' = 1 and 'No' = 0""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, str):
            if val == 'Yes':
                return 1
            elif val == 'No':
                return 0
            else:
                raise Exception('Invalid work experience')
        elif isinstance(val, int):
            if val < 0:
                raise Exception('Invalid work experience')
            else:
                return val
        else:
            raise Exception('Invalid work experience')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
familysize,"

class familysize(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The size of the family'
        self.format: str = 'Family size should be a positive integer'
        self.examples: list = [4, 3, 1, 2, 6]

    def super_cast(self, val):
        if isinstance(val, str) and val.upper() in ['GT3', 'LE3']:
            if val.upper() == 'GT3':
                return 4
            elif val.upper() == 'LE3':
                return 3
        elif isinstance(val, int) and val >= 1:
            return val
        else:
            raise Exception('Invalid family size')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
married,"

class married(GeneralSemanticType):

    def __init__(self):
        self.description = 'Marital Status'
        self.format = 'Lower-case string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
selfemployed,"

class selfemployed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Employment status'
        self.format = ""Boolean represented as 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        val = str(val).strip()
        if val.lower() in ['yes', 'no']:
            return val.capitalize()
        else:
            raise ValueError('Invalid value. Accepted values are ""Yes"" or ""No"".')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
applicantincome,"

class applicantincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Income of the applicant'
        self.format = 'Income should be a floating point number'
        self.examples = [5720.0, 3076.0, 5000.0, 2340.0, 3276.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (TypeError, ValueError):
            raise Exception('Invalid value for applicant income')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
coapplicantincome,"

class coapplicantincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Income of the co-applicant'
        self.format = 'Income should be a floating point number'
        self.examples = [0.0, 1500.0, 1800.0, 2546.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value for income')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
binaryoption,"

class binaryoption(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A binary option (yes/no)'
        self.format: str = 'Lowercase string'
        self.examples: list = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['yes', '1']:
            return 'yes'
        elif val in ['no', '0']:
            return 'no'
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no', np.nan]:
            return True
        else:
            return False"
studyname,"

class studyname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of the study carried out'
        self.format: str = 'Study names are represented as strings'
        self.examples: list = ['PAL0910', 'PAL0809', 'PAL0708']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
species,"

class species(GeneralSemanticType):

    def __init__(self):
        self.description = 'Species'
        self.format = 'Capitalized string'
        self.examples = ['Adelie Penguin (Pygoscelis Adeliae)', 'Gentoo Penguin (Pygoscelis Papua)', 'Chinstrap Penguin (Pygoscelis Antarctica)', 'Bird', 'Squirrel']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
clutchcompletion,"

class clutchcompletion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clutch Completion Status'
        self.format = 'A string representing a boolean value'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
dateegg,"

class dateegg(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Date on which the egg was laid'
        self.format: str = 'Dates are represented as strings in the format MM/DD/YY'
        self.examples: list = ['11/27/07', '11/16/07', '11/9/08', '11/18/09', '11/4/08']

    def super_cast(self, val):
        return datetime.strptime(str(val), '%m/%d/%y').strftime('%m/%d/%y')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%y')
            return True
        except ValueError:
            return False"
culmenlengthmm,"

class culmenlengthmm(GeneralSemanticType):

    def __init__(self):
        self.description: str = ""Length of the penguin's culmen in mm""
        self.format: str = 'Lengths are represented as floating point numbers'
        self.examples: list = [39.1, 39.5, 40.3, 36.7, 32.1]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val if not math.isnan(float_val) else float('nan')
        except ValueError:
            raise Exception('Cannot convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise Exception('Value is not a float')
        if casted_val < 0:
            raise Exception('Value cannot be negative')
        return True"
culmendepthmm,"

class culmendepthmm(GeneralSemanticType):

    def __init__(self):
        self.description = ""Depth of the penguin's culmen in mm""
        self.format = 'Depths are represented as floating point numbers'
        self.examples = [18.7, 17.4, 18.0, 19.3, 13.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and 0 <= casted_val:
            return True
        else:
            return False"
flipperlengthmm,"

class flipperlengthmm(GeneralSemanticType):

    def __init__(self):
        self.description = ""Length of the penguin's flipper in mm""
        self.format = 'Lengths are represented as floating point numbers'
        self.examples = [181.0, 186.0, 195.0, 193.0, 172.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        elif isinstance(val, int):
            return float(val)
        elif math.isnan(val):
            return float('nan')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and (casted_val >= 0 and casted_val <= float('inf')):
            return True
        else:
            return False"
bodymassg,"

class bodymassg(GeneralSemanticType):

    def __init__(self):
        self.description: str = ""The penguin's body mass in grams""
        self.format: str = 'Masses are represented as floating point numbers'
        self.examples: list = [3750.0, 3800.0, 3250.0, 3450.0, 2700.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
penguinspecies,"

class penguinspecies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Penguin Species'
        self.format = 'Species should be a string starting with a capital letter'
        self.examples = ['Adelie', 'Gentoo', 'Chinstrap']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
islandname,"

class islandname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Island Name'
        self.format = 'Island name should be a string starting with a capital letter'
        self.examples = ['Biscoe', 'Dream', 'Torgersen']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
lengthinmm,"

class lengthinmm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length in mm'
        self.format = 'Length should be a floating point number'
        self.examples = [32.1, 39.5, 40.3, 44.45, 59.6]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val == np.nan:
            return False
        else:
            return True"
massing,"

class massing(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mass in g'
        self.format = 'Mass should be a floating point number'
        self.examples = [2700.0, 3550.0, 4050.0, 4750.0, 6300.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or casted_val > float('inf'):
            return False
        return True"
unnamed,"

class unnamed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unnamed entity, usually representing an index or an identifier'
        self.format = 'Integer values represented as strings'
        self.examples = ['0', '1', '2', '3', '4']

    def super_cast(self, val):
        if isinstance(val, float) and (not math.isnan(val)):
            return str(int(val))
        elif isinstance(val, int):
            return str(val)
        elif isinstance(val, str) and val.isdigit():
            return val
        else:
            return '0'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and 0 <= int(casted_val) <= 99999:
            return True
        else:
            return False"
borough,"

class borough(GeneralSemanticType):

    def __init__(self):
        self.description = 'The five boroughs of New York City'
        self.format = 'Integer from 1 to 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if val in [1, 2, 3, 4, 5]:
            return int(val)
        else:
            return int(0)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3, 4, 5]:
            return True
        else:
            return False"
neighborhood,"

class neighborhood(GeneralSemanticType):

    def __init__(self):
        self.description = 'Neighborhoods within New York City'
        self.format = 'String representation of neighborhood name'
        self.examples = ['FLUSHING-NORTH', 'UPPER EAST SIDE (59-79)', 'UPPER EAST SIDE (79-96)', 'UPPER WEST SIDE (59-79)', 'BEDFORD STUYVESANT']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
units,"

class units(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of residential, commercial or total units'
        self.format = 'Integer count of units'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isnull(val):
            return int(0)
        elif isinstance(val, (int, float, str)) and re.match('^[0-9]+$', str(val)):
            return int(val)
        else:
            raise ValueError('Invalid input type for casting to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
squarefeet,"

class squarefeet(GeneralSemanticType):

    def __init__(self):
        self.description = 'Area in square feet'
        self.format = 'Area should be integer values'
        self.examples = [1180, 2570, 770, 1960, 1680]

    def super_cast(self, val):
        if isinstance(val, str):
            cleaned_val = val.strip()
            if cleaned_val.isdigit() or cleaned_val == '-':
                return int(cleaned_val) if cleaned_val.isdigit() else 0
            else:
                raise ValueError('Invalid input')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
yearbuilt,"

class yearbuilt(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year when the building was constructed'
        self.format = '4-digit integer representing year'
        self.examples = [1900, 1913, 1920, 1930, 1940]

    def super_cast(self, val):
        if math.isnan(val):
            return int(0)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
saleprice,"

class saleprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Price at which the property was sold'
        self.format = 'Numeric representation of sale price'
        self.examples = [6625000, 0, 0, 450000, 550000]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 0.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
affect,"

class affect(GeneralSemanticType):

    def __init__(self):
        self.description = 'Affect on a Country or Region'
        self.format = 'Affect should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num <= 0:
                raise ValueError('Affect should be greater than 0')
            return num
        except ValueError:
            raise Exception('Invalid input. Expected a positive floating point number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val <= 0:
            raise Exception('Invalid value. Affect should be greater than 0')
        else:
            return True"
support,"

class support(GeneralSemanticType):

    def __init__(self):
        self.description = 'Support in a Country or Region'
        self.format = 'Support should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num <= 0:
                raise Exception('Support should be greater than 0')
            else:
                return num
        except ValueError:
            raise Exception('Input should be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val > 0.0:
            return True
        else:
            return False"
gdppercapita,"

class gdppercapita(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gross Domestic Product per Capita'
        self.format = 'A floating point number with three decimal places'
        self.examples = [1.305, 1.456, 1.351, 1.343, 1.42]

    def super_cast(self, val):
        num = float(val)
        if num <= 0:
            return np.log(num)
        else:
            return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('GDP per capita should be greater than 0')
        if not isinstance(casted_val, (int, float)):
            raise TypeError('GDP per capita should be a numerical value')
        return True"
lifeexpectancy,"

class lifeexpectancy(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Average number of years a person is expected to live'
        self.format: str = 'Life expectancy should be a positive floating point number'
        self.examples: list = [0.0, 30.0, 60.0, 80.0, 100.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit() or '.' in val:
                return round(float(val), 3)
            else:
                raise ValueError('Invalid life expectancy value')
        elif isinstance(val, (int, float)):
            return round(float(val), 3)
        else:
            raise TypeError('Invalid type. Expected str, int or float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            raise ValueError('Invalid life expectancy value. It must be greater than or equal to 0.')"
appname,"

class appname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an application'
        self.format = 'String format'
        self.examples = ['Flashlight', 'Tic Tac Toe', 'Calculator', 'Age Calculator', 'Gallery']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
appidentifier,"

class appidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of an application'
        self.format = ""The ID is usually represented as a string containing the company's name and the app's name""
        self.examples = ['com.ishakwe.gakondo', 'postermakerart.flyerdesign.flyermaker.postermakerart', 'com.imocci', 'getfreedata.superfatiza.unlimitedjiodataprank', 'com.mozaix.simoneboard']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and '.' in casted_val:
            return True
        else:
            return False"
category,"

class category(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of an item or application'
        self.format = 'Category is represented as a string'
        self.examples = ['Education', 'Music & Audio', 'Tools', 'Business', 'Entertainment']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Education', 'Music & Audio', 'Tools', 'Business', 'Entertainment', 'Housewares', 'Wall-Mounted', 'Miscellaneous', 'Headwear', 'Wallpaper', 'Office Supplies', 'Furniture', 'Technology']
        if casted_val in valid_values:
            return True
        else:
            return False"
ratingcount,"

class ratingcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of ratings'
        self.format = 'Positive integer'
        self.examples = [0, 5, 10, 50, 100]

    def super_cast(self, val):
        try:
            return abs(int(val))
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= np.inf:
            return True
        else:
            return False"
installs,"

class installs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of installs of an application'
        self.format = 'Number of installs is represented as an integer'
        self.examples = [100, 1000, 10, 10000, 500]

    def super_cast(self, val):
        try:
            if isinstance(val, str):
                return int(val.replace('+', '').replace(',', ''))
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
minimuminstalls,"

class minimuminstalls(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minimum number of installs of an application'
        self.format = 'Minimum number of installs must be a positive integer'
        self.examples = [0, 50, 100, 500, 1000]

    def super_cast(self, val):
        if isinstance(val, str) and val == 'nan':
            return np.nan
        else:
            return abs(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
maximuminstalls,"

class maximuminstalls(GeneralSemanticType):

    def __init__(self):
        self.description = 'Maximum number of installs of an application'
        self.format = 'Maximum number of installs must be a positive integer'
        self.examples = [0, 50, 100, 500, 1000]

    def super_cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return abs(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif casted_val < 0 or not isinstance(casted_val, int):
            return False
        else:
            return True"
free,"

class free(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value indicating whether something is free or not.'
        self.format = 'boolean'
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
size,"

class size(GeneralSemanticType):

    def __init__(self):
        self.description = 'A size'
        self.format = 'Size should be a string'
        self.examples = ['10M', '2.9M', '3.7M', '1.8M', '6.2M']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        if re.fullmatch('\\d+(\\.\\d+)?M', casted_val):
            return True
        if casted_val.isdigit():
            return True
        if re.fullmatch('\\dX\\d', casted_val):
            return True
        if re.fullmatch('\\d (BHK|Bedroom)', casted_val):
            return True
        return False"
minimumandroidentifier,"

class minimumandroidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minimum android version required to run the application'
        self.format = ""Minimum android version is represented as a string with 'and up' at the end""
        self.examples = ['4.1 and up', '5.0 and up', '4.4 and up', '4.0.3 and up', '4.0 and up']

    def super_cast(self, val):
        if val == float('nan'):
            return 'nan and up'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\d+(\\.\\d+)? and up', casted_val):
            return True
        else:
            return False"
developeridentifier,"

class developeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of the developer'
        self.format = 'The ID is usually represented as a string'
        self.examples = ['Subsplash Inc', 'TRAINERIZE', 'ChowNow', 'Phorest', 'BH App Development Ltd']

    def super_cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or math.isnan(casted_val):
            return True
        else:
            return False"
developerwebsite,"

class developerwebsite(GeneralSemanticType):

    def __init__(self):
        self.description = 'Website of the developer'
        self.format = 'Website is represented as a string'
        self.examples = ['http://www.subsplash.com/', 'http://www.chownow.com', 'http://www.sharefaith.com/category/church-websites.html', 'https://foodsoul.pro', 'https://zeta-mars.blogspot.com']

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        else:
            return bool(re.search('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', casted_val))"
developeremail,"

class developeremail(GeneralSemanticType):

    def __init__(self):
        self.description = 'Email of the developer'
        self.format = 'Email is represented as a string'
        self.examples = ['support@classplus.co', 'appsupport@subsplash.com', 'eng-android@chownow.com', 'help@trainerize.com', 'support@mindbodyonline.com']

    def super_cast(self, val):
        if val == float('nan'):
            return 'nan'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[^@]+@[^@]+\\.[^@]+', casted_val):
            return True
        else:
            return False"
released,"

class released(GeneralSemanticType):

    def __init__(self):
        self.description = 'Release date of an application'
        self.format = ""Release date is represented as a string in the format 'YYYY-MM-DD'""
        self.examples = ['2019-09-26', '2020-06-05', '2020-05-06', '2020-06-15', '2020-02-26']

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return datetime.strptime(str(val), '%b %d, %Y').strftime('%Y-%m-%d')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
lastupdated,"

class lastupdated(GeneralSemanticType):

    def __init__(self):
        self.description = 'Last updated date of an application'
        self.format = ""Last updated date is represented as a string in the format 'MMM DD, YYYY'""
        self.examples = ['Jun 11, 2021', 'Jun 10, 2021', 'Jun 09, 2021', 'Jun 14, 2021', 'Jun 08, 2021']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return datetime.strptime(str(val), '%b %d, %Y').strftime('%b %d, %Y')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        else:
            try:
                datetime.strptime(casted_val, '%b %d, %Y')
                return True
            except ValueError:
                return False"
contentrating,"

class contentrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Content rating of an application'
        self.format = 'Content rating is represented as a string'
        self.examples = ['Everyone', 'Teen', 'Mature 17+', 'Everyone 10+', 'Unrated']

    def super_cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Everyone', 'Teen', 'Mature 17+', 'Everyone 10+', 'Unrated']:
            return True
        else:
            return False"
adsupported,"

class adsupported(GeneralSemanticType):

    def __init__(self):
        self.description = 'If the entity is ad-supported'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
inapppurchases,"

class inapppurchases(GeneralSemanticType):

    def __init__(self):
        self.description = 'In-app purchases'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
editorschoice,"

class editorschoice(GeneralSemanticType):

    def __init__(self):
        self.description = ""Editors' choice""
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
scrapedtime,"

class scrapedtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Scraped time of data'
        self.format = ""Scraped time is represented as a string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2021-06-15 21:42:16', '2021-06-15 21:36:17', '2021-06-15 21:42:47', '2021-06-15 21:46:27', '2021-06-15 21:17:49']

    def super_cast(self, val):
        if val == 'nan':
            return float('nan')
        else:
            return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
movieindex,"

class movieindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of a movie'
        self.format = 'Index should be an integer starting from 0'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Could not convert value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
movierank,"

class movierank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rank of a movie'
        self.format = 'Rank should be an integer starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for movie rank')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1:
            raise Exception('Invalid movie rank. Rank should be greater than 0')
        return True"
moviename,"

class moviename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a movie'
        self.format = 'Names should be capitalized appropriately with spaces between words'
        self.examples = ['The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 'The Godfather: Part II', '12 Angry Men']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0 and casted_val.istitle():
            return True
        else:
            return False"
moviegenre,"

class moviegenre(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genre of a movie'
        self.format = 'In lower-case and as a string'
        self.examples = ['drama', 'action', 'comedy', 'crime', 'biography']

    def super_cast(self, val):
        if isinstance(val, str):
            if ',' in val:
                return [genre.strip().lower() for genre in val.split(',')]
            else:
                return val.lower()
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, list):
            for genre in casted_val:
                if genre not in self.examples:
                    return False
            return True
        else:
            return casted_val in self.examples"
moviedirector,"

class moviedirector(GeneralSemanticType):

    def __init__(self):
        self.description = 'Director of a Movie'
        self.format = 'Director name should be in title case'
        self.examples = ['Michael Curtiz', 'Hanna-Barbera', 'Lloyd Bacon', 'Jules White', 'James Gunn']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
movieyear,"

class movieyear(GeneralSemanticType):

    def __init__(self):
        self.description = ""Year of a movie's release""
        self.format = 'Year should be a 4-digit integer'
        self.examples = [2014, 2012, 2016, 2016, 2016]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1800 <= casted_val <= datetime.now().year:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid year')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if 1800 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
movieruntime,"

class movieruntime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The runtime of a movie in minutes'
        self.format = 'Runtime should be a positive integer'
        self.examples = [146, 104, 121, 124, 162]

    def super_cast(self, val):
        if isinstance(val, int) or isinstance(val, float):
            return int(val)
        else:
            raise Exception('Invalid input: Value must be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
movierating,"

class movierating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of a movie'
        self.format = 'Rating should be a string or a floating point number'
        self.examples = ['R', 'PG-13', 'PG', 'Not Rated', 'G', 8.1, 7.0, 7.3, 7.2, 6.2]

    def super_cast(self, val):
        if isinstance(val, str):
            if val in ['18+', '7+', '13+', 'all', '16+', 'R', 'PG-13', 'PG', 'Not Rated', 'G']:
                return val
            else:
                return 'Not Rated'
        else:
            try:
                num = float(val)
                if 0 <= num <= 10:
                    return round(num, 1)
                else:
                    return 'Not Rated'
            except ValueError:
                return 'Not Rated'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if casted_val in ['18+', '7+', '13+', 'all', '16+', 'R', 'PG-13', 'PG', 'Not Rated', 'G']:
                return True
            else:
                return False
        elif 0 <= casted_val <= 10:
            return True
        else:
            return False"
movievotes,"

class movievotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of votes for a movie'
        self.format = 'Votes should be an integer'
        self.examples = [757074, 485820, 157606, 60545, 393727]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise Exception('Invalid value. Value must be integer or convertible to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
movierevenue,"

class movierevenue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The revenue of a movie'
        self.format = 'Revenue should be a positive integer'
        self.examples = [2787965087, 961000000, 880674609, 1084939099, 284139100]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '')
        return int(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
moviemetascore,"

class moviemetascore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Metascore of a movie'
        self.format = 'Metascore should be a floating point number with no decimal places'
        self.examples = [76.0, 65.0, 62.0, 59.0, 40.0]

    def super_cast(self, val):
        try:
            return round(float(val))
        except ValueError:
            raise Exception(f'Cannot convert {val} to a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
countryregion,"

class countryregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country or Region'
        self.format = 'Country or Region name should be capitalized'
        self.examples = ['United States', 'China', 'Hong Kong', 'Japan', 'Europe']

    def super_cast(self, val):
        val = str(val).title()
        try:
            country = pycountry.countries.get(name=val)
            if country is not None:
                return country.name
            else:
                return val
        except:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            country = pycountry.countries.get(name=casted_val)
            if country is not None:
                return True
            else:
                return False
        except:
            return False"
deathcount,"

class deathcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of deaths'
        self.format = 'Death count should be a non-negative integer'
        self.examples = [162804, 98644, 41638, 14606, 9604]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(val):
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
covidcases,"

class covidcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'COVID-19 Cases'
        self.format = 'COVID-19 cases should be a positive integer, representing the number of cases'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 0:
                return val
            else:
                raise Exception('Invalid value')
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
provincename,"

class provincename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a province or state'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
uidentifier,"

class uidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A UID that is used to refer to a specific entity'
        self.format = 'UID should be formatted as an integer number'
        self.examples = [84001001, 84001003, 84001005, 84001007, 84001009]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
locationuidentifier,"

class locationuidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for locations'
        self.format = 'Should be an integer number'
        self.examples = [84001001, 84001003, 84001005, 84001007, 84001009]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
waterlevel,"

class waterlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Water level in a reservoir'
        self.format = 'Water level should be a float representing the water level in a reservoir'
        self.examples = [3.9, 0.0, 268.0, 0.0, 1.0]

    def super_cast(self, val):
        try:
            val = round(float(val), 2)
            return val
        except Exception as e:
            raise ValueError('Value could not be converted to the desired format: {}'.format(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('inf'):
            return True
        else:
            return False"
rainfall,"

class rainfall(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The amount of rainfall'
        self.format: str = 'Rainfall should be formatted as a floating point number with one decimal place'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val == 'nan':
                return float('nan')
            else:
                return round(float(val), 1)
        elif isinstance(val, (int, float)):
            return round(float(val), 1)
        else:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tweetlikes,"

class tweetlikes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of likes a tweet has received'
        self.format = 'Positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
tweetuseridentifier,"

class tweetuseridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each user'
        self.format = 'Formatted as strings of digits'
        self.examples = ['360666534', '809904438', '3494182277', '8242596012018524', '1032806955356545']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^\\d+$', casted_val):
            return True
        else:
            return False"
tweetusername,"

class tweetusername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the user'
        self.format = 'Formatted as strings'
        self.examples = ['El Sol Latino News', 'Cheri A. 🇺🇸', 'Flag Waver', 'Michelle Ferg', 'the Gold State']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
userjoindate,"

class userjoindate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of user joined'
        self.format = 'Should be a datetime object'
        self.examples = ['2011-08-23 15:33:45', '2012-09-08 01:03:57', '2015-08-30 19:38:21', '2017-01-25 14:16:17', '2018-08-24 01:49:01']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                return 'Invalid format'
        elif isinstance(val, datetime):
            return val
        else:
            return 'Invalid format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
userfollowerscount,"

class userfollowerscount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of followers a user has'
        self.format = 'Should be a positive integer'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} can't be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(f'Value {casted_val} is not a valid number of followers')
        return True"
tweetlocation,"

class tweetlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of the user'
        self.format = 'Formatted as strings'
        self.examples = ['Philadelphia, PA / Miami, FL', 'Golden Valley Arizona', 'California, USA']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
statecode,"

class statecode(GeneralSemanticType):

    def __init__(self):
        self.description = ""State code of the user's location""
        self.format = 'State code should be a 2-letter string'
        self.examples = ['KL', 'DL', 'TG', 'MH', 'TN', 'FL', 'MT', 'CA', 'PA', 'TX', 'CA', 'IL', 'OH']

    def super_cast(self, val):
        if isinstance(val, int):
            return str(val)
        elif isinstance(val, str):
            return val.upper()
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and (casted_val in [state.code for state in pycountry.subdivisions.get(country_code='US')] or casted_val in [str(i) for i in range(1, 52)]):
            return True
        else:
            return False"
realestateprice,"

class realestateprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price per unit area of real estate'
        self.format = 'Price should be formatted as a floating point number with two decimal places'
        self.examples = [37.9, 42.2, 47.3, 54.8, 43.1]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Value cannot be cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            raise ValueError('Value is out of the valid range (0, inf)')"
teamnameshort,"

class teamnameshort(GeneralSemanticType):

    def __init__(self):
        self.description = 'Short Name of a NFL Team'
        self.format = 'The first letter should be capitalized'
        self.examples = ['Cardinals', 'Washington', 'Raiders', 'Colts', 'Chargers']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return bool(re.match('^[A-Z][a-z]*$', casted_val))"
teamconference,"

class teamconference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conference of a NFL Team'
        self.format = 'All letters should be uppercase'
        self.examples = ['NFC', 'AFC', 'NFC', 'AFC', 'NFC']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['NFC', 'AFC']:
            return True
        else:
            return False"
teamdivision,"

class teamdivision(GeneralSemanticType):

    def __init__(self):
        self.description = 'Division of a NFL Team'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['NFC East', 'AFC West', 'NFC West', 'NFC South', 'AFC North']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.count(' ') == 1 and (casted_val == casted_val.title()):
            return True
        else:
            return False"
spread,"

class spread(GeneralSemanticType):

    def __init__(self):
        self.description = 'Spread of a NFL game'
        self.format = 'Spread should be formatted as a floating point number'
        self.examples = [-7.0, -4.5, -3.0, 0.0, -26.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Value cannot be cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
stadium,"

class stadium(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a NFL Stadium'
        self.format = 'Each word in the stadium name should be capitalized'
        self.examples = ['Giants Stadium', 'Lambeau Field', 'Arrowhead Stadium', 'Soldier Field', 'Qualcomm Stadium']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
humidity,"

class humidity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Humidity in percentage'
        self.format = 'Humidity should be a float between 0 and 100'
        self.examples = [77.0, 78.0, 78.0, 93.0, 96.5]

    def super_cast(self, val):
        try:
            num = float(val)
            return num if 0 <= num <= 100 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
moviereleasedate,"

class moviereleasedate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date when a movie was released'
        self.format = ""A string formatted as 'Month Day, Year (Country)'""
        self.examples = ['June 13, 1980 (United States)', 'July 2, 1980 (United States)', 'June 20, 1980 (United States)', 'July 2, 1980 (United States)', 'July 25, 1980 (United States)']

    def super_cast(self, val):
        val = str(val)
        try:
            datetime.strptime(val, '%B %d, %Y (%s)')
            return val
        except ValueError:
            return 'Invalid date format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid date format':
            return False
        else:
            return True"
moviescore,"

class moviescore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score of a movie'
        self.format = 'Score should be a floating point number'
        self.examples = [8.4, 5.8, 8.7, 7.7, 7.3]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
moviewriter,"

class moviewriter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the writer of a movie'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Stephen King', 'Henry De Vere Stacpoole', 'Leigh Brackett', 'Jim Abrahams', 'Brian Doyle-Murray']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
moviestar,"

class moviestar(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the star of a movie'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Jack Nicholson', 'Brooke Shields', 'Mark Hamill', 'Robert Hays', 'Chevy Chase']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val != '':
            return True
        else:
            return False"
moviecountry,"

class moviecountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'The country where a movie was produced'
        self.format = 'The value should be a valid ISO 3166-1 country code in uppercase'
        self.examples = ['USA', 'UK', 'FRANCE', 'CANADA', 'GERMANY']

    def super_cast(self, val):
        val = str(val)
        try:
            country = pycountry.countries.get(name=val)
            return country.alpha_2.upper()
        except KeyError:
            try:
                country = pycountry.countries.get(alpha_2=val.upper())
                return country.alpha_2.upper()
            except KeyError:
                raise ValueError('Invalid country name or code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [country.alpha_2 for country in pycountry.countries]:
            return True
        else:
            return False"
moviebudget,"

class moviebudget(GeneralSemanticType):

    def __init__(self):
        self.description = 'The budget of a movie'
        self.format = 'Budget should be formatted as a floating point number in USD'
        self.examples = [10000000.0, 5000000.0, 20000000.0, 1000000.0, 5000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
moviegross,"

class moviegross(GeneralSemanticType):

    def __init__(self):
        self.description = 'The gross earning of a movie'
        self.format = 'Gross earning should be a floating point number'
        self.examples = [46998772.0, 58853106.0, 538375067.0, 83453539.0, 39846344.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return round(float_val, 2)
        except ValueError:
            raise Exception('Invalid input, expected a numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
moviecompany,"

class moviecompany(GeneralSemanticType):

    def __init__(self):
        self.description = 'The production company of a movie'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['Warner Bros.', 'Columbia Pictures', 'Lucasfilm', 'Paramount Pictures', 'Orion Pictures']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
healthcondition,"

class healthcondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'A health condition'
        self.format = 'An integer as 0 or 1'
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
healthscale,"

class healthscale(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health Scale'
        self.format = 'Health Scale should be integer values ranging from 1 to 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise ValueError(f""Value {val} can't be converted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 5:
            raise ValueError(f'Value {casted_val} is out of the valid range [1, 5].')
        else:
            return True"
daysunhealthy,"

class daysunhealthy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Days Unhealthy'
        self.format = 'Days Unhealthy should be integer values ranging from 0 to 30'
        self.examples = [0, 7, 14, 21, 30]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if 0 <= int_val <= 30:
                return int_val
            else:
                raise ValueError('Value out of valid range [0, 30]')
        else:
            raise TypeError('Expected string representing integer value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 30"
binaryvalue,"

class binaryvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary value'
        self.format = ""As a string, either 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, int) or isinstance(val, float):
            if val == 1:
                return 'Yes'
            elif val == 0:
                return 'No'
            else:
                raise ValueError('Invalid input for super_cast in binaryvalue.')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
healthindicator,"

class healthindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'A health indicator value'
        self.format = 'Health indicator should be formatted as a floating point number'
        self.examples = [3.0, 3.0, 1.0, 3.0, 2.0]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 1)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 1.0 <= casted_val <= 5.0"
healthqualityindicator,"

class healthqualityindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'A health quality indicator value'
        self.format = 'Health quality indicator should be formatted as a floating point number'
        self.examples = [5.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 30.0:
            return True
        else:
            return False"
binaryindicator,"

class binaryindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary Indicator'
        self.format = 'Either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return int(val)
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
generalhealthindicator,"

class generalhealthindicator(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'General Health Indicator'
        self.format: str = 'General Health Indicator should be an integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 6):
            return True
        else:
            return False"
mentalhealthdays,"

class mentalhealthdays(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days of poor mental health in the past month'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 5, 10, 15, 20]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0 and num <= 30:
                return num
            else:
                raise Exception()
        except:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 30:
            return True
        else:
            return False"
death,"

class death(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of deaths due to COVID-19'
        self.format = 'Integer value'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return isinstance(casted_val, int) and casted_val >= 0"
cured,"

class cured(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of people cured/discharged/migrated'
        self.format = 'Integer value'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
newcases,"

class newcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of new cases of COVID-19'
        self.format = 'Integer value'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if isinstance(casted_val, int):
                return casted_val
        except ValueError:
            raise Exception(""Value can't be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
newdeaths,"

class newdeaths(GeneralSemanticType):

    def __init__(self):
        self.description = 'New deaths due to Covid-19'
        self.format = 'New deaths must be a non-negative integer'
        self.examples = [18, 21, 3, 6, 9]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
newrecovered,"

class newrecovered(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of new recoveries from COVID-19'
        self.format = 'Integer value'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 0 <= casted_val <= float('inf'):
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError('The value cannot be casted to an integer or is out of the valid range')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
districtkey,"

class districtkey(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Key of the district'
        self.format: str = ""District keys should be in the form of 'StateCode_DistrictName'""
        self.examples: list = ['UN_Unassigned', 'AP_Other State', 'AR_Kamle', 'AN_North and Middle Andaman', 'AN_South Andaman']

    def super_cast(self, val):
        parts = str(val).split('_')
        return parts[0].upper() + '_' + parts[1].title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[A-Z]{2}_[A-Za-z ]+', casted_val):
            return True
        else:
            return False"
covidstatus,"

class covidstatus(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of covid cases'
        self.format: str = 'Number of cases should be integer'
        self.examples: list = [0, 1, 2, 51, 434]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            return 'Invalid value. Expected a non-negative integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
datetimesemantictype,"

class datetimesemantictype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time'
        self.format = 'In the format: YYYY-MM-DD HH:MM:SS'
        self.examples = ['2020-01-01 00:00:00', '2020-01-01 01:00:00', '2020-01-01 02:00:00', '2020-01-01 03:00:00', '2020-01-01 04:00:00']

    def super_cast(self, val):
        try:
            return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
        except ValueError:
            return 'Invalid format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
city,"

class city(GeneralSemanticType):

    def __init__(self):
        self.description = 'City'
        self.format = 'City name should be in title case'
        self.examples = ['Los Angeles', 'Phoenix', 'Houston', 'Las Vegas', 'San Antonio']

    def super_cast(self, val):
        if re.match('^city_\\d+$', str(val)):
            return str(val)
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
district,"

class district(GeneralSemanticType):

    def __init__(self):
        self.description = 'A District'
        self.format = 'District should be a string'

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
status,"

class status(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of a person or patient'
        self.format = 'Status should be a string'
        self.examples = ['Positive', 'Negative', 'Indeterminate', 'Hospitalized', 'Recovered']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif str(val).isdigit():
            return str(val)
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['POSITIVE', 'NEGATIVE', 'INDETERMINATE', 'HOSPITALIZED', 'RECOVERED', 'DECEASED', 'MIGRATED_OTHER', 'MIGRATED']:
            return True
        elif pd.isna(casted_val):
            return True
        else:
            return False"
typeoftransmission,"

class typeoftransmission(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Transmission'
        self.format = 'Type of Transmission should be a string'
        self.examples = ['Local', 'TBD', 'Imported', 'Imported', 'Unknown']

    def super_cast(self, val):
        if str(val).strip() in ['Local', 'TBD', 'Imported', 'Unknown']:
            return str(val).strip()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Local', 'TBD', 'Imported', 'Unknown']:
            return True
        else:
            return False"
numcases,"

class numcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 cases'
        self.format = 'Number of cases should be a positive integer'
        self.examples = [1, 3, 9, 40, 170124]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
covid19count,"

class covid19count(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Count of covid-19 cases (confirmed, deceased, or recovered)'
        self.format: str = 'Counts must be non-negative integers'
        self.examples: list = [0, 67, 15, 3, 20]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise Exception('Invalid covid-19 count')
            return val
        except ValueError:
            raise Exception('Invalid data type. Expecting integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val == float('inf'):
            return False
        return True"
statename,"

class statename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the State'
        self.format = 'Title case with spaces between words'
        self.examples = ['Andhra Pradesh', 'Uttar Pradesh', 'Maharashtra', 'Karnataka', 'Rajasthan']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if pycountry.subdivisions.get(name=casted_val) or CountryInfo(casted_val).iso()['iso']:
                return True
        except KeyError:
            return False
        return False"
datetimeindia,"

class datetimeindia(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timestamp of the last update'
        self.format = 'Each timestamp should be a string in the format DD/MM/YYYY HH:MM:SS'
        self.examples = ['06/08/2020 23:46:37', '06/08/2020 20:42:51', '06/08/2020 19:44:47', '06/08/2020 18:39:45', '06/08/2020 21:19:51']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                date_obj = datetime.strptime(val, '%d/%m/%Y %H:%M:%S')
                return date_obj.strftime('%d/%m/%Y %H:%M:%S')
            except:
                raise Exception('Invalid input value for cast')
        elif isinstance(val, datetime):
            return val.strftime('%d/%m/%Y %H:%M:%S')
        else:
            raise Exception('Invalid input value for super_cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%d/%m/%Y %H:%M:%S')
            return True
        except:
            return False"
statecodeindia,"

class statecodeindia(GeneralSemanticType):

    def __init__(self):
        self.description = 'Codes of the Indian States'
        self.format = 'Each state code should be a string of two uppercase letters'
        self.examples = ['TT', 'MH', 'TN', 'DL', 'KA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 2 and casted_val.isupper() and casted_val.isalpha():
            return True
        else:
            return False"
timestamp,"

class timestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'A timestamp'
        self.format = ""A string in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-01-01 00:00:00', '2019-12-31 23:59:59', '2020-02-29 12:34:56', '2019-02-28 01:23:45', '2020-12-31 11:11:11']

    def super_cast(self, val):
        if isinstance(val, int) or isinstance(val, float):
            return datetime.utcfromtimestamp(val).strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
            except ValueError:
                try:
                    return datetime.strptime(val, '%m/%d/%Y %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
                except ValueError:
                    try:
                        return datetime.strptime(val, '%d/%m/%Y %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        try:
                            return datetime.strptime(val, '%Y-%m-%d %H:%M:%S%z').isoformat()
                        except ValueError:
                            try:
                                return datetime.strptime(val, '%H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
                            except ValueError:
                                raise Exception('Invalid timestamp')
        else:
            raise Exception('Invalid timestamp')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
rate,"

class rate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rate of an event per 1000 population or in percentage'
        self.format = 'Rate should be a floating point number'
        self.examples = [0.0, 0.42, 1.09, 2.01, 2.4]

    def super_cast(self, val):
        if isinstance(val, str) and '%' in val:
            percentage_val = val.replace('%', '')
            return round(float(percentage_val) / 100, 2)
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
testspercase,"

class testspercase(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Tests per Case'
        self.format = 'A non-negative number'
        self.examples = [83.33, 87.5, 79.26, 77.88, 69.79]

    def super_cast(self, val):
        try:
            casted_value = float(val)
            if math.isnan(casted_value):
                return float('nan')
            return casted_value
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
testspermillion,"

class testspermillion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Tests per Million'
        self.format = 'Number of tests per million as a non-negative number'
        self.examples = [5.0, 10.0, 10.0, 11.0, 11.0]

    def super_cast(self, val):
        if not np.isnan(val):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
serialnumber,"

class serialnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier'
        self.format = 'Non-negative integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError('Value cannot be negative')
        except ValueError:
            raise ValueError('Value must be a non-negative integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
integercount,"

class integercount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents an integer count'
        self.format = 'Integer'
        self.examples = [100, 200, 300, 400, 500]

    def super_cast(self, val):
        if math.isnan(val):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
ageinmonths,"

class ageinmonths(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age in Months'
        self.format = 'Age should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        else:
            raise ValueError(f'Invalid value: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
householdsize,"

class householdsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Household Size'
        self.format = 'Household size should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 1:
                return val
            else:
                raise ValueError('Invalid value for household size.')
        except ValueError:
            raise ValueError('Invalid value for household size.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
binaryresponse,"

class binaryresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary response'
        self.format = 'In number'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, float) and val in [1.0, 2.0]:
            if val == 1.0:
                return 0
            else:
                return 1
        else:
            raise ValueError('Unable to cast value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
dietresponse,"

class dietresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'The response to a diet question'
        self.format = 'Diet response should be formatted as a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise ValueError('Invalid diet response value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_range = [1.0, 9.0]
        if casted_val >= valid_range[0] and casted_val <= valid_range[1]:
            return True
        else:
            return False"
sequence,"

class sequence(GeneralSemanticType):

    def __init__(self):
        self.description = 'A sequence of integers'
        self.format = 'Positive integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                return None
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val >= 0:
            return True
        else:
            return False"
examinationstatus,"

class examinationstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Examination status'
        self.format = 'Converted to float'
        self.examples = [1.0, 3.0, 1.0, 3.0, 1.0]

    def super_cast(self, val):
        if val:
            return 1.0
        else:
            return 3.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 3.0]:
            return True
        else:
            return False"
bodyweight,"

class bodyweight(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Body weight of a person'
        self.format: str = 'Body weight should be a floating point number'
        self.examples: list = [3.1, 37.95, 65.3, 83.5, 222.6]

    def super_cast(self, val):
        try:
            casted_val = float(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Value should be a float.')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
bodyheight,"

class bodyheight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Body height of a person'
        self.format = 'Body height should be a floating point number'
        self.examples = [79.7, 149.5, 162.0, 171.05, 202.6]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f'Unable to cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
waistcircumference,"

class waistcircumference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Waist circumference of a person'
        self.format = 'Waist circumference should be a floating point number in cm'
        self.examples = [40.2, 71.2, 87.8, 102.8, 177.9]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception('Invalid value: {}. Value should be convertible to float.'.format(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
seqidentifier,"

class seqidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sequence ID'
        self.format = 'Whole number'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be casted to an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
urinecreatinine,"

class urinecreatinine(GeneralSemanticType):

    def __init__(self):
        self.description = 'Urine creatinine level'
        self.format = 'a floating point number in mg/dL'
        self.examples = [4.3, 153.0, 11.9, 16.0, 255.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        elif isinstance(val, (int, float)):
            return round(val, 2)
        else:
            raise ValueError('Input must be numeric')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
creatinineclearancerate,"

class creatinineclearancerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Creatinine Clearance rate'
        self.format = 'Creatinine Clearance rate should be a floating point number'
        self.examples: list = [121.073, 78.575, 5.0, 60.0, 106.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
serumcreatinine,"

class serumcreatinine(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum creatinine level'
        self.format = 'Serum creatinine level should be a floating point number'
        self.examples: list = [1.21, 0.79, 1.22, float('nan'), 0.73]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
serumglobulin,"

class serumglobulin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum globulin level'
        self.format = 'Serum globulin level should be a floating point number'
        self.examples: list = [2.4, 3.1, 2.2, float('nan'), 2.8]

    def super_cast(self, val):
        if val is None or str(val).lower() == 'nan':
            return float('nan')
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not np.isnan(casted_val)):
            return True
        else:
            return False"
serumglucose,"

class serumglucose(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum glucose level'
        self.format = 'Serum glucose level should be a floating point number'
        self.examples: list = [554.0, 219.0, 183.0, np.nan, 104.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
seruminorganicphosphorus,"

class seruminorganicphosphorus(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Serum inorganic phosphorus level'
        self.format: str = 'In mg/dL'
        self.examples: list = [16.0, 15.0, 13.0, float('nan'), 31.0]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
seruminorganicphosphorussi,"

class seruminorganicphosphorussi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum inorganic phosphorus level'
        self.format = 'Serum inorganic phosphorus level should be a floating point number'
        self.examples: list = [4.344, 4.319, 3.284, float('nan'), 5.353]

    def super_cast(self, val):
        return round(float(val), 2) if not math.isnan(float(val)) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
serumiron,"

class serumiron(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum iron level'
        self.format = 'Serum iron level should be a floating point number'
        self.examples: list = [58.0, 79.0, 98.0, np.nan, 91.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
alcoholconsumption,"

class alcoholconsumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'The amount of alcohol consumed'
        self.format = 'Alcohol consumption should be a floating point number'
        self.examples = [0.0, 1.0, 2.0, 4.0, 999.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 999:
            return True
        else:
            return False"
alcoholconsumptionunits,"

class alcoholconsumptionunits(GeneralSemanticType):

    def __init__(self):
        self.description = 'The units of alcohol consumption'
        self.format = 'Alcohol consumption units should be an integer'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.lower()
            if val in ['day', 'week', 'month']:
                return ['day', 'week', 'month'].index(val) + 1
        elif isinstance(val, int) and val in range(1, 4):
            return val
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif casted_val in self.examples:
            return True
        else:
            return False"
healthstatus,"

class healthstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health status of the individual'
        self.format = 'Health status should be an integer'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
sourceidentifier,"

class sourceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identifier for the source of an article'
        self.format = 'Source ID should be in lowercase'
        self.examples = ['reuters', 'bbc-news', 'the-irish-times', 'abc-news', 'cnn']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-zA-Z0-9-]*$', casted_val):
            return True
        else:
            return False"
sourcename,"

class sourcename(GeneralSemanticType):

    def __init__(self):
        self.description = 'A source name'
        self.format = 'Only the first letter of each word in the source name should be capitalized'
        self.examples = ['Reuters', 'BBC News', 'The Irish Times', 'ABC News', 'CNN', 'World Health Organization', 'Ministry of Health', 'SPC Public Health Division', 'Pan American Health Organization', 'Africa Centres for Disease Control and Prevention']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
author,"

class author(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the author of an article'
        self.format = ""The author name should be in the form 'First Last'""
        self.examples = ['The Associated Press', 'Reuters Editorial', 'CBS News', 'https://www.facebook.com/bbcnews', 'Al Jazeera']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
publishedat,"

class publishedat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time when an article was published'
        self.format = 'Published date and time should be formatted as a string'
        self.examples = ['2019-09-07T05:00:00Z', '2019-09-14T05:00:00Z', '2019-09-15T05:00:00Z', '2019-09-06T11:00:00Z', '2019-09-06T09:30:00Z']

    def super_cast(self, val):
        try:
            return str(datetime.strptime(str(val), '%Y-%m-%dT%H:%M:%SZ'))
        except ValueError:
            raise Exception(f'Invalid format for date and time: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z', casted_val):
            return True
        else:
            return False"
toparticle,"

class toparticle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Signifies if an article is top'
        self.format = 'Numeric, either 0.0 or 1.0'
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if math.isnan(val):
            return 0.0
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
engagementcount,"

class engagementcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of engagements an article has received'
        self.format = 'Engagement count should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 43.0, 124.0, 196.236]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not math.isnan(val)):
            return float(val)
        else:
            return 0.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
releasedyear,"

class releasedyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of release for movies and TV shows'
        self.format = 'Year should be represented as a 4-digit integer'
        self.examples = [1994, 1972, 2008, 1974, 1957]

    def super_cast(self, val):
        try:
            year = int(val)
            return year
        except Exception as e:
            raise Exception('Invalid input for cast: {}'.format(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1800 or casted_val > datetime.now().year:
            raise Exception('Invalid year')
        else:
            return True"
certificate,"

class certificate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Certificate ratings for movies and TV shows'
        self.format = 'Certificate rating should be a string'
        self.examples = ['U', 'A', 'UA', 'R', 'PG-13']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise Exception('Invalid certificate rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
metascore,"

class metascore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Metascore of movies and TV shows'
        self.format = 'Metascore should be an integer between 0 and 100'
        self.examples = [80, 100, 84, 90, 96]

    def super_cast(self, val):
        try:
            metascore = int(val)
            if metascore < 0 or metascore > 100:
                raise ValueError('Invalid metascore')
            else:
                return metascore
        except Exception as e:
            print(f'Error in super_cast: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 100:
            return True
        else:
            return False"
directorname,"

class directorname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Director of movies and TV shows'
        self.format = 'Names should be capitalized appropriately with spaces between words'
        self.examples = ['Alfred Hitchcock', 'Steven Spielberg', 'Hayao Miyazaki', 'Martin Scorsese', 'Akira Kurosawa']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
votes,"

class votes(GeneralSemanticType):

    def __init__(self):
        self.description = 'A representation of votes'
        self.format = 'Votes should be represented as an integer'
        self.examples = [488270, 438562, 311999, 390401, 504940]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise Exception('Invalid number of votes')
            else:
                return casted_val
        except:
            raise ValueError('The value could not be converted to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
gross,"

class gross(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gross earnings of movies and TV shows'
        self.format = 'Gross earnings should be represented as a floating point number (in USD)'
        self.examples = [28341469.0, 134966411.0, 534858444.0, 57300000.0, 4360000.0]

    def super_cast(self, val):
        try:
            gross = float(val.replace(',', ''))
            if gross < 0:
                raise ValueError('Invalid gross earnings')
            else:
                return gross
        except Exception as e:
            raise TypeError(f'Cannot convert {val} to float') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        else:
            return True"
areatype,"

class areatype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the area where the house is located'
        self.format = 'Area type should be a string with the first letter of each word capitalized'
        self.examples = ['Super Area', 'Carpet Area', 'Built Area', 'Super built-up  Area', 'Built-up  Area', 'Plot  Area', 'Carpet  Area']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
availability,"

class availability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Availability status of the item or house'
        self.format = 'Only the first letter of each word in the availability should be capitalized'
        self.examples = ['All Year', 'Summer', 'Winter', '19-Dec', 'Ready To Move']

    def super_cast(self, val):
        if val.lower() == 'ready to move':
            return 'Ready To Move'
        else:
            try:
                return datetime.strptime(val, '%d-%b').strftime('%d-%b')
            except ValueError:
                return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
location,"

class location(GeneralSemanticType):

    def __init__(self):
        self.description = 'The geographical location'
        self.format = 'Should be a string with the first letter of each word capitalized'
        self.examples = ['European Union', 'Argentina', 'Germany', 'South Korea', 'Latvia']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            val = str(val)
            if ',' in val:
                parts = val.split(',')
                return ', '.join([part.strip().title() for part in parts])
            else:
                return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is float('nan'):
            return True
        elif not isinstance(casted_val, str):
            return False
        else:
            words = casted_val.split(' ')
            for word in words:
                if not word.istitle():
                    return False
        return True"
society,"

class society(GeneralSemanticType):

    def __init__(self):
        self.description = 'Society where the house is located'
        self.format = 'Society should be a string with the first letter of each word capitalized'
        self.examples = ['GrrvaGr', 'PrarePa', 'Sryalan', 'Prtates', 'GMown E']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
totalsqft,"

class totalsqft(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total area of the house in square feet'
        self.format = 'Total area should be a floating point number'
        self.examples = [1056.0, 2600.0, 1440.0, 1521.0, 1200.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
bath,"

class bath(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of bathrooms in the house'
        self.format = 'Number of bathrooms should be a floating point number'
        self.examples = [2.0, 5.0, 2.0, 3.0, 2.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value, can't be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if casted_val < 0 or casted_val == float('inf'):
            return False
        return True"
balcony,"

class balcony(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of balconies in the house'
        self.format = 'Number of balconies should be a floating point number'
        self.examples = [1.0, 3.0, 3.0, 1.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
jobcategory,"

class jobcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job category of a person'
        self.format = 'Job category should be a string representing a job category'
        self.examples = ['Sales & Account Management', 'Marketing & Communications', 'Finance', 'Technical Solutions', 'Business Strategy']

    def super_cast(self, val):
        if isinstance(val, int):
            job_categories = ['Sales & Account Management', 'Marketing & Communications', 'Finance', 'Technical Solutions', 'Business Strategy']
            return job_categories[val] if val < len(job_categories) else 'Other'
        else:
            return str(val).title().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        job_categories = ['Sales & Account Management', 'Marketing & Communications', 'Finance', 'Technical Solutions', 'Business Strategy']
        return casted_val in job_categories"
joblocation,"

class joblocation(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Location of job'
        self.format: str = ""Job location should be in the format 'City, State, Country' or 'City, Country'""
        self.examples: list = ['Mountain View, CA, US', 'Sunnyvale, CA, US', 'Dublin, IE', 'New York, NY, US', 'London, GB']

    def super_cast(self, val):
        parts = val.split(',')
        if len(parts) == 3:
            (city, state, country) = parts
            return f'{city.strip()}, {state.strip()}, {pycountry.countries.get(name=country.strip()).alpha_2}'
        elif len(parts) == 2:
            (city, country) = parts
            return f'{city.strip()}, {pycountry.countries.get(name=country.strip()).alpha_2}'
        else:
            raise Exception('Invalid location format')

    def validate(self, val):
        try:
            casted_val = self.super_cast(val)
            parts = casted_val.split(',')
            if len(parts) == 3:
                (city, state, country) = parts
                if pycountry.countries.get(alpha_2=country.strip()):
                    return True
                else:
                    return False
            elif len(parts) == 2:
                (city, country) = parts
                if pycountry.countries.get(alpha_2=country.strip()):
                    return True
                else:
                    return False
        except:
            return False
        return True"
showidentifier,"

class showidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a show'
        self.format = ""Show identifier should be of format 's<number>'""
        self.examples = ['s1', 's11', 's17', 's16', 's15']

    def super_cast(self, val):
        val = str(val)
        match_obj = re.match('s[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
contenttype,"

class contenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of content'
        self.format = ""Either 'Movie' or 'TV Show'""
        self.examples = ['Movie', 'TV Show', 'Movie', 'TV Show', 'Movie']

    def super_cast(self, val):
        if val in ['Movie', 'TV Show']:
            return val
        else:
            raise Exception('Invalid content type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Movie', 'TV Show']:
            return True
        else:
            return False"
showtitle,"

class showtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a show'
        self.format = 'Title should be in string format'
        self.examples = ['Dick Johnson Is Dead', 'Blood & Water', 'Ganglands', 'Jailbirds New Orleans', 'Kota Factory']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
showdirector,"

class showdirector(GeneralSemanticType):

    def __init__(self):
        self.description = 'Director of a show'
        self.format = 'Director name should be in string format'
        self.examples = ['Rajiv Chilaka', 'Raúl Campos, Jan Suter', 'Marcus Raboy', 'Suhas Kadav', 'Jay Karas']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        return isinstance(casted_val, str) and len(casted_val) > 0"
productioncountry,"

class productioncountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country of production'
        self.format = 'Country name should be in string format'
        self.examples = ['United States', 'India', 'United Kingdom', 'Japan', 'South Korea']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            try:
                pycountry.countries.get(name=casted_val)
                return True
            except KeyError:
                return False
        elif np.isnan(casted_val):
            return True
        else:
            return False"
showreleaseyear,"

class showreleaseyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of release'
        self.format = 'Year should be a positive integer'
        self.examples = [1925, 2013, 2017, 2019, 2021]

    def super_cast(self, val):
        try:
            cast_val = int(val)
            return cast_val
        except ValueError:
            raise Exception('Invalid input. Value cannot be cast to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
showrating,"

class showrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of a show'
        self.format = 'Rating should be in string format'
        self.examples = ['TV-MA', 'TV-14', 'TV-PG', 'R', 'PG-13']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or np.isnan(casted_val):
            return True
        else:
            return False"
showduration,"

class showduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of a show'
        self.format = 'Duration should be in string format'
        self.examples = ['1 Season', '2 Seasons', '3 Seasons', '90 min', '94 min']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.search('\\d+ (Seasons|min)', casted_val):
            return True
        else:
            return False"
showcategory,"

class showcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of a show'
        self.format = 'Category should be in string format'
        self.examples = ['Documentaries', 'International TV Shows, TV Dramas, TV Mysteries', 'Crime TV Shows, International TV Shows, TV Action & Adventure', 'Docuseries, Reality TV', 'International TV Shows, Romantic TV Shows, TV Comedies']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
studentidentifier,"

class studentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of a student'
        self.format = 'Student ID is a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
ethnicity,"

class ethnicity(GeneralSemanticType):

    def __init__(self):
        self.description = 'The ethnic group of a student'
        self.format = ""One of ['group a', 'group b', 'group c', 'group d', 'group e']""
        self.examples = ['group a', 'group b', 'group c', 'group d', 'group e']

    def super_cast(self, val):
        casted_val = str(val).lower()
        if casted_val in ['group a', 'group b', 'group c', 'group d', 'group e']:
            return casted_val
        else:
            raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['group a', 'group b', 'group c', 'group d', 'group e']:
            return True
        else:
            return False"
parenteducationlevel,"

class parenteducationlevel(GeneralSemanticType):

    def __init__(self):
        self.description = ""The highest level of education achieved by the student's parents""
        self.format = ""One of ['some college', 'associate's degree', 'high school', 'some high school', 'bachelor's degree', 'master's degree']""
        self.examples = ['some college', ""associate's degree"", 'high school', 'some high school', ""bachelor's degree"", ""master's degree""]

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['some college', ""associate's degree"", 'high school', 'some high school', ""bachelor's degree"", ""master's degree""]:
            return str_val
        else:
            return 'invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['some college', ""associate's degree"", 'high school', 'some high school', ""bachelor's degree"", ""master's degree""]:
            return True
        else:
            return False"
lunchstatus,"

class lunchstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Lunch status of a student'
        self.format = 'lower-case string'
        self.examples = ['standard', 'free/reduced', 'standard', 'standard', 'free/reduced']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['standard', 'free/reduced']:
            return True
        else:
            return False"
testpreparationcoursestatus,"

class testpreparationcoursestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'The status of a test preparation course'
        self.format = 'lower-cased string'
        self.examples = ['none', 'completed', 'none', 'completed', 'none']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['none', 'completed']:
            return True
        else:
            return False"
mathscore,"

class mathscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Mathematics'
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [72, 69, 90, 47, 76]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except (TypeError, ValueError):
            raise Exception(f'Could not cast the input value: {val} to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
readingscore,"

class readingscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Reading'
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [72, 90, 95, 57, 78]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise Exception('Unable to cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
writingscore,"

class writingscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score obtained by a student in Writing'
        self.format = 'Score should be an integer between 0 and 100'
        self.examples = [74, 88, 93, 44, 75]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            return False
        else:
            return True"
btcprice,"

class btcprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a Bitcoin'
        self.format = 'A floating point number in USD'
        self.examples = [3.8, 4.96, 5.6, 6.26, 7.38]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                return float('nan')
            else:
                return float_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
btctradevolume,"

class btctradevolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of Bitcoin trades'
        self.format = 'Bitcoin trade volume should be a floating point number'
        self.examples = [0.00313838, 1.14, 2.002, 8.972, 100.79051631]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            if val < 0:
                raise Exception('Invalid volume')
            return val
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, float) and casted_val >= 0"
volumecurrency,"

class volumecurrency(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of trades in USD'
        self.format = 'Trade volume should be a floating point number'
        self.examples = [0.018516442, 6.995, 11.152, 47.464, 505.96839188]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            if val < 0:
                raise ValueError('Invalid volume')
            return val
        except ValueError as ve:
            print(f'ValueError: {ve}')
        except Exception as e:
            print(f'Exception: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
geocoordinate,"

class geocoordinate(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Geographical coordinate'
        self.format: str = 'Geographical coordinates should be floating point numbers'
        self.examples: list = [-77.08, 86.005, -179.997, 179.998, -23.54562128115268]

    def super_cast(self, val):
        try:
            val = float(val)
            return val
        except ValueError:
            raise ValueError('Invalid input, expected a float or a number that can be casted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -180 <= casted_val <= 180:
            return True
        else:
            return False"
orderitemidentifier,"

class orderitemidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Order item id'
        self.format: str = 'Integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and val.isdigit():
            casted_val = int(val)
            if casted_val >= 1 and casted_val <= 21:
                return casted_val
            else:
                raise ValueError('Cast value is out of valid range [1,21].')
        else:
            raise TypeError('Invalid input type. Expected an integer, float or string that can be converted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1 and (casted_val <= 21):
            return True
        else:
            return False"
shippingdatetime,"

class shippingdatetime(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Shipping limit date and time'
        self.format: str = 'YYYY-MM-DD HH:MM:SS'
        self.examples: list = ['2017-07-21 18:25:23', '2018-03-01 02:50:48', '2017-08-30 14:30:23', '2017-02-03 21:44:49', '2017-11-30 10:30:51']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d %H:%M:%S')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
freightvalue,"

class freightvalue(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Freight value'
        self.format: str = 'Floating point number with two decimal places'
        self.examples: list = [13.29, 19.93, 17.87, 12.79, 18.14]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(f'Invalid input: {val}. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
paymentsequential,"

class paymentsequential(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sequence of payments'
        self.format = 'Payment sequence should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1:
                return casted_val
            else:
                raise ValueError()
        except Exception as e:
            print(f'Unable to cast value: {val}. Error: {str(e)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1:
            return True
        else:
            print(f'Invalid value: {val}')
            return False"
paymenttype,"

class paymenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Method of payment'
        self.format = 'Payment type should be a string'
        self.examples = ['credit_card', 'boleto', 'voucher', 'debit_card', 'not_defined']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
paymentinstallments,"

class paymentinstallments(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of payment installments'
        self.format = 'Payment installments should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float, np.number)):
            return int(val)
        else:
            raise ValueError(f'Invalid type for super_cast: {type(val)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise ValueError(f'Invalid value for validate: {val}')
        return True"
paymentvalue,"

class paymentvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value of the payment'
        self.format = 'Payment value should be formatted as a floating point number'
        self.examples = [99.33, 24.39, 65.71, 107.78, 128.45]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            print('Error: Invalid input. It must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False
        pass"
reviewrating,"

class reviewrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review Rating'
        self.format = 'An integer between 1 and 5 (inclusive)'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in range(1, 6):
                return int_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError('Invalid input. Value must be an integer between 1 and 5.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 6):
            return True
        else:
            raise ValueError('Invalid input. Value must be an integer between 1 and 5.')"
reviewtitle,"

class reviewtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review Title'
        self.format = 'A string of words with the first letter of each word capitalized'
        self.examples = ['Recomendo', 'Super Recomendo', 'Bom', 'Excelente', 'Muito Bom']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
orderstatus,"

class orderstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'The status of an order'
        self.format = 'A categorical string'
        self.examples = ['delivered', 'shipped', 'canceled', 'unavailable', 'invoiced']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['delivered', 'shipped', 'canceled', 'unavailable', 'invoiced', 'completed', 'returned']:
            return val
        else:
            raise ValueError('Invalid order status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['delivered', 'shipped', 'canceled', 'unavailable', 'invoiced', 'completed', 'returned']:
            return True
        else:
            return False"
orderpurchasetimestamp,"

class orderpurchasetimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the purchase'
        self.format = 'Unix timestamp'
        self.examples = [1585699200.0, 1585785600.0, 1585872000.0, 1585958400.0, 1586044800.0]

    def super_cast(self, val):
        if isinstance(val, str):
            return pd.to_datetime(val).timestamp()
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise TypeError('Value must be a string, integer, or float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, (int, float)):
            raise ValueError('Casted value must be a number')
        if casted_val < 0:
            raise ValueError('Timestamps cannot be negative')
        return True"
orderapprovedat,"

class orderapprovedat(GeneralSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order approval'
        self.format = 'Unix timestamp'
        self.examples = [1620136800.0, 1620223200.0, 1620309600.0, 1620396000.0, 1620482400.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str):
            return pd.to_datetime(val).timestamp()
        elif isinstance(val, float) or isinstance(val, int):
            return val
        else:
            raise Exception('Invalid value type for timestamp.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
orderdeliveredcarrierdate,"

class orderdeliveredcarrierdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order delivery by the carrier'
        self.format = 'Unix timestamp'
        self.examples = []

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return pd.to_datetime(val).timestamp()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
orderdeliveredcustomerdate,"

class orderdeliveredcustomerdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The timestamp of the order delivery to the customer'
        self.format = 'Unix timestamp'
        self.examples = []

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return pd.to_datetime(val).timestamp()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
orderestimateddeliverydate,"

class orderestimateddeliverydate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The estimated delivery date of the order'
        self.format = 'Unix timestamp'

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return pd.to_datetime(val).timestamp()
            except:
                raise Exception('Invalid timestamp format')
        elif isinstance(val, (int, float)):
            try:
                return float(val)
            except:
                raise Exception('Invalid timestamp value')
        else:
            raise Exception('Invalid type for timestamp')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
productphotosqty,"

class productphotosqty(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quantity of Product Photos'
        self.format = 'Should be represented as a floating point number.'
        self.examples = [1.0, 1.0, 1.0, 1.0, 4.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
productweightg,"

class productweightg(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Weight of the Product'
        self.format: str = 'Should be represented as a floating point number.'
        self.examples: list = [225.0, 1000.0, 154.0, 371.0, 625.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                raise ValueError('Value cannot be negative')
            return float_val
        except ValueError as ve:
            raise ValueError('Invalid input, cannot cast to float.') from ve

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
productlengthcm,"

class productlengthcm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of the Product'
        self.format = 'Should be represented as a floating point number.'
        self.examples = [16.0, 30.0, 18.0, 26.0, 20.0]

    def super_cast(self, val):
        try:
            cast_val = float(val)
            if isinstance(cast_val, float):
                return cast_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Failed to convert value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1 <= casted_val <= float('inf'):
            return True
        else:
            return False"
productheightcm,"

class productheightcm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of the Product'
        self.format = 'Should be represented as a floating point number.'
        self.examples = [10.0, 18.0, 9.0, 4.0, 17.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f'Invalid value: {val}. Value must be convertible to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or math.isinf(casted_val):
            raise ValueError(f'Invalid value: {casted_val}. Value must be in range [1, infinity].')
        else:
            return True"
productwidthcm,"

class productwidthcm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Width of the Product'
        self.format = 'Should be represented as a floating point number.'
        self.examples = [14.0, 20.0, 15.0, 26.0, 13.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception('Value cannot be casted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or np.isinf(casted_val):
            raise Exception('Invalid value: Outside valid range')
        else:
            return True"
productcategorynameenglish,"

class productcategorynameenglish(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category name of the product in English'
        self.format = 'Alphanumeric string potentially with underscores'
        self.examples = ['health_beauty', 'computers_accessories', 'auto', 'bed_bath_table', 'furniture_decor']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-zA-Z0-9_]*$', casted_val):
            return True
        else:
            return False"
battery,"

class battery(GeneralSemanticType):

    def __init__(self):
        self.description = 'Battery power'
        self.format = 'Battery power should be an integer'
        self.examples = [1043, 841, 1807, 1546, 1434]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 500 <= casted_val <= 1999:
            return True
        else:
            return False"
boolean,"

class boolean(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'In numeric form (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.title() == 'Yes':
                return 1
            elif val.title() == 'No':
                return 0
            else:
                raise Exception('Invalid boolean value')
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise Exception('Invalid boolean value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
batterypower,"

class batterypower(GeneralSemanticType):

    def __init__(self):
        self.description = 'The battery power capacity'
        self.format = 'Battery Power should be formatted as an integer'
        self.examples = [842, 1021, 563, 615, 1821]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
booleanfeature,"

class booleanfeature(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean feature'
        self.format = 'Boolean in integer form'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
numberofcores,"

class numberofcores(GeneralSemanticType):

    def __init__(self):
        self.description = ""The number of cores in the mobile's processor""
        self.format = 'Number of Cores should be formatted as an integer'
        self.examples = [2, 3, 5, 6, 2]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
internalmemory,"

class internalmemory(GeneralSemanticType):

    def __init__(self):
        self.description = 'The internal memory of the mobile in GB'
        self.format = 'Internal Memory should be formatted as an integer'
        self.examples = [7, 53, 41, 10, 44]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except Exception as e:
            raise ValueError(""Invalid value, can't cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
mobiledepth,"

class mobiledepth(GeneralSemanticType):

    def __init__(self):
        self.description = 'The depth of the mobile in cm'
        self.format = 'Mobile Depth should be formatted as a floating point number rounded to one decimal place'
        self.examples = [0.6, 0.7, 0.9, 0.8, 0.6]

    def super_cast(self, val):
        num = float(val)
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
mobileweight,"

class mobileweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight of the mobile in grams'
        self.format = 'Mobile Weight should be formatted as an integer'
        self.examples = [188, 136, 145, 131, 141]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        else:
            try:
                return int(float(val))
            except ValueError:
                raise Exception('Unable to cast the value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
pixelheight,"

class pixelheight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The pixel resolution height'
        self.format = 'Pixel Height should be formatted as an integer'
        self.examples = [20, 905, 1263, 1216, 1208]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError('Invalid value. Value must be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pixelwidth,"

class pixelwidth(GeneralSemanticType):

    def __init__(self):
        self.description = 'The pixel resolution width'
        self.format = 'Pixel Width should be formatted as an integer'
        self.examples = [756, 1988, 1716, 1786, 1212]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value, it should be an integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
screensize,"

class screensize(GeneralSemanticType):

    def __init__(self):
        self.description = 'The screen size in cm'
        self.format = 'Screen Size should be formatted as an integer'
        self.examples = [9, 17, 11, 16, 8]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
talktime,"

class talktime(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The maximum talk time in hours'
        self.format = 'Talk Time should be formatted as an integer'
        self.examples = [19, 7, 9, 11, 15]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pricerange,"

class pricerange(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price range of the mobile'
        self.format = 'Price range should be formatted as an integer'
        self.examples = [1, 2, 2, 2, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 3:
            return True
        else:
            return False"
raintoday,"

class raintoday(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Rainfall data for today'
        self.format = ""lower-cased string ('yes' or 'no')""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
caridentifier,"

class caridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a car'
        self.format = 'Car id should be a positive integer'
        self.examples = [7222695916, 7218891961, 7221797935, 7222270760, 7210384030]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
regionname,"

class regionname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a region'
        self.format = 'Properly capitalized string'
        self.examples = ['Sub-Saharan Africa', 'Latin America & the Caribbean', 'Eastern Europe', 'Middle East & North Africa', 'Western Europe']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if len(casted_val) > 0:
                return True
            else:
                return False
        elif math.isnan(casted_val):
            return True
        else:
            return False"
carcondition,"

class carcondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Condition of a car'
        self.format = 'The condition should be in lower case'
        self.examples = ['good', 'excellent', 'like new', 'fair', 'new']

    def super_cast(self, val):
        conditions = ['good', 'excellent', 'like new', 'fair', 'new']
        if isinstance(val, str) and val.lower() in conditions:
            return val.lower()
        else:
            return 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['good', 'excellent', 'like new', 'fair', 'new']:
            return True
        else:
            return False"
carstate,"

class carstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'State where the car is located'
        self.format = 'All characters should be lower case'
        self.examples = ['new jersey', 'tennessee', 'georgia', 'virginia', 'florida']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        return True"
experiencelevel,"

class experiencelevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experience Level of Employee'
        self.format = 'Experience Level should be represented as a two-letter string'
        self.examples = ['SE', 'MI', 'EN', 'EX']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['SE', 'MI', 'EN', 'EX']:
            return True
        else:
            return False"
employmenttype,"

class employmenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of employment'
        self.format = 'Should be a full description string'
        self.examples = ['Full-time', 'Contract', 'Part-time', 'Temporary', 'Other']

    def super_cast(self, val):
        val = str(val).upper()
        if val == 'FT':
            return 'Full-time'
        elif val == 'CT':
            return 'Contract'
        elif val == 'PT':
            return 'Part-time'
        elif val == 'FL':
            return 'Freelance'
        else:
            return 'Other'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Full-time', 'Contract', 'Part-time', 'Temporary', 'Other']:
            return True
        else:
            return False"
remoteratio,"

class remoteratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of work done remotely by employee'
        self.format = 'Remote Ratio should be a floating point number between 0 and 100'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        try:
            return_val = float(val)
            if 0 <= return_val <= 100:
                return return_val
            else:
                return 'Invalid value'
        except ValueError:
            return 'Invalid type'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
passengeridentifier,"

class passengeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of a passenger'
        self.format = 'Passenger ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isnull(val):
            return int(0)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pclass,"

class pclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ticket class'
        self.format = 'Integer'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in self.examples:
                return casted_val
            else:
                return int('nan')
        except ValueError:
            return int('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return True"
embarked,"

class embarked(GeneralSemanticType):

    def __init__(self):
        self.description = 'Port of Embarkation'
        self.format = '0 = Cherbourg, 1 = Queenstown, 2 = Southampton'
        self.examples = [0, 1, 2]

    def super_cast(self, val):
        if pd.isna(val) or val not in self.examples:
            return int('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val) or casted_val not in self.examples:
            return False
        else:
            return True"
producttitle,"

class producttitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'The title of a product review'
        self.format = 'The product title should be capitalized'
        self.examples = ['Some Major Design Flaws', 'My Favorite Buy!', 'Flattering Shirt']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
clothingrating,"

class clothingrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rating of a clothing item'
        self.format = 'Rating should be represented as a whole number between 1 and 5'
        self.examples = [4, 5, 3, 5, 5]

    def super_cast(self, val):
        try:
            rating = int(val)
            if rating < 1 or rating > 5:
                raise Exception('Invalid rating')
            return rating
        except Exception as e:
            print(str(e))
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
recommendedind,"

class recommendedind(GeneralSemanticType):

    def __init__(self):
        self.description = 'A recommendation indicator'
        self.format = 'A binary integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val) if int(val) in [0, 1] else Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
feedbackcount,"

class feedbackcount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of positive feedbacks'
        self.format: str = 'Feedback count should be represented as a whole number'
        self.examples: list = [0, 4, 0, 0, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid feedback count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            return False
        else:
            return True"
clothingdivision,"

class clothingdivision(GeneralSemanticType):

    def __init__(self):
        self.description = 'The division of the clothing item'
        self.format = 'Clothing division should be one of the valid divisions'
        self.examples = ['Initmates', 'General', 'General', 'General Petite', 'General']

    def super_cast(self, val):
        if isinstance(val, str):
            if val in ['Initmates', 'General', 'General Petite']:
                return val
            else:
                raise Exception('Invalid clothing division')
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Initmates', 'General', 'General Petite']:
            return True
        else:
            return False"
clothingdepartment,"

class clothingdepartment(GeneralSemanticType):

    def __init__(self):
        self.description = 'The department of the clothing item'
        self.format = 'Clothing department should be one of the valid departments'
        self.examples = ['Intimate', 'Dresses', 'Dresses', 'Bottoms', 'Tops']
        self.valid_values = ['Tops', 'Dresses', 'Bottoms', 'Intimate', 'Jackets']

    def super_cast(self, val):
        val = str(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid clothing department')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.valid_values:
            return True
        else:
            return False"
clothingclass,"

class clothingclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'The class of the clothing item'
        self.format = 'Clothing class should be one of the valid classes'
        self.examples = ['Intimates', 'Dresses', 'Dresses', 'Pants', 'Blouses']

    def super_cast(self, val):
        valid_values = ['Dresses', 'Knits', 'Blouses', 'Sweaters', 'Pants']
        val = str(val)
        if val not in valid_values:
            raise Exception('Invalid clothing class')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Dresses', 'Knits', 'Blouses', 'Sweaters', 'Pants']:
            return True
        else:
            return False"
warlosscount,"

class warlosscount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of war losses of equipment'
        self.format = 'Count should be an integer number'
        self.examples = [10, 27, 29, 80, 146]

    def super_cast(self, val):
        try:
            count = int(val)
            if count < 0:
                return 'Invalid loss count'
            return count
        except ValueError:
            return 'Invalid loss count'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
direction,"

class direction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Direction of greatest losses'
        self.format = 'String with only first letter of each word capitalized'
        self.examples = ['Donetsk', 'Bakhmut', 'Kramatorsk And Donetsk', 'Kramatorsk', 'Kharkiv And Donetsk']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
countofmissiles,"

class countofmissiles(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of cruise missiles'
        self.format = 'Count should be an integer number'
        self.examples = [84, 195, 592, 911, 1347]

    def super_cast(self, val):
        try:
            count = int(val)
            if count < 0:
                raise ValueError('Invalid missile count')
            return count
        except Exception as e:
            raise ValueError('Invalid value, expected an integer') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
dayofyear,"

class dayofyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'The day of the year'
        self.format = 'Day of the year should be a positive integer between 1 and 365'
        self.examples = [231, 32, 365, 1, 100]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 365:
                raise ValueError('Invalid day of the year')
            else:
                return num
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 365:
            return True
        else:
            return False"
militaryequipment,"

class militaryequipment(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of military equipment'
        self.format = 'A positive integer'
        self.examples = [0, 3, 2, 1, 100]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid number of military equipment')
        except ValueError as e:
            print(f'Exception: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
day,"

class day(GeneralSemanticType):

    def __init__(self):
        self.description = 'Day of the event'
        self.format = 'Integer between 1 and 31'
        self.examples = [1, 15, 30, 31, 28]

    def super_cast(self, val):
        casted_val = int(val)
        if 1 <= casted_val <= 31:
            return casted_val
        else:
            raise Exception('Invalid day')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 31:
            return True
        else:
            return False"
personnel,"

class personnel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of personnel'
        self.format = 'Integer'
        self.examples = [2800, 4300, 4500, 5300, 5710]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
pow,"

class pow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of prisoners of war'
        self.format = 'Number of POWs should be a float. If the value is NaN, it should be replaced with 0'
        self.examples = [0.0, 0.0, 0.0, 0.0, 200.0]

    def super_cast(self, val):
        try:
            return float(val) if not math.isnan(float(val)) else 0.0
        except ValueError:
            return 0.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
battleevent,"

class battleevent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Battle Event'
        self.format = 'Names should start with a capital letter'
        self.examples = ['Battle Of The Golden Tooth', ""Battle At The Mummer's Ford"", 'Battle Of Riverrun', 'Battle Of The Green Fork', 'Battle Of The Whispering Wood']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val[0].isupper():
            return True
        else:
            return False"
gotcharacter,"

class gotcharacter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Game of Thrones Character Name'
        self.format = 'Names should start with a capital letter'
        self.examples = ['Joffrey/Tommen Baratheon', 'Robb Stark', 'Balon/Euron Greyjoy', 'Stannis Baratheon', 'Arya Stark']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
battleoutcome,"

class battleoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Battle Outcome'
        self.format = 'Outcomes should be stored as strings'
        self.examples = ['win', 'win', 'win', 'loss', 'win']

    def super_cast(self, val):
        if str(val).lower() in ['win', 'loss']:
            return str(val).lower()
        else:
            raise Exception('Invalid battle outcome')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['win', 'loss']:
            return True
        else:
            return False"
battletype,"

class battletype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Battle Type'
        self.format = 'Battle types should be stored as strings'
        self.examples = ['pitched battle', 'ambush', 'pitched battle', 'pitched battle', 'ambush']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['pitched battle', 'siege', 'ambush', 'razing']:
            return val.lower()
        else:
            raise ValueError('Invalid battle type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['pitched battle', 'siege', 'ambush', 'razing']:
            return True
        else:
            return False"
battleboolean,"

class battleboolean(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value representing a battle'
        self.format = 'In numeric form as 0.0 or 1.0'
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, float) and val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid input for super_cast method')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
battlesize,"

class battlesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the army in a battle'
        self.format = 'Army size should be formatted as a floating point number'
        self.examples = [15000.0, 4000.0, 10000.0, 18000.0, 1875.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        elif math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
gotlocation,"

class gotlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of a Battle Event in Game of Thrones'
        self.format = 'Locations should start with a capital letter'
        self.examples = ['Golden Tooth', ""Mummer's Ford"", 'Riverrun', 'Green Fork', 'Whispering Wood']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
gotregion,"

class gotregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Region of a Battle Event in Game of Thrones'
        self.format = 'Regions should start with a capital letter'
        self.examples = ['The Westerlands', 'The Riverlands', 'The Riverlands', 'The Riverlands', 'The Riverlands']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
characteridentifier,"

class characteridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique id number assigned to each character'
        self.format = 'The id should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 916:
            return True
        else:
            return False"
characterallegiance,"

class characterallegiance(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The allegiance of the character'
        self.format: str = 'The allegiance should be a string'
        self.examples: list = ['Lannister', 'None', 'House Targaryen', 'House Greyjoy', 'Lannister']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
deathyear,"

class deathyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'The year the character died'
        self.format = 'The death year should be a float'
        self.examples = [297.0, 298.0, 299.0, 300.0, float('nan')]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 297.0 <= casted_val <= 300.0:
            return True
        else:
            return False"
bookofdeath,"

class bookofdeath(GeneralSemanticType):

    def __init__(self):
        self.description = 'The book number in which the character died'
        self.format = 'The book number should be a float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 5.0:
            return True
        else:
            return False"
deathchapter,"

class deathchapter(GeneralSemanticType):

    def __init__(self):
        self.description = 'The chapter number in which the character died'
        self.format = 'The chapter number should be a float'
        self.examples = [0.0, 10.0, 20.0, 30.0, 40.0]

    def super_cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            else:
                return float(val)
        except Exception as e:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 80:
            return True
        else:
            return False"
bookintrochapter,"

class bookintrochapter(GeneralSemanticType):

    def __init__(self):
        self.description = 'The chapter number in which the character was introduced'
        self.format = 'The chapter number should be a float'
        self.examples = [0.0, 10.0, 20.0, 30.0, 40.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= 80:
            return True
        else:
            return False"
nobility,"

class nobility(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nobility status'
        self.format = '0 for non-nobility, 1 for nobility'
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
isinbook,"

class isinbook(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value representing if a book is in stock or not'
        self.format = '0 or 1 integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
isbool,"

class isbool(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'Integer (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, bool):
            return int(val)
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value for boolean type.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
culture,"

class culture(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cultures in Game of Thrones'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Northmen', 'Ironborn', 'Free Folk', 'Valyrian', 'Braavosi']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
characterrelation,"

class characterrelation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Character relations in Game of Thrones'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Rhaenyra Targaryen', 'Daemon Targaryen', 'Aegon IV Targaryen', 'Walder Frey', 'Craster']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            raise ValueError('Value is not a string')
        if casted_val.istitle():
            return True
        else:
            return False"
house,"

class house(GeneralSemanticType):

    def __init__(self):
        self.description = 'Houses in Game of Thrones'
        self.format = 'Only the first letter should be capitalized'
        self.examples = [""Night's Watch"", 'House Frey', 'House Stark', 'House Targaryen', 'House Lannister']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle() and isinstance(casted_val, str):
            return True
        else:
            return False"
spouse,"

class spouse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Spouses in Game of Thrones'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Walder Frey', 'Craster', 'Rohanne Webber', 'Alys Arryn', 'Kiera of Tyrosh']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
referee,"

class referee(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a UFC referee'
        self.format = ""Names are stored as strings and are typically of the form 'first name last name'""
        self.examples = ['Herb Dean', 'John McCarthy', 'Dan Miragliotta', 'Mario Yamasaki', 'Marc Goddard']

    def super_cast(self, val):
        return str(val).strip() if pd.notnull(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val.split(' ')) == 2:
            return True
        else:
            return False"
winner,"

class winner(GeneralSemanticType):

    def __init__(self):
        self.description = 'The winner of a game or fight'
        self.format = 'Stored as strings'
        self.examples = ['Red', 'Blue', 'Draw', 'white', 'black']

    def super_cast(self, val):
        val = str(val).capitalize()
        if val not in ['Red', 'Blue', 'Draw', 'White', 'Black']:
            raise Exception('Invalid winner')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Red', 'Blue', 'Draw', 'White', 'Black']:
            return True
        else:
            return False"
weightclass,"

class weightclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight class of a UFC fight'
        self.format = 'Stored as strings'
        self.examples = ['Lightweight', 'Welterweight', 'Middleweight', 'Heavyweight', 'LightHeavyweight']

    def super_cast(self, val):
        val = str(val)
        if val not in ['Lightweight', 'Welterweight', 'Middleweight', 'Heavyweight', 'LightHeavyweight']:
            return 'Invalid'
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
fightwinner,"

class fightwinner(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fight Winner'
        self.format = 'string'
        self.examples = ['Red', 'Blue', 'Red', 'Blue', 'Red']

    def super_cast(self, val):
        if val == 'Red' or val == 'Blue':
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Red', 'Blue']:
            return True
        else:
            return False"
knockoutaverage,"

class knockoutaverage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average Knockouts'
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 0.5, 0.015625, 0.015625, 0.125]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception:
            raise Exception('Invalid input, cannot be cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0.0:
            return True
        else:
            return False
        pass"
reach,"

class reach(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reach of the UFC fighter'
        self.format = 'Should be a float in inches'
        self.examples = [73.0, 70.0, 72.0, 71.0, 74.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(re.findall('\\d+', str(val))[0])

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
stance,"

class stance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stance of the UFC fighter'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Orthodox', 'Southpaw', 'Switch', 'Open Stance', 'Sideways']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
dob,"

class dob(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Date of birth'
        self.format: str = 'Should be a string in the format ""YYYY-MM-DD""'
        self.examples: list = ['1987-06-24', '1985-02-05', '1984-01-23', '1981-10-03', '1986-03-27']

    def super_cast(self, val):
        if isinstance(val, float) and (not math.isnan(val)):
            return datetime.utcfromtimestamp(val).strftime('%Y-%m-%d')
        elif isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                datetime.strptime(val, '%Y-%m-%d')
                return val
            except ValueError:
                return 'Invalid'
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
slpm,"

class slpm(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Significant strikes landed per minute'
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 2.8, 2.45, 3.29, 1.71]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
stracc,"

class stracc(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Striking accuracy'
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.55, 0.44, 0.38, 0.36]

    def super_cast(self, val):
        return float(re.findall('\\d+', str(val))[0]) / 100

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
sapm,"

class sapm(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Significant strikes absorbed per minute'
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 3.15, 2.45, 4.41, 3.11]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
strdef,"

class strdef(GeneralSemanticType):

    def __init__(self):
        self.description = 'Striking defense'
        self.format = 'Should be a float between 0 and 1'
        self.examples = [0.0, 0.48, 0.58, 0.57, 0.63]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(re.findall('\\d+', val)[0]) / 100
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
tdavg,"

class tdavg(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Average takedowns landed per 15 minutes'
        self.format: str = 'Should be a float'
        self.examples: list = [0.0, 3.47, 1.23, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            raise Exception(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
tdacc,"

class tdacc(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Takedown accuracy'
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.57, 0.24, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(re.findall('\\d+', str(val))[0]) / 100
        except IndexError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1:
            return True
        else:
            return False"
tddef,"

class tddef(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Takedown defense'
        self.format: str = 'Should be a float between 0 and 1'
        self.examples: list = [0.0, 0.5, 0.47, 0.77, 0.33]

    def super_cast(self, val):
        try:
            casted_val = float(re.findall('\\d+', val)[0]) / 100
            return casted_val
        except:
            raise ValueError('Invalid input value for super_cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
subavg,"

class subavg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average submissions attempted per 15 minutes'
        self.format = 'Should be a float'
        self.examples = [0.0, 1.3, 0.2, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
yearandlocation,"

class yearandlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year and Location of the event'
        self.format = 'Year should be a 4 digit number followed by a semicolon and then the location name'
        self.examples = ['2020;Las Vegas', '2016;Las Vegas', '2020;Abu Dhabi', '2006;Las Vegas', '2015;Las Vegas']

    def super_cast(self, val):
        if isinstance(val, str) and ';' in val:
            (year, location) = str(val).split(';')
            return str(int(year)) + ';' + location.strip()
        else:
            raise ValueError(""Value does not match the expected format 'YYYY;Location'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        (year, location) = casted_val.split(';')
        if len(year) == 4 and year.isdigit() and bool(re.match('^[A-Za-z\\s]*$', location)):
            return True
        else:
            return False"
fightdetails,"

class fightdetails(GeneralSemanticType):

    def __init__(self):
        self.description = 'Details of the fight'
        self.format = 'Country should be a valid country name, Fight Type should describe the type of fight, and Winner should be the name of the winner'
        self.examples = ['USA;Lightweight Bout;Jim Miller', 'USA;Lightweight Bout;Joe Lauzon', 'USA;Lightweight Bout;Donald Cerrone', 'USA;Lightweight Bout;', 'USA;Welterweight Bout;Matt Brown']

    def super_cast(self, val):
        if isinstance(val, str):
            parts = val.split(';')
            if len(parts) == 3:
                (country, fight_type, winner) = parts
                if pycountry.countries.get(name=country.strip()) is not None:
                    return country.strip() + ';' + fight_type.strip() + ';' + winner.strip()
            else:
                raise Exception('Invalid fight details')
        else:
            raise Exception('Value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        parts = casted_val.split(';')
        if len(parts) == 3:
            (country, fight_type, winner) = parts
            if pycountry.countries.get(name=country.strip()) is not None:
                return True
            else:
                return False
        else:
            return False"
whoregion,"

class whoregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'WHO defined regions'
        self.format = 'First letter of each word in region name should be capitalized'
        self.examples = ['Africa', 'Americas', 'South-East Asia', 'Europe', 'Eastern Mediterranean']

    def super_cast(self, val):
        if pd.isnull(val):
            return ''
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
percentofhaleinlifeexpectancy,"

class percentofhaleinlifeexpectancy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of Healthy life expectancy in Life expectancy'
        self.format = 'Percentage should be formatted as an integer'
        self.examples = [85, 86, 87, 88, 90]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast the value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
lifeexpectancyindicator,"

class lifeexpectancyindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates the life expectancy at birth (in years)'
        self.format = ""The indicator should be in the form of the string 'Life expectancy at birth (years)'""
        self.examples = ['Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)', 'Life expectancy at birth (years)']

    def super_cast(self, val):
        return 'Life expectancy at birth (years)'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Life expectancy at birth (years)':
            return True
        else:
            return False"
birthrate,"

class birthrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Birth rate is the number of live births per 1,000 of population per year'
        self.format = 'Birth rate should be a non-negative floating point number'
        self.examples = [62.0, 77.2, 87.0, 125.7, 80.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError('Invalid birth rate')
        except Exception as e:
            raise ValueError('Invalid input, expected a non-negative floating point number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('Invalid birth rate, should be a non-negative number')
        else:
            return True"
pollutionindex,"

class pollutionindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Pollution Index'
        self.format = ""The index is stored as a string with the format 'x.x [x.x-x.x]'""
        self.examples = ['0.31 [0.25-0.36]', '0.47 [0.36-0.56]', '0.54 [0.4-0.66]', '0.38 [0.29-0.46]', '0.75 [0.21-1.56]']

    def super_cast(self, val):
        match_obj = re.match('\\d+\\.\\d+ \\[\\d+\\.\\d+-\\d+\\.\\d+\\]', str(val))
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid index format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\d+\\.\\d+ \\[\\d+\\.\\d+-\\d+\\.\\d+\\]', casted_val):
            return True
        else:
            return False"
suiciderate,"

class suiciderate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The suicide rate for a given population'
        self.format = 'Suicide rate should be a non-negative floating point number'
        self.examples = [0.0, 1.9, 5.7, 11.4, 93.5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError()
            return num
        except ValueError:
            raise Exception('Invalid suicide rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
yearrange,"

class yearrange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year Range'
        self.format = ""The year range should be in the form 'YYYY-YYYY'""
        self.examples = ['2013-2017', '2000-2005', '1990-1995', '1980-1985', '1970-1975']

    def super_cast(self, val):
        range_pattern = re.compile('[0-9]{4}-[0-9]{4}')
        if range_pattern.match(str(val)):
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
decimalpercent,"

class decimalpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Decimal representation of a percentage'
        self.format = 'A float between 0 and 1, inclusive'
        self.examples = [0.49, 0.31, 0.36, 0.31, 0.24]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 1:
                return round(val, 2)
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= 1:
                return True
        return False"
dentistcountpercapita,"

class dentistcountpercapita(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of dentists per 10,000 population'
        self.format = 'Count should be a floating point number with four decimal places'
        self.examples = [0.034, 0.036, 0.033, 0.14, 0.12]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 4)
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
violenceagainstwomenpercent,"

class violenceagainstwomenpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Violence against women percentage'
        self.format = 'Percentage of violence against women, as a floating point number with one decimal place'
        self.examples = [0.0, 9.2, 15.4, 24.6, 58.5]

    def super_cast(self, val):
        num = float(val)
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 100"
hepatitisbsurfaceantigenpercent,"

class hepatitisbsurfaceantigenpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of Hepatitis B surface Antigen present in an individual'
        self.format = 'Percentage should be a floating point number with two decimal places'
        self.examples = [0.5, 1.29, 0.22, 0.08, 4.85]

    def super_cast(self, val):
        if isinstance(val, str):
            val = re.search('\\d+\\.\\d+', val)
            if val is not None:
                return round(float(val.group()), 2)
        elif isinstance(val, (int, float)):
            return round(float(val), 2)
        else:
            raise ValueError(f'Unexpected value {val} of type {type(val)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
malariaincidence,"

class malariaincidence(GeneralSemanticType):

    def __init__(self):
        self.description = 'Malaria Incidence'
        self.format = 'Incidence should be formatted as a floating point number'
        self.examples = [29.01, 27.07, 26.11, 14.91, 12.67]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
tuberculosisincidence,"

class tuberculosisincidence(GeneralSemanticType):

    def __init__(self):
        self.description = 'Incidence of tuberculosis'
        self.format = 'Incidence rates should be stored as strings'
        self.examples = ['189 [122-270]', '13 [11-15]', '12 [10-14]', '16 [14-19]', '540 [349-771]']

    def super_cast(self, val):
        match_obj = re.match('\\d+ \\[\\d+-\\d+\\]', str(val))
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val:
            return True
        else:
            return False"
maternalmortalityratio,"

class maternalmortalityratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'The maternal mortality ratio'
        self.format = ""A string in the format 'X [Y-Z]' where X, Y, and Z are integers""
        self.examples = ['638 [427-1010]', '673 [457-1040]', '701 [501-1020]', '786 [592-1080]', '810 [617-1080]']

    def super_cast(self, val):
        val = str(val)
        if re.match('\\d+\\s\\[\\d+-\\d+\\]', val):
            return val
        else:
            raise ValueError(f'The value {val} does not match the required format.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        numbers = [int(num) for num in re.findall('\\d+', casted_val)]
        if numbers[0] >= numbers[1] and numbers[0] <= numbers[2]:
            return True
        else:
            return False"
medicaldoctorsper10000,"

class medicaldoctorsper10000(GeneralSemanticType):

    def __init__(self):
        self.description = 'Medical doctors per 10,000 people'
        self.format = 'Float number rounded to 2 decimal places'
        self.examples = [2.78, 2.85, 2.98, 2.85, 2.41]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            print(f'Value {val} cannot be converted to float')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or not np.isfinite(casted_val):
            return False
        return True"
hivinfectionrate,"

class hivinfectionrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rate of new HIV infections'
        self.format = 'Rates are represented as floats'
        self.examples = ['No data', '<0.01 [<0.01–<0.01]', '0.01', '0.03 [0.02-0.04]', '<0.01 [<0.01–0.01]']

    def super_cast(self, val):
        if isinstance(val, str) and val == 'No data':
            return float('nan')
        elif isinstance(val, str) and '[' in val and ('-' in val):
            (lower, upper) = re.findall('[0-9.]+', val)
            return (float(lower) + float(upper)) / 2
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
percentoflifeexpectancy,"

class percentoflifeexpectancy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of life expectancy that is healthy'
        self.format = 'An integer number between 0 and 100'
        self.examples = [85, 86, 87, 88, 90]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0 or casted_val > 100:
                raise Exception('Value is out of range [0, 100]')
            return casted_val
        except ValueError:
            raise Exception('Cannot convert value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
pharmacistsper10k,"

class pharmacistsper10k(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of pharmacists per 10,000 population'
        self.format = 'Number should be a non-negative float'
        self.examples = [0.47, 0.5, 0.51, 0.27, 0.28]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
deathrate,"

class deathrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of deaths per 100,000 population due to road traffic accidents'
        self.format = 'Should be a non-negative floating point number rounded to two decimal places'
        self.examples = [15.1, 13.6, 23.6, 7.9, 14.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid death rate')
            return round(num, 2)
        except Exception as e:
            print('Invalid input: ', e)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or casted_val > float('inf'):
            return False
        return True"
tobaccoconsumptionpercent,"

class tobaccoconsumptionpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of tobacco consumption in a country'
        self.format = 'Tobacco consumption percentage should be formatted as a floating point number with a maximum of two decimal places'
        self.examples = [29.2, 50.5, 7.9, 29.3, 50.6]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except (ValueError, TypeError):
            raise ValueError('Invalid value. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            raise ValueError('Invalid value. Expected a floating point number between 0 and 100.')"
servicecoverageindicator,"

class servicecoverageindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicator for essential service coverage'
        self.format = ""A string with the exact phrase 'UHC index of essential service coverage'""
        self.examples = ['UHC index of essential service coverage', 'UHC index of essential service coverage', 'UHC index of essential service coverage', 'UHC index of essential service coverage', 'UHC index of essential service coverage']

    def super_cast(self, val):
        val = str(val)
        if val == 'UHC index of essential service coverage':
            return 'UHC index of essential service coverage'
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'UHC index of essential service coverage':
            return True
        else:
            return False"
indexvalue,"

class indexvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The index value of essential service coverage'
        self.format = 'Index value should be an integer between 0 and 100'
        self.examples = [22, 49, 68, 76, 89]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        try:
            num = int(val)
            if num < 0 or num > 100:
                raise Exception('Invalid index value')
            return num
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
startupname,"

class startupname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the startup'
        self.format = 'String'
        self.examples = ['BYJU’S', 'Shuttl', 'Mamaearth', 'https://www.wealthbucket.in/', 'Fashor']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
subindustry,"

class subindustry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Subvertical of the startup'
        self.format = 'Subvertical should be a string'
        self.examples = ['E-learning', 'App based shuttle service', 'Retailer of baby and toddler products', 'Online Investment', 'Embroiled Clothes For Women']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
investor,"

class investor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Investor of the startup'
        self.format = 'Investor should be a string'
        self.examples = ['Tiger Global Management', 'Susquehanna Growth Equity', 'Sequoia Capital India', 'Vinod Khatumal', 'Sprout Venture Partners']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fundingtype,"

class fundingtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Investment type of the startup'
        self.format = 'Investment type should be a string'
        self.examples = ['Private Equity Round', 'Series C', 'Series B', 'Pre-series A', 'Seed Round']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fundingamount,"

class fundingamount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Funding amount of the startup'
        self.format: str = 'Funding amount should be a floating point number'
        self.examples: list = [2000000000.0, 8048394.0, 18358860.0, 3000000.0, 1800000.0]

    def super_cast(self, val):
        try:
            return float(str(val).replace(',', ''))
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
remarks,"

class remarks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Remarks about the startup'
        self.format = 'Remarks should be a string or NaN if not available'
        self.examples = [float('nan'), float('nan'), float('nan'), float('nan'), float('nan')]

    def super_cast(self, val):
        return str(val) if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val) or isinstance(casted_val, str):
            return True
        else:
            return False"
countryname,"

class countryname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.format = 'Country names should be title-cased strings'
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']

    def super_cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name):
            return country_name
        else:
            raise ValueError('Invalid country name')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
globalregion,"

class globalregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Global region a country belongs to'
        self.format = 'The first letter of each word should be capitalized, other characters should be lower case. There should be no leading or trailing spaces.'
        self.examples = ['Sub-Saharan Africa', 'Latin Amer. & Carib', 'Asia (Ex. Near East)', 'Western Europe', 'Oceania']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
countryarea,"

class countryarea(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total area of a country'
        self.format = 'Area should be represented as an integer and the unit is square kilometers'
        self.examples: list[int] = [652230, 28748, 2381741, 199, 468]

    def super_cast(self, val):
        if isinstance(val, float):
            val = int(val * 1.60934)
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
populationdensity,"

class populationdensity(GeneralSemanticType):

    def __init__(self):
        self.description = 'The population density of a country'
        self.format = 'Population Density should be a floating point number'
        self.examples = [48.0, 124.6, 13.8, 290.4, 152.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float(val.replace(',', '.'))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
coastlinearearatio,"

class coastlinearearatio(GeneralSemanticType):

    def __init__(self):
        self.description = 'The ratio of coastline to area of a country'
        self.format = 'The ratio should be a float number'
        self.examples = [0.0, 1.26, 0.04, 58.29, 0.0]

    def super_cast(self, val):
        try:
            return float(str(val).replace(',', '.'))
        except ValueError:
            return 'Cannot convert to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
netmigration,"

class netmigration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The net migration of a country'
        self.format = 'The net migration should be a float number'
        self.examples = [23.06, -4.93, -0.39, -20.71, 6.6]

    def super_cast(self, val):
        return float(str(val).replace(',', '.'))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
countrygdp,"

class countrygdp(GeneralSemanticType):

    def __init__(self):
        self.description = 'The GDP per capita of a country'
        self.format = 'GDP should be a float number'
        self.examples = [700.0, 4500.0, 6000.0, 8000.0, 19000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value. Expected a numeric value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
carownership,"

class carownership(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car ownership status'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.upper() == 'Y':
                return True
            elif val.upper() == 'N':
                return False
            else:
                raise Exception('Invalid car ownership value')
        elif isinstance(val, bool):
            return val
        else:
            raise Exception('Invalid car ownership value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
realtyownership,"

class realtyownership(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reality Ownership'
        self.format = 'boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val == 'Y':
            return True
        elif val == 'N':
            return False
        else:
            raise Exception('Invalid realty ownership value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
children,"

class children(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of children'
        self.format = 'Number of children should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for number of children')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
familystatus,"

class familystatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Family status'
        self.format = 'Family status should be capitalized and may contain spaces or slashes'
        self.examples = ['Married', 'Single / not married', 'Civil marriage', 'Separated', 'Widow']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
housingtype,"

class housingtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of housing'
        self.format = 'Housing type should be capitalized and may contain spaces'
        self.examples = ['House / apartment', 'With parents', 'Municipal apartment', 'Rented apartment', 'Office apartment']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
mobil,"

class mobil(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean representing whether a phone number is mobile or not'
        self.format = 'boolean (True, False)'
        self.examples = [True, True, False, False, True]

    def super_cast(self, val):
        if val == 1:
            return True
        elif val == 0:
            return False
        else:
            raise Exception('Invalid mobil value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
workphone,"

class workphone(GeneralSemanticType):

    def __init__(self):
        self.description = 'A workphone'
        self.format = 'As a boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 1:
                return True
            elif val == 0:
                return False
            else:
                raise ValueError('Invalid input value')
        else:
            raise ValueError('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
phone,"

class phone(GeneralSemanticType):

    def __init__(self):
        self.description = 'A phone status'
        self.format = 'A boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 0:
                return False
            elif val == 1:
                return True
        elif isinstance(val, bool):
            return val
        else:
            raise Exception('Invalid phone value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
email,"

class email(GeneralSemanticType):

    def __init__(self):
        self.description = 'Email availability'
        self.format = 'Boolean'
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        if val == 0:
            return False
        elif val == 1:
            return True
        else:
            raise Exception('Invalid email value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
occupation,"

class occupation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Occupation of a person'
        self.format = 'Occupation should be in lower case'
        self.examples = ['management', 'blue-collar', 'technician', 'admin.', 'services']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
familymembers,"

class familymembers(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of family members'
        self.format = 'Integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Value cannot be cast to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
monthoffset,"

class monthoffset(GeneralSemanticType):

    def __init__(self):
        self.description = 'month offset'
        self.format = 'whole negative number or zero'
        self.examples = [-60, -30, -15, -1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and -60 <= casted_val <= 0:
            return True
        else:
            return False"
creditstatus,"

class creditstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Credit status'
        self.format = 'Credit status is a single character'
        self.examples = ['C', '0', 'X', '1', '5']

    def super_cast(self, val):
        valid_values = ['C', '0', 'X', '1', '5']
        if str(val) in valid_values:
            return str(val)
        else:
            raise Exception('Invalid credit status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['C', '0', 'X', '1', '5']:
            return True
        else:
            return False"
inning,"

class inning(GeneralSemanticType):

    def __init__(self):
        self.description = 'An inning in a baseball game'
        self.format = 'An integer either 1 or 2 representing the first or second half of an inning'
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        if isinstance(val, int) and val in [1, 2]:
            return val
        else:
            raise Exception('Invalid inning number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
over,"

class over(GeneralSemanticType):

    def __init__(self):
        self.description = 'Over number in a cricket match'
        self.format = 'Over number should be an integer between 0 and 20'
        self.examples = [0, 4, 9, 14, 19]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception('Invalid over number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 20:
            return True
        else:
            return False"
ball,"

class ball(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ball in an over of a cricket match'
        self.format = 'integer between 1 and 9'
        self.examples = [1, 2, 4, 5, 9]

    def super_cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 9:
            return int_val
        else:
            raise Exception('Invalid ball number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 9:
            return True
        else:
            return False"
run,"

class run(GeneralSemanticType):

    def __init__(self):
        self.description = 'Runs scored in a cricket match'
        self.format = 'Runs are integers between 0 and 6'
        self.examples = [0, 1, 2, 4, 6]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 0 <= casted_val <= 6:
                return casted_val
            else:
                raise ValueError('Value outside of valid range for runs.')
        except ValueError:
            raise ValueError('Value not castable to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 6:
            return True
        else:
            return False"
iswicket,"

class iswicket(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean indicating if it's a wicket in a cricket match""
        self.format = 'An integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid wicket status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
cricketteam,"

class cricketteam(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a cricket team'
        self.format = 'The name of the cricket team should be capitalized'
        self.examples = ['Chennai Super Kings', 'Mumbai Indians', 'Royal Challengers Bangalore', 'Kings XI Punjab', 'Rajasthan Royals']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
venuename,"

class venuename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Venue'
        self.format = 'Venue names should be capitalized and without any special characters or numbers'
        self.examples = ['Eden Gardens', 'Feroz Shah Kotla', 'Wankhede Stadium', 'M Chinnaswamy Stadium', 'Rajiv Gandhi International Stadium, Uppal']

    def super_cast(self, val):
        val = re.sub('[^A-Za-z ]+', '', val)
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
neutralvenue,"

class neutralvenue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Neutral Venue'
        self.format = 'Boolean represented as integer (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
tossdecision,"

class tossdecision(GeneralSemanticType):

    def __init__(self):
        self.description = 'Decision to field or bat'
        self.format = 'A string'
        self.examples = ['field', 'bat', 'field', 'bat', 'field']

    def super_cast(self, val):
        str_val = str(val)
        if str_val.lower() in ['field', 'bat']:
            return str_val.lower()
        else:
            raise Exception('Invalid toss decision')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['field', 'bat']:
            return True
        else:
            return False"
matchresult,"

class matchresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Result of a Match'
        self.format = 'Result should be a string'
        self.examples = ['0', '1', 'wickets', 'runs', 'tie']

    def super_cast(self, val):
        if isinstance(val, int) or (isinstance(val, str) and val.isdigit()):
            if int(val) == 0:
                return 'tie'
            else:
                return 'runs'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
resultmargin,"

class resultmargin(GeneralSemanticType):

    def __init__(self):
        self.description = 'The margin of result in a match'
        self.format = 'Result margin should be a floating point number'
        self.examples = [140.0, 33.0, 9.0, 5.0, 5.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
eliminatormatch,"

class eliminatormatch(GeneralSemanticType):

    def __init__(self):
        self.description = 'Determines if a match is an eliminator match'
        self.format = ""Either 'N' or 'Y'""
        self.examples = ['N', 'Y', 'N', 'N', 'Y']

    def super_cast(self, val):
        str_val = str(val).upper()
        if str_val in ['N', 'Y']:
            return str_val
        else:
            raise Exception(""Invalid value. Expected 'N' or 'Y'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['N', 'Y']:
            return True
        else:
            return False"
matchmethod,"

class matchmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Method used in a Match'
        self.format = 'Method as a string'
        self.examples = ['D/L', 'nan', 'D/L', 'nan', 'D/L']

    def super_cast(self, val):
        if pd.isna(val):
            return 'nan'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['D/L', 'nan']:
            return True
        else:
            return False"
storeidentifier,"

class storeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each store'
        self.format = 'Should be a positive integer value with no leading zeros'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
storearea,"

class storearea(GeneralSemanticType):

    def __init__(self):
        self.description = 'The area of a store in square feet'
        self.format = 'Area should be a positive floating point number with two decimal places'
        self.examples = [1659.0, 1461.0, 1340.0, 1451.0, 1770.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
itemsavailable,"

class itemsavailable(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of items available in a store'
        self.format = 'Items available should be a non-negative integer'
        self.examples = [1961, 1752, 1609, 1748, 2111]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return 0 <= casted_val"
dailycustomercount,"

class dailycustomercount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of customers visiting a store daily'
        self.format = 'Customer count should be a non-negative integer'
        self.examples = [530, 210, 720, 620, 450]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('The value should be a non-negative integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
storesales,"

class storesales(GeneralSemanticType):

    def __init__(self):
        self.description = 'The sales of a store'
        self.format = 'Sales should be a positive floating point number, rounded to two decimal places'
        self.examples = [66490.0, 39820.0, 54010.0, 53730.0, 46620.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
recordindex,"

class recordindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique index number for each record in the dataset'
        self.format = 'The record index should be a positive integer or zero'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('The record index should be a positive integer or zero')
            else:
                return casted_val
        except ValueError:
            raise ValueError('Invalid input. The value should be convertible to an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
publishdate,"

class publishdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date when the news was published'
        self.format = 'The publish date should be a datetime object'
        self.examples = [datetime(2003, 2, 19), datetime(2003, 2, 19), datetime(2003, 2, 19), datetime(2003, 2, 19), datetime(2003, 2, 19)]

    def super_cast(self, val):
        if isinstance(val, int):
            str_val = str(val)
            return datetime(int(str_val[:4]), int(str_val[4:6]), int(str_val[6:8]))
        else:
            raise Exception('Invalid input for super_cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime) and datetime(2003, 2, 19) <= casted_val <= datetime(2004, 6, 30):
            return True
        else:
            return False"
gameidentifier,"

class gameidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A game identifier'
        self.format = 'Positive integer'

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise ValueError('The value should be a string representation of an integer or an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
booleanresult,"

class booleanresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean result'
        self.format = 'as a boolean, 1 for true and 0 for false'
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, str) and val.lower() in ['true', 'false']:
            return 1 if val.lower() == 'true' else 0
        else:
            raise Exception('Invalid boolean value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
wardsplaced,"

class wardsplaced(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of wards placed in a game'
        self.format = 'Wards placed should be an integer number'
        self.examples: list = [28, 12, 15, 43, 75]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception(f'Invalid value: {val}. Value must be castable to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
wardsdestroyed,"

class wardsdestroyed(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of wards destroyed in a game'
        self.format = 'An integer number'
        self.examples: list = [2, 1, 0, 1, 4]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        else:
            raise ValueError('Input should be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
kills,"

class kills(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of kills in a game or by a player'
        self.format = 'Kills should be a positive integer'
        self.examples = [9, 5, 7, 4, 6]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception(f'Value {val} cannot be casted to int or is negative.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deaths,"

class deaths(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of deaths'
        self.format: str = 'Deaths should be represented as integers'
        self.examples: list = [0, 10, 50, 100, 500]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
assists,"

class assists(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of assists'
        self.format = 'Assists should be an integer number'
        self.examples: list = [11, 5, 4, 5, 6]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid number of assists')
            return num
        except Exception as e:
            print(f'Error: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
elitemonsters,"

class elitemonsters(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of elite monsters in a game'
        self.format = 'Monsters should be an integer number'
        self.examples: list = [0, 0, 1, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
towersdestroyed,"

class towersdestroyed(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of towers destroyed in a game'
        self.format = 'An integer number'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
totalgold,"

class totalgold(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total gold in a game'
        self.format = 'Gold should be an integer number'
        self.examples: list = [17210, 14712, 16113, 15157, 16400]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) or isinstance(val, float):
            return int(val)
        else:
            return ValueError('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            if casted_val >= 0:
                return True
        return False"
avglevel,"

class avglevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'The average level in a game'
        self.format = 'Level should be a float number'
        self.examples: list = [6.6, 6.6, 6.4, 7.0, 7.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Cannot cast {val} to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totalexperience,"

class totalexperience(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total experience in a game'
        self.format = 'Experience should be an integer number'
        self.examples: list = [17039, 16265, 16221, 17954, 18543]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input, expected an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
totalminionskilled,"

class totalminionskilled(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total minions killed in a game'
        self.format = 'An integer number'
        self.examples: list = [195, 174, 186, 201, 210]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
totaljungleminionskilled,"

class totaljungleminionskilled(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total jungle minions killed in a game'
        self.format = 'Jungle minions killed should be an integer number'
        self.examples: list = [36, 43, 46, 55, 57]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Expecting an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
golddiff,"

class golddiff(GeneralSemanticType):

    def __init__(self):
        self.description = 'The gold difference in a game'
        self.format = 'Gold difference should be an integer number'
        self.examples: list = [643, -2908, -1172, -1321, -1004]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Error: Invalid value. Expected an integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
experiencediff,"

class experiencediff(GeneralSemanticType):

    def __init__(self):
        self.description = 'The experience difference in a game'
        self.format = 'Experience difference should be an integer number'
        self.examples: list = [-8, -1173, -1033, -7, 230]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected an integer value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
cspermin,"

class cspermin(GeneralSemanticType):

    def __init__(self):
        self.description = 'The minions killed per minute in a game'
        self.format = 'Minions killed per minute should be a float number'
        self.examples: list = [19.5, 17.4, 18.6, 20.1, 21.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
goldpermin,"

class goldpermin(GeneralSemanticType):

    def __init__(self):
        self.description = 'The gold per minute in a game'
        self.format = 'float'
        self.examples = [1721.0, 1471.2, 1611.3, 1515.7, 1640.0]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
jobidentifier,"

class jobidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a job'
        self.format = 'Job ID must be a unique positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
telecommuting,"

class telecommuting(GeneralSemanticType):

    def __init__(self):
        self.description = 'Telecommuting status'
        self.format = 'Either 1 (Yes) or 0 (No)'
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and val in [0, 1]:
            return int(val)
        elif isinstance(val, str) and val.isdigit() and (int(val) in [0, 1]):
            return int(val)
        else:
            raise ValueError('Invalid value. Expecting 0 or 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
hascompanylogo,"

class hascompanylogo(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a company has a logo'
        self.format = 'Binary value (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
hasquestions,"

class hasquestions(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if there are any questions'
        self.format = 'Boolean represented as 0 and 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid value for casting')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
fraudulent,"

class fraudulent(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary representation of fraudulent or not'
        self.format = 'A binary number (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
continentname,"

class continentname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Continent'
        self.format = 'The name should be title-cased'
        self.examples = ['Africa', 'Asia', 'Europe', 'North America', 'South America']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).title()
        if val in self.examples:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        continents = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America']
        if casted_val in continents:
            return True
        else:
            return False"
populationgrowthrate,"

class populationgrowthrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Population Growth Rate of a country'
        self.format = 'Population Growth Rate should be a floating point number'
        self.examples: list = [1.0257, 0.9957, 1.0164, 0.9831, 1.01]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
worldpopulationpercent,"

class worldpopulationpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of world population in a country'
        self.format = 'World Population Percentage should be a floating point number'
        self.examples: list[float] = [0.52, 0.04, 0.56, 0.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, str) and self.is_number(val):
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False

    @staticmethod
    def is_number(s):
        try:
            float(s)
            return True
        except ValueError:
            return False"
datetimetype,"

class datetimetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.format = 'Date and Time as strings in the form DD/MM/YYYY and HH:MM:SS respectively'
        self.examples = ['03/11/2011', '12/26/2004', '02/27/2010', '02/06/2013', '11/15/2006', '02:56:58', '14:09:03', '16:25:34', '15:06:45', '02:53:15']

    def super_cast(self, val):
        try:
            if isinstance(val, datetime.date):
                return val.strftime('%d/%m/%Y')
            elif isinstance(val, datetime.time):
                return val.strftime('%H:%M:%S')
            else:
                raise ValueError('Invalid Date/Time format')
        except ValueError:
            raise ValueError('Invalid Date/Time format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        date_format = re.compile('\\d{2}/\\d{2}/\\d{4}')
        time_format = re.compile('\\d{2}:\\d{2}:\\d{2}')
        if date_format.match(casted_val) or time_format.match(casted_val):
            return True
        else:
            return False"
earthquaketype,"

class earthquaketype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of earthquake'
        self.format = 'Earthquake types are stored as strings'
        self.examples = ['Earthquake', 'Nuclear Explosion', 'Explosion', 'Rock Burst']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
depth,"

class depth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Depth of earthquake'
        self.format = 'Depth should be a floating point number'
        self.examples = [131.6, 80.0, 20.0, 15.0, 15.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -1.1 <= casted_val <= 700.0:
            return True
        else:
            return False"
magnitude,"

class magnitude(GeneralSemanticType):

    def __init__(self):
        self.description = 'Magnitude of earthquake'
        self.format = 'Magnitude should be a floating point number'
        self.examples = [6.0, 5.8, 6.2, 5.8, 5.8]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 5.5 <= casted_val <= 9.1:
            return True
        else:
            return False"
reviewed,"

class reviewed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review status'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return val == 'Reviewed'

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, bool)"
measurementindex,"

class measurementindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of a measurement'
        self.format = 'Positive Integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Unable to cast value to positive integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
voltagemeasurement,"

class voltagemeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Voltage measurement'
        self.format = 'Voltage should be a float'
        self.examples = [0.0, -0.3, 0.2, -0.3, -0.4]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
temperaturemeasurement,"

class temperaturemeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Temperature measurement'
        self.format = 'Temperature should be a float in Celsius'
        self.examples = [18.8, 19.8, 19.8, 19.8, 19.8]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Can not convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
speedmeasurement,"

class speedmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Motor speed measurement'
        self.format = 'Speed should be a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Unable to cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise Exception('Value is not a float')
        if casted_val < 0 or math.isinf(casted_val):
            raise Exception('Value is out of valid range [0, inf)')
        return True"
currentmeasurement,"

class currentmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Current measurement'
        self.format = 'Current should be a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid value. Expected a numerical value.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
torquemeasurement,"

class torquemeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Torque measurement'
        self.format = 'Torque should be a float'
        self.examples = [0.1, 0.2, 0.1, 0.2, 0.2]

    def super_cast(self, val):
        try:
            return float(val)
        except (TypeError, ValueError):
            raise Exception('Invalid value. Cannot convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (not math.isnan(casted_val)):
            return True
        else:
            return False"
profileidentifier,"

class profileidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Profile ID'
        self.format = 'Profile ID should be a positive integer'
        self.examples = [17, 17, 17, 17, 17]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
brandname,"

class brandname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the brand'
        self.format = 'Brand name should be capitalized'
        self.examples = ['Starbucks', 'Teavana', 'Evolution Fresh', 'Coffee House Holdings']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val.isalpha():
            return False
        else:
            return True"
storename,"

class storename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the store'
        self.format = 'Store name should be capitalized'
        self.examples = ['Starbucks', 'Spa', 'مركز أوتاد', 'Magnolia', 'Mabohai Shopping Mall']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
ownershiptype,"

class ownershiptype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ownership Type'
        self.format = 'Ownership type should be capitalized'
        self.examples = ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']

    def super_cast(self, val):
        if val in ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']:
            return str(val)
        else:
            raise ValueError('Invalid ownership type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Company Owned', 'Licensed', 'Joint Venture', 'Franchise']:
            return True
        else:
            return False"
stateprovince,"

class stateprovince(GeneralSemanticType):

    def __init__(self):
        self.description = 'State or Province'
        self.format = 'State or Province name should be capitalized'
        self.examples = ['CA', 'TX', 'ENG', 'WA', '11']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
postcode,"

class postcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Postal code'
        self.format = 'Postal code as a capitalized string'
        self.examples = ['0', '310000', '518000', '610000', '215000']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) <= 6:
            return True
        else:
            return False"
phonenumber,"

class phonenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Phone number'
        self.format = 'Phone number should not contain any special characters'
        self.examples = ['7736866180', '4167763100', '0', '7043594512', '01454260631']

    def super_cast(self, val):
        return re.sub('\\D', '', str(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]*$', casted_val):
            return True
        else:
            return False"
timezone,"

class timezone(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timezone'
        self.format = 'Timezone should follow the format: GMT±HH:MM Area/City'
        self.examples = ['GMT-05:00 America/New_York', 'GMT-08:00 America/Los_Angeles', 'GMT-06:00 America/Chicago', 'GMT+08:00 Asia/Beijing', 'GMT+09:00 Asia/Tokyo']

    def super_cast(self, val):
        match_obj = re.match('GMT[+|-][0-9]{2}:[0-9]{2} .+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid timezone')

    def validate(self, val):
        try:
            casted_val = self.super_cast(val)
            return True
        except ValueError:
            return False"
foodcategory,"

class foodcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of Food Items'
        self.format = 'Each word in the category should be capitalized'
        self.examples = ['Alcoholic Beverages', 'Animal Fats', 'Animal Products', 'Aquatic Products, Other', 'Cereals - Excluding Beer']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return all((word[0].isupper() for word in casted_val.split()))"
fooditem,"

class fooditem(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of food item'
        self.format = 'Each word should start with a capital letter'
        self.examples = ['Egg McMuffin', 'Big Breakfast with Hotcakes (Large Biscuit)', 'Sausage Biscuit with Egg Whites (Large Biscuit)', 'Sausage McMuffin', 'Sausage McMuffin with Egg']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
servingsize,"

class servingsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serving size of food item'
        self.format = 'XX.X oz (XXX g)'
        self.examples = ['4.8 oz (136 g)', '4.8 oz (135 g)', '3.9 oz (111 g)', '5.7 oz (161 g)', '5.7 oz (161 g)']

    def super_cast(self, val):
        match_obj = re.match('(\\d+(\\.\\d+)?) oz \\((\\d+) g\\)', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid serving size')

    def validate(self, val):
        try:
            casted_val = self.super_cast(val)
            (oz, g) = re.search('(\\d+(\\.\\d+)?) oz \\((\\d+) g\\)', casted_val).groups()
            oz = float(oz)
            g = int(g)
            if oz >= 0 and g >= 0:
                return True
            else:
                return False
        except:
            return False"
nutritionvalue,"

class nutritionvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nutrition value of food item'
        self.format = 'Nutrition value should be float'
        self.examples: list[float] = [300, 250, 370, 450, 400]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Could not convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
scorestandarderror,"

class scorestandarderror(GeneralSemanticType):

    def __init__(self):
        self.description = 'Standard error of the happiness score'
        self.format = 'Standard error should be a positive floating point number'
        self.examples = [0.03411, 0.04884, 0.03328, 0.0388, 0.03553]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 5)
            else:
                raise ValueError('Invalid standard error')
        except ValueError:
            raise ValueError('Invalid standard error')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
economygdppercapita,"

class economygdppercapita(GeneralSemanticType):

    def __init__(self):
        self.description = 'GDP per capita'
        self.format = 'Float value with five decimal places'
        self.examples = [1.39651, 1.30232, 1.32548, 1.459, 1.32629]

    def super_cast(self, val):
        return round(float(val), 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not isinstance(casted_val, float):
            return False
        return True"
healthlifeexpectancy,"

class healthlifeexpectancy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health life expectancy score'
        self.format = 'Float value with five decimal places'
        self.examples = [0.797, 0.793, 0.834, 0.858, 0.809]

    def super_cast(self, val):
        return round(float(val), 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 1:
            return True
        else:
            return False"
health,"

class health(GeneralSemanticType):

    def __init__(self):
        self.description = 'A health score'
        self.format = 'Floating point number'
        self.examples = [0.796666502952576, 0.792565524578094, 0.833552122116089, 0.858131289482117, 0.80915766954422]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 5:
            return val / 5.0
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
freedomtomakelifechoices,"

class freedomtomakelifechoices(GeneralSemanticType):

    def __init__(self):
        self.description = 'The extent to which Freedom contributed to the calculation of the Happiness Score'
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.718, 0.679, 0.6, 0.496, 0.531]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
perceptionsofcorruption,"

class perceptionsofcorruption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Perceptions of corruption score'
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.393, 0.34, 0.408, 0.138, 0.357]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
regionalindicator,"

class regionalindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Region or Regional Indicator of a country'
        self.format = 'Region names should be capitalized'
        self.examples = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            raise Exception('Invalid input. Input should be a string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        regions = ['Sub-Saharan Africa', 'Western Europe', 'Latin America and Caribbean', 'Middle East and North Africa', 'Central and Eastern Europe']
        if casted_val in regions:
            return True
        else:
            return False"
ladderscore,"

class ladderscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ladder Score/Happiness Score of a country'
        self.format = 'Ladder Score/Happiness Score should be a floating point number between 0 and 10'
        self.examples = [7.842, 7.62, 7.571, 7.554, 7.464]

    def super_cast(self, val):
        try:
            score = float(val)
            if 0 <= score <= 10:
                return score
            else:
                raise ValueError('Score out of range')
        except ValueError as e:
            raise TypeError('Invalid type for score') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 10"
standarderror,"

class standarderror(GeneralSemanticType):

    def __init__(self):
        self.description = 'Standard Error'
        self.format = 'Standard errors should be non-negative floating point numbers'
        self.examples = [0.032, 0.035, 0.036, 0.059, 0.027]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Invalid standard error')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
dystopia,"

class dystopia(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dystopia Index of a country'
        self.format = 'Dystopia Index should be a positive floating point number'
        self.examples = [3.253, 2.868, 2.839, 2.967, 2.798]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise Exception('Invalid dystopia index')
            return val
        except ValueError:
            raise Exception('Invalid value. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
happinessindex,"

class happinessindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Happiness index of a country'
        self.format = 'Happiness index should be a floating point number with three decimal places'
        self.examples = [7.769, 7.6, 7.554, 7.494, 7.488]

    def super_cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        num = float(str(val).replace(',', '.'))
        return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
explainedby,"

class explainedby(GeneralSemanticType):

    def __init__(self):
        self.description = 'Explained by value for various features'
        self.format = 'A floating point number with three decimal places'
        self.examples = [1.815, 1.274, 0.785, 0.848, 1.852]

    def super_cast(self, val):
        num = float(val)
        return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 3:
            return True
        else:
            return False"
address,"

class address(GeneralSemanticType):

    def __init__(self):
        self.description = 'A physical location or place'
        self.format = 'Address should be capitalized properly'
        self.examples = ['1645 E Roosevelt St-Central Phoenix Stn', '2956-A Treat Boulevard', '5551 Bethel Island Rd', '1237 S. Beverly, Tucson', 'Unit 759 El Portal Shopping Center, San Pablo']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        elif isinstance(val, int):
            return str(val)
        elif val in ['U', 'R']:
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
datelocal,"

class datelocal(GeneralSemanticType):

    def __init__(self):
        self.description = 'The local date'
        self.format = 'Date in the format yyyy-mm-dd'
        self.examples = ['2000-08-15', '2000-08-07', '2000-08-09', '2000-08-16', '2000-06-14']

    def super_cast(self, val):
        if isinstance(val, datetime.date):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').date().strftime('%Y-%m-%d')
            except ValueError:
                return None
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
pollutantconcentration,"

class pollutantconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of a pollutant in air'
        self.format = 'Concentration should be a floating point number'
        self.examples = [0.92, 0.97, 17.4, 1.7, 22.1]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 6)
            if float_val < 0:
                return float('nan')
            else:
                return float_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('nan'):
            return True
        else:
            return False"
stateyearcombo,"

class stateyearcombo(GeneralSemanticType):

    def __init__(self):
        self.description = 'Combination of the year and the US state'
        self.format = 'The year should be a 4-digit number and the state should be the full name of the state, separated by an underscore'
        self.examples = ['1992_ALABAMA', '1992_ALASKA', '1992_ARIZONA', '1992_ARKANSAS', '1992_CALIFORNIA']

    def super_cast(self, val):
        match_obj = re.match('\\d{4}_[A-Z]+', val)
        if match_obj:
            return match_obj.group()
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if type(casted_val) == str:
            (year, state) = casted_val.split('_')
            if len(year) == 4 and year.isdigit() and pycountry.subdivisions.lookup(state):
                return True
        return False"
studentsenrolled,"

class studentsenrolled(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of students enrolled'
        self.format = 'Number of students should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
primarykey,"

class primarykey(GeneralSemanticType):

    def __init__(self):
        self.description = 'Primary key combination of year and state'
        self.format = 'The format should be YEAR_STATE'
        self.examples = ['1992_ALABAMA', '1992_MISSOURI', '1992_ARKANSAS', '1992_CALIFORNIA', '1992_COLORADO']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = '^\\d{4}_[A-Z]+$'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
enrollment,"

class enrollment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments'
        self.format = 'Enrollment should be a float'
        self.examples = [50000.0, 100000.0, 150000.0, 200000.0, 250000.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        elif casted_val < 43866.0:
            return False
        else:
            return True"
revenue,"

class revenue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Revenue in USD'
        self.format = 'Revenue should be a float'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
expenditure,"

class expenditure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Expenditure in USD'
        self.format = 'Expenditure should be a float'
        self.examples = [500000.0, 1000000.0, 1500000.0, 2000000.0, 2500000.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
raceenrollment,"

class raceenrollment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of enrollments by race'
        self.format = 'Enrollment by race should be a float'
        self.examples = [500.0, 1000.0, 1500.0, 2000.0, 2500.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1.0 or pd.isnull(casted_val):
            return False
        else:
            return True"
foodcomponent,"

class foodcomponent(GeneralSemanticType):

    def __init__(self):
        self.description = ""Percentage food components in a country's diet""
        self.format = 'Food components should be formatted as a floating point number (in percent units) with four decimal places'
        self.examples = [0.0, 0.0327, 0.1445, 1.4155, 1.5263]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num <= 100:
                return round(num, 4)
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= 100:
                return True
            else:
                return False
        else:
            return False"
undernourishmentstatus,"

class undernourishmentstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""Undernourishment status in a country's population""
        self.format = ""Undernourishment status should be formatted as a floating point number (in percent units) with one decimal place. The '<2.5' value should be interpreted as 2.5""
        self.examples = [29.8, 6.2, 3.9, 25, np.nan]

    def super_cast(self, val):
        if isinstance(val, str) and val == '<2.5':
            return 2.5
        else:
            try:
                num = float(val)
                if num >= 0 and num <= 100:
                    return round(num, 1)
                else:
                    raise Exception('Invalid percentage')
            except Exception as e:
                raise Exception(f'Invalid value: {val}. Error: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (casted_val >= 0 and casted_val <= 100):
            return True
        else:
            return False"
covid19casestatus,"

class covid19casestatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""COVID-19 case status (confirmed, deaths, recovered) in a country's population""
        self.format = 'COVID-19 case status should be formatted as a floating point number with 13 decimal places'
        self.examples = [2.022, 0.039, 1.452, np.nan, np.nan]

    def super_cast(self, val):
        try:
            return round(float(val), 13)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 or np.isnan(casted_val):
            return True
        else:
            return False"
obesity,"

class obesity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Obesity Percentage'
        self.format = 'A floating point number between 0 and 100'
        self.examples = [4.5, 22.3, 26.6, 6.8, 19.1]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace('%', '')
        try:
            return round(float(val), 1)
        except ValueError:
            raise ValueError('Invalid input for obesity percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
undernourished,"

class undernourished(GeneralSemanticType):

    def __init__(self):
        self.description = 'Undernourished Percentage'
        self.format = 'Undernourished Percentage is formatted as a float (0-100) or nan'
        self.examples = [29.8, 6.2, 3.9, 25, np.nan]

    def super_cast(self, val):
        if isinstance(val, str) and val == '<2.5':
            return 2.5
        elif isinstance(val, str):
            return float(val)
        elif math.isnan(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == np.nan:
            return True
        elif 0 <= casted_val <= 100:
            return True
        else:
            return False"
undernourishedrate,"

class undernourishedrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of people who are undernourished'
        self.format = 'Undernourished rate should be formatted as a floating point number'
        self.examples: list = [2.5, 7.1, 2.7, 6.2, 16.5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, str) and val.startswith('<'):
            val = val[1:]
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
covid19deaths,"

class covid19deaths(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of confirmed COVID-19 deaths per 100,000 people'
        self.format = 'COVID-19 deaths should be formatted as a floating point number'
        self.examples: list = [0.0061857788738183, 0.0509513742071882, 0.0065581531663548, 0.0014605497816862, 0.0071428571428571]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
covid19recoveries,"

class covid19recoveries(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of confirmed COVID-19 recoveries per 100,000 people'
        self.format = 'COVID-19 recoveries should be formatted as a floating point number'
        self.examples: list = [0.12337392108508, 1.79263565891473, 0.167572198300156, 0.0568076994034807, 0.190816326530612]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (math.isinf(casted_val) or not math.isnan(casted_val)):
            return True
        else:
            return False"
foodsupply,"

class foodsupply(GeneralSemanticType):

    def __init__(self):
        self.description = 'Food Supply'
        self.format = 'Food Supply should be a floating point number'
        self.examples = [5.5278, 16.475, 8.0616, 1.146, 7.4349]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError(f'Invalid value: {val}')
        except ValueError as e:
            raise ValueError(f'Invalid value: {val}. {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= float('inf')"
obesitypercent,"

class obesitypercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Obesity Percentage'
        self.format = 'Obesity Percentage should be a floating point number'
        self.examples = [4.5, 22.3, 26.6, 6.8, 19.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False
            raise Exception(f'{val} is not a valid Obesity Percentage')"
undernourishedpercent,"

class undernourishedpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Undernourished Percentage'
        self.format = 'Floating point number'
        self.examples = [29.8, 6.2, 3.9, 25.0, 2.5]

    def super_cast(self, val):
        if isinstance(val, str) and val == '<2.5':
            return 2.5
        elif isinstance(val, str):
            try:
                return float(val)
            except ValueError:
                return float('nan')
        elif np.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
abilityidentifier,"

class abilityidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of an ability in the game Dota 2'
        self.format = 'Ability ID should be an integer number'
        self.examples = [0, 5001, 5002, 5003, 5004]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
abilityname,"

class abilityname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an ability in the game Dota 2'
        self.format = 'Ability name should be in lower case with words separated by underscores'
        self.examples = ['ability_base', 'default_attack', 'attribute_bonus', 'antimage_mana_break', 'antimage_blink']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[a-z0-9_]*$', casted_val):
            return True
        else:
            return False"
ability,"

class ability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an ability'
        self.format = 'Ability IDs are integers between 5002 and 5654'
        self.examples: list = [5023, 5136, 5361, 5448, 5450]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 5002 and casted_val <= 5654:
            return True
        else:
            return False"
level,"

class level(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Level of a player in a match'
        self.format = 'Levels are integers between 1 and 25'
        self.examples = [1, 5, 10, 15, 25]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Cannot cast to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 25:
            return True
        else:
            return False"
chatmessage,"

class chatmessage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Chat messages in DOTA-2'
        self.format = 'Chat messages should be stored as a string'
        self.examples = ['gg', 'lol', '?', 'ggwp', 'haha']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
slot,"

class slot(GeneralSemanticType):

    def __init__(self):
        self.description = 'Slot number in DOTA-2'
        self.format = 'Slot number should be an integer from 0 to 9'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(10):
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError(f'The input value {val} cannot be converted to integer or is out of valid range [0,9]')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(10):
            return True
        else:
            return False"
chatime,"

class chatime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Chat time in DOTA-2'
        self.format = 'Chat time should be an integer'
        self.examples = [-8, 5, 6, 9, 934]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception('Unable to cast value: {} to integer'.format(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -771 and casted_val <= 6054:
            return True
        else:
            return False"
playername,"

class playername(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a player'
        self.format: str = 'Only the first letter of the first and last name should be capitalized'
        self.examples: list = ['Cristiano Ronaldo', 'L. Messi', 'Neymar Jr', 'De Gea', 'K. De Bruyne']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0 and casted_val.istitle():
            return True
        else:
            return False"
clusteridentifier,"

class clusteridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cluster ID of a server'
        self.format = 'Cluster ID should be formatted as an integer'
        self.examples = [111, 112, 113, 121, 122]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
serverregion,"

class serverregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Region of a server'
        self.format = 'Region should be capitalized'
        self.examples = ['STOCKHOLM', 'EUROPE', 'SINGAPORE', 'US EAST', 'US WEST']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
heroname,"

class heroname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Heroname is the code name of a hero character in the game Dota 2'
        self.format = ""Heroname is a string starting with 'npc_dota_hero_'""
        self.examples = ['npc_dota_hero_antimage', 'npc_dota_hero_axe', 'npc_dota_hero_bane', 'npc_dota_hero_bloodseeker', 'npc_dota_hero_crystal_maiden']

    def super_cast(self, val):
        val = str(val).lower()
        if val.startswith('npc_dota_hero_'):
            return val
        else:
            return 'Invalid Heroname'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.startswith('npc_dota_hero_'):
            return True
        else:
            return False"
localizedheroname,"

class localizedheroname(GeneralSemanticType):

    def __init__(self):
        self.description = 'LocalizedHeroname is the human-readable name of a hero character in the game Dota 2'
        self.format = 'LocalizedHeroname should be a string with words separated by spaces and the first letter of each word capitalized'
        self.examples = ['Anti-Mage', 'Axe', 'Bane', 'Bloodseeker', 'Crystal Maiden']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split(' ')
        for word in words:
            if not word.istitle():
                return False
        return True"
itemname,"

class itemname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an item'
        self.format = 'Item name should be lowercase, with underscores replacing spaces'
        self.examples = ['blink', 'blades_of_attack', 'broadsword', 'chainmail', 'claymore']

    def super_cast(self, val):
        if '_' in val:
            return val
        else:
            return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.replace('_', '').isalpha():
            return True
        else:
            return False"
starttime,"

class starttime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timestamp of when the Dota 2 match started'
        self.format = 'Start time is a UNIX timestamp'
        self.examples = [1446750112, 1446753078, 1446764586, 1446765723, 1446796385]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise TypeError('Invalid input type for UNIX timestamp')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
duration,"

class duration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration in seconds'
        self.format = 'Should be a positive floating point number representing seconds'
        self.examples = [22.534, 22.745, 22.105, 23.477, 22.684]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(val)
        return round(val, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        return True"
towerstatus,"

class towerstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tower status in a Dota 2 match'
        self.format = 'An integer between 0 and 2047'
        self.examples = [1982, 0, 256, 4, 2047]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0 or casted_val > 2047:
                raise ValueError()
            return casted_val
        except ValueError:
            return 'Invalid input. Expected an integer between 0 and 2047.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 2047:
            return True
        else:
            return False"
barracksstatus,"

class barracksstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Barracks status in a Dota 2 match'
        self.format = 'Barracks status is an integer between 0 and 63'
        self.examples = [63, 0, 48, 3, 63]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception('Invalid value for Barracks status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 63:
            return True
        else:
            return False"
firstbloodtime,"

class firstbloodtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time of first blood in a Dota 2 match'
        self.format = 'First blood time must be a positive integer'
        self.examples = [1, 221, 190, 40, 58]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Value must be positive')
            return casted_val
        except ValueError:
            raise ValueError('Value must be an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (isinstance(casted_val, int) and casted_val >= 0):
            raise ValueError('Invalid value')
        return True"
gamemode,"

class gamemode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Game mode in a Dota 2 match'
        self.format = 'Game mode is an integer between 0 and 22'
        self.examples = [22, 22, 22, 22, 22]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 22"
radiantwin,"

class radiantwin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Radiant win status'
        self.format = 'In lower-case and as a string'
        self.examples = ['true', 'false', 'true', 'false', 'true']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['true', 'false']:
            return True
        else:
            return False"
cluster,"

class cluster(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cluster number in a data system or a Dota 2 match'
        self.format = 'Positive integer'
        self.examples = [155, 154, 132, 191, 156]

    def super_cast(self, val):
        int_val = int(val)
        if int_val < 0:
            raise ValueError('Value should be a positive integer.')
        return int_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
matchindex,"

class matchindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of the match in the dataset'
        self.format = 'Match index should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Value should be non-negative')
            else:
                return casted_val
        except (ValueError, TypeError):
            raise ValueError('Invalid input, expected a numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
matchstarttime,"

class matchstarttime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Start time of the match represented in UNIX timestamp'
        self.format = 'Start time should be a non-negative integer'
        self.examples = [1437014585, 1437014585, 1437019968, 1437019968, 1437052551]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
parserversion,"

class parserversion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Version of the parser used'
        self.format = 'Parser version should be represented as an integer'
        self.examples = [12, 12, 12, 12, 12]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input: expected an integer value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
team,"

class team(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the team or its existence.'
        self.format = 'In capital case or as a boolean 0 or 1'
        self.examples = ['Denver', 'Memphis', 'New Orleans', 'Phoenix', 'LA Clippers', 0, 1]

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        elif isinstance(val, int):
            return int(val)
        else:
            raise Exception('Invalid type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        elif isinstance(casted_val, int) and casted_val in [0, 1]:
            return True
        else:
            return False"
objectiveaction,"

class objectiveaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of objective action in Dota 2 game'
        self.format = 'Objective actions are stored as strings'
        self.examples = ['CHAT_MESSAGE_FIRSTBLOOD', 'CHAT_MESSAGE_TOWER_KILL', 'CHAT_MESSAGE_ROSHAN_KILL', 'CHAT_MESSAGE_AEGIS', 'CHAT_MESSAGE_BARRACKS_KILL']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
patchidentifier,"

class patchidentifier(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The id of a patch, where lower values correspond to older patches'
        self.format = 'Patch id should be an integer value'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
patchdate,"

class patchdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when a patch was released'
        self.format = 'Dates should be stored as strings in the ISO 8601 format'
        self.examples = ['2010-12-24T00:00:00Z', '2011-01-21T00:00:00Z', '2011-04-27T00:00:00Z', '2011-12-24T00:00:00Z', '2012-03-10T00:00:00Z']

    def super_cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%dT%H:%M:%SZ')
            return val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
patchname,"

class patchname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a patch, represented as a decimal number'
        self.format = 'Patch name should be a decimal number with at most two decimal places'
        self.examples = [6.7, 6.71, 6.72, 6.73, 6.74]

    def super_cast(self, val):
        try:
            num = float(val)
            if math.floor(num) != num and len(str(num).split('.')[1]) > 2:
                raise Exception('Invalid patch name')
            return num
        except Exception as e:
            raise Exception('Invalid input for super_cast: {}. Error: {}'.format(val, e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
dotaaccountidentifier,"

class dotaaccountidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = ""Unique ID for a DOTA player's account""
        self.format = 'Account ID should be an integer'
        self.examples = [236579, -343, -1217, -1227, -1284]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, int):
            return True
        else:
            return False"
totalwins,"

class totalwins(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of wins by a player'
        self.format = 'Total Wins should be a non-negative integer'
        self.examples = [14, 1, 1, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isnumeric():
                return int(val)
            else:
                raise ValueError('The input value is not a valid number!')
        elif isinstance(val, float):
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise ValueError('The input value is not a valid number!')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
totalmatches,"

class totalmatches(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of matches played by a player'
        self.format = 'Total Matches should be a positive integer'
        self.examples = [24, 1, 1, 1, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1:
                return casted_val
            else:
                raise ValueError('Value cannot be less than 1')
        except ValueError:
            raise ValueError('Value must be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
trueskillmu,"

class trueskillmu(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mean skill level of a player as calculated by the TrueSkill algorithm'
        self.format = 'TrueSkill Mu should be a floating point number'
        self.examples = [27.86803544887669, 26.54416264494717, 26.521102844769825, 27.248024958648585, 22.931015779479623]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
trueskillsigma,"

class trueskillsigma(GeneralSemanticType):

    def __init__(self):
        self.description = ""The standard deviation of a player's skill level as calculated by the TrueSkill algorithm""
        self.format = 'TrueSkill Sigma should be a floating point number'
        self.examples = [5.212360755154124, 8.06547547571326, 8.114989027066821, 8.092216692198111, 8.092224309040315]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Error, could not convert to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
denies,"

class denies(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of denies a player has'
        self.format = 'Denies is represented as a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
unnamed0,"

class unnamed0(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unnamed column, likely an index or ID'
        self.format = 'Values should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 99999:
            return True
        else:
            return False"
buybacks,"

class buybacks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a company has bought back its shares'
        self.format = 'A boolean'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
damage,"

class damage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount of damage dealt by a player in a game match'
        self.format = 'Damage should be represented as integers'
        self.examples = [105, 566, 0, 0, 444]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
golddelta,"

class golddelta(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gold difference for a player in a game match'
        self.format = 'Gold delta should be represented as integers'
        self.examples: list = [173, 0, 0, 123, 336]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
xpend,"

class xpend(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experience points a player spent in a game match'
        self.format = 'Experience points spent should be represented as integers'
        self.examples: list = [536, 1583, 391, 1775, 1267]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            try:
                return int(val)
            except ValueError:
                return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is np.nan:
            return False
        elif casted_val < 0 or casted_val > float('inf'):
            return False
        else:
            return True"
xpstart,"

class xpstart(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Experience points a player started with in a game match'
        self.format = 'Experience points at start should be represented as integers'
        self.examples: list = [314, 1418, 391, 1419, 983]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Value cannot be casted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        return True"
matchoutcome,"

class matchoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'A match outcome'
        self.format = 'In numerical format, either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise ValueError()
        except ValueError:
            print(f'Error: Invalid value {val} provided for match outcome. Expected 0 or 1.')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
citystate,"

class citystate(GeneralSemanticType):

    def __init__(self):
        self.description = 'City and State'
        self.format = 'The city and state should be capitalized'
        self.examples = ['Seattle, Wash.', 'Charlotte, N.C.', 'Huntington Beach, Calif.', 'Wilmington, N.C.', 'Irvine, Calif.']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^(.*),\\s*(.*)$', casted_val):
            return True
        else:
            return False"
salesamount,"

class salesamount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The sales amount in USD'
        self.format: str = 'Sales amount should be formatted as a floating point number (in USD units)'
        self.examples: list = [24, 44, 21, 25, 49]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val >= 0 and casted_val != float('inf'):
            return True
        else:
            return False"
unitcount,"

class unitcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of units'
        self.format = 'Units should be a non-negative integer'
        self.examples: list = [26, 105, 21, 46, 50]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Value must be non-negative.')
            return num
        except ValueError as ve:
            print(f'Error in casting the value: {ve}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
franchising,"

class franchising(GeneralSemanticType):

    def __init__(self):
        self.description = 'Franchising status'
        self.format = 'Boolean'
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'yes':
                return True
            elif val.lower() == 'no':
                return False
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
averagecheck,"

class averagecheck(GeneralSemanticType):

    def __init__(self):
        self.description = 'The average check in USD of a restaurant'
        self.format = 'Average check should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples: list = [40.0, 43.0, 33.0, 90.0, 62.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception(f'Failed to cast value {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        except TypeError:
            raise Exception(f'Validation failed for value {casted_val}')"
mealsserved,"

class mealsserved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of meals served'
        self.format = 'Positive floating point number, rounded to 2 decimal places'
        self.examples = [469803.0, 820819.0, 892830.0, 198500.0, 403000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
segmentcategory,"

class segmentcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Segment and category of the restaurant'
        self.format = 'Segment and category should be a string with all words capitalized'
        self.examples = ['Varied Menu', 'Mexican', 'Quick Service & Burger', 'Family Style', 'Burger']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
defaultstatus,"

class defaultstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Default status'
        self.format = 'lower-cased string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
housingloan,"

class housingloan(GeneralSemanticType):

    def __init__(self):
        self.description = 'Housing Loan status'
        self.format = 'boolean as string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower() if val in ['yes', 'no'] else 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
personalloan,"

class personalloan(GeneralSemanticType):

    def __init__(self):
        self.description = 'Personal Loan Status'
        self.format = 'in lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
contactmethod,"

class contactmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Contact method of a person'
        self.format = 'Contact method should be in lower case'
        self.examples = ['cellular', 'unknown', 'telephone']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['cellular', 'unknown', 'telephone']:
            return True
        else:
            return False"
dayofmonth,"

class dayofmonth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Day of the month'
        self.format = 'Day of month should be a positive integer between 1 and 31'
        self.examples = [1, 10, 20, 30, 31]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 31:
                return casted_val
            else:
                raise ValueError(f'Value {val} is not a valid day of the month.')
        except ValueError:
            raise ValueError(f'Value {val} cannot be casted to int.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 31:
            return True
        else:
            return False"
calltime,"

class calltime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of the last contact'
        self.format = 'Duration represented as an integer'
        self.examples = [2, 138, 255, 496, 3881]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
campaigncontacts,"

class campaigncontacts(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of contacts performed during this campaign and for this client'
        self.format = 'Number of contacts should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
pdays,"

class pdays(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days that passed by after the client was last contacted from a previous campaign'
        self.format = 'Number of days should be represented as an integer'
        self.examples = [-1, 0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""The value can't be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= -1:
            return True
        else:
            return False"
previouscontacts,"

class previouscontacts(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of contacts performed before this campaign and for this client'
        self.format = 'Number of contacts should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
poutcome,"

class poutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Outcome of the previous marketing campaign'
        self.format = 'Outcome should be in lower case'
        self.examples = ['unknown', 'failure', 'other', 'success']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['unknown', 'failure', 'other', 'success']:
            return True
        else:
            return False"
deposit,"

class deposit(GeneralSemanticType):

    def __init__(self):
        self.description = 'A deposit'
        self.format = 'In lower-case and as a string'

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
capital,"

class capital(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a city is a capital'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
cases,"

class cases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of cases'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [3554.0, 207.0, 173.0, 168.0, 143.0]

    def super_cast(self, val):
        try:
            return_val = float(val)
            if return_val < 0:
                raise ValueError('Cannot convert negative values.')
            elif math.isnan(return_val):
                return float('nan')
            else:
                return return_val
        except ValueError as ve:
            print(ve)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif math.isnan(casted_val):
            return True
        else:
            return 0 <= casted_val <= float('inf')"
weeknumber,"

class weeknumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Week Number'
        self.format = 'Week numbers are integers between 1 and 53'
        self.examples = [9, 10, 11, 12, 13]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 53:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 53:
            return True
        else:
            return False"
recoveredcount,"

class recoveredcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Recovered Count'
        self.format = 'Recovered counts are non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if math.isnan(num):
                return float('nan')
            if num < 0:
                raise Exception('Invalid recovered count')
            return num
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or casted_val < 0:
            return False
        return True"
monitoringcount,"

class monitoringcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Monitoring Count'
        self.format = 'Non-negative floating point numbers'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        if val is None or str(val).lower() == 'nan':
            return float('nan')
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid monitoring count')
            return num
        except ValueError:
            raise ValueError('Could not cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or casted_val < 0:
            return False
        else:
            return True"
brazilstate,"

class brazilstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'States of Brazil'
        self.format = 'Name of the state should be in proper case'
        self.examples = ['Minas Gerais', 'São Paulo', 'Rio Grande do Sul', 'Paraná', 'Ceará']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
casenumber,"

class casenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of cases for COVID19'
        self.format = 'Case number should be non-negative integers'
        self.examples = [1, 0, 2, 3, 4]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception('Invalid case number')
        else:
            return True"
bikesharecount,"

class bikesharecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Bike Share Count'
        self.format = 'Bike share count should be an integer'
        self.examples = [182, 138, 134, 72, 47]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        elif isinstance(val, int):
            return val
        else:
            try:
                return int(val)
            except ValueError:
                return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
weathercode,"

class weathercode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weather Code'
        self.format = 'Weather codes should be integers'
        self.examples = [3, 1, 1, 1, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for weather code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
isweekend,"

class isweekend(GeneralSemanticType):

    def __init__(self):
        self.description = 'Determines if the day is a weekend'
        self.format = 'Boolean value (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return bool(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
season,"

class season(GeneralSemanticType):

    def __init__(self):
        self.description = 'A season'
        self.format = 'An integer representing the year'

    def super_cast(self, val):
        if isinstance(val, str):
            if '-' in val:
                return int(val[:4])
            elif val.isdigit():
                return int(val)
            elif val.isalpha():
                if 'IPL' in val.upper():
                    return int(val.split('-')[1])
                else:
                    seasons = {'Winter': 1, 'Spring': 2, 'Summer': 3, 'Autumn': 4, 'All Year': 0}
                    return seasons[val.title()]
        elif isinstance(val, float) or isinstance(val, int):
            return int(val)
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3000:
            return True
        else:
            return False"
classnumber,"

class classnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Class number is a numerical representation of a class'
        self.format = 'Integer starting from 1'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 1:
                return int_val
            else:
                raise ValueError('Value must be greater or equal to 1')
        except ValueError as ve:
            print(f'ValueError: {ve}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
numberofanimalspeciesinclass,"

class numberofanimalspeciesinclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of animal species in a class'
        self.format = 'integer'
        self.examples = [41, 20, 5, 13, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            print(f""Can't convert {val} to integer"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
animalname,"

class animalname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an Animal'
        self.format = 'Only the first letter of the first name should be capitalized'
        self.examples = ['Frog', 'Chub', 'Bass', 'Bear', 'Boar']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
booleanattribute,"

class booleanattribute(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean attribute'
        self.format = '0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val not in [0, 1]:
            raise Exception('Invalid value for boolean attribute')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
legs,"

class legs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of legs an animal has'
        self.format = 'Positive integer'
        self.examples = [0, 2, 4, 6, 8]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0 or casted_val > 8:
                raise ValueError('Invalid number of legs')
            else:
                return casted_val
        except Exception as e:
            raise ValueError('Cannot cast input value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 8:
            return True
        else:
            return False"
legoidentifier,"

class legoidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique identifier for Lego parts'
        self.format: str = 'Lego IDs should be integers. -1 denotes an unknown ID'
        self.examples: list = [-1, 0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return -1

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and -1 <= casted_val <= float('inf')"
colorname,"

class colorname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Lego color'
        self.format = 'Color names should be capitalized strings'
        self.examples = ['Unknown', 'Black', 'Blue', 'Green', 'Dark Turquoise']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
rgbcode,"

class rgbcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'RGB color code'
        self.format = 'RGB color codes should be uppercase strings'
        self.examples = ['FFFFFF', '000000', 'D9E4A7', 'A5A5CB', 'E4ADC8']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.upper()
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', casted_val) is not None:
            return True
        else:
            return False"
istransparent,"

class istransparent(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A boolean indicator for transparency'
        self.format: str = 'A lowercase string'
        self.examples: list = ['t', 'f', 't', 'f', 't']

    def super_cast(self, val):
        return 't' if str(val).lower() in ['t', 'true', '1'] else 'f'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['t', 'f']:
            return True
        else:
            return False"
genericidentifier,"

class genericidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A generic ID value'
        self.format = 'ID should be formatted as an integer'
        self.examples = [1, 3, 4, 15, 16]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be cast to int.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
versionnumber,"

class versionnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A version number'
        self.format = 'Stored as strings, each number in the version number is separated by a period'
        self.examples = ['1.0.0', '2.3.4', '1.2.0', '1.1.0a', '2.0.1']

    def super_cast(self, val):
        if isinstance(val, int):
            return str(val) + '.0.0'
        elif isinstance(val, str):
            if re.match('^[0-9]+(\\.[0-9]+){2}$', val):
                return val
            else:
                raise ValueError('Invalid version number format.')
        else:
            raise TypeError('Unsupported type for version number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        version_numbers = casted_val.split('.')
        if len(version_numbers) != 3:
            return False
        for num in version_numbers:
            if not num.isdigit():
                return False
        return True"
legosetnumber,"

class legosetnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A Lego set number'
        self.format = 'Set number should be formatted as a string'
        self.examples = ['421-2', '31015-1', '75053-1', '8880-1', '214.6-1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile('^\\d+[-]\\d+$')
        if pattern.match(casted_val):
            return True
        else:
            return False"
partnum,"

class partnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Part number for LEGO piece'
        self.format = 'Alphanumeric string'
        self.examples = ['6141', '3023', '3004', '3020', '3022']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
coloridentifier,"

class coloridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color identifier for LEGO piece'
        self.format = 'ColorID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -1 and casted_val <= 9999:
            return True
        else:
            return False"
isspare,"

class isspare(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether the item is a spare'
        self.format = 'boolean value as string'
        self.examples = ['t', 'f', 't', 'f', 't']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['t', 'f']:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['t', 'f']:
            return True
        else:
            return False"
setnum,"

class setnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a set'
        self.format = 'SetNum should be a string'
        self.examples = ['75911-1', '75912-1', '75048-1', '75053-1', '4515-1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^\\d{4}-\\d$', casted_val):
            return True
        else:
            return False"
partidentifier,"

class partidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Part Id'
        self.format = 'Part Id should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
partcategory,"

class partcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of Part Category'
        self.format = 'Part category names should be capitalized'
        self.examples = ['Baseplates', 'Bricks Printed', 'Bricks Sloped', 'Duplo, Quatro And Primo', 'Bricks Special']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
partnumber,"

class partnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique part number of a Lego piece'
        self.format = 'Alphanumeric string with lowercase letters, numbers, and special characters'
        self.examples = ['0687b1', '10049', '0904', '1', '10']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[a-z0-9]*$', casted_val):
            return True
        else:
            return False"
partcategoryidentifier,"

class partcategoryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique category id of a Lego part'
        self.format = 'The category id should be an integer between 1 and 57'
        self.examples = [17, 1, 13, 27, 57]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise ValueError('Invalid input. Expected a numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 57:
            return True
        else:
            return False"
setnumber,"

class setnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a lego set'
        self.format = 'Alphanumeric string usually taking the form of numbers followed by a dash and another number'
        self.examples = ['00-1', '0011-2', '0011-3', '0012-1', '0013-1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]+-[0-9]+$', casted_val):
            return True
        else:
            return False"
legosetname,"

class legosetname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Lego Set'
        self.format = 'Each word in the name should be capitalized'
        self.examples = ['Weetabix Castle', 'Town Mini-Figures', 'Castle 2 for 1 Bonus Offer', 'Space Mini-Figures', 'Space Mini-Figures']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
numparts,"

class numparts(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of parts in a lego set'
        self.format = 'Number of parts should be a positive integer or -1 if unknown'
        self.examples = [471, 12, 2, 12, 12]

    def super_cast(self, val):
        num = int(val)
        if num < -1:
            raise Exception('Invalid Number of Parts')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < -1:
            return False
        return True"
themename,"

class themename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the theme'
        self.format = 'Theme name should start with a capital letter, and remaining characters in lower case'
        self.examples = ['Technic', 'Arctic Technic', 'Competition', 'Expert Builder', 'Model']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
parentthemeidentifier,"

class parentthemeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identifier for the parent theme'
        self.format = 'Parent Theme ID should be a positive integer or NaN if it does not exist'
        self.examples = [float('nan'), 1.0, 1.0, 1.0, 1.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or (isinstance(casted_val, int) and casted_val > 0):
            return True
        else:
            return False"
beeridentifier,"

class beeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each beer'
        self.format = 'A positive integer'
        self.examples = [1436, 2265, 2264, 2263, 2262]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 0:
                return int_val
            else:
                return 'Invalid'
        except Exception:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
beername,"

class beername(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a beer'
        self.format = 'Capitalized string'
        self.examples = ['Pub Beer', ""Devil's Cup"", 'Rise of the Phoenix', 'Sinister', 'Sex and Candy']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
beerstyle,"

class beerstyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of the beer'
        self.format = 'Beer styles should be capitalized strings'
        self.examples = ['American Pale Lager', 'American Pale Ale (APA)', 'American IPA', 'American Double / Imperial IPA', 'American IPA']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
beerabv,"

class beerabv(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Alcohol By Volume (ABV) of the beer'
        self.format = 'ABV should be a floating point number between 0 and 1'
        self.examples = [0.05, 0.066, 0.071, 0.09, 0.075]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return num
            else:
                raise Exception('ABV out of range')
        except Exception as e:
            print(f'Error: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
beeribu,"

class beeribu(GeneralSemanticType):

    def __init__(self):
        self.description = 'International Bitterness Units (IBU) of the beer'
        self.format = 'IBU should be a positive floating point number'
        self.examples = [21.0, 35.0, 64.0, 4.0, 138.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('IBU out of range')
            return num
        except ValueError:
            raise ValueError('Invalid input for IBU')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
beerounces,"

class beerounces(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of the beer can'
        self.format = 'Volume should be a positive floating point number'
        self.examples = [12.0, 8.4, 16.0, 32.0, 12.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Value should be a positive number')
            return num
        except ValueError:
            raise Exception('Could not convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
breweryname,"

class breweryname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Brewery'
        self.format = 'Name should be capitalized'
        self.examples = ['Blue Mountain Brewery', 'Sly Fox Brewing Company', 'Summit Brewing Company', 'Lucette Brewing Company', 'Blackrocks Brewery']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
usstatename,"

class usstatename(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a US State'
        self.format: str = 'Two-letter abbreviation in uppercase'
        self.examples: list = ['CA', 'TX', 'NY', 'FL', 'PA']

    def super_cast(self, val):
        return str(val).strip().upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in self.examples"
cigarettesperday,"

class cigarettesperday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of cigarettes smoked per day'
        self.format = 'Number of cigarettes smoked per day should be a non-negative number'
        self.examples = [0.0, 0.0, 20.0, 30.0, 23.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError
            return casted_val
        except ValueError:
            return 'Invalid value, must be a non-negative number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        else:
            return True"
cholesterollevel,"

class cholesterollevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cholesterol level of a person'
        self.format = 'Total cholesterol level should be a whole number in mg/dL'
        self.examples = [150, 200, 250, 300, 350]

    def super_cast(self, val):
        return int(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('Cholesterol level cannot be negative.')
        return True"
systolicbloodpressure,"

class systolicbloodpressure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Systolic blood pressure'
        self.format = 'Systolic blood pressure should be a non-negative number'
        self.examples = [106.0, 121.0, 127.5, 150.0, 130.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError('Value must be non-negative')
        except ValueError:
            raise ValueError('Invalid input, expected a non-negative number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
diastolicbloodpressure,"

class diastolicbloodpressure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diastolic blood pressure'
        self.format = 'Diastolic blood pressure should be a non-negative number'
        self.examples = [70.0, 81.0, 80.0, 95.0, 84.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                raise Exception()
            else:
                return float_val
        except Exception as e:
            print(f'Error: {e} - Invalid input. Please enter a non-negative number.')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
heartrate,"

class heartrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Heart rate'
        self.format = 'Heart rate should be a non-negative number'
        self.examples = [80.0, 95.0, 75.0, 65.0, 85.0]

    def super_cast(self, val):
        if isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            return val
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not np.isnan(casted_val)):
            return True
        else:
            return False"
glucoselevel,"

class glucoselevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Glucose Level in the blood'
        self.format = 'Glucose level should be a non-negative number'
        self.examples = [70.0, 90.0, 110.0, 130.0, 150.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(val)
        elif isinstance(val, int):
            val = float(val)
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 200:
            return True
        else:
            return False"
deathmanner,"

class deathmanner(GeneralSemanticType):

    def __init__(self):
        self.description = 'Manner of death'
        self.format = 'Lowercase string'
        self.examples = ['shot', 'shot', 'shot and tasered', 'shot', 'shot']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['shot', 'shot and tasered']:
            return True
        else:
            return False"
armedtype,"

class armedtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Armed type'
        self.format = 'Lowercase string'
        self.examples = ['gun', 'gun', 'unarmed', 'toy weapon', 'nail gun']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
race,"

class race(GeneralSemanticType):

    def __init__(self):
        self.description = 'Race of a person'
        self.format = 'Proper noun string'
        self.examples = ['White', 'Black', 'Hispanic', 'Asian', 'Native']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['White', 'Black', 'Hispanic', 'Asian', 'Native']:
            return True
        else:
            return False"
mentalillness,"

class mentalillness(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean representing the presence of a mental illness'
        self.format = 'Boolean value, either True or False'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, bool)"
threatlevel,"

class threatlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Threat level'
        self.format = 'Lowercase string'
        self.examples = ['attack', 'other', 'undetermined', 'attack', 'attack']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['attack', 'other', 'undetermined']:
            return True
        else:
            return False"
flee,"

class flee(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flee status'
        self.format = 'Proper noun string'
        self.examples = ['Not fleeing', 'Car', 'Foot', 'Other', 'Not fleeing']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Not Fleeing', 'Car', 'Foot', 'Other']:
            return True
        else:
            return False"
bodycamera,"

class bodycamera(GeneralSemanticType):

    def __init__(self):
        self.description = 'Body Camera status'
        self.format = 'True/False'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
armscategory,"

class armscategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Arms category'
        self.format = 'String in title case'
        self.examples = ['Guns', 'Sharp Objects', 'Unknown', 'Unarmed', 'Other Unusual Objects']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
tvshowtitle,"

class tvshowtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a TV Show'
        self.format = 'Each word in the title should start with a capitalized letter'
        self.examples = ['Breaking Bad', 'Stranger Things', 'Attack on Titan', 'Better Call Saul', 'Dark']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and all((word[0].isupper() for word in casted_val.split())):
            return True
        else:
            return False"
tvshowage,"

class tvshowage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age rating of a TV Show'
        self.format = 'Age rating should be a string'
        self.examples = ['16+', '18+', '7+', 'all', '13+']

    def super_cast(self, val):
        val = str(val)
        if val in ['16+', '18+', '7+', 'all', '13+']:
            return val
        else:
            raise Exception('Invalid age rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['16+', '18+', '7+', 'all', '13+']:
            return True
        else:
            return False"
imdb,"

class imdb(GeneralSemanticType):

    def __init__(self):
        self.description = 'IMDB rating of a TV Show'
        self.format = 'IMDB rating should be a float number with one decimal place'
        self.examples = [7.4, 7.6, 7.3, 7.5, 7.8]

    def super_cast(self, val):
        try:
            float_val = float(val.split('/')[0])
            return round(float_val, 1)
        except (ValueError, AttributeError):
            raise Exception(""Invalid value. Input must be a string in the format 'x/y' where x is the rating and y is the total score."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 10.0:
            return True
        else:
            return False"
rottentomatoes,"

class rottentomatoes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rotten Tomatoes rating of a TV Show'
        self.format = 'Rotten Tomatoes rating should be an integer'
        self.examples = [10, 13, 45, 51, 52]

    def super_cast(self, val):
        if isinstance(val, str):
            split_val = val.split('/')
            if len(split_val) > 1:
                return int(split_val[0])
        elif isinstance(val, int):
            return val
        else:
            raise ValueError('Invalid value for Rotten Tomatoes rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
streamingplatform,"

class streamingplatform(GeneralSemanticType):

    def __init__(self):
        self.description = 'A streaming platform'
        self.format = 'Boolean in integer form'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
chestpain,"

class chestpain(GeneralSemanticType):

    def __init__(self):
        self.description = 'Chest pain type'
        self.format = 'Chest pain type should be represented as an integer'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise Exception('Invalid chest pain type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(4):
            return True
        else:
            return False"
bloodpressure,"

class bloodpressure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Blood Pressure Level'
        self.format = 'Blood Pressure Level should be an integer'
        self.examples = [120, 130, 140, 150, 160]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 200:
            return True
        else:
            return False"
cholesterol,"

class cholesterol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Serum cholesterol level'
        self.format = 'Cholesterol level should be represented as a whole number in mg/dl'
        self.examples = [150, 200, 250, 300, 350]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)):
            val = float(val)
            return int(val)
        else:
            raise ValueError('Incorrect value format, it should be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
fastingbloodsugar,"

class fastingbloodsugar(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fasting blood sugar levels'
        self.format = 'Integer either 0 (lower than 120 mg/dl) or 1 (higher than 120 mg/dl)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
restingecg,"

class restingecg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Resting ECG results'
        self.format = ""Resting ECG results should be one of 'Normal', 'LVH', 'ST'""
        self.examples = ['Normal', 'LVH', 'ST', 'Normal', 'LVH']

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 0:
                return 'Normal'
            elif val == 1:
                return 'LVH'
            elif val == 2:
                return 'ST'
        else:
            return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Normal', 'LVH', 'ST']:
            return True
        else:
            return False"
maxheartrate,"

class maxheartrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Maximum heart rate achieved'
        self.format = 'Heart rate should be an integer'
        self.examples = [100, 120, 140, 160, 180]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for heart rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
exerciseinducedangina,"

class exerciseinducedangina(GeneralSemanticType):

    def __init__(self):
        self.description = 'Exercise Induced Angina'
        self.format = 'In integer, 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.upper() == 'N':
                return 0
            elif val.upper() == 'Y':
                return 1
            else:
                raise Exception('Invalid value')
        elif isinstance(val, int):
            if val in [0, 1]:
                return val
            else:
                raise Exception('Invalid value')
        else:
            raise TypeError('Value must be either string or integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
stdepression,"

class stdepression(GeneralSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.format = 'ST depression should be a floating point number'
        self.examples = [0.0, 0.5, 1.0, 1.5, 2.0]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and (not isinstance(val, bool)):
            return float(val)
        else:
            raise ValueError('Invalid value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and (not math.isinf(casted_val)):
            return True
        else:
            return False"
stsegment,"

class stsegment(GeneralSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.format = 'ST segment slope should be an integer from 0 to 2'
        self.examples = [0, 1, 2, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(0, 3):
            return True
        else:
            return False"
numvessels,"

class numvessels(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of major vessels colored by flouroscopy'
        self.format = 'Number of vessels should be an integer from 0 to 4'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in range(0, 5):
                return val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
thalassemia,"

class thalassemia(GeneralSemanticType):

    def __init__(self):
        self.description = 'Thalassemia type'
        self.format = 'Thalassemia type should be an integer from 0 to 3'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(4):
                return casted_val
            else:
                raise ValueError('Invalid value for Thalassemia type')
        except ValueError as ve:
            print(ve)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in range(4)"
heartdisease,"

class heartdisease(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a person has heart disease or not'
        self.format = 'Integer (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
identity,"

class identity(GeneralSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier'
        self.format = 'Identifier should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for identity cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
carbrand,"

class carbrand(GeneralSemanticType):

    def __init__(self):
        self.description = 'Brand name of a car'
        self.format = 'All characters should be lower case'
        self.examples = ['toyota', 'ford', 'dodge', 'chevrolet', 'gmc']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
caryear,"

class caryear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of car manufacture'
        self.format = 'Year should be a 4-digit integer'
        self.examples = [1999, 2005, 2010, 2015, 2020]

    def super_cast(self, val):
        year = int(val)
        if 1886 <= year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid Year')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1886 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
cartitlestatus,"

class cartitlestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title status of a car'
        self.format = 'string'
        self.examples = ['clean vehicle', 'salvage insurance', 'clean vehicle', 'salvage insurance', 'clean vehicle']

    def super_cast(self, val):
        if val not in ['clean vehicle', 'salvage insurance']:
            raise Exception('Invalid title status')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['clean vehicle', 'salvage insurance']:
            return True
        else:
            return False"
carmileage,"

class carmileage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mileage of a car in miles'
        self.format = 'Mileage should be a positive floating point number'
        self.examples = [15735.0, 36203.0, 29946.0, 25952.0, 1998.0]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Mileage cannot be negative')
        return round(num, 0)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
carcolor,"

class carcolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of a car'
        self.format = 'All characters should be lower case'
        self.examples = ['black', 'silver', 'gray', 'blue', 'red']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
carvin,"

class carvin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vehicle Identification Number of a car'
        self.format = 'All characters should be uppercase'
        self.examples = ['JTEZU11F88K007763', '2FMDK3GC4BBB02217', '3C4PDCGG5JT346413', '1FTFW1ET4EFC23745', '3GCPCREC2JG473991']

    def super_cast(self, val):
        vin = str(val).strip().upper()
        if len(vin) != 17:
            raise Exception('Invalid VIN')
        return vin

    def validate(self, val):
        casted_val = self.super_cast(val)
        return re.match('^[A-HJ-NPR-Z0-9]{17}$', casted_val) is not None and len(casted_val) == 17"
carlot,"

class carlot(GeneralSemanticType):

    def __init__(self):
        self.description = 'Lot number of a car'
        self.format = 'Lot number should be a non-negative integer'
        self.examples = [159348797, 166951262, 167655728, 167753855, 167763266]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid lot number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception('Invalid lot number')
        return True"
carcountry,"

class carcountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country where the car is located'
        self.format = 'All characters should be lower case'
        self.examples = ['usa', 'canada']

    def super_cast(self, val):
        return str(val).strip().lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val.title()):
            return True
        else:
            return False"
footpreference,"

class footpreference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Foot preference of a player'
        self.format = 'Preference should be capitalized'
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['right', 'left']:
            return val.capitalize()
        else:
            raise Exception('Invalid foot preference')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Right', 'Left']:
            return True
        else:
            return False"
positions,"

class positions(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Player Positions in Football'
        self.format: str = 'String of comma separated values with no spaces'
        self.examples: list = ['LM,LW', 'ST,LW', 'CDM,CM', 'CAM,LM,CM', 'ST,CAM,LM']

    def super_cast(self, val):
        if pd.isna(val):
            return None
        else:
            val_str = str(val)
            if re.match('^[A-Z,]+$', val_str):
                return val_str.replace(' ', '')
            else:
                raise ValueError('Value does not match the expected format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_positions = ['GK', 'SW', 'RWB', 'RB', 'RCB', 'CB', 'LCB', 'LB', 'LWB', 'RDM', 'CDM', 'LDM', 'RM', 'RCM', 'CM', 'LCM', 'LM', 'RAM', 'CAM', 'LAM', 'RF', 'CF', 'LF', 'RW', 'RS', 'ST', 'LS', 'LW']
        if casted_val:
            positions = casted_val.split(',')
            for pos in positions:
                if pos not in valid_positions:
                    return False
            return True
        else:
            return False"
foot,"

class foot(GeneralSemanticType):

    def __init__(self):
        self.description = 'The foot preference of a person'
        self.format = 'In title-case and as a string'
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']

    def super_cast(self, val):
        if pd.isna(val):
            return None
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Right', 'Left']:
            return True
        else:
            return False"
ratingcounts,"

class ratingcounts(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating Counts'
        self.format = 'Rating count should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 1 <= casted_val <= 5:
            return True
        else:
            return False"
playerpositions,"

class playerpositions(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Positions a player can play'
        self.format = 'Each position should be capitalized and separated by a comma'
        self.examples = ['CB', 'GK', 'ST', 'LB', 'CDM, CM']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        all_positions = ['CB', 'GK', 'ST', 'LB', 'CDM', 'CM', 'RB', 'CF', 'CAM', 'CDM', 'CM', 'LM', 'RM', 'LW', 'RW']
        positions = casted_val.split(',')
        for pos in positions:
            if pos.strip() not in all_positions:
                return False
        return True"
playerperformance,"

class playerperformance(GeneralSemanticType):

    def __init__(self):
        self.description = 'A performance score for a Football Player'
        self.format = 'Performance score should be an integer between 0 and 100'
        self.examples = [44, 65, 70, 94, 95]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if not 0 <= casted_val <= 100:
                raise ValueError
            return casted_val
        except ValueError:
            raise Exception('Value cannot be casted to the format of this SemanticType')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= 100:
            return False
        return True"
playerperformanceindicator,"

class playerperformanceindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'A performance indicator for a Football Player'
        self.format = 'Performance indicator should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1 and casted_val <= 5:
                return casted_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError('Invalid value. Expected an integer between 1 and 5.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
playervalueeur,"

class playervalueeur(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market value of a player'
        self.format = 'Value should be stored as floating point numbers in Euros'
        self.examples = [87000000.0, 89000000.0, 69500000.0, 83000000.0, 109000000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Unable to cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0:
            return False
        return True"
playerheightcm,"

class playerheightcm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of a player'
        self.format = 'Height should be stored as floating point numbers in centimeters'
        self.examples = [185.0, 170.0, 193.0, 182.0, 174.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise TypeError('Value must be castable to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
playerweightkg,"

class playerweightkg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight of a player in kilograms'
        self.format = 'Weight should be stored as floating point numbers'
        self.examples = [80.0, 72.0, 92.0, 85.0, 68.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError as e:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
fifarating,"

class fifarating(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rating of a player in FIFA'
        self.format = 'FIFA rating should be an integer between 0 and 100'
        self.examples = [62, 66, 71, 75, 94]

    def super_cast(self, val):
        try:
            return round(float(val))
        except ValueError:
            raise Exception('Invalid input: please provide a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
monetaryvalueeur,"

class monetaryvalueeur(GeneralSemanticType):

    def __init__(self):
        self.description = 'The monetary value in EUR'
        self.format = 'Monetary value should be stored as a floating point number'
        self.examples = [300000.0, 675000.0, 2000000.0, 118500000.0, 2000000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
playerprice,"

class playerprice(GeneralSemanticType):

    def __init__(self):
        self.description = ""Player's price in the game""
        self.format = 'Price should be a floating point number'
        self.examples = [95500000.0, 58500000.0, 105500000.0, 90000000.0, 90000000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input: expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
playerbirthdate,"

class playerbirthdate(GeneralSemanticType):

    def __init__(self):
        self.description = ""Player's date of birth""
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['1987-06-24', '1985-02-05', '1992-02-05', '1991-01-07', '1991-06-28']

    def super_cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', casted_val):
            return True
        else:
            return False"
fifaplayeridentifier,"

class fifaplayeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for FIFA players'
        self.format = 'FIFA Player ID should be formatted as an integer'
        self.examples = [158023, 20801, 188545, 190871, 192985]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except Exception:
            raise ValueError(""The provided value couldn't be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
fifaplayerposition,"

class fifaplayerposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Position(s) of a FIFA player in the field'
        self.format = 'Each position should be represented by its standard abbreviation'
        self.examples = ['RW, ST, CF', 'ST, LW', 'ST', 'LW, CAM', 'CAM, CM']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and all((sub_val.isupper() and len(sub_val) <= 3 for sub_val in casted_val.split(', '))):
            return True
        else:
            return False"
birthdate,"

class birthdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of Birth of a person'
        self.format = ""Datetime object in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['1991-01-03 00:00:00', '1993-04-20 01:00:00', '1987-03-17 00:00:00', '1990-07-03 01:00:00', '1975-01-20 00:00:00']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                val = datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                val = datetime.strptime(val, '%Y-%m-%d')
                val = datetime.combine(val, datetime.min.time())
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            if casted_val < datetime.strptime('1900-01-01 00:00:00', '%Y-%m-%d %H:%M:%S') or casted_val > datetime.now():
                return False
            else:
                return True
        return False"
playerpotentialrating,"

class playerpotentialrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'The potential rating of a FIFA player'
        self.format = 'Potential rating should be an integer between 1 and 100'
        self.examples = [93, 92, 91, 91, 91]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 100:
            return val
        else:
            try:
                casted_val = int(val)
                if 1 <= casted_val <= 100:
                    return casted_val
            except Exception:
                raise ValueError('The value is not a valid potential rating.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 100:
            return True
        else:
            return False"
orderidentifier,"

class orderidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique order id'
        self.format = 'Alphanumeric string'
        self.examples = ['8272b63d03f5f79c56e9e4120aec44ef', '1b15974a0141d54e36626dca3fdc731a', 'ab14fdcfbe524636d65ee38360e22ce8', '9ef13efd6949e4573a18964dd1bbe7f5', '428a2f660dc84138d969ccd69a0ab6d5']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[a-zA-Z0-9]*$', casted_val):
            return True
        else:
            return False"
shipmode,"

class shipmode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shipping Mode'
        self.format = 'Strings representing a shipping method'
        self.examples = ['Standard Class', 'Second Class', 'First Class', 'Same Day']

    def super_cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid shipping mode')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
customername,"

class customername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Customer Name'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['William Brown', 'Paul Prost', 'Matt Abelman', 'John Lee', 'Chloris Kastensmidt']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str) and casted_val.istitle() and (len(casted_val.split()) > 1)"
segment,"

class segment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Segment'
        self.format = 'Strings representing a customer segment'
        self.examples = ['Consumer', 'Corporate', 'Home Office']

    def super_cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid segment')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
postalcode,"

class postalcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Postal Code'
        self.format = 'Postal codes should be integer values'
        self.examples = [1040, 23223, 58103, 90008, 99301]

    def super_cast(self, val):
        if np.isnan(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
productidentifier,"

class productidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product ID'
        self.format = 'Alphanumeric string with a length of 32 characters.'
        self.examples = ['1e9e8ef04dbcff4541ed26657ea517e5', '3aa071139cb16b67ca9e5dea641aaa2f', '96bd76ec8810374ed1b65e291975717f', 'cef67bcfe19066a932b7673e239eb23d', '9dc1a7de274444849c219cff195d0b71']

    def super_cast(self, val):
        val = str(val)
        if '-' in val:
            val = val.replace('-', '')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 32 and casted_val.isalnum():
            return True
        else:
            return False"
subcategory,"

class subcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Subcategory of a product'
        self.format = 'A string representing product subcategory'
        self.examples = ['Binders', 'Paper', 'Furnishings', 'Phones', 'Storage']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
productname,"

class productname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Name'
        self.format = 'String title representation of product name'
        self.examples = ['Acoustic Guitar', 'Loft Bed With Desk', 'Rock Guitar', 'Changing Room', 'Electric Guitar']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
sales,"

class sales(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sales'
        self.format = 'Sales should be a floating point number'
        self.examples = [41.36, 29.08, 15.68, 15.61, 11.27]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
signal,"

class signal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Signal value'
        self.format = 'Signal values should be a floating point number'
        self.examples = [-2.649831415926553, -2.849462831853105, -2.860094247779619, -2.4351256637061653, -2.615657079632689]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
sensorreading,"

class sensorreading(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Sensor Reading'
        self.format: str = 'Sensor reading should be floating point numbers'
        self.examples: list = [-2.76, -2.8557, -2.4074, -3.1404, -3.1525]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        return False"
channelstatus,"

class channelstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'The status of a channel'
        self.format = '0 for inactive, 1 for active'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in [0, 1]:
            raise Exception('Invalid channel status')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
productcode,"

class productcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Code'
        self.format = ""The code should start with 'Product_' followed by 4 digits""
        self.examples = ['Product_0993', 'Product_0979', 'Product_1359', 'Product_1295', 'Product_1286']

    def super_cast(self, val):
        match_obj = re.match('Product_\\d{4}', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val:
            return True
        else:
            return False"
warehouse,"

class warehouse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Warehouse'
        self.format = ""The warehouse name should start with 'Whse_' followed by a capital letter""
        self.examples = ['Whse_J', 'Whse_S', 'Whse_A', 'Whse_C']

    def super_cast(self, val):
        match_obj = re.match('Whse_[A-Z]', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
productcategory,"

class productcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Category'
        self.format = ""The category should start with 'Category_' followed by 3 digits""
        self.examples = ['Category_019', 'Category_005', 'Category_001', 'Category_007', 'Category_021']

    def super_cast(self, val):
        match_obj = re.match('Category_\\d{3}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid product category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('Category_\\d{3}', casted_val):
            return True
        else:
            return False"
orderdemand,"

class orderdemand(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Order Demand'
        self.format: str = 'Integer'
        self.examples: list = [100, 500, 1000, 5000, 4000000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
county,"

class county(GeneralSemanticType):

    def __init__(self):
        self.description = 'US Counties'
        self.format = 'The string should be in title format, with the first letter of each word capitalized'
        self.examples = ['Jackson', 'Washington', 'Jefferson', 'Lincoln', 'Clay']

    def super_cast(self, val):
        casted_val = str(val).title()
        if 'County' in casted_val:
            casted_val = casted_val.replace(' County', '')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
fips,"

class fips(GeneralSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.format = 'FIPS codes are positive floats'
        self.examples = [1001.0, 1003.0, 1005.0, 1007.0, 1009.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            elif val < 0:
                raise ValueError('Invalid FIPS code. Must be non-negative.')
            return val
        except ValueError:
            raise Exception('Invalid value for FIPS code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
province,"

class province(GeneralSemanticType):

    def __init__(self):
        self.description = 'Province or State'
        self.format = 'String with first letter of each word capitalized'
        self.examples = ['Shanghai', 'Yunnan', 'Beijing', 'Taiwan', 'Jilin']

    def super_cast(self, val):
        if pd.isnull(val):
            return val
        else:
            return str(val).title().replace('-', ' ')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
covidstat,"

class covidstat(GeneralSemanticType):

    def __init__(self):
        self.description = 'COVID-19 statistics'
        self.format = 'Should be represented as non-negative floats'
        self.examples = [0.0, 1.0, 14.0, 6.0, 1.0]

    def super_cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return np.nan
        val = float(val)
        if val < 0:
            return np.nan
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val) or math.isnan(casted_val):
            return False
        if casted_val < 0 or casted_val > float('inf'):
            return False
        return True"
geocode,"

class geocode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical code for identifying a specific location'
        self.format = 'Geocode should be a non-negative integer'
        self.examples = [1001, 1003, 1005, 1007, 1009]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid geocode')
            return num
        except ValueError:
            raise ValueError('Value must be a non-negative integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            num = int(casted_val)
            if num < 0:
                return False
            return True
        except ValueError:
            return False"
coordinate,"

class coordinate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinate (latitude or longitude)'
        self.format = 'Coordinate should be a floating point number'
        self.examples = [32.54, 30.73, 31.87, 32.99, 33.98]

    def super_cast(self, val):
        try:
            return round(float(val), 5)
        except ValueError:
            raise Exception('Invalid value for conversion')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
population,"

class population(GeneralSemanticType):

    def __init__(self):
        self.description = 'The population of an entity'
        self.format = 'Population should be formatted as an integer number'
        self.examples = [55869, 223234, 24686, 22394, 57826]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(val.replace(',', ''))
        except AttributeError:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
regionidentifier,"

class regionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identifier for a region'
        self.format = 'Region ID should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pregnancycount,"

class pregnancycount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a person has been pregnant'
        self.format = 'Pregnancy count should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for pregnancy count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 20:
            return True
        else:
            return False"
bloodglucoselevel,"

class bloodglucoselevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Blood Glucose Level'
        self.format = 'Blood glucose level should be a floating point number'
        self.examples = [85.0, 89.0, 117.0, 140.0, 183.0]

    def super_cast(self, val):
        if isinstance(val, int):
            return float(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0 or math.isinf(casted_val):
            return False
        return True"
skinthickness,"

class skinthickness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Skin thickness level'
        self.format = 'Should be a floating point number'
        self.examples = [0.0, 23.0, 29.0, 32.0, 35.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 100.0:
            return True
        else:
            return False"
insulinlevel,"

class insulinlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Insulin level in the blood'
        self.format = 'Insulin level should be formatted as a float'
        self.examples = [0.0, 30.5, 94.0, 127.25, 168.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Could not cast value to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
diabetespedigree,"

class diabetespedigree(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diabetes Pedigree Function'
        self.format = 'Diabetes Pedigree Function should be a floating point number'
        self.examples = [0.078, 0.167, 0.244, 0.351, 0.627]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
diabetesoutcome,"

class diabetesoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diabetes outcome'
        self.format = 'Integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
heartbeats,"

class heartbeats(GeneralSemanticType):

    def __init__(self):
        self.description = 'Maximum heart rate achieved'
        self.format = 'Whole number'
        self.examples = [150, 187, 172, 178, 163]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
peak,"

class peak(GeneralSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.format = 'Peak should be represented as a floating point number'
        self.examples = [2.3, 3.5, 1.4, 0.8, 0.6]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
slope,"

class slope(GeneralSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.format = 'An integer representation of slope'
        self.examples = [0, 0, 2, 2, 2]

    def super_cast(self, val):
        if isinstance(val, int) and val in range(3):
            return val
        else:
            raise Exception('Invalid slope')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(3):
            return True
        else:
            return False"
vessels,"

class vessels(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of major vessels (0-3) colored by flourosopy'
        self.format = 'Vessels should be represented as a whole number'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 0 <= casted_val <= 3:
                return casted_val
            else:
                raise ValueError('Invalid vessels number')
        except ValueError:
            raise ValueError('Invalid vessels number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 3:
            return True
        else:
            return False"
hypertension,"

class hypertension(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hypertension status'
        self.format = 'Boolean (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise ValueError('Invalid value')
        except ValueError:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
evermarried,"

class evermarried(GeneralSemanticType):

    def __init__(self):
        self.description = 'Marital status'
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
worktype,"

class worktype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of work the patient does'
        self.format = 'Work type should be a string'
        self.examples = ['Private', 'Self-employed', 'children', 'Govt_job', 'Never_worked']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
residencetype,"

class residencetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of residence of the patient'
        self.format = 'In string format'
        self.examples = ['Urban', 'Rural', 'Urban', 'Rural', 'Urban']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Urban', 'Rural']:
            return True
        else:
            return False"
avgglucoselevel,"

class avgglucoselevel(GeneralSemanticType):

    def __init__(self):
        self.description = ""Average glucose level in the patient's blood""
        self.format = 'Average glucose level should be a positive floating point number'
        self.examples = [228.69, 202.21, 105.92, 171.23, 174.12]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
bmi,"

class bmi(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Body Mass Index of a person'
        self.format: str = 'BMI should be a floating point number with two decimal places'
        self.examples: list = [36.6, np.nan, 32.5, 34.4, 24.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif 0 <= casted_val <= 70:
            return True
        else:
            return False"
smokingstatus,"

class smokingstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Smoking status of the patient'
        self.format = 'Smoking status should be a string'
        self.examples = ['never smoked', 'Unknown', 'formerly smoked', 'smokes']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['never smoked', 'Unknown', 'formerly smoked', 'smokes']:
            return True
        else:
            return False"
stroke,"

class stroke(GeneralSemanticType):

    def __init__(self):
        self.description = 'A stroke'
        self.format = 'In integer form'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
numchildren,"

class numchildren(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of children a person has'
        self.format = 'Number of children should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
smoker,"

class smoker(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a person is a smoker or not'
        self.format = ""lower-case string of 'yes' or 'no'""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
insurancecharge,"

class insurancecharge(GeneralSemanticType):

    def __init__(self):
        self.description = 'Charges for insurance'
        self.format = 'Charges should be formatted as a floating point number with two decimal places'
        self.examples = [1121.87, 4740.29, 9382.03, 16639.91, 63770.43]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception:
            raise ValueError(f'Could not convert {val} to a floating point number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
mushroomedibility,"

class mushroomedibility(GeneralSemanticType):

    def __init__(self):
        self.description = 'Edibility of a mushroom'
        self.format = 'Single character string'
        self.examples = ['e', 'p', 'e', 'p', 'e']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['e', 'p']:
            return val
        else:
            raise Exception('Invalid mushroom edibility')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['e', 'p']:
            return True
        else:
            return False"
mushroomshape,"

class mushroomshape(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shape of a Mushroom'
        self.format = 'Mushroom shapes are represented by single character strings'
        self.examples = ['x', 'f', 'k', 'b', 's']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['x', 'f', 'k', 'b', 's']:
            return val
        else:
            raise Exception('Invalid mushroom shape')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['x', 'f', 'k', 'b', 's']:
            return True
        else:
            return False"
mushroomcolor,"

class mushroomcolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of a Mushroom'
        self.format = 'Mushroom colors are represented by single character strings'
        self.examples = ['n', 'g', 'e', 'y', 'w', 'b', 'p']

    def super_cast(self, val):
        if str(val) in self.examples:
            return str(val)
        else:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
mushroomhabitat,"

class mushroomhabitat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Habitat of a Mushroom'
        self.format = 'Mushroom habitats are represented by single character strings'
        self.examples = ['d', 'g', 'p', 'l', 'u', 'm']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise Exception('Invalid mushroom habitat')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
recoveredcases,"

class recoveredcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Recovered cases of Covid-19'
        self.format = 'Recovered cases should be a non-negative integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
activecases,"

class activecases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of active Covid-19 cases'
        self.format = 'Active cases should be a non-negative integer'
        self.examples = [0, 2120510, 39583, 660757, 182094]

    def super_cast(self, val):
        if pd.isna(val):
            return 0
        else:
            return int(val.replace(',', '')) if isinstance(val, str) else int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
newcasecount,"

class newcasecount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of new cases (newcases, newdeaths, newrecovered)'
        self.format: str = 'New case counts should be positive integers'
        self.examples: list = [0, 99, 287, 493, 684]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
countrycount,"

class countrycount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of countries'
        self.format: str = 'Country count should be an integer between 0 and total number of countries in the world'
        self.examples: list = [6, 8, 9, 11, 13]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 0 <= casted_val <= len(pycountry.countries):
                return casted_val
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= len(pycountry.countries):
            return True
        else:
            return False"
provincestate,"

class provincestate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Province or State'
        self.format = 'Province or State names should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
lat,"

class lat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Latitude'
        self.format = 'Latitude ranges from -90 to 90'
        self.examples = [-14.271, 13.4443, 15.0979, 18.180117000000006, 18.360255]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -90 <= casted_val <= 90:
            return True
        else:
            return False"
long,"

class long(GeneralSemanticType):

    def __init__(self):
        self.description = 'Longitude'
        self.format = 'Floating point number ranging from -180 to 180'
        self.examples = [-170.132, 144.7937, 145.6739, -66.754367, -67.17513100000001]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val >= -180 and casted_val <= 180:
                return casted_val
            else:
                raise Exception()
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
combinedkey,"

class combinedkey(GeneralSemanticType):

    def __init__(self):
        self.description = 'A combined key using city, state, and country'
        self.format = 'Each component of the key should be capitalized'
        self.examples = ['Autauga, Alabama, US', 'Baldwin, Alabama, US', 'Barbour, Alabama, US', 'Bibb, Alabama, US', 'Blount, Alabama, US']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        split_val = casted_val.split(',')
        if len(split_val) != 3:
            return False
        country = split_val[2].strip()
        if not pycountry.countries.get(name=country):
            return False
        return True"
confirmed,"

class confirmed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Confirmed Cases'
        self.format = 'The number of confirmed cases should be a non-negative integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and (not math.isnan(float(val))):
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
stockmovement,"

class stockmovement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock Movement'
        self.format = 'Binary, represented as integer'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return int(val)
        else:
            raise ValueError(f'{val} is not a valid value for Stock Movement. Expected values are 0 or 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
stockprice,"

class stockprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock price'
        self.format = 'Price should be formatted as a floating point number with up to 2 decimal places'
        self.examples = [75.55, 75.2, 75.3, 75.05, 74.45]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception('Invalid stock price')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
stockvolume,"

class stockvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of a stock'
        self.format = 'Volume should be formatted as an integer'
        self.examples = [8720, 22820, 152538, 59554, 43187]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid volume value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
employmenttypeenum,"

class employmenttypeenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Employment type'
        self.format = 'Employment type should be represented as a string'
        self.examples = ['FT', 'PT', 'CT', 'FL']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['FT', 'PT', 'CT', 'FL']:
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['FT', 'PT', 'CT', 'FL']:
            return True
        else:
            return False"
salaryinusd,"

class salaryinusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Salary in USD'
        self.format = 'Salary in USD should be a non-negative floating point number'
        self.examples = [2859.0, 62726.0, 101570.0, 150000.0, 600000.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return max(float_val, 0)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val == 'Invalid value':
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
companysizeenum,"

class companysizeenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Company size'
        self.format = 'Company size should be represented as a string'
        self.examples = ['S', 'M', 'L', 'S', 'M']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S', 'M', 'L']:
            return True
        else:
            return False"
whisker,"

class whisker(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whisker value for a boxplot'
        self.format = 'Whisker values should be floating point numbers between 0 and 10'
        self.examples = [7.904, 7.687, 7.643, 7.67, 7.518]

    def super_cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            return 'Invalid whisker value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
loggedgdppercapita,"

class loggedgdppercapita(GeneralSemanticType):

    def __init__(self):
        self.description = 'Logged GDP per capita'
        self.format = 'non-negative floating point number'
        self.examples = [10.775, 10.933, 11.117, 10.878, 10.932]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid GDP per capita')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
healthylifeexpectancy,"

class healthylifeexpectancy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Healthy life expectancy'
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.874, 0.861, 0.868, 0.914, 0.927, 72.0, 72.7, 74.4, 73.0, 72.4]

    def super_cast(self, val):
        try:
            num = round(float(val), 3)
            return num
        except Exception as e:
            raise Exception('Invalid input for healthy life expectancy')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
dystopiaresidual,"

class dystopiaresidual(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dystopia residual score'
        self.format = 'Float value with five decimal places'
        self.examples = [2.51738, 2.70201, 2.49204, 2.46531, 2.45176]

    def super_cast(self, val):
        return round(float(val), 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
lifeladder,"

class lifeladder(GeneralSemanticType):

    def __init__(self):
        self.description = 'Life Ladder is a measure of overall life satisfaction'
        self.format = 'Life Ladder should be a floating point number'
        self.examples = [3.724, 4.402, 4.758, 3.832, 3.783]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 3)
            return casted_val
        except ValueError:
            raise Exception('Could not cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2.375 and casted_val <= 8.019:
            return True
        else:
            return False"
loggdppercapita,"

class loggdppercapita(GeneralSemanticType):

    def __init__(self):
        self.description = 'Log GDP per capita'
        self.format = 'Log GDP per capita should be a floating point number'
        self.examples = [7.37, 7.54, 7.647, 7.62, 7.705]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 6.635 <= casted_val <= 11.648:
            return True
        else:
            return False"
healthylifeexpectancyatbirth,"

class healthylifeexpectancyatbirth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Healthy life expectancy at birth'
        self.format = 'Healthy life expectancy at birth should be a floating point number'
        self.examples = [50.8, 51.2, 51.6, 51.92, 52.24]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and 32.3 <= casted_val <= 77.1:
            return True
        else:
            return False"
positiveaffect,"

class positiveaffect(GeneralSemanticType):

    def __init__(self):
        self.description = 'The extent to which Positive affect contributes to Happiness Score'
        self.format = 'Positive affect should be a floating point number'
        self.examples = [0.518, 0.584, 0.618, 0.611, 0.71]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return round(float(val), 3)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.322 and casted_val <= 0.944:
            return True
        else:
            return False"
negativeaffect,"

class negativeaffect(GeneralSemanticType):

    def __init__(self):
        self.description = 'The extent to which Negative affect contributes to Happiness Score'
        self.format = 'Negative affect should be a floating point number'
        self.examples = [0.258, 0.237, 0.275, 0.267, 0.268]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        else:
            return 0.083 <= casted_val <= 0.705"
phvalue,"

class phvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'pH is a measure of how acidic/basic water is'
        self.format = 'pH values are represented as floating point numbers'
        self.examples = [7.0, 8.5, 6.8, 7.2, 6.9]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num <= 14:
                return round(num, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and 0 <= casted_val <= 14:
            return True
        else:
            return False"
waterhardness,"

class waterhardness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Water hardness is a measure of the amount of calcium and magnesium in water'
        self.format = 'Water hardness values are represented as floating point numbers'
        self.examples = [180.0, 120.5, 150.8, 170.2, 160.9]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
watersolids,"

class watersolids(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total dissolved solids (TDS) are the total amount of mobile charged ions in a given volume of water'
        self.format = 'TDS values are represented as floating point numbers'
        self.examples = [500.0, 1000.5, 1500.8, 2000.2, 2500.9]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
waterchloramines,"

class waterchloramines(GeneralSemanticType):

    def __init__(self):
        self.description = 'Chloramines are derivatives of ammonia by substitution of one, two or three hydrogen atoms with chlorine atoms'
        self.format = 'Chloramines values are represented as floating point numbers'
        self.examples = [1.0, 2.5, 3.8, 4.2, 5.9]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
watersulfate,"

class watersulfate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sulfate ions are a common component of many minerals and chemical compounds'
        self.format = 'Sulfate values are represented as floating point numbers'
        self.examples = [250.0, 300.5, 350.8, 400.2, 450.9]

    def super_cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
waterconductivity,"

class waterconductivity(GeneralSemanticType):

    def __init__(self):
        self.description: str = ""Conductivity is a measure of water's capability to pass electrical flow""
        self.format: str = 'Conductivity values are represented as floating point numbers'
        self.examples: list = [1400.0, 1500.5, 1600.8, 1700.2, 1800.9]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val > float('inf'):
            return False
        else:
            return True"
organiccarbon,"

class organiccarbon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Organic carbon is a measure of the amount of carbon bound in an organic compound'
        self.format = 'Organic carbon values are represented as floating point numbers'
        self.examples = [10.0, 15.5, 20.8, 25.2, 30.9]

    def super_cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, float):
            return True
        else:
            return False"
trihalomethanes,"

class trihalomethanes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trihalomethanes are chemical compounds in which three of the four hydrogen atoms of methane are replaced by halogen atoms'
        self.format = 'Trihalomethanes values are represented as floating point numbers'
        self.examples = [60.0, 70.5, 80.8, 90.2, 100.9]

    def super_cast(self, val):
        try:
            num = round(float(val), 3)
            if num >= 0:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
waterturbidity,"

class waterturbidity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Turbidity is the cloudiness or haziness of a fluid caused by large numbers of individual particles'
        self.format = 'Turbidity values are represented as floating point numbers'
        self.examples = [1.0, 2.5, 3.8, 4.2, 5.9]

    def super_cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num, 3)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
waterpotability,"

class waterpotability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Potability of water'
        self.format = 'Binary representation as [0,1]'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
animename,"

class animename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the Anime'
        self.format = 'Name should be a string with the first letter of each word capitalized'
        self.examples = ['Kimi No Na Wa.', 'Fullmetal Alchemist: Brotherhood', 'Gintama°', 'Steins;Gate', 'Gintama&#039;']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
animegenre,"

class animegenre(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genre of the Anime'
        self.format = 'Genre should be a string with the first letter of each word capitalized'
        self.examples = ['Drama, Romance, School, Supernatural', 'Action, Adventure, Drama, Fantasy, Magic, Military, Shounen', 'Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen', 'Sci-Fi, Thriller', 'Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if all((word[0].isupper() for word in casted_val.split())):
                return True
        return False"
animetype,"

class animetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the Anime'
        self.format = 'Type should be a string with the first letter capitalized'
        self.examples = ['Tv', 'Ova', 'Movie', 'Special', 'Ona']

    def super_cast(self, val):
        val = str(val).title()
        if val not in ['Tv', 'Ova', 'Movie', 'Special', 'Ona', 'Music', 'Unknown']:
            return 'Unknown'
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Tv', 'Ova', 'Movie', 'Special', 'Ona', 'Music', 'Unknown']:
            return True
        else:
            return False"
animeepisodes,"

class animeepisodes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of episodes in the Anime'
        self.format = 'Number of episodes should be a positive integer'
        self.examples = [1, 64, 51, 24, 51]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                raise ValueError('Invalid number of episodes')
            return val
        except Exception as e:
            print(f'Error in super_cast: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return True"
animerating,"

class animerating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of the Anime'
        self.format = 'Rating should be a float between 1 and 10'
        self.examples = [9.37, 9.26, 9.25, 9.17, 9.16]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception('Invalid input for rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 10:
            return False
        else:
            return True"
animemembers,"

class animemembers(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of members who have watched the Anime'
        self.format = 'Number of members should be a positive integer'
        self.examples = [200630, 793665, 114262, 673572, 151266]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                raise ValueError('Invalid number of members')
            return val
        except ValueError:
            raise ValueError('Invalid input. Value should be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
useridentifier,"

class useridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a user'
        self.format = 'User ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
loanamount,"

class loanamount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The loan amount of an entity'
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples: list[float] = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        float_val = float(val)
        return round(float_val, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
activity,"

class activity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Activity'
        self.format = 'Activity name should be capitalized'
        self.examples = ['Farming', 'General Store', 'Personal Housing Expenses', 'Agriculture', 'Retail']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
lendercount,"

class lendercount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Lender count'
        self.format = 'Lender count should be a positive integer number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError('Value cannot be casted to lender count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
borrowergenders,"

class borrowergenders(GeneralSemanticType):

    def __init__(self):
        self.description = 'Borrower genders'
        self.format = 'Genders should be lowercase'
        self.examples = ['female', 'male', 'female, female, female', 'female, female', 'female, female, female, female']

    def super_cast(self, val):
        return str(val).lower() if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val in ['female', 'male']:
            return True
        else:
            return False"
repaymentinterval,"

class repaymentinterval(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Repayment interval'
        self.format: str = 'Repayment interval should be lowercase'
        self.examples: list = ['monthly', 'irregular', 'bullet', 'weekly']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['monthly', 'irregular', 'bullet', 'weekly']:
            return True
        else:
            return False"
worldregion,"

class worldregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'World Region'
        self.format = 'Region names should be capitalized and without any trailing or leading white spaces'
        self.examples = ['Sub-Saharan Africa', 'Latin America and Caribbean', 'East Asia and the Pacific', 'Arab States', 'South Asia']

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.strip().title()
            valid_regions = ['Sub-Saharan Africa', 'Latin America and Caribbean', 'East Asia and the Pacific', 'Arab States', 'South Asia', 'North America', 'Europe', 'Africa', 'Americas', 'South-East Asia', 'Eastern Mediterranean']
            if val in valid_regions:
                return val
            else:
                raise Exception('Invalid world region')
        else:
            raise TypeError('Value should be a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_regions = ['Sub-Saharan Africa', 'Latin America and Caribbean', 'East Asia and the Pacific', 'Arab States', 'South Asia', 'North America', 'Europe', 'Africa', 'Americas', 'South-East Asia', 'Eastern Mediterranean']
        if casted_val in valid_regions:
            return True
        else:
            return False"
mpi,"

class mpi(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Multidimensional Poverty Index'
        self.format: str = 'MPI should be a floating point number between 0 and 1'
        self.examples: list = [0.387, 0.466, 0.3, 0.301, 0.325]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
geocoordinates,"

class geocoordinates(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Geo Coordinates'
        self.format: str = 'tuple of two floating point numbers (latitude, longitude)'
        self.examples: list = [(36.7347725, 70.81199529999999), (35.1671339, 63.7695384), (35.8042947, 69.2877535), (36.7550603, 66.8975372), (34.8100067, 67.8212104)]

    def super_cast(self, val):
        if isinstance(val, str):
            (lat, lon) = map(float, re.findall('-?\\d+\\.\\d+', val))
            return (lat, lon)
        elif isinstance(val, tuple) and len(val) == 2 and all((isinstance(i, (int, float)) for i in val)):
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val:
            (lat, lon) = casted_val
            if lat >= -90 and lat <= 90 and (lon >= -180) and (lon <= 180):
                return True
        return False"
themeidentifier,"

class themeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a theme'
        self.format = 'String of alphanumeric characters'
        self.examples = ['414', '84', '199', '143', '143']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
themetype,"

class themetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'A Loan Theme Type'
        self.format = 'A string of characters'
        self.examples = ['General', 'Underserved', 'Agriculture', 'Rural Inclusion', 'Higher Education']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fieldpartnername,"

class fieldpartnername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Field Partner Name'
        self.format = 'Field Partner Name should be in title case'
        self.examples = ['Alalay Sa Kaunlaran (Aski)', 'Sef International', 'Gata Daku Multi-Purpose Cooperative (Gdmpc)', 'Paglaum Multi-Purpose Cooperative (Pmpc)', 'Interactuar']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
loanthemeidentifier,"

class loanthemeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Loan Theme ID'
        self.format = ""String that starts with 'a105000000'""
        self.examples = ['a1050000000wf0v', 'a1050000000wf0h', 'a1050000000wf0y', 'a1050000005yinr', 'a1050000002vk6u']

    def super_cast(self, val):
        string_val = str(val).lower()
        if string_val.startswith('a105000000'):
            return string_val
        else:
            raise Exception('Invalid Loan Theme ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.startswith('a105000000'):
            return True
        else:
            return False"
loanthemetype,"

class loanthemetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Loan Theme Type'
        self.format = 'In title case and as a string'
        self.examples = ['General', 'Agriculture', 'Underserved', 'Higher Education', 'Startup']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['General', 'Agriculture', 'Underserved', 'Higher Education', 'Startup']:
            return True
        else:
            return False"
forkiva,"

class forkiva(GeneralSemanticType):

    def __init__(self):
        self.description = 'A Boolean Semantic Type'
        self.format = 'In title-case and as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
iso,"

class iso(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISO country code'
        self.format = 'ISO code in uppercase'
        self.examples = ['PHL', 'ARM', 'COL', 'MEX', 'VNM']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) != 3 or not casted_val.isupper():
            return False
        try:
            pycountry.countries.get(alpha_3=casted_val)
            return True
        except KeyError:
            return False"
number,"

class number(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'General Number'
        self.format: str = 'Number should be an integer'
        self.examples: list = [43, 84, 129, 283, 1]

    def super_cast(self, val):
        if isinstance(val, str) and val == '\\N':
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise Exception('Invalid number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 22538:
            return True
        elif isinstance(casted_val, str) and casted_val == '\\N':
            return True
        else:
            return False"
locationname,"

class locationname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location Name'
        self.format = 'Location Name should be in title case'
        self.examples = ['Chouf, Lebanon', 'Tripoli, Lebanon', 'Nabatieh, Lebanon', 'Nablus, Palestine', 'UsulutÍ\x8dn, El Salvador']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val != '':
            return True
        else:
            return False"
ruralpercent,"

class ruralpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rural Percentage'
        self.format = 'Rural Percentage should be a floating point number between 0.0 and 100.0'
        self.examples = [60.0, 73.0, 85.0, 100.0, 0.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Invalid value for rural percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
bookauthor,"

class bookauthor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Author of a book'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['JJ Smith', 'Stephen King', 'Jordan B. Peterson', 'George Orwell', 'National Geographic Kids']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val.replace(' ', '').isalpha():
            return False
        else:
            return True"
bookrating,"

class bookrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'User rating for a book'
        self.format = 'Rating should be a floating point number, rounded to one decimal place'
        self.examples = [4.7, 4.6, 4.7, 4.7, 4.8]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 1)
        except ValueError:
            raise Exception('Invalid rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 5.0:
            return True
        else:
            return False"
bookreviews,"

class bookreviews(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Number of reviews for a book'
        self.format = 'Reviews should be an integer'
        self.examples = [17350, 2052, 18979, 21424, 7665]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input for number of reviews')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            raise Exception('Invalid number of reviews')"
bookprice,"

class bookprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Price of a book'
        self.format = 'In USD as an integer'
        self.examples = [8, 22, 15, 6, 12]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise Exception('Invalid value. Cannot be cast to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
bookpublicationyear,"

class bookpublicationyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year a book was published'
        self.format = 'Year should be an integer'
        self.examples = [2016, 2011, 2018, 2017, 2019]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0 and (val <= datetime.now().year):
            return val
        else:
            raise Exception('Invalid year')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0 and (casted_val <= datetime.now().year):
            return True
        else:
            return False"
bookgenre,"

class bookgenre(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genre of a book'
        self.format = 'Genre should be a string'
        self.examples = ['Non Fiction', 'Fiction', 'Non Fiction', 'Fiction', 'Non Fiction']

    def super_cast(self, val):
        genre = str(val)
        if genre not in ['Non Fiction', 'Fiction']:
            raise Exception('Invalid genre')
        return genre

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Non Fiction', 'Fiction']:
            return True
        else:
            return False"
caratweight,"

class caratweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight of a diamond'
        self.format = 'Weight should be a non-negative float'
        self.examples = [0.23, 0.21, 0.23, 0.29, 0.31]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid weight')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
cutquality,"

class cutquality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality of the cut of a diamond'
        self.format = 'String representing quality of cut'
        self.examples = ['Ideal', 'Premium', 'Good', 'Premium', 'Good']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val)
        if val not in ['Ideal', 'Premium', 'Very Good', 'Good', 'Fair']:
            return 'Invalid cut quality'
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Ideal', 'Premium', 'Very Good', 'Good', 'Fair']:
            return True
        else:
            return False"
diamondcolor,"

class diamondcolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of a diamond'
        self.format = 'String representing color'
        self.examples = ['E', 'E', 'E', 'I', 'J']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        val = str(val)
        if val not in ['D', 'E', 'F', 'G', 'H', 'I', 'J']:
            raise Exception('Invalid diamond color')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        if casted_val in ['D', 'E', 'F', 'G', 'H', 'I', 'J']:
            return True
        else:
            return False"
claritygrade,"

class claritygrade(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clarity grade of a diamond'
        self.format = 'String representing clarity grade'
        self.examples = ['SI2', 'SI1', 'VS1', 'VS2', 'SI2']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val)
        if val not in ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1', 'I2', 'I3']:
            raise Exception('Invalid clarity grade')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1', 'I2', 'I3']:
            return True
        else:
            return False"
dimension,"

class dimension(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dimension of a diamond'
        self.format = 'Dimension should be a non-negative float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val < 0:
            raise Exception('Invalid dimension')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (not pd.isna(casted_val)):
            if casted_val < 0 or math.isinf(casted_val):
                return False
            else:
                return True
        elif pd.isna(casted_val):
            return True
        else:
            return False"
priceusd,"

class priceusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a product in USD'
        self.format = 'Price should be a floating point number in USD units with up to 15 decimal places'
        self.examples = [1.0, 1.003, 326.0, 334.0, 335.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 15)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        if casted_val < 0:
            return False
        return True"
board,"

class board(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of board'
        self.format = 'Board type should be stored as strings'
        self.examples = ['Central', 'Others', 'Central', 'Others', 'Central']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['Central', 'Others']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Central', 'Others']:
            return True
        else:
            return False"
stream,"

class stream(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stream of study'
        self.format = 'Stream of study should be stored as strings'
        self.examples = ['Commerce', 'Science', 'Arts', 'Science', 'Commerce']

    def super_cast(self, val):
        if val in ['Commerce', 'Science', 'Arts']:
            return val
        else:
            raise Exception('Invalid stream')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Commerce', 'Science', 'Arts']:
            return True
        else:
            return False"
specialisation,"

class specialisation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Specialisation of study'
        self.format = 'Specialisation should be stored as strings'
        self.examples = ['Mkt&HR', 'Mkt&Fin', 'Mkt&Fin', 'Mkt&HR', 'Mkt&Fin']

    def super_cast(self, val):
        if val == 'Mkt&Fin' or val == 'Mkt&HR':
            return val
        else:
            raise Exception('Invalid specialisation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Mkt&Fin', 'Mkt&HR']:
            return True
        else:
            return False"
placementstatus,"

class placementstatus(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Placement status of a candidate'
        self.format = 'lower-cased string'
        self.examples = ['placed', 'not placed', 'placed', 'not placed', 'placed']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['placed', 'not placed']:
            return str_val
        else:
            raise Exception('Invalid placement status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['placed', 'not placed']:
            return True
        else:
            return False"
marriage,"

class marriage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Marriage status of an entity'
        self.format = 'Marriage status should be stored as integers'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
repaymentstatus,"

class repaymentstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Repayment status of an entity'
        self.format = 'Repayment status should be formatted as a whole number'
        self.examples = [-2, -1, 0, 2, 8]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'The given value {val} cannot be casted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -2 and casted_val <= 8:
            return True
        else:
            return False"
defaultpayment,"

class defaultpayment(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Default payment status'
        self.format: str = 'Boolean as integer'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
sensoridentifier,"

class sensoridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of a sensor'
        self.format = 'Strings representing sensor id'
        self.examples = ['HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe', 'HmiyD2TTLFNqkNe']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
datetimeformat,"

class datetimeformat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Datetime'
        self.format = ""Datetime strings must be of the form 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-07-01 00:00:00', '2020-06-10 14:00:00', '2020-06-19 04:00:00', '2020-06-19 05:00:00', '2020-06-19 06:00:00']

    def super_cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
        except ValueError:
            try:
                return datetime.strptime(val, '%m/%d/%Y %I:%M %p').strftime('%Y-%m-%d %H:%M:%S')
            except ValueError:
                return datetime.strptime(val, '%m/%d/%Y').strftime('%Y-%m-%d %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
yieldvalue,"

class yieldvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The energy yield in watt-hours (Wh)'
        self.format = 'Yield should be represented as a float in watt-hours'
        self.examples = [0.0, 1000.0, 5000.0, 10000.0, 15000.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
diabetespedigreefunction,"

class diabetespedigreefunction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diabetes Pedigree Function'
        self.format = 'A floating point number rounded to three decimal places'
        self.examples = [0.123, 0.456, 0.789, 1.123, 1.456]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(val)
        return round(val, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 2.5:
            return True
        else:
            return False"
stateorut,"

class stateorut(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the state or union territory in India'
        self.format = 'Each word in the name should be capitalized'
        self.examples = ['Andaman and Nicobar', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
questionidentifier,"

class questionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each survey question'
        self.format = 'Whole number from 0 to 149'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        casted_val = int(val)
        if 0 <= casted_val <= 149:
            return casted_val
        else:
            raise Exception('Value out of valid range')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 149:
            return True
        else:
            return False"
questiontext,"

class questiontext(GeneralSemanticType):

    def __init__(self):
        self.description = 'The full text of a survey question'
        self.format = 'Question text should start with a capitalized letter and end with a punctuation mark'
        self.examples = ['I enjoy listening to music.', 'I prefer.', 'Dance, Disco, Funk.', 'Folk music.', 'Country.']

    def super_cast(self, val):
        val = str(val).strip()
        if not val.endswith('.'):
            val += '.'
        return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        if not casted_val[0].isupper() or not casted_val.endswith('.'):
            return False
        return True"
questioncategory,"

class questioncategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'The category of a survey question'
        self.format = 'Question category should be a single capitalized word or a list of capitalized words separated by commas'
        self.examples = ['Music', 'Slow Songs Or Fast Songs', 'Dance', 'Folk', 'Country']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
rottentomatoesrating,"

class rottentomatoesrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rotten Tomatoes rating for a movie'
        self.format = 'Ratings are integers between 0 and 100'
        self.examples = [98, 97, 95, 94, 94]

    def super_cast(self, val):
        try:
            rating = int(str(val).split('/')[0])
            if rating >= 0 and rating <= 100:
                return rating
            else:
                return 'Invalid Rating'
        except ValueError:
            return 'Invalid Rating'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0 and (casted_val <= 100):
            return True
        else:
            return False"
moviestreaming,"

class moviestreaming(GeneralSemanticType):

    def __init__(self):
        self.description = 'Movie streaming status'
        self.format = 'either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
length,"

class length(GeneralSemanticType):

    def __init__(self):
        self.description = 'The length measurement of an entity'
        self.format = 'Length should be a floating point number with one decimal place'
        self.examples = [5.1, 4.9, 4.7, 4.6, 5.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 1)
        else:
            raise ValueError('Invalid input. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
width,"

class width(GeneralSemanticType):

    def __init__(self):
        self.description = 'The width measurement of an entity'
        self.format = 'Width should be a floating point number with one decimal place'
        self.examples: list[float] = [3.5, 3.0, 3.2, 3.1, 3.6]

    def super_cast(self, val):
        num = float(val)
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
irisspecies,"

class irisspecies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Species of Iris Flower'
        self.format = ""Species names should be strings of the form 'Iris-xxxx'""
        self.examples = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
racepoints,"

class racepoints(GeneralSemanticType):

    def __init__(self):
        self.description = 'Points earned in a race'
        self.format = 'Race points should be floating point values'
        self.examples = [14.0, 8.0, 9.0, 5.0, 2.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 0 <= float_val <= float('inf'):
                return float_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid Input. A floating-point value was expected')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
racewins,"

class racewins(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of wins in a race'
        self.format = 'Number of wins should be integer values'
        self.examples = [1, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except ValueError:
            raise Exception(f'Value {val} cannot be casted to integer')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 19:
            raise Exception(f'Value {casted_val} is not within the valid range of 0-19')
        return True"
racingteam,"

class racingteam(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Racing Team'
        self.format = 'All words in the team name should be capitalized'
        self.examples = ['McLaren', 'BMW Sauber', 'Williams', 'Renault', 'Toro Rosso']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if all((word[0].isupper() for word in casted_val.split())):
                return True
        return False"
points,"

class points(GeneralSemanticType):

    def __init__(self):
        self.description = 'Points scored in a game or race'
        self.format = 'Points should be a floating point number'
        self.examples = [10.0, 8.0, 6.0, 5.0, 4.0]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        if isinstance(val, (int, float)) and val >= 0:
            return float(val)
        else:
            raise Exception('Invalid points value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
wins,"

class wins(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of wins'
        self.format = 'Non-negative integer'
        self.examples = [1, 0, 0, 0, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            return 'Invalid wins'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
lap,"

class lap(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of a lap in a race'
        self.format = 'A positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val > 0:
                return int_val
            else:
                raise ValueError('The value must be a positive integer.')
        except ValueError:
            raise ValueError('The value must be a positive integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
milliseconds,"

class milliseconds(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration in milliseconds'
        self.format = 'Duration should be a positive integer representing milliseconds'
        self.examples = [98109, 93006, 92713, 92803, 92342, 26898, 25021, 23426, 23251, 23842]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
pitstopnumber,"

class pitstopnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The order of pit stops made by a driver in a race'
        self.format = 'Pit stop numbers should be integers from 1 to 6'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        num = int(val)
        if num < 1 or num > 6:
            raise Exception('Invalid pitstop number')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 7):
            return True
        else:
            raise Exception('Validation failed. Invalid pitstop number.')"
lapnumber,"

class lapnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The lap number on which a pit stop was made'
        self.format = 'Integer greater than 0'
        self.examples = [1, 13, 24, 35, 74]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1:
                return 'Invalid lap number'
            else:
                return num
        except ValueError:
            return 'Invalid lap number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
pitstopduration,"

class pitstopduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The duration of a pit stop'
        self.format = 'Floating point numbers with three decimal places for milliseconds'
        self.examples = [22.303, 22.838, 21.012, 24.083, 23.732]

    def super_cast(self, val):
        num = float(val)
        return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
roundclass,"

class roundclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Round of a race'
        self.format = 'Positive integer between 1 and 21'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 21:
            raise ValueError('Invalid round')
        return True"
circuitidentifier,"

class circuitidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of a circuit'
        self.format = 'Circuit ID should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid circuit ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 73:
            return True
        else:
            return False"
grandprixname,"

class grandprixname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a Grand Prix'
        self.format = 'The first letter of each word in a Grand Prix name should be capitalized.'
        self.examples = ['Italian Grand Prix', 'British Grand Prix', 'Monaco Grand Prix', 'Belgian Grand Prix', 'German Grand Prix']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
racingpoints,"

class racingpoints(GeneralSemanticType):

    def __init__(self):
        self.description = 'Points scored in a race'
        self.format = 'Points should be a non-negative float'
        self.examples = [10.0, 8.0, 6.0, 5.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return float('nan')
            else:
                return num
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
racinglaps,"

class racinglaps(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of laps completed in a race'
        self.format = 'Non-negative integer'
        self.examples = [58, 57, 56, 55, 54]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Laps cannot be negative')
            return num
        except Exception as e:
            print(f'Error: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return True"
statusidentifier,"

class statusidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique ID for each status'
        self.format = 'Integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value could not be casted to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 136:
            return True
        else:
            return False"
racestatus,"

class racestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of the race'
        self.format = 'Strings'
        self.examples = ['Finished', 'Disqualified', 'Accident', 'Collision', 'Engine']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
cabinnumber,"

class cabinnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cabin number of a passenger'
        self.format = 'Alphanumeric string'
        self.examples = ['B57 B59 B63 B66', 'C31', 'B45', 'C116', 'C78']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9 ]+$', casted_val):
            return True
        else:
            return False"
socialmediausername,"

class socialmediausername(GeneralSemanticType):

    def __init__(self):
        self.description = 'A username used to uniquely identify a user on social media platforms'
        self.format = 'Usernames should be formatted as a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
socialmediascreenname,"

class socialmediascreenname(GeneralSemanticType):

    def __init__(self):
        self.description = 'A screen name used to publicly identify a user on social media platforms'
        self.format = 'Screen names should be formatted as a positive integer'
        self.examples = [44953, 44954, 44955, 44956, 44957]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('The value provided cannot be cast to an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tweetdate,"

class tweetdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date a tweet was posted'
        self.format = ""Date should be formatted as 'dd-mm-yyyy'""
        self.examples = ['02-03-2020', '12-03-2020', '14-03-2020', '15-03-2020', '16-03-2020']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%d-%m-%Y').date()
            except ValueError:
                raise Exception(""Invalid date format. Expected 'dd-mm-yyyy'."")
        else:
            raise Exception('Expected string input.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime.date):
            return True
        else:
            return False"
suicidescount,"

class suicidescount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Suicides'
        self.format = 'Number of suicides should be a non-negative integer'
        self.examples = [0, 1, 14, 91, 22338]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        count = int(val)
        if count >= 0:
            return count
        else:
            raise ValueError('Invalid count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pickupaddress,"

class pickupaddress(GeneralSemanticType):

    def __init__(self):
        self.description = 'Address where the pickup was made'
        self.format = ""Address should be a string in the format 'street neighborhood, city'""
        self.examples = [' 874 E 139th St Mott Haven, BX', ' 628 E 141st St Mott Haven, BX', ' 601 E 156th St South Bronx, BX', ' 708 E 138th St Mott Haven, BX', ' 700 E 140th St Mott Haven, BX']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
street,"

class street(GeneralSemanticType):

    def __init__(self):
        self.description = 'Street'
        self.format = 'Streets are represented as strings'
        self.examples = ['MURRAY ST', 'AVENUE B', 'CHRISTOPHER ST', 'E 7 ST', 'W 26 ST']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
basename,"

class basename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the car service'
        self.format = 'Each word in the name should start with a capitalized letter'
        self.examples = ['MITA LIMOUSINE, INC.', 'BELL RADIO INC', 'NY 88 EXPRESS CORP.', 'JOY CAR SERVICES INC.', 'TEL-A-CAR OF NEW YORK, LLC']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
pickupdate,"

class pickupdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Pickup date'
        self.format = ""Date should be in the format 'YYYY-MM-DD'""
        self.examples = ['2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01', '2015-05-01']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%m/%d/%Y').strftime('%Y-%m-%d')
            except ValueError:
                raise Exception(""Date format should be 'MM/DD/YYYY'"")
        else:
            raise Exception('Invalid date type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            date = datetime.strptime(casted_val, '%Y-%m-%d')
            return datetime(2015, 1, 1) <= date <= datetime(2015, 12, 31)
        except ValueError:
            return False"
numberoftrips,"

class numberoftrips(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of trips'
        self.format = 'Number of trips as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Expected integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            raise Exception('Invalid number of trips. It should be a non-negative integer.')"
numberofvehicles,"

class numberofvehicles(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vehicles'
        self.format = 'Integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.strip() == '-':
            return 0
        elif isinstance(val, str) and val.strip().isdigit():
            return int(val.strip())
        elif isinstance(val, int):
            return val
        else:
            raise ValueError(""Invalid input. Expecting integer or '-' string."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
statusenum,"

class statusenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of the trip'
        self.format = ""Status should be a string that is either 'Arrived', 'Assigned', or 'Cancelled'""
        self.examples = ['Cancelled', 'Arrived', 'Assigned', 'Assigned', 'Assigned']

    def super_cast(self, val):
        if str(val) in ['Arrived', 'Assigned', 'Cancelled']:
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Arrived', 'Assigned', 'Cancelled']:
            return True
        else:
            return False"
datetimeobject,"

class datetimeobject(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and Time of the Event'
        self.format = 'YYYY-MM-DD HH:MM:SS'
        self.examples = ['2018-12-15 23:59:59', '2018-12-16 23:59:59', '2018-12-17 23:59:59', '2018-12-18 23:59:59', '2018-12-19 23:59:59']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%m/%d/%Y %H:%M').strftime('%Y-%m-%d %H:%M:%S')
            except ValueError:
                return float('nan')
        elif isinstance(val, datetime):
            return val.strftime('%Y-%m-%d %H:%M:%S')
        else:
            raise TypeError('Expected a string or datetime object')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
basecode,"

class basecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Base Code'
        self.format = 'Base Code should be a string'
        self.examples = ['B02598', 'B02512', 'B02598', 'B02512', 'B02598']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['B02598', 'B02512']:
            return val
        else:
            raise ValueError('Invalid base code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['B02598', 'B02512']:
            return True
        else:
            return False"
dispatchnumber,"

class dispatchnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dispatching base number'
        self.format = ""Dispatching base numbers should be strings of the form 'B#####'""
        self.examples = ['B02764', 'B02682', 'B02598', 'B02617']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('B[0-9]{5}', casted_val):
            return True
        else:
            return False"
pickuptime,"

class pickuptime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time of the pickup'
        self.format = 'Pickup dates should be datetime objects'
        self.examples = ['2015-03-27 19:28:00', '2015-06-16 17:36:00', '2015-03-31 20:21:00']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise Exception(""Invalid datetime format. Expected format is 'YYYY-MM-DD HH:MM:SS'"")
        elif isinstance(val, datetime):
            return val
        else:
            raise Exception('Expected a string or datetime object.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            if casted_val > datetime.now():
                raise Exception('Invalid datetime. The pickup time cannot be in the future.')
            return True
        else:
            return False"
affiliatednumber,"

class affiliatednumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Affiliated base number'
        self.format = ""Affiliated base numbers should be strings of the form 'B#####'""
        self.examples = ['B02764', 'B02682', 'B02598', 'B02617', 'B02765']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('B[0-9]{5}', casted_val):
            return True
        else:
            return False"
locationidentifier,"

class locationidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location ID'
        self.format = 'Location IDs should be integers'
        self.examples = [141, 65, 100, 80, 90]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 265:
                raise ValueError('Invalid location ID')
            else:
                return num
        except ValueError:
            print('Invalid input. Please provide a valid integer within the range [1, 265].')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
baseidentifier,"

class baseidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Base ID of an Uber trip'
        self.format = 'Base ID should be a string'
        self.examples = ['B02512', 'B02512', 'B02512', 'B02512', 'B02512']

    def super_cast(self, val):
        if val in ['B02598', 'B02512']:
            return str(val)
        else:
            raise Exception('Invalid Base ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['B02598', 'B02512']:
            return True
        else:
            return False"
base,"

class base(GeneralSemanticType):

    def __init__(self):
        self.description = 'Categorical variable representing the base of an Uber vehicle'
        self.format = 'Should be a string'
        self.examples = ['B02512', 'B02598']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise Exception('Invalid base value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
datetimestamp,"

class datetimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time represented as a string'
        self.format = 'YYYY-MM-DD HH:MM:SS'
        self.examples = ['2014-08-06 23:59:59', '2014-08-07 23:59:59', '2014-08-08 23:59:59', '2014-08-09 23:59:59', '2014-08-10 23:59:59']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d %H:%M:%S')
        else:
            try:
                return datetime.strptime(val, '%m/%d/%Y %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
            except ValueError:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
uberbaseidentifier,"

class uberbaseidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of Uber base'
        self.format = ""IDs are strings that start with 'B0' followed by 4 digits""
        self.examples = ['B02598', 'B02512', 'B02598', 'B02512', 'B02598']

    def super_cast(self, val):
        match_obj = re.match('B0[0-9]{4}', str(val))
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid base ID'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('B0[0-9]{4}', casted_val):
            return True
        else:
            return False"
datasetidentifier,"

class datasetidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dataset Identifier'
        self.format = 'Dataset Identifier should be a single character string'
        self.examples = ['a', 'b', 'c', 'd', 'e']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 1:
            return val
        else:
            raise Exception(f'Invalid value: {val}. Expected a single character string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 1 and casted_val.isalpha():
            return True
        else:
            return False"
filename,"

class filename(GeneralSemanticType):

    def __init__(self):
        self.description = 'A Filename'
        self.format = 'In lower-case and as a string'
        self.examples = ['set_a/artifact__201012172012.wav', 'set_a/artifact__201105040918.wav', 'set_a/artifact__201106021541.wav', 'set_a/artifact__201105041959.wav', 'set_a/artifact__201105051017.wav', 'mjk_keiji', 'mjk_sanbika', 'mjk_idol', 'mjk_paris', 'mjk_showakayo']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
labeltype,"

class labeltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label Type'
        self.format = 'Label Type should be a string'
        self.examples = ['artifact', 'murmur', 'normal', 'extrahls']

    def super_cast(self, val):
        if val in ['artifact', 'murmur', 'normal', 'extrahls']:
            return str(val)
        else:
            return 'Invalid Label Type'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['artifact', 'murmur', 'normal', 'extrahls']:
            return True
        else:
            return False"
sublabeltype,"

class sublabeltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sub Label Type'
        self.format = 'NaN value'
        self.examples = [np.nan, np.nan, np.nan, np.nan, np.nan]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return 'Invalid Sub Label Type'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        else:
            return False"
recordingfilename,"

class recordingfilename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Filename of a sound recording'
        self.format = ""Set name, label, and timestamp should be separated by double underscores and the file extension should be '.wav'""
        self.examples = ['set_a/normal__201105011626.wav', 'set_a/normal__201105021804.wav', 'set_a/normal__201103090635.wav', 'set_a/normal__201102081321.wav', 'set_a/normal__201108011118.wav']

    def super_cast(self, val):
        val = str(val)
        match_obj = re.match('set_a/[a-z]+__\\d{12}\\.wav$', val)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid filename'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('set_a/[a-z]+__\\d{12}\\.wav$', casted_val):
            return True
        else:
            return False"
recordingcycle,"

class recordingcycle(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cycle number of a sound recording'
        self.format = 'Cycle should be an integer greater than or equal to 1'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception('Error in super_cast: {}'.format(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
soundtype,"

class soundtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of heart sound'
        self.format = 'The sound type should be represented as a string'
        self.examples = ['S1', 'S2', 'S1', 'S2', 'S1']

    def super_cast(self, val):
        val = str(val)
        if val not in ['S1', 'S2']:
            raise Exception('Invalid sound type')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S1', 'S2']:
            return True
        else:
            return False"
soundlocation,"

class soundlocation(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The location of a sound in the recording'
        self.format: str = 'Location should be an integer greater than or equal to 0'
        self.examples: list = [10021, 20759, 35075, 47244, 62992]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise Exception('Invalid location')
            return val
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
datasetlabel,"

class datasetlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label of the dataset'
        self.format = 'Dataset label should be stored as strings'
        self.examples = ['b', 'b', 'b', 'b', 'b']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'b':
            return True
        else:
            return False"
heartbeatlabel,"

class heartbeatlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label of the heart beat sound'
        self.format = 'Heart beat label should be stored as strings'
        self.examples = ['normal', 'murmur', 'extrastole']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['normal', 'murmur', 'extrastole']:
            return True
        else:
            return False"
subheartbeatlabel,"

class subheartbeatlabel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sublabel of the heart beat sound'
        self.format = 'Sublabel should be stored as strings or nan'
        self.examples = ['noisynormal', 'noisymurmur', float('nan')]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['noisynormal', 'noisymurmur', float('nan')]:
            return True
        else:
            return False"
stateus,"

class stateus(GeneralSemanticType):

    def __init__(self):
        self.description = 'U.S. State names'
        self.format = 'State names should be capitalized and spelled correctly'
        self.examples = ['Vermont', 'New Hampshire', 'Missouri', 'North Carolina', 'Indiana']

    def super_cast(self, val):
        val = str(val).title()
        if val in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [state.name for state in pycountry.subdivisions.get(country_code='US')]:
            return True
        else:
            return False"
countyus,"

class countyus(GeneralSemanticType):

    def __init__(self):
        self.description = 'U.S. County names'
        self.format = 'County names should be capitalized and spelled correctly'
        self.examples = ['Jefferson County', 'Wayne County', 'Lincoln County', 'Randolph County', 'Madison County']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
electionresult,"

class electionresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Result of an election'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
electiondistrict,"

class electiondistrict(GeneralSemanticType):

    def __init__(self):
        self.description = 'An election district in the United States'
        self.format = ""Capitalized string following the format 'State’s District Number' or 'State at large'""
        self.examples = ['Louisiana’s 5th district', 'Vermont at large', 'Hawaii’s 2nd district', 'New York’s 17th district', 'Louisiana’s 2nd district']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile('[A-Z][a-z]+’s \\d+ district| at large')
        if pattern.match(casted_val):
            return True
        else:
            return False"
electionwon,"

class electionwon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Election status'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
uscounty,"

class uscounty(GeneralSemanticType):

    def __init__(self):
        self.description = 'U.S. County'
        self.format = 'U.S. counties should be represented as capitalized strings'
        self.examples = ['Washington County', 'Jefferson County', 'Jackson County', 'Lincoln County', 'Franklin County']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
won,"

class won(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a team or player has won'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
salaryestimate,"

class salaryestimate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Salary estimates for a specific role'
        self.format = 'Salary estimates are typically represented as ranges (min-max) in USD'
        self.examples = ['$42K-$76K (Glassdoor est.)', '$41K-$78K (Glassdoor est.)', '$50K-$86K (Glassdoor est.)', '$35K-$67K (Glassdoor est.)', '$43K-$76K (Glassdoor est.)']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = '\\$\\d{1,3}K-\\$\\d{1,3}K \\(Glassdoor est.\\)'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
easyapply,"

class easyapply(GeneralSemanticType):

    def __init__(self):
        self.description = 'Easy Apply option status'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val == 'True':
            return True
        else:
            return False

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
authorname,"

class authorname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the author'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Barracuda Brigade', 'Reasoning With Facts', 'Fed Up', 'Starkman', 'Admin']

    def super_cast(self, val):
        if pd.isnull(val):
            return val
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
datetimeiso,"

class datetimeiso(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents date and time'
        self.format = 'Date and time should be represented as a datetime object'
        self.examples = [datetime(2020, 1, 1, 12, 0, 0), datetime(2022, 12, 31, 23, 59, 59), datetime.now(), datetime(2020, 6, 1, 12, 0, 0), datetime(2021, 1, 1, 0, 0, 0)]

    def super_cast(self, val):
        if pd.isnull(val):
            return val
        try:
            return datetime.fromisoformat(val)
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime) and datetime.min <= casted_val <= datetime.max:
            return True
        else:
            return False"
languagecode,"

class languagecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a language code'
        self.format = 'Should be a string of 2 lowercase letters'
        self.examples = ['en', 'ru', 'es', 'de', 'fr']

    def super_cast(self, val):
        if pd.isnull(val):
            return val
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 2:
            return True
        else:
            return False"
url,"

class url(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a URL'
        self.format = 'Should be a string'
        self.examples = ['www.google.com', 'www.facebook.com', 'www.wikipedia.org', 'www.amazon.com', 'www.twitter.com']

    def super_cast(self, val):
        if pd.isnull(val):
            return None
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        regex = re.compile('^(?:http|ftp)s?://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:/?|[/?]\\S+)$', re.IGNORECASE)
        return re.match(regex, casted_val) is not None"
domainrank,"

class domainrank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the rank of a domain'
        self.format = 'Should be a non-negative floating-point number'
        self.examples = [0.0, 100.0, 1000.0, 10000.0, 50000.0]

    def super_cast(self, val):
        if math.isnan(val):
            return val
        if val < 0:
            raise Exception('Invalid domain rank')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > float('inf'):
            return False
        else:
            return True"
spamscore,"

class spamscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a spam score'
        self.format = 'Should be a floating-point number between 0 and 1'
        self.examples = [0.0, 0.1, 0.2, 0.3, 0.4]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and 0 <= val <= 1:
            return float(val)
        else:
            raise ValueError(f'Invalid value: {val}. Spam score should be a floating-point number between 0 and 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
fakenewstype,"

class fakenewstype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a type of fake news'
        self.format = 'Should be a string'
        self.examples = ['bs', 'bias', 'conspiracy', 'hate', 'satire']

    def super_cast(self, val):
        if pd.isnull(val):
            return val
        if val not in self.examples:
            raise Exception('Invalid fake news type')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
userlocation,"

class userlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of the user on their Twitter profile'
        self.format = 'User locations should be strings with no special characters'
        self.examples = ['New York, NY', 'London, UK', 'Paris, France', 'Tokyo, Japan', 'Berlin, Germany']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.replace('\n', ' ').replace('\r', '')
        else:
            raise Exception(f'Expected string, got {type(val)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            for country in pycountry.countries:
                if country.name in casted_val:
                    return True
            return False
        else:
            return False"
followercount,"

class followercount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of followers a user has on Twitter'
        self.format = 'Follower counts should be formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
friendcount,"

class friendcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of friends (users that the user is following) a user has on Twitter'
        self.format = 'Formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
favouritecount,"

class favouritecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of favourites (likes) a user has given on Twitter'
        self.format = 'Favourite counts should be formatted as integer values with no decimal places'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
userverified,"

class userverified(GeneralSemanticType):

    def __init__(self):
        self.description = 'User verification status'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
hashtags,"

class hashtags(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hashtags used in the tweet'
        self.format = ""Hashtags should be strings beginning with a '#' and containing no spaces or special characters, except for underscores""
        self.examples = ['#COVID19', '#coronavirus', '#pandemic', '#virus', '#stayhome']

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        elif isinstance(val, str):
            return str(val).replace('[', '').replace(']', '').replace(""'"", '').replace(' ', '').split(',')
        elif isinstance(val, list):
            return [str(item).replace('[', '').replace(']', '').replace(""'"", '').replace(' ', '') for item in val]
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, list):
            return all((re.match('^#[a-zA-Z0-9_]+$', item) for item in casted_val))
        else:
            return pd.isnull(casted_val)"
isretweet,"

class isretweet(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a tweet is a retweet'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
calorielevel,"

class calorielevel(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Calorie level represents the level of calories in a food item'
        self.format = 'Calorie level should be formatted as an integer, 0 for low, 1 for medium and 2 for high'
        self.examples = [0, 0, 1, 0, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1, 2]:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid calorie level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2]:
            return True
        else:
            return False"
itemcount,"

class itemcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of items associated with a user'
        self.format = 'Count should be a positive integer'
        self.examples = [31, 39, 27, 1513, 376]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 2:
                return int_val
            else:
                raise ValueError('Value cannot be less than 2')
        except ValueError:
            raise ValueError('Invalid input: Non-integer value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 2:
            return True
        else:
            return False"
recipeindex,"

class recipeindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of the recipe in the dataset'
        self.format = 'Integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception(f""Couldn't cast the value {val} to integer. Error: {str(e)}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
recipename,"

class recipename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a recipe'
        self.format = 'Recipe name should be represented as a string'
        self.examples = ['arriba   baked winter squash mexican style', 'a bit different  breakfast pizza', 'all in the kitchen  chili', 'alouette  potatoes', 'amish  tomato ketchup  for canning']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
recipepreparationtime,"

class recipepreparationtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time in minutes required for preparing a recipe'
        self.format = 'Preparation time should be represented as an integer'
        self.examples = [55, 30, 130, 45, 190]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(f'Cannot convert {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
recipecontributoridentifier,"

class recipecontributoridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique ID for a recipe contributor'
        self.format = 'Contributor ID should be represented as an integer'
        self.examples = [47892, 26278, 196586, 68585, 41706]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
recipedate,"

class recipedate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when the recipe was submitted'
        self.format = 'Recipe date should be represented as a string in the format YYYY-MM-DD'
        self.examples = ['2005-09-16', '2002-06-17', '2005-02-25', '2003-04-14', '2002-10-25']

    def super_cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
recipesteps,"

class recipesteps(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of steps in a recipe'
        self.format = 'Number of steps should be represented as an integer'
        self.examples = [11, 9, 6, 11, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            print('The value cannot be casted to integer')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return 0 <= casted_val <= float('inf')
        return False"
recipeingredients,"

class recipeingredients(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of ingredients in a recipe'
        self.format = 'Integer'
        self.examples = [7, 6, 13, 11, 8]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
u,"

class u(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unknown numeric attribute'
        self.format = 'Should be formatted as an integer'
        self.examples = [5, 23, 31, 44, 45]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
i,"

class i(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unknown numeric attribute'
        self.format = 'Should be formatted as an integer'
        self.examples: list = [177317, 170785, 165555, 177453, 142367]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
gametype,"

class gametype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a game'
        self.format = 'Game type should be a string'
        self.examples = ['R', 'P', 'A']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['R', 'P', 'A']:
            return True
        else:
            return False"
datetimegmt,"

class datetimegmt(GeneralSemanticType):

    def __init__(self):
        self.description = 'Datetime in GMT'
        self.format = ""Datetime should be in the format 'yyyy-mm-ddThh:mm:ssZ'""
        self.examples = ['2016-10-19T00:30:00Z', '2018-02-07T00:00:00Z', '2015-11-24T01:00:00Z', '2016-02-17T00:00:00Z', '2017-12-30T03:00:00Z']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%dT%H:%M:%SZ')
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%dT%H:%M:%SZ').strftime('%Y-%m-%dT%H:%M:%SZ')
            except ValueError:
                raise Exception('Invalid datetime string format.')
        else:
            raise TypeError('Value must be a datetime object or a string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%dT%H:%M:%SZ')
            return True
        except ValueError:
            return False"
goalcount,"

class goalcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of goals scored by a team'
        self.format = 'Goal count should be a non-negative integer number'
        self.examples = [4, 1, 3, 2, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Goal count cannot be negative')
            return casted_val
        except ValueError:
            raise ValueError('Invalid input. Expected a non-negative integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
rinkside,"

class rinkside(GeneralSemanticType):

    def __init__(self):
        self.description = 'Side of the rink where the home team started the game'
        self.format = 'Rink side should be a string'
        self.examples = ['right', 'left']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['right', 'left', np.nan]:
            return True
        else:
            return False"
venue,"

class venue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Venue where a game was played'
        self.format = 'String, where each word is capitalized'
        self.examples = ['United Center', 'KeyBank Center', 'MTS Centre', 'PNC Arena', 'Honda Center']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
venuelink,"

class venuelink(GeneralSemanticType):

    def __init__(self):
        self.description = 'API link to the venue'
        self.format = 'Venue link should be a string'
        self.examples = ['/api/v1/venues/null', '/api/v1/venues/5059', '/api/v1/venues/5098', '/api/v1/venues/5054', '/api/v1/venues/5092']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.startswith('/api/v1/venues/'):
            return True
        else:
            return False"
venuetimezoneoffset,"

class venuetimezoneoffset(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timezone offset of the venue location'
        self.format = 'Timezone offset should be an integer number'
        self.examples = [-5, -4, -5, -4, -7]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(-8, -3):
                return casted_val
            else:
                raise ValueError('The value is not in the expected range.')
        except ValueError as ve:
            print(ve)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
venuetimezonetz,"

class venuetimezonetz(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timezone of the venue location'
        self.format = 'Timezone should be a string'
        self.examples = ['CDT', 'EDT', 'CDT', 'EDT', 'PDT']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['EDT', 'CDT', 'PDT', 'EST', 'MDT']:
            return True
        else:
            return False"
decision,"

class decision(GeneralSemanticType):

    def __init__(self):
        self.description = 'A decision'
        self.format = 'In lower-case and as a string'
        self.examples = ['field', 'bat', 'w', 'l', np.nan]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['field', 'bat', 'w', 'l', np.nan]:
            return True
        else:
            return False"
teamstrength,"

class teamstrength(GeneralSemanticType):

    def __init__(self):
        self.description = 'The strength of a team during a play in a hockey game'
        self.format = ""A string that is one of the following: ['Even', 'Power Play', 'Short Handed']""
        self.examples = ['Even', 'Power Play', 'Short Handed']

    def super_cast(self, val):
        casted_val = str(val)
        if casted_val not in ['Even', 'Power Play', 'Short Handed']:
            raise ValueError('Invalid value')
        else:
            return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Even', 'Power Play', 'Short Handed']:
            return True
        else:
            return False"
isgamewinninggoal,"

class isgamewinninggoal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if a goal in a game was the winning one'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
isemptynet,"

class isemptynet(GeneralSemanticType):

    def __init__(self):
        self.description = 'An indication of whether the network is empty'
        self.format = 'Boolean'
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        else:
            return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
officialname,"

class officialname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the official in NHL games'
        self.format = ""The official name should be in the format 'first name last name'""
        self.examples = ['Derek Amell', 'Pierre Racicot', 'Brad Kovachik', ""Dan O'Halloran"", 'Kevin Pollock']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val.split()) >= 2:
            return True
        else:
            return False"
officialtype,"

class officialtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Role of the official in NHL games'
        self.format = ""The official type should be in the format 'Referee' or 'Linesman'""
        self.examples = ['Referee', 'Linesman', 'Referee', 'Linesman', 'Referee']

    def super_cast(self, val):
        if val in ['Referee', 'Linesman']:
            return val
        else:
            raise Exception('Invalid official type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Referee', 'Linesman']:
            return True
        else:
            return False"
penaltyseverity,"

class penaltyseverity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Severity of the penalty'
        self.format = 'Penalty severity is a string representing the severity of the penalty'
        self.examples = ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']

    def super_cast(self, val):
        if val in ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']:
            return str(val)
        else:
            return 'Invalid penalty severity'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Minor', 'Major', 'Bench Minor', 'Misconduct', 'Game Misconduct']:
            return True
        else:
            return False"
eventtype,"

class eventtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of event that occured'
        self.format = 'Event type should be a string'
        self.examples = ['Faceoff', 'Shot', 'Stoppage', 'Hit', 'Blocked Shot', 'view', 'addtocart', 'transaction']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
periodtype,"

class periodtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of period in which the event took place'
        self.format = 'Period type should be a string'
        self.examples = ['REGULAR', 'OVERTIME', 'SHOOTOUT']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['REGULAR', 'OVERTIME', 'SHOOTOUT']:
            return True
        else:
            return False"
periodtime,"

class periodtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The time in seconds at which the event took place in the given period'
        self.format = 'Period time should be an integer between 0 and 1200'
        self.examples = [0, 269, 582, 904, 1200]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1200:
            return True
        else:
            return False"
playertype,"

class playertype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The role a player had in a play during an NHL game'
        self.format = 'Player type should be one of the predefined strings'
        self.examples = ['Winner', 'Loser', 'Shooter', 'Goalie', 'Scorer']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Winner', 'Loser', 'Shooter', 'Goalie', 'Scorer']
        if casted_val in valid_values:
            return True
        else:
            return False"
shiftstart,"

class shiftstart(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shift Start Time in Seconds'
        self.format = 'Shift Start Time should be integer values in seconds'
        self.examples: list[int] = [0, 207, 375, 556, 605]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception(f'Unable to cast value {val} to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 3891:
            return True
        else:
            return False"
shiftend,"

class shiftend(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shift End Time in Seconds'
        self.format = 'Integer values in seconds'
        self.examples = [42, 247, 413, 574, 631]

    def super_cast(self, val):
        try:
            val = int(val)
            if isinstance(val, int):
                return val
            else:
                raise ValueError
        except ValueError:
            raise ValueError('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 7 or casted_val > 3900:
            raise ValueError('Value out of valid range [7, 3900].')
        else:
            return True"
shots,"

class shots(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of shots'
        self.format: str = 'Shots should be a positive integer'
        self.examples: list = [0, 4, 1, 0, 3]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid number of shots')
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        return False"
hits,"

class hits(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of hits'
        self.format = 'A positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, (int, np.integer)) and val >= 0:
            return int(val)
        else:
            raise Exception('Invalid input. Expected a non-negative integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, (int, np.integer)) and casted_val >= 0:
            return True
        else:
            return False"
powerplaygoals,"

class powerplaygoals(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of power play goals'
        self.format = 'Power Play Goals should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise ValueError('The value should be a non-negative integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
powerplayassists,"

class powerplayassists(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of power play assists'
        self.format = 'Power Play Assists should be a positive integer'
        self.examples = [0, 0, 0, 2, 0]

    def super_cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError('Invalid number of power play assists')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
faceoffwins,"

class faceoffwins(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of face-off wins'
        self.format = 'Face-Off Wins should be a positive integer'
        self.examples = [0, 0, 0, 11, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid number of face-off wins')
            return num
        except:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
faceofftaken,"

class faceofftaken(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of face-offs taken'
        self.format = 'Face-Offs Taken should be a positive integer'
        self.examples = [0, 0, 0, 27, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
takeaways,"

class takeaways(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of takeaways'
        self.format = 'Takeaways should be a positive integer'
        self.examples = [1, 1, 2, 0, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid number of takeaways')
        except Exception as e:
            raise ValueError('Invalid input type for takeaways')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
giveaways,"

class giveaways(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of giveaways'
        self.format = 'Giveaways should be a positive integer'
        self.examples = [1, 2, 0, 0, 1]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid number of giveaways')
            return num
        except ValueError:
            raise Exception('Value must be a positive integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
shorthandedgoals,"

class shorthandedgoals(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of short handed goals'
        self.format = 'Short Handed Goals should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            try:
                num = int(val)
                if num < 0:
                    raise ValueError
                else:
                    return num
            except ValueError:
                return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
shorthandedassists,"

class shorthandedassists(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of short handed assists'
        self.format = 'Short Handed Assists should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid number of short handed assists')
            return num
        except:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
blocked,"

class blocked(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of blocks'
        self.format = 'positive integer'
        self.examples = [1, 2, 0, 0, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid number of blocks')
            return num
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
plusminus,"

class plusminus(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The plus-minus statistic'
        self.format = 'Plus-Minus can be any integer'
        self.examples = [1, 0, -1, -1, -1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
eventimeonice,"

class eventimeonice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The even strength time on ice for a player'
        self.format = 'Even Strength Time on Ice should be a positive integer'
        self.examples = [858, 1177, 805, 1083, 613]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            num = int(val)
            if num < 0:
                raise Exception('Invalid Even Strength Time on Ice')
            return num
        else:
            raise Exception('Invalid input for Even Strength Time on Ice')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
shorthandedtimeonice,"

class shorthandedtimeonice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The short handed time on ice for a player'
        self.format = 'Short Handed Time on Ice should be a positive integer'
        self.examples = [97, 0, 0, 19, 63]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid Short Handed Time on Ice')
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
powerplaytimeonice,"

class powerplaytimeonice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The power play time on ice for a player'
        self.format = 'Power Play Time on Ice should be a positive integer'
        self.examples = [0, 219, 110, 265, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid Power Play Time on Ice')
            return num
        except ValueError:
            raise ValueError('Invalid input. Expected a positive integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            return False
        else:
            return True"
homeoraway,"

class homeoraway(GeneralSemanticType):

    def __init__(self):
        self.description = 'A location of either home or away'
        self.format = 'In lower-case and as a string'
        self.examples = ['home', 'away', 'home', 'away', 'home']

    def super_cast(self, val):
        lower_string_val = str(val).lower()
        if lower_string_val in ['home', 'away']:
            return lower_string_val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['home', 'away']:
            return True
        else:
            return False"
gamesettledin,"

class gamesettledin(GeneralSemanticType):

    def __init__(self):
        self.description = 'How the game was settled'
        self.format = ""Game settled in should be one of 'REG', 'OT', or 'tbc'""
        self.examples = ['REG', 'OT', 'tbc']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            raise ValueError('Invalid game settled in value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
coachname,"

class coachname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the coach'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Barry Trotz', 'Joel Quenneville', 'John Tortorella', 'Claude Julien', 'Mike Babcock']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
gamestat,"

class gamestat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Game statistics including goals, shots, hits, pim, powerplayopportunities, powerplaygoals, faceoffwinpercentage, giveaways, takeaways, blocked'
        self.format = 'Game statistics should be a non-negative float'
        self.examples = [4.0, 27.0, 30.0, 6.0, 4.0, 2.0, 50.9, 12.0, 9.0, 11.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return None
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
startrinkside,"

class startrinkside(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Start rink side of the game'
        self.format: str = ""One of 'left', 'right', or None""
        self.examples: list = ['left', 'right', None, 'left', 'right']

    def super_cast(self, val):
        if val in ['left', 'right', None]:
            return val
        else:
            raise ValueError('Invalid start rink side value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['left', 'right', None]:
            return True
        else:
            return False"
firstname,"

class firstname(GeneralSemanticType):

    def __init__(self):
        self.description = 'First name of the player'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Marian', 'Michal', 'Shayne', 'Brian', 'Brent']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
lastname,"

class lastname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Last name of the player'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Hossa', 'Rozsival', 'Gostisbehere', 'Campbell', 'Seabrook']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val == casted_val.title():
            return True
        else:
            return False"
heightcm,"

class heightcm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of the player'
        self.format = 'Height should be a floating point number'
        self.examples = [185.42, 185.42, 180.34, 177.8, 190.5]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 162.56 or val > 205.74:
                raise Exception('Invalid height')
            return val
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 162.56 <= casted_val <= 205.74:
            return True
        else:
            return False"
shootscatches,"

class shootscatches(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shooting or Catching Hand of the player'
        self.format = 'One letter string'
        self.examples = ['L', 'R', 'L', 'R', 'L']

    def super_cast(self, val):
        casted_val = str(val).upper()
        if casted_val not in ['L', 'R']:
            raise Exception('Invalid value for shooting/catching hand')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['L', 'R']:
            return True
        else:
            return False"
franchiseidentifier,"

class franchiseidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Franchise ID'
        self.format = 'Franchise ID should be an integer'
        self.examples = [23, 16, 14, 31, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(f'Input value {val} cannot be converted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
abbreviation,"

class abbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of team names'
        self.format = 'A string of 3 capital letters'
        self.examples = ['ATL', 'BOS', 'NOP', 'CHI', 'DAL', 'NJD', 'PHI', 'LAK', 'TBL', 'BOS']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper() and casted_val.isalpha():
            return True
        else:
            return False"
link,"

class link(GeneralSemanticType):

    def __init__(self):
        self.description = 'API Link'
        self.format = ""Link should start with '/api/v1/teams/' followed by team id""
        self.examples = ['/api/v1/teams/1', '/api/v1/teams/4', '/api/v1/teams/26', '/api/v1/teams/14', '/api/v1/teams/6']

    def super_cast(self, val):
        if isinstance(val, str) and val.startswith('/api/v1/teams/'):
            return val
        else:
            raise ValueError('Invalid link format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.startswith('/api/v1/teams/'):
            return True
        else:
            return False"
carname,"

class carname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Name'
        self.format = 'In title-case format'
        self.examples = ['Maruti Swift Dzire Vdi', 'Skoda Rapid 1.5 Tdi Ambition', 'Honda City 2017-2020 Exi', 'Hyundai I20 Sportz Diesel', 'Maruti Swift Vxi Bsiii']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        if all((word.istitle() for word in words)):
            return True
        else:
            return False"
fueltype,"

class fueltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of fuel used by the car'
        self.format = 'Should be a string and capitalized'
        self.examples = ['Petrol', 'Diesel', 'Hybrid', 'Other', 'Gas']

    def super_cast(self, val):
        val = str(val).lower()
        if val == 'gas':
            return 'Petrol'
        elif val == 'diesel':
            return 'Diesel'
        elif val == 'hybrid':
            return 'Hybrid'
        else:
            return 'Other'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
carbody,"

class carbody(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Body Type'
        self.format = 'Car body type should be in lower case'
        self.examples = ['sedan', 'hatchback', 'wagon', 'hardtop', 'convertible']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['sedan', 'hatchback', 'wagon', 'hardtop', 'convertible']:
            return True
        else:
            return False"
carlength,"

class carlength(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of the Car'
        self.format = 'Length should be represented as a floating point number with one decimal place'
        self.examples = [172.4, 192.9, 192.0, 196.6, 178.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
categoryidentifier,"

class categoryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category ID in an ecommerce store'
        self.format = 'Category ID should be formatted as integers'
        self.examples: list[int] = [1016, 809, 570, 1691, 536]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid category ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
parentcategoryidentifier,"

class parentcategoryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Parent category ID in an ecommerce store'
        self.format = 'Parent category ID should be formatted as integers'
        self.examples: list = [213, 169, 9, 885, 1691]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        num = int(val)
        if num < 0:
            raise Exception('Invalid parent category ID')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
eventidentifier,"

class eventidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an event'
        self.format = 'Alphanumeric string or positive integer'
        self.examples = ['jwbOIqLJ/', 'hzAZQwS2/', 'StGWCMt3/', 'EiH4A9Ub/', 'GfG3SPxI/', 0, 1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif isinstance(val, (int, float)) and (not math.isnan(val)):
            return str(int(val))
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and bool(re.match('^[a-zA-Z0-9_/]*$', casted_val)):
            return True
        elif isinstance(casted_val, str) and casted_val.isdigit():
            return int(casted_val) >= 0
        else:
            return False"
visitoridentifier,"

class visitoridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a visitor'
        self.format = 'Visitor ID should be a positive integer'
        self.examples = [257597, 992329, 111016, 483717, 951259]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif pd.isna(casted_val):
            return True
        else:
            return False"
transactionidentifier,"

class transactionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a transaction'
        self.format = 'Transaction ID should be a positive integer'
        self.examples = [2, 4002, 9438, 13534, 17593]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
property,"

class property(GeneralSemanticType):

    def __init__(self):
        self.description = 'Property of an item'
        self.format = 'Property should be stored as a string'
        self.examples = ['categoryid', '888', '400', '790', '917']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
value,"

class value(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value of an item property'
        self.format = 'Value should be stored as a string'
        self.examples = ['1338', '1116713 960601 n277.200', 'n552.000 639502 n720.000 424566', 'n15360.000', '828513']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
propertyname,"

class propertyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Property Name'
        self.format = 'Property Names are alphanumeric strings'
        self.examples = ['561', '976', 'available', 'categoryid', '6']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
propertyvalue,"

class propertyvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Property Value'
        self.format = 'Property Values are alphanumeric strings'
        self.examples = ['769062', '0', '1', '1285872', '519769']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return re.match('^[A-Za-z0-9]*$', casted_val) is not None"
pokemonidentifier,"

class pokemonidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Pokemon'
        self.format = 'Pokemon IDs are integer values'
        self.examples = [1, 100, 200, 300, 400]

    def super_cast(self, val):
        if isinstance(val, int) and val > 0:
            return int(val)
        else:
            raise ValueError('Invalid value for Pokemon ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 800:
            return True
        else:
            return False"
movieorigin,"

class movieorigin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Origin/Ethnicity of a Movie'
        self.format = 'Origin/Ethnicity should be capitalized'
        self.examples = ['American', 'British', 'Bollywood', 'Tamil', 'Telugu']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
airpollutantconcentration,"

class airpollutantconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air pollutant concentration'
        self.format = 'Floating point number'
        self.examples = [0.01, 3.38, 9.08, 15.535, 498.57]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
airqualitycategory,"

class airqualitycategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Quality Category'
        self.format = 'String in title format (first letter capitalized)'
        self.examples = ['Moderate', 'Satisfactory', 'Severe', 'Poor', 'Good', 'Very Poor', 'Excellent']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Moderate', 'Satisfactory', 'Severe', 'Poor', 'Good', 'Very Poor', 'Excellent']:
            return True
        else:
            return False"
stationname,"

class stationname(GeneralSemanticType):

    def __init__(self):
        self.description = 'A station name'
        self.format = 'Station names should be strings'
        self.examples = [""FGC (L6) - REINA ELISENDA (Sortida Duquesa d'Orleans)-"", 'FGC (L6) - LA BONANOVA-', ""METRO (L11) - CASA DE L'AIGUA (C. Vila-Real)-"", 'METRO (L11) - CIUTAT MERIDIANA (C. Pedraforca)-', 'METRO (L1) - CATALUNYA (Rda. Universitat)-']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
stationstatus,"

class stationstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Station Status'
        self.format = ""Status should be either 'Active' or 'Inactive'""
        self.examples = ['Active', 'Inactive', float('nan')]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Active', 'Inactive', float('nan')]:
            return True
        else:
            return False"
videogame,"

class videogame(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a videogame'
        self.format = 'All words should be capitalized'
        self.examples = ['Need for Speed: Most Wanted', 'FIFA 14', 'LEGO Marvel Super Heroes', 'Madden NFL 07', 'Ratatouille']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
gamingplatform,"

class gamingplatform(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gaming platform'
        self.format = 'Platform code should be a string'
        self.examples = ['DS', 'PS2', 'PS3', 'Wii', 'X360']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_platforms = ['DS', 'PS2', 'PS3', 'Wii', 'X360']
        if casted_val in valid_platforms:
            return True
        else:
            return False"
videogameyear,"

class videogameyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'The year the videogame was released'
        self.format = 'Year should be formatted as a 4-digit number'
        self.examples = [2006, 1985, 2008, 2009, 1996]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1980 and casted_val <= datetime.now().year:
            return True
        else:
            return False"
videogamegenre,"

class videogamegenre(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genre of a Video Game'
        self.format = 'First character of each word should be capitalized.'
        self.examples = ['Action', 'Sports', 'Misc', 'Role-Playing', 'Shooter']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
videogamepublisher,"

class videogamepublisher(GeneralSemanticType):

    def __init__(self):
        self.description = 'Publisher of the videogame'
        self.format = ""Each word's first character should be capitalized.""
        self.examples = ['Electronic Arts', 'Activision', 'Namco Bandai Games', 'Ubisoft', 'Konami Digital Entertainment']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == '':
            return False
        else:
            return True"
volume,"

class volume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume traded or sold'
        self.format = 'Volume should be a floating point number'
        self.examples = [35164283.0, 10464179.0, 11740117.0, 5982324.0, 6173689.0]

    def super_cast(self, val):
        if isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            return round(val, 8)
        else:
            try:
                val = float(val)
                return round(val, 8)
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
avocadotype,"

class avocadotype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of avocado'
        self.format = ""a string ('conventional' or 'organic')""
        self.examples = ['conventional', 'organic', 'conventional', 'organic', 'conventional']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['conventional', 'organic']:
            return val.lower()
        else:
            raise ValueError('Invalid avocado type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['conventional', 'organic']:
            return True
        else:
            return False"
cancerdiagnosis,"

class cancerdiagnosis(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cancer Diagnosis'
        self.format = ""A string either 'M' or 'B'""
        self.examples = ['M', 'B', 'M', 'M', 'B']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['M', 'B']:
            return str_val
        else:
            raise Exception('Invalid diagnosis value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['M', 'B']:
            return True
        else:
            return False"
radius,"

class radius(GeneralSemanticType):

    def __init__(self):
        self.description = 'Radius of cancer cells'
        self.format = 'Radii should be positive floating point numbers'
        self.examples = [17.99, 20.57, 19.69, 11.42, 20.29]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return 'Invalid radius'
            return num
        except ValueError:
            return 'Invalid radius'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
texture,"

class texture(GeneralSemanticType):

    def __init__(self):
        self.description = 'Texture of cancer cells'
        self.format = 'Texture should be positive floating point numbers'
        self.examples = [10.38, 17.77, 21.25, 20.38, 14.34]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise ValueError('Invalid texture value.')
            return val
        except (ValueError, TypeError):
            raise ValueError('Invalid input for texture.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
perimeter,"

class perimeter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Perimeter of cancer cells'
        self.format = 'Perimeter should be positive floating point numbers'
        self.examples = [122.8, 132.9, 130.0, 77.58, 135.1]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid perimeter')
            return num
        except ValueError:
            raise Exception(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            raise ValueError(f'Invalid value: {val}')
        return True"
area,"

class area(GeneralSemanticType):

    def __init__(self):
        self.description = 'Area of cancer cells'
        self.format = 'Area should be positive floating point numbers'
        self.examples = [1001.0, 1326.0, 1203.0, 386.1, 1297.0]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid area')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
smoothness,"

class smoothness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Smoothness of cancer cells'
        self.format = 'Smoothness should be floating point numbers in the range [0, 1]'
        self.examples = [0.1184, 0.08474, 0.1096, 0.1425, 0.1003]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
compactness,"

class compactness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Compactness of cancer cells'
        self.format = 'Compactness should be floating point numbers in the range [0, 1]'
        self.examples = [0.2776, 0.07864, 0.1599, 0.2839, 0.1328]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 1:
                raise Exception('Invalid compactness')
            return num
        except ValueError:
            raise Exception('Invalid compactness value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
concavity,"

class concavity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concavity of cancer cells'
        self.format = 'Concavity should be floating point numbers in the range [0, 1]'
        self.examples = [0.3001, 0.0869, 0.1974, 0.2414, 0.198]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return num
            else:
                raise Exception('Invalid concavity')
        except ValueError:
            raise Exception('Invalid value. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
concavepoints,"

class concavepoints(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concave points of cancer cells'
        self.format = 'Concave points should be floating point numbers in the range [0, 1]'
        self.examples = [0.1471, 0.07017, 0.1279, 0.1052, 0.1043]

    def super_cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid concave points')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 1:
            return False
        else:
            return True"
symmetry,"

class symmetry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Symmetry of cancer cells'
        self.format = 'Symmetry should be floating point numbers in the range [0, 1]'
        self.examples = [0.2419, 0.1812, 0.2069, 0.2597, 0.1809]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid input':
            return False
        elif 0 <= casted_val <= 1:
            return True
        else:
            return False"
fractaldimension,"

class fractaldimension(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fractal dimension of cancer cells'
        self.format = 'Fractal dimension should be floating point numbers in the range [0, 1]'
        self.examples = [0.07871, 0.05667, 0.05999, 0.09744, 0.05883]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 1:
                return val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Cannot cast value to fractal dimension')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
acidity,"

class acidity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Acidity level of a substance'
        self.format = 'Floating point number with two decimal places, in g/dm³'
        self.examples = [7.4, 7.8, 7.8, 11.2, 7.4]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
chlorides,"

class chlorides(GeneralSemanticType):

    def __init__(self):
        self.description = 'Chlorides level in a substance'
        self.format = 'Floating point number with three decimal places, in g/dm³'
        self.examples = [0.076, 0.098, 0.092, 0.075, 0.076]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(""Invalid input, it can't be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
sulfurdioxide,"

class sulfurdioxide(GeneralSemanticType):

    def __init__(self):
        self.description = 'The sulfur dioxide level of a substance'
        self.format = 'Sulfur dioxide level should be formatted as a floating point number with no decimal places'
        self.examples = [11.0, 25.0, 15.0, 17.0, 11.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value for sulfur dioxide level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0 or np.isinf(casted_val):
            return False
        return True"
density,"

class density(GeneralSemanticType):

    def __init__(self):
        self.description = 'Density of a substance'
        self.format = 'Floating point number, in kilograms per cubic meter'
        self.examples = [1.74, 1.75, 1.76, 1.77, 1.78]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '.')
        float_val = float(val)
        if 'g/cm³' in str(val):
            float_val = float_val * 1000
        return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ph,"

class ph(GeneralSemanticType):

    def __init__(self):
        self.description = 'pH Level'
        self.format = 'pH level should be a floating point number'
        self.examples = [10.0664, 10.0672, 10.068, 10.0689, 10.0697]

    def super_cast(self, val):
        try:
            casted_val = float(str(val).replace(',', '.'))
        except ValueError:
            raise ValueError(f'Invalid pH value: {val}')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 14:
            return True
        else:
            return False"
alcoholcontent,"

class alcoholcontent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Alcohol Content'
        self.format = 'Alcohol content should be a floating point number'
        self.examples = [9.4, 9.8, 9.8, 9.8, 9.4]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise TypeError('Value must be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
qualityscore,"

class qualityscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality Score'
        self.format = 'Quality score should be an integer with no decimal places'
        self.examples = [5, 5, 5, 6, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
booleanattrition,"

class booleanattrition(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value representing attrition'
        self.format = 'As boolean True or False'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val in ['Yes', 'No']:
            return val == 'Yes'
        elif isinstance(val, bool):
            return val
        else:
            raise ValueError('Invalid value for boolean attrition')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
businesstravel,"

class businesstravel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Business travel frequency'
        self.format = 'Should be one of the valid values'
        self.examples = ['Travel_Rarely', 'Travel_Frequently', 'Non-Travel']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Travel_Rarely', 'Travel_Frequently', 'Non-Travel']:
            return True
        else:
            return False"
dailyrate,"

class dailyrate(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The daily rate in USD of an entity'
        self.format: str = 'Daily rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
department,"

class department(GeneralSemanticType):

    def __init__(self):
        self.description = 'Department in a company'
        self.format = 'Should be one of the valid values'
        self.examples = ['Research & Development', 'Sales', 'Human Resources']

    def super_cast(self, val):
        if val in ['Research & Development', 'Sales', 'Human Resources']:
            return str(val)
        else:
            return 'Invalid department'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Research & Development', 'Sales', 'Human Resources']:
            return True
        else:
            return False"
hourlyrate,"

class hourlyrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The hourly rate in USD of an entity'
        self.format = 'Hourly rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid input value. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        return True"
jobrole,"

class jobrole(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job role in a company'
        self.format = 'Should be one of the valid values'
        self.examples = ['Sales Executive', 'Research Scientist', 'Laboratory Technician', 'Manufacturing Director', 'Healthcare Representative']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
monthlyincome,"

class monthlyincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'The monthly income of an entity'
        self.format = 'Monthly income should be formatted as a floating point number with two decimal places for cents'
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
monthlyrate,"

class monthlyrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The monthly rate in USD of an entity'
        self.format = 'Monthly rate should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except Exception as e:
            raise ValueError(f'Unable to convert {val} to float: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
overtime,"

class overtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether overtime is applicable or not'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            if val == 'Yes':
                return True
            elif val == 'No':
                return False
            else:
                raise ValueError('Invalid value for overtime')
        elif isinstance(val, bool):
            return val
        else:
            raise ValueError('Invalid type for overtime')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
percentsalaryhike,"

class percentsalaryhike(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percent salary hike of an entity'
        self.format = 'Percent salary hike should be a floating point number'
        self.examples: list = [1.0, 10.0, 20.0, 50.0, 100.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return float(val)
            else:
                try:
                    return float(val.strip('%'))
                except ValueError:
                    raise Exception('Invalid input')
        elif isinstance(val, int) or isinstance(val, float):
            return float(val)
        else:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
standardhours,"

class standardhours(GeneralSemanticType):

    def __init__(self):
        self.description = 'The standard hours of an entity'
        self.format = 'Standard hours should be an integer'
        self.examples = [1, 8, 12, 16, 24]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= 24:
            return True
        else:
            return False"
totalworkingyears,"

class totalworkingyears(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total working years of an entity'
        self.format = 'Total working years should be an integer'
        self.examples: list = [1, 5, 10, 20, 40]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
isocode,"

class isocode(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 code of a country'
        self.format = 'ISO codes should be all uppercase'
        self.examples = ['NOR', 'LVA', 'DNK', 'USA', 'RUS']

    def super_cast(self, val):
        try:
            country = pycountry.countries.get(alpha_3=val.upper())
            return country.alpha_3
        except AttributeError:
            raise Exception('Invalid ISO code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper():
            return True
        else:
            return False"
vaccinations,"

class vaccinations(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vaccinations'
        self.format = 'Vaccinations should be stored as floating point numbers'
        self.examples = [0.0, 526410.0, 3590096.0, 17012303.5, 3263129000.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
vaccinationsperhundred,"

class vaccinationsperhundred(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vaccinations per hundred people'
        self.format = 'Vaccinations per hundred should be stored as floating point numbers'
        self.examples = [0.0, 16.05, 67.52, 132.735, 345.37]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            if 0 <= casted_val <= 100:
                return True
            else:
                return False
        else:
            return True"
vaccinationspermillion,"

class vaccinationspermillion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of daily vaccinations per million people'
        self.format = 'Vaccinations per million should be stored as floating point numbers'
        self.examples = [0.0, 636.0, 2050.0, 4682.0, 117497.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
totalvaccinations,"

class totalvaccinations(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of vaccinations'
        self.format = 'Should be an integer with no decimal places'
        self.examples = [2, 3, 1, 20481, 2]

    def super_cast(self, val):
        if np.isnan(val):
            raise ValueError('Invalid number of vaccinations')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= float('inf'):
            raise ValueError('Invalid number of vaccinations')
        return True"
bedroomcount,"

class bedroomcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of bedrooms in a house'
        self.format = 'Integer'
        self.examples = [3, 3, 2, 4, 3]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
bathroomcount,"

class bathroomcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of bathrooms in a house'
        self.format = 'Number of bathrooms should be floating point values'
        self.examples = [1.0, 2.25, 1.0, 3.0, 2.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Can't convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0:
            return True
        else:
            return False"
floorcount,"

class floorcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of floors in a house'
        self.format = 'Floating point number'
        self.examples = [1.0, 2.0, 1.0, 1.0, 1.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0.0:
                raise ValueError('Value cannot be less than 0')
            else:
                return float_val
        except ValueError as ve:
            print('Error casting value: ', ve)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0.0:
            return True
        else:
            return False"
waterfront,"

class waterfront(GeneralSemanticType):

    def __init__(self):
        self.description = 'Waterfront property indicator'
        self.format = 'binary 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
viewcount,"

class viewcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a house has been viewed'
        self.format = 'Number of views should be integer values'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
conditionlevel,"

class conditionlevel(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Condition level of a house'
        self.format = 'Condition level should be an integer value'
        self.examples = [3, 3, 3, 5, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
gradecategory,"

class gradecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Grade category of a house'
        self.format = 'Grade category should be an integer value'
        self.examples = [7, 7, 6, 7, 8]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 13:
            return True
        else:
            return False"
tradeyear,"

class tradeyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trade Year'
        self.format = 'Trade Year should be an integer'
        self.examples = [2010, 2011, 2012, 2013, 2014]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 2010 <= casted_val <= 2016:
            return True
        else:
            return False"
hscode,"

class hscode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Harmonized System (HS) code, a standardized numerical method of classifying traded products'
        self.format = 'HS codes are integers between 1 and 99'
        self.examples = [2, 3, 4, 6, 7]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 99:
            return True
        else:
            return False"
hscodes,"

class hscodes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Harmonized System (HS) code is a standardized system of names and numbers to classify traded products'
        self.format = 'HS code should be an integer'
        self.examples = [5, 7, 8, 9, 11]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. The value should be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 99:
            return True
        else:
            return False"
respondentidentifier,"

class respondentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each respondent'
        self.format = 'Respondent ID should be a positive integer'
        self.examples = [1, 3, 4, 5, 7]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
booleanvalue,"

class booleanvalue(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A boolean value'
        self.format: str = 'lower-cased string'
        self.examples: list = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if val in ['Yes', 'No', 'yes', 'no', 'YES', 'NO']:
            return str(val).lower()
        elif val in [0, 1]:
            return 'yes' if val == 1 else 'no'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
employmentstatus,"

class employmentstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Employment status of a respondent'
        self.format = 'Each value should be a string representing an employment status from the defined set'
        self.examples = ['Employed part-time', 'Employed full-time', 'Not employed, but looking for work', 'Employed part-time', 'Not employed, and not looking for work']

    def super_cast(self, val):
        valid_values = ['Employed full-time', 'Independent contractor, freelancer, or self-employed', 'Not employed, but looking for work', 'Employed part-time', 'Not employed, and not looking for work']
        if pd.isna(val):
            return float('nan')
        if val in valid_values:
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val) or casted_val in self.examples:
            return True
        else:
            return False"
surveyidentifier,"

class surveyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each survey response'
        self.format = 'Identifier should be a whole number'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 128:
            return True
        else:
            return False"
surveyquestion,"

class surveyquestion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survey Question'
        self.format = 'Survey question is a string'
        self.examples = ['GenderSelect', 'GenderFreeForm', 'Country', 'Age', 'EmploymentStatus']

    def super_cast(self, val):
        return str(val).strip().capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
postindex,"

class postindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of a Reddit post in the dataset'
        self.format = 'Integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value could not be cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
postscore,"

class postscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score of a Reddit post'
        self.format = 'The score should be an integer'
        self.examples = [55, 110, 0, 29, 71]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input, must be convertible to int'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and -math.inf <= casted_val <= math.inf:
            return True
        else:
            return False"
postidentifier,"

class postidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a Reddit post'
        self.format = 'Alphanumeric strings of length 6'
        self.examples = ['l6ulcx', 'l6uibd', 'l6uhhn', 'l6ugk6', 'l6ufgy']

    def super_cast(self, val):
        casted_val = str(val)
        if re.match('^[a-zA-Z0-9]{6}$', casted_val):
            return casted_val
        else:
            raise Exception('Invalid format. Post IDs should be strings of 6 alphanumeric characters.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[a-zA-Z0-9]{6}$', casted_val):
            return True
        else:
            return False"
commssize,"

class commssize(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Number of comments in a Reddit post'
        self.format = 'Integer'
        self.examples = [6, 23, 47, 74, 156]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, float) and val.is_integer():
            return int(val)
        else:
            try:
                return int(val)
            except ValueError:
                raise ValueError(f'Invalid value: {val}. Expected an integer or a float that can be converted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
postcreationtime,"

class postcreationtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The UNIX timestamp when the Reddit post was created'
        self.format = 'The UNIX timestamp should be a floating point number'
        self.examples = [1611862661.0, 1611862330.0, 1611862235.0, 1611862137.0, 1611862016.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
posttimestamp,"

class posttimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'The human-readable timestamp when the Reddit post was created'
        self.format = ""Timestamps are formatted as 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2021-01-28 21:37:41', '2021-01-28 21:32:10', '2021-01-28 21:30:35', '2021-01-28 21:28:57', '2021-01-28 21:26:56']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d %H:%M:%S')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
geographicregion,"

class geographicregion(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The region a country belongs to'
        self.format = 'Must be a string'
        self.examples = ['Africa', 'Asia', 'Europe', 'North America', 'South America']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
rocketdetail,"

class rocketdetail(GeneralSemanticType):

    def __init__(self):
        self.description = 'Details of the rocket'
        self.format = 'Details stored as string'
        self.examples = ['Cosmos-3MRB (65MRB) | BOR-5 Shuttle', 'Titan IV(402)B | DSP', 'Titan IIID | KH-11', 'Lambda-IV S | Osumi', 'Proton K/Block D | Zond']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
rocketstatus,"

class rocketstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'The status of a rocket'
        self.format = 'string'
        self.examples = ['StatusRetired', 'StatusActive', 'StatusRetired', 'StatusActive', 'StatusRetired']

    def super_cast(self, val):
        if val in ['StatusRetired', 'StatusActive']:
            return val
        else:
            raise ValueError(f'Invalid status. Expected one of: {self.examples}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['StatusRetired', 'StatusActive']:
            return True
        else:
            return False"
cost,"

class cost(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cost of an entity'
        self.format = 'Cost should be represented as a floating point number with two decimal places'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
missionstatus,"

class missionstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of a mission'
        self.format = 'In original case and as a string'
        self.examples = ['Success', 'Failure', 'Partial Failure', 'Prelaunch Failure', 'Success']

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.strip()
            if val in ['Success', 'Failure', 'Partial Failure', 'Prelaunch Failure']:
                return val
            else:
                raise ValueError('Invalid status. Expected one of: Success, Failure, Partial Failure, Prelaunch Failure')
        else:
            raise TypeError('Expected string input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Success', 'Failure', 'Partial Failure', 'Prelaunch Failure']:
            return True
        else:
            return False"
schoolname,"

class schoolname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a school'
        self.format = 'The name of the school should be in title case'
        self.examples = ['Massachusetts Institute of Technology (MIT)', 'California Institute of Technology (CIT)', 'Harvey Mudd College', 'Polytechnic University of New York, Brooklyn', 'Cooper Union']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
studentage,"

class studentage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the Student'
        self.format = 'Age should be an integer'
        self.examples = [15, 16, 17, 18, 19, 20, 21, 22]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and val.is_integer():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise ValueError('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 15 and casted_val <= 22:
            return True
        else:
            return False"
studentaddress,"

class studentaddress(GeneralSemanticType):

    def __init__(self):
        self.description = 'Address of the Student'
        self.format = ""Address should be either 'U' or 'R'""
        self.examples = ['U', 'R', 'U', 'R', 'U']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['U', 'R']:
            return val
        else:
            return 'U' if val == 1 else 'R'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['U', 'R']:
            return True
        else:
            return False"
parentscohabitationstatus,"

class parentscohabitationstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""Cohabitation status of the student's parents""
        self.format = ""Cohabitation status should be either 'T' or 'A'""
        self.examples = ['T', 'A', 'T', 'A', 'T']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['T', 'A']:
            return True
        else:
            return False"
mothereducation,"

class mothereducation(GeneralSemanticType):

    def __init__(self):
        self.description = ""Education level of the student's mother""
        self.format = 'Education level should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            raise ValueError('The value must be convertible to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
fathereducation,"

class fathereducation(GeneralSemanticType):

    def __init__(self):
        self.description = ""Education level of the student's father""
        self.format = 'Education level should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 4:
            return True
        else:
            return False"
traveltime,"

class traveltime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Travel time to school'
        self.format = 'Travel time should be an integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
studytime,"

class studytime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weekly study time'
        self.format = 'Study time should be an integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 1 <= casted_val <= 4:
                return True
            else:
                return False
        else:
            return False"
numberoffailures,"

class numberoffailures(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of past class failures'
        self.format = 'Number of failures should be an integer'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Expected a numeric value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 3:
            raise Exception('Invalid value. Number of failures should be within the range 0-3.')
        else:
            return True"
schoolsupport,"

class schoolsupport(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether school support is provided or not'
        self.format = ""lower-cased string either 'yes' or 'no'""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
familysupport,"

class familysupport(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a family has support'
        self.format = 'Boolean in string format'
        self.examples = ['yes', 'no', 'yes', 'yes', 'no']

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() in ['yes', 'no']:
                return val.lower()
            else:
                raise ValueError('Input value is not a valid boolean string')
        else:
            raise TypeError('Input value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
paidtuition,"

class paidtuition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tuition payment status'
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
extracurricularactivities,"

class extracurricularactivities(GeneralSemanticType):

    def __init__(self):
        self.description = 'Participation in extracurricular activities'
        self.format = ""String with 'yes' or 'no'""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['yes', 'no']:
            return val.lower()
        else:
            raise Exception(f""Invalid value: {val}. Valid values are 'yes' and 'no'."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
attendednursery,"

class attendednursery(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether someone attended nursery or not'
        self.format = 'yes or no as string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['yes', 'no']:
            return str_val
        else:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
wantshighereducation,"

class wantshighereducation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a person wants higher education'
        self.format = 'yes or no'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        lower_string_val = str(val).lower()
        if lower_string_val in ['yes', 'no']:
            return lower_string_val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
hasinternet,"

class hasinternet(GeneralSemanticType):

    def __init__(self):
        self.description = 'Internet Availability'
        self.format = 'Boolean (yes/no)'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['yes', 'no']:
            return val.lower()
        else:
            raise Exception('Invalid Value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
inromanticrelationship,"

class inromanticrelationship(GeneralSemanticType):

    def __init__(self):
        self.description = 'In a romantic relationship'
        self.format = ""Boolean string ('yes' or 'no')""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() in ['yes', 'no']:
                return val.lower()
            else:
                return 'no'
        else:
            return 'no'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
familyrelationships,"

class familyrelationships(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality of family relationships'
        self.format = 'Quality should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except Exception:
            raise ValueError('The value cannot be casted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 5:
            return True
        else:
            raise ValueError('The casted value is out of the valid range [1, 5].')"
freetime,"

class freetime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Free time after school'
        self.format = 'Free time should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and 1 <= casted_val <= 5:
            return True
        else:
            return False"
goingout,"

class goingout(GeneralSemanticType):

    def __init__(self):
        self.description = 'Going out with friends'
        self.format = 'Going out should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
weekdayalcoholconsumption,"

class weekdayalcoholconsumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Alcohol consumption on weekdays'
        self.format = 'Consumption should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for weekday alcohol consumption. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
weekendalcoholconsumption,"

class weekendalcoholconsumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Alcohol consumption on weekends'
        self.format = 'Consumption should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
currenthealthstatus,"

class currenthealthstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Current health status'
        self.format = 'Health status as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 1 <= casted_val <= 5"
gamedate,"

class gamedate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the game'
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['2020-12-23', '2020-12-29', '2016-11-25', '2011-04-13', '2022-11-07']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid game date')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            try:
                datetime.strptime(casted_val, '%Y-%m-%d')
                return True
            except ValueError:
                return False
        else:
            return False"
gamestatus,"

class gamestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of a game'
        self.format = 'Game status is a string'
        self.examples = ['Final', 'Final', 'Final', 'Final', 'Final']

    def super_cast(self, val):
        if pd.isna(val):
            return 'nan'
        if val == 'Final':
            return val
        else:
            return 'Invalid game status'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Final', 'nan']:
            return True
        else:
            return False"
assistsrebounds,"

class assistsrebounds(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of assists or rebounds made by a team'
        self.format = 'Assists/Rebounds are non-negative floating point numbers'
        self.examples = [25.0, 16.0, 22.0, 27.0, 22.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, (int, float)) and val >= 0:
            return float(val)
        else:
            return 'Invalid assists/rebounds'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid assists/rebounds':
            return False
        elif isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
hometeamwins,"

class hometeamwins(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if the home team wins'
        self.format = 'A boolean value, 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val in [0, 1]:
            return val
        else:
            raise Exception('Invalid home team wins')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
teamabbreviation,"

class teamabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of NBA Team'
        self.format = 'Team Abbreviation should be a 3 character string'
        self.examples = ['CLE', 'TOR', 'MIA', 'LAC', 'DAL']

    def super_cast(self, val):
        string = str(val).upper()
        match_obj = re.match('[A-Z]{3}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid team abbreviation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper():
            return True
        else:
            return False"
teamcity,"

class teamcity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Team City'
        self.format = 'A string that represents the city of the team'
        self.examples = ['San Antonio', 'Boston', 'Miami', 'Milwaukee', 'Dallas']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
startposition,"

class startposition(GeneralSemanticType):

    def __init__(self):
        self.description = ""Player's position in the game""
        self.format = 'Player position as a string'
        self.examples = ['G', 'F', 'C']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['G', 'F', 'C']:
            return str(val)
        else:
            raise ValueError('Invalid start position')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['G', 'F', 'C']:
            return True
        else:
            return False"
conference,"

class conference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conference to which the team belongs.'
        self.format = 'Conference should be a string.'
        self.examples = ['West', 'East', 'East', 'West', 'West']

    def super_cast(self, val):
        if val not in ['West', 'East']:
            raise ValueError('Invalid conference value.')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['West', 'East']:
            return True
        else:
            return False"
gamesplayed,"

class gamesplayed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of games played.'
        self.format = 'Non-negative integer.'
        self.examples = [30, 30, 31, 32, 33]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and float(val) >= 0:
            return int(float(val))
        else:
            raise ValueError('Invalid value for games played.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
record,"

class record(GeneralSemanticType):

    def __init__(self):
        self.description = 'The win-loss record of the team.'
        self.format = ""Record should be a string in the form 'wins-losses'.""
        self.examples = ['10-3', '13-2', '13-4', '14-4', '11-7']

    def super_cast(self, val):
        match_obj = re.match('^[0-9]*-[0-9]*$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise ValueError('Invalid record format.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            (wins, losses) = map(int, casted_val.split('-'))
            if wins >= 0 and losses >= 0:
                return True
            else:
                return False
        except ValueError:
            return False"
nickname,"

class nickname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nickname of NBA team'
        self.format = 'Nickname should be capitalized and without any special characters'
        self.examples = ['Hawks', 'Celtics', 'Pelicans', 'Bulls', 'Mavericks']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle() and casted_val.isalpha():
            return True
        else:
            return False"
arenacapacity,"

class arenacapacity(GeneralSemanticType):

    def __init__(self):
        self.description = ""Seating capacity of NBA team's home arena""
        self.format = 'Arena capacity should be a positive floating point number'
        self.examples = [18729.0, 18624.0, float('nan'), 21711.0, 19200.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or (casted_val >= 0 and casted_val <= float('inf')):
            return True
        else:
            return False"
exchangerateusd,"

class exchangerateusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Exchange rate of local currency to USD'
        self.format = 'Exchange rate should be represented as a decimal number'
        self.examples = [0.052264, 0.052798, 0.052274, 0.05168, 0.051308]

    def super_cast(self, val):
        return round(float(val), 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
inflation,"

class inflation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Inflation rate'
        self.format = 'Inflation rate should be represented as a decimal number'
        self.examples = [3.441455696, 14.14913958, -3.718592965, 11.20389701, -3.848560701]

    def super_cast(self, val):
        try:
            return round(float(val), 9)
        except Exception as e:
            raise Exception(f'Unable to cast value {val} to float: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise ValueError(f'Invalid value: {casted_val}. Expected a float.')
        return True"
crisis,"

class crisis(GeneralSemanticType):

    def __init__(self):
        self.description = 'Crisis status'
        self.format = 'All characters should be lowercase'
        self.examples = ['crisis', 'no_crisis', 'no_crisis', 'no_crisis', 'no_crisis']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['crisis', 'no_crisis']:
            return True
        else:
            return False"
jobpostdate,"

class jobpostdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the job posting'
        self.format = 'Dates should be datetime objects'
        self.examples = ['2014-05-06', '2007-11-09', '2014-03-21', '2012-08-20', '2009-07-17']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif isinstance(val, str):
            return datetime.strptime(val, '%b %d, %Y')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
itjob,"

class itjob(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean indicator for if a job is an IT job or not'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val not in [False, True]:
            raise Exception('Invalid boolean value')
        else:
            return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
incidentidentifier,"

class incidentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an incident'
        self.format = 'Incident ID should be a positive integer number.'
        self.examples = [632747, 1032257, 1428412, 1725039, 1978652]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except ValueError:
            casted_val = np.nan
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if casted_val >= 0 and casted_val == int(casted_val):
            return True
        else:
            return False"
incidentdate,"

class incidentdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the incident'
        self.format = ""In 'Month Day, Year' format""
        self.examples = ['July 5, 2020', 'May 23, 2020', 'June 20, 2020', 'September 6, 2020', 'June 22, 2020']

    def super_cast(self, val):
        return datetime.strptime(str(val), '%B %d, %Y').strftime('%B %d, %Y')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%B %d, %Y')
            return True
        except ValueError:
            return False"
uscity,"

class uscity(GeneralSemanticType):

    def __init__(self):
        self.description = 'US Cities'
        self.format = 'Full name of the city with the first letter capitalized'
        self.examples = ['Chicago', 'Philadelphia', 'Baltimore', 'Houston', 'Saint Louis']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isalpha():
            return True
        else:
            return False"
numberofpeople,"

class numberofpeople(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of people involved in an incident'
        self.format = 'Integer value'
        self.examples = [0, 1, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            float_val = float(val)
            return int(float_val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
shootingevent,"

class shootingevent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Shooting Event'
        self.format = 'Each word of the event name should be capitalized'
        self.examples = ['Uvalde Elementary School Massacre', 'Buffalo Supermarket Massacre', 'Sacramento County Church Shooting', 'Oxford High School Shooting', 'San Jose VTA Shooting']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
dateofevent,"

class dateofevent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the Event'
        self.format = 'Date should be in the format MM/DD/YY'
        self.examples = ['5/24/22', '5/14/22', '2/28/22', '11/30/21', '5/26/21']

    def super_cast(self, val):
        try:
            return datetime.strptime(str(val), '%m/%d/%y').strftime('%m/%d/%y')
        except ValueError:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%y')
            return True
        except ValueError:
            return False"
numberofvictims,"

class numberofvictims(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Victims'
        self.format = 'Number of victims should be an integer'
        self.examples = [7, 5, 11, 15, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input: super_cast() only accepts numeric inputs that can be cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ageofshooter,"

class ageofshooter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the Shooter'
        self.format = 'Age should be an integer'
        self.examples = [21, 28, 44, 26, 20]

    def super_cast(self, val):
        if val == '-':
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
mentalhealthissues,"

class mentalhealthissues(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mental Health Issues'
        self.format = 'Capitalized string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
weaponslegallyobtained,"

class weaponslegallyobtained(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a weapon was legally obtained or not'
        self.format = 'In capitalized form as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
weapontype,"

class weapontype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Weapon'
        self.format = 'Each word of the weapon type should be lowercase'
        self.examples = ['one semiautomatic handgun', 'semiautomatic handgun', 'semiautomatic rifle', 'handgun', 'two semiautomatic handguns']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['one semiautomatic handgun', 'semiautomatic handgun', 'semiautomatic rifle', 'handgun', 'two semiautomatic handguns']
        if casted_val in valid_values:
            return True
        else:
            return False"
genderofshooter,"

class genderofshooter(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Gender of Shooter'
        self.format = 'Capitalized string'
        self.examples = ['Male', 'Female', 'Male & Female']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in ['Male', 'Female', 'Male & Female']"
shooterlocation,"

class shooterlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical location of the Shooter'
        self.format = 'Geographical location should be a floating point number'
        self.examples = [40.052151, 42.84410784, 37.316097, 39.68663, 38.60111019]

    def super_cast(self, val):
        if isinstance(val, str) and val == '-':
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -90 <= casted_val <= 90:
            return True
        else:
            return False"
typeofshooting,"

class typeofshooting(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Shooting'
        self.format = 'Type of shooting should be capitalized'
        self.examples = ['Mass', 'Spree', 'Mass', 'Spree', 'Mass']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Mass', 'Spree']:
            return True
        else:
            return False"
yearofshooting,"

class yearofshooting(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of Shooting'
        self.format = 'Year of shooting should be an integer'
        self.examples = [2009, 2010, 2011, 2012, 2013]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or casted_val > datetime.now().year:
            return False
        else:
            return True"
videogamename,"

class videogamename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Video Game'
        self.format = 'First character of each word should be capitalized.'
        self.examples = ['Need For Speed: Most Wanted', 'Ratatouille', 'Lego Marvel Super Heroes', 'Madden Nfl 07', 'Fifa 14']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
videogameplatform,"

class videogameplatform(GeneralSemanticType):

    def __init__(self):
        self.description = 'Platform of a Video Game'
        self.format = 'All characters should be uppercase.'
        self.examples = ['PS2', 'DS', 'PS3', 'WII', 'X360']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
videogamedeveloper,"

class videogamedeveloper(GeneralSemanticType):

    def __init__(self):
        self.description = 'Developer of a Video Game'
        self.format = ""Each word's first character should be capitalized.""
        self.examples = ['Ubisoft', 'EA Sports', 'EA Canada', 'Konami', 'Capcom']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
gamerating,"

class gamerating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of a Video Game'
        self.format = 'All characters should be uppercase.'
        self.examples = ['E', 'T', 'M', 'E10+', 'EC']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['E', 'T', 'M', 'E10+', 'EC', 'AO', 'RP', 'KA']:
            return True
        else:
            return False"
weekday,"

class weekday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Day of the week'
        self.format = 'Title case string'
        self.examples = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    def super_cast(self, val):
        day = str(val).title()
        if day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
            return day
        else:
            raise Exception('Invalid weekday')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
            return True
        else:
            return False"
partoftheday,"

class partoftheday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Part of the day when accident happened'
        self.format = 'Part of the day should be a string in title case'
        self.examples = ['Morning', 'Afternoon', 'Night']

    def super_cast(self, val):
        part = str(val).title()
        if part in ['Morning', 'Afternoon', 'Night']:
            return part
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Morning', 'Afternoon', 'Night', 'Unknown']:
            return True
        else:
            return False"
mildinjuries,"

class mildinjuries(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of mild injuries in the accident'
        self.format = 'A non-negative integer'
        self.examples = [0, 1, 2, 5, 10]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Value must be a non-negative integer.')
        except ValueError:
            raise ValueError('Invalid input for mild injuries. Expected a non-negative integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
seriousinjuries,"

class seriousinjuries(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of serious injuries in the accident'
        self.format = 'Integer representation of serious injuries'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid number of serious injuries')
        except ValueError:
            raise Exception('Invalid value for serious injuries')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
victims,"

class victims(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of victims in the accident'
        self.format = 'Number of victims should be a non-negative integer'
        self.examples = [0, 1, 2, 5, 10]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                return None
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
vehiclesinvolved,"

class vehiclesinvolved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vehicles involved in the accident'
        self.format = 'Non-negative integer'
        self.examples = [0, 1, 2, 5, 14]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid number of vehicles involved')
        except ValueError:
            raise ValueError('Value must be a non-negative integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
airqualitystatus,"

class airqualitystatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Quality Status'
        self.format = 'Air Quality Status should be a string'
        self.examples = ['Good', 'Moderate', '--']

    def super_cast(self, val):
        if val in ['Good', 'Moderate', '--']:
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Good', 'Moderate', '--']:
            return True
        else:
            return False"
airstationname,"

class airstationname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of the air station'
        self.format: str = 'Air station names should be capitalized strings'
        self.examples: list = ['Barcelona - Ciutadella', 'Barcelona - Eixample', 'Barcelona - Gràcia', 'Barcelona - Palau Reial', 'Barcelona - Poblenou']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
geographiccoordinate,"

class geographiccoordinate(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Geographic coordinate'
        self.format: str = 'Geographic coordinates should be floating point numbers'
        self.examples: list = [2.1874, 2.1538, 41.3864, 41.3853]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return True"
busstopcode,"

class busstopcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Bus stop code'
        self.format = ""A string of length 4, where the first character is 'K' and the remaining are digits""
        self.examples = ['K014', 'K015', 'K016', 'K017']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 4 and (val[0] == 'K') and val[1:].isdigit():
            return val
        else:
            raise ValueError('Invalid bus stop code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 4 and (casted_val[0] == 'K') and casted_val[1:].isdigit():
            return True
        else:
            return False"
busstopidentifier,"

class busstopidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Bus Stop Identifier'
        self.format = 'A string indicating the bus stop identifier'
        self.examples = ['BUS -192--', 'BUS -124--', 'BUS -117--', 'BUS -117--', 'BUS -130--']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = '^BUS -\\d{3}--$'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
ordernumber,"

class ordernumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for an order'
        self.format = 'Order number should be a positive integer'
        self.examples = [1, 2, 307, 48048, 70978]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
decade,"

class decade(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Decade in which a person was born'
        self.format = ""Values should be in the format 'YYYY' or 'Before 1930'""
        self.examples = ['Before 1930', '1930', '1940', '1950', '1960']

    def super_cast(self, val):
        decade = str(val)
        if decade in ['Before 1930'] or (len(decade) == 4 and decade.isdigit()):
            return decade
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Before 1930', '1930', '1940', '1950', '1960']:
            return True
        else:
            return False"
transportcode,"

class transportcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier code for a type of transport'
        self.format = 'Alphanumeric string'
        self.examples = ['K001', 'K011', 'K002', 'K003', 'K008']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and bool(re.match('^[a-zA-Z0-9]*$', casted_val)):
            return True
        else:
            return False"
gpscoordinate,"

class gpscoordinate(GeneralSemanticType):

    def __init__(self):
        self.description = 'A GPS coordinate'
        self.format = 'GPS coordinates should be floating point numbers'
        self.examples = [41.399203, 2.135427, 41.451492, 2.174473, 2.168588]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid GPS coordinate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -180 <= casted_val <= 180:
            return True
        else:
            return False"
demandoccupation,"

class demandoccupation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Demand occupation category'
        self.format = ""Either 'Registered unemployed' or 'Unemployment demand'""
        self.examples = ['Registered unemployed', 'Unemployment demand', 'Registered unemployed', 'Unemployment demand', 'Registered unemployed']

    def super_cast(self, val):
        if str(val).lower() == 'registered unemployed':
            return 'Registered unemployed'
        elif str(val).lower() == 'unemployment demand':
            return 'Unemployment demand'
        else:
            raise ValueError('Invalid demand occupation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Registered unemployed', 'Unemployment demand']:
            return True
        else:
            return False"
countries,"

class countries(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a country'
        self.format = 'Name of a country'
        self.examples = ['Albania', 'Cyprus', 'Botswana', 'Bahrain', 'Angola']

    def super_cast(self, val):
        if isinstance(val, str):
            if pycountry.countries.get(name=val) is not None:
                return val
            else:
                raise Exception('Invalid country name')
        else:
            raise Exception('Invalid input type. Expected a string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val) is not None:
            return True
        else:
            return False"
hfiscore,"

class hfiscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Score'
        self.format = 'Score should be a floating point number between 0 and 10'
        self.examples = [3.15, 6.21, 7.23, 8.18, 9.3]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return round(float_val, 2)
        except ValueError:
            raise ValueError('Invalid value. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
hfirank,"

class hfirank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Rank'
        self.format = 'Rank should be a positive integer'
        self.examples: list = [1, 37, 74, 110, 165]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val <= 0:
                raise ValueError('Rank should be a positive integer')
            return int_val
        except Exception as e:
            raise ValueError('Invalid value. Expecting a positive integer') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
hfiquartile,"

class hfiquartile(GeneralSemanticType):

    def __init__(self):
        self.description = 'Human Freedom Index Quartile'
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples: list = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 4:
                return int_val
            else:
                return 'Invalid Value'
        except ValueError:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3, 4]:
            return True
        else:
            return False"
refseqaccessionnumber,"

class refseqaccessionnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a version of a reference sequence'
        self.format = 'NP_xxxxxx'
        self.examples = ['NP_958782', 'NP_036467', 'NP_002462', 'NP_001367', 'NP_958786']

    def super_cast(self, val):
        match_obj = re.match('NP_[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid RefSeq Accession Number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('NP_[0-9]+', casted_val):
            return True
        else:
            return False"
proteomevalue,"

class proteomevalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proteome value, representing the level of a protein in a sample'
        self.format = 'The proteome value is represented as a floating point number'
        self.examples = [0.129, -0.729, -0.039, 0.115, -0.618]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)):
            return float(val)
        else:
            raise TypeError(f'Value {val} is of {type(val)}, not int, float or string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if not math.isnan(casted_val):
                return True
        return False"
proteinidentifier,"

class proteinidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Protein ID'
        self.format = ""Protein ID should be in the form 'NP_######' where '#' represents digits""
        self.examples = ['NP_006524', 'NP_002002', 'NP_998812', 'NP_075252', 'NP_055188']

    def super_cast(self, val):
        match_obj = re.match('NP_\\d{6}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Protein ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('NP_\\d{6}', casted_val):
            return True
        else:
            return False"
nodecoded,"

class nodecoded(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'In upper-case and as a string'
        self.examples = ['POSITIVE', 'NEGATIVE', 'POSITIVE', 'NEGATIVE', 'POSITIVE']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['POSITIVE', 'NEGATIVE']:
            return True
        else:
            return False"
vitalstatus,"

class vitalstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'The vital status of a person'
        self.format = 'Boolean, either LIVING or DECEASED'
        self.examples = ['LIVING', 'DECEASED', 'LIVING', 'DECEASED', 'LIVING']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['LIVING', 'DECEASED']:
            return True
        else:
            return False"
englishword,"

class englishword(GeneralSemanticType):

    def __init__(self):
        self.description = 'English word'
        self.format = 'Lowercase letters'
        self.examples = ['the', 'of', 'and', 'to', 'a']

    def super_cast(self, val):
        if val is None:
            return None
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
stationcode,"

class stationcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Station codes are numerical identifiers for weather stations.'
        self.format = 'Station codes are integers.'
        self.examples = [10001, 11610, 20501, 32805, 50304]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception(f'Value: {val} cannot be casted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 10001 <= casted_val <= 50304:
            return True
        else:
            return False"
wban,"

class wban(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weather Bureau Army Navy identifier'
        self.format = 'WBAN should be represented as an integer'
        self.examples = [33013, 33031, 33023, 33044, 12001]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 10001 <= casted_val <= 82506:
            return True
        else:
            return False"
weatherstationname,"

class weatherstationname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Weather Station'
        self.format = 'All capital letters'
        self.examples = ['AIN EL', 'LA SENIA', 'MAISON BLANCHE', 'TELERGMA', 'TINDOUF']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
countryidentifier,"

class countryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country identifier'
        self.format = '2-letter string'
        self.examples = ['AL', 'AU', 'IN', 'PM', 'BZ']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 2:
            val = val.upper()
            if pycountry.countries.get(alpha_2=val):
                return val
            else:
                raise Exception('Invalid Country Code')
        else:
            raise Exception('Invalid input type, expected a 2-letter string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(alpha_2=casted_val):
            return True
        else:
            return False"
latitudelongitude,"

class latitudelongitude(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical coordinates'
        self.format = 'A decimal number'
        self.examples = [32.53952745, -86.64408227, 26.16, 26.43, 21.29]

    def super_cast(self, val):
        if isinstance(val, str) and re.match('^\\d{4}[N|S|E|W]$', val):
            degrees = int(val[:2])
            minutes = int(val[2:4])
            direction = val[-1]
            decimal = degrees + minutes / 60
            if direction in ['S', 'W']:
                decimal *= -1
            return decimal
        else:
            try:
                return float(val)
            except ValueError:
                raise Exception('Invalid Latitude/Longitude')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -180 and casted_val <= 180:
            return True
        else:
            return False"
elevation,"

class elevation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Elevation in meters'
        self.format = 'Elevation should be represented as a floating point number'
        self.examples = [611.0, 88.0, 23.0, 754.0, 443.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
latitudedecimal,"

class latitudedecimal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Latitude in decimal degrees'
        self.format = 'Latitude should be represented as a floating point number'
        self.examples = [36.38333333, 35.61666667, 36.71666667, 36.11666667, 27.68333333]

    def super_cast(self, val):
        try:
            num = float(val)
            if -90 <= num <= 90:
                return num
            else:
                raise ValueError('Invalid Latitude')
        except Exception as e:
            raise ValueError(f'Cannot cast to float: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -90 <= casted_val <= 90:
            return True
        else:
            return False"
longitudedecimal,"

class longitudedecimal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Longitude in decimal degrees'
        self.format = 'Longitude should be represented as a floating point number'
        self.examples = [6.65, 0.583333333, 3.216666667, 6.416666667, -8.083333333]

    def super_cast(self, val):
        num = float(val)
        if -180 <= num <= 180:
            return num
        else:
            raise Exception('Invalid Longitude')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -180 <= casted_val <= 180:
            return True
        else:
            return False"
yesno,"

class yesno(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'yes' or 'no'""
        self.format = 'The data is a string representing a boolean value in title case'
        self.examples = ['Yes', 'No', 'No', 'Yes', 'Yes']

    def super_cast(self, val):
        lower_val = str(val).lower()
        if lower_val in ['yes', 'no']:
            return str(val).title()
        else:
            return 'Invalid boolean representation'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
complaintidentifier,"

class complaintidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique id for a complaint'
        self.format = 'Complaint id must be an integer'
        self.examples = [511074, 511080, 510473, 510326, 511067]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} can't be casted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
refractiveindex,"

class refractiveindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Refractive index of a material'
        self.format = 'Refractive index should be a floating point number'
        self.examples = [1.33, 1.5, 1.7, 1.8, 1.9]

    def super_cast(self, val):
        num = float(val)
        return round(num, 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 2:
            return True
        else:
            return False"
weightpercent,"

class weightpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight percent of an element in a material'
        self.format = 'Weight percent should be a floating point number'
        self.examples = [1.1, 13.64, 4.49, 72.79, 0.06]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except Exception as e:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 100:
            return True
        else:
            return False"
glasstype,"

class glasstype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of glass'
        self.format = 'Integer format'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Can't be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
dayofweek,"

class dayofweek(GeneralSemanticType):

    def __init__(self):
        self.description = 'Day of the week'
        self.format = 'Day of the week should be a positive integer between 1 and 7 (1 for Monday, 7 for Sunday)'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 7:
            return val
        else:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 7:
            return True
        else:
            return False"
timeofday,"

class timeofday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time of day in military format'
        self.format = 'Time of day should be a positive integer between 0000 and 2400 (military time)'
        self.examples = [2003, 754, 628, 1829, 1940]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0 and (val <= 2400):
            return val
        else:
            raise Exception('Invalid time of day')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 2400:
            return True
        else:
            return False"
airlinecode,"

class airlinecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Airline code'
        self.format = 'Airline code should be a string of 2 or 3 uppercase alphabetic characters'
        self.examples = ['WN', 'OO', 'UA', 'XE', 'US']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z]{2,3}$', casted_val):
            return True
        else:
            return False"
flightnum,"

class flightnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flight number'
        self.format = 'Flight number should be a positive integer'
        self.examples = [335, 3231, 448, 3920, 378]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 1:
                return val
            else:
                raise ValueError('Invalid value')
        except Exception as e:
            raise ValueError('Invalid type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False"
tailnum,"

class tailnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Aircraft tail number'
        self.format = 'Aircraft tail number should be a string of alphanumeric characters'
        self.examples = ['N712SW', 'N772SW', 'N428WN', 'N464WN', 'N726SW']

    def super_cast(self, val):
        val = str(val)
        if not re.match('^[A-Z0-9]+$', val):
            raise Exception('Invalid aircraft tail number')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if re.match('^[A-Z0-9]+$', casted_val):
                return True
            else:
                return False
        except:
            return False"
symptom,"

class symptom(GeneralSemanticType):

    def __init__(self):
        self.description = 'Medical symptom'
        self.format = 'All letters should be in lower case and spaces should be replaced by underscores'
        self.examples = ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
severityscore,"

class severityscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Severity score of a symptom'
        self.format = 'Severity scores should be integers in the range 1 to 7'
        self.examples: list = [1, 3, 4, 5, 7]

    def super_cast(self, val):
        try:
            score = int(val)
            if score < 1 or score > 7:
                raise ValueError('Severity score should be in the range 1 to 7')
            return score
        except ValueError:
            raise ValueError('Value is not a valid severity score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 7:
            return True
        else:
            return False"
dailyaggregation,"

class dailyaggregation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Aggregation method used'
        self.format = ""String with value 'Daily'""
        self.examples = ['Daily', 'Daily', 'Daily', 'Daily', 'Daily']

    def super_cast(self, val):
        if val == 'Daily':
            return val
        else:
            raise Exception('Invalid aggregation method')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Daily':
            return True
        else:
            return False"
version,"

class version(GeneralSemanticType):

    def __init__(self):
        self.description = 'Version of a data or game'
        self.format = ""Versions should be strings in the form of 'X.Y.Z' where X, Y, and Z are integers or a single float number""
        self.examples = ['1.2.0', '1.0', '2.3.4', '1.0', '3.4.5']

    def super_cast(self, val):
        if isinstance(val, float):
            return str(val)
        elif isinstance(val, str):
            match_obj = re.match('[0-9]+\\.[0-9]+\\.[0-9]+', val)
            if match_obj:
                return match_obj.group()
            else:
                raise Exception('Invalid version')
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if '.' in casted_val:
                parts = casted_val.split('.')
                if all((part.isdigit() for part in parts)):
                    return True
        return False"
airportname,"

class airportname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an airport'
        self.format = 'Strings containing the name of an airport'
        self.examples = ['Kingsford Smith', 'Hartsfield-Jackson Atlanta International', 'John F. Kennedy International', 'Montreal Trudeau', 'Los Angeles International']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str) and len(casted_val.strip()) > 0"
percentofbaseline,"

class percentofbaseline(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percent of baseline traffic at an airport'
        self.format = 'Percentages should be integers between 0 and 100'
        self.examples = [64, 29, 54, 18, 22]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be casted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
batsman,"

class batsman(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Batsman'
        self.format = 'Only the first letter of the initials and last name should be capitalized'
        self.examples = ['V Kohli', 'SK Raina', 'RG Sharma', 'DA Warner', 'S Dhawan']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        split_name = casted_val.split()
        if len(split_name) == 2:
            if split_name[0].isupper() and split_name[1].isupper():
                return False
            else:
                return True
        else:
            return False"
totalruns,"

class totalruns(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total runs scored by a batsman in IPL'
        self.format = 'Total runs should be an integer'
        self.examples = [5426, 5386, 4902, 4717, 4601]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return 0 <= casted_val <= float('inf')"
out,"

class out(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a batsman got out in IPL'
        self.format = 'Number of outs should be an integer'
        self.examples = [152, 160, 161, 114, 137]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value. Expected an integer, got {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val) or np.isinf(casted_val):
            return False
        return True"
numberofballs,"

class numberofballs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of balls faced by a batsman in IPL'
        self.format = 'Number of balls should be an integer'
        self.examples = [4111, 3916, 3742, 3292, 3665]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError(f'Cannot cast {val} to integer. Reason: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
average,"

class average(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average runs scored by a batsman in IPL'
        self.format = 'Average runs should be a floating point number with three decimal places'
        self.examples = [35.697, 33.662, 30.447, 41.377, 33.583]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
strikerate,"

class strikerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Strike rate of a batsman in IPL'
        self.format = 'Strike rate should be a floating point number with three decimal places'
        self.examples = [131.987, 137.538, 130.999, 143.286, 125.538]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
issuperover,"

class issuperover(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a super over occurred or not'
        self.format = 'Boolean value represented as 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise Exception()
        except:
            raise ValueError('Invalid value. Expected 0 or 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
dismissalmethod,"

class dismissalmethod(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Method of dismissal of a player'
        self.format: str = 'lower-case string'
        self.examples: list = ['caught', 'bowled', 'run out', 'lbw', 'stumped']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
result,"

class result(GeneralSemanticType):

    def __init__(self):
        self.description = 'Result of the match'
        self.format = 'Result should be in lowercase'
        self.examples = ['normal', 'tie', 'no result', 'normal', 'normal']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['normal', 'tie', 'no result']:
            return True
        else:
            return False"
wickets,"

class wickets(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of wickets'
        self.format = 'Number of wickets should be an integer between 0 and 10'
        self.examples = [0, 7, 10, 6, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 0 <= int_val <= 10:
                return int_val
            else:
                return 0
        except ValueError:
            return 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
covid19date,"

class covid19date(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when a COVID-19 case was reported'
        self.format = ""Dates must be strings of the form 'YYYY-MM-DD'""
        self.examples = ['2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-24']

    def super_cast(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d')
        except ValueError:
            raise Exception('Incorrect date format, should be YYYY-MM-DD')
        return val

    def validate(self, val):
        try:
            casted_val = self.super_cast(val)
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
countyname,"

class countyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a county or state in the US'
        self.format = 'A string with the first letter of each word capitalized'
        self.examples = ['Washington County', 'Jefferson County', 'Franklin County', 'Lincoln County', 'Jackson County']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fipscode,"

class fipscode(GeneralSemanticType):

    def __init__(self):
        self.description = 'FIPS code for US counties or states'
        self.format = 'A floating point number'
        self.examples = [1001.0, 1003.0, 1005.0, 1007.0, 1009.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        elif isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or 60.0 <= casted_val <= 78030.0:
            return True
        else:
            return False"
numdeaths,"

class numdeaths(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of COVID-19 deaths'
        self.format = 'Number of deaths should be a positive integer'
        self.examples = [0, 1, 9, 40, 17597]

    def super_cast(self, val):
        if np.isnan(val) or val < 0:
            return None
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or casted_val < 0:
            return False
        else:
            return True"
bhk,"

class bhk(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Bedrooms'
        self.format = 'Number of bedrooms should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Value should be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 6:
            return True
        else:
            return False"
rent,"

class rent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rent of a House'
        self.format = 'Rent should be a floating point number'
        self.examples = [1200.0, 10000.0, 16000.0, 33000.0, 3500000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not np.nan and 1200 <= casted_val <= 3500000:
            return True
        else:
            return False"
floor,"

class floor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Floor Number'
        self.format = 'Floor number should be stored as a string'
        self.examples = ['1 out of 2', 'Ground out of 2', '2 out of 3', '2 out of 4', '1 out of 3']

    def super_cast(self, val):
        match_obj = re.match('(\\d+|Ground) out of (\\d+)', str(val))
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid floor number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('(\\d+|Ground) out of (\\d+)', casted_val):
            return True
        else:
            return False"
arealocality,"

class arealocality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Area Locality'
        self.format = 'Area locality should be stored as a string'
        self.examples = ['Bandra West', 'Gachibowli', 'Electronic City', 'Velachery', 'Miyapur, NH 9']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
furnishingstatus,"

class furnishingstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Furnishing Status of a House'
        self.format = 'Furnishing status should be stored as a string'
        self.examples = ['Semi-Furnished', 'Unfurnished', 'Furnished']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid furnishing status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
tenantpreferred,"

class tenantpreferred(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tenant Preference'
        self.format = 'Tenant preference should be stored as a string'
        self.examples = ['Bachelors/Family', 'Bachelors', 'Family']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid tenant preference'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
bathroom,"

class bathroom(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Bathrooms'
        self.format = 'Number of bathrooms should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and (not math.isnan(val)):
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 10:
            return True
        else:
            return False"
pointofcontact,"

class pointofcontact(GeneralSemanticType):

    def __init__(self):
        self.description = 'Point of Contact'
        self.format = 'Point of contact should be stored as a string'
        self.examples = ['Contact Owner', 'Contact Agent', 'Contact Builder']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            return 'Invalid point of contact'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
totalcases,"

class totalcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of Covid-19 cases'
        self.format = 'Total cases must be an integer'
        self.examples = [98166904, 44587307, 35342950, 34706757, 33312373]

    def super_cast(self, val):
        return int(str(val).replace(',', ''))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totaldeaths,"

class totaldeaths(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of deaths due to Covid-19'
        self.format = 'Total deaths must be an integer'
        self.examples = [1084282, 528629, 155078, 686027, 149948]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str):
            return int(val.replace(',', ''))
        elif isinstance(val, int) or isinstance(val, float):
            return int(val)
        else:
            raise ValueError('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totalrecovered,"

class totalrecovered(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of recoveries from Covid-19'
        self.format = 'Total recoveries must be an integer'
        self.examples = [94962112, 44019095, 34527115, 33838636, 32315200]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(str(val).replace(',', ''))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
seriouscritical,"

class seriouscritical(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of serious or critical Covid-19 cases'
        self.format = 'Serious or critical cases must be an integer'
        self.examples = [2970, 698, 869, 8318, 1406]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(val.replace(',', ''))
        except Exception as e:
            raise ValueError(f'Unable to cast value {val} to integer') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totaltests,"

class totaltests(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of Covid-19 tests conducted'
        self.format = 'integer'
        self.examples = [1118158870, 894416853, 271490188, 63776166, 122332384]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, str):
            val = val.replace(',', '')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            if casted_val < 0:
                return False
            else:
                return True
        else:
            return False"
sequentialnumericidentifier,"

class sequentialnumericidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A numeric identifier that increases sequentially by 1, starting from 0 or 1.'
        self.format = 'Sequential identifiers should be integer values, increasing by 1.'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid input, unable to cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
twittertarget,"

class twittertarget(GeneralSemanticType):

    def __init__(self):
        self.description = 'Entity being targeted in a tweet, usually represented by a hyphen-separated string'
        self.format = 'Target should be lowercase and hyphen-separated'
        self.examples = ['the-media', 'democrats', 'hillary-clinton', 'trump-russia', 'joe-biden']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if type(casted_val) == str and '-' in casted_val:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
twitterinsult,"

class twitterinsult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Insult contained in a tweet, usually represented by a string'
        self.format = 'Insult should be capitalized correctly'
        self.examples = ['Fake News', 'Crooked', 'Sleepy Joe', 'failing', 'Crooked Hillary']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
playerheight,"

class playerheight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of a player'
        self.format = 'Height should be a floating point number (in cm units)'
        self.examples = [198.12, 215.9, 205.74, 203.2, 205.74]

    def super_cast(self, val):
        if isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            return round(val, 2)
        else:
            raise Exception('Invalid height')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 160.02 <= casted_val <= 231.14:
            return True
        else:
            return False"
playerweight,"

class playerweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight of a player'
        self.format = 'Weight should be a floating point number in kg'
        self.examples = [72.0, 83.0, 68.0, 87.0, 74.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 60.327736 <= float_val <= 163.29312:
                return round(float_val, 2)
            else:
                return None
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 500:
            return True
        else:
            return False"
college,"

class college(GeneralSemanticType):

    def __init__(self):
        self.description = 'College of the NBA Player'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['None', 'Kentucky', 'Duke', 'North Carolina', 'UCLA']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
draftyear,"

class draftyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Draft Year of an NBA Player'
        self.format = ""Formatted as 'YYYY' or 'Undrafted'""
        self.examples = ['Undrafted', '1998', '2003', '2005', '2008']

    def super_cast(self, val):
        string = str(val)
        if string.isdigit() and len(string) == 4:
            return string
        elif string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft year')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and len(casted_val) == 4:
            return True
        elif casted_val.lower() == 'undrafted':
            return True
        else:
            return False"
draftround,"

class draftround(GeneralSemanticType):

    def __init__(self):
        self.description = 'Draft Round of the NBA Player'
        self.format = ""Draft Round should be a string containing a number or 'Undrafted'""
        self.examples = ['1', '2', 'Undrafted', '3', '4']

    def super_cast(self, val):
        string = str(val)
        if string.isdigit():
            return string
        elif string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft round')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() or casted_val.lower() == 'undrafted':
            return True
        else:
            return False"
draftnumber,"

class draftnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Draft Number of the NBA Player'
        self.format = ""Draft Number should be a string containing a number or 'Undrafted'""
        self.examples = ['Undrafted', '1', '5', '4', '3']

    def super_cast(self, val):
        string = str(val)
        if string.isdigit() or string.lower() == 'undrafted':
            return string.title()
        else:
            raise Exception('Invalid draft number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and (casted_val.isdigit() or casted_val.lower() == 'undrafted'):
            return True
        else:
            return False"
gp,"

class gp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Games Played by the NBA Player'
        self.format = 'Integer between 1 and 85'
        self.examples = [55, 15, 9, 64, 27]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 85:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid games played')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 85:
            return True
        else:
            return False"
pts,"

class pts(GeneralSemanticType):

    def __init__(self):
        self.description = 'Points Scored by the NBA Player'
        self.format = 'Points Scored should be a floating point number'
        self.examples = [5.7, 2.3, 0.8, 3.7, 2.4]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception('Invalid points scored')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
reb,"

class reb(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rebounds by the NBA Player'
        self.format = 'Rebounds should be a floating point number'
        self.examples = [16.1, 1.5, 1.0, 2.3, 2.4]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 2)
            else:
                raise Exception('Invalid rebounds')
        except Exception as e:
            raise Exception(f'Invalid value: {val}. Error: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
ast,"

class ast(GeneralSemanticType):

    def __init__(self):
        self.description = 'Assists by the NBA Player'
        self.format = 'Assists should be a floating point number'
        self.examples = [3.1, 0.3, 0.4, 0.6, 0.2]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception('Invalid assists')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
netrating,"

class netrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Net Rating of the NBA Player'
        self.format = 'Net Rating should be a floating point number'
        self.examples = [16.1, 12.3, -2.1, -8.7, -11.2]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Cannot convert value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (not math.isnan(casted_val)):
            return True
        else:
            return False"
orebpercent,"

class orebpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Offensive Rebound Percentage of the NBA Player'
        self.format = 'Offensive Rebound Percentage should be a floating point number between 0 and 1'
        self.examples = [0.186, 0.078, 0.105, 0.06, 0.109]

    def super_cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid offensive rebound percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
drebpercent,"

class drebpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Defensive Rebound Percentage of the NBA Player'
        self.format = 'Defensive Rebound Percentage should be a floating point number between 0 and 1'
        self.examples = [0.32, 0.15, 0.1, 0.15, 0.18]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
        except ValueError:
            raise Exception('Invalid input')
        else:
            if 0 <= num <= 1:
                return num
            else:
                raise Exception('Invalid defensive rebound percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
usgpercent,"

class usgpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Usage Percentage of the NBA Player'
        self.format = 'Usage Percentage should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.175, 0.103, 0.1669999999999999, 0.127]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid usage percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
tspercent,"

class tspercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'True Shooting Percentage of the NBA Player'
        self.format = 'True Shooting Percentage should be a floating point number between 0 and 1.5'
        self.examples = [0.479, 0.43, 0.376, 0.3989999999999999, 0.611]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
            if 0 <= num <= 1.5:
                return num
            else:
                raise Exception('Invalid true shooting percentage')
        except ValueError:
            raise Exception('Invalid input. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1.5:
            return True
        else:
            return False"
astpercent,"

class astpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Assist Percentage of the NBA Player'
        self.format = 'Assist Percentage should be a floating point number between 0 and 1'
        self.examples = [0.113, 0.048, 0.148, 0.077, 0.04]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
            return num
        except Exception as e:
            return 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
acousticmeasurement,"

class acousticmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'A measure of the acoustic quality of a song'
        self.format = 'Acoustic measurement should be a floating point number between 0 and 1'
        self.examples = [0.0102, 0.199, 0.0344, 0.604, 0.18]

    def super_cast(self, val):
        try:
            val = float(val)
            return val
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
durationms,"

class durationms(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of a song'
        self.format = 'Duration should be an integer representing milliseconds'
        self.examples = [204600, 326933, 185707, 199413, 392893]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and re.match('^\\d+?\\.\\d+?$', str(val)) is None:
            return int(val)
        else:
            raise ValueError('Invalid input value. It should be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
key,"

class key(GeneralSemanticType):

    def __init__(self):
        self.description = 'A key of a song'
        self.format = 'Key should be an integer between 0 and 11'
        self.examples = [2, 1, 2, 5, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if 0 <= val <= 11:
                return val
            else:
                raise Exception('Invalid key')
        except ValueError:
            raise Exception('Invalid key')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 11:
            return True
        else:
            return False"
mode,"

class mode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mode'
        self.format = 'A number'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        val = int(val)
        if val in [0, 1]:
            return val
        else:
            raise Exception('Invalid mode')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
timesignature,"

class timesignature(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time signature of a song'
        self.format = 'Time signature should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        val = int(val)
        if 1 <= val <= 5:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
songtitle,"

class songtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a song'
        self.format = 'Song title should be a string'
        self.examples = ['Mask Off', 'Redbone', 'Xanny Family', 'Master Of None', 'Parallel Lines']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
artist,"

class artist(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an artist'
        self.format = 'String representation of an artist name'
        self.examples = ['Future', 'Childish Gambino', 'Future', 'Beach House', 'Junior Boys']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
totalbilirubin,"

class totalbilirubin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total Bilirubin level'
        self.format = 'Total Bilirubin level should be a non-negative float'
        self.examples = [0.7, 10.9, 7.3, 1.0, 3.9]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except ValueError:
            raise ValueError(f'Invalid Total Bilirubin level {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
directbilirubin,"

class directbilirubin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Direct Bilirubin level'
        self.format = 'Direct Bilirubin level should be a non-negative float'
        self.examples = [0.1, 5.5, 4.1, 0.4, 2.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise ValueError(f'Invalid Direct Bilirubin level {val}')
            return round(val, 2)
        except ValueError as ve:
            return ve

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
housingstatus,"

class housingstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Housing status of a person'
        self.format = ""Housing status should be either 'own', 'rent', or 'free'""
        self.examples = ['own', 'rent', 'free', 'own', 'rent']

    def super_cast(self, val):
        lower_string_val = str(val).lower()
        if lower_string_val not in ['own', 'rent', 'free']:
            raise Exception('Invalid value')
        else:
            return lower_string_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['own', 'rent', 'free']:
            return True
        else:
            return False"
savingaccountstatus,"

class savingaccountstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Saving account status of a person'
        self.format = 'Saving account status as a string'
        self.examples = ['little', 'moderate', 'quite rich', 'rich']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['little', 'moderate', 'quite rich', 'rich']:
            return True
        else:
            return False"
checkingaccountstatus,"

class checkingaccountstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Checking account status of a person'
        self.format = 'Checking account status should be a string'
        self.examples = ['little', 'moderate', 'rich']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['little', 'moderate', 'rich']:
            return True
        else:
            return False"
creditamount,"

class creditamount(GeneralSemanticType):

    def __init__(self):
        self.description = ""The credit amount in a person's account""
        self.format = 'Credit amount should be formatted as a floating point number'
        self.examples = [1169.0, 5951.0, 2096.0, 7882.0, 4870.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
creditpurpose,"

class creditpurpose(GeneralSemanticType):

    def __init__(self):
        self.description = 'Purpose of the credit'
        self.format = 'Purpose should be a string'
        self.examples = ['car', 'radio/TV', 'furniture/equipment', 'business', 'education']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
twitterusername,"

class twitterusername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Twitter Username'
        self.format = 'Names are case sensitive and must start with an alphabet or underscore, followed by a combination of alphabets, numbers and underscores'
        self.examples = ['Rachel Roh', 'Albert Fong', 'eli🇱🇹🇪🇺👌', 'Charles Adler', 'Citizen News Channel']

    def super_cast(self, val):
        if isinstance(val, str) and re.match('^[A-Za-z_][A-Za-z_0-9]*$', val):
            return val
        else:
            return 'Invalid Username'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid Username':
            return False
        else:
            return True"
dateandtime,"

class dateandtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.format = ""Date and time should be in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-12-20 06:06:44', '2020-12-13 16:27:13', '2020-12-12 20:33:45', '2020-12-12 20:23:59', '2020-12-12 20:17:19']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise Exception('Value does not match format: YYYY-MM-DD HH:MM:SS')
        else:
            raise Exception('Value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
userverificationstatus,"

class userverificationstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'User Verification Status'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
hashtaglist,"

class hashtaglist(GeneralSemanticType):

    def __init__(self):
        self.description = 'List of Hashtags'
        self.format = 'Hashtags must start with #, followed by a combination of alphabets, numbers and underscores'
        self.examples = [""['PfizerBioNTech']"", ""['coronavirus', 'SputnikV', 'AstraZeneca', 'PfizerBioNTech', 'Moderna', 'Covid_19']"", ""['whereareallthesickpeople', 'PfizerBioNTech']""]

    def super_cast(self, val):
        if val is None or (isinstance(val, float) and math.isnan(val)):
            return None
        else:
            hashtags = re.findall('\\b#\\w\\w+\\b', str(val))
            return hashtags if len(hashtags) > 0 else None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            for hashtag in casted_val:
                if not re.match('\\b#\\w\\w+\\b', hashtag):
                    return False
            return True
        else:
            return casted_val is None"
twitterapp,"

class twitterapp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Twitter App from which the tweet was made'
        self.format = 'Names are case sensitive and can contain spaces and special characters'
        self.examples = ['Twitter for iPhone', 'Twitter Web App', 'Twitter for Android', 'TweetDeck', 'Twitter for iPad']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            return 'Invalid Twitter App'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
ufosightingtime,"

class ufosightingtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time of UFO sighting'
        self.format = ""Date and Time should be in the format 'yyyy-mm-dd hh:mm:ss'""
        self.examples = ['1949-10-10 20:30:00', '1949-10-10 21:00:00', '1955-10-10 17:00:00', '1956-10-10 21:00:00', '1960-10-10 20:00:00']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d %H:%M:%S')
        else:
            raise Exception('Invalid type. Expected a datetime object')

    def validate(self, val):
        try:
            datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
countryabbreviation,"

class countryabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Abbreviation of a country'
        self.format = 'Country abbreviation should be a string of two lower-case letters'
        self.examples = ['us', 'ca', 'gb', 'au', 'de']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[a-z]{2}$', casted_val):
            return True
        else:
            return False"
ufosightingshape,"

class ufosightingshape(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shape of the UFO'
        self.format = 'Shape should be a string of lower-case letters'
        self.examples = ['light', 'triangle', 'circle', 'fireball', 'other']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['light', 'triangle', 'circle', 'fireball', 'other']:
            return True
        else:
            return False"
ufosightingduration,"

class ufosightingduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of a UFO sighting'
        self.format = 'Duration should be a floating point number in seconds'
        self.examples = [2700.0, 7200.0, 20.0, 20.0, 900.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)) and (not math.isinf(casted_val)):
            return True
        else:
            return False"
smartphoneaxisacceleration,"

class smartphoneaxisacceleration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Smartphone Axis Acceleration'
        self.format = 'Smartphone Axis Acceleration should be formatted as a float'
        self.examples: list = [0.274, -0.018, -0.108]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid input. Expected a value that can be converted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
correlation,"

class correlation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Correlation'
        self.format = 'Formatted as a float between -1 and 1'
        self.examples = [0.1, -0.5, 0.75, 0.2, 0.9]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise ValueError('Invalid input: expected a numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -1 <= casted_val <= 1:
            return True
        else:
            return False"
activityindex,"

class activityindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'The index of an activity in human activity recognition dataset'
        self.format = 'Non-negative integer, between 0 and 7351'
        self.examples = [0, 1837, 3675, 5513, 7351]

    def super_cast(self, val):
        try:
            num = int(val)
            if 0 <= num <= 7351:
                return num
            else:
                return 'Invalid value'
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 7351:
            return True
        else:
            return False"
bodyacceleration,"

class bodyacceleration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mean body acceleration in a certain direction'
        self.format = 'Body acceleration should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def super_cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration')
        return round(num, 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -1.0 and casted_val <= 1.0:
            return True
        else:
            return False"
bodyaccelerationstd,"

class bodyaccelerationstd(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The standard deviation of body acceleration in a certain direction'
        self.format = 'Body acceleration standard deviation should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def super_cast(self, val):
        num = float(val)
        if num < -1.0 or num > 1.0:
            raise Exception('Invalid body acceleration standard deviation')
        return round(num, 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return -1.0 <= casted_val <= 1.0"
bodyaccelerationcorrelation,"

class bodyaccelerationcorrelation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The correlation between body accelerations in two different directions'
        self.format = 'Body acceleration correlation should be a floating point number between -1 and 1'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < -1.0 or num > 1.0:
                raise Exception('Invalid body acceleration correlation')
            return round(num, 6)
        except ValueError:
            raise Exception('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -1.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
gravityacceleration,"

class gravityacceleration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mean gravity acceleration in the x direction'
        self.format = 'Gravity acceleration should be a floating point number between -1 and 0.99154906'
        self.examples = [-1.0, -0.5, 0.0, 0.5, 0.99154906]

    def super_cast(self, val):
        num = float(val)
        if num < -1.0 or num > 0.99154906:
            raise Exception('Invalid gravity acceleration')
        return round(num, 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -1.0 <= casted_val <= 0.99154906:
            return True
        else:
            return False"
incidenttype,"

class incidenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Incident'
        self.format = 'Incident type should be a string with an uppercase first character'
        self.examples = ['EMS: BACK PAINS/INJURY', 'EMS: DIABETIC EMERGENCY', 'Fire: GAS-ODOR/LEAK', 'EMS: CARDIAC EMERGENCY', 'EMS: DIZZINESS']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
township,"

class township(GeneralSemanticType):

    def __init__(self):
        self.description = 'Township'
        self.format = 'Township should be a string with an uppercase first character'
        self.examples = ['NEW HANOVER', 'HATFIELD TOWNSHIP', 'NORRISTOWN', 'NORRISTOWN', 'LOWER POTTSGROVE']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
emergencycall,"

class emergencycall(GeneralSemanticType):

    def __init__(self):
        self.description = 'Emergency Call'
        self.format = 'Boolean format'
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, int):
            return bool(val)
        else:
            raise ValueError(""Input value is not of type 'int'."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
casescount,"

class casescount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of COVID-19 cases'
        self.format = 'Count of cases should be an integer with no decimal places'
        self.examples = [104196861, 44682784, 39524311, 37779833, 36824580]

    def super_cast(self, val):
        try:
            return int(str(val).replace(',', ''))
        except ValueError:
            raise Exception('Invalid cases count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
sugar,"

class sugar(GeneralSemanticType):

    def __init__(self):
        self.description = 'The sugar level of a substance'
        self.format = 'Sugar level should be formatted as a floating point number with two decimal places'
        self.examples = [1.9, 2.6, 2.2, 1.9, 1.9]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
phlevel,"

class phlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'The pH level of a substance'
        self.format = 'A floating point number'
        self.examples = [3.51, 3.2, 3.26, 3.16, 3.51]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid value for pH level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 14.0:
            return True
        else:
            return False"
sulphates,"

class sulphates(GeneralSemanticType):

    def __init__(self):
        self.description = 'The sulphates level of a substance'
        self.format = 'Sulphates level should be formatted as a floating point number with two decimal places'
        self.examples = [0.56, 0.68, 0.65, 0.58, 0.56]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
alcohol,"

class alcohol(GeneralSemanticType):

    def __init__(self):
        self.description = 'The alcohol level of a substance'
        self.format = 'Floating point number with one decimal place'
        self.examples = [9.4, 9.8, 9.8, 9.8, 9.4]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 1)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
quality,"

class quality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality of a substance'
        self.format = 'Quality should be formatted as an integer'
        self.examples = ['3', '4', '5', '6', '7']

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
indianfoodname,"

class indianfoodname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an Indian Food'
        self.format = 'The name of the food should be capitalized'
        self.examples = ['Balu Shahi', 'Boondi', 'Gajar Ka Halwa', 'Ghevar', 'Gulab Jamun']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fooddiet,"

class fooddiet(GeneralSemanticType):

    def __init__(self):
        self.description = 'The diet preference of a person'
        self.format = 'lower-cased string'
        self.examples = ['vegetarian', 'non vegetarian', 'vegetarian', 'non vegetarian', 'vegetarian']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['vegetarian', 'non vegetarian']:
            return True
        else:
            return False"
foodpreptime,"

class foodpreptime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The preparation time for a food'
        self.format = 'Preparation time should be an integer representing the number of minutes'
        self.examples = [10, 20, 30, 40, 50]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
foodcooktime,"

class foodcooktime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cooking time for a food'
        self.format = 'Cooking time should be an integer representing the number of minutes'
        self.examples = [10, 20, 30, 40, 50]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
foodflavorprofile,"

class foodflavorprofile(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flavor profile of a food'
        self.format = 'The flavor profile should be a lowercase string'
        self.examples = ['spicy', 'sweet', 'bitter', 'sour', '-1']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['spicy', 'sweet', 'bitter', 'sour', '-1']:
            return True
        else:
            return False"
foodcourse,"

class foodcourse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Course in which a food is served'
        self.format = 'The course should be a lowercase string'
        self.examples = ['main course', 'dessert', 'snack', 'starter']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['main course', 'dessert', 'snack', 'starter']:
            return True
        else:
            return False"
indianregion,"

class indianregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indian region'
        self.format = 'Region should be a capitalized string'
        self.examples = ['West', 'South', 'North', 'East', 'North East']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['West', 'South', 'North', 'East', 'North East']:
            return True
        else:
            return False"
datetimeupdated,"

class datetimeupdated(GeneralSemanticType):

    def __init__(self):
        self.description = 'Datetime when the data was last updated'
        self.format = 'Datetime object'
        self.examples = ['1/25/2020 12:00 PM', '1/23/20 12:00 PM', '1/26/2020 11:00 AM', '1/25/2020 12:00 AM', '1/24/2020 12:00 PM']

    def super_cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %I:%M %p')
        except ValueError:
            try:
                return datetime.strptime(val, '%m/%d/%Y')
            except ValueError:
                raise Exception('Invalid datetime')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
indexnumeric,"

class indexnumeric(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of rows in a table'
        self.format = 'Index should be an integer number'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception(f'Failed to cast {val} to int with error: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
numberofcases,"

class numberofcases(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of Cases'
        self.format: str = 'Number of cases should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if pd.notna(val):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
numberofsuspectedcases,"

class numberofsuspectedcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Suspected Cases'
        self.format = 'Number of suspected cases should be a floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and 0 <= casted_val:
            return True
        else:
            return False"
numberofrecoveredcases,"

class numberofrecoveredcases(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of Recovered Cases'
        self.format: str = 'Number of recovered cases should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
        except ValueError:
            casted_val = float('nan')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
numberofdeaths,"

class numberofdeaths(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of Deaths'
        self.format: str = 'Number of deaths should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val) if pd.notna(val) else float('nan')
        except ValueError:
            raise Exception('Invalid value, cannot be casted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
suspectedcases,"

class suspectedcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of suspected cases'
        self.format = 'The number should be an integer'
        self.examples = [244, 22, 4, 1, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if math.isnan(casted_val):
                return 0
            else:
                return casted_val
        except ValueError:
            return 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deathcases,"

class deathcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of death cases'
        self.format = 'Integer'
        self.examples = [249, 2, 1, 1, 1]

    def super_cast(self, val):
        if np.isnan(val):
            return 0
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(""Invalid value: Number of death cases can't be negative"")
        return True"
datetimefield,"

class datetimefield(GeneralSemanticType):

    def __init__(self):
        self.description = 'Datetime field'
        self.format = ""Datetime should be in the format 'MM/DD/YYYY HH:MM'""
        self.examples = ['2/5/20 16:43', '2/5/20 13:23', '2/5/20 15:13', '2/5/20 15:03', '2/5/20 15:23']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%m/%d/%Y %H:%M')
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%m/%d/%Y %H:%M').strftime('%m/%d/%Y %H:%M')
            except ValueError:
                raise Exception(""Invalid datetime format. The expected format is 'MM/DD/YYYY HH:MM'."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%Y %H:%M')
            return True
        except ValueError:
            return False"
patientcount,"

class patientcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of patients (confirmed, suspected, recovered, deceased)'
        self.format = 'Non-negative integers'
        self.examples = [1, 2, 10, 64, 16678]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid patient count')
            return num
        except Exception as e:
            print(f'Error occurred: {str(e)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
exchangerate,"

class exchangerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Exchange rate of currency with respect to USD'
        self.format = 'Exchange rate should be a non-negative floating point number'
        self.examples = [1.0, 1.195826, 0.01562, 1.324188, 0.32135]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception()
            return round(num, 5)
        except:
            raise Exception('Invalid exchange rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
motivation,"

class motivation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Motivation of an entity'
        self.format = 'lower-case string'
        self.examples = ['curiosity', 'fun', 'learning', 'learning', 'hobby']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
mltool,"

class mltool(GeneralSemanticType):

    def __init__(self):
        self.description = 'Machine Learning tool for the next year'
        self.format = 'ML tool should be represented as a lower-cased string'
        self.examples = ['pytorch', 'pytorch', 'keras', 'pytorch', 'scala']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
mlmethod,"

class mlmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Machine Learning method for the next year'
        self.format = 'ML method should be represented as a lower-case string'
        self.examples = ['reinforcement learning', 'reinforcement learning', 'gans', 'reinforcement learning', 'gan']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
surveyquestionidentifier,"

class surveyquestionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survey Question ID'
        self.format = 'Survey Question ID should be a integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value, expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 289:
            return False
        else:
            return True"
respondentgroup,"

class respondentgroup(GeneralSemanticType):

    def __init__(self):
        self.description = 'Respondent Group'
        self.format = 'Respondent group is a string'
        self.examples = ['CodingWorker', 'All', 'Learners', 'Worker1', 'CodingWorker-NC']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
schooltype,"

class schooltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a School'
        self.format = 'The school type should be a string with the first letter capitalized'
        self.examples = ['State', 'Liberal Arts', 'Party', 'Engineering', 'Ivy League']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
major,"

class major(GeneralSemanticType):

    def __init__(self):
        self.description = 'Undergraduate Major'
        self.format = 'First letter of each word should be capitalized'
        self.examples = ['Accounting', 'Aerospace Engineering', 'Agriculture', 'Anthropology', 'Architecture']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
percentchange,"

class percentchange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percent Change'
        self.format = 'Percent change should be represented as a floating point number'
        self.examples = [67.6, 75.0, 68.8, 67.1, 84.6]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to float')
        except TypeError:
            raise Exception(f'Invalid input type: {type(val)}, value: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
ratedgame,"

class ratedgame(GeneralSemanticType):

    def __init__(self):
        self.description = 'A game that is rated or not'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
epochtimestamp,"

class epochtimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timestamp in epoch milliseconds'
        self.format = 'Integer values representing time in epoch milliseconds'
        self.examples = [1376771633173, 1477547500000, 1496010000000, 1503170000000, 1504493143790]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            raise TypeError(f'Invalid type {type(val)}. Expected a numeric type.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
numberofturns,"

class numberofturns(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Turns in a Game'
        self.format = 'Integer values'
        self.examples = [37, 55, 79, 1, 349]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('The provided value cannot be casted to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
victorystatus,"

class victorystatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Victory Status of a Game'
        self.format = 'Strings representing the victory status'
        self.examples = ['resign', 'mate', 'outoftime', 'draw']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['resign', 'mate', 'outoftime', 'draw']:
            return True
        else:
            return False"
timecontrol,"

class timecontrol(GeneralSemanticType):

    def __init__(self):
        self.description = 'The increment code of the game'
        self.format = ""Strings in the format 'x+y'""
        self.examples = ['10+0', '15+0', '15+15', '5+5', '5+8']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\d+\\+\\d+', casted_val):
            return True
        else:
            return False"
userrating,"

class userrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rating of a user'
        self.format = ""Integer values representing the user's rating""
        self.examples = [784, 1398, 1567, 1793, 2700]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Value must be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
openingcode,"

class openingcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'The opening code of a game'
        self.format = ""Strings in the format 'X00'""
        self.examples = ['A00', 'C00', 'D00', 'B01', 'C41']

    def super_cast(self, val):
        string_val = str(val)
        if re.match('[A-Z][0-9]{2}', string_val):
            return string_val
        else:
            raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[A-Z][0-9]{2}', casted_val):
            return True
        else:
            return False"
openingname,"

class openingname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of the opening used in a game'
        self.format = 'Strings representing the name of an opening'
        self.examples = [""Van't Kruijs Opening"", 'Sicilian Defense', 'Sicilian Defense: Bowdler Attack', 'Scotch Game', 'French Defense: Knight Variation']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
openingply,"

class openingply(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of moves in the opening phase'
        self.format = 'Integer values'
        self.examples = [3, 4, 6, 1, 28]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
airlinename,"

class airlinename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an airline'
        self.format = 'The names should be properly capitalized'
        self.examples = ['United Air Lines Inc.', 'American Airlines Inc.', 'US Airways Inc.', 'Frontier Airlines Inc.', 'JetBlue Airways']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
iatacode,"

class iatacode(GeneralSemanticType):

    def __init__(self):
        self.description = 'IATA Airport Code'
        self.format = 'IATA code should be in upper case'
        self.examples = ['ABE', 'CWA', 'ABR', 'ABY', 'ACK']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 3 and casted_val.isupper():
            return True
        else:
            return False"
flightnumber,"

class flightnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of a flight'
        self.format = 'Flight number should be formatted as an integer'
        self.examples = [1, 2336, 840, 258, 135]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise Exception('Invalid flight number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
airportcode,"

class airportcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Airport codes'
        self.format = 'Airport codes should be uppercase'
        self.examples = ['ATL', 'DFW', 'ORD', 'DEN', 'LAX']

    def super_cast(self, val):
        code = str(val).upper()
        if len(code) == 3:
            return code
        else:
            raise ValueError('Invalid airport code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper():
            return True
        else:
            return False"
diverted,"

class diverted(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a flight was diverted or not'
        self.format = 'Boolean values 0 (not diverted) or 1 (diverted)'
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        try:
            return bool(int(val))
        except ValueError:
            raise Exception(f'Invalid value for diverted: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
cancelled,"

class cancelled(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether an event is cancelled'
        self.format = 'Boolean represented as 0 (not cancelled) or 1 (cancelled)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        num = int(val)
        if num not in [0, 1]:
            raise Exception('Invalid value for cancelled')
        else:
            return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
cancellationreason,"

class cancellationreason(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reasons for flight cancellation'
        self.format = 'Cancellation reasons should be a single uppercase letter'
        self.examples = ['A', 'B', 'C', 'D', 'A', 'B']

    def super_cast(self, val):
        if isinstance(val, str):
            upper_string_val = str(val).upper()
            if upper_string_val in ['A', 'B', 'C', 'D']:
                return upper_string_val
            else:
                return 'Invalid'
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'B', 'C', 'D']:
            return True
        else:
            return False"
cityorcounty,"

class cityorcounty(GeneralSemanticType):

    def __init__(self):
        self.description = 'City or County'
        self.format = 'A string with the first letter capitalized'
        self.examples = ['Chicago', 'Baltimore', 'Philadelphia', 'Washington', 'New Orleans']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
incidenturlfieldsmissing,"

class incidenturlfieldsmissing(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates if incident URL fields are missing'
        self.format = 'boolean value (True/False)'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() in ['true', '1']:
                return True
            elif val.lower() in ['false', '0']:
                return False
        elif isinstance(val, int):
            return bool(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
posttitle,"

class posttitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a Reddit post'
        self.format = 'Strings of varying length'
        self.examples = ['Health Canada approves AstraZeneca COVID-19 vaccine', ""COVID-19 in Canada: 'Vaccination passports' a near certainty says bio-ethicist"", ""Coronavirus variants could fuel Canada's third wave"", 'Canadian government to extend COVID-19 emergency benefits', ""Canada: Pfizer is 'extremely committed' to meeting vaccine delivery targets""]

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
numcomments,"

class numcomments(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of comments on a Reddit post'
        self.format = 'Number of comments should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val >= 0:
            return True
        else:
            return False"
creationdate,"

class creationdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Creation date of a Reddit post'
        self.format = 'Date in format: year-month-day hour:minute:second'
        self.examples = ['2014-01-13 02:36:15', '2019-04-04 09:10:55', '2019-09-23 07:01:22', '2020-03-22 16:56:10', '2022-01-01 00:00:00']

    def super_cast(self, val):
        unix_time = float(val)
        return datetime.utcfromtimestamp(unix_time).strftime('%Y-%m-%d %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d %H:%M:%S')
            return True
        except ValueError:
            return False"
signlanguagecategory,"

class signlanguagecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'The label of a sign language gesture'
        self.format = 'The label should be an integer between 0 and 24'
        self.examples: list[int] = [6, 5, 10, 0, 3]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0 or num > 24:
                raise ValueError('Invalid label')
            return num
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid input' and isinstance(casted_val, int):
            if 0 <= casted_val <= 24:
                return True
            else:
                return False
        else:
            return False"
imageidentifier,"

class imageidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The id of an image'
        self.format = 'Image ids should be non-negative integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 0:
                return int_val
            else:
                raise ValueError('Value is negative')
        except ValueError as ve:
            print(f'Value Error: {ve}')
            return None
        except Exception as e:
            print(f'Error: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
signlanguageletter,"

class signlanguageletter(GeneralSemanticType):

    def __init__(self):
        self.description = 'A letter in the sign language alphabet'
        self.format = 'Each letter should be represented as an integer'
        self.examples = [3, 6, 2, 2, 13]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 24:
            return True
        else:
            return False"
circuitreference,"

class circuitreference(GeneralSemanticType):

    def __init__(self):
        self.description = 'The reference name of a circuit'
        self.format = 'Circuit reference should be in lowercase and words separated by underscores'
        self.examples = ['albert_park', 'brands_hatch', 'bahrain', 'catalunya', 'istanbul']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and all((word.isalpha() for word in casted_val.split('_'))):
            return True
        else:
            return False"
circuitname,"

class circuitname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a circuit'
        self.format = 'Circuit name should be formatted with each word capitalized'
        self.examples = ['Albert Park Grand Prix Circuit', 'Brands Hatch', 'Bahrain International Circuit', 'Circuit de Barcelona-Catalunya', 'Istanbul Park']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
altitude,"

class altitude(GeneralSemanticType):

    def __init__(self):
        self.description = ""The altitude of a circuit's location""
        self.format = 'Altitude should be formatted as an integer'
        self.examples = [10, 18, 7, 109, 130]

    def super_cast(self, val):
        if isinstance(val, str) and val == '\\N':
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        else:
            return 0 <= casted_val <= float('inf')"
f1points,"

class f1points(GeneralSemanticType):

    def __init__(self):
        self.description = 'Points gained by a team in a Formula 1 race'
        self.format = 'Points should be represented as a non-negative floating point number'
        self.examples = [14.0, 8.0, 9.0, 5.0, 2.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid points')
            else:
                return num
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
f1status,"

class f1status(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of F1 racing'
        self.format = ""A string '\\N' or 'D'""
        self.examples = ['\\N', 'D', '\\N', 'D', '\\N']

    def super_cast(self, val):
        if val in ['\\N', 'D']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['\\N', 'D']:
            return True
        else:
            return False"
constructoridentifier,"

class constructoridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a constructor in Formula 1 racing'
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                raise Exception('Invalid constructor ID')
            return val
        except ValueError:
            raise Exception('Invalid constructor ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and casted_val > 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
constructorref,"

class constructorref(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reference name for a constructor in Formula 1 racing'
        self.format = 'Names should be in lowercase with underscores replacing spaces'
        self.examples = ['mclaren', 'bmw_sauber', 'williams', 'renault', 'toro_rosso']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-z_]+$', casted_val):
            return True
        else:
            return False"
constructorname,"

class constructorname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Full name of a constructor in Formula 1 racing'
        self.format = 'Names should be capitalized properly'
        self.examples = ['McLaren', 'BMW Sauber', 'Williams', 'Renault', 'Toro Rosso']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
constructorcountry,"

class constructorcountry(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Country of origin of a constructor in Formula 1 racing'
        self.format: str = 'Names should be capitalized properly'
        self.examples: list = ['British', 'German', 'French', 'Italian', 'American']

    def super_cast(self, val):
        if isinstance(val, str):
            country = pycountry.countries.get(name=val)
            if country is None:
                raise Exception('Invalid country')
            return country.name
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
driverstandingsidentifier,"

class driverstandingsidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The id of the driver standings'
        self.format = 'Driver standings id should be an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for driverstandingsidentifier cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False"
driverref,"

class driverref(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Driver reference'
        self.format: str = 'Driver reference should be in lower case.'
        self.examples: list = ['hamilton', 'heidfeld', 'rosberg', 'alonso', 'kovalainen']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
code,"

class code(GeneralSemanticType):

    def __init__(self):
        self.description = ""A driver's code""
        self.format = 'In upper-case and as a string'
        self.examples = ['HAM', 'HEI', 'ROS', 'ALO', 'KOV']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
forename,"

class forename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Driver forename'
        self.format = 'Only the first letter of the forename should be capitalized.'
        self.examples = ['Lewis', 'Nick', 'Nico', 'Fernando', 'Heikki']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
surname,"

class surname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Surname'
        self.format: str = 'Only the first letter of the surname should be capitalized.'
        self.examples: list = ['Hamilton', 'Heidfeld', 'Rosberg', 'Alonso', 'Kovalainen']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
laptime,"

class laptime(GeneralSemanticType):

    def __init__(self):
        self.description = 'The time taken to complete a lap.'
        self.format = 'Lap times are represented as floating-point numbers, in the form of minutes and seconds (MM:SS).'
        self.examples = ['1:38.109', '1:33.006', '1:32.713', '1:32.803', '1:32.342']

    def super_cast(self, val):
        if isinstance(val, float):
            minutes = int(val // 60)
            seconds = val % 60
            return f'{minutes}:{seconds:.3f}'
        elif isinstance(val, str):
            min_sec = val.split(':')
            return float(min_sec[0]) * 60 + float(min_sec[1])
        else:
            raise ValueError('Invalid value type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if ':' in casted_val:
            min_sec = [float(i) for i in casted_val.split(':')]
            if 0 <= min_sec[0] and 0 <= min_sec[1] < 60:
                return True
        return False"
raceposition,"

class raceposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'The position of a participant in a race'
        self.format = 'Position should be an integer between 1 and 28 or a special code (R, F, etc.)'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if 1 <= int_val <= 28:
                return str(int_val)
            else:
                return val
        elif isinstance(val, int):
            if 1 <= val <= 28:
                return str(val)
            else:
                raise Exception('Invalid position')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit():
            int_val = int(casted_val)
            if 1 <= int_val <= 28:
                return True
            else:
                return False
        elif casted_val in ['R', 'F']:
            return True
        else:
            return False"
gridposition,"

class gridposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Grid position in a race'
        self.format = 'Grid positions should be formatted as positive integers, with no decimal places'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
lapscompleted,"

class lapscompleted(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of laps completed in a race'
        self.format = 'Number of laps should be formatted as positive integers, with no decimal places'
        self.examples = [10, 1, 24, 18, 21]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Input is not castable to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
raceresult,"

class raceresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Describes the status of a race participant at the end of the race'
        self.format = 'Race results should be capitalized strings'
        self.examples = ['Finished', 'Disqualified', 'Accident', 'Collision', 'Engine']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
restaurantname,"

class restaurantname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Restaurant'
        self.format = 'Each word in the name should start with a capital letter'
        self.examples = ['Cafe Coffee Day', 'Onesta', 'Just Bake', 'Empire Restaurant', 'Five Star Chicken']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        for word in words:
            if not word.istitle():
                return False
        return True"
ordertype,"

class ordertype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Order type'
        self.format = 'Capitalized string (Yes/No)'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).capitalize()
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in ['Yes', 'No']"
restaurantvote,"

class restaurantvote(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Votes for a Restaurant'
        self.format: str = 'Votes should be an integer number'
        self.examples: list = [775, 787, 918, 88, 166]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except ValueError:
            raise ValueError('Invalid value for casting')
        if casted_val < 0:
            raise ValueError('Invalid vote number')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.issubdtype(type(casted_val), np.integer) or casted_val < 0:
            return False
        else:
            return True"
restaurantlocation,"

class restaurantlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of a Restaurant'
        self.format = 'Each word in the location should start with a capital letter'
        self.examples = ['BTM', 'HSR', 'Koramangala 5th Block', 'JP Nagar', 'Whitefield']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Z][a-z]*(?: [A-Z][a-z]*)*$', casted_val):
            return True
        else:
            return False"
restauranttype,"

class restauranttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a Restaurant'
        self.format = 'Each word in the type should start with a capital letter'
        self.examples = ['Quick Bites', 'Casual Dining', 'Cafe', 'Delivery', 'Dessert Parlor']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if casted_val.istitle():
                return True
        return False"
restaurantcuisine,"

class restaurantcuisine(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cuisine of a Restaurant'
        self.format = 'Each word in the cuisine should start with a capital letter'
        self.examples = ['North Indian', 'Chinese, North Indian, Thai', 'Cafe, Mexican, Italian', 'South Indian, North Indian', 'North Indian, Rajasthani']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            words = casted_val.split(' ')
            for word in words:
                if not word.istitle():
                    return False
        else:
            return False
        return True"
restaurantcost,"

class restaurantcost(GeneralSemanticType):

    def __init__(self):
        self.description = 'Approximate cost for two people at a Restaurant'
        self.format = 'Cost should be an integer number'
        self.examples = [300, 400, 500, 200, 600]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid cost number')
        except ValueError:
            raise Exception('Invalid cost number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
listedtype,"

class listedtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Listed type of a Restaurant'
        self.format = 'Each word in the listed type should start with a capital letter'
        self.examples = ['Delivery', 'Dine-out', 'Desserts', 'Cafes', 'Drinks & nightlife']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        if all((word[0].isupper() for word in words)):
            return True
        else:
            return False"
listedcity,"

class listedcity(GeneralSemanticType):

    def __init__(self):
        self.description = 'City where the restaurant is listed'
        self.format = 'Each word in the city should start with a capital letter'
        self.examples = ['BTM', 'Koramangala 7th Block', 'Koramangala 5th Block', 'Koramangala 4th Block', 'Koramangala 6th Block']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
beanorigin,"

class beanorigin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Specific bean origin'
        self.format = 'Origin name should be capitalized'
        self.examples = ['Madagascar', 'Peru', 'Ecuador', 'Dominican Republic', 'Venezuela']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
reference,"

class reference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reference'
        self.format = 'String in the form /ad/<number>'
        self.examples = ['/ad/1876', '/ad/1676', '/ad/1676', '/ad/1680', '/ad/1704']

    def super_cast(self, val):
        if isinstance(val, int):
            return '/ad/' + str(val)
        elif isinstance(val, str):
            if re.match('/ad/[0-9]+', val):
                return val
            else:
                raise ValueError('Invalid format for reference')
        else:
            raise TypeError('Invalid type for reference')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('/ad/[0-9]+', casted_val):
            return True
        else:
            return False"
reviewyear,"

class reviewyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Review Year'
        self.format = 'Review Year should be a whole number'
        self.examples = [2016, 2015, 2015, 2015, 2015]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not isinstance(casted_val, int):
            raise Exception('Invalid value')
        return True"
cocoapercent,"

class cocoapercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cocoa Percentage'
        self.format = 'Cocoa Percentage should be a floating point number'
        self.examples = [70.0, 75.0, 72.0, 65.0, 80.0]

    def super_cast(self, val):
        if isinstance(val, str) and '%' in val:
            stripped_val = val.strip('%')
            return float(stripped_val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise Exception('Invalid value format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
companycountry,"

class companycountry(GeneralSemanticType):

    def __init__(self):
        self.description = 'Company Location'
        self.format = 'Country name should be capitalized'
        self.examples = ['U.S.A.', 'France', 'Canada', 'U.K.', 'Italy']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [country.name for country in pycountry.countries]:
            return True
        else:
            return False"
beantype,"

class beantype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of bean'
        self.format = 'Bean type should be capitalized'
        self.examples = ['Trinitario', 'Criollo', 'Forastero', 'Forastero (Nacional)', 'Trinitario']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
broadbeanorigin,"

class broadbeanorigin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Broad bean origin'
        self.format = 'Origin name should be capitalized'
        self.examples = ['Venezuela', 'Ecuador', 'Peru', 'Madagascar', 'Dominican Republic']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
cryptocurrencydate,"

class cryptocurrencydate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of a cryptocurrency value'
        self.format = ""Datetime object in the format 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2017-07-02 23:59:59', '2017-07-04 23:59:59', '2017-07-06 23:59:59', '2017-07-07 23:59:59', '2017-07-08 23:59:59']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val
        else:
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise Exception('Invalid input for a datetime value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            now = datetime.now()
            if casted_val > now:
                raise Exception('The date is in the future')
            else:
                return True
        else:
            return False"
volumeusd,"

class volumeusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume in USD of the cryptocurrency'
        self.format = 'Volume should be formatted as a floating point number (in USD units)'
        self.examples = [28549.400390625, 20677.900390625, 23550.19921875, 26800.19921875, 22511.5]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, float):
            return True
        else:
            return False"
marketcapusd,"

class marketcapusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'The market cap in USD of the cryptocurrency'
        self.format = 'Market cap should be formatted as a floating point number (in USD units)'
        self.examples = [2823533.99969, 2792456.99969, 2488769.99972, 2087387.99977, 2598353.99971]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 0 <= float_val <= float('inf'):
                return float_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError('Invalid value for market cap in USD')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
currencyname,"

class currencyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a cryptocurrency'
        self.format = 'The name of the cryptocurrency should be title-cased'
        self.examples = ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Cardano']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
currencysymbol,"

class currencysymbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Symbol of a cryptocurrency'
        self.format = 'The symbol of the cryptocurrency should be upper-cased'
        self.examples = ['BTC', 'ETH', 'XRP', 'LTC', 'ADA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cryptocurrency,"

class cryptocurrency(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name or symbol of a cryptocurrency'
        self.format = 'Cryptocurrency name or symbol in uppercase'
        self.examples = ['BITCOIN', 'ETHEREUM', 'XRP', 'LITECOIN', 'BITCOIN CASH']

    def super_cast(self, val):
        return str(val).strip().upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cryptoname,"

class cryptoname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Cryptocurrency'
        self.format = 'Cryptocurrency names are usually capitalized words'
        self.examples = ['Bitcoin', 'Ethereum', 'Litecoin', 'Ripple', 'Wrapped Bitcoin']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
cryptoprice,"

class cryptoprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in USD of a cryptocurrency'
        self.format = 'Price should be formatted as a floating point number (in USD units)'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val:
            return True
        else:
            return False"
marketvolume,"

class marketvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total volume of a cryptocurrency traded'
        self.format = 'Volume should be a positive floating point number'
        self.examples = [2126270.0, 1423220.0, 1186670.0, 1025740.0, 1021370.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input: value must be castable to a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            raise Exception('Invalid value: volume must be a positive number')
        else:
            return True"
error,"

class error(GeneralSemanticType):

    def __init__(self):
        self.description = 'Standard Error of the happiness score'
        self.format = 'Non-negative floating point number'
        self.examples = [0.03411, 0.04884, 0.03328, 0.0388, 0.03553]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise ValueError('Value cannot be negative')
            return val
        except ValueError as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (casted_val >= 0 and isinstance(casted_val, float)):
            raise ValueError('Invalid value. It must be a non-negative floating point number.')
        else:
            return True"
economy,"

class economy(GeneralSemanticType):

    def __init__(self):
        self.description = 'GDP per Capita of a country'
        self.format = 'GDP per Capita values must be non-negative floating point numbers'
        self.examples = [1.39651, 1.30232, 1.32548, 1.459, 1.32629]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError('Value must be non-negative')
            return casted_val
        except ValueError as ve:
            print(str(ve))
        except Exception as e:
            print('Unexpected error:', str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
trust,"

class trust(GeneralSemanticType):

    def __init__(self):
        self.description = 'Government Corruption score'
        self.format = 'Government Corruption scores must be floating point numbers between 0 and 1'
        self.examples = [0.41978, 0.14145, 0.48357, 0.36503, 0.32957]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception('Invalid value for casting. Expected a value that can be converted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
confidenceinterval,"

class confidenceinterval(GeneralSemanticType):

    def __init__(self):
        self.description = 'Confidence interval for happiness score'
        self.format = 'Confidence interval should be a floating point number between 0 and 10'
        self.examples = [7.46, 7.428, 7.333, 7.421, 7.351]

    def super_cast(self, val):
        if isinstance(val, float) and 0 <= val <= 10:
            return round(val, 3)
        else:
            raise Exception('Invalid confidence interval')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
whiskerhigh,"

class whiskerhigh(GeneralSemanticType):

    def __init__(self):
        self.description = 'High whisker value of happiness score'
        self.format = 'Float score with three decimal places'
        self.examples = [7.594, 7.582, 7.622, 7.562, 7.528]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception('Cannot cast the value to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        elif 0 <= casted_val <= 10:
            return True
        else:
            return False"
whiskerlow,"

class whiskerlow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Low whisker value of happiness score'
        self.format = 'Float score with three decimal places'
        self.examples = [7.48, 7.462, 7.386, 7.426, 7.41]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 10:
            return True
        else:
            return False"
gdp,"

class gdp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gross Domestic Product per Capita'
        self.format = 'In international dollars, based on purchasing power parity (PPP)'
        self.examples = [1.305, 1.456, 1.351, 1.343, 1.42]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(val)
        if not isinstance(val, (float, int)):
            raise TypeError('GDP value must be a number.')
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('GDP per Capita cannot be negative.')
        elif casted_val > float('inf'):
            raise ValueError('GDP per Capita is too large.')
        return True"
socialsupportindex,"

class socialsupportindex(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Social Support Index'
        self.format: str = 'Social Support Index should be a floating point number'
        self.examples: list = [1.592, 1.582, 1.59, 1.644, 1.549]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
        return False"
freedomindex,"

class freedomindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Freedom to make life choices index'
        self.format = 'A floating point number between 0 and 1, rounded to 3 decimal places'
        self.examples = [0.681, 0.686, 0.683, 0.677, 0.66]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return round(num, 3)
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= 1"
generosityindex,"

class generosityindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Generosity Index'
        self.format = 'Float between 0 and 1'
        self.examples = [0.202, 0.286, 0.284, 0.353, 0.256]

    def super_cast(self, val):
        try:
            casted_value = float(val)
            if 0 <= casted_value <= 1:
                return round(casted_value, 3)
            else:
                raise ValueError('Value out of range')
        except ValueError as ve:
            print(f'Value casting error: {ve}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
corruptionperceptionindex,"

class corruptionperceptionindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Perception of Corruption Index'
        self.format = 'A floating point number between 0 and 1'
        self.examples = [0.393, 0.34, 0.408, 0.138, 0.357]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid':
            return False
        elif 0 <= casted_val <= 1:
            return True
        else:
            return False"
gdpindex,"

class gdpindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'GDP per capita index of a country'
        self.format = 'GDP per capita index should be a non-negative float'
        self.examples = [1.34, 1.383, 1.488, 1.38, 1.396]

    def super_cast(self, val):
        if pd.isna(val) or math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('nan'):
            return True
        else:
            return False"
budget,"

class budget(GeneralSemanticType):

    def __init__(self):
        self.description = 'Budget of the movie'
        self.format = 'Budget should be a positive integer'
        self.examples = [237000000, 300000000, 245000000, 250000000, 260000000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. Value should be convertible to int.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
homepage,"

class homepage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Homepage of a Movie'
        self.format = 'URLs'
        self.examples = ['http://www.avatarmovie.com/', 'http://disney.go.com/disneypictures/pirates/', 'http://www.sonypictures.com/movies/spectre/', 'http://www.thedarkknightrises.com/', 'http://movies.disney.com/john-carter']

    def super_cast(self, val):
        if isinstance(val, str):
            if re.match('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', val):
                return val
            else:
                raise Exception('Invalid URL')
        else:
            raise Exception('Invalid input. Expected a string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', casted_val):
            return True
        else:
            return False"
language,"

class language(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Original Language of the Movie'
        self.format = 'Two-letter ISO 639-1 language codes'
        self.examples = ['en', 'fr', 'es', 'zh', 'de']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 2:
            return val.lower()
        else:
            raise Exception('Invalid Language Code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.languages.get(alpha_2=casted_val):
            return True
        else:
            return False"
moviepopularity,"

class moviepopularity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Popularity of a Movie'
        self.format = 'Popularity should be a positive float'
        self.examples = [150.437577, 139.082615, 107.376788, 112.31295, 43.926995]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or not 0 <= casted_val <= float('inf'):
            return False
        return True"
movierelease,"

class movierelease(GeneralSemanticType):

    def __init__(self):
        self.description = 'Release Date of a Movie'
        self.format = 'Dates in the format YYYY-MM-DD'
        self.examples = ['2009-12-10', '2007-05-19', '2015-10-26', '2012-07-16', '2012-03-07']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').date()
            except ValueError:
                return None
        elif isinstance(val, datetime):
            return val.date()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
moviestatus,"

class moviestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of the Movie'
        self.format = ""One of the three statuses: 'Released', 'Rumored', 'Post Production'""
        self.examples = ['Released', 'Rumored', 'Post Production', 'Released', 'Released']

    def super_cast(self, val):
        if val in ['Released', 'Rumored', 'Post Production']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Released', 'Rumored', 'Post Production']:
            return True
        else:
            return False"
movievoteaverage,"

class movievoteaverage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average Vote of a Movie'
        self.format = 'Average Vote should be a float between 0 and 10'
        self.examples = [7.2, 6.9, 6.3, 7.6, 6.1]

    def super_cast(self, val):
        if isinstance(val, (float, int)) and 0 <= val <= 10:
            return float(val)
        elif isinstance(val, str) and val.replace('.', '', 1).isdigit() and (0 <= float(val) <= 10):
            return float(val)
        else:
            raise Exception('Invalid Vote Average')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
movievotecount,"

class movievotecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vote Count of a Movie'
        self.format = 'Vote Count should be a positive integer'
        self.examples = [11800, 4500, 4466, 9106, 2124]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
suicidecount,"

class suicidecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The count of suicides'
        self.format = 'Count should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise ValueError('Invalid suicide count')
            return val
        except ValueError as ve:
            raise ValueError('Invalid input, expected a non-negative integer') from ve

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
suicidesperpopulation,"

class suicidesperpopulation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of suicides per 100k population'
        self.format = 'Rate should be a non-negative floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Invalid suicide rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
booleanoption,"

class booleanoption(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean option'
        self.format = 'A string indicating a boolean choice (Yes/No)'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['Yes', 'No']:
            return str_val
        else:
            raise Exception('Invalid input value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
multioption,"

class multioption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Multiple options'
        self.format = 'Options should be one of the valid values'
        self.examples = ['No', 'Yes', 'No phone service', 'No internet service']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['No', 'Yes', 'No phone service', 'No internet service']:
            return True
        else:
            return False"
contracttype,"

class contracttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Contract type'
        self.format = 'Contract type should be one of the valid values'
        self.examples = ['Month-to-month', 'Two year', 'One year']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Month-to-month', 'Two year', 'One year']:
            return True
        else:
            return False"
paymentmethod,"

class paymentmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Payment method'
        self.format = 'Payment method should be a string value representing the name of the payment method'
        self.examples = ['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)', 'Cash on delivery']

    def super_cast(self, val):
        val = str(val)
        valid_values = ['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)', 'Cash on delivery', 'EasyPaisa', 'JazzCash', 'BankTransfer', 'Cash on Delivery (COD)']
        if val not in valid_values:
            raise Exception('Invalid payment method')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
monthlycharges,"

class monthlycharges(GeneralSemanticType):

    def __init__(self):
        self.description = 'Monthly charges in USD'
        self.format = 'Monthly charges should be a floating point number'
        self.examples = [29.85, 56.95, 53.85, 42.3, 70.7]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 18.25 <= casted_val <= 118.75:
            return True
        else:
            return False"
totalcharges,"

class totalcharges(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total charges in USD'
        self.format = 'Total charges should be a floating point number'
        self.examples = [29.85, 1889.5, 108.15, 1840.75, 151.65]

    def super_cast(self, val):
        if isinstance(val, str) and val.strip() == '':
            return float('nan')
        elif isinstance(val, (int, float)):
            return round(float(val), 2)
        else:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
chestpaintype,"

class chestpaintype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of chest pain'
        self.format: str = ""Chest pain type should be one of 'ASY', 'NAP', 'ATA', 'TA'""
        self.examples: list = ['ASY', 'NAP', 'ATA', 'TA', 'ASY']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['ASY', 'NAP', 'ATA', 'TA']:
            return True
        else:
            return False"
oldpeak,"

class oldpeak(GeneralSemanticType):

    def __init__(self):
        self.description = 'ST depression induced by exercise relative to rest'
        self.format = 'ST depression should be a floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
stslope,"

class stslope(GeneralSemanticType):

    def __init__(self):
        self.description = 'The slope of the peak exercise ST segment'
        self.format = ""ST slope should be one of 'Flat', 'Up', 'Down'""
        self.examples = ['Flat', 'Up', 'Down', 'Flat', 'Up']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Flat', 'Up', 'Down']:
            return True
        else:
            return False"
customerstatus,"

class customerstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Status of a customer'
        self.format = 'In regular case as a string'
        self.examples = ['Existing Customer', 'Attrited Customer', 'Existing Customer', 'Attrited Customer', 'Existing Customer']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['Existing Customer', 'Attrited Customer']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Existing Customer', 'Attrited Customer']:
            return True
        else:
            return False"
customerage,"

class customerage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the customer'
        self.format = 'Age should be an integer representing the age in years'
        self.examples = [45, 49, 51, 40, 40]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if not 0 <= casted_val <= 120:
            return False
        return True"
customersex,"

class customersex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of the customer'
        self.format = ""Sex should be represented as single character 'M' or 'F'""
        self.examples = ['M', 'F', 'M', 'F', 'M']

    def super_cast(self, val):
        if val in ['M', 'F']:
            return val
        else:
            raise ValueError('Invalid gender')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['M', 'F']:
            return True
        else:
            return False"
school,"

class school(GeneralSemanticType):

    def __init__(self):
        self.description = 'The school where the student is studying'
        self.format = 'The data is a string representing the school name'
        self.examples = ['GP', 'MS', 'GP', 'GP', 'MS']

    def super_cast(self, val):
        if str(val).upper() in ['GP', 'MS']:
            return str(val).upper()
        else:
            return 'Invalid school name'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['GP', 'MS']:
            return True
        else:
            return False"
famsize,"

class famsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the family'
        self.format = ""The family size must be a string and must be either 'GT3' or 'LE3'""
        self.examples = ['GT3', 'LE3']

    def super_cast(self, val):
        val = str(val).upper()
        if val not in ['GT3', 'LE3']:
            raise ValueError(""Invalid value for family size. Expected 'GT3' or 'LE3'"")
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['GT3', 'LE3']:
            return True
        else:
            return False"
parentalstatus,"

class parentalstatus(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The cohabitation status of the parents'
        self.format: str = 'A single capitalized letter (T/A)'
        self.examples: list = ['T', 'A', 'T', 'A', 'T']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['T', 'A']:
            return True
        else:
            return False"
job,"

class job(GeneralSemanticType):

    def __init__(self):
        self.description = 'The job of a person'
        self.format = 'Job should be in lowercase'
        self.examples = ['at_home', 'health', 'other', 'services', 'teacher']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isalpha():
            return True
        else:
            return False"
reason,"

class reason(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The reason for choosing a school'
        self.format: str = 'Reason should be represented as a lowercase string'
        self.examples: list = ['course', 'home', 'reputation', 'other']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['course', 'home', 'reputation', 'other']
        if casted_val in valid_values:
            return True
        else:
            return False"
guardian,"

class guardian(GeneralSemanticType):

    def __init__(self):
        self.description = ""The student's guardian""
        self.format = 'Guardian should be represented as a lowercase string'
        self.examples = ['mother', 'father', 'other']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['mother', 'father', 'other']:
            return True
        else:
            return False"
failures,"

class failures(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The number of past class failures'
        self.format: str = 'Number of failures should be represented as an integer (0-3)'
        self.examples: list = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in self.examples:
                return int_val
            else:
                raise ValueError('Value is out of expected range')
        except Exception as e:
            raise ValueError(f'Failed to cast {val} to int: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(0, 4):
            return True
        else:
            return False
        pass"
relation,"

class relation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The quality of family relationships'
        self.format = 'Represented as an integer (1-5)'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in range(1, 6):
                return int_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid value. It must be an integer between 1 and 5.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 6):
            return True
        else:
            return False"
newsidentifier,"

class newsidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a news article'
        self.format = 'Identifier should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input. Identifier should be an integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
newssubject,"

class newssubject(GeneralSemanticType):

    def __init__(self):
        self.description = 'Subject of the news article'
        self.format = 'Subject should be a single string word or phrase'
        self.examples = ['news', 'politics', 'left-news', 'government news', 'us_news']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
newscategory,"

class newscategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of the news article'
        self.format = ""The category should be a string and either 'politicsNews' or 'worldnews'""
        self.examples = ['politicsNews', 'worldnews', 'politicsNews', 'worldnews', 'politicsNews']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['politicsNews', 'worldnews']:
            return str_val
        else:
            raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['politicsNews', 'worldnews']:
            return True
        else:
            return False"
accessoryname,"

class accessoryname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of accessory'
        self.format = 'Accessory names should be title-cased strings'
        self.examples = ['3D Glasses', 'Bandage', 'Beak', 'Birthday Shades']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
diyflag,"

class diyflag(GeneralSemanticType):

    def __init__(self):
        self.description = 'DIY Flag'
        self.format = 'Capitalized string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
mannequinpiece,"

class mannequinpiece(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean representing whether an object is a piece of a mannequin'
        self.format = 'Capitalized string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
labelthemes,"

class labelthemes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label themes of the entity'
        self.format = 'Label themes should be lower-cased strings'
        self.examples = ['party; vacation', 'comfy', 'fairy tale; party; theatrical', 'party; theatrical', 'everyday; party; vacation']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
villagerequippable,"

class villagerequippable(GeneralSemanticType):

    def __init__(self):
        self.description = 'If a village is equippable'
        self.format = 'In capitalized form'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
achievementidentifier,"

class achievementidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each achievement'
        self.format = 'Achievement ID should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        elif float(val) < 0 or not float(val).is_integer():
            raise Exception('Invalid achievementid')
        else:
            return int(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
achievementname,"

class achievementname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of the achievement'
        self.format = 'Achievement names should be string'
        self.examples = ['(island name) Miles!', 'Angling for Perfection!', 'Island Ichthyologist', 'Island Togetherness', ""You've Got the Bug""]

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
tierlevel,"

class tierlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of tiers for each achievement'
        self.format = 'Tier level should be an integer between 1 and 6'
        self.examples = [1, 5, 3, 2, 6]

    def super_cast(self, val):
        try:
            if math.isnan(float(val)):
                return float('nan')
            elif not 1 <= float(val) <= 6 or not float(val).is_integer():
                return int(float(val))
            else:
                raise Exception('Invalid tierlevel')
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 6:
            return True
        else:
            return False"
sequential,"

class sequential(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether the value is sequential or not'
        self.format = 'lower-case string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
artworkname,"

class artworkname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a work of art'
        self.format: str = 'Names should be capitalized and spaces should be used to separate words'
        self.examples: list = ['Academic Painting', 'Scary Painting', 'Ancient Statue', 'Basic Painting', 'Beautiful Statue']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Za-z\\s]*$', casted_val):
            return True
        else:
            return False"
booleananswer,"

class booleananswer(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean answer'
        self.format = 'In title-case as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['yes', 'no']:
            return str(val).title()
        else:
            raise Exception('Invalid boolean answer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
furniturecategory,"

class furniturecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of a furniture item'
        self.format = 'Categories should be capitalized and spaces should be used to separate words'
        self.examples = ['Wall-mounted', 'Housewares', 'Miscellaneous']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            raise Exception('Invalid input type. Expected a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
artworktitle,"

class artworktitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a work of art'
        self.format = 'Titles should be capitalized and spaces should be used to separate words'
        self.examples = ['Folding Screen of Fūjin and Raijin', 'Beauty Looking Back', 'Olmec Colossal Head', 'Jōmon Period ""Dogū"" Figurine Shakōki-dogū', 'The Blue Boy']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
none,"

class none(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a None value'
        self.format = ""Only 'None' is valid""
        self.examples = ['None']

    def super_cast(self, val):
        if str(val).lower() == 'none':
            return 'None'
        else:
            raise Exception('Invalid none value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'None':
            return True
        else:
            return False"
artworktype,"

class artworktype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a work of art'
        self.format = 'Types should be capitalized'
        self.examples = ['Picture', 'Sculpture']

    def super_cast(self, val):
        if str(val).title() in ['Picture', 'Sculpture']:
            return str(val).title()
        else:
            raise Exception('Invalid artwork type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Picture', 'Sculpture']:
            return True
        else:
            return False"
nolighting,"

class nolighting(GeneralSemanticType):

    def __init__(self):
        self.description = ""Represents a 'No lighting' value""
        self.format = ""Only 'No lighting' is valid""
        self.examples = ['No lighting', 'No lighting', 'No lighting', 'No lighting', 'No lighting']

    def super_cast(self, val):
        if str(val).lower() == 'no lighting':
            return 'No lighting'
        else:
            raise ValueError('Invalid no lighting value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'No lighting':
            return True
        else:
            return False"
notforsale,"

class notforsale(GeneralSemanticType):

    def __init__(self):
        self.description = ""Represents a 'Not for sale' value""
        self.format = ""Only 'Not for sale' is valid""
        self.examples = ['Not for sale', 'Not for sale', 'Not for sale', 'Not for sale', 'Not for sale']

    def super_cast(self, val):
        if str(val).lower() == 'not for sale':
            return 'Not for sale'
        else:
            raise Exception('Invalid not for sale value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Not for sale':
            return True
        else:
            return False"
bagname,"

class bagname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a bag'
        self.format = 'Bag name should start with a capital letter and rest in lower case'
        self.examples = ['Acorn Pochette', 'Basket Pack', 'Bug Cage', 'Bunny Day Bag', 'Butterfly Backpack']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
bagcolor,"

class bagcolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of a bag'
        self.format = 'Bag color should start with a capital letter and rest in lower case'
        self.examples = ['Blue', 'Green', 'Black', 'Pink', 'Red']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Blue', 'Green', 'Black', 'Pink', 'Red']:
            return True
        else:
            return False"
bagdiy,"

class bagdiy(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'Capitalized string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
bagprice,"

class bagprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a bag in bells'
        self.format = 'Price should be formatted as an integer'
        self.examples = [1200, 1500, 1700, 1900, 2100]

    def super_cast(self, val):
        if val == 'NFS':
            return None
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return True
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
bagsize,"

class bagsize(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Size of a bag in Animal Crossing'
        self.format = ""Bag size should be of the format '1x1'""
        self.examples = ['1x1', '1x1', '1x1', '1x1', '1x1']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val)
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[0-9]+x[0-9]+', casted_val):
            return True
        else:
            return False"
bagmilesprice,"

class bagmilesprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a bag in miles'
        self.format = 'Price should be formatted as an integer'
        self.examples = [800, 1000, 1200, 1300, 1400]

    def super_cast(self, val):
        if pd.isna(val):
            return None
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val >= 0:
            return True
        return False"
bagsource,"

class bagsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of a bag in Animal Crossing'
        self.format = 'Bag source should start with a capital letter and rest in lower case'
        self.examples = ['Kicks', 'Crafting', 'Mom', 'Bug-Off', 'Fishing Tourney']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
bagavailability,"

class bagavailability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Seasonal availability of a bag in Animal Crossing'
        self.format = ""Availability should be of the format 'All Year'""
        self.examples = ['All Year', 'All Year', 'All Year', 'All Year', 'All Year']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'All Year':
            return True
        else:
            return False"
bagversion,"

class bagversion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Version of a bag in Animal Crossing'
        self.format = ""Bag version should be of the format '1.0.0' or '1.1.0a'""
        self.examples = ['1.0.0', '1.1.0a', '1.0.0', '1.1.0a', '1.0.0']

    def super_cast(self, val):
        if isinstance(val, str) and re.match('^\\d+\\.\\d+\\.\\d+(a)?$', val):
            return val
        else:
            raise ValueError('Invalid bag version')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^\\d+\\.\\d+\\.\\d+(a)?$', casted_val):
            return True
        else:
            return False"
bagstyle,"

class bagstyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of a bag in Animal Crossing'
        self.format = 'Bag style should start with a capital letter and rest in lower case'
        self.examples = ['Active', 'Cute', 'Simple', 'Elegant', 'Cool']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
baglabeltheme,"

class baglabeltheme(GeneralSemanticType):

    def __init__(self):
        self.description = 'Label themes of a bag in Animal Crossing'
        self.format = 'Bag label theme should start with a lower case letter'
        self.examples = ['outdoorsy; sporty', 'everyday; outdoorsy; sporty', 'everyday; outdoorsy', 'comfy', 'formal; party']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
bagequippable,"

class bagequippable(GeneralSemanticType):

    def __init__(self):
        self.description = 'Denotes if a bag is equippable or not'
        self.format = 'Capitalized string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
bagcatalog,"

class bagcatalog(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sale status of a bag'
        self.format = 'capitalized string'
        self.examples = ['For sale', 'Not for sale', 'For sale', 'Not for sale', 'For sale']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['For sale', 'Not for sale']:
            return True
        else:
            return False"
clothingitem,"

class clothingitem(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a clothing item'
        self.format = 'All letters should be lowercase'
        self.examples = ['draped skirt', 'formal shorts', 'chino pants', 'career skirt', 'basketball shorts']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
itemsource,"

class itemsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of a clothing item'
        self.format = 'All letters should be capitalized'
        self.examples = ['Able Sisters', 'Labelle', 'Recycle Bin', 'Crafting']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
constructionidentifier,"

class constructionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Construction ID'
        self.format = 'A positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 235:
            return True
        else:
            return False"
constructionname,"

class constructionname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the Construction'
        self.format = 'Name should be a capitalized string'
        self.examples = ['Brick Bridge', 'Iron Bridge', 'Log Bridge', 'Red Zen Bridge', 'Stone Bridge']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
constructionprice,"

class constructionprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in Bells of a construction'
        self.format = 'Price should be formatted as a floating point number (in Bells units) with two decimal places for cents'
        self.examples: list = [198000.0, 228000.0, 98000.0, 5000.0, 168000.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 5000.0 and casted_val <= 228000.0:
            return True
        else:
            return False"
constructioncategory,"

class constructioncategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of the Construction'
        self.format = 'Category should be a capitalized string'
        self.examples = ['Door', 'Mailbox', 'Roofing', 'Siding', 'Bridge']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
constructionsource,"

class constructionsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of the Construction'
        self.format = 'Source should be a capitalized string'
        self.examples = ['Resident Services Upgrade', '4th House Upgrade (Right Room)', '3rd House Upgrade (Left Room)', '5th House Upgrade (2nd Floor)', 'Initial House']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
constructionversion,"

class constructionversion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Version of the Construction'
        self.format = 'Version should be a string in the form x.x.x'
        self.examples = ['1.0.0', '1.0.0', '1.0.0', '1.0.0', '1.0.0']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile('^\\d+\\.\\d+\\.\\d+$')
        if pattern.match(casted_val):
            return True
        else:
            return False"
constructionuniqueentryidentifier,"

class constructionuniqueentryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID of the Construction'
        self.format = 'Unique Entry ID should be a string'
        self.examples = ['Rvkrg9tcubTMakcBS', 'RmQ6iiKkFf3Sy4iSQ', 'Px55sTfjKSbbMtjAK', 'jTziEHXkeYaugKDQQ', 'JmrwC2tRRCCgbZnrp']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
booleanyesno,"

class booleanyesno(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value represented as 'Yes' or 'No'""
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            lower_string_val = val.lower()
            if lower_string_val in ['yes', 'no']:
                return lower_string_val
            else:
                return 'invalid value'
        else:
            return 'invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
priceinteger,"

class priceinteger(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in Bells of an entity in the game Animal Crossing'
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.examples = [1600, 2520, 2000, 1800, 2240]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Cannot cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
clothingstyle,"

class clothingstyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of a Clothing Piece'
        self.format = 'All words in the style should be lower-cased and separated by spaces'
        self.examples = ['elegant', 'cute', 'active', 'simple', 'gorgeous']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
fencingname,"

class fencingname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the fencing'
        self.format = 'The string should be in title case'
        self.examples = ['Bamboo Lattice Fence', 'Barbed-Wire Fence', 'Brick Fence', 'Bunny Day Fence', 'Corral Fence']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
diyproject,"

class diyproject(GeneralSemanticType):

    def __init__(self):
        self.description = 'A DIY Project Status'
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        elif val:
            return 'yes'
        else:
            return 'no'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
stacksize,"

class stacksize(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Stack size'
        self.format = 'Stack size should be stored as integers'
        self.examples = [50, 25, 75, 100, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 100:
            return True
        else:
            return False"
uniquentryidentifier,"

class uniquentryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Entry ID'
        self.format = 'The string is a combination of lower case letters and numbers'
        self.examples = ['XaLnmQsQ47HfHQ9g5', 'dNgibaR9jFqaDwuDZ', 'WAzanA7e5MREzJdMh', 'CLQGhAfSNykpxrh3a', 'rqwqYy7Aphvh5zBSA']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isalnum():
            return True
        else:
            return False"
fishname,"

class fishname(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Name of a Fish'
        self.format = 'Fish name as a string'
        self.examples = ['anchovy', 'angelfish', 'arapaima', 'arowana', 'barred knifejaw']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
waterbody,"

class waterbody(GeneralSemanticType):

    def __init__(self):
        self.description = 'Water body where the fish is found'
        self.format = 'Water body name should be a string'
        self.examples = ['Sea', 'River', 'Pond', 'Pier', 'River (clifftop)']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            raise Exception('Invalid value for waterbody')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
fishshadow,"

class fishshadow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shadow size of the fish'
        self.format = 'Shadow size should be a string'
        self.examples = ['Small', 'Medium', 'X-Small', 'Large', 'X-Large']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Small', 'Medium', 'X-Small', 'Large', 'X-Large']:
            return True
        else:
            return False"
fishrainsnow,"

class fishrainsnow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Does the fish appear during rain or snow?'
        self.format = ""Fish appearance during rain/snow should be a string 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
floorname,"

class floorname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a floor design'
        self.format = 'Floor names should be title case'
        self.examples = ['Aqua Tile Flooring', 'Arabesque Flooring', 'Arched-Brick Flooring', 'Argyle Tile Flooring', 'Artsy Parquet Flooring']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
vfx,"

class vfx(GeneralSemanticType):

    def __init__(self):
        self.description = 'Visual effects status'
        self.format = ""lower-case string ('yes' or 'no')""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['yes', 'no']:
            return str_val
        else:
            return 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
sell,"

class sell(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Selling price of an entity'
        self.format: str = 'Sell price should be an integer'
        self.examples: list = [225, 530, 275, 437, 450]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
hhaseries,"

class hhaseries(GeneralSemanticType):

    def __init__(self):
        self.description = 'HHA series of a floor design'
        self.format = 'Lowercase string'
        self.examples = ['none', 'wedding', 'bamboo', 'bunny day', 'cherry blossoms']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
fossilname,"

class fossilname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Fossil'
        self.format = 'Only the first letter of the first and second word should be capitalized'
        self.examples = ['Acanthostega', 'Amber', 'Ammonite', 'Ankylo Skull', 'Ankylo Tail']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z][a-z]*\\s[A-Z]?[a-z]*$', casted_val):
            return True
        else:
            return False"
sizecategory,"

class sizecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size Category of a Fossil'
        self.format = 'The category should be formatted as a string'
        self.examples = ['2x2', '1x1']

    def super_cast(self, val):
        val_str = str(val)
        if val_str in ['2x2', '1x1']:
            return val_str
        else:
            raise Exception('Invalid size category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['2x2', '1x1']:
            return True
        else:
            return False"
museumlocation,"

class museumlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of a Fossil in a Museum'
        self.format = 'The location should be formatted as a string'
        self.examples = ['Room 1', 'Room 2', 'Room 3', 'Room 1', 'Room 2']

    def super_cast(self, val):
        val_str = str(val)
        if val_str in ['Room 1', 'Room 2', 'Room 3']:
            return val_str
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Room 1', 'Room 2', 'Room 3']:
            return True
        else:
            return False"
fossilprice,"

class fossilprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Selling Price of a Fossil'
        self.format = 'Price should be formatted as an integer'
        self.examples = [2000, 1200, 1100, 3500, 2500]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
interaction,"

class interaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary indication of whether an interaction has occurred'
        self.format = 'A yes/no string value'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        val_str = str(val)
        if val_str.lower() in ['yes', 'no']:
            return val_str.capitalize()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
itemstyle,"

class itemstyle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of an Item'
        self.format = 'First letter of each word in the style name should be capitalized'
        self.examples = ['Cute', 'Active', 'Simple', 'Elegant', 'Cool']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
itemtype,"

class itemtype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of an Item'
        self.format: str = 'First letter of each word in the type name should be capitalized'
        self.examples: list = ['HeadCap', 'HeadFullFace', 'Headgear_HasBang', 'HeadHairOrnament_Left', 'Headgear_NoEarNoJaw']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
productsource,"

class productsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Source'
        self.format = 'Source should be in title format'
        self.examples = [""Nook's Cranny"", 'Crafting', 'Nook Miles Shop', 'Wedding Season', 'Fishing Tourney']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if isinstance(casted_val, str) and casted_val.istitle():
                return True
            else:
                return False
        except Exception as e:
            return False"
productversion,"

class productversion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Version'
        self.format = ""Version should be a string of format '1.0.0'""
        self.examples = ['1.0.0', '1.2.0', '1.1.0a', '1.1.0']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile('^[0-9]+(\\.[0-9]+)*$')
        if pattern.match(casted_val):
            return True
        else:
            return False"
outdoorvalue,"

class outdoorvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A boolean value indicating if the condition is outdoor'
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            return 'yes' if val else 'no'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
insectname,"

class insectname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an Insect'
        self.format = 'Insect name should be in lowercase'
        self.examples = ['agrias butterfly', 'ant', 'Atlas moth', 'bagworm', 'banded dragonfly']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
weathercondition,"

class weathercondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weather conditions where the insect can be found'
        self.format = 'Weather condition should be in title case'
        self.examples = ['Any Except Rain', 'Any Weather', 'Rain Only', 'Any Except Rain', 'Any Weather']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Any Except Rain', 'Any Weather', 'Rain Only']:
            return True
        else:
            return False"
series,"

class series(GeneralSemanticType):

    def __init__(self):
        self.description = 'A series or series of an Item'
        self.format = 'Series should be capitalized'
        self.examples = ['EQ', 'Motherly', 'Throwback', 'Stars', 'Bamboo']

    def super_cast(self, val):
        if val == 'EQ':
            return val
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
set,"

class set(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Set of an Item'
        self.format = 'Set should be capitalized'
        self.examples = ['Bear', 'Birthday', 'Pet', 'Cherry']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
songname,"

class songname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Song'
        self.format = 'Only the first letter of the artist and song name should be capitalized'
        self.examples = ['Agent K.K.', 'K.K. Chorale', 'Bubblegum K.K.', 'Café K.K.', 'Comrade K.K.']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
animalphotoidentifier,"

class animalphotoidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = ""The id number of an animal's photo""
        self.format = 'The id number should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input. Input should be an integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3127:
            return True
        else:
            return False"
animalphotovariation,"

class animalphotovariation(GeneralSemanticType):

    def __init__(self):
        self.description = ""Variation of an animal's photo""
        self.format = 'Variation should be one of the valid values'
        self.examples = ['Natural wood', 'Dark wood', 'Pastel', 'White', 'Pop']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            raise Exception('Invalid variation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
kitcost,"

class kitcost(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cost of a kit in terms of in-game currency'
        self.format = 'The cost should be an integer'
        self.examples = [1, 1, 1, 1, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
postername,"

class postername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Poster'
        self.format = ""Only the first letter of the character's name should be capitalized""
        self.examples = [""Admiral's poster"", ""Agent S's poster"", ""Agnes's poster"", ""Al's poster"", ""Alfonso's poster""]

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(""^[A-Z][a-z]*'s poster$"", casted_val):
            return True
        else:
            return False"
reactionsourceidentifier,"

class reactionsourceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Identifier for reaction data'
        self.format: str = 'Reaction source ID should be represented as an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Unable to cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if casted_val < 0:
            return False
        return True"
reactionname,"

class reactionname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a reaction'
        self.format = 'Title-cased strings'
        self.examples = ['Aggravation', 'Agreement', 'Amazed', 'Apologetic', 'Bashfulness']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            raise TypeError('Value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
reactionsource,"

class reactionsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of a reaction'
        self.format = 'Title-cased strings'
        self.examples = ['Peppy', 'Cranky', 'Snooty', 'Big Sister', 'Lazy']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
reactionsourceuniqueidentifier,"

class reactionsourceuniqueidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for reaction data'
        self.format = 'Reaction source unique IDs should be alphanumeric strings'
        self.examples = ['6suhKYAAhh5QMKt64', '7smqwK9J7eFBxta28', 'vosig4bbr4kPq57AT', 'jBKsQYCAd7PtymQeB', 'wzvKbFrEJCseTohoz']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
rugname,"

class rugname(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Name of a Rug'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Aluminum Rug', 'Apple Rug', 'Bell-bag Rug', 'Black Blocks Rug', 'Black Wooden-deck Rug']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^([A-Z][a-z]*\\s)*[A-Z][a-z]*$', casted_val):
            return True
        else:
            return False"
rugprice,"

class rugprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in Bells of a rug'
        self.format = 'Price should be formatted as an integer number (in Bells units)'
        self.examples = [1500, 2000, 1000, 500, 10000]

    def super_cast(self, val):
        if str(val).lower() == 'nfs':
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
rugsize,"

class rugsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of a Rug'
        self.format = ""The size should be in the form 'numberxnumber'""
        self.examples = ['3x3', '2x1', '4x3', '3x2', '5x5']

    def super_cast(self, val):
        match_obj = re.match('\\d+x\\d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid rug size')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('\\d+x\\d+', casted_val):
            return True
        else:
            return False"
mileprice,"

class mileprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in Nook Miles of a rug'
        self.format = 'Price should be formatted as an integer number (in Nook Miles units)'
        self.examples = [950, 1000, 1050, 1200, 900]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and (casted_val < 0 or not isinstance(casted_val, int)):
            return False
        else:
            return True"
rugsource,"

class rugsource(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Source of a Rug'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Saharah', 'Crafting', 'Nook Miles Shop', 'Mom', 'Fishing Tourney']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
toolname,"

class toolname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a tool'
        self.format = 'Tool names should be stored as strings'
        self.examples = ['axe', 'bamboo wand', 'bug wand', 'Bunny Day wand', 'cherry-blossom wand']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
diytool,"

class diytool(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a tool is DIY or not'
        self.format = 'In Yes/No format'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['yes', 'no']:
            return val.capitalize()
        else:
            return 'No'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
customizetool,"

class customizetool(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether a tool is customizable or not'
        self.format = 'In lower-case and as a string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            lower_string_val = str(val).lower()
            if lower_string_val in ['yes', 'no']:
                return lower_string_val
            else:
                return 'no'
        else:
            return 'no'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
tooluses,"

class tooluses(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of uses of a tool'
        self.format = 'Tool uses should be a positive integer or ""Unlimited""'
        self.examples = [30, 100, 20, 60, 'Unlimited']

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, float) and val == float('inf'):
            return 'Unlimited'
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif isinstance(casted_val, str) and casted_val == 'Unlimited':
            return True
        else:
            return False"
toolsize,"

class toolsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of a tool'
        self.format = ""Tool size should be stored as string '1x1'""
        self.examples = ['1x1', '1x1', '1x1', '1x1', '1x1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == '1x1':
            return True
        else:
            return False"
toolprice,"

class toolprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a tool'
        self.format = 'Price should be formatted as an integer (in Bells units)'
        self.examples = [2500, 900, 2400, 800, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val == 'NFS':
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
sizemeasure,"

class sizemeasure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of an entity in a game'
        self.format = ""Size should be represented as 'NxN' where N is a positive integer""
        self.examples = ['1x1', '2x2', '3x3', '4x4', '5x5']

    def super_cast(self, val):
        match_obj = re.match('[1-9]x[1-9]', val)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[1-9]x[1-9]', casted_val):
            return True
        else:
            return False"
umbrellaitemname,"

class umbrellaitemname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an umbrella item in Animal Crossing'
        self.format = 'Names should be properly capitalized strings'
        self.examples = ['Apple Umbrella', 'Bat Umbrella', 'Beach Umbrella', 'Bear Umbrella', 'Black Chic Umbrella']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
umbrellaitemavailability,"

class umbrellaitemavailability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Availability of umbrella item'
        self.format = 'In title-case and as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            raise Exception('Invalid input type, expecting a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
umbrellaitemprice,"

class umbrellaitemprice(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Price of an umbrella item in Animal Crossing'
        self.format: str = 'Prices should be integers'
        self.examples: list = [840, 770, 1570, 1620, 192]

    def super_cast(self, val):
        if isinstance(val, str) and val == 'NFS':
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
umbrellaitemsource,"

class umbrellaitemsource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of an umbrella item in Animal Crossing'
        self.format = 'Source should be a properly capitalized string'
        self.examples = [""Nook's Cranny"", 'Crafting', 'Dodo Airlines', 'Fishing Tourney', 'Bug-Off']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
umbrellaitemforsale,"

class umbrellaitemforsale(GeneralSemanticType):

    def __init__(self):
        self.description = 'Umbrella item for sale status'
        self.format = 'Boolean'
        self.examples = ['For Sale', 'Not For Sale', 'For Sale', 'Not For Sale', 'For Sale']

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() in ['for sale', 'not for sale']:
                return val.title()
            else:
                raise ValueError('Invalid for sale value')
        else:
            raise ValueError('Invalid data type. Expected a string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['For Sale', 'Not For Sale']:
            return True
        else:
            return False"
villagername,"

class villagername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Names of the villagers in Animal Crossing'
        self.format = 'Names should be capitalized'
        self.examples = ['Admiral', 'Agent S', 'Agnes', 'Al', 'Alfonso']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z ]*$', casted_val):
            return True
        else:
            return False"
personality,"

class personality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Personality of the villagers in Animal Crossing'
        self.format = 'Personality should be capitalized'
        self.examples = ['Lazy', 'Normal', 'Cranky', 'Snooty', 'Jock']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
hobby,"

class hobby(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hobby of the villagers in Animal Crossing'
        self.format = 'Hobby should be capitalized'
        self.examples = ['Nature', 'Fitness', 'Fashion', 'Play', 'Education']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
birthday,"

class birthday(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Birthday of the villagers in Animal Crossing'
        self.format: str = ""string in the format 'DD-MMM'""
        self.examples: list = ['27-Jan', '2-Jul', '21-Apr', '18-Oct', '9-Jun']

    def super_cast(self, val):
        return datetime.strptime(str(val), '%d-%b').strftime('%d-%b')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%d-%b')
            return True
        except ValueError:
            return False"
catchphrase,"

class catchphrase(GeneralSemanticType):

    def __init__(self):
        self.description = 'Catchphrase of the villagers in Animal Crossing'
        self.format = 'Catchphrase should be a string'
        self.examples = ['aye aye', 'sidekick', 'snuffle', 'ayyyeee', ""it'sa me""]

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
favoritesong,"

class favoritesong(GeneralSemanticType):

    def __init__(self):
        self.description = 'Favorite song of the villagers in Animal Crossing'
        self.format = 'Favorite song should be a string'
        self.examples = ['Steep Hill', 'Go K.K. Rider', 'K.K. House', 'Go K.K. Rider', 'Forest Life']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
wallpaper,"

class wallpaper(GeneralSemanticType):

    def __init__(self):
        self.description = 'Wallpaper preference of the villagers in Animal Crossing'
        self.format = 'Wallpaper should be a string'
        self.examples = ['dirt-clod wall', 'concrete wall', 'gray molded-panel wall', 'concrete wall', 'yellow playroom wall']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
flooring,"

class flooring(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flooring preference of the villagers in Animal Crossing'
        self.format = 'Flooring should be a string'
        self.examples = ['tatami', 'colorful tile flooring', 'arabesque flooring', 'green rubber flooring', 'green honeycomb tile']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
name,"

class name(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an entity'
        self.format = 'Name should be formatted with the first letter capitalized'
        self.examples = ['Air Conditioner', 'Diner Neon Clock', 'Corkboard', 'Ornament Wreath', 'Autograph Cards']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
wallpapername,"

class wallpapername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Wallpaper'
        self.format = 'Name should be stored as a string'
        self.examples = ['abstract wall', 'ancient wall', 'apple wall', 'aqua tile wall', 'arched-window wall']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
booleanenum,"

class booleanenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Boolean Enum'
        self.format = 'Stored as a string'
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if str(val).lower() == 'yes':
            return 'Yes'
        elif str(val).lower() == 'no':
            return 'No'
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
sources,"

class sources(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of a Wallpaper'
        self.format = 'Name should be stored as a string'
        self.examples = [""Nook's Cranny"", 'Saharah', 'Crafting', 'Wedding Season', 'Bug-Off']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
pv,"

class pv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Page views'
        self.format = 'Page views should be an integer from 0 to inf'
        self.examples = [397349, 3969, 373890, 142054, 190684]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid input, expected an integer or a value that can be converted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
uv,"

class uv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique views'
        self.format = 'Unique views should be a floating point number from 0 to inf'
        self.examples = [4421.0, 2289.0, float('nan'), 2157.0, float('nan')]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise ValueError(""Value can't be negative"")
            return val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
events,"

class events(GeneralSemanticType):

    def __init__(self):
        self.description = 'An event occurrence'
        self.format = 'A boolean'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
menu,"

class menu(GeneralSemanticType):

    def __init__(self):
        self.description = 'Menu item'
        self.format = 'Menu item should be capitalized'
        self.examples = ['딸기라떼', '카페라떼', '바닐라라떼', '초코라떼', '모카라떼']

    def super_cast(self, val):
        return str(val).strip().capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
mileagepergallon,"

class mileagepergallon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mileage per Gallon'
        self.format = 'MPG represented as a float'
        self.examples = [10.1, 15.2, 20.3, 25.4, 30.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carreference,"

class carreference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Reference ID'
        self.format = ""Car reference ID should be in the form '/ad/xxxxxx'""
        self.examples = ['/ad/25017331', '/ad/25043746', '/ad/25142894', '/ad/24942816', '/ad/24913660']

    def super_cast(self, val):
        try:
            casted_val = str(val)
            if casted_val.startswith('/ad/'):
                return casted_val
            else:
                return 'Invalid'
        except Exception as e:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
model,"

class model(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Model'
        self.format = 'Car model as a string'
        self.examples = ['Focus', 'Focus', 'Focus', 'Focus', 'Focus']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
flightclass,"

class flightclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Class of flight'
        self.format = 'Flight class should be a string'
        self.examples = ['Business', 'Eco', 'Eco Plus']

    def super_cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid flight class')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
delayinminutes,"

class delayinminutes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Delay in minutes'
        self.format = 'Delay should be a non-negative floating point number'
        self.examples = [0.0, 12.0, 1115.0, 45.5, 100.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input. Value must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif casted_val < 0:
            return False
        else:
            return True"
travelclass,"

class travelclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Class of Travel'
        self.format = ""Travel class should be one of the following: 'Business', 'Eco', 'Eco Plus'""
        self.examples = ['Business', 'Eco', 'Eco Plus']

    def super_cast(self, val):
        if val in ['Business', 'Eco', 'Eco Plus']:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Business', 'Eco', 'Eco Plus']:
            return True
        else:
            return False"
delaytimeinminutes,"

class delaytimeinminutes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Delay time in minutes'
        self.format = 'Delay time should be a non-negative floating point number'
        self.examples = [0.0, 5.0, 10.0, 15.0, 20.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
licensestatus,"

class licensestatus(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A status indicating whether a license is valid or not'
        self.format: str = 'Boolean value (0 or 1)'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
insurancestatus,"

class insurancestatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Insurance status, indicating whether a person is insured or not'
        self.format = 'A boolean value, represented as 0 (False) for not insured and 1 (True) for insured'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return bool(int(val))
        except ValueError:
            raise ValueError('Invalid input. Expected a value that can be cast to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
drivinglicense,"

class drivinglicense(GeneralSemanticType):

    def __init__(self):
        self.description = 'Driving License Status'
        self.format = 'Boolean (0 for No License, 1 for License)'
        self.examples = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in [0, 1]:
            raise Exception('Invalid driving license status')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
previouslyinsured,"

class previouslyinsured(GeneralSemanticType):

    def __init__(self):
        self.description = ""A person's previously insured status""
        self.format = 'Binary in form of 0 and 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val not in [0, 1]:
            raise Exception('Invalid previously insured status')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
binarycategory,"

class binarycategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary Category'
        self.format = 'Values should be integers, either 1 or 2'
        self.examples = [1, 2]

    def super_cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
classification,"

class classification(GeneralSemanticType):

    def __init__(self):
        self.description = 'Classification'
        self.format = 'Classification should be an integer with no decimal places'
        self.examples = [3, 5, 3, 7, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise TypeError('Invalid value for classification: {}'.format(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
orderofevent,"

class orderofevent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Order of occurrence of an event within a match'
        self.format = 'An integer representing the order of the event'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_value = int(val)
            return casted_value
        except ValueError:
            raise Exception(f'Value {val} cannot be casted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
matchminute,"

class matchminute(GeneralSemanticType):

    def __init__(self):
        self.description = 'The time in minutes at which an event occurs during a match'
        self.format = 'An integer representing the minute of the event'
        self.examples = [2, 4, 7, 10, 15]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 90:
            return True
        else:
            return False"
advancedstats,"

class advancedstats(GeneralSemanticType):

    def __init__(self):
        self.description = 'Advanced statistics status'
        self.format = 'Boolean value'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
leaguecode,"

class leaguecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Code representing different football leagues'
        self.format = 'Alphanumeric string of length 2 or 3'
        self.examples = ['E0', 'F1', 'I1', 'SP1', 'D1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) in [2, 3] and casted_val.isalnum():
            return True
        else:
            return False"
seasonyear,"

class seasonyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Season year of the match'
        self.format = ""Year should be formatted as 'yyyy'""
        self.examples = [2012, 2013, 2014, 2015, 2016]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} can't be cast to int"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 2000 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
footballgoal,"

class footballgoal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of goals scored'
        self.format = 'Integer value with no decimal places'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Can't convert {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
bettingodds,"

class bettingodds(GeneralSemanticType):

    def __init__(self):
        self.description = 'Betting odds for the match'
        self.format = 'Floating point number with at most two decimal places'
        self.examples = [1.56, 2.36, 1.83, 1.55, 2.5]

    def super_cast(self, val):
        try:
            val = round(float(val), 2)
            return val
        except Exception as e:
            raise Exception(f'Error in casting value: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            raise ValueError(f'Value {casted_val} is not within expected range [0, inf]')"
pregnancynumber,"

class pregnancynumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a woman has been pregnant'
        self.format = 'Pregnancy numbers should be formatted as integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Invalid value {val}. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise Exception(f'Invalid value {val}. Expected a non-negative integer.')
        return True"
tradevolume,"

class tradevolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the volume of shares traded'
        self.format = 'Volume should be an integer'
        self.examples = [0, 20000, 150000, 500000, 1000000]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not pd.isna(casted_val)):
            return True
        else:
            return False"
stockexchange,"

class stockexchange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock Exchange'
        self.format = 'Stock exchange names should be capitalized'
        self.examples = ['New York Stock Exchange', 'NASDAQ', 'Hong Kong Stock Exchange', 'Shanghai Stock Exchange', 'Tokyo Stock Exchange']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
usdprice,"

class usdprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock price in USD'
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [10.2048999, 303.149, 1350.427, 4889.576, 18934.3761734]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception('Invalid value. Only floating point numbers are allowed.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
acceleration,"

class acceleration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Acceleration of the fetus'
        self.format = 'Acceleration is a positive float'
        self.examples: list = [0.0, 0.006, 0.003, 0.003, 0.007]

    def super_cast(self, val):
        return round(float(val), 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
movement,"

class movement(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Movement of the fetus'
        self.format = 'Movement is a positive float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 6)
            if float_val < 0:
                raise ValueError()
            return float_val
        except (ValueError, TypeError):
            raise Exception(f'Invalid value {val} for movement. Expected a non-negative float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not isinstance(casted_val, float):
            return False
        else:
            return True"
contraction,"

class contraction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Uterine contractions'
        self.format = 'Positive float with precision up to 6 decimal places'
        self.examples = [0.0, 0.006, 0.008, 0.008, 0.008]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            raise Exception(f'Cannot cast the value {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(f'The value {casted_val} is not valid for contraction. It should be a positive float')
        return True"
fetalhealth,"

class fetalhealth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health status of the fetus'
        self.format = 'float'
        self.examples = [1.0, 1.0, 2.0, 1.0, 3.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Invalid value {val}. Expected a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
agencycode,"

class agencycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Code representing each agency'
        self.format = 'Alphanumeric strings with no specific format'
        self.examples = ['NY03030', 'CA01942', 'ILCPD00', 'MI82349', 'PAPEP00']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^\\w+$', casted_val):
            return True
        else:
            return False"
agencytype,"

class agencytype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the Agency'
        self.format = 'Strings representing the agency type'
        self.examples = ['Municipal Police', 'Sheriff', 'County Police', 'State Police', 'Special Police']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples or casted_val == 'Unknown':
            return True
        else:
            return False"
crimesolved,"

class crimesolved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a crime is solved or not'
        self.format = 'lowercase string'
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).lower()
        else:
            return 'unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no', 'unknown']:
            return True
        else:
            return False"
victimsex,"

class victimsex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of the Victim'
        self.format = ""Strings representing the victim's sex""
        self.examples = ['Male', 'Female', 'Unknown']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
victimage,"

class victimage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the Victim'
        self.format = 'Age should be a non-negative integer'
        self.examples = [14, 43, 30, 43, 30]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Cannot cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 998"
victimrace,"

class victimrace(GeneralSemanticType):

    def __init__(self):
        self.description = 'Race of the Victim'
        self.format = ""Strings representing the victim's race""
        self.examples = ['White', 'Black', 'Unknown', 'Asian/Pacific Islander', 'Native American/Alaska Native']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
victimethnicity,"

class victimethnicity(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Ethnicity of the Victim'
        self.format: str = ""Strings representing the victim's ethnicity""
        self.examples: list = ['Not Hispanic', 'Unknown', 'Hispanic']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
perpetratorsex,"

class perpetratorsex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of the Perpetrator'
        self.format = 'lower-cased string'
        self.examples = ['male', 'unknown', 'female']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
perpetratorage,"

class perpetratorage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the Perpetrator'
        self.format = 'Age should be a non-negative integer'
        self.examples = [15, 42, 0, 42, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise TypeError('Value must be castable to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 99:
            return True
        else:
            return False"
perpetratorethnicity,"

class perpetratorethnicity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ethnicity of the Perpetrator'
        self.format = ""Strings representing the perpetrator's ethnicity""
        self.examples = ['Unknown', 'Not Hispanic', 'Hispanic']

    def super_cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in self.examples"
weapon,"

class weapon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weapon used in the crime'
        self.format = 'Strings representing the weapon used'
        self.examples = ['Handgun', 'Knife', 'Blunt Object', 'Shotgun', 'Rifle']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
emotionlevel,"

class emotionlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Emotion level, represented as an integer'
        self.format = 'Integer format'
        self.examples = [0, 2, 4, 6, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Input value cannot be converted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 6:
            return True
        else:
            return False"
datasetusage,"

class datasetusage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of usage of the dataset'
        self.format = 'Usage type should be represented as a string'
        self.examples = ['Training', 'PublicTest', 'PrivateTest']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Training', 'PublicTest', 'PrivateTest']:
            return True
        else:
            return False"
orderdate,"

class orderdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date an order was placed'
        self.format = ""Order date should be a datetime object in the format: '%m/%d/%Y %H:%M'""
        self.examples = ['12/30/2020 21:39', '1/9/2021 15:41', '1/9/2021 15:58', '1/9/2021 16:14', '12/30/2020 21:56']

    def super_cast(self, val):
        if isinstance(val, str):
            return datetime.strptime(val, '%m/%d/%Y %H:%M')
        else:
            raise ValueError('Input value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
citybilling,"

class citybilling(GeneralSemanticType):

    def __init__(self):
        self.description = 'The city where the billing address is located'
        self.format = 'City name should be a string'
        self.examples = ['Karachi', 'Lahore', 'Islamabad', 'Rawalpindi', 'Faisalabad']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
orderdatetime,"

class orderdatetime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Datetime of the order'
        self.format = ""Datetime should be a string value in the format 'MM/DD/YYYY HH:MM'""
        self.examples = ['12/30/2020 21:39', '1/9/2021 15:41', '1/9/2021 15:58', '1/9/2021 19:00', '1/9/2021 16:05']

    def super_cast(self, val):
        try:
            casted_val = datetime.strptime(str(val), '%m/%d/%Y %H:%M')
            return casted_val.strftime('%m/%d/%Y %H:%M')
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            try:
                datetime.strptime(casted_val, '%m/%d/%Y %H:%M')
                return True
            except ValueError:
                return False"
totalitems,"

class totalitems(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Total items in the order'
        self.format: str = 'Total items should be formatted as an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if 0 <= casted_val < float('inf'):
                return True
            else:
                return False
        except TypeError:
            return False"
totalweightgrams,"

class totalweightgrams(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total weight of the order'
        self.format = 'Total weight should be formatted as a floating point number in grams'
        self.examples = [200.0, 500.0, 1000.0, 1500.0, 2000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 200.0 <= casted_val:
            return True
        else:
            return False"
crimeindex,"

class crimeindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Crime Index'
        self.format = 'Crime index should be represented as a float'
        self.examples: list = [0.00632, 0.02731, 0.02729, 0.03237, 0.06905]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError
        except ValueError:
            raise Exception('Cannot convert to float or negative value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
populationproportion,"

class populationproportion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proportion of residential land zoned for lots over 25,000 sq.ft.'
        self.format = 'Population proportion should be represented as a percentage (0-100)'
        self.examples: list = [18.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid population proportion')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
isboundedbyriver,"

class isboundedbyriver(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether a country is bounded by a river'
        self.format = 'Boolean (1 or 0)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val not in [0, 1]:
                raise ValueError('Invalid value')
            return casted_val
        except ValueError:
            raise ValueError('Invalid input, expected boolean 0 or 1')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            raise ValueError('Invalid value, expected boolean 0 or 1')"
noxconcentration,"

class noxconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nitric oxides concentration (parts per 10 million)'
        self.format = 'NOx concentration should be represented as a float'
        self.examples: list = [0.538, 0.469, 0.469, 0.458, 0.458]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return 'Invalid NOx concentration'
            else:
                return num
        except ValueError:
            return 'Invalid NOx concentration'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
averageroomsperdwelling,"

class averageroomsperdwelling(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average number of rooms per dwelling'
        self.format = 'Average rooms per dwelling should be represented as a float'
        self.examples: list = [6.575, 6.421, 7.185, 6.998, 7.147]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid average rooms per dwelling')
            return num
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
propertyagetax,"

class propertyagetax(GeneralSemanticType):

    def __init__(self):
        self.description = 'Property tax rate'
        self.format = 'Property tax rate should be represented as an integer'
        self.examples = [296, 242, 242, 222, 222]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid property tax rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return self.valid_range[0] <= casted_val <= self.valid_range[1]

    def valid_range(self):
        return [0, float('inf')]"
pupilteacherratio,"

class pupilteacherratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'Pupil-teacher ratio by town'
        self.format = 'Pupil-teacher ratio should be represented as a float'
        self.examples: list = [15.3, 17.8, 17.8, 18.7, 18.7]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError('Invalid pupil-teacher ratio')
            return casted_val
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
gamematchup,"

class gamematchup(GeneralSemanticType):

    def __init__(self):
        self.description = 'Details of a game matchup'
        self.format = ""Matchup should follow the format: 'MMM DD, YYYY - TEAM1 @ TEAM2' or 'MMM DD, YYYY - TEAM1 vs. TEAM2'""
        self.examples = ['FEB 07, 2015 - DAL vs. POR', 'NOV 30, 2014 - TOR @ LAL', 'OCT 29, 2014 - CHA vs. MIL', 'DEC 03, 2014 - SAS @ BKN', 'JAN 21, 2015 - WAS vs. OKC']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        match = re.match('([A-Z]{3} \\d{2}, \\d{4} - [A-Z]{2,3} (@|vs\\.) [A-Z]{2,3})', casted_val)
        return match is not None and casted_val == match.group()"
gamelocation,"

class gamelocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The location of a game'
        self.format = 'A character'
        self.examples = ['A', 'H', 'A', 'H', 'A']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['A', 'H']:
            return str_val
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'H']:
            return True
        else:
            return False"
gameresult,"

class gameresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Result of a game'
        self.format = 'In upper-case and as a string'
        self.examples = ['W', 'L', 'W', 'L', 'W']

    def super_cast(self, val):
        str_val = str(val).upper()
        if str_val in ['W', 'L']:
            return str_val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['W', 'L']:
            return True
        else:
            return False"
shotnumber,"

class shotnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Shot number in a game'
        self.format = 'Shot number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and str(val).isdigit():
            return int(val)
        else:
            raise ValueError('Value is not a valid shot number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 37:
            return True
        else:
            return False"
gameperiod,"

class gameperiod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Game period'
        self.format = 'Game period should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 8):
            return True
        else:
            return False"
shotclock,"

class shotclock(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time left on the shot clock'
        self.format = 'Shot clock should be a floating point number'
        self.examples = [10.8, 3.4, 0.0, 24.0]

    def super_cast(self, val):
        try:
            return float(val) if pd.notna(val) else float('nan')
        except ValueError:
            raise Exception('Invalid value for shotclock. Must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 24.0:
            return True
        else:
            return False"
shotdistance,"

class shotdistance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Distance of the shot'
        self.format = 'In feet'
        self.examples = [7.7, 28.2, 10.1, 17.2, 3.7]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid input for shot distance. Expected a numerical value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 46.7:
            return True
        else:
            return False"
pointtype,"

class pointtype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of shot'
        self.format: str = 'Point type should be an integer (2 or 3)'
        self.examples: list = [2, 3, 2, 3, 2]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [2, 3]:
                return int_val
            else:
                raise Exception('Value not in valid range (2, 3)')
        except ValueError:
            raise Exception('Value cannot be casted to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [2, 3]:
            return True
        else:
            return False"
shotresult,"

class shotresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'The result of a shot'
        self.format = 'Result in lower-case and as a string'
        self.examples = ['missed', 'made', 'missed', 'made', 'missed']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['missed', 'made']:
            return True
        else:
            return False"
playeridentifier,"

class playeridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a player'
        self.format = 'Player ID should be a positive integer'
        self.examples = [158023, 20801, 190871, 200389, 183277]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isnull(casted_val) and (not isinstance(casted_val, int)):
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
flow,"

class flow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flow'
        self.format = 'Flow should be a floating point number'
        self.examples = [3019.53, 3024.41, 3043.46, 3047.36, 3033.69]

    def super_cast(self, val):
        try:
            float_val = float(str(val).replace(',', '.'))
            return float_val
        except ValueError:
            raise ValueError(f'Cannot convert {val} to a floating point number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (not np.isnan(casted_val)):
            return True
        else:
            return False"
ratingscale,"

class ratingscale(GeneralSemanticType):

    def __init__(self):
        self.description = 'A rating scale of 1 to 5'
        self.format = 'The rating should be an integer value between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if 1 <= num <= 5:
                return num
            else:
                raise Exception('Invalid rating')
        except:
            return 'Invalid rating'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
movieduration,"

class movieduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The duration of a movie'
        self.format = 'Duration should be formatted as a floating point number (in minutes)'
        self.examples: list = [120.0, 90.0, 180.0, 150.0, 105.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise ValueError('Invalid value. Value must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
moviecolor,"

class moviecolor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color of the movie'
        self.format = 'The color value should be a string'
        self.examples = ['Color', 'Black and White']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            raise TypeError('Value should be a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Color', 'Black and White']:
            return True
        else:
            return False"
movielanguage,"

class movielanguage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Language of the movie'
        self.format = 'Language of the movie should be in lowercase'
        self.examples = ['english', 'french', 'spanish', 'hindi', 'mandarin']

    def super_cast(self, val):
        val = str(val).lower()
        return val if val in [lang.alpha_2 for lang in pycountry.languages if hasattr(lang, 'alpha_2')] else None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [lang.alpha_2 for lang in pycountry.languages if hasattr(lang, 'alpha_2')]:
            return True
        else:
            return False"
moviecontentrating,"

class moviecontentrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Content rating of the movie'
        self.format = 'Content rating should be a string'
        self.examples = ['G', 'PG', 'PG-13', 'R', 'NC-17']

    def super_cast(self, val):
        val = str(val)
        if val not in ['G', 'PG', 'PG-13', 'R', 'NC-17']:
            raise Exception('Invalid content rating')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['G', 'PG', 'PG-13', 'R', 'NC-17']:
            return True
        else:
            return False"
manufacturer,"

class manufacturer(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Manufacturer Name'
        self.format = 'Manufacturer name should be capitalized'
        self.examples = ['Dodge', 'Ford', 'Toyota', 'Chevrolet', 'Mercedes-B']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
carsales,"

class carsales(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Sales in Thousands'
        self.format = 'Sales should be represented as a floating number'
        self.examples = [16.919, 39.384, 14.114, 8.588, 20.397]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
carresalevalue,"

class carresalevalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Resale Value'
        self.format = 'Resale value should be represented as a floating number'
        self.examples = [16.36, 19.875, 18.225, 29.725, 22.255]

    def super_cast(self, val):
        if val is None or str(val) == 'nan':
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
vehicletype,"

class vehicletype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Vehicle'
        self.format = 'Vehicle type should be capitalized'
        self.examples = ['Passenger', 'Car', 'Passenger', 'Car', 'Passenger']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Passenger', 'Car']:
            return True
        else:
            return False"
enginsize,"

class enginsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Engine Size of the Car'
        self.format = 'Engine size should be represented as a floating number'
        self.examples = [1.8, 3.2, 3.2, 3.5, 1.8]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
carhorsepower,"

class carhorsepower(GeneralSemanticType):

    def __init__(self):
        self.description = 'Horsepower of the Car'
        self.format = 'Horsepower should be represented as a floating number'
        self.examples = [140.0, 225.0, 225.0, 210.0, 150.0]

    def super_cast(self, val):
        if isinstance(val, str) and re.match('\\d+(\\.\\d+)?', val):
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
carwheelbase,"

class carwheelbase(GeneralSemanticType):

    def __init__(self):
        self.description = 'Wheelbase of the Car'
        self.format = 'Wheelbase should be represented as a floating number'
        self.examples = [101.2, 108.1, 106.9, 114.6, 102.6]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carwidth,"

class carwidth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Width of the Car'
        self.format = 'Width should be represented as a floating number'
        self.examples = [67.3, 70.3, 70.6, 71.4, 68.2]

    def super_cast(self, val):
        try:
            return_val = float(val)
            if math.isnan(return_val):
                return float('nan')
            else:
                return return_val
        except Exception as e:
            print(f'Exception occurred while casting value: {str(e)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
        return False"
carweight,"

class carweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight of the Car'
        self.format = 'Weight should be represented as a floating number'
        self.examples = [2.639, 3.517, 3.47, 3.85, 2.998]

    def super_cast(self, val):
        if val is None or (isinstance(val, str) and val.lower() == 'nan'):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        return 0 <= casted_val <= float('inf')"
carfuelcapacity,"

class carfuelcapacity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fuel Capacity of the Car'
        self.format = 'Fuel capacity should be represented as a floating number'
        self.examples = [13.2, 17.2, 17.2, 18.0, 16.4]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return float(val)
            except ValueError:
                return float('nan')
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carfuelefficiency,"

class carfuelefficiency(GeneralSemanticType):

    def __init__(self):
        self.description = 'Fuel Efficiency of the Car'
        self.format = 'Fuel efficiency should be represented as a floating number'
        self.examples = [28.0, 25.0, 26.0, 22.0, 27.0]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carlaunchdate,"

class carlaunchdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Latest Car Launch Date'
        self.format = 'Date should be represented as a datetime object'
        self.examples = ['10/5/2012', '8/31/2011', '1/24/2011', '10/30/2012', '2/23/2012']
        self.examples = [datetime.strptime(date, '%m/%d/%Y') for date in self.examples]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%m/%d/%Y')
            except ValueError:
                raise Exception(f""Cannot convert {val} to datetime object. Expected format 'month/day/year'"")
        elif isinstance(val, datetime):
            return val
        else:
            raise Exception(f'Cannot convert {val} to datetime object. Unsupported datatype')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
carpowerperffactor,"

class carpowerperffactor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Power Performance Factor of the Car'
        self.format = 'Power performance factor should be represented as a floating number'
        self.examples = [58.28014952, 91.37077766, float('nan'), 91.38977933, 62.7776392]

    def super_cast(self, val):
        if val == 'nan':
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
powergeneration,"

class powergeneration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The amount of power generated by a particular type of power plant'
        self.format = 'Power generation should be a floating point number representing the amount of power generated in MWh'
        self.examples = [447.0, 448.0, 438.0, 428.0, 329.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
powerforecast,"

class powerforecast(GeneralSemanticType):

    def __init__(self):
        self.description = 'The forecasted amount of power generated by a particular type of power plant'
        self.format = 'Power forecast should be a floating point number representing the forecasted amount of power generated in MWh'
        self.examples = [6436.0, 5856.0, 5454.0, 5151.0, 4861.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not math.isnan(val)):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totalload,"

class totalload(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total load of power'
        self.format = 'Total load should be a floating point number representing the total load of power in MWh'
        self.examples = [26118.0, 24934.0, 23515.0, 22642.0, 21785.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
pressure,"

class pressure(GeneralSemanticType):

    def __init__(self):
        self.description = 'The pressure in hPa'
        self.format = 'Pressure should be a positive integer'
        self.examples = [1001, 1001, 1002, 1002, 1002]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Pressure cannot be negative')
            return num
        except ValueError:
            print('Invalid input, please enter a positive integer value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
winddeg,"

class winddeg(GeneralSemanticType):

    def __init__(self):
        self.description = 'The wind direction in degrees'
        self.format = 'An integer between 0 and 360'
        self.examples = [62, 62, 23, 23, 23]

    def super_cast(self, val):
        if not isinstance(val, int):
            try:
                val = int(val)
            except ValueError:
                raise ValueError('Value should be convertible to integer')
        if val < 0 or val > 360:
            raise ValueError('Wind direction should be between 0 and 360')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 360:
            return False
        return True"
cloudsall,"

class cloudsall(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cloudiness in percentage'
        self.format = 'Cloudiness should be a percentage between 0 and 100'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        num = int(val)
        if num < 0 or num > 100:
            raise ValueError('Cloudiness should be between 0 and 100')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
weatheridentifier,"

class weatheridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The ID number of weather condition'
        self.format = 'Weather ID should be an integer between 200 and 804'
        self.examples = [800, 800, 800, 800, 800]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 200 or num > 804:
                raise ValueError('Invalid value')
            return num
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 200 <= casted_val <= 804:
            return True
        else:
            return False"
weathermain,"

class weathermain(GeneralSemanticType):

    def __init__(self):
        self.description = 'The main weather condition'
        self.format = 'The main weather condition should be in lowercase'
        self.examples = ['clear', 'clouds', 'rain', 'mist', 'fog']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['clear', 'clouds', 'rain', 'mist', 'fog', 'snow', 'drizzle', 'thunderstorm', 'smoke', 'haze']:
            return True
        else:
            return False"
weatherdescription,"

class weatherdescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'The detailed weather condition'
        self.format = 'The detailed weather condition should be in lowercase'
        self.examples = ['sky is clear', 'few clouds', 'scattered clouds', 'broken clouds', 'light rain']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
weathericon,"

class weathericon(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weather icon'
        self.format = 'The weather icon should be stored as strings'
        self.examples = ['01n', '02d', '03n', '04d', '09n']

    def super_cast(self, val):
        match_obj = re.match('\\d{2}[a-z]', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, str):
            return True
        else:
            return False"
yieldquintalhectare,"

class yieldquintalhectare(GeneralSemanticType):

    def __init__(self):
        self.description = 'Yield in quintal per hectare'
        self.format = 'Should be a positive floating point number'
        self.examples = [9.83, 7.47, 9.59, 6.42, 8.72]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError('Value should be positive')
            return casted_val
        except ValueError as ve:
            raise Exception(f'Error casting value: {ve}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0.0:
            return True
        else:
            return False"
cropvariety,"

class cropvariety(GeneralSemanticType):

    def __init__(self):
        self.description = 'Variety of a Crop'
        self.format = 'Variety names should be capitalized with an optional code in brackets'
        self.examples = ['Chinsurah Rice (IET 19140)', 'MACS 6222', 'IGKVR-2 (IET 19795)', 'CR Dhan 401 (REETA)', 'CR Dhan 601 (IET 18558)']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val:
            return False
        else:
            return True"
seasonduration,"

class seasonduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Season Duration of a Crop'
        self.format = ""Duration can be a positive integer number of days or a string category such as 'Medium'""
        self.examples = ['110', '108', 'Medium', '120', '145-150']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif str(val).isdigit():
            return int(val)
        else:
            return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        elif isinstance(casted_val, str) and casted_val.istitle():
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
unit,"

class unit(GeneralSemanticType):

    def __init__(self):
        self.description = 'Units of the data'
        self.format = ""Units should be abbreviations, with the magnitude following the unit. The magnitude should be abbreviated as 'mn' for million, 'th' for thousand, and 'ha' for hectare""
        self.examples = ['Ton mn', 'ha mn', 'kg/ha', 'Ton th', 'Bale mn']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Ton mn', 'ha mn', 'kg/ha', 'Ton th', 'Bale mn']:
            return True
        else:
            return False"
citydevelopmentindex,"

class citydevelopmentindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Development index of a city'
        self.format = 'City development index should be a float within the range [0, 1]'
        self.examples = [0.447, 0.698, 0.903, 0.92, 0.949]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 3)
        except ValueError:
            raise Exception('Invalid input. Input should be a number.')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
releventexperience,"

class releventexperience(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether the enrollee has relevant experience or not'
        self.format = ""Should be one of the two strings: 'Has relevent experience' or 'No relevent experience'""
        self.examples = ['Has relevent experience', 'No relevent experience']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['Has relevent experience', 'No relevent experience']:
            return str_val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Has relevent experience', 'No relevent experience']:
            return True
        else:
            return False"
traininghours,"

class traininghours(GeneralSemanticType):

    def __init__(self):
        self.description = 'Training hours'
        self.format = 'A positive integer'
        self.examples = [21, 98, 15, 39, 72]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError('Training hours cannot be negative')
            return casted_val
        except ValueError as ve:
            print(f'Error casting value {val} to int. Error: {str(ve)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or casted_val != math.floor(casted_val):
            print('The value is not valid. It should be a positive integer.')
            return False
        return True"
universityname,"

class universityname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a University'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Harvard University', 'California Institute of Technology', 'Massachusetts Institute of Technology', 'Stanford University', 'Princeton University']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
sellertype,"

class sellertype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of seller of the car'
        self.format = 'Capitalized string'
        self.examples = ['Individual', 'Dealer', 'Trustmark Dealer']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Individual', 'Dealer', 'Trustmark Dealer']
        if casted_val in valid_values:
            return True
        else:
            return False"
owner,"

class owner(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ownership status of the car'
        self.format = 'Owner should be a string'
        self.examples = ['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
symbol,"

class symbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock symbol of a company'
        self.format = 'Symbols should be represented as strings'
        self.examples = ['AXISBANK', 'UTIBANK']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
turnover,"

class turnover(GeneralSemanticType):

    def __init__(self):
        self.description = 'Turnover in INR'
        self.format = 'Turnover should be a floating point number'
        self.examples = [8026657140000.001, 93529374750000.0, 259851640715000.0, 118590794075000.0, 9960941950000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return round(num, 2)
            else:
                raise ValueError('Invalid turnover')
        except Exception:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
trades,"

class trades(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of trades'
        self.format = 'Trades should be an integer'
        self.examples = [1096, 23089, 44031, 73714, 407715]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deliverablevolume,"

class deliverablevolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Deliverable volume of the stock'
        self.format = 'Integer number'
        self.examples = [3095, 267145, 537944, 981880, 19739032]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
percentdeliverble,"

class percentdeliverble(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of deliverable stock'
        self.format = 'Percentage should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 1:
                return float('nan')
            return round(num, 3)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val > 1:
            return False
        else:
            return True"
stockdate,"

class stockdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the stock data'
        self.format = 'Date should be a string in the format YYYY-MM-DD'
        self.examples = ['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            try:
                datetime_object = datetime.strptime(val, '%Y-%m-%d')
                return datetime_object.strftime('%Y-%m-%d')
            except ValueError:
                return 'Invalid Date Format'
        else:
            return 'Invalid Date Format'

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
stocksymbol,"

class stocksymbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Symbol of a stock'
        self.format = 'The symbol should be capitalized'
        self.examples = ['ADANIPORTS', 'DRREDDY', 'INFRATEL', 'AXISBANK', 'BAJAJ-AUTO']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
stockseries,"

class stockseries(GeneralSemanticType):

    def __init__(self):
        self.description = 'Series of the stock'
        self.format = 'Series should be capitalized and stored as a string'
        self.examples: list[str] = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str) or not casted_val.isupper():
            raise Exception('Invalid value')
        return True"
stockturnover,"

class stockturnover(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock Turnover'
        self.format = 'Stock turnover should be an integer'
        self.examples = [7022101073750, 20663469707500, 70006987978750, 2868429636125000]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise ValueError(f'Cannot cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError('Value cannot be negative')
        return True"
stocktrades,"

class stocktrades(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of trades of the stock'
        self.format = 'The number of trades should be an integer'
        self.examples = [26078, 21219, 97, 12156, 20725]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        if casted_val < 0 or math.isinf(casted_val):
            return False
        return True"
stockdeliverablevolume,"

class stockdeliverablevolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'The deliverable volume of a stock'
        self.format = 'Deliverable volume should be formatted as an integer'
        self.examples = [32140, 70149, 220704, 17679422, 473]

    def super_cast(self, val):
        if val is None or math.isnan(float(val)):
            return None
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return 0 <= casted_val <= float('inf')"
stockpercentdeliverble,"

class stockpercentdeliverable(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percent deliverable of the stock'
        self.format = 'Percent deliverable should be a floating point number between 0 and 1, rounded to four decimal places'
        self.examples = [0.332, 0.483, 0.597, 0.9394]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not np.isnan(val)):
            return round(float(val), 4)
        else:
            raise TypeError('The value must be a numeric type.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
stockpercentdeliverable,"

class stockpercentdeliverable(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percent deliverable of the stock'
        self.format = 'Percent deliverable should be a floating point number between 0 and 1, rounded to four decimal places'
        self.examples = [0.332, 0.483, 0.597, 0.9394]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not np.isnan(val)):
            return round(float(val), 4)
        else:
            raise TypeError('The value must be a numeric type.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
percentdeliverable,"

class percentdeliverable(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percent of deliverable stocks'
        self.format = 'Percent deliverable should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.5, 0.75, 0.9, 1.0]

    def super_cast(self, val):
        if np.isnan(val):
            return np.nan
        else:
            return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
equityseries,"

class equityseries(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Equity Series'
        self.format = 'Equity series should be stored as uppercase strings'
        self.examples = ['EQ', 'EQ', 'EQ', 'EQ', 'EQ']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
tradedvolume,"

class tradedvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of stock traded'
        self.format = 'Volume should be an integer'
        self.examples = [21437, 2236566, 3471441, 6321588, 479716245]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
turnoverstock,"

class turnoverstock(GeneralSemanticType):

    def __init__(self):
        self.description = 'The turnover of stocks in cr.'
        self.format = 'Turnover of stocks should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and (not isinstance(val, bool)):
            try:
                return int(val)
            except ValueError:
                raise ValueError(f'Cannot cast {val} to int')
        else:
            raise TypeError(f'Invalid type {type(val)} for casting to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tradesstock,"

class tradesstock(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of trades for stocks'
        self.format = 'Number of trades should be an integer'
        self.examples = [100, 150, 1250, 1200, 1750]

    def super_cast(self, val):
        if pd.isnull(val):
            return int(0)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pixelvalue,"

class pixelvalue(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Pixel value in the image'
        self.format: str = 'Integer value within the range [0,255]'
        self.examples: list = [0, 125, 255, 100, 50]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0 or val > 255:
                raise ValueError('Value out of range [0,255]')
            return val
        except ValueError:
            raise ValueError('Value is not an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 255:
            return True
        else:
            return False"
preferredfoot,"

class preferredfoot(GeneralSemanticType):

    def __init__(self):
        self.description = 'Preferred foot of a football player'
        self.format = ""Should be 'Right' or 'Left'""
        self.examples = ['Right', 'Left', 'Right', 'Right', 'Right']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Right', 'Left']:
            return True
        else:
            return False"
playerage,"

class playerage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of a player in years'
        self.format = 'Age should be an integer between 0 and 100'
        self.examples = [16, 21, 24, 28, 45]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0 or casted_val > 100:
                raise Exception('Invalid value!')
            return casted_val
        except ValueError:
            raise Exception('Invalid type! Value should be convertible to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            return False
        else:
            return True"
playerdob,"

class playerdob(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of birth of a player'
        self.format = 'Date should be in the format ""YYYY-MM-DD""'
        self.examples = ['1985-07-05', '1993-09-10', '1990-07-20', '1992-04-18', '1989-09-28']

    def super_cast(self, val):
        if isinstance(val, datetime.date):
            return val.strftime('%Y-%m-%d')
        elif isinstance(val, str):
            return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
        else:
            raise ValueError('Invalid type for date of birth')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
playerclub,"

class playerclub(GeneralSemanticType):

    def __init__(self):
        self.description = 'Club of a player'
        self.format = 'The first letter of each name part should be capitalized'
        self.examples = ['FC Barcelona', 'Juventus', 'Paris Saint-Germain', 'Atlético Madrid', 'Real Madrid']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
playervalue,"

class playervalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market value of a player'
        self.format = 'Market value should be a floating point number'
        self.examples = [95500000.0, 58500000.0, 105500000.0, 77500000.0, 90000000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Unable to cast value to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
playerwage,"

class playerwage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Wage of a player'
        self.format = 'Wage should be a floating point number in EUR'
        self.examples = [565000.0, 405000.0, 290000.0, 125000.0, 470000.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
playerbodytype,"

class playerbodytype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The body type of the player'
        self.format: str = 'Body type codes should be stored as strings'
        self.examples: list = ['Normal', 'Lean', 'Stocky', 'C. Ronaldo', 'Messi']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
ticketssold,"

class ticketssold(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of tickets sold'
        self.format = 'Tickets sold should be formatted as an integer'
        self.examples = [42306002, 69269062, 54607854, 94524324, 84732942]

    def super_cast(self, val):
        return int(str(val).replace(',', ''))

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
genre,"

class genre(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genre of a Movie'
        self.format = 'Single word or two words separated by a slash'
        self.examples = ['Adventure', 'Action', 'Drama', 'Comedy', 'Thriller/Suspense']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^(\\w+)(/\\w+)?$', casted_val):
            return True
        else:
            return False"
moviecount,"

class moviecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of movies in a specific category'
        self.format = 'Number of movies should be a non-negative integer'
        self.examples = [7442, 564, 724, 759, 129]

    def super_cast(self, val):
        num = int(re.sub(',', '', str(val)))
        if num < 0:
            raise Exception('Invalid movie count')
        else:
            return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise Exception('Invalid movie count')
        else:
            return True"
dollaramount,"

class dollaramount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount in dollars'
        self.format = 'Dollar amount should be a non-negative floating point number'
        self.examples = [13387264.0, 21863076.0, 93855378.0, 39123963.0, 3534374.0]

    def super_cast(self, val):
        if isinstance(val, str) and '$' in val:
            val = float(val.replace('$', '').replace(',', ''))
            if val >= 0:
                return val
            else:
                raise ValueError('Invalid dollar amount')
        elif isinstance(val, (int, float)):
            if val >= 0:
                return float(val)
            else:
                raise ValueError('Invalid dollar amount')
        else:
            raise TypeError('Invalid type, value should be int, float or string in dollar format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
movienumber,"

class movienumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Movies'
        self.format = 'Movie numbers should be integers'
        self.examples = [588, 824, 747, 535, 525]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(f'Cannot cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
numberofmovies,"

class numberofmovies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of movies'
        self.format = 'Number of movies should be an integer number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(re.sub('\\D', '', str(val)))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
marketsharepercent,"

class marketsharepercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'The market share percentage'
        self.format = 'A floating point number between 0 and 100'
        self.examples = [27.14, 20.75, 14.97, 14.17, 8.33]

    def super_cast(self, val):
        if isinstance(val, str) and '%' in val:
            return float(val.replace('%', ''))
        elif isinstance(val, (int, float)):
            return val
        else:
            raise ValueError('Invalid input value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            raise ValueError('Invalid input value: outside valid range')"
mmse,"

class mmse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mini Mental State Examination score of the subject'
        self.format = 'MMSE score should be a floating point number'
        self.examples = [27.0, 30.0, 23.0, 28.0, 22.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 0 <= casted_val <= 30:
            return True
        else:
            return False"
cdr,"

class cdr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clinical Dementia Rating of the subject'
        self.format = 'CDR should be a floating point number'
        self.examples = [0.0, 0.0, 0.5, 0.5, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input, cannot convert to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 2:
            raise Exception('Invalid value, CDR should be in the range [0, 2]')
        return True"
etiv,"

class etiv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Estimated Total Intracranial Volume'
        self.format = 'ETIV should be an integer number'
        self.examples = [1987, 2004, 1678, 1738, 1698]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value. It should be convertible to an integer.'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
nwbv,"

class nwbv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Normalize Whole Brain Volume'
        self.format = 'NWBV should be a floating point number between 0.644 and 0.893'
        self.examples = [0.644, 0.743, 0.81, 0.842, 0.893]

    def super_cast(self, val):
        try:
            val = float(val)
            return val
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected a floating point number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.644 <= casted_val <= 0.893:
            return True
        else:
            return False"
asf,"

class asf(GeneralSemanticType):

    def __init__(self):
        self.description = 'Atlas Scaling Factor'
        self.format = 'ASF should be a floating point number between 0.881 and 1.563'
        self.examples = [0.881, 1.112, 1.19, 1.284, 1.563]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(f""Value {val} can't be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.881 <= casted_val <= 1.563:
            return True
        else:
            return False"
loanidentifier,"

class loanidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Loan ID'
        self.format = ""Loan IDs should be formatted as 'LP' followed by six digits""
        self.examples = ['LP001002', 'LP001003', 'LP001005', 'LP001006', 'LP001008']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^LP\\d{6}$', casted_val):
            return True
        else:
            return False"
dependents,"

class dependents(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of dependents of a person'
        self.format = 'Number of dependents should be stored as a string'
        self.examples = ['0', '1', '2', '3+']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1', '2', '3+']:
            return True
        else:
            return False"
loanamountterm,"

class loanamountterm(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Term of the loan'
        self.format: str = 'Loan term should be a floating point number'
        self.examples: list = [360.0, 360.0, 360.0, 360.0, 360.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
credithistory,"

class credithistory(GeneralSemanticType):

    def __init__(self):
        self.description = ""A person's credit history""
        self.format = '1.0 for good credit history, 0.0 for bad credit history'
        self.examples = [1.0, 0.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if isinstance(val, float):
            return val
        elif isinstance(val, int) and val in [0, 1]:
            return float(val)
        elif isinstance(val, str) and val.isdigit():
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
propertyarea,"

class propertyarea(GeneralSemanticType):

    def __init__(self):
        self.description = 'Property area'
        self.format = 'Property area should be stored as strings'
        self.examples = ['Urban', 'Semiurban', 'Rural']

    def super_cast(self, val):
        if str(val) in ['Urban', 'Semiurban', 'Rural']:
            return str(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Urban', 'Semiurban', 'Rural']:
            return True
        else:
            return False"
teamidentifier,"

class teamidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each team'
        self.format = '10-digit integer or uppercase string'
        self.examples = [1610612737, 1610612738, 'PIT', 'NE', 'SF']

    def super_cast(self, val):
        if isinstance(val, str) or (isinstance(val, float) and math.isnan(val)):
            return str(val).upper()
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1610612737 <= casted_val <= 1610612766:
            return True
        elif isinstance(casted_val, str) and re.match('^[A-Z]+$', casted_val):
            return True
        else:
            return False"
incomelevel,"

class incomelevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Income Level'
        self.format = 'Income Level should be an integer'
        self.examples = [1, 2, 3, 4, 5, 6, 7, 8]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1 or val > 8:
                raise ValueError('Invalid Income Level')
            return val
        except ValueError:
            raise ValueError('Invalid Income Level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 8:
            return True
        else:
            return False"
sequenceidentifier,"

class sequenceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A sequential ID'
        self.format = 'Sequential ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be casted to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
selleridentifier,"

class selleridentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique seller id'
        self.format: str = 'Alphanumeric string'
        self.examples: list = ['6560211a19b47992c3666cc44a7e94c0', '4a3ca9315b744ce9f8e9374361493884', '1f50f920176fa81dab994f9023523100', 'cc419e0650a3c5ba77189a1882b7556a', 'da8622b14eb17ae2831f4ac5b9dab84a']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
productcategoryname,"

class productcategoryname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Category Name'
        self.format = 'Lowercase strings with underscores in place of spaces.'
        self.examples = ['cama_mesa_banho', 'esporte_lazer', 'moveis_decoracao', 'beleza_saude', 'utilidades_domesticas']

    def super_cast(self, val):
        return str(val).replace(' ', '_').lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-z_]*$', casted_val):
            return True
        else:
            return False"
clockspeed,"

class clockspeed(GeneralSemanticType):

    def __init__(self):
        self.description = ""The clock speed of the mobile's processor""
        self.format = 'Clock Speed should be formatted as a floating point number'
        self.examples = [2.2, 0.5, 0.5, 2.5, 1.2]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except Exception as e:
            raise ValueError('Invalid value for clock speed') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= float('inf'):
            raise ValueError('Invalid value for clock speed')
        return True"
ram,"

class ram(GeneralSemanticType):

    def __init__(self):
        self.description = 'RAM size'
        self.format = 'RAM size should be an integer'
        self.examples = [3476, 3895, 2396, 3893, 1773]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Unable to cast value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 263 <= casted_val <= 3989:
            return True
        else:
            return False"
fightername,"

class fightername(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of the UFC fighter'
        self.format: str = 'First letter of each word should be capitalized'
        self.examples: list = ['Tom Aaron', 'Papy Abedi', 'Shamil Abdurakhimov', 'Danny Abbadi', 'Hiroyuki Abe']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str) and casted_val.istitle()"
titlebout,"

class titlebout(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicates whether the bout is a title bout'
        self.format = 'boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        elif str(val).lower() in ['true', 'false']:
            return str(val).lower() == 'true'
        else:
            raise Exception('Invalid value for title bout')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
healthindex,"

class healthindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health Index'
        self.format = 'Health index should be a floating point number ranging from 0 to 100'
        self.examples: list = [58.8, 53.4, 50.5, 45.2, 39.9]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 1)
        except ValueError:
            raise Exception('Invalid input value. Expected a float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0.0 <= casted_val <= 100.0"
mortalityrate,"

class mortalityrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mortality rate'
        self.format = 'Mortality rate should be formatted as a floating point number with two decimal places'
        self.examples = [10.5, 1.3, 100.0, 0.9, 1000.0]

    def super_cast(self, val):
        match_obj = re.match('^\\d+(?:\\.\\d+)?', val)
        if match_obj:
            return float(match_obj.group())
        else:
            raise Exception('Invalid mortality rate')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
happinessrank,"

class happinessrank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ranking of happiness'
        self.format = 'Integer rank'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 155:
            return True
        else:
            return False"
happinessscore,"

class happinessscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'A happiness score'
        self.format = 'A floating point number with three decimal places'
        self.examples = [7.632, 7.594, 7.555, 7.495, 7.487]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
family,"

class family(GeneralSemanticType):

    def __init__(self):
        self.description = 'Family support score'
        self.format = 'Float value with three decimal places'
        self.examples = [1.534, 1.551, 1.611, 1.517, 1.54]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
freedom,"

class freedom(GeneralSemanticType):

    def __init__(self):
        self.description = 'Freedom score'
        self.format = 'Freedom score should be a floating point number within the range [0, 1]'
        self.examples = [0.66557, 0.62877, 0.64938, 0.66973, 0.63297]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 5)
        except ValueError:
            raise Exception('Invalid Freedom score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
trustgovernmentcorruption,"

class trustgovernmentcorruption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trust in government corruption score'
        self.format = 'Trust in government corruption score should be a floating point number between 0 and 1'
        self.examples = [0.41978, 0.14145, 0.48357, 0.36503, 0.32957]

    def super_cast(self, val):
        num = float(val)
        return round(num, 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
generosity,"

class generosity(GeneralSemanticType):

    def __init__(self):
        self.description = 'The extent to which Generosity contributed to the calculation of the Happiness Score'
        self.format = 'Generosity score should be a floating point number between 0 and 1'
        self.examples = [0.168, 0.19, 0.121, 0.162, 0.236]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            val = float(val)
            if 0 <= val <= 1:
                return round(val, 5)
            else:
                raise Exception('Invalid generosity score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
hapinessscore,"

class hapinessscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Happiness Score'
        self.format = 'Happiness score should be a non-negative floating point number'
        self.examples = [7.808700085, 7.645599842, 7.559899807, 7.504499912, 7.487999916]

    def super_cast(self, val):
        num = float(val)
        return round(num, 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
socialsupport,"

class socialsupport(GeneralSemanticType):

    def __init__(self):
        self.description = 'Social support value'
        self.format = 'Floating point number between 0 and 2, rounded to 3 decimal places'
        self.examples = [0.0, 0.5, 1.0, 1.5, 2.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            support = round(float(val), 3)
            if 0 <= support <= 2:
                return support
            else:
                raise Exception('Invalid social support')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 2:
            return True
        else:
            return False"
corruption,"

class corruption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Corruption Index of a country'
        self.format = 'Corruption Index should be a floating point number between 0 and 1'
        self.examples = [0.186, 0.179, 0.292, 0.673, 0.338]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception('Invalid input. Cannot convert to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= 1:
            raise Exception('Invalid corruption index. It should be a floating point number between 0 and 1.')
        return True"
obesityrate,"

class obesityrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The percentage of adults who are obese'
        self.format = 'Obesity rate should be formatted as a floating point number'
        self.examples: list = [4.5, 22.3, 26.6, 6.8, 19.1]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid obesity rate')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        if casted_val < 0 or casted_val > 100:
            return False
        else:
            return True"
foodconsumption,"

class foodconsumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Food Consumption'
        self.format = 'Food Consumption is formatted as a non-negative floating point number'
        self.examples = [0.0014, 1.6719, 0.2711, 5.8087, 3.5764]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 4)
            return casted_val
        except ValueError:
            raise Exception('Invalid input. It should be a numerical value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= float('inf'):
            raise Exception('Invalid value. It should be a non-negative number.')
        else:
            return True"
covid19cases,"

class covid19cases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Covid-19 cases'
        self.format = 'Covid-19 cases should be a floating point number'
        self.examples = [0.142134196465269, 2.96730091613813, 0.244897085014767, 0.0616874730951356, 0.293877551020408]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)):
            return float(val)
        else:
            raise ValueError(f'Expected a number or a string that can be converted to float, got {type(val)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
playerslot,"

class playerslot(GeneralSemanticType):

    def __init__(self):
        self.description = 'Slot number for a player in a match'
        self.format = 'Player slots are integers between 0 and 132'
        self.examples: list = [0, 2, 4, 130, 132]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 0 <= int_val <= 132:
                return int_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError('Invalid value. Expecting an integer between 0 and 132.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 132:
            return True
        else:
            return False"
heroidentifier,"

class heroidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Heroid is a unique identifier for each hero character in the game Dota 2'
        self.format = 'Heroid should be an integer ranging from 1 to 113'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 113:
                return int_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
itemidentifier,"

class itemidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for an item'
        self.format = 'Integer'
        self.examples = [44, 29, 43, 84, 46]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
accountidentifier,"

class accountidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = ""Unique identifier for each player's account""
        self.format = 'Account id should be a positive integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
gametime,"

class gametime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timestamp in seconds of an event in a Dota 2 match'
        self.format = 'Time is stored as an integer value representing seconds'
        self.examples = [1, 894, 925, 1258, 2340]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Unable to cast the value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
gold,"

class gold(GeneralSemanticType):

    def __init__(self):
        self.description = 'The amount of gold a player has'
        self.format = 'Gold is represented as a positive integer'
        self.examples = [100, 200, 300, 400, 500]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 0:
                return casted_val
            else:
                return 'Invalid Input'
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
lasthits,"

class lasthits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of last hits in a Dota 2 match'
        self.format = 'Last hits should be an integer'
        self.examples = [0, 0, 0, 1, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value provided')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
citycode,"

class citycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'City code'
        self.format = 'City code should be an integer'
        self.examples = [120001, 120005, 120010, 120013, 120017]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
classtype,"

class classtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a class'
        self.format = 'The class type should be a string'
        self.examples = ['Mammal', 'Bird', 'Reptile', 'Fish', 'Amphibian', 'Bug', 'Invertebrate']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
inventoryidentifier,"

class inventoryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for an inventory'
        self.format = 'Inventory ID should be an integer'
        self.examples = [35, 50, 39, 50, 35]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not isinstance(val, bool)):
            return int(val)
        else:
            raise Exception('Invalid value. Expected an integer or float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
quantity,"

class quantity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quantity of LEGO piece'
        self.format = 'Quantity should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 1 <= casted_val <= 810:
            return True
        else:
            return False"
nationalityidentifier,"

class nationalityidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of a nationality'
        self.format = 'Nationality IDs should be non-negative integers'
        self.examples = [95, 95, 95, 18, 21]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and (not math.isnan(val)):
            if val >= 0:
                return int(val)
            else:
                raise Exception('Invalid nationality ID')
        else:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
nationalityname,"

class nationalityname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Country'
        self.format = 'Country Name should be capitalized'
        self.examples = ['United States', 'Canada', 'Brazil', 'Norway', 'France']

    def super_cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name) is not None:
            return country_name
        else:
            raise Exception('Invalid country name')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val) is not None:
            return True
        else:
            return False"
playerfoot,"

class playerfoot(GeneralSemanticType):

    def __init__(self):
        self.description = 'The preferred foot of a player'
        self.format = ""Expected as either 'Right' or 'Left'""
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']

    def super_cast(self, val):
        if val in ['Right', 'Left']:
            return val
        else:
            raise Exception('Invalid foot')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Right', 'Left']:
            return True
        else:
            return False"
playerrating,"

class playerrating(GeneralSemanticType):

    def __init__(self):
        self.description = ""Player's rating in the game""
        self.format = 'Rating should be an integer'
        self.examples = [92, 91, 89, 89, 88]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
skillmoves,"

class skillmoves(GeneralSemanticType):

    def __init__(self):
        self.description = 'Skill moves rating of a player'
        self.format = 'Skill moves rating should be an integer'
        self.examples = [4, 5, 4, 4, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
playerpotential,"

class playerpotential(GeneralSemanticType):

    def __init__(self):
        self.description = 'Potential of a Player'
        self.format = 'Potential should be an integer'
        self.examples = [66, 76, 79, 83, 93]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception('Cannot cast the value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
animeidentifier,"

class animeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for each Anime'
        self.format = 'Anime ID should be a positive integer'
        self.examples = [32281, 5114, 28977, 9253, 9969]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                raise ValueError('Invalid Anime ID')
            return val
        except ValueError:
            raise Exception('Invalid input, expected a positive integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
sector,"

class sector(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sector'
        self.format = 'Sector name should be capitalized'
        self.examples = ['Agriculture', 'Food', 'Retail', 'Services', 'Housing']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
partneridentifier,"

class partneridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Partner Identifier'
        self.format = 'Non-negative floating point values'
        self.examples = [151.0, 160.0, 336.0, 120.0, 198.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Invalid value {val}. Partner Identifier should be a non-negative floating point value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
plantidentifier,"

class plantidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of the plant'
        self.format = 'Plant ID should be stored as strings'
        self.examples = ['4135001', '4135002', '4135003', '4135004', '4135005']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isdigit():
            return True
        else:
            return False"
sourcekey,"

class sourcekey(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source key of the solar power generator'
        self.format = 'Source key must be stored as strings'
        self.examples = ['1BY6WEcLGh8j5v7', '1IF53ai7Xc0U56Y', '3PZuoBAID5Wc2HD', '7JYdWkrLSPkdwr4', 'McdE0feGgRqW7Ca']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^\\w+$', casted_val):
            return True
        else:
            return False"
power,"

class power(GeneralSemanticType):

    def __init__(self):
        self.description = 'The power generated'
        self.format = 'In kilowatts (kW)'
        self.examples = [0.0, 200.0, 500.0, 1000.0, 1500.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
irradiation,"

class irradiation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Irradiation measurement'
        self.format = 'Irradiation should be a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if not 0 <= casted_val < float('inf'):
            return False
        return True"
positiontext,"

class positiontext(GeneralSemanticType):

    def __init__(self):
        self.description = 'A position in a race in text format'
        self.format = 'A string representation of an integer value'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and 1 <= int(casted_val) <= 22:
            return True
        else:
            return False"
raceidentifier,"

class raceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a race'
        self.format = 'Race IDs should be positive integers with no decimal places'
        self.examples = [841, 868, 902, 950, 988]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
driveridentifier,"

class driveridentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a driver'
        self.format = 'Driver ID should be a positive integer'
        self.examples = [20, 21, 22, 23, 24]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Input value must be convertible to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
basenumber,"

class basenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Base number for the car service'
        self.format = ""A string that starts with 'B' followed by five digits""
        self.examples = ['B00013', 'B00014', 'B00029', 'B00053', 'B00095']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('B[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid base number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('B[0-9]{5}', casted_val):
            return True
        else:
            return False"
uberbase,"

class uberbase(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Uber base code'
        self.format: str = ""Uber base codes should be strings of the form 'B025XX'""
        self.examples: list = ['B02512', 'B02598', 'B02512', 'B02598', 'B02512']

    def super_cast(self, val):
        if str(val) not in self.examples:
            raise Exception('Invalid base code')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
totalvotes,"

class totalvotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total votes received by a candidate'
        self.format = 'Votes should be represented as integers'
        self.examples = [281382, 196392, 6682, 3814, 283352]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception:
            raise ValueError('Unable to cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise ValueError('Invalid value')
        return True"
party,"

class party(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Abbreviations of political parties in the USA'
        self.format: str = 'Abbreviations should be uppercase'
        self.examples: list = ['DEM', 'REP', 'LIB', 'WRI', 'IND']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
recipeidentifier,"

class recipeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = ""A column that represents a recipe's unique ID""
        self.format = 'Recipe ID should be represented as an integer'
        self.examples = [40893, 40893, 44394, 85009, 85009]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or not isinstance(casted_val, int) or casted_val < 0:
            return False
        else:
            return True"
gameoutcome,"

class gameoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Outcome of a game'
        self.format = 'Boolean'
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        elif isinstance(val, int) and val in [0, 1]:
            return bool(val)
        elif isinstance(val, str) and val.lower() in ['true', 'false']:
            return val.lower() == 'true'
        else:
            raise ValueError(f'Invalid input {val} for gameoutcome')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
timeonice,"

class timeonice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time on ice'
        self.format = 'Time on ice is measured in seconds and should be represented as an integer'
        self.examples = [1504, 2011, 3598, 3696, 3539]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 9027"
playidentifier,"

class playidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Play ID of a game'
        self.format = ""Play ID is a string in the form 'YYYYMMDDHH_MMM'""
        self.examples = ['2016020045_41', '2016020045_101', '2016020045_134', '2016020045_174', '2016020045_189']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = '^\\d{10}_\\d+$'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
penaltyminutes,"

class penaltyminutes(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of penalty minutes'
        self.format = 'Penalty Minutes should be a positive integer'
        self.examples = [0, 2, 0, 0, 0]

    def super_cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of penalty minutes')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
period,"

class period(GeneralSemanticType):

    def __init__(self):
        self.description = 'Period of Game'
        self.format = 'Period should be integer values in the range 1 to 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
goals,"

class goals(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of goals'
        self.format = 'Goals should be a positive integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid number of goals')
            return num
        except Exception as e:
            raise ValueError('Invalid input: {}'.format(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
unixtimestamp,"

class unixtimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unix Timestamp'
        self.format = 'YYYY-MM-DD HH:MM:SS'
        self.examples = ['2015-05-31 07:00:00', '2015-08-16 07:00:00', '2015-06-28 07:00:00', '2015-05-17 07:00:00', '2015-06-28 07:00:00']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise ValueError('Incorrect data format, should be YYYY-MM-DD HH:MM:SS')
        elif np.isnan(val):
            return float('nan')
        else:
            timestamp = datetime.fromtimestamp(int(val) / 1000)
            return timestamp.strftime('%Y-%m-%d %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
airqualityindex,"

class airqualityindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index (AQI)'
        self.format = 'AQI as a floating point number'
        self.examples = [81.0, 118.0, 208.0, 2049.0]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
aqibucket,"

class aqibucket(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index bucket'
        self.format = 'AQI bucket is a string that represents the severity of air quality'
        self.examples = ['Good', 'Satisfactory', 'Moderate', 'Poor', 'Very Poor', 'Severe']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples or np.isnan(casted_val):
            return True
        else:
            return False"
stationidentifier,"

class stationidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Station Id'
        self.format = 'Station id should be a string of two uppercase alphabets followed by three digits'
        self.examples = ['AP001', 'DL012', 'DL011', 'AP003', 'AP004']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z]{2}\\d{3}$', casted_val):
            return True
        else:
            return False"
pollutant,"

class pollutant(GeneralSemanticType):

    def __init__(self):
        self.description = 'The concentration of a pollutant'
        self.format = 'In µg/m3'
        self.examples: list = [0.1, 0.15, 0.18, 0.1, 0.08]

    def super_cast(self, val):
        try:
            casted_val = float(val)
        except ValueError:
            raise Exception('Invalid value: Unable to convert to float')
        if math.isnan(casted_val):
            return float('nan')
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
aqi,"

class aqi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Air Quality Index'
        self.format = 'AQI should be a non-negative floating point number'
        self.examples = [70.0, 106.0, 186.0, 16.0, 1109.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            if math.isnan(val):
                return float('nan')
            else:
                return float(val)
        else:
            raise ValueError('Invalid Value. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
harmonizedsystemcode,"

class harmonizedsystemcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Harmonized System code'
        self.format = 'HS codes are 2-digit integers'
        self.examples = [2, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input for Harmonized System code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 99:
            return True
        else:
            return False"
tradevalue,"

class tradevalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value of traded goods'
        self.format = 'Trade Value should be a floating point number'
        self.examples = [0.0, 12.38, 268.6, 35.48, float('nan')]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        elif math.isnan(val):
            return float('nan')
        else:
            raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
districtname,"

class districtname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a district'
        self.format = 'Every word in the district name should start with a capital letter'
        self.examples = ['Nou Barris', 'Horta-Guinardó', 'Sant Martí', 'Sants-Montjuïc', 'Sant Andreu']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
neighborhoodname,"

class neighborhoodname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Neighborhood Name'
        self.format = 'Neighborhood name should have the first letter capitalized'
        self.examples = ['El Raval', 'El Barri Gòtic', 'La Barceloneta', 'Sant Pere, Santa Caterina i la Ribera', 'El Fort Pienc']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
districtcode,"

class districtcode(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Numeric code for a district'
        self.format: str = 'District code should be a number'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
neighborhoodcode,"

class neighborhoodcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Neighborhood code'
        self.format = 'Neighborhood code should be formatted as an integer value'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError(f'Failed to cast {val} to int.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and 0 <= casted_val < float('inf')"
transporttype,"

class transporttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'A type of transport'
        self.format = 'Transport types should be string'
        self.examples = ['Underground', 'Tram', 'Railway (FGC)', 'RENFE', 'Maritime station']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
immigrants,"

class immigrants(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of immigrants'
        self.format = 'Number of immigrants should be formatted as an integer value'
        self.examples = [10, 20, 30, 40, 50]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
emigrants,"

class emigrants(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of emigrants'
        self.format = 'Number of emigrants should be formatted as an integer value'
        self.examples = [10, 20, 30, 40, 50]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
quartile,"

class quartile(GeneralSemanticType):

    def __init__(self):
        self.description = 'A quartile number'
        self.format = 'Quartile should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        quartile = int(val)
        if 1 <= quartile <= 4:
            return quartile
        else:
            raise Exception('Invalid quartile')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3, 4]:
            return True
        else:
            return False"
genesymbol,"

class genesymbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gene Symbol, a short abbreviation for the gene name'
        self.format = 'Gene symbols are typically all uppercase'
        self.examples = ['PLEC', 'TPM1', 'RAP1GDS1', 'FHL1', 'SORBS2']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
genename,"

class genename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gene Name, the full name of the gene'
        self.format = 'Gene names are typically capitalized and may contain spaces and special characters'
        self.examples = ['NADH dehydrogenase', 'poly', 'isocitrate dehydrogenase', 'dimethylaniline monooxygenase', 'PREDICTED: peptidyl-prolyl cis-trans isomerase A-like']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
disease,"

class disease(GeneralSemanticType):

    def __init__(self):
        self.description = 'Disease Name'
        self.format = 'Disease name should be capitalized and formatted as a string'
        self.examples = ['Drug Reaction', 'Malaria', 'Allergy', 'Hypothyroidism', 'Psoriasis']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0 and casted_val.istitle():
            return True
        else:
            return False"
runs,"

class runs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of runs'
        self.format = 'Runs should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
lastupdate,"

class lastupdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time of the last update'
        self.format = ""The string should be in the format 'M/D/YYYY HH:MM'""
        self.examples = ['1/25/2020 12:00 PM', '1/31/2020 19:00', '1/31/2020 14:00', '1/30/2020 21:30', '1/30/2020 11:00']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%m/%d/%Y %H:%M')
        else:
            return datetime.strptime(str(val), '%m/%d/%Y %H:%M').strftime('%m/%d/%Y %H:%M')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%Y %H:%M')
            return True
        except ValueError:
            return False"
datetimeupdate,"

class datetimeupdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and time of the last update'
        self.format = ""Dates should be in the format of 'mm/dd/yy hh:mm'""
        self.examples = ['2/5/20 16:43', '2/5/20 13:23', '2/5/20 15:13', '2/5/20 15:03', '2/5/20 15:23']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%m/%d/%y %H:%M')
        else:
            return datetime.strptime(val, '%m/%d/%y %H:%M').strftime('%m/%d/%y %H:%M')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%y %H:%M')
            return True
        except ValueError:
            return False"
racetime,"

class racetime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time taken to complete a race'
        self.format = 'Race times should be formatted as floating point numbers, with decimal places for milliseconds'
        self.examples = [25.38, 1.43, 7.502, 11.278, 24.111]

    def super_cast(self, val):
        if val == '\\N':
            return float('nan')
        else:
            time_parts = str(val).split(':')
            total_seconds = float(time_parts[0]) * 60 + float(time_parts[1])
            return total_seconds

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and (not math.isnan(casted_val)):
            return True
        else:
            return False"
cryptocurrencyname,"

class cryptocurrencyname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a cryptocurrency'
        self.format: str = 'Name should be a string in uppercase'
        self.examples: list = ['EOS', 'BTC', 'ETH', 'XRP', 'LTC']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cryptocurrencyticker,"

class cryptocurrencyticker(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ticker symbol for a Cryptocurrency'
        self.format = 'The ticker should be in upper case and free of any numeric or special characters'
        self.examples = ['BTC', 'ETH', 'LINK', 'LTC', 'XRP']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z]+$', casted_val) and len(casted_val) <= 5:
            return True
        else:
            return False"
cryptocurrencyprice,"

class cryptocurrencyprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a cryptocurrency'
        self.format = 'Price should be formatted as a floating point number with at least 6 decimal places for precision'
        self.examples = [0.189132, 0.169826, 0.149562, 0.13111, 0.170636]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 6)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
cryptocurrencyvolume,"

class cryptocurrencyvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of the cryptocurrency traded'
        self.format = 'Volume should be formatted as a floating point number with no decimal places'
        self.examples = [0.0, 253613.75, 5582480.0, 50982439.084, 69410680685.37]

    def super_cast(self, val):
        return round(float(val), 0)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
marketcap,"

class marketcap(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market capitalization of the cryptocurrency'
        self.format = 'Market cap should be formatted as a floating point number'
        self.examples = [1470138039.16, 1010806762.25, 1141711520.45, 1167141443.01, 1128105719.72]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Unable to cast value to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        return True"
cryptocurrencymarketcap,"

class cryptocurrencymarketcap(GeneralSemanticType):

    def __init__(self):
        self.description = 'The market capitalization of a cryptocurrency'
        self.format = 'Market cap should be formatted as a floating point number with 2 decimal places'
        self.examples = [0.0, 654930710.73, 550155156.98, 500626421.88, 568361515.18]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or math.isnan(casted_val):
            return False
        return True"
cryptocurrenciesymbol,"

class cryptocurrenciesymbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Symbol of the Cryptocurrency'
        self.format = 'The symbol should be uppercase'
        self.examples = ['ETH', 'BTC', 'XRP', 'LTC', 'USDT']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha() and casted_val.isupper():
            return True
        else:
            return False"
cryptocurrencysymbol,"

class cryptocurrencysymbol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Symbol of a Cryptocurrency'
        self.format = 'The symbol of the cryptocurrency, in uppercase'
        self.examples = ['BTC', 'ETH', 'ATOM', 'ADA', 'USDT']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cryptosymbol,"

class cryptosymbol(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Symbol of a Cryptocurrency'
        self.format: str = 'Cryptocurrency symbols are usually all uppercase'
        self.examples: list = ['BTC', 'ETH', 'LTC', 'XRP', 'WBTC']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
newsdate,"

class newsdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the news article'
        self.format = ""Dates are in the following format: 'Month Day, Year'""
        self.examples = ['December 20, 2017', 'December 6, 2017', 'November 30, 2017', 'November 9, 2017', 'October 13, 2017']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%B %d, %Y')
        else:
            return datetime.strptime(str(val).strip(), '%B %d, %Y').strftime('%B %d, %Y')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%B %d, %Y')
            return True
        except ValueError:
            return False"
color,"

class color(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color variations of a clothing item'
        self.format = 'First letter of the color should be capitalized'
        self.examples = ['Blue', 'Green', 'Red', 'Black', 'Pink']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
sellprice,"

class sellprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The sell price of an entity'
        self.format = 'Sell price should be formatted as an integer'
        self.examples = [122, 35, 620, 500, 1000]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError('Invalid value. Value must be convertible to an integer.') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
milesprice,"

class milesprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price in Miles of an entity'
        self.format = 'Price should be formatted as a floating point number (in Miles units) with no decimal places'
        self.examples = [800.0, 1000.0, 2000.0, 5000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
style,"

class style(GeneralSemanticType):

    def __init__(self):
        self.description = 'Style of the entity'
        self.format = 'Style names should be title-cased strings'
        self.examples = ['Simple', 'Cute', 'Active', 'Cool', 'Gorgeous']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
catalog,"

class catalog(GeneralSemanticType):

    def __init__(self):
        self.description = 'Catalog status of the entity'
        self.format = 'title-cased string'
        self.examples = ['For Sale', 'Not For Sale']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
internalidentifier,"

class internalidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The internal ID of a poster'
        self.format = 'Internal ID should be formatted as an integer number'
        self.examples = [10814, 10425, 10401, 10590, 10382]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
uniqueentryidentifier,"

class uniqueentryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique entry ID of the entity'
        self.format = 'Unique entry ID should be a lowercase string of alphanumeric characters'
        self.examples = ['FNxEraBTeWRiCvtFu', 'mM9SXPCcGPfPJAmtm', '2qFT5iPkk8bREvpkj', 'T5CpsJi4xBSachNL5', 'S6CiB9ZvzBTMhEnDz']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^[a-zA-Z0-9]*$', casted_val):
            return True
        else:
            return False"
bells,"

class bells(GeneralSemanticType):

    def __init__(self):
        self.description = 'The currency in Animal Crossing'
        self.format = 'Bells should be integers'
        self.examples = [4980, 1245, 0, 99999999, 5000]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val < 0:
                return 'Invalid number of bells'
            else:
                return int_val
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
itemsize,"

class itemsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of a furniture item'
        self.format = ""Sizes should be strings of the form 'NxM' where N and M are integers""
        self.examples = ['1x1', '2x1', '2x2', '1x2', '2x1.5']

    def super_cast(self, val):
        match_obj = re.match('[0-9]+x[0-9]+', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid item size')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            size = casted_val.split('x')
            if len(size) == 2 and all((i.isdigit() for i in size)):
                return True
            else:
                return False
        except:
            return False"
clothingname,"

class clothingname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a clothing item in a game'
        self.format = 'All words in the clothing name should start with a capital letter'
        self.examples = ['A Tee', 'Acid-Washed Jacket', 'After-School Jacket', 'Thick-Stripes Shirt', 'Fitness Tank']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^([A-Z][a-z]*\\s*)*$', casted_val):
            return True
        else:
            return False"
catalogstatus,"

class catalogstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Catalog status of the item'
        self.format = 'Each word in the status should start with a capital letter'
        self.examples = ['For sale', 'Not for sale', 'Not in catalog']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['For Sale', 'Not For Sale', 'Not In Catalog']:
            return True
        else:
            return False"
diy,"

class diy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Whether the rug is do-it-yourself'
        self.format = ""The values should be either 'True' or 'False'""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if str(val).lower() == 'yes':
            return True
        elif str(val).lower() == 'no':
            return False
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
tag,"

class tag(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tag of an Item'
        self.format = 'Tag should be capitalized'
        self.examples = ['Dining', 'Study', 'Office', 'Kitchen Things', 'Toy']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
productvariation,"

class productvariation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Product Variation'
        self.format = 'Variation should be in title format'
        self.examples = ['Black', 'White', 'Blue', 'Red', 'Green']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
itemprice,"

class itemprice(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The price of an item in bells'
        self.format: str = 'Item price should be a non-negative floating point number'
        self.examples: list = [200.0, 500.0, 300.0, 500.0, float('nan')]

    def super_cast(self, val):
        if pd.isnull(val) or (isinstance(val, str) and val.lower() == 'nfs'):
            return float('nan')
        elif float(val) >= 0:
            return float(val)
        else:
            raise ValueError('Invalid value. Expected a non-negative number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or casted_val >= 0:
            return True
        else:
            return False"
cartransmission,"

class cartransmission(GeneralSemanticType):

    def __init__(self):
        self.description = 'Car Transmission Type'
        self.format = 'Car transmission type should be in title case'
        self.examples = ['Semi-Auto', 'Automatic', 'Manual', 'Other']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cartax,"

class cartax(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tax of a car in USD'
        self.format = 'Tax should be a positive floating point number in USD'
        self.examples = [150.0, 20.0, 30.0, 145.0, 145.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Tax cannot be negative')
            return num
        except ValueError:
            raise Exception('Invalid value. Value must be a positive number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carmpg,"

class carmpg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Miles per gallon of a car'
        self.format = 'MPG should be a positive floating point number'
        self.examples = [55.4, 64.2, 55.4, 67.3, 49.6]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                return None
            else:
                return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val > 0:
            return True
        else:
            return False"
carenginesize,"

class carenginesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Engine size of a car'
        self.format = 'A floating point number in liters'
        self.examples = [1.8, 2.0, 2.1, 4.0, 5.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Value cannot be cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
mileage,"

class mileage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mileage of a car'
        self.format = 'Mileage should be formatted as an integer'
        self.examples = [1, 5529, 18347, 38206, 214000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f'Unable to cast {val} to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tax,"

class tax(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tax on the car'
        self.format = 'Tax should be a positive floating point number'
        self.examples = [0.0, 30.0, 145.0, 580.0, 145.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise ValueError('Tax cannot be negative')
            return val
        except ValueError as ve:
            raise Exception('Invalid input to super_cast: ' + str(ve))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
mpg,"

class mpg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Miles per Gallon'
        self.format = 'Floating point number'
        self.examples = [54.3, 67.3, 67.3, 51.4, 40.9]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value. Please provide a floating point number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val > 0:
            return True
        else:
            return False"
enginesize,"

class enginesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Engine size of a car'
        self.format = 'Engine size should be formatted as a float'
        self.examples = [0.0, 2.0, 2.0, 2.0, 6.6]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError('Invalid input. Expecting a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
carfueltype,"

class carfueltype(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Car Fuel Type'
        self.format = 'Car fuel type should be in title case'
        self.examples = ['Diesel', 'Petrol', 'Electric', 'Hybrid']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
manufactureyear,"

class manufactureyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year a car was manufactured'
        self.format = 'Manufacture year should be a four-digit integer'
        self.examples = [2002, 2010, 2015, 2020]

    def super_cast(self, val):
        try:
            year = int(val)
            return year
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 1886 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
customertype,"

class customertype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of customer'
        self.format = 'Loyal customer or disloyal customer'
        self.examples = ['Loyal Customer', 'disloyal Customer', 'Loyal Customer', 'disloyal Customer', 'Loyal Customer']

    def super_cast(self, val):
        if val == 'Loyal Customer' or val == 'disloyal Customer':
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Loyal Customer', 'disloyal Customer']:
            return True
        else:
            return False"
typeoftravel,"

class typeoftravel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Travel'
        self.format = ""a string that is either 'Business travel' or 'Personal Travel'""
        self.examples = ['Business travel', 'Personal Travel', 'Business travel', 'Personal Travel', 'Business travel']

    def super_cast(self, val):
        if val in ['Business travel', 'Personal Travel']:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Business travel', 'Personal Travel']:
            return True
        else:
            return False"
flightdistance,"

class flightdistance(GeneralSemanticType):

    def __init__(self):
        self.description = 'The distance of a flight'
        self.format = 'Flight distance should be a positive floating point number'
        self.examples = [10.0, 100.0, 1000.0, 5000.0, 10000.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('nan'):
            return True
        else:
            return False"
satisfaction,"

class satisfaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'A satisfaction level'
        self.format = 'lower-cased string'
        self.examples = ['neutral or dissatisfied', 'satisfied', 'neutral or dissatisfied', 'satisfied', 'neutral or dissatisfied']

    def super_cast(self, val):
        if isinstance(val, str):
            lower_string_val = val.lower()
            if lower_string_val in ['neutral or dissatisfied', 'satisfied']:
                return lower_string_val
            else:
                raise ValueError('Invalid satisfaction')
        else:
            raise TypeError('Expected a string value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['neutral or dissatisfied', 'satisfied']:
            return True
        else:
            return False"
vehicleage,"

class vehicleage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vehicle Age'
        self.format = ""Vehicle Age should be one of '< 1 Year', '1-2 Year', '> 2 Years'""
        self.examples = ['< 1 Year', '1-2 Year', '> 2 Years']

    def super_cast(self, val):
        if isinstance(val, str):
            if val in ['< 1 Year', '1-2 Year', '> 2 Years']:
                return val
            else:
                raise ValueError('Invalid value for Vehicle Age')
        else:
            raise TypeError('Vehicle Age should be a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['< 1 Year', '1-2 Year', '> 2 Years']:
            return True
        else:
            return False"
vehicledamage,"

class vehicledamage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vehicle damage status'
        self.format = ""Boolean (1 for 'Yes', 0 for 'No')""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        val = str(val).title()
        return 1 if val == 'Yes' else 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
annualpremium,"

class annualpremium(GeneralSemanticType):

    def __init__(self):
        self.description = 'Annual premium for the insurance'
        self.format = 'Annual premium should be a non-negative floating point number'
        self.examples = [40454.0, 33536.0, 38294.0, 28619.0, 27496.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '')
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            elif val < 0:
                raise Exception('Negative annual premium')
            else:
                return val
        except ValueError:
            raise Exception('Invalid format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
policysaleschannel,"

class policysaleschannel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sales channel for the policy'
        self.format = 'Sales channel should be a positive integer'
        self.examples = [26, 26, 26, 152, 152]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) or isinstance(val, float):
            if math.isnan(val):
                return float('nan')
            elif val < 1:
                raise Exception('Invalid policy sales channel')
            else:
                return int(val)
        else:
            raise Exception('Invalid policy sales channel')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
vintage,"

class vintage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days the customer has been associated with the company'
        self.format = 'Vintage should be a positive integer'
        self.examples = [217, 183, 27, 203, 39]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        elif val < 1:
            raise Exception('Invalid vintage')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif casted_val < 1:
            raise Exception('Invalid vintage')
        else:
            return True"
stockindex,"

class stockindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stock Index'
        self.format = 'The format should be a string with no special characters'
        self.examples = ['NYA', 'N225', 'IXIC', 'GSPTSE', 'HSI']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
bookname,"

class bookname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a book'
        self.format = 'Book name should be a string'
        self.examples = ['Column Nigari Kese Sekhain', 'Python Programming', 'Blockchain, Cryptocurrency And Bitcoin', 'Product Management', 'Artificial Intelligence']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
cropname,"

class cropname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents a Crop Name'
        self.format = 'Each word of the crop name should be capitalized'
        self.examples = ['Total Foodgrains', 'Rice', 'Wheat', 'Jowar', 'Bajra']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
