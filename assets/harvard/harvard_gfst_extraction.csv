gfst_name,gfst_classes
dailycount,"class dailycount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Daily Count'
        self.format = 'Counts should be formatted as a float'
        self.examples = [0.0, 4.0, 94.0, 59.0, 93.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Invalid value for daily count. Please provide a valid float value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
symptoms,"class symptoms(GeneralSemanticType):
    def __init__(self):
        self.description = 'Symptoms'
        self.format = 'Symptoms should be formatted as a float'
        self.examples = [5885.0, 6448.0, 6392.0, 6570.0, 6564.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if casted_val < 0 or np.isinf(casted_val):
            return False
        return True"
searchvolume,"
class searchvolume(GeneralSemanticType):
    def __init__(self):
        self.description = 'Search Volume'
        self.format = 'Formatted as a float'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Value {val} cannot be casted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
totalcount,"class totalcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total count of a certain category'
        self.format = 'Count should be a non-negative integer'
        self.examples = [298820, 161187, 137633, 8746, 10]

    def super_cast(self, val):
        if pd.isna(val) or val == '' or val == 'Total':
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
studentclass,"class studentclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Class (grade level) the student is in'
        self.format = 'A single digit string representing the class'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and 1 <= int(casted_val) <= 9:
            return True
        else:
            return False"
studentage,"class studentage(GeneralSemanticType):
    def __init__(self):
        self.description = 'Student age in years'
        self.format = 'Age should be a positive integer'
        self.examples = [15, 17, 19, 21, 25]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
studentgender,"class studentgender(GeneralSemanticType):
    def __init__(self):
        self.description = ""The gender of a student""
        self.format = ""upper-cased string""
        self.examples = ['M', 'F', 'M', 'F', 'M']

    def super_cast(self, val):
        str_val = str(val).upper()
        if str_val in ['M', 'F']:
            return str_val
        else:
            raise ValueError(f'Invalid value for gender: {str_val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['M', 'F']:
            return True
        else:
            return False"
meqscore,"class meqscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Morningness–Eveningness Questionnaire (MEQ) score'
        self.format = 'MEQ score should be a floating point number'
        self.examples = [39.0, 63.0, 36.0, 61.0, 44.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 21.0 and casted_val <= 72.0:
            return True
        else:
            return False"
staisscore,"
class staisscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'STAI State-Anxiety score'
        self.format = 'STAI State-Anxiety score should be a floating point number'
        self.examples = [48.0, 46.0, 56.0, 38.0, 45.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 20 and casted_val <= 71:
            return True
        else:
            return False"
staittraitscore,"class staittraitscore(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'STAI Trait-Anxiety score'
        self.format: str = 'STAI Trait-Anxiety score should be a floating point number'
        self.examples: list = [40.0, 54.0, 56.0, 46.0, 43.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif casted_val >= 23 and casted_val <= 67:
            return True
        else:
            return False"
psqiscore,"
class psqiscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Pittsburgh Sleep Quality Index (PSQI) score'
        self.format = 'A single digit string representing the PSQI score'
        self.examples = ['5', '4', '6', '8', '7']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        try: 
            int_val = int(casted_val)
            if 0 <= int_val <= 10:
                return True
            else:
                return False
        except ValueError:
            return False"
agreement,"class agreement(GeneralSemanticType):
    def __init__(self):
        self.description = ""Agreement""
        self.format = ""In lower-case and as a string""
        self.examples = ['agree', 'disagree', 'agree', 'disagree', 'agree']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['agree', 'disagree']:
            return True
        else:
            return False"
yearsatoccupation,"class yearsatoccupation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Years at occupation of survey respondent'
        self.format = 'Years at occupation should be represented as a string'
        self.examples = ['0-6y', '>6']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid years at occupation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
familyincome,"class familyincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Family income of survey respondent'
        self.format = 'Family income should be represented as a string'
        self.examples = ['>10000', '<10000']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid family income')
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
numberofsmokers,"class numberofsmokers(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of smokers in the household'
        self.format = 'Number of smokers should be represented as a string'
        self.examples = ['1p', '2-6p']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid number of smokers'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
numberofchildren,"class numberofchildren(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of children under 5 in the household'
        self.format = 'Number of children under 5 should be represented as a string'
        self.examples = ['1person', '>=2person']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid number of children under 5'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
smokinganddrinkinghabits,"class smokinganddrinkinghabits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Smoking and drinking habits of survey respondent'
        self.format = 'Smoking and drinking habits should be represented as a string'
        self.examples = ['both', 'no', 'alcysmkn']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise Exception('Invalid smoking and drinking habits')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
eventidentifier,"class eventidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Event ID'
        self.format = 'Event ID as string'
        self.examples = ['RDWTI', 'Additional GTD Event Identified', '200006080016', '199002170002', '197304220001']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
worldregion,"
class worldregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'World Region per GTD codebook'
        self.format = 'World Region should be capitalized'
        self.examples = ['South Asia', 'Middle East & North Africa', 'Western Europe', 'North America', 'East Asia']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['South Asia', 'Middle East & North Africa', 'Western Europe', 'North America', 'East Asia']
        if casted_val in valid_values:
            return True
        else:
            return False"
weapontype,"class weapontype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of weapon used in the attack'
        self.format = 'Integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in range(1, 5):
                return int_val
            else:
                raise ValueError
        except ValueError:
            print(f""Provided value {val} cannot be casted to weapontype."")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val in range(1, 5):
            return True
        else:
            print(f""Provided value {val} is not a valid weapontype."")
            return False"
eventtype,"class eventtype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of an event""
        self.format = ""A number 1 or 2""
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
doubtterrorism,"class doubtterrorism(GeneralSemanticType):
    def __init__(self):
        self.description = ""Doubt about terrorism event""
        self.format = ""Binary integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
connectedevents,"class connectedevents(GeneralSemanticType):
    def __init__(self):
        self.description = ""Connected events""
        self.format = ""Boolean: 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
multipletypeofharmfulmechanismsexistorsuspected,"class multipletypeofharmfulmechanismsexistorsuspected(GeneralSemanticType):
    def __init__(self):
        self.description = ""Multiple types of harmful mechanisms exist or suspected""
        self.format = ""A boolean (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
poisoningagent,"class poisoningagent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Poisoning agent used in the attack'
        self.format = 'Poisoning agent should be stored as a string'
        self.examples = ['chlorine gas', 'unknown', 'acid', 'anthrax', 'cyanide']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
presenceofpoisondoubtful,"class presenceofpoisondoubtful(GeneralSemanticType):

    def __init__(self):
        self.description = ""Presence of poison in a sample""
        self.format = ""Boolean represented as an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, (int, np.integer)) and val in [0, 1]:
            return int(val)
        elif isinstance(val, str) and val.isdigit() and int(val) in [0, 1]:
            return int(val)
        else:
            raise Exception(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
suicideattack,"class suicideattack(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates whether a suicide attack occurred or not""
        self.format = ""0 or 1 represented as an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        casted_value = int(val)
        if casted_value not in [0, 1]:
            raise ValueError(f""Value {val} cannot be casted to suicideattack format."")
        return casted_value

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        return False"
poisoningoccurred,"class poisoningoccurred(GeneralSemanticType):
    def __init__(self):
        self.description = 'Whether poisoning occurred during the event'
        self.format = 'Should be a string'
        self.examples = ['1', '0', 'Unknown', 'unknown']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '0', 'Unknown', 'unknown']:
            return True
        else:
            return False"
provincecode,"class provincecode(GeneralSemanticType):

    def __init__(self):
        self.description = ""A code that represents a province""
        self.format = ""Province codes are integers ranging from 1 to 65""
        self.examples = [2, 10, 11, 12, 13]
    
    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif isinstance(val, float):
            return int(round(val, 0))
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 65:
            return True
        else:
            return False"
provincechinese,"class provincechinese(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a province in China in Chinese'
        self.format = 'Province names should be in Chinese characters'
        self.examples = ['全国', '北京市', '天津市', '河北省', '山西省']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
provinceenglish,"class provinceenglish(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a province in China in English'
        self.format = 'Province names should be in English'
        self.examples = ['Nation', 'Beijing', 'Tianjin', 'Hebei', 'Shanxi']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
totalnumber,"class totalnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total number of instances of a particular entity'
        self.format = 'Total numbers should be formatted as floating point numbers with a precision of 3 decimal points'
        self.examples = [684801.0, 5790.0, 4498.0, 70990.0, 21731.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 3)
        except ValueError:
            raise Exception(f'Cannot convert {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        return True"
healthcarefacilitycount,"class healthcarefacilitycount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Count of a particular type of healthcare facility'
        self.format = 'Counts should be formatted as floating point numbers with a precision of 3 decimal places'
        self.examples = [756.0, 6.0, 8.0, 72.0, 23.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not pd.isna(casted_val):
            return True
        else:
            return False"
studylocation,"class studylocation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Location where the study was conducted, denoted by a country code and a short identifier'
        self.format = 'Values should be strings with the country code and identifier separated by an underscore'
        self.examples = ['DE_KI', 'US_BO', 'US_CL', 'DE_FR', 'DE_MU']

    def super_cast(self, val):
        parts = str(val).split('_')
        if len(parts) != 2 or not pycountry.countries.get(alpha_2=parts[0]):
            return 'Invalid study location'
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid study location':
            return True
        else:
            return False"
patientcount,"class patientcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of patients involved in the study'
        self.format = 'Should be an integer greater than 0'
        self.examples = [59, 39, 105, 37, 17]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 1:
                raise Exception('Invalid patient count')
            return casted_val
        except ValueError:
            raise Exception('Invalid value for patient count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
machine,"class machine(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the machine used in the exercise.'
        self.format = 'Machine names should be capitalized and stored as strings.'
        self.examples = ['LEG PRESS', 'LEG EXTENSION', 'ABDUCTOR', 'ADDUCTOR', 'LOWER BACK']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
setvalue,"
class setvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'A set of exercises in the study.'
        self.format = 'Set should be represented as an integer.'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast to int"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
contractionmode,"class contractionmode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Contraction mode of the exercise.'
        self.format = ""Contraction modes should start with 'Con' followed by a numeric value and stored as strings.""
        self.examples = ['Con01', 'Con02', 'Con03', 'Con04', 'Con05']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^Con\d+$', casted_val):
            return True
        else:
            return False"
time,"class time(GeneralSemanticType):

    def __init__(self):
        self.description = 'A time value'
        self.format = 'In milliseconds as a float'
        self.examples = [1340.0, 1160.0, 1220.0, 1260.0, 1560.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return float(val)
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
relativedifference,"class relativedifference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Relative difference in time between two measurements.'
        self.format = 'Relative difference should be represented as a floating point number.'
        self.examples = [0.241, 0.154, 0.118, 0.083, 0.033]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError(""Invalid value. Expected a non-negative number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
contractionmodelevels,"class contractionmodelevels(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of contraction mode.'
        self.format = 'The contraction mode level should be represented as a string.'
        self.examples = ['Con', 'Ecc', 'Rep', 'TuT']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Con', 'Ecc', 'Rep', 'TuT']:
            return True
        else:
            return False"
outlier,"
class outlier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Possibly contains outliers""
        self.format = ""The value should be a positive integer""
        self.examples = [1, 8, 21, 16]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            elif casted_val >= 0:
                return casted_val
        except ValueError:
            raise Exception('Invalid value')
        except TypeError:
            raise Exception('Invalid type')
        except Exception as e:
            raise Exception('An error occurred during casting: {}'.format(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
normalizederror,"class normalizederror(GeneralSemanticType):
    def __init__(self):
        self.description = 'Normalized error of the smartphone.'
        self.format = 'Normalized error should be represented as a string.'
        self.examples = ['0', '6.67', '4', '20', '1.82']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^-?\d+(.\d+)?$"", casted_val):
            return True
        else:
            return False"
participantage,"class participantage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age group of the participant.'
        self.format = 'Age group should be represented as a string.'
        self.examples = ['young', 'old']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['young', 'old']:
            return True
        else:
            return False"
participantageyears,"class participantageyears(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the participant in years.'
        self.format = 'Age should be represented as an integer.'
        self.examples = [19, 31, 38, 50, 70]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return 0 <= casted_val <= float('inf')"
participantheight,"class participantheight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Height of the participant in centimeters.'
        self.format = 'Height should be represented as a floating-point number.'
        self.examples = [160.0, 166.0, 178.0, 181.0, 187.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 0 <= float_val <= float('inf'):
                return float_val
            else:
                raise ValueError('Value is not within the valid range.')
        except Exception as e:
            raise ValueError(f'Error casting value: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
participantweight,"class participantweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight of the participant.'
        self.format = 'Weight should be represented as a floating-point number.'
        self.examples = [46.0, 68.0, 77.0, 90.0, 105.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (0 <= casted_val <= float('inf')):
            raise Exception('Invalid range')"
participantgender,"class participantgender(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gender of the participant.'
        self.format = 'Gender should be represented as a string.'
        self.examples = ['m', 'f', 'm', 'f', 'm']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['m', 'f']:
            return True
        else:
            return False"
issue,"class issue(GeneralSemanticType):
    def __init__(self):
        self.description = ""Issue number""
        self.format = ""Integer""
        self.examples = [1, 2, 3, 4, 10]
        
    def super_cast(self, val):
        try:
            # Attempt to cast the value to integer
            return int(val)
        except ValueError:
            # If the value cannot be cast to integer, it is considered as invalid
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif (casted_val < 1) or (casted_val > 12):
            return False
        return True"
accessnumber,"class accessnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Access number of the review'
        self.format = ""Access number should be in the format 'CD######'""
        self.examples = ['CD011882', 'CD001275', 'CD003830', 'CD001347', 'CD003690']

    def super_cast(self, val):
        match_obj = re.match('CD[0-9]{6}', val)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('CD[0-9]{6}', casted_val):
            return True
        else:
            return False"
reviewerdecision,"
class reviewerdecision(GeneralSemanticType):

    def __init__(self):
        self.description = 'Decision of the reviewer on the review'
        self.format = 'Decision should be a string'
        self.examples = ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']

    def super_cast(self, val):
        valid_decisions = ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']
        if val in valid_decisions:
            return val
        else:
            return 'Invalid decision'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']:
            return True
        else:
            return False"
finalcommitteedecision,"class finalcommitteedecision(GeneralSemanticType):

    def __init__(self):
        self.description = ""Final Committee Decision""
        self.format = ""boolean string""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).capitalize()
        else:
            raise Exception('Invalid decision')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
conflictorerror,"class conflictorerror(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conflict or error in the review'
        self.format = 'String representation of conflict or error status'
        self.examples = ['None', 'CONFLICT', 'Error in inclusion']

    def super_cast(self, val):
        valid_values = ['None', 'CONFLICT', 'Error in inclusion']
        if val in valid_values:
            return val
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['None', 'CONFLICT', 'Error in inclusion']:
            return True
        else:
            return False"
surgeonsurveytimestamp,"class surgeonsurveytimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Timestamp for the surgeon survey'
        self.format = 'Timestamp should be represented as float'
        self.examples = [42283.43611111112, 42283.44791666666, 42283.45069444445, 42283.538194444445, 42283.54930555556]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Cannot cast to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 42283.43611111112 <= casted_val <= 42348.927777777775:
            return True
        else:
            return False"
americaninstitution,"class americaninstitution(GeneralSemanticType):
    def __init__(self):
        self.description = ""An American Institution""
        self.format = ""Boolean in numeric form""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise ValueError(f'Invalid value for americaninstitution: {val}')
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
yearsinpractice,"class yearsinpractice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of years in practice'
        self.format = 'Years in practice should be an integer'
        self.examples = [8, 10, 5, 33, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be casted to an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, int) and 1 <= casted_val <= 40:
            return True
        else:
            return False"
specialty,"class specialty(GeneralSemanticType):

    def __init__(self):
        self.description = 'Specialty of the practitioner'
        self.format = 'Specialty should be in lowercase'
        self.examples = ['neurosurgery', 'neurosurgery ', 'neurosurgery', 'pediatrics', 'neurosurgery']

    def super_cast(self, val):
        return str(val).strip().lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
subspecialty,"class subspecialty(GeneralSemanticType):
    def __init__(self):
        self.description = 'Subspecialty of the practitioner'
        self.format = 'Subspecialty should be in lowercase'
        self.examples = ['neurotrauma', 'pulmonary', 'neurophysiology (sleep)', 'critical care', 'cardiology']

    def super_cast(self, val):
        return str(val).strip().lower() if pd.notnull(val) else None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
researchtype,"class researchtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Types of research in a journal'
        self.format = ""Research type should be a string, for example: 'RW2'""
        self.examples = ['RW2', 'RW1', 'E1', 'R6', 'R16']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
paperorder,"class paperorder(GeneralSemanticType):

    def __init__(self):
        self.description = 'Order number of the paper'
        self.format = 'An integer number'
        self.examples = [17, 12, 24, 10, 27]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. It should be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
fieldofstudy,"class fieldofstudy(GeneralSemanticType):
    def __init__(self):
        self.description = 'Field of study for the paper'
        self.format = 'A string'
        self.examples = ['medicine', 'nursing', 'physical therapy', 'pharmacy', 'healthcare']

    def super_cast(self, val):
        if pd.isna(val):
            return None
        return str(val).strip()
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
researchsubject,"class researchsubject(GeneralSemanticType):

    def __init__(self):
        self.description = 'Subject of the research'
        self.format = 'The research subject should be a string'
        self.examples = ['student', 'graduate student', 'resident', 'university, college', 'clinical instructors']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
researchcategory,"class researchcategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Category of the research'
        self.format = 'string'
        self.examples = ['perception survey', 'course evaluation', 'paper review', 'assessment tool', 'licensing examination content evaluation']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
researchmethod,"class researchmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Method used in the research'
        self.format = 'The research method should be a string'
        self.examples = ['quantitative', 'quantitative, cross sectional, factor analysis', 'quantitative, descriptive', 'quantitative, cohort study, ANOVA, t-test', 'quantitative, cross sectional, correlation']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or np.isnan(casted_val):
            return True
        else:
            return False"
authorcount,"class authorcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of authors for the paper'
        self.format = 'Number of authors should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
countrycount,"class countrycount(GeneralSemanticType):
    def __init__(self):
        self.description = ""The count of different countries""
        self.format = ""Count should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 50]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            if math.isnan(val):
                return float('nan')
            else:
                raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
confirmedcases,"class confirmedcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of confirmed COVID-19 cases'
        self.format = 'The number of cases should be stored as integers'
        self.examples = [1, 50, 100, 500, 1000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return ""Invalid data""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
recoveredcases,"class recoveredcases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of recovered COVID-19 cases'
        self.format = 'The number of cases should be stored as integers'
        self.examples = [1, 20, 50, 100, 500]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be converted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
deathcases,"class deathcases(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Number of COVID-19 related deaths'
        self.format = 'The number of cases should be stored as integers'
        self.examples = [1, 10, 50, 100, 500]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast the value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(""Invalid number of deaths. It cannot be less than 0"")
        elif isinstance(casted_val, int):
            return True
        else:
            raise Exception(""Invalid input. Expected an integer."")"
questionnumber,"class questionnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Identifier for a question'
        self.format = 'Only alphanumeric characters and underscores are allowed'
        self.examples = ['Q1', 'Q1_4_TEXT', 'Q2', 'Q3', 'Q4']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile('^[A-Za-z0-9_]*$')
        if pattern.match(casted_val):
            return True
        else:
            return False"
datatype,"class datatype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Data Type'
        self.format = 'Type should be a lowercase string'
        self.examples = ['numeric', 'factor', 'cs_id', 'ts_id']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
options,"class options(GeneralSemanticType):

    def __init__(self):
        self.description = 'Options for answering a question'
        self.format = 'Only alphanumeric characters, commas, and curly braces are allowed'
        self.examples = ['{1, Male}...', 'None', '{1, 17}...', '{1, Asian/Asian British}...', '{1, Medicine}...']

    def super_cast(self, val):
        if pd.isna(val):
            return 'None'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9,{} ]+$"", casted_val):
            return True
        else:
            return False"
subjectnumber,"class subjectnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'A unique identifier for each subject in the study'
        self.format = 'Subject numbers are positive integers'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val.is_integer() and float_val > 0:
                return float_val
            else:
                raise Exception()
        except:
            raise ValueError('Value cannot be casted to a positive integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val.is_integer() and casted_val > 0:
            return True
        else:
            return False"
ageinyears,"class ageinyears(GeneralSemanticType):

    def __init__(self):
        self.description = 'The age of the subject in years'
        self.format = 'The age is stored as a string'
        self.examples = ['22', '20', '27', '23', '21']

    def super_cast(self, val):
        try:
            return str(int(val))
        except ValueError:
            raise Exception(f""Cannot convert {val} to string representation of an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and int(casted_val) >= 0:
            return True
        else:
            return False"
educationinyears,"class educationinyears(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of years of education a subject has completed'
        self.format = 'The education level is stored as an integer'
        self.examples = [14, 13, 16, 15, 12]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
incomeinchf,"class incomeinchf(GeneralSemanticType):

    def __init__(self):
        self.description = 'The income of the subject'
        self.format = 'Income should be positive, represented as a floating point number'
        self.examples = [1000.0, 1500.0, 2000.0, 2500.0, 3000.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError
        except ValueError:
            raise Exception(""Invalid value provided. Value must be a positive number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
spendinginchf,"class spendinginchf(GeneralSemanticType):

    def __init__(self):
        self.description = 'The spending of the subject in Swiss Francs'
        self.format = 'Spending should be positive, represented as a floating point number'
        self.examples = [500.0, 800.0, 1200.0, 1500.0, 2000.0]
    
    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception('Unable to cast to float')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
handednesscode,"class handednesscode(GeneralSemanticType):
    def __init__(self):
        self.description = ""The handedness of the subject""
        self.format = ""Handedness as a string""
        self.examples = ['1', '2', '3']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '3']:
            return True
        else:
            return False"
groupdosefkcode,"class groupdosefkcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'The group or dose that the subject belongs to, coded as 0 for did not participate, 1 for Negative Symptoms, 2 for Control, and 3 for Hypomania'
        self.format = 'The group/dose is stored as a string'
        self.examples = ['0', '1', '2', '3']

    def super_cast(self, val):
        return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1', '2', '3']:
            return True
        else:
            return False"
negativesymptomsscore,"class negativesymptomsscore(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The score for negative symptoms in the study'
        self.format: str = 'Score should be positive, represented as a floating point number'
        self.examples: list = [1.0, 1.5, 2.0, 2.5, 3.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                raise ValueError(""Value is not a positive number"")
            return float_val
        except ValueError as e:
            print(f""Value Error: {e}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
hypomaniascore,"class hypomaniascore(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score for hypomania symptoms in the study'
        self.format = 'Score should be positive, represented as a floating point number'
        self.examples = [7.0, 8.0, 9.0, 10.0, 11.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return 'Invalid Value, cannot be casted to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val == 'Invalid Value, cannot be casted to float':
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
lossaversion,"class lossaversion(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score for loss aversion in the study'
        self.format = 'Score should be positive, represented as a floating point number'
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError(""Value must be positive"")
            return casted_val
        except (ValueError, TypeError) as e:
            raise ValueError(f""Unable to cast value: {val} to float. {str(e)}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        return True"
riskaversion,"class riskaversion(GeneralSemanticType):
    def __init__(self):
        self.description = 'The score for risk aversion in the study'
        self.format = 'Score should be positive, represented as a floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                raise Exception(""Invalid value, it should be a positive number"")
            return float_val
        except ValueError:
            raise Exception(""Invalid value, it should be a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
consistency,"class consistency(GeneralSemanticType):

    def __init__(self):
        self.description = 'The score for consistency in the study'
        self.format = 'Score should be positive, represented as a floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        float_val = float(val)
        if float_val < 0:
            raise ValueError('Score must be positive')
        else:
            return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
physicalactivitystatus,"class physicalactivitystatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Physical Activity Status'
        self.format = 'Status should be a string'
        self.examples = ['Sedentary', 'Standing', 'LIPA', 'MVPA', '100']

    def super_cast(self, val):
        if val in ['Sedentary', 'Standing', 'LIPA', 'MVPA']:
            return val
        else:
            try:
                return str(int(val))
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Sedentary', 'Standing', 'LIPA', 'MVPA'] or casted_val.isdigit():
            return True
        else:
            return False"
schooltype,"class schooltype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of the School""
        self.format = ""Integer values ranging from 1 to 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 7:
                return casted_val
            else:
                raise Exception(""Value is not within the valid range of 1 to 7."")
        except ValueError:
            raise Exception(""Value can't be casted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 7:
            return True
        else:
            return False"
studyyear,"class studyyear(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of study'
        self.format = 'Year of study should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            return num
        except ValueError:
            return ""Invalid value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 5:
            return False
        else:
            return True"
levelofstudy,"class levelofstudy(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Level of study'
        self.format: str = 'Level of study should be an integer'
        self.examples: list = ['1', '2', '1', '2', '1']

    def super_cast(self, val):
        try:
            return str(int(val))
        except ValueError:
            raise Exception(""Invalid input. Expected an integer value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
studentscount,"class studentscount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of students'
        self.format = 'Number of students should be an integer between 8 and 40'
        self.examples = [8, 10, 20, 30, 40]

    def super_cast(self, val):
        try:
            num = int(val)
            return num
        except ValueError:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 8 <= casted_val <= 40:
            return True
        else:
            return False"
classroomlength,"class classroomlength(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of classroom'
        self.format = 'Length of classroom should be a floating point number'
        self.examples = [630.0, 700.0, 800.0, 900.0, 933.8]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input, expected a floatable string or number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 630.0 or casted_val > 933.8:
            raise Exception('Invalid classroom length')
        return True"
classroomwidth,"class classroomwidth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Width of classroom'
        self.format = 'Width of classroom should be a floating point number'
        self.examples = [650.0, 700.0, 730.0, 760.0, 761.3]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value for classroom width')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 650.0 <= casted_val <= 761.3:
            return True
        else:
            return False"
furthestdistance,"class furthestdistance(GeneralSemanticType):
    def __init__(self):
        self.description = 'Furthest distance'
        self.format = 'Furthest distance should be a floating point number'
        self.examples = [400.0, 500.0, 600.0, 700.0, 762.7]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except Exception as e:
            raise ValueError(""Invalid input for furthest distance. Expected a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 400.0 or casted_val > 762.7:
            return False
        return True"
targetonwhiteboard,"class targetonwhiteboard(GeneralSemanticType):
    def __init__(self):
        self.description = 'Smallest target on whiteboard'
        self.format = 'A floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 3.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.5 <= casted_val <= 3.0:
            return True
        else:
            return False"
neartarget,"class neartarget(GeneralSemanticType):

    def __init__(self):
        self.description = 'Small near target'
        self.format = 'Small near target should be a floating point number'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0.1 or num > 0.5:
                raise ValueError('Invalid small near target')
            return num
        except Exception as e:
            return str(e)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.1 <= casted_val <= 0.5:
            return True
        return False"
vademand,"class vademand(GeneralSemanticType):
    def __init__(self):
        self.description = 'Distant VA demand'
        self.format = 'Distant VA demand should be a floating point number'
        self.examples = [-0.56, -0.3, 0.0, 0.3, 0.52]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < -0.56 or num > 0.52:
                raise ValueError
            else:
                return num
        except ValueError:
            return 'Invalid distant VA demand'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -0.56 <= casted_val <= 0.52:
            return True
        else:
            return False"
nearvademand,"class nearvademand(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'Near VA demand'
        self.format = 'Near VA demand should be a floating point number'
        self.examples = [0.09, 0.2, 0.3, 0.4, 0.44]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Invalid near VA demand')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.09 <= casted_val <= 0.44:
            return True
        else:
            return False
"
familyplanningmethodtype,"class familyplanningmethodtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of family planning method'
        self.format = 'Family planning method type should be a float in the range 0.0-3.0'
        self.examples = [0.0, 1.0, 2.0, 3.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if 0.0 <= casted_val <= 3.0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid family planning method type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 3.0:
            return True
        else:
            return False"
qualityscore,"class qualityscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality score of family planning counseling'
        self.format = 'Quality score should be a floating point number in the range 0-100'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if 0 <= casted_val <= 100:
                return casted_val
            else:
                raise ValueError(""Value out of range"")
        except ValueError:
            raise ValueError(""Casting Error: Input value cannot be casted to float or is out of range"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            raise ValueError(""Invalid quality score"")
        else:
            return True"
caste,"class caste(GeneralSemanticType):
    def __init__(self):
        self.description = 'Caste category of the individual'
        self.format = 'Caste category should be a float in the range 1.0 - 3.0'
        self.examples = [1.0, 2.0, 3.0, 1.0, 2.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 3.0:
            return True
        else:
            return False"
providerdesignation,"class providerdesignation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Designation of the provider'
        self.format = 'Provider designation should be a float in the range 1.0-2.0'
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [1, 2]:
            return float(val)
        else:
            raise Exception('Invalid provider designation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
qualityscorecategory,"class qualityscorecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category of quality score'
        self.format = 'Quality score category should be a numeric value in the range 1-3'
        self.examples = [1.0, 2.0, 3.0, 2.0, 1.0]

    def super_cast(self, val):
        try:
            num_val = float(val)
            return num_val
        except ValueError:
            raise Exception('Invalid quality score category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 3:
            return True
        else:
            return False"
binarycode,"class binarycode(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Binary code'
        self.format: str = 'integer'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
timeinseconds,"class timeinseconds(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time measurement in seconds'
        self.format = 'Time should be represented as a floating point number with at least 4 decimal places'
        self.examples = [0.8841, 0.9674, 0.9167, 1.0361, 1.012305]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                float_val = float(val)
                return round(float_val, 4)
            except ValueError:
                raise Exception('Invalid input')
        elif isinstance(val, (int, float)):
            return round(val, 4)
        else:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
heightincentimeters,"class heightincentimeters(GeneralSemanticType):
    def __init__(self):
        self.description = ""A height measurement""
        self.format = ""In centimeters, as a floating point number with at least 4 decimal places""
        self.examples = [36.6675, 30.3825, 26.1525, 26.2775, 30.38]

    def super_cast(self, val):
        return round(float(val), 4)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
forceinnewtons,"class forceinnewtons(GeneralSemanticType):

    def __init__(self):
        self.description = 'Force measurement in Newtons'
        self.format = 'Force should be represented as a floating point number with at least 4 decimal places'
        self.examples = [0.7587, 0.7455, 0.7725, 0.7925, 0.794]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 4)
        raise ValueError(""Invalid input type for super_cast"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        return False"
velocityinmeterspersecond,"class velocityinmeterspersecond(GeneralSemanticType):
    def __init__(self):
        self.description = 'Velocity measurement'
        self.format = 'Velocity should be represented as a floating point number with at least 5 decimal places in m/s'
        self.examples = [0.2994, 0.30575, 0.27285, 0.28585, 0.3361]

    def super_cast(self, val):
        try:
            return round(float(val), 5)
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
experimentcondition,"class experimentcondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experiment conditions'
        self.format = 'Values are strings representing different experiment conditions'
        self.examples = ['Condition', 'Delay (ms)', 'Subject 1', 'Subject 2', 'Subject 3']

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return str(val)
        elif isinstance(val, str) and val in self.examples:
            return val
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
numberofresidues,"class numberofresidues(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Residues in a Protein'
        self.format = 'Number of residues should be a non-negative integer'
        self.examples = [204, 491, 81, 135, 235]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                return None
            else:
                return num
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or not isinstance(casted_val, int):
            return False
        else:
            return True"
molecularweight,"class molecularweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Molecular Weight of a Protein'
        self.format = 'Molecular weight should be a non-negative floating point number'
        self.examples = [24109.774999999943, 54191.56999999985, 8670.649999999998, 14792.360000000002, 26402.31999999995]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid molecular weight')
            return num
        except ValueError:
            return ""Invalid Input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
projectstage,"class projectstage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Project stages in medical article publishing'
        self.format = 'Lowercase string representing different stages in publishing a medical article.'
        self.examples = ['whole presentation', 'instructions', 'conciseness', 'criteria for case selection', 'information provided']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
multipleprojectstages,"class multipleprojectstages(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates if there are multiple project stages""
        self.format = ""lower-case string""
        self.examples = ['whole presentation', 'project stage 1', 'project stage 2', 'project stage 3', 'project stage 4']

    def super_cast(self, val):
        if pd.isna(val):
            return 'whole presentation'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['whole presentation', 'project stage 1', 'project stage 2', 'project stage 3', 'project stage 4']:
            return True
        else:
            return False"
injury,"class injury(GeneralSemanticType):

    def __init__(self):
        self.description = 'Injury count'
        self.format = 'Count should be an integer'
        self.examples = [1, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
urbanorrural,"class urbanorrural(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether a location is urban or rural""
        self.format = ""A boolean""
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        if isinstance(val, int) and val in [1, 2]:
            return bool(val - 1)
        else:
            raise Exception('Invalid value for urban or rural')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
householdmembers,"class householdmembers(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of household members'
        self.format = 'Count should be an integer'
        self.examples = [6, 8, 7, 4, 3]
        
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1:
            return True
        else:
            return False"
datetest,"class datetest(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the test'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['20754-01-01', '20759-01-01', '20754-01-01', '20754-01-01', '20754-01-01']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        elif math.isnan(val):
            return np.nan
        else:
            return datetime.strptime(str(int(val)), '%Y%m%d').strftime('%Y-%m-%d')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == np.nan:
            return False
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False
"
vehicles,"class vehicles(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of vehicle""
        self.format = ""String representing vehicle type""
        self.examples = ['None', 'Moto only', 'Car only', 'Both']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
positivenegativevalues,"class positivenegativevalues(GeneralSemanticType):

    def __init__(self):
        self.description = 'Positive and Negative Values'
        self.format = 'Positive and Negative Values should be integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                return 0
            else:
                return val
        except ValueError:
            return ""Invalid value, it must be an integer""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
cptype,"class cptype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Cerebral Palsy Type'
        self.format = 'Cerebral Palsy Type should be represented as 1 for type1, 2 for type2, 3 for type3'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        if val not in [1, 2, 3]:
            raise Exception('Invalid value for Cerebral Palsy Type')
        return int(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
proteinresidues,"class proteinresidues(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of residues in a protein'
        self.format = 'Number of residues should be a positive integer'
        self.examples = [480, 196, 570, 342, 278]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
proteinweight,"class proteinweight(GeneralSemanticType):
    def __init__(self):
        self.description = 'Molecular weight of a protein'
        self.format = 'Molecular weight should be a positive floating point number, in Daltons'
        self.examples = [56098.91, 22657.23, 66458.1, 39840.12, 32150.52]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            raise Exception(""Unable to cast value to float: "" + str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
timestamp,"class timestamp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Timestamp'
        self.format = ""Timestamps should be stored as strings in the form 'MM/DD/YYYY HH:MM:SS'""
        self.examples = ['08/04/2021 11:12:05', '08/04/2021 11:27:22', '08/04/2021 13:53:45', '08/04/2021 20:56:59', '08/05/2021 01:51:12']

    def super_cast(self, val):
        if isinstance(val, float):
            if math.isnan(val):
                return 'NaN'
            elif val >= 0:
                # Excel timestamp
                return (datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(val) - 2) + pd.Timedelta(days=int(val) % 1)).strftime('%m/%d/%Y %H:%M:%S')
        elif isinstance(val, str):
            # string timestamp
            return datetime.strptime(str(val), '%m/%d/%Y %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}', casted_val) or casted_val == 'NaN':
            return True
        else:
            return False"
multipleskilllevels,"class multipleskilllevels(GeneralSemanticType):

    def __init__(self):
        self.description = 'Responses to a self-assessed digital skill proficiency questionnaire'
        self.format = 'Responses should be one of the five options listed in self.valid_values'
        self.examples = ['Skillful', 'Depends on the task .', 'Usually need help ', 'Very skillful', 'Not confident at all']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid skill level response'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
lecturewatchingdevice,"class lecturewatchingdevice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The device used to watch a lecture'
        self.format = 'Device names should be strings'
        self.examples = ['Smartphone', 'Personal computer', 'Personal computer, Smartphone', 'Smartphone, Personal tablet/pad ', 'Personal tablet/pad ']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
lecturewatchlocation,"class lecturewatchlocation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Location where a lecture was watched""
        self.format = ""Location names should be strings""
        self.examples = ['Home', 'Home, Campus', 'Campus', 'Home, cafe', 'Home, Campus, cafe']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str) and len(casted_val) > 0"
facilitytype,"class facilitytype(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'Type of medical facility'
        self.format = 'The facility type should be a string and one of the valid values'
        self.examples = ['General Hospital', 'Polyclinic', 'Teaching Hospital', 'Regional Hospital']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
hivstatus,"class hivstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'HIV status of a patient'
        self.format = 'HIV status should be a string and one of the valid values'
        self.examples = ['No', 'Yes', 'Don’t know']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
ptbeptb,"class ptbeptb(GeneralSemanticType):

    def __init__(self):
        self.description = 'PTB or EPTB'
        self.format = 'Value should be a string and one of the valid values'
        self.examples = ['PTB', 'EPTB']

    def super_cast(self, val):
        casted_val = str(val).strip()
        if casted_val in ['PTB', 'EPTB']:
            return casted_val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['PTB', 'EPTB']:
            return True
        else:
            return False"
tmtoutcome,"class tmtoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Treatment outcome of a patient'
        self.format = 'Treatment outcome should be a string and one of the valid values'
        self.examples = ['Treatment completed', 'Cured', 'Died', 'Treatment failed', 'Not evaluated']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Treatment completed', 'Cured', 'Died', 'Treatment failed', 'Not evaluated']:
            return True
        else:
            return False"
eptbsite,"class eptbsite(GeneralSemanticType):

    def __init__(self):
        self.description = 'Site of EPTB'
        self.format = 'string'
        self.examples = ['Disseminated', 'Pleural', 'Spine', 'CNS', 'Lymph nodes']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
journaltitle,"class journaltitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a Journal'
        self.format = ""Each word's first letter should be capitalized and the rest should be lowercase""
        self.examples = ['Vascular Health and Risk Management', 'Journal of Clinical Laboratory Analysis', 'LGBT Health', 'Fibrogenesis and Tissue Repair', 'Journal of Lasers in Medical Sciences']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        for word in words:
            if not word.istitle():
                return False
        return True"
percentile,"class percentile(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percentile'
        self.format = 'Should be a positive float'
        self.examples = [450.8, 535.5, 565.671, 590.862, 734.9]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception('Invalid percentile')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= float('inf')"
scholarlyoutput,"
class scholarlyoutput(GeneralSemanticType):
    def __init__(self):
        self.description = 'Scholarly Output of a Journal'
        self.format = 'Scholarly output should be an integer'
        self.examples = [130, 16, 71, 100, 200]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('NaN')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
percentcited,"class percentcited(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percent Cited of a Journal'
        self.format = 'Percent cited should be an integer'
        self.examples = [70, 100, 50, 25, 75]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
ranks,"class ranks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rank of a Journal'
        self.format = 'Rank should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast the value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
publisher,"class publisher(GeneralSemanticType):

    def __init__(self):
        self.description = 'Publisher of a Journal'
        self.format = ""Each word's first letter should be capitalized and the rest should be lowercase""
        self.examples = ['Elsevier', 'Springer Nature', 'Taylor & Francis', 'Wiley-Blackwell', 'Wolters Kluwer Health']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            words = casted_val.split()
            for word in words:
                if not word.istitle():
                    return False
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
journaltype,"class journaltype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of a Journal'
        self.format = 'Journal type should be a string'
        self.examples = ['Journal', 'Type']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise ValueError('Invalid value for journaltype')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
openaccess,"class openaccess(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates whether a resource is open access or not""
        self.format = ""a boolean string""
        self.examples = ['YES', 'NO', 'YES', 'NO', 'YES']

    def super_cast(self, val):
        val = str(val).upper()
        if val in ['YES', 'NO']:
            return val
        else:
            raise ValueError('Invalid value for openaccess')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['YES', 'NO']:
            return True
        else:
            return False"
pop,"class pop(GeneralSemanticType):
    def __init__(self):
        self.description = 'Population'
        self.format = 'Population values should be strings describing cell populations'
        self.examples = ['CD14+CD16-', 'CD14+CD16DIM', 'CD14DIMCD16+', 'CD11C+CD16-']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
feat,"class feat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Feature'
        self.format = 'Feature values should be strings describing cell features'
        self.examples = ['CCR5', 'CX3CR1', 'CD64', 'CD32', 'CD40']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
obsmea,"class obsmea(GeneralSemanticType):
    def __init__(self):
        self.description = 'Observed Measurement'
        self.format = 'Expected format is a string: ""MEDIAN INTENSITY""'
        self.examples = ['MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY']

    def super_cast(self, val):
        if str(val) == 'MEDIAN INTENSITY':
            return 'MEDIAN INTENSITY'
        else:
            raise Exception('Invalid Observed Measurement')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'MEDIAN INTENSITY':
            return True
        else:
            return False"
obsvalue,"class obsvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Observed Value'
        self.format = 'Observed Value should be a number'
        self.examples = [10.6, 670.0, 1179.0, 15545.0, 8.82]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isfinite(casted_val):
            return True
        else:
            return False"
sequencenumber,"class sequencenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sequence Number'
        self.format = 'Sequence number should be a positive integer'
        self.examples = [1, 2, 3, 5, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
survivaldaysaftertransplantation,"class survivaldaysaftertransplantation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of survival days after kidney transplantation'
        self.format = 'Should be an integer number'
        self.examples = [73, 46, 9, 17, 20]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid number of survival days')
        except ValueError:
            raise ValueError('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
donor,"class donor(GeneralSemanticType):

    def __init__(self):
        self.description = 'The status of the donor'
        self.format = ""One of 'deceased', 'living' or 'non-heart beating'""
        self.examples = ['deceased', 'living', 'non-heart beating', 'deceased', 'living']

    def super_cast(self, val):
        lower_string_val = str(val).lower()
        if lower_string_val in ['deceased', 'living', 'non-heart beating']:
            return lower_string_val
        else:
            raise Exception('Invalid donor status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['deceased', 'living', 'non-heart beating']:
            return True
        else:
            return False"
retrasplant,"class retrasplant(GeneralSemanticType):

    def __init__(self):
        self.description = ""Status of retrasplant""
        self.format = ""In lower-case and as a string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
abocompatibility,"class abocompatibility(GeneralSemanticType):

    def __init__(self):
        self.description = 'The ABO compatibility status'
        self.format = ""Should be either 'Identical', 'Compatible' or 'Incompatible'""
        self.examples = ['Identical', 'Compatible', 'Incompatible', 'Identical', 'Compatible']

    def super_cast(self, val):
        if val in ['Identical', 'Compatible', 'Incompatible']:
            return val
        else:
            return 'Invalid'
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Identical', 'Compatible', 'Incompatible']:
            return True
        else:
            return False"
bun,"class bun(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Blood Urea Nitrogen level'
        self.format = 'Should be a floating-point number'
        self.examples = [85.8, 85.0, 13.0, 48.0, 60.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid BUN level')
        except ValueError:
            raise ValueError('Invalid BUN level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
creatinine,"class creatinine(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Creatinine level'
        self.format = 'Should be a floating-point number'
        self.examples = [6.7, 13.8, 1.5, 1.3, 2.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid Creatinine level')
        except ValueError:
            raise ValueError('Invalid input, not a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
glucose,"class glucose(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Glucose level'
        self.format = 'Should be a floating-point number'
        self.examples = [117.0, 95.0, 233.0, 88.0, 100.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
        except ValueError:
            raise Exception('Invalid input, cannot convert to float')

        if float_val < 0:
            raise Exception('Invalid Glucose level')
        else:
            return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        return True"
protein,"class protein(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Protein level'
        self.format = 'Should be a floating-point number'
        self.examples = [5.7, 7.0, 5.6, 6.5, 6.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Protein level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
sgot,"class sgot(GeneralSemanticType):
    def __init__(self):
        self.description = 'The Serum Glutamic-Oxaloacetic Transaminase level'
        self.format = 'Should be a floating-point number'
        self.examples = [8.0, 223.0, 36.0, 21.0, 25.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid SGOT level')
        except ValueError:
            raise ValueError('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
sgpt,"class sgpt(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Serum Glutamic-Pyruvic Transaminase level'
        self.format = 'Floating-point number'
        self.examples = [11.0, 316.0, 94.0, 12.0, 15.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                return 'Invalid'
        except Exception:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
totalbilirubin,"class totalbilirubin(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Total Bilirubin level'
        self.format = 'Should be a floating-point number'
        self.examples = [0.6, 1.1, 0.2, 0.4, 0.5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid Total Bilirubin level')
        except (TypeError, ValueError):
            raise ValueError('Invalid input. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False
"
sodium,"class sodium(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Sodium level'
        self.format = 'Should be a floating-point number'
        self.examples = [135.0, 138.0, 142.0, 138.0, 140.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError('Invalid Sodium level')
        except ValueError:
            print('Invalid input. It should be a float number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
potassium,"class potassium(GeneralSemanticType):
    def __init__(self):
        self.description = 'The Potassium level'
        self.format = 'Should be a floating-point number'
        self.examples = [6.1, 5.9, 4.4, 4.9, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Potassium level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
chloride,"class chloride(GeneralSemanticType):

    def __init__(self):
        self.description = ""The Chloride level""
        self.format = ""Should be a floating-point number""
        self.examples = [19.0, 99.0, 114.0, 99.0, 100.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise Exception(""Invalid Chloride level"")
        except ValueError:
            raise Exception(""Invalid input, expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
wbc,"class wbc(GeneralSemanticType):

    def __init__(self):
        self.description = 'The White Blood Cell count'
        self.format = 'Should be a floating-point number'
        self.examples = [825.0, 5.2, 84.0, 519.0, 500.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid WBC count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
hematocrit,"class hematocrit(GeneralSemanticType):

    def __init__(self):
        self.description = 'The Hematocrit level'
        self.format = 'Should be a floating-point number'
        self.examples = [19.2, 28.2, 24.2, 29.0, 30.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Hematocrit level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not np.isnan(casted_val):
            return True
        else:
            return False"
platelet,"class platelet(GeneralSemanticType):
    def __init__(self):
        self.description = 'The Platelet count'
        self.format = 'Should be a floating-point number'
        self.examples = [274.0, 159.0, 112.0, 164.0, 150.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val >= 0:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid Platelet count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
totaldeath,"class totaldeath(GeneralSemanticType):
    def __init__(self):
        self.description = 'The total number of child deaths'
        self.format = 'Integer values'
        self.examples = [6000, 5000, 4000, 3000, 2000]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
injurydeath,"class injurydeath(GeneralSemanticType):
    def __init__(self):
        self.description = ""The number of injury deaths among children""
        self.format = ""Injury deaths should be integer values""
        self.examples = [2500, 2000, 1500, 1000, 500]

    def super_cast(self, val):
        # Check if value is already integer or can be converted to integer
        if pd.notna(val) and isinstance(val, (int, float, str)) and float(val).is_integer():
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if casted value is in valid range
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
injurypercent,"class injurypercent(GeneralSemanticType):
    def __init__(self):
        self.description = 'The percentage of injury deaths among total deaths'
        self.format = 'Percentage of injury deaths should be a floating point number'
        self.examples = [40.0, 30.0, 20.0, 10.0, 5.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 0 <= casted_val <= 100"
deathrate,"class deathrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Death rate per 100,000 population'
        self.format = 'Death rate should be a floating point number'
        self.examples = [30.0, 25.0, 20.0, 15.0, 10.0]

    def super_cast(self, val):
        num = float(val) if pd.notna(val) else float('nan')
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val >= 0 and not math.isnan(casted_val)"
code,"class code(GeneralSemanticType):
    def __init__(self):
        self.description = 'A code that represents a unique identifier'
        self.format = 'Alphanumeric and lower-case string'
        self.examples = ['code', 'fadi04', 'minv1', 'bair', 'band']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(""^[a-zA-Z0-9_]*$"", casted_val):
            return True
        else:
            return False"
constant,"class constant(GeneralSemanticType):

    def __init__(self):
        self.description = 'A constant value'
        self.format = 'Constant should always be 1'
        self.examples = [1, 1, 1, 1, 1]

    def super_cast(self, val):
        try:
            val = int(val)
            if val == 1:
                return val
            else:
                raise ValueError('Invalid constant')
        except (ValueError, TypeError):
            raise ValueError('Invalid constant')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 1:
            return True
        else:
            return False"
heartrate,"class heartrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Heartrate in beats per minute'
        self.format = 'Heartrate should be a positive integer'
        self.examples = [60, 72, 84, 96, 108]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError()
            else:
                return casted_val
        except ValueError:
            print(f""Invalid value {val}. Heartrate should be a positive integer."")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
caloriecount,"class caloriecount(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Amount of calories burnt'
        self.format: str = 'Calorie count should be a positive floating point number'
        self.examples: list = [0.925449377, 0.369343757, 0.313061296, 0.431494582, 0.943021295]
        
    def super_cast(self, val):
        try:
            casted_val = round(float(val), 9)
            if casted_val < 0:
                raise ValueError(f'Invalid value: {casted_val}. Calorie count must be a positive value.')
            return casted_val
        except Exception as e:
            raise ValueError(f'Unable to cast value: {val}. Reason: {str(e)}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float) or casted_val < 0:
            return False
        return True"
stepcount,"class stepcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of steps taken'
        self.format = 'Step count should be a positive floating point number'
        self.examples = [16.78922122, 67.0915257, 67.0915257, 67.0915257, 67.0915257]

    def super_cast(self, val):
        try:
            return round(float(val), 8)
        except ValueError:
            raise Exception(""Invalid value for step count"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
distancecovered,"class distancecovered(GeneralSemanticType):
    def __init__(self):
        self.description = 'Distance covered'
        self.format = 'Distance should be a positive floating point number'
        self.examples = [14.38036272, 56.94511067, 56.94511067, 56.94511067, 56.94511067]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 8)
            return float_val
        except ValueError:
            raise Exception(""Cannot cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (0 <= casted_val <= float('inf')):
            raise Exception(""Value out of valid range"")
        else:
            return True"
activitylevel,"class activitylevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of activity'
        self.format = 'Should be a string'
        self.examples = ['1.Sedentary', '0.Sleep', '2.Light', '3.Moderate', '4.Vigorous']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1.Sedentary', '0.Sleep', '2.Light', '3.Moderate', '4.Vigorous']:
            return True
        else:
            return False"
cityname,"class cityname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a City'
        self.format = 'City names should be formatted as strings with first letter capitalized'
        self.examples = ['Brasília', 'Fortaleza', 'Campo Grande', 'Manaus', 'São Paulo', 'Aarau', 'Erlinsbach (AG)', 'Zürich', 'Basel', 'Bern']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
idsequence,"class idsequence(GeneralSemanticType):

    def __init__(self):
        self.description = 'An ID sequence'
        self.format = 'ID sequence should be formatted as integers'
        self.examples = [20, 209, 1260, 110, 95]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for casting"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
responsetype,"class responsetype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Response types'
        self.format = ""Response types should be either 'sim', 'não' or 'nunca'""
        self.examples = ['sim', 'não', 'nunca']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['sim', 'não', 'nunca']:
            return str_val
        else:
            raise Exception(""Invalid value. Should be either 'sim', 'não' or 'nunca'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['sim', 'não', 'nunca']:
            return True
        else:
            return False"
socioeconomiclevel,"class socioeconomiclevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Socioeconomic level'
        self.format = ""Socioeconomic levels should be either 'A-B', 'C' or 'D-E'""
        self.examples = ['A-B', 'C', 'D-E']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A-B', 'C', 'D-E']:
            return True
        else:
            return False"
typenum,"class typenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'A type number from 1 to 3'
        self.format = 'Integer'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 3:
            return int_val
        else:
            return 'Invalid type number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
uniqueidentifier,"class uniqueidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique identifier for an entity'
        self.format = 'Integer'
        self.examples = [1561447201011, 1540609202011, 1750408027011, 1740382051021, 1820675204011]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value must be castable to an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
socialstatus,"class socialstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Social Status from 1 to 3'
        self.format = 'Integer between 1 and 3 inclusive'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 3:
                return int_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val is not None and 1 <= casted_val <= 3"
hospitaltype,"class hospitaltype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Hospital Type'
        self.format = 'Hospital types should be stored as strings'
        self.examples = [""Children's Hospital"", 'General Hospital', 'Specialized Hospital', 'Polyclinic']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [""Children's Hospital"", 'General Hospital', 'Specialized Hospital', 'Polyclinic']:
            return True
        else:
            return False"
registrationdate,"class registrationdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Registration date in Julian format'
        self.format = 'Dates should be integers'
        self.examples = [18400, 18437, 18561, 18324, 18969]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
patientgender,"class patientgender(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Gender of the Patient'
        self.format: str = 'Gender should be stored as strings'
        self.examples: list = ['Male', 'Female', 'Missing']

    def super_cast(self, val):
        casted_val = str(val).strip()
        if casted_val in ['Male', 'Female', 'Missing']:
            return casted_val
        else:
            return 'Missing'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Male', 'Female', 'Missing']:
            return True
        else:
            return False"
patienthivstatus,"class patienthivstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""HIV status of a patient""
        self.format = ""Yes, No, or Unknown""
        self.examples = ['Yes', 'No', 'Unknown', 'Yes', 'No']

    def super_cast(self, val):
        val = str(val).strip()
        if val in ['Yes', 'No']:
            return val
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No', 'Unknown']:
            return True
        else:
            return False
"
sputumresult,"class sputumresult(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sputum Test Result'
        self.format = 'Sputum results should be stored as strings'
        self.examples = ['Not Available', 'Negative', '1+', '2+', '3+']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Not Available', 'Negative', '1+', '2+', '3+']:
            return True
        else:
            return False"
xraydone,"class xraydone(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether an X-ray was done or not""
        self.format = ""Yes, No, or Don't know""
        self.examples = ['Yes', 'No', ""Don't know"", 'Yes', 'No']

    def super_cast(self, val):
        val = str(val).strip()
        if val not in ['Yes', 'No']:
            return ""Don't know""
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No', ""Don't know""]:
            return True
        else:
            return False"
xrayresult,"class xrayresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'X-Ray Result'
        self.format = 'X-Ray results should be stored as strings'
        self.examples = ['Suggestive of TB', 'Other Abnormalities', 'Suggestive of TB', 'Other Abnormalities', 'Suggestive of TB']

    def super_cast(self, val):
        return str(val).strip() if not pd.isna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if type(casted_val) == str:
            return True
        else:
            return False"
treatmentoutcome,"class treatmentoutcome(GeneralSemanticType):
    def __init__(self):
        self.description = 'Treatment Outcome'
        self.format = 'Treatment Outcome should be stored as strings'
        self.examples = ['Treatment completed', 'Cured', 'Died', 'Missing', 'Treatment failed']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
clinical,"class clinical(GeneralSemanticType):

    def __init__(self):
        self.description = ""Clinical binary value""
        self.format = ""Boolean""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
sizeg,"class sizeg(GeneralSemanticType):
    def __init__(self):
        self.description = ""Size group of a lesion""
        self.format = ""Should be an integer""
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
familynumber,"class familynumber(GeneralSemanticType):
    def __init__(self):
        self.description = ""Family number in the GIFT G18 families""
        self.format = ""Family number should be an integer within the range of 1 to 90""
        self.examples = [1, 22, 43, 69, 90]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 1 <= casted_val <= 90:
            return True
        else:
            return False"
sirefather,"class sirefather(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identification code for the sire'
        self.format = 'Identification code should be an alphanumeric string of length 10'
        self.examples = ['00076FABAC', '00076DE7DA', '000771F541', '00076DB4A3', '00076FA8BB']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 10 and val.isalnum():
            return val
        else:
            raise Exception('Invalid sirefather code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 10 and casted_val.isalnum():
            return True
        else:
            return False"
dammother,"class dammother(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identification code for the dam'
        self.format = 'Identification code should be an alphanumeric string of length 10'
        self.examples = ['0007720C30', '0007722A74', '00076DB545', '00076E0D2B', '000771F3E8']

    def super_cast(self, val):
        if len(val) != 10 or not val.isalnum():
            raise Exception('Invalid dammother code')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) != 10 or not casted_val.isalnum():
            return False
        return True"
dateofeggcollection,"class dateofeggcollection(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of egg collection'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['2020-01-01', '2020-02-02', '2020-03-03', '2020-04-04', '2020-05-05']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                datetime_obj = datetime.strptime(val, '%Y-%m-%d')
                return datetime_obj
            except ValueError:
                return None
        elif math.isnan(val):
            return float('nan')
        else:
            return pd.to_datetime(val, format='%Y-%m-%d', errors='coerce')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, datetime) and 43849 <= casted_val.toordinal() <= 44028:
            return True
        else:
            return False"
dateoffrycollection,"class dateoffrycollection(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date of fry collection'
        self.format = 'Date should be in the format YYYY-MM-DD'
        self.examples = ['2020-01-01', '2020-02-02', '2020-03-03', '2020-04-04', '2020-05-05']

    def super_cast(self, val):
        if pd.isnull(val):
            return pd.NaT
        if isinstance(val, str):
            return pd.to_datetime(val, format='%Y-%m-%d', errors='coerce')
        if isinstance(val, (int, float)):
            if math.isnan(val):
                return pd.NaT
            else:
                return pd.to_datetime(str(int(val)), format='%Y%m%d', errors='coerce')
        else:
            return pd.NaT

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        if isinstance(casted_val, pd.Timestamp):
            return self.valid_range[0] <= casted_val.year <= self.valid_range[1]
        else:
            return False"
ittglucosemmoll,"class ittglucosemmoll(GeneralSemanticType):

    def __init__(self):
        self.description = 'Intravenous glucose tolerance test (IVGTT) glucose values'
        self.format = ""Values should be either time intervals in the format 'Time (min)' or numeric values representing glucose concentration""
        self.examples = ['Group', 'Time (min)', '0', '30', '60']

    def super_cast(self, val):
        if isinstance(val, str) and re.match('Time \\(\\w+\\)', val):
            return val
        elif isinstance(val, (int, float)):
            return str(val)
        else:
            raise ValueError('Invalid value for ittglucosemmoll')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('Time \\(\\w+\\)', casted_val):
            return True
        elif isinstance(casted_val, str) and casted_val.isdigit():
            return True
        else:
            return False"
glucosemeasurement,"class glucosemeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Glucose concentration in blood'
        self.format = 'Glucose concentration should be a floating point number'
        self.examples = [10.0455, 6.771, 4.7175, 5.2725, 9.324]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str) and val.lower() == 'hfd':
            return float('nan')
        else:
            try:
                return float(val)
            except:
                raise ValueError('Invalid value for glucose measurement')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
topics,"class topics(GeneralSemanticType):

    def __init__(self):
        self.description = 'Topic of discussion in nutrition-sensitive project'
        self.format = 'Topics should be strings representing various aspects of the project'
        self.examples = ['Nutrition/nutrition education/nutrition knowledge and attitudes', 'Kitchen gardening', '(Women) empowerment', 'Poultry keeping', 'Community cohesion']

    def super_cast(self, val):
        return str(val).lower().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val in self.examples:
            return True
        else:
            return False"
mentionfrequency,"class mentionfrequency(GeneralSemanticType):

    def __init__(self):
        self.description = ""Frequency of mentions of a statement""
        self.format = ""Frequency should be an integer represented by the number of 'I' in the string""
        self.examples = ['I', 'II', 'III', 'IIII', 'IIIII']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return 'I' * len(str(val).replace('(', '').replace(')', ''))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif len(casted_val) < 1 or len(casted_val) > float('inf'):
            return False
        else:
            return True"
distance,"class distance(GeneralSemanticType):
    def __init__(self):
        self.description = ""Distance in general context""
        self.format = ""distance should be formatted as a floating point number""
        self.examples = [1.0, 13.43, 32.05, 135.57, 340.76]

    def super_cast(self, val):
        try:
            casted_val = float(val)
        except ValueError:
            raise Exception(""Could not cast the value to a float"")
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise Exception(""Casted value is not a float"")
        if casted_val < 0:
            raise Exception(""Distance cannot be negative"")
        return True"
indexnumber,"class indexnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'A simple index number'
        self.format = 'Index numbers should be formatted as a floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
yesnoindicator,"class yesnoindicator(GeneralSemanticType):

    def __init__(self):
        self.description = ""Yes/No Indicator""
        self.format = ""Yes or No""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        val = str(val)
        if val.upper() == 'Y':
            return 'Yes'
        elif val.upper() == 'N':
            return 'No'
        else:
            raise ValueError('Invalid input for Yes/No Indicator')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
projectname,"class projectname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a project'
        self.format = 'The name of the project should be a string'
        self.examples = ['Puente del Ebro S.A.', 'Cedinsa Eix del Llobregat Concesionaria de la Generalitat de Catalunya S.A.', 'Madrid 404 Sociedad Concesionaria S.A.', 'Carretera Palma-Manacor sociedad concesionaria del Consell Insular de Mallorca, S.A.', 'Autovía de los Viñedos, S.A.']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
bodyofwater,"class bodyofwater(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a body of water'
        self.format = 'The name of the body of water should be capitalized'
        self.examples = ['Koiya Beel Kaima Beel', 'Rajghori Beel', 'Dhola Pakna Jalmahal', 'Basker Beel o Jolsuker Beel']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
yeartext,"
class yeartext(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year text'
        self.format = 'Year text should be a string'
        self.examples = ['2010-11', '2011-12', '2012-13', '2013-14', '2014-15']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[0-9]{4}-[0-9]{2}$"", casted_val):
            return True
        else:
            return False"
yearcount,"class yearcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year count'
        self.format = 'Year count should be a floating point number'
        self.examples = [164.424, 197.63, 3.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except Exception as e:
            print(f""Error: {e}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
rotation,"class rotation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rotation number for the student'
        self.format = 'Rotation should be an integer between 1 and 9'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 9:
            return True
        else:
            return False"
completedtasks,"class completedtasks(GeneralSemanticType):

    def __init__(self):
        self.description = ""Completed tasks status""
        self.format = ""In lower-case and as a string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        val = str(val).lower()
        if val not in ['yes', 'no']:
            raise Exception('Invalid value')
        return 'yes' if val == 'yes' else 'no'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
completionsquantity,"class completionsquantity(GeneralSemanticType):

    def __init__(self):
        self.description = 'The quantity of completed tasks per student'
        self.format = 'The quantity of completions per student should be a non-negative float'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid quantity of completions')
            return num
        except ValueError:
            raise Exception('Cannot cast {} to float'.format(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
publicationidentifier,"class publicationidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Publication ID'
        self.format = 'Publication ID must be a 5 digit integer'
        self.examples = [58421, 78077, 61466, 86981, 54062]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 50000 <= casted_val <= 90000:
            return True
        else:
            return False"
gendercategory,"class gendercategory(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = ""A binary representation of gender""
        self.format = ""An integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
marriagestatus,"class marriagestatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""Marriage status of a person""
        self.format = ""0 if unmarried, 1 if married""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
medinc,"class medinc(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value indicating medical income status""
        self.format = ""A binary value, either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise ValueError(""Invalid value. Expected 0 or 1."")
        except (ValueError, TypeError):
            raise ValueError(""Invalid value. Expected a value that can be converted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
occat,"class occupationcategory(GeneralSemanticType):
    def __init__(self):
        self.description = ""Occupation Category""
        self.format = ""Integer""
        self.examples = [0, 1, 2, 3, 0]

    def super_cast(self, val):
        if np.isnan(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3:
            return True
        else:
            return False"
selfrisk,"class selfrisk(GeneralSemanticType):

    def __init__(self):
        self.description = 'Self Risk'
        self.format = 'Self Risk must be an integer'
        self.examples = [1, 2, 1, 1, 1]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [0, 1, 2]:
            return True
        else:
            return False"
lessoneyrhiv,"class lessoneyrhiv(GeneralSemanticType):
    def __init__(self):
        self.description = ""HIV status in less than one year""
        self.format = ""integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, (str, int, float)):
            try:
                return int(val)
            except ValueError:
                raise Exception(""Invalid value. Value must be a number."")
        else:
            raise Exception(""Invalid type. Value must be either a string, integer or float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
lessoneyrhep,"class lessoneyrhep(GeneralSemanticType):

    def __init__(self):
        self.description = ""Boolean representation""
        self.format = ""Numeric (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]
        
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
lessoneyrtb,"class lessoneyrtb(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean semantic type""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0,1]:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError(""Invalid value. Input should be 0 or 1."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False
"
cholesterollevel,"class cholesterollevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cholesterol level in the human body'
        self.format = 'Cholesterol level should be a floating point number'
        self.examples: list = [50.0, 100.0, 150.0, 200.0, 250.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Unable to cast value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
glucoselevel,"class glucoselevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Glucose level in the human body'
        self.format = 'Glucose level should be a floating point number'
        self.examples: list = [50.0, 70.0, 90.0, 110.0, 130.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return ""invalid data""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
inflammationlevel,"class inflammationlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Inflammation level in the human body'
        self.format = 'Inflammation level should be a floating point number'
        self.examples: list = [0.01, 0.1, 0.5, 1.0, 2.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
bodymassindex,"class bodymassindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Body Mass Index category'
        self.format = 'BMI category should be an integer'
        self.examples = [0, 1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Cannot cast {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2]:
            return True
        else:
            return False"
menopausestatus,"class menopausestatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""Menopause status""
        self.format = ""Binary integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val not in [0, 1]:
                raise ValueError(""Invalid value for Menopause status. Expected 0 or 1."")
            return casted_val
        except (ValueError, TypeError):
            raise ValueError(""Invalid value for Menopause status. Expected 0 or 1."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
yesnocondition,"class yesnocondition(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary condition represented by 'Yes' or 'No'""
        self.format = ""Capitalized string""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        if isinstance(val, str) and val.lower() in ['yes', 'no']:
            return val.capitalize()
        else:
            raise Exception(""Invalid input to super_cast"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
iief5score,"class iief5score(GeneralSemanticType):

    def __init__(self):
        self.description = 'International Index of Erectile Function (IIEF-5) score'
        self.format = 'IIEF-5 score should be an integer between 5 and 25'
        self.examples = [5, 10, 15, 20, 25]

    def super_cast(self, val):
        try:
            num = int(val)
            if 5 <= num <= 25:
                return num
            else:
                raise ValueError('Invalid IIEF-5 score')
        except ValueError:
            raise Exception(""Invalid input. Value should be an integer between 5 and 25."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and 5 <= casted_val <= 25"
edseverity,"class edseverity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Erectile Dysfunction (ED) severity'
        self.format = 'Capitalization should be consistent, with only the first letter of each word capitalized'
        self.examples = ['No Erectile Dysfunction', 'Mild Erectile Dysfunction', 'Mild To Moderate Erectile Dysfunction', 'Moderate Erectile Dysfunction', 'Severe Erectile Dysfunction']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['No Erectile Dysfunction', 'Mild Erectile Dysfunction', 'Mild To Moderate Erectile Dysfunction', 'Moderate Erectile Dysfunction', 'Severe Erectile Dysfunction']
        if casted_val in valid_values:
            return True
        else:
            return False"
edstatus,"class edstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Erectile Dysfunction (ED) status'
        self.format = 'string with only the first letter of each word capitalized'
        self.examples = ['No ED', 'Erectile Dysfunction', 'No ED', 'Erectile Dysfunction', 'No ED']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['No ED', 'Erectile Dysfunction']:
            return True
        else:
            return False"
recordnumber,"class recordnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Record number'
        self.format = 'Record Number should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid record number')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (casted_val >= 1 and casted_val <= 31):
            raise Exception('Invalid record number')
        return True"
measurementtype,"class measurementtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of measurement'
        self.format = ""Measurement type should be a string ('Zeta' or 'Surface Zeta')""
        self.examples = ['Zeta', 'Surface Zeta', 'Zeta', 'Zeta', 'Zeta']

    def super_cast(self, val):
        if val not in ['Zeta', 'Surface Zeta']:
            raise Exception('Invalid measurement type')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Zeta', 'Surface Zeta']:
            return True
        else:
            return False"
datetimeclass,"class datetimeclass(GeneralSemanticType):
    def __init__(self):
        self.description = ""Datetime""
        self.format = ""In the format 'Weekday, Month Day, Year Hour:Minute:Second AM/PM'""
        self.examples = ['Wednesday, February 17, 2016 3:57:50 PM', 'Wednesday, February 17, 2016 4:00:25 PM', 'Wednesday, February 17, 2016 4:02:37 PM', 'Wednesday, February 17, 2016 4:04:31 PM', 'Wednesday, February 17, 2016 4:06:26 PM']

    def super_cast(self, val):
        if isinstance(val, float):
            try:
                datetime_obj = datetime.fromordinal(int(val) + datetime(1900, 1, 1).toordinal() - 2)
                return datetime_obj.strftime('%A, %B %d, %Y %I:%M:%S %p')
            except Exception as e:
                print(f'Error occurred while casting value: {val}, Error: {str(e)}')
                return None
        else:
            try:
                date_time_obj = datetime.strptime(val, '%A, %B %d, %Y %I:%M:%S %p')
                return date_time_obj.strftime('%A, %B %d, %Y %I:%M:%S %p')
            except Exception as e:
                print(f'Error occurred while casting value: {val}, Error: {str(e)}')
                return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
temperaturecelsius,"class temperaturecelsius(GeneralSemanticType):
    def __init__(self):
        self.description = 'Temperature in Celsius'
        self.format = 'Temperature should be a floating point number in Celsius'
        self.examples = [25.0, 25.1, 25.0, 24.9, 25.0]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                val = float(val)
            except ValueError:
                raise Exception('The value cannot be converted to float.')
        elif not isinstance(val, (int, float)):
            raise Exception('The value must be a number.')
        return round(val, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 24.9 or casted_val > 25.1:
            raise Exception('Invalid temperature.')
        return True"
potentialmv,"class potentialmv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Potential in millivolts'
        self.format = 'Potential should be a floating point number in millivolts'
        self.examples = [-0.0237, -0.0497, -0.00496, -0.043, 10.3]

    def super_cast(self, val):
        try:
            num = round(float(val), 4)
            return num
        except ValueError:
            raise Exception('Invalid potential')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -46.4 <= casted_val <= 10.3:
            return True
        else:
            return False"
conductivitymscm,"class conductivitymscm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conductivity in mS/cm'
        self.format = 'Conductivity should be a floating point number in mS/cm'
        self.examples = [0.137, 0.149, 0.148, 0.143, 0.126]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 3)
        except ValueError:
            raise Exception('Invalid conductivity')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.126 <= casted_val <= 0.149:
            return True
        else:
            return False"
countratekcps,"class countratekcps(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count rate in kcps'
        self.format = 'Count rate should be a floating point number in kcps'
        self.examples = [524879.3, 540480.9, 507199.6, 503655.6, 15864.9]

    def super_cast(self, val):
        num = float(val)
        if num < 15864.9 or num > 540480.9:
            raise Exception('Invalid count rate')
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            return 15864.9 <= casted_val <= 540480.9
        except Exception:
            return False"
sjogrenssyndrome,"class sjogrenssyndrome(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""Classification of Sjögren's Syndrome""
        self.format = ""Values are strings and only the first letter of each word is capitalized""
        self.examples = ['Non-SS', 'Primary SS', 'Secondary SS']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Non-SS', 'Primary SS', 'Secondary SS']:
            return True
        else:
            return False"
eyecondition,"class eyecondition(GeneralSemanticType):
    def __init__(self):
        self.description = ""Group of eye conditions""
        self.format = ""Values are strings and in all capital letters""
        self.examples = ['SS', 'GVHD', 'GO', 'CG', 'BAK']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
st,"class st(GeneralSemanticType):

    def __init__(self):
        self.description = ""Schirmer's test result""
        self.format = ""A floating point number""
        self.examples = [13.0, 13.0, 25.0, 40.0, 28.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or math.isnan(casted_val):
            return False
        return True"
cfs,"class cfs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Corneal fluorescein staining score'
        self.format = 'Floating point number'
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value {val}, could not be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not math.isnan(casted_val):
            return True
        else:
            return False"
tfbut,"class tfbut(GeneralSemanticType):
    def __init__(self):
        self.description = 'Tear film breakup time'
        self.format = 'Tear film breakup time should be a floating point number'
        self.examples = [10.0, 5.0, 5.0, 13.0, 10.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value. Expected a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
osdi,"class osdi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ocular Surface Disease Index'
        self.format = 'Ocular Surface Disease Index should be a floating point number'
        self.examples = [21.0, 8.0, 30.0, 3.0, 25.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Invalid input value. Expected a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False
"
comorbidcount,"
class comorbidcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of comorbidities'
        self.format = 'Number of comorbidities should be a whole number'
        self.examples = [16.0, 16.0, 14.0, 16.0, 9.0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid':
            return False
        else:
            return True"
ckd,"class ckd(GeneralSemanticType):

    def __init__(self):
        self.description = ""Chronic Kidney Disease status""
        self.format = ""binary integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        num = int(val)
        if num in [0, 1]:
            return num
        else:
            raise Exception('Invalid CKD value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
mortality,"class mortality(GeneralSemanticType):
    def __init__(self):
        self.description = ""Mortality status""
        self.format = ""Boolean (0 for alive, 1 for dead)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise Exception('Invalid mortality value')
        except Exception as e:
            print(f'Error: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
critcare,"
class critcare(GeneralSemanticType):
    def __init__(self):
        self.description = ""Critical care requirement status""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                raise ValueError(""Invalid input for critical care status."")
        elif isinstance(val, int):
            if val in [0, 1]:
                return val
            else:
                raise ValueError(""Invalid input for critical care status."")
        else:
            raise TypeError(""Invalid type for critical care status. Expected str or int."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
akiscore,"
class akiscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Highest Acute Kidney Injury (AKI) score'
        self.format = 'AKI score should be a whole number between 0 and 3'
        self.examples = [0.0, 0.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        num = int(val)
        if 0 <= num <= 3:
            return num
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3:
            return True
        else:
            return False"
advertisementtype,"class advertisementtype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of advertisement in use""
        self.format = ""Advertisement type should be a string""
        self.examples = ['TAKE-UP OF:', 'HOTLINE', 'CONSULTATION', 'PROCEDURE']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
postcardgroup,"class postcardgroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Grouping category for postcards'
        self.format = 'Postcard group should be a string'
        self.examples = ['Money v control', 'CONTROL', '3.7576697690451564', '1.1787389963805353', '5.2999656002751978']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
groupdata,"class groupdata(GeneralSemanticType):
    def __init__(self):
        self.description = 'Data associated with a particular group'
        self.format = 'Group data should be a string'
        self.examples = ['Information v control', '1.2246938546230759', '0.69070342877341828', '1.6734006734006737', 'COMPENSATION ONLY']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
challengetype,"class challengetype(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Type of challenge in use'
        self.format = 'Challenge type should be a string'
        self.examples = ['Challenge v control', 'INFORMATION ONLY', '0.01', '0.60313960666725464', '2.0183299389002034']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
compensation,"class compensation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Compensation details'
        self.format = 'Compensation should be a string'
        self.examples = ['COMPENSATION AND INFORMATION', '24', '27', '24', '2.4590163934426229E-2']

    def super_cast(self, val):
        # Since all values need to be cast to strings, we can use the built-in str() function
        return str(val)

    def validate(self, val):
        # The only validation necessary is to check if the value is a string or not
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str)"
challenge,"class challenge(GeneralSemanticType):
    def __init__(self):
        self.description = ""Challenge details""
        self.format = ""A string""
        self.examples = ['CHALLENGE ONLY', 'All Info', '-4.9999999999999996E-6', '18', '16']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
compensationchallenge,"class compensationchallenge(GeneralSemanticType):

    def __init__(self):
        self.description = 'Compensation and challenge details'
        self.format = 'Compensation and challenge should be a string'
        self.examples = ['COMPENSATION AND CHALLENGE', 'All Challenge', '-7.4999999999999997E-3', '25', '23']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
area,"class area(GeneralSemanticType):

    def __init__(self):
        self.description = ""Area of a place""
        self.format = ""In square kilometers as float""
        self.examples = [886.47, 1259.89, 323.3, 908.32, 437.55]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            float_val = float(val)
            # Convert hectares to square kilometers
            if float_val > 10000:
                return round(float_val / 10000, 2)
            # Convert square cm to square kilometers
            elif float_val < 1:
                return round(float_val / 1e10, 2)
            else:
                return round(float_val, 2)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
roadlength,"class roadlength(GeneralSemanticType):
    def __init__(self):
        self.description = 'Length of the roads in a location'
        self.format = 'Road length should be formatted as a floating point number in kilometers'
        self.examples = [244.0, 248.0, 138.0, 334.0, 178.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Unable to cast the value to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
coastlinelength,"class coastlinelength(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of the coastline of a location'
        self.format = 'Coastline length should be formatted as a floating point number in kilometers'
        self.examples = [17.447, 23.225, float('nan'), 0.0, float('inf')]

    def super_cast(self, val):
        if val is None or pd.isna(val):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not pd.isna(casted_val):
            return True
        else:
            return False"
tsunamiheight,"class tsunamiheight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average height of Tsunami in a location'
        self.format = 'Tsunami height should be formatted as a floating point number in meters'
        self.examples = [0.0, 16.90, 13.14]

    def super_cast(self, val):
        if isinstance(val, str) and self._is_number(val):
            return round(float(val), 2)
        elif isinstance(val, (int, float)):
            return round(val, 2)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False

    def _is_number(self, s):
        try:
            float(s)
            return True
        except ValueError:
            return False"
binary,"
class binary(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary variable""
        self.format = ""Binary variable represented as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
populationdensity,"class populationdensity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Density of population in a location'
        self.format = 'Population density should be formatted as a floating point number in persons per square kilometer'
        self.examples = [336.55737, 47.170784, 126.003716]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid value for population density"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
crimeprop,"class crimeprop(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proportion of crime in a location'
        self.format = 'Proportion of crime should be formatted as a floating point number with 4 decimal places'
        self.examples = [0.0099, 0.0038, 0.0056]

    def super_cast(self, val):
        try:
            return round(float(val), 4)
        except ValueError:
            raise Exception(""Input value cannot be converted to a floating point number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
deathprop,"class deathprop(GeneralSemanticType):
    def __init__(self):
        self.description = 'Proportion of deaths in a location'
        self.format = 'Proportion of deaths should be formatted as a floating point number with four decimal places'
        self.examples = [0.0085, 0.0136, 0.0125, 0.0097, 0.0108]

    def super_cast(self, val):
        return round(float(val), 4)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
employmentprop,"class employmentprop(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proportion of employment in a location'
        self.format = 'Proportion of employment should be formatted as a floating point number'
        self.examples = [0.00012401625, 0.010297829, 0.0073888605]

    def super_cast(self, val):
        try:
            return round(float(val), 4)
        except Exception as e:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not np.nan and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
householdprop,"class householdprop(GeneralSemanticType):
    def __init__(self):
        self.description = 'Proportion of single households in a location'
        self.format = 'Proportion of single households should be formatted as a floating point number'
        self.examples = [0.3763087, 0.26632577, 0.26965252]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 2)
            return casted_val
        except Exception as e:
            raise Exception(""Unable to cast value: "", e)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
bloodglucoselevel,"class bloodglucoselevel(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Blood glucose level'
        self.format: str = 'Blood glucose level should be a floating point number with up to 16 decimal places'
        self.examples: list = [0, 5, 15]

    def super_cast(self, val):
        try:
            return '{:.16f}'.format(float(val))
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            float_val = float(casted_val)
            if 0 <= float_val <= float('inf'):
                return True
            else:
                return False
        except ValueError:
            return False"
diettype,"class diettype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of diet'
        self.format = ""Diet type should be 'HFD' or a floating point number with up to 16 decimal places""
        self.examples = ['HFD', '6.2715000000000005', '14.874000000000001', '24.142500000000002', '25.252500000000001']

    def super_cast(self, val):
        if val == 'HFD':
            return 'HFD'
        else:
            try:
                return '{:.16f}'.format(float(val))
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'HFD' or isinstance(casted_val, float):
            return True
        else:
            return False"
surveynumericalresponse,"class surveynumericalresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survey numerical response'
        self.format = 'Survey numerical responses are stored as integers'
        self.examples = [1, 2, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(1, 7):
                return casted_val
            else:
                raise ValueError('Invalid value.')
        except ValueError:
            raise ValueError('Invalid value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 7):
            return True
        else:
            return False"
contactidentifier,"class contactidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Contact ID'
        self.format = 'Contact ID must be a string of 5 digits followed by a hyphen, 4 digits, a hyphen and then 1 digit'
        self.examples = ['001027-0001-1', '001027-0012-2', '001027-0005-3', '001027-0006-9', '001027-0007-6']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('^\\d{5}-\\d{4}-\\d$', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid contact ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^\\d{5}-\\d{4}-\\d$', casted_val):
            return True
        else:
            return False"
indexidentifier,"class indexidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index ID'
        self.format = 'Index ID must be a string of 5 digits followed by a hyphen, 4 digits, a hyphen and then 1 digit'
        self.examples = ['001026-0001-6', '001026-0002-8', '001026-0003-6', '001026-0004-7', '001026-0005-8']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('^\\d{5}-\\d{4}-\\d$', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid index ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        match_obj = re.match('^\\d{5}-\\d{4}-\\d$', casted_val)
        if match_obj:
            return True
        else:
            return False"
healthunits,"class healthunits(GeneralSemanticType):
    def __init__(self):
        self.description = 'Health Units'
        self.format = 'Health Units should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 14:
            return True
        else:
            return False"
tbtype,"class tbtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'TB Type'
        self.format = ""TB Type must be a string that is one of the 3 pre-defined categories""
        self.examples = ['Pulmonar', 'MDR', 'Extrapulmonar']

    def super_cast(self, val):
        types = ['Pulmonar', 'MDR', 'Extrapulmonar']
        if val in types:
            return val
        else:
            raise Exception('Invalid TB Type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
procedurecompletion,"class procedurecompletion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Completion of a procedure'
        self.format = 'Procedure completion should be formatted as an integer (0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 0 or val == 1:
            return int(val)
        else:
            return 'Invalid procedure completion value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (casted_val == 0 or casted_val == 1):
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
telomere,"
class telomere(GeneralSemanticType):

    def __init__(self):
        self.description = 'Telomere length'
        self.format = 'Telomere length should be a floating point number rounded to 6 decimal places'
        self.examples = [1.148992, 1.480093, 1.488749, 1.356673, 0.972653]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
snappe2,"class snappe2(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'SNAPPE-II Score' 
        self.format: str = 'SNAPPE-II Score should be a floating point number rounded to one decimal place' 
        self.examples: list = [25.0, 41.0, 68.0, 44.0, 9.0]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
birthweight,"class birthweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weight at birth'
        self.format = 'Birth weight should be an integer in grams'
        self.examples = [670, 700, 600, 750, 495]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError(""Invalid value. Birth weight cannot be negative."")
            return casted_val
        except ValueError as e:
            raise ValueError(""Could not cast value to integer. "" + str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                raise ValueError(""Invalid value. Birth weight should be in the range [0, inf]."")
        except ValueError as e:
            raise ValueError(""Invalid value. "" + str(e))"
yesno,"class yesno(GeneralSemanticType):

    def __init__(self):
        self.description = 'Yes or No represented as 1 or 0'
        self.format = 'Should be either 1 or 0'
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise Exception('Invalid input')
        except ValueError:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
specimen,"class specimen(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'Specimen count'
        self.format = 'Specimen count should be an integer'
        self.examples = [1, 4, 5, 9, 10]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
gestageweek,"class gestageweek(GeneralSemanticType):
    def __init__(self):
        self.description = 'Gestational age in weeks'
        self.format = 'Gestational age should be a floating point number rounded to 2 decimal places'
        self.examples = [27.29, 26.14, 27.215, 28.0, 29.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(f'Cannot cast value {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
blocknumber,"class blocknumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The block number in a sequence of blocks'
        self.format = 'Block numbers are represented as floating point numbers'
        self.examples = [2.0, 4.0, 8.0, 10.0, 12.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if math.isnan(casted_val):
                raise ValueError(""Not a number"")
            return casted_val
        except (ValueError, TypeError):
            raise Exception(""Invalid value. Expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val == float('inf'):
            return False
        return True"
coursesection,"class coursesection(GeneralSemanticType):

    def __init__(self):
        self.description = 'Different sections of a course'
        self.format = 'Course sections are represented as strings'
        self.examples = ['SET', 'Online', 'CD', 'SET', 'Online']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
courseorganizationrating,"class courseorganizationrating(GeneralSemanticType):
    def __init__(self):
        self.description = ""Rating of course organization""
        self.format = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples = [1.0, 2.5, 3.0, 4.5, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
        except ValueError:
            return float('nan')
        return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif 0 <= casted_val <= 5:
            return True
        else:
            return False
"
eventsequencingrating,"class eventsequencingrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of sequencing of events/coordination of events'
        self.format = 'Ratings are represented as floating point numbers between 0 and 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= 5:
            return True
        else:
            return False"
examrating,"class examrating(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Rating of exams/quizzes'
        self.format: str = 'Floating point numbers between 0 and 5'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)) or (isinstance(val, str) and val.replace('.','',1).isdigit()):
            float_val = float(val)
            if 0 <= float_val <= 5:
                return float_val
            else:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif 0 <= casted_val <= 5:
            return True
        else:
            return False"
lecturecontentrating,"class lecturecontentrating(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Rating of lecture content organization'
        self.format: str = 'Ratings are represented as floating point numbers between 0 and 5'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            # Convert to float and handle nan
            float_val = float(val)
            return float_val if not math.isnan(float_val) else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if (casted_val >= 0 and casted_val <= 5) or math.isnan(casted_val):
            return True
        else:
            return False"
teachingmodalitiesrating,"class teachingmodalitiesrating(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Rating of specific teaching modalities'
        self.format: str = 'Ratings are represented as floating point numbers between 0 and 5'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 5:
            return True
        else:
            return False"
coursecommunicationrating,"class coursecommunicationrating(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Rating of course communication'
        self.format: str = 'Ratings are represented as floating point numbers between 0 and 5'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 5:
            return True
        else:
            return False"
speciesname,"class speciesname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Latin name of a species'
        self.format = ""Species names should be capitalised and in the format 'Genus species'""
        self.examples = ['Katsuwonus Pelamis', 'Thunnus Albacares', 'Lutjanus Gibbus', 'Elagatis Bipinnulata', 'Hipposcarus Longiceps']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Z][a-z]*\\s[a-z]*$', casted_val):
            return True
        else:
            return False"
commonname,"class commonname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Common name of a Species'
        self.format = 'Each word in the common name should start with a capital letter'
        self.examples = ['Spiny Lobster', 'Southern Stingray', 'Queen Conch', 'Nurse Shark', 'Caribbean Reef Shark']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
recordidentifier,"class recordidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of a Record'
        self.format = 'Record ID should be a positive integer'
        self.examples = [1, 10, 100, 1000, 10000]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
academicstudy,"class academicstudy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Study conducted by an academic or group of academics'
        self.format = ""The first letter of the author's name should be capitalized and the year should be in yyyy format""
        self.examples = ['Bush et al, 2017', 'Mackintosh et al, 2017', 'Morland et al, 2016', 'Melvin et al., 2018', 'Tighe et al, 2017']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(r""[A-Z][a-z]* et al, \d{4}"")
        return bool(pattern.match(casted_val))"
meanvalue,"class meanvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mean value of a measure'
        self.format = 'Mean should be a floating point number'
        self.examples = [10.57, 8.81, 10.81, 16.41, 24.9]
        
    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and self.validate(val):
            return float(val)
        else:
            raise Exception(""Invalid value"")

    def validate(self, val):
        try:
            float_val = float(val)
            if math.isnan(float_val) or math.isinf(float_val):
                return False
            return True
        except ValueError:
            return False
        except TypeError:
            return False"
standarddeviation,"
class standarddeviation(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Standard deviation of a measure'
        self.format: str = 'Standard deviation should be a floating point number'
        self.examples: list = [7.73, 7.18, 2.86, 6.35, 8.73]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Failed to cast {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False
"
testretestcorrelation,"class testretestcorrelation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Test-retest correlation of a measure""
        self.format = ""Floating point number""
        self.examples = [0.7, 0.7, 0.7, 0.7, 0.7]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""{val} cannot be cast to a floating point number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -1 <= casted_val <= 1:
            return True
        else:
            return False"
samplesize,"class samplesize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sample size'
        self.format = 'Represented as a positive integer'
        self.examples = [10, 100, 1000, 10000, 50]

    def super_cast(self, val):
        int_val = int(val)
        if int_val > 0:
            return int_val
        else:
            raise Exception('Invalid sample size')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
effectdirection,"class effectdirection(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Direction of the effect observed in the study'
        self.format = 'Effect direction should be represented as an integer'
        self.examples = [3, 3, 3, 3, 2]
    
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value can't be casted to integer"")
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [2, 3]:
            return True
        else:
            return False"
stimulationgroup,"class stimulationgroup(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stimulation group in the experiment'
        self.format = 'Stimulation group is a string indicating the group of stimulation in the experiment'
        self.examples = ['Sham 1 mA', 'Sham 2 mA', 'Anodal 1 mA', 'Anodal 2 mA', 'Cathodal 1 mA', 'Cathodal 2 mA']

    def super_cast(self, val):
        val = str(val)
        if val in self.examples:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
chromosome,"class chromosome(GeneralSemanticType):
    def __init__(self):
        self.description = 'The chromosome number of the genetic variant'
        self.format = 'Chromosome numbers should be stored as strings'
        self.examples = ['1', '19', '6', '2', '11']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[1-9]$|^[1-2][0-2]$|^X$|^Y$', casted_val):
            return True
        else:
            return False
"
variantidentifier,"class variantidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier of the genetic variant'
        self.format = 'Variant IDs should be stored as strings'
        self.examples = ['rs752074397', 'rs913543', 'rs17879759', 'rs17590', 'rs2072797']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^rs\d+$"", casted_val):
            return True
        else:
            return False"
gene,"class gene(GeneralSemanticType):
    def __init__(self):
        self.description = ""The gene in which the genetic variant is located""
        self.format = ""Gene names should be stored as strings""
        self.examples = ['DAO', 'ADGRB3', 'GCLC', 'CPA2', 'SUN2']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(""^[A-Za-z0-9_]+$"", casted_val):
            return True
        else:
            return False"
exonicfunction,"class exonicfunction(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'The function of the genetic variant in the exome'
        self.format = 'Exonic functions should be stored as strings'
        self.examples = ['exonic', 'UTR3', 'UTR5', 'ncRNA_intronic', 'upstream']
        
    def super_cast(self, val):
        return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['exonic', 'UTR3', 'UTR5', 'ncRNA_intronic', 'upstream']
        if casted_val in valid_values:
            return True
        else:
            return False"
allele,"class allele(GeneralSemanticType):
    def __init__(self):
        self.description = 'The allele of the genetic variant'
        self.format = 'Alleles should be stored as strings'
        self.examples = ['A', 'T', 'G', 'C', '-']

    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'T', 'G', 'C', '-']:
            return True
        else:
            return False"
allelefrequency,"class allelefrequency(GeneralSemanticType):

    def __init__(self):
        self.description = 'The frequency of the alternate allele in the population'
        self.format = 'Allele frequency should be a floating point number between 0 and 1'
        self.examples = [0.0093833780160857, 0.758713136729222, 0.0663956639566396, 0.683646112600536, 0.0509383378016086]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return num
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid allele frequency')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
energyexpenditure,"class energyexpenditure(GeneralSemanticType):
    def __init__(self):
        self.description = 'The energy expenditure associated with the genetic variant'
        self.format = 'A floating point number'
        self.examples = [-267.865539534646, 55.1440336087256, 94.4127838702549, -50.3779849247316, -105.280369971031]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Unable to cast value {val} to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
pvalue,"class pvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The p-value of the association between the genetic variant and the trait'
        self.format = 'P-value should be a floating point number between 0 and 1'
        self.examples = [1.45414549758062e-05, 1.80626984613767e-05, 2.38756651001788e-05, 5.47656319105322e-05, 6.53900813226633e-05]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 1:
                return num
            else:
                raise ValueError('Value out of range')
        except ValueError:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
residentidentifier,"class residentidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'The ID of a resident'
        self.format = 'The ID should be a non-negative float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0 or np.isnan(float_val):
                raise ValueError('Invalid Resident ID')
            return float_val
        except (ValueError, TypeError):
            raise Exception('Invalid Resident ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
questionscore,"class questionscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Score of a question'
        self.format = 'The question score should be a float between 0.0 and 4.0'
        self.examples = [1.0, 2.0, 3.0, 4.0, 3.0]
        
    def super_cast(self, val):
        if val < 0 or val > 4.0 or math.isnan(val):
            raise Exception('Invalid Question Score')
        return float(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 4.0:
            return False
        else:
            return True"
race,"class race(GeneralSemanticType):
    def __init__(self):
        self.description = ""A person's race""
        self.format = ""In lower-case and as a string""
        self.examples = ['white or caucasian', 'asian', 'hispanic or latino/a', 'other', 'black or african american']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower().strip()
        elif isinstance(val, int):
            if val == 1:
                return 'white or caucasian'
            elif val == 2:
                return 'asian'
            elif val == 3:
                return 'hispanic or latino/a'
            elif val == 4:
                return 'other'
            elif val == 5:
                return 'black or african american'
            else:
                return 'unknown'
        else:
            raise ValueError('Invalid value for race')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['white or caucasian', 'asian', 'hispanic or latino/a', 'other', 'black or african american', 'unknown']:
            return True
        else:
            return False"
diseasepresence,"class diseasepresence(GeneralSemanticType):
    def __init__(self):
        self.description = ""Presence of a disease""
        self.format = ""A boolean value of 1 or 0""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value for disease presence')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
hscrp,"class hscrp(GeneralSemanticType):

    def __init__(self):
        self.description = 'High-sensitivity C-reactive protein'
        self.format = 'Hs-CRP should be a floating point number'
        self.examples = [0.29, 17.16, 2.7, 0.09, 4.92]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f""Value {val} cannot be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
coreelement,"class coreelement(GeneralSemanticType):
    def __init__(self):
        self.description = ""Core elements of character education for medical students""
        self.format = ""Core elements should be lowercase strings""
        self.examples = ['empathy', 'honest', 'sense of responsibility', 'consideration', 'an understanding of others']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
yearidentifier,"class yearidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Numeric representation of year id'
        self.format: str = 'Year id should be an integer'
        self.examples: list = [1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Value cannot be cast to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
questionnaireanswer,"
class questionnaireanswer(GeneralSemanticType):

    def __init__(self):
        self.description = 'The answer to a specific question in the questionnaire. The value should be between -2 and 9'
        self.format = 'The answer should be an integer'
        self.examples = [1, 2, 4, 5, 9]

    def super_cast(self, val):
        casted_val = int(val)
        if casted_val == -999:
            return float('nan')
        else:
            return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -2 <= casted_val <= 9:
            return True
        else:
            return False"
citation,"class citation(GeneralSemanticType):

    def __init__(self):
        self.description = 'A citation of a scientific paper'
        self.format = ""The first author's last name should come first, followed by 'et al', then the year of publication in parentheses""
        self.examples = ['Webb E. A. et al (2012)', 'Chan, J. et al (2014)', 'Watson, P. et al (2016)', 'Isaak, R. et al (2018)', 'Johnson, M. et al (2013)']

    def super_cast(self, val):
        if isinstance(val, str):
            match_obj = re.match('(\\w+ \\w\\. A\\. et al \\(\\d{4}\\))', val)
            if match_obj:
                return match_obj.group()
            else:
                return 'Citation format is invalid'
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if re.match('^\\w+ \\w\\. A\\. et al \\(\\d{4}\\)$', casted_val):
                return True
        return False"
participants,"class participants(GeneralSemanticType):
    def __init__(self):
        self.description = 'Description of the participants of a study'
        self.format = 'The description should start with the number of participants, followed by a description of the participant type'
        self.examples = ['3522 paediatric trainees from 2006-2008', '30 third medical students', '955 final year Bachelor of Medicine students from 2010-2013', '41 anaesthesiology residents', '100 senior high school students']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            participant_number = re.search(r'\d+', casted_val)
            if participant_number is not None:
                return True
        else:
            return False"
oritype,"class oritype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Original type of an entity'
        self.format = 'Integer numbers between 1 and 3'
        self.examples = [1, 2, 3, 2, 1]

    def super_cast(self, val):
        try:
            num = int(val)
        except ValueError:
            return 'Invalid'
        if num < 1 or num > 3:
            return 'Invalid'
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
finalwt,"class finalwt(GeneralSemanticType):
    def __init__(self):
        self.description = 'Final weight of an entity'
        self.format = 'Floating point numbers between 0.03836125 and 9.612873'
        self.examples = [0.76765555, 0.18841963, 0.14461339, 1.2024814, 0.20434117]

    def super_cast(self, val):
        num = float(val)
        if num < 0.03836125 or num > 9.612873:
            raise ValueError('Invalid finalwt')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0.03836125 or casted_val > 9.612873:
            return False
        else:
            return True"
wuidentifier,"class wuidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of an entity'
        self.format = 'Floating point numbers between 3127032011.0 and 71315138011.0'
        self.examples = [54538201011.0, 47201224012.0, 56485007022.0, 23347440011.0, 23351315011.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 3127032011.0 or num > 71315138011.0:
                raise ValueError('Invalid wuid')
            else:
                return num
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if 3127032011.0 <= casted_val <= 71315138011.0:
                return True
            else:
                return False
        except TypeError:
            return False"
lit,"class lit(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean type representing a lit or unlit state""
        self.format = ""Binary values 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        num = float(val)
        if num != 0.0 and num != 1.0:
            raise ValueError('Invalid lit')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
parity,"class parity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Parity of an entity'
        self.format = 'Floating point numbers between 0.0 and 3.0'
        self.examples = [2.0, 3.0, 3.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            if 0.0 <= casted_val <= 3.0:
                return True
            else:
                return False"
avoidancebatscore,"class avoidancebatscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Avoidance BAT Score'
        self.format = 'Avoidance BAT score should be a floating point number.'
        self.examples = [44.664, 47.105, 43.963, 45.264, 48.859, 48.12]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(""Input value cannot be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
avoidancersqscore,"class avoidancersqscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Avoidance RSQ Score'
        self.format = 'Avoidance RSQ score should be a floating point number.'
        self.examples = [41.786, 44.196, 43.277, 43.083]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
avoidancebatretestscore,"class avoidancebatretestscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Avoidance BAT retest score'
        self.format = 'A floating point number, rounded to 3 decimal places'
        self.examples = [53.913, 51.02, 52.567, 56.123, 50.789]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(f""Could not cast {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
anxietybatscore,"class anxietybatscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Anxiety BAT Score'
        self.format = 'Anxiety BAT score should be a floating point number.'
        self.examples = [49.334, 53.34, 54.886, 52.398, 53.913, 51.02]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        if casted_val < 0 or casted_val == float('inf'):
            return False
        return True"
anxietyrsqscore,"class anxietyrsqscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Anxiety RSQ Score'
        self.format = 'Anxiety RSQ score should be a floating point number.'
        self.examples = [49.571, 43.286, 39.091, 44.078]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 3)
            return float_val
        except ValueError:
            return 'Could not convert to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
incidence,"class incidence(GeneralSemanticType):

    def __init__(self):
        self.description = 'Incidence of the disease'
        self.format = 'Incidence should be represented as a float number'
        self.examples = [1.51, 103.955, 410.265, 1638.12, 300.19]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 0:
                return val
            else:
                raise ValueError('Invalid incidence value')
        except ValueError:
            raise ValueError('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
booleanindex,"class booleanindex(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean index""
        self.format = ""Integer as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ibgecode,"class ibgecode(GeneralSemanticType):
    def __init__(self):
        self.description = ""An IBGE code""
        self.format = ""7-digit integer number""
        self.examples = [4300034, 4300059, 4300109, 4300208, 4300307]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if len(str(int_val)) == 7:
                return int_val
            else:
                raise Exception('Invalid IBGE code')
        except ValueError:
            raise Exception('Invalid IBGE code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 4300034 <= casted_val <= 4323804:
            return True
        else:
            return False"
latitude,"class latitude(GeneralSemanticType):
    def __init__(self):
        self.description = ""Geographical latitude""
        self.format = ""Latitude should be a floating point number between -90 (South Pole) and +90 (North Pole)""
        self.examples = [-45.0, 0.0, 45.0, -90.0, 90.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if -90 <= float_val <= 90:
                return float_val
            else:
                return 'Invalid Latitude'
        except ValueError:
            return 'Invalid Latitude'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -90 <= casted_val <= 90:
            return True
        else:
            return False"
longitude,"class longitude(GeneralSemanticType):
    def __init__(self):
        self.description = 'Geographical longitude'
        self.format = 'Floating point number between -180.0 and 180.0'
        self.examples = [-117.12435, -90.0, 145.0531311, 8.0487, -54.16705999999]

    def super_cast(self, val):
        float_val = float(val)
        if -180.0 <= float_val <= 180.0:
            return float_val
        else:
            raise Exception('Invalid Longitude')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -180.0 <= casted_val <= 180.0:
            return True
        else:
            return False"
healthindex,"class healthindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health Index'
        self.format = 'Value between 0 and 1, representing the health index of a municipality, stored as float'
        self.examples = [0.797, 0.772, 0.766, 0.788, 0.81]

    def super_cast(self, val):
        try:
            return round(float(str(val).replace(',', '.')), 3)
        except ValueError:
            raise Exception(""Invalid input for health index"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
geneticsubtype,"class geneticsubtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genetic Subtype'
        self.format = 'The subtype should be a string'
        self.examples = ['Epi1', 'Epi2', 'Epi3']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Epi1', 'Epi2', 'Epi3']:
            return True
        else:
            return False"
patientsex,"class patientsex(GeneralSemanticType):

    def __init__(self):
        self.description = ""A patient's sex""
        self.format = ""In lower-case and as a string""
        self.examples = ['male', 'female', 'male', 'female', 'male']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female']:
            return True
        else:
            return False"
patienttumorthickness,"class patienttumorthickness(GeneralSemanticType):
    def __init__(self):
        self.description = 'Thickness of the tumor in the patient'
        self.format = 'Thickness should be a floating point number. In mm.'
        self.examples = [1.7, 4.4, 0.74, 1.63, 0.7]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return 'Invalid Value'
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tumorulceration,"class tumorulceration(GeneralSemanticType):
    def __init__(self):
        self.description = ""Presence of tumor ulceration""
        self.format = ""Yes or No""
        self.examples = ['Yes', 'No', 'Yes', 'Yes', 'No']

    def super_cast(self, val):
        str_val = str(val)
        if str_val in ['Yes', 'No']:
            return str_val
        else:
            raise Exception('Invalid value for ulceration')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
clinicalfactor,"class clinicalfactor(GeneralSemanticType):

    def __init__(self):
        self.description = ""A clinical factor""
        self.format = ""Boolean value represented as 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid clinical factor value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
clinicalscore,"class clinicalscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clinical Score of a Patient in a Clinical Study'
        self.format = 'Clinical score should be a positive whole number and stored as a float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 0 or math.modf(num)[0] != 0.0:
            raise Exception('Invalid clinical score')
        return num
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0 and math.modf(casted_val)[0] == 0.0:
            return True
        else:
            return False"
wc,"class wc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Waist circumference'
        self.format = 'Waist circumference should be represented as a floating point number'
        self.examples = [97.0, 107.0, 120.0, 111.0, 89.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if isinstance(casted_val, float):
                return casted_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val >= 0 and casted_val < float('inf'):
            return True
        else:
            return False"
duration,"
class duration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration is the length of time during which an event or condition exists or continues.'
        self.format = 'Duration should be formatted as a floating point number.'
        self.examples = [2.0807, 0.052, 0.3178, 0.0655, 0.1939]

    def super_cast(self, val):
        if isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            return val
        else:
            raise Exception('Invalid value type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
diabetes,"class diabetes(GeneralSemanticType):
    def __init__(self):
        self.description = ""Diabetes status""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
status,"class status(GeneralSemanticType):
    def __init__(self):
        self.description = ""Status of a sample""
        self.format = ""In integer""
        self.examples = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'positive':
                return 1
            elif val.lower() == 'negative':
                return 0
            else:
                raise ValueError('Invalid Status')
        elif isinstance(val, int):
            if val in [0, 1]:
                return val
            else:
                raise ValueError('Invalid Status')
        else:
            raise ValueError('Invalid Status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
bloodpressurediff,"class bloodpressurediff(GeneralSemanticType):

    def __init__(self):
        self.description = 'Difference in blood pressure'
        self.format = 'Blood pressure difference should be represented as a floating point number'
        self.examples = [20.0, -5.0, 10.0, 35.0, 20.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            print(f""Cannot convert value {val} to float."")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
sideff,"class sideff(GeneralSemanticType):
    def __init__(self):
        self.description = ""Side effect occurrence""
        self.format = ""Binary, represented as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
clinicalremarks,"class clinicalremarks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clinical remarks'
        self.format = 'Clinical remarks should be stored as strings, with the first letter of each word capitalized'
        self.examples = ['Thyroid Swelling', 'Neck Swelling', 'Right Thyroid Swelling']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            words = casted_val.split()
            for word in words:
                if not word.istitle():
                    return False
            return True
        else:
            return False"
macroscopic,"class macroscopic(GeneralSemanticType):

    def __init__(self):
        self.description = 'Macroscopic measurement of an entity'
        self.format = 'Measurements should be a floating point number (in cm units)'
        self.examples: list[str] = [4.0, 6.0, 2.0, 3.0, 2.0]

    def super_cast(self, val):
        val = re.findall('\\d+\\.?\\d*', str(val))
        if len(val) > 0:
            return float(val[0])
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
type,"class type(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of a medical condition or a boolean value'
        self.format = 'Stored as strings, with the first letter of each word capitalized for medical conditions, and ""True""/""False"" for boolean'
        self.examples = ['Colloid Goiter', 'Hemorrhagic Cyst', 'Colloid Goiter With Cystic Changes', 'True', 'False']

    def super_cast(self, val):
        if isinstance(val, bool):
            return str(val)
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
targetlocation,"class targetlocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location of the target in the brain'
        self.format = 'Location should be represented as a string'
        self.examples = ['STN', 'TARGET', 'STN', 'TARGET', 'STN']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['STN', 'TARGET']:
            return True
        else:
            return False"
onstate,"class onstate(GeneralSemanticType):
    def __init__(self):
        self.description = ""ON state of the patient""
        self.format = ""Lower-cased string""
        self.examples = ['offon', 'onoff', 'on first', 'offon', 'onoff']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['offon', 'onoff', 'on first']:
            return True
        else:
            return False"
accuracy,"class accuracy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Accuracy'
        self.format = 'Accuracy should be a float ranging from 0 to 1'
        self.examples = [0.7, 0.6, 0.8667, 0.5, 0.9]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0.0 <= val <= 1.0:
                return round(val, 3)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
sequence,"class sequence(GeneralSemanticType):
    def __init__(self):
        self.description = 'A sequence of numbers'
        self.format = 'Each number in the sequence should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Unable to cast {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
worksheetname,"class worksheetname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Worksheet names in a spreadsheet'
        self.format = 'Strings with only the first letter of each word capitalized'
        self.examples = ['Table Of Contents', 'Degs Day 9 Pgsn Vs Vehicle', 'Full Mouse Drivermap Gene List', 'D9 Degs For Enrichment Anlysi', 'Panthergobioprocdownreg Pgsn D9']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
workingperiod,"class workingperiod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Working period of a person'
        self.format = 'Working period should be a positive integer'
        self.examples = [15, 10, 20, 25, 30]

    def super_cast(self, val):
        try:
            return abs(int(val))
        except ValueError:
            raise Exception(""Invalid value for working period"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
leveleducation,"class leveleducation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of Education'
        self.format = 'Level of education in integer format'
        self.examples = [2, 1, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot convert value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
workingtimeperday,"class workingtimeperday(GeneralSemanticType):

    def __init__(self):
        self.description = 'Working hours per day'
        self.format = 'Positive integer'
        self.examples = [6, 8, 10, 12, 14]

    def super_cast(self, val):
        return abs(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
sportactivity,"class sportactivity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sport Activity Levels'
        self.format = 'Sport Activity Levels should be an integer between 1 and 15'
        self.examples = [1, 3, 7, 12, 15]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception('Invalid sport activity level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 15:
            return True
        else:
            return False"
activeinactive,"class activeinactive(GeneralSemanticType):
    def __init__(self):
        self.description = ""Activity status""
        self.format = ""Boolean""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
countrycode,"class countrycode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Country code'
        self.format = 'Country codes must be upper-case strings or integers'
        self.examples = ['US', 'GB', 1, 2, 3]

    def super_cast(self, val):
        if isinstance(val, str):
            return val.strip().upper()
        elif isinstance(val, int) and 1 <= val <= 999:
            return val
        else:
            raise Exception('Invalid country code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if pycountry.countries.get(alpha_2=casted_val) is not None:
                return True
            else:
                return False
        elif isinstance(casted_val, int):
            if 1 <= casted_val <= 999:
                return True
            else:
                return False
        else:
            return False"
region,"class region(GeneralSemanticType):
    def __init__(self):
        self.description = ""A region""
        self.format = ""In title-case and as a string""
        self.examples = ['Beijing', 'Tianjin', 'Hebei', 'Shanxi', 'Inner Mongolia', 'USA', 'LAM', 'REF', 'World', 'ASIA2', 'Europe & Central Asia', 'Sub-Saharan Africa', 'Latin America & Caribbean', 'East Asia & Pacific', 'Middle East & North Africa']

    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        elif isinstance(val, int):
            mapping = {1: 'Beijing', 2: 'Tianjin', 3: 'Hebei', 4: 'Shanxi', 5: 'Inner Mongolia'}
            return mapping.get(val, 'Unknown')
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
incomegroup,"class incomegroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Income group of a country'
        self.format = 'The first letter of each word in the income group name should be capitalized'
        self.examples = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']
    
    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
consumption,"class consumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Consumption of a product or resource'
        self.format = 'Consumption should be a positive floating point number'
        self.examples = [0.0, 1.23, 4.56, 7.89, 10.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise Exception('Invalid consumption value')
            return val
        except ValueError:
            raise Exception('Invalid input for consumption value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
postbootcamp,"class postbootcamp(GeneralSemanticType):
    def __init__(self):
        self.description = ""Post bootcamp status""
        self.format = ""Numeric""
        self.examples = [1.0, float('nan'), 1.0, float('nan'), 1.0]

    def super_cast(self, val):
        if val == 1.0:
            return 1.0
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, float('nan')]:
            return True
        else:
            return False"
av,"class av(GeneralSemanticType):

    def __init__(self):
        self.description = ""A Boolean value""
        self.format = ""A float""
        self.examples = [1.0, 0.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if isinstance(val, float) and val in [0.0, 1.0]:
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
sticks,"class sticks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of sticks used during a medical procedure.'
        self.format = 'Should be a single digit floating point number.'
        self.examples = [1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        return round(val) if val >= 1.0 and val <= 4.0 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 4.0:
            return True
        else:
            return False"
trackneedle,"class trackneedle(GeneralSemanticType):
    def __init__(self):
        self.description = ""Tracking needle status""
        self.format = ""Boolean (0.0 for off, 1.0 for on)""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, float) and val in [0.0, 1.0]:
            return val
        else:
            raise ValueError(""Invalid value for trackneedle. Expected 0.0 or 1.0"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
ttf,"class ttf(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time to finish a medical procedure.'
        self.format = 'Should be a floating point number.'
        self.examples = [8.0, 34.0, 53.0, 158.0, 190.0]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2) if val >= 8.0 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        elif casted_val >= 8.0:
            return True
        else:
            return False"
preicu,"class preicu(GeneralSemanticType):

    def __init__(self):
        self.description = ""Pre ICU status""
        self.format = ""A Boolean value""
        self.examples = [1.0, float('nan'), 1.0, float('nan'), 1.0]

    def super_cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or casted_val == 1.0:
            return True
        else:
            return False"
av1,"class av1(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean semantic type""
        self.format = ""In form of floats 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, float('nan')]:
            return True
        else:
            return False"
sticks1,"class sticks(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of sticks used during a medical procedure.'
        self.format = 'Should be a floating point number.'
        self.examples = [1.0, 2.0, 5.0, 10.0]

    def super_cast(self, val):
        try:
            return round(float(val)) if 1.0 <= float(val) <= 10.0 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return np.isfinite(casted_val) and 1.0 <= casted_val <= 10.0"
trackneedle1,"class trackneedle(GeneralSemanticType):
    def __init__(self):
        self.description = ""Track needle status""
        self.format = ""A binary value expressed as float""
        self.examples = [1.0, 0.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, float('nan')]:
            return True
        else:
            return False"
ttf1,"
class ttf1(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time to finish a medical procedure.'
        self.format = 'Should be a floating point number.'
        self.examples = [7.0, 37.0, 106.75, 454.0]

    def super_cast(self, val):
        # Check if value is numeric
        if pd.to_numeric(val, errors='coerce') is not np.nan:
            return round(float(val), 2) if float(val) >= 7.0 else float('nan')
        else:
            raise ValueError(""Invalid input. Value must be numeric."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if value is within valid range
        if casted_val >= 7.0:
            return True
        else:
            return False"
posticu,"class posticu(GeneralSemanticType):

    def __init__(self):
        self.description = ""Whether a patient was admitted to the post-ICU or not""
        self.format = ""A float""
        self.examples = [1.0, float('nan'), 1.0, float('nan'), 1.0]

    def super_cast(self, val):
        if val == 1.0:
            return 1.0
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or casted_val == 1.0:
            return True
        else:
            return False"
av2,"class av2(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean semantic type""
        self.format = ""float""
        self.examples = [1.0, float('nan'), 1.0, 1.0, float('nan')]

    def super_cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return np.isnan(casted_val) or casted_val == 1.0"
sticks2,"class sticks(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of sticks used during a medical procedure.'
        self.format = 'Should be a floating point number.'
        self.examples = [1.0, 2.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return round(float_val) if float_val >= 1.0 and float_val <= 2.0 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif 1.0 <= casted_val <= 2.0:
            return True
        else:
            return False"
trackneedle2,"class trackneedle(GeneralSemanticType):
    def __init__(self):
        self.description = ""Tracking needle""
        self.format = ""Binary value""
        self.examples = [1.0, 0.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if val == 1.0:
            return 1.0
        elif val == 0.0:
            return 0.0
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, float('nan')]:
            return True
        else:
            return False"
ttf2,"class ttf2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Time to finish a medical procedure.'
        self.format = 'Should be a floating point number.'
        self.examples = [1.0, 15.5, 23.0, 48.0]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 48.0:
            return True
        else:
            return False"
endofyear,"class endofyear(GeneralSemanticType):

    def __init__(self):
        self.description = ""End of year flag""
        self.format = ""Numeric""
        self.examples = [1.0, float('nan'), 1.0, float('nan'), 1.0]

    def super_cast(self, val):
        if val == 1.0 or val == '1.0':
            return 1.0
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 1.0 or math.isnan(casted_val):
            return True
        else:
            return False"
av3,"class av3(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary value""
        self.format = ""A number of 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, float) and (val == 0.0 or val == 1.0):
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
trackneedle3,"class trackneedle3(GeneralSemanticType):

    def __init__(self):
        self.description = ""Boolean value indicating if needle3 is being tracked""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val == 1.0:
            return 1
        elif val == 0.0:
            return 0
        else:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, np.nan]:
            return True
        else:
            return False"
ttf3,"
class ttf3(GeneralSemanticType):
    def __init__(self):
        self.description = 'Time to finish a medical procedure.'
        self.format = 'Should be a floating point number, rounded to two decimal places if necessary.'
        self.examples = [7.1, 22.5, 36.25, 164.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return round(float_val, 2) if float_val >= 7.1 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and not math.isnan(casted_val) and casted_val >= 7.1:
            return True
        else:
            return False"
pagenumber,"class pagenumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Page number'
        self.format = 'Page number should be an integer greater than or equal to 1'
        self.examples = [1, 10, 31, 59, 225]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input for page number. Input should be a positive integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False
"
booleanmarker,"class booleanmarker(GeneralSemanticType):
    def __init__(self):
        self.description = 'A boolean marker'
        self.format = 'Either 0 (False) or 1 (True)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
objecttype,"class objecttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Object types used in the experiment'
        self.format = 'Object types should be stored as strings with proper capitalization'
        self.examples = ['Small red block', 'Small tan block', 'Small red egg', 'Small tan egg', 'Large red block']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        words = casted_val.split(' ')
        if len(words) < 2:
            return False
        for word in words:
            if not word[0].isupper() or not word[1:].islower():
                return False
        return True"
replicatenumber,"
class replicatenumber(GeneralSemanticType):
    def __init__(self):
        self.description = ""Replicate number in the experiment""
        self.format = ""Replicate numbers should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val is not None and 1 <= casted_val <= 20"
acceptedorrejectedafter24hr,"class acceptedorrejectedafter24hr(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether a request was accepted or rejected after 24 hours""
        self.format = ""String representation of boolean""
        self.examples = ['Accepted', 'Rejected', 'Accepted', 'Rejected', 'Accepted']

    def super_cast(self, val):
        val = str(val)
        if val in ['Accepted', 'Rejected']:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Accepted', 'Rejected']:
            return True
        else:
            return False"
nestidentifier,"class nestidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique identifier for a nest'
        self.format = 'NestID should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for nest identifier"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
redwoodacceptance,"class redwoodacceptance(GeneralSemanticType):

    def __init__(self):
        self.description = ""Redwood Acceptance Status""
        self.format = ""In title case""
        self.examples = ['Accepted', 'Rejected', 'Accepted', 'Rejected', 'Accepted']

    def super_cast(self, val):
        string = str(val).title()
        if string in ['Accepted', 'Rejected']:
            return string
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Accepted', 'Rejected']:
            return True
        else:
            return False"
redeggacceptance,"class redeggacceptance(GeneralSemanticType):
    def __init__(self):
        self.description = ""Red egg acceptance status""
        self.format = ""Accepted or Rejected as a string""
        self.examples = ['Accepted', 'Rejected', 'Accepted', 'Accepted', 'Rejected']

    def super_cast(self, val):
        string = str(val).title()
        if string in ['Accepted', 'Rejected']:
            return string
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Accepted', 'Rejected']:
            return True
        else:
            return False"
birdpresence,"class birdpresence(GeneralSemanticType):
    def __init__(self):
        self.description = ""Bird presence""
        self.format = ""lower-case string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            raise TypeError(""Expected string, got "" + str(type(val)))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
eggcount,"class eggcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of natural eggs in the nest during placement of objects'
        self.format = 'Egg count should be an integer between 2 and 3 inclusive'
        self.examples = [2, 3]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in [2, 3]:
                return num
            else:
                raise ValueError()
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val in range(2, 4):
            return True
        else:
            return False"
major,"class major(GeneralSemanticType):
    def __init__(self):
        self.description = ""Major of a student or survey respondent""
        self.format = ""Each word in major should be capitalized""
        self.examples = ['Psychology', 'Educational Sciences', 'Languages', 'Sports']

    def super_cast(self, val):
        # Convert the value to capitalized format
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is a string
        if isinstance(casted_val, str):
            return True
        else:
            return False"
freshcycleindicator,"class freshcycleindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""A Fresh Cycle Indicator""
        self.format = ""Boolean, where 1.0 is True""
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid fresh cycle indicator')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0]:
            return True
        else:
            return False"
dayofembryos,"class dayofembryos(GeneralSemanticType):
    def __init__(self):
        self.description = ""Day of embryos""
        self.format = ""Float value of 1.0 or 2.0""
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num in [1.0, 2.0]:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
numberofet,"class numberofet(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Number of embryo transfers'
        self.format: str = 'Number of embryo transfers should be a positive integer represented as a float'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        num = float(val)
        if num > 0 and num.is_integer():
            return num
        else:
            raise Exception('Invalid number of embryo transfers')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val > 0 and casted_val.is_integer():
            return True
        else:
            return False
"
ivficsi,"class ivficsi(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'IVF or ICSI treatment'
        self.format: str = 'Treatment should be a string value of ""IVF"" or ""ICSI""'
        self.examples: list = ['IVF', 'ICSI', 'IVF', 'ICSI', 'IVF']

    def super_cast(self, val):
        if val == 1.0:
            return 'IVF'
        elif val == 2.0:
            return 'ICSI'
        else:
            raise Exception('Invalid treatment')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['IVF', 'ICSI']:
            return True
        else:
            return False"
cpindicator,"class cpindicator(GeneralSemanticType):

    def __init__(self):
        self.description = ""CP Indicator""
        self.format = ""A string value""
        self.examples = ['是', '是', '是', '是', '是']

    def super_cast(self, val):
        if val in ['是']:
            return val
        else:
            raise Exception('Invalid CP indicator')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['是']:
            return True
        else:
            return False"
siteidentifier,"class siteidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Identifies the site of the study'
        self.format = 'Site ID should be an integer value'
        self.examples = [1, 2, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 6:
            return True
        else:
            return False"
screeningidentifier,"class screeningidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Identifies the screening session""
        self.format = ""Screening ID should be a string of the format 'XX-XXX'""
        self.examples = ['01-001', '01-010', '01-016', '01-015', '01-014']

    def super_cast(self, val):
        match_obj = re.match('[0-9]{2}-[0-9]{3}', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val:
            return True
        else:
            return False"
informedconsentobtained,"class informedconsentobtained(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether informed consent was obtained""
        self.format = ""lower-case string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        lower_string_val = str(val).lower()
        if lower_string_val not in ['yes', 'no']:
            raise Exception('Invalid value')
        else:
            return lower_string_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
dateofinformedconsentobtained,"class dateofinformedconsentobtained(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when the informed consent was obtained'
        self.format = 'Date should be a float value representing the number of days from the Excel base date (January 0, 1900)'
        self.examples = [42689.0, 42700.0, 42727.0, 42653.0, 42655.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid date')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 42622.0 <= casted_val <= 42758.0:
            return True
        else:
            return False
"
pao2fio2ratio,"class pao2fio2ratio(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ratio of PaO2 to FiO2, which is a measure of lung function'
        self.format = 'Ratio should be formatted as a floating point number'
        self.examples: list = [0, 61.9, 80.47, 52.38, 37.61]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        else:
            raise ValueError(""Input should be a numeric value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False
"
pfrecovery,"class pfrecovery(GeneralSemanticType):

    def __init__(self):
        self.description = 'PaO2/FiO2 recovery value'
        self.format = 'Recovery should be formatted as a floating point number'
        self.examples: list = [77.61, 57.61, 81.42, 41.42]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
boolean,"class boolean(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean value""
        self.format = ""Integer values 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in [0, 1]:
                return val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
homelessnessstatus,"class homelessnessstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Homelessness Status'
        self.format = 'Homelessness status should be a numerical integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Failed to cast {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
raceethnicity,"class raceethnicity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Race/Ethnicity'
        self.format = 'Race/Ethnicity should be a numerical integer'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. Expected a numerical integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
numvisitspcp,"
class numvisitspcp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Visits to Primary Care Physician'
        self.format = 'Number of visits as an integer'
        self.examples = [5, 10, 15, 20, 25]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Expected an integer."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
insurance,"class insurance(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates whether a person has insurance or not""
        self.format = ""boolean represented as integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, bool):
            return int(val)
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value. Expected boolean or integer 0/1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
over3comorbidities,"class over3comorbidities(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean flag indicating if a patient has over 3 comorbidities""
        self.format = ""0 or 1""
        self.examples = [0,1,0,1,0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
hcpa,"class hcpa(GeneralSemanticType):
    def __init__(self):
        self.description = ""Health Care Proxy Available""
        self.format = ""In numerical integer form or 'nan'""
        self.examples = [1, 2, 3, 4, 'nan']

    def super_cast(self, val):
        if val == '#NULL!':
            return 'nan'
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3, 4, 'nan']:
            return True
        else:
            return False"
trinaryresponse,"class trinaryresponse(GeneralSemanticType):
    def __init__(self):
        self.description = 'Trinary response'
        self.format = 'Trinary responses should be integers and can be 1, 2, or 3'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [1, 2, 3]:
                return int_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid trinary response')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
binaryresponsewithnan,"class binaryresponsewithnan(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary response with NaN values'
        self.format = 'Binary responses with NaN values should be floating-point numbers and can be 1, 2, or NaN'
        self.examples = [1.0, 2.0, np.nan, 1.0, 2.0]

    def super_cast(self, val):
        if val in [1, 2, 'nan', 'NaN', 'NAN']:
            if val == 'nan' or val == 'NaN' or val == 'NAN':
                return np.nan
            else:
                return float(val)
        else:
            raise Exception('Invalid binary response with NaN values')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0, np.nan]:
            return True
        else:
            return False"
trinaryresponsewithnan,"class trinaryresponsewithnan(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trinary response with NaN values'
        self.format = 'Trinary responses with NaN values should be floating-point numbers and can be 1, 2, 3, or NaN'
        self.examples = [1, 2, 3, np.nan, 1]

    def super_cast(self, val):
        if val in [1, 2, 3, np.nan]:
            return float(val)
        else:
            raise Exception('Invalid trinary response with NaN values')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0, 3.0, np.nan]:
            return True
        else:
            return False"
hbv,"class hbv(GeneralSemanticType):
    def __init__(self):
        self.description = ""HBV infection status""
        self.format = ""Integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception(""Super cast error: {}"".format(e))
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
exposure,"class exposure(GeneralSemanticType):
    def __init__(self):
        self.description = ""Exposure""
        self.format = ""Boolean""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise TypeError('Value must be a boolean.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
workduration,"class workduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of work'
        self.format = 'An integer number representing the duration of work'
        self.examples = [1, 14, 20, 25, 40]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Cannot cast {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 40:
            return True
        else:
            return False"
forestsite,"class forestsite(GeneralSemanticType):
    def __init__(self):
        self.description = 'Forest site location'
        self.format = 'The site location should be a string of uppercase letters'
        self.examples = ['SL', 'PNM', 'SL', 'PNM', 'SL']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['SL', 'PNM', np.nan]:
            return True
        else:
            return False"
lifeformtype,"
class lifeformtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Life form of the plant'
        self.format = 'The life form should be a string starting with a capital letter'
        self.examples = ['Liana', 'Tree']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Liana', 'Tree', float('nan')]:
            return True
        else:
            return False"
plantfamily,"class plantfamily(GeneralSemanticType):

    def __init__(self):
        self.description = 'Family of the plant'
        self.format = 'The family should be a string with the first letter capitalized'
        self.examples = ['Bignoniaceae', 'Apocynaceae', 'Convolvulaceae', 'Papilionoideae', 'Moraceae']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
plantspecies,"class plantspecies(GeneralSemanticType):
    def __init__(self):
        self.description = 'Plant Species'
        self.format = 'Species name should be a string with only the first letter capitalized'
        self.examples = ['Crotalária', 'Feijão de porco', 'Feijão guandú', 'Lablab', 'Mucuna cinza']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            words = casted_val.split()
            for word in words:
                if not word.istitle():
                    return False
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
anatomicalmetric,"class anatomicalmetric(GeneralSemanticType):

    def __init__(self):
        self.description = 'Anatomical metric of the plant'
        self.format = 'Anatomical metric should be a floating point number with two decimal places in micrometer squared (µm2)'
        self.examples = [6349.88, 6382.72, 6020.95, 6349.88, 6382.72]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not math.isnan(casted_val):
            return True
        else:
            return False"
thickness,"class thickness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Thickness of the plant leaf'
        self.format = 'Thickness should be a floating point number with two decimal places'
        self.examples = [19.62, 18.34, 16.7, 15.22, 17.89]
        self.unit = 'In micrometer (µm)'

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or casted_val < 0:
            return False
        else:
            return True"
cellsize,"
class cellsize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the cell in the plant leaf'
        self.format = 'Cell size should be a floating point number with two decimal places'
        self.examples = [250.00, 200.00, 230.77, 150.00, 300.00]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
education,"class education(GeneralSemanticType):
    def __init__(self):
        self.description = ""Education level of a person""
        self.format = ""All letters should be in lower case""
        self.examples = ['primary', 'secondary', 'higher', 'vocational school', 'university']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['primary', 'secondary', 'higher', 'vocational school', 'university', ""master's degree"", 'four year degree', 'some college', 'high school diploma or ged']:
            return True
        else:
            return False"
sbpavg,"class sbpavg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average Systolic Blood Pressure of a person'
        self.format = 'SBP should be formatted as a floating point number'
        self.examples = [140.5, 156.0, 153.5, 152.0, 179.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
dbpavg,"class dbpavg(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Average Diastolic Blood Pressure of a person'
        self.format = 'DBP should be formatted as a floating point number'
        self.examples = [78.5, 108.5, 77.0, 76.0, 94.0]

    def super_cast(self, val):
        # Given the nature of the data, we can safely assume that any input can be converted to a float
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)

        # Check if the value is within the valid range for Diastolic Blood Pressure
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
bgmgdl,"class bgmgdl(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Blood glucose level of a person'
        self.format: str = 'Blood glucose level should be formatted as a floating point number'
        self.examples: list = [156.0, 113.0, 91.0, 114.0, 130.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception(""Could not cast the value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise Exception(""Casted value is not a floating point number"")
        if not 0 <= casted_val <= float('inf'):
            raise Exception(""Casted value is not in the valid range"")
        return True"
smoking,"class smoking(GeneralSemanticType):
    def __init__(self):
        self.description = ""Smoking status of a person""
        self.format = ""Either a string indicating the smoking status or a float representing whether the person is a smoker or not. Non-smokers are represented by 0.0, smokers by 1.0, and nan for no information.""
        self.examples = ['nonsmoker', 'smoker', 'pastsmoker', 0.0, 1.0]

    def super_cast(self, val):
        if isinstance(val, float):
            if math.isnan(val):
                return float('nan')
            elif val == 0.0:
                return 'nonsmoker'
            else:
                return 'smoker'
        elif isinstance(val, str):
            return val.lower()
        else:
            raise ValueError(""Invalid input for super_cast"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['nonsmoker', 'smoker', 'pastsmoker', float('nan'), 0.0, 1.0]:
            return True
        else:
            return False"
areas,"class areas(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical area of a person'
        self.format = 'All letters should be in lower case'
        self.examples = ['urban', 'rural', 'semiurban']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
cvdrisk,"class cvdrisk(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cardiovascular disease risk of a person'
        self.format = 'All letters should be in lower case'
        self.examples = ['<10%', 'clinicall high risk', '10-20%', 'past history of CVD', '20-30%']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['<10%', 'clinicall high risk', '10-20%', 'past history of CVD', '20-30%']
        if casted_val in valid_values:
            return True
        else:
            return False"
highrisk,"class highrisk(GeneralSemanticType):
    def __init__(self):
        self.description = ""High risk status""
        self.format = ""In lower-case and as a string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
bplt,"class bplt(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = ""A boolean value""
        self.format = ""In lower-case and as a string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
lltt,"class lltt(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""lower-case string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
aptt,"class aptt(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean indicator""
        self.format = ""A string 'Yes' or 'No'""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        val = str(val)
        if val.lower() in ['yes', 'no']:
            return val.capitalize()
        else:
            raise ValueError(f""Invalid value: {val}. Expected 'Yes' or 'No'."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
lengthmillimeter,"class lengthmillimeter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of the subject'
        self.format = 'Length should be a float value in millimeters'
        self.examples = [270.0, 275.0, 290.0, 188.0, 221.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid input, expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 83.3 or casted_val > 381.0:
            return False
        else:
            return True"
sideofmeasurement,"class sideofmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Side of the measurement taken'
        self.format = 'Should be a string indicating the side of measurement'
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Right', 'Left']:
            return True
        else:
            return False"
dimensionmillimeter,"class dimensionmillimeter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dimension of the subject in millimeters'
        self.format = 'Dimension should be a float value in millimeters'
        self.examples = [2.57, 1.54, 1.4, 1.21, 1.44]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        else:
            raise ValueError(""Invalid input, expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.21 <= casted_val <= 3.95:
            return True
        else:
            return False"
numberofspines,"class numberofspines(GeneralSemanticType):
    def __init__(self):
        self.description = ""Number of spines of the subject""
        self.format = ""An integer between 6 and 288""
        self.examples = [16, 97, 33, 11, 13]
    
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 6 and casted_val <= 288:
            return True
        else:
            return False"
pubmedidentifier,"class pubmedidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'PubMed ID is a unique identifier for articles, includes the year and the number of the article'
        self.format = 'PubMed ID should be a large integer'
        self.examples = [19709046, 18713226, 19538570, 19538573, 19397771]

    def super_cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        elif isinstance(val, float) and val.is_integer() and val >= 0:
            return int(val)
        else:
            raise ValueError(f""Invalid value: {val}. Expected a non-negative integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            raise ValueError(f""Invalid value: {casted_val}. Expected a non-negative integer."")"
reportyear,"class reportyear(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of the Report'
        self.format = 'Year should be a string representing a time period'
        self.examples = ['2008_09', '2018_19']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^\d{4}_\d{2}$', casted_val):
            return True
        else:
            return False"
item,"class item(GeneralSemanticType):
    def __init__(self):
        self.description = 'Item Score, a score given to an item in a report'
        self.format = 'Item Score should be a float value between 0 and 2, inclusive'
        self.examples = [1.0, 2.0, 0.0, 1.0, np.nan]

    def super_cast(self, val):
        if val is None or math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or 0 <= casted_val <= 2:
            return True
        else:
            return False"
medicalabbreviations,"class medicalabbreviations(GeneralSemanticType):

    def __init__(self):
        self.description = 'Common abbreviations used in medical reports'
        self.format = 'Abbreviations should be a string with each word separated by a space'
        self.examples = ['LV EDV', 'LV ESV', 'LV SV', 'LV Mass', 'LV EF']

    def super_cast(self, val):
        return str(val).upper().strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Z\s]*$"", casted_val):
            return True
        else:
            return False"
medicalunits,"class medicalunits(GeneralSemanticType):
    def __init__(self):
        self.description = 'Units used in medical measurements'
        self.format = 'Units should be one of the most common ones found in medical reports (e.g., ml, %, g)'
        self.examples = ['ml', '%', 'g', 'ml', '%']

    def super_cast(self, val):
        val = str(val).lower().strip()
        if val in ['ml', '%', 'g']:
            return val
        else:
            raise Exception('Invalid unit')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['ml', '%', 'g']:
            return True
        else:
            return False"
imagefilename,"class imagefilename(GeneralSemanticType):
    def __init__(self):
        self.description = 'Image File Name'
        self.format = ""File names should be of the form 'Image#.tif' where # is a number""
        self.examples = ['Image1.tif', 'Image10.tif', 'Image2.tif', 'Image3.tif', 'Image4.tif']
    
    def super_cast(self, val):
        match_obj = re.match('Image[0-9]+\\.tif', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid image file name')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('Image[0-9]+\\.tif', casted_val):
            return True
        else:
            return False"
areapercent,"class areapercent(GeneralSemanticType):
    def __init__(self):
        self.description = 'Area Percentage'
        self.format = 'Area percentage should be a float between 0 and 100'
        self.examples = [2.363, 0.707, 1.776, 0.551, 7.423]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 100:
                return num
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
ph,"class ph(GeneralSemanticType):
    def __init__(self):
        self.description = ""pH level""
        self.format = ""A floating point number rounded to two decimal places between 0 and 14""
        self.examples = [6.07, 6.07, 6.07, 6.07, 6.07]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
            if 0 <= num <= 14:
                return num
            else:
                raise ValueError('Invalid pH level')
        except ValueError:
            raise ValueError('Invalid input. Expected a float between 0 and 14')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 14:
            return True
        else:
            return False"
yearsofeducation,"class yearsofeducation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Years of education of the participant'
        self.format = 'Years of education should be a floating point number'
        self.examples = [21.0, 13.0, 18.0, 18.0, 19.0]

    def super_cast(self, val):
        try:
            # attempt to convert the value into float
            return float(val)
        except ValueError:
            # if fails, return None
            return None

    def validate(self, val):
        # cast the value into desired format
        casted_val = self.super_cast(val)
        # check if the casted value lies within the valid range
        if casted_val is not None and 6.0 <= casted_val <= 21.0:
            return True
        else:
            return False"
preferredhand,"class preferredhand(GeneralSemanticType):
    def __init__(self):
        self.description = 'Preferred hand of the participant'
        self.format = 'Preferred hand should be an integer value'
        self.examples = ['1', '2', '3']

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for preferred hand."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [1, 2, 3]:
            return True
        else:
            return False"
howlongmeditatedyears,"class howlongmeditatedyears(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of years the participant has meditated'
        self.format = 'Number of years should be a floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be convertible to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 32.0:
            return True
        else:
            return False"
frequencyofmeditationtimesperweek,"class frequencyofmeditationtimesperweek(GeneralSemanticType):
    def __init__(self):
        self.description = 'Frequency of meditation times per week'
        self.format = 'Frequency of meditation times should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 14:
            return True
        else:
            return False"
lengthofmeditationminutes,"class lengthofmeditationminutes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Length of meditation in minutes'
        self.format = 'Length of meditation should be an integer'
        self.examples = [0, 15, 30, 45, 60]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except ValueError:
            raise ValueError(""Cannot cast value to integer"")
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 90:
            raise ValueError(""Invalid length of meditation. It should be in the range [0, 90]"")
        return True"
minutesperweek,"class minutesperweek(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minutes of meditation per week'
        self.format = 'integer'
        self.examples = [0, 210, 420, 630, 840]

    def super_cast(self, val):
        return int(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 840:
            return True
        else:
            return False"
bai,"class bai(GeneralSemanticType):
    def __init__(self):
        self.description = 'Beck Anxiety Inventory score'
        self.format = 'BAI score should be an integer'
        self.examples = [13, 13, 12, 11, 11]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(""Invalid input. Cannot convert to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 21:
            return True
        else:
            return False"
bdi,"class bdi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Beck Depression Inventory score'
        self.format = 'BDI score should be an integer'
        self.examples = [17, 2, 11, 12, 11]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 17"
ffmq,"class ffmq(GeneralSemanticType):
    def __init__(self):
        self.description = 'Five Facet Mindfulness Questionnaire score'
        self.format = 'An integer'
        self.examples = [125, 145, 127, 103, 144]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 103 and casted_val <= 171:
            return True
        else:
            return False"
percentagecorrectblock,"class percentagecorrectblock(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percentage of correct oddballs in a block'
        self.format = 'Percentage should be an integer'
        self.examples = [88, 100, 88, 92, 100]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 20 and casted_val <= 100:
            return True
        else:
            return False"
meanreactiontime,"class meanreactiontime(GeneralSemanticType):
    def __init__(self):
        self.description = 'Mean reaction time'
        self.format = 'Floating point number in milliseconds'
        self.examples = [437.024, 423.34, 558.49, 540.266, 529.06]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. Value must be castable to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 389.47 <= casted_val <= 631.26:
            return True
        else:
            return False"
sdofrt,"class sdofrt(GeneralSemanticType):

    def __init__(self):
        self.description = 'Standard Deviation of Reaction Time'
        self.format = 'Standard deviation of reaction time should be a floating point number'
        self.examples = [115.249145374352, 140.177843441774, 95.1905829274822, 131.974541158092, 121.105613168315]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Input value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 32.0 <= casted_val <= 192.716529901916:
            return True
        else:
            return False"
dprime,"class dprime(GeneralSemanticType):

    def __init__(self):
        self.description = ""d' (discrimination index)""
        self.format = ""d' should be a floating point number""
        self.examples = [2.516333139, 4.077033945, 4.038833427, 2.763946063, 3.071510682]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""Cannot cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -0.943681124 <= casted_val <= 4.902177178:
            return True
        else:
            return False"
hitrate,"class hitrate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Hit rate'
        self.format = 'Floating point number'
        self.examples = [1.644853627, 0.495850347, 1.475791028, 0.358458793, 1.644853627]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value for hitrate. Expected a floating point number."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if -0.358458793 <= casted_val <= 2.326347874:
            return True
        else:
            raise Exception(""Invalid range for hitrate. Expected a value between -0.358458793 and 2.326347874."")"
falsepositive,"class falsepositive(GeneralSemanticType):

    def __init__(self):
        self.description = 'False positive rate'
        self.format = 'False positive rate should be a floating point number'
        self.examples = [2.020482792, 1.750686071, 2.3939798, 2.089456312, 2.713051888]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected a float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        # check if the value is within the expected range
        if -1.439531471 <= casted_val <= 2.935199469:
            return True
        else:
            return False"
lifetimemedhours,"class lifetimemedhours(GeneralSemanticType):

    def __init__(self):
        self.description = 'Lifetime meditation hours'
        self.format = 'Lifetime meditation hours should be a floating point number'
        self.examples = [1149.417, 2184.0, 4111.25, 18928.0, 528.6666667]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            return (casted_val >= 528.6666667) and (casted_val <= 18928.0)
        else:
            return False"
medicalfacility,"class medicalfacility(GeneralSemanticType):

    def __init__(self):
        self.description = 'Medical Facility'
        self.format = 'Medical facility names should be capitalized'
        self.examples = ['Batoka', 'Railway', 'Maamba', 'Manungu', 'Mawaya']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
monthofyear,"class monthofyear(GeneralSemanticType):
    def __init__(self):
        self.description = 'Month of the year'
        self.format = 'Month as an integer between 1 and 12'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        val = int(val)
        if 1 <= val <= 12:
            return val
        else:
            raise Exception('Invalid month')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 12:
            return True
        else:
            return False"
binaryindicator,"class binaryindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary indicator""
        self.format = ""Integer""
        self.examples = [0,1,0,1,0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0,1]:
            return True
        else:
            return False"
populationcount,"class populationcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Population count'
        self.format = 'Population count should be a non-negative integer'
        self.examples = [102, 4065, 11696, 28042, 1842819]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
dropoutstatus,"class dropoutstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""A dropout status""
        self.format = ""An integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
yearsinschool,"class yearsinschool(GeneralSemanticType):

    def __init__(self):
        self.description = 'Years of Schooling'
        self.format = 'Years of schooling should be stored as strings'
        self.examples = ['0', '2', '4', '6', '8']

    def super_cast(self, val):
        if isinstance(val, float) and np.isnan(val):
            return float('nan')
        elif isinstance(val, str) and val.isdigit():
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and np.isnan(casted_val):
            return True
        elif isinstance(casted_val, str) and re.match(""^(\d+|Less Than \d+|\d+-\d+|Over \d+)$"", casted_val):
            return True
        else:
            return False"
language,"class language(GeneralSemanticType):

    def __init__(self):
        self.description = 'Language spoken by a person'
        self.format = 'In lower-case and as a string'
        self.examples = ['english', 'german', 'greek', 'sibling language', 'other']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
yearofdiagnosis,"class yearofdiagnosis(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of Diagnosis'
        self.format = 'Year of diagnosis should be between 1900 and current year'
        self.examples = [2003, 1985, 2010, 2004, 1996]

    def super_cast(self, val):
        casted_val = int(val)
        if 1900 <= casted_val <= datetime.now().year:
            return casted_val
        else:
            raise ValueError(""Input value not in valid range."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 1900 <= casted_val <= datetime.now().year"
clinicvisits,"class clinicvisits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of clinic visits'
        self.format = 'Number of clinic visits should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Input should be a non-negative integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
homevisits,"class homevisits(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of home visits'
        self.format = 'Number of home visits should be a non-negative integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
insulinuse,"class insulinuse(GeneralSemanticType):
    def __init__(self):
        self.description = ""Insulin use indication""
        self.format = ""Integer value, either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
a1clevel,"class a1clevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'A1C Level'
        self.format = 'A1C Level should be a non-negative floating point number'
        self.examples = [5.0, 6.0, 7.0, 8.0, 9.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 1)
        except ValueError:
            return 'Cannot cast the value to a float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
rat,"class rat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rat number'
        self.format = 'Rat numbers should be integer values ranging from 1 to 128'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1 and casted_val <= 128:
                return casted_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
housing,"class housing(GeneralSemanticType):

    def __init__(self):
        self.description = 'Housing condition'
        self.format = ""Housing condition should be either 'PSI' or 'SR'""
        self.examples = ['PSI', 'SR', 'PSI', 'SR', 'PSI']

    def super_cast(self, val):
        str_val = str(val).upper()
        if str_val not in ['PSI', 'SR']:
            return 'UNKNOWN'
        else:
            return str_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['PSI', 'SR']:
            return True
        else:
            return False"
socialstimulus,"class socialstimulus(GeneralSemanticType):
    def __init__(self):
        self.description = ""A social stimulus""
        self.format = ""In lower-case and as a string""
        self.examples = ['social stimulus', 'no social stimulus', 'social stimulus', 'no social stimulus', 'social stimulus']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['social stimulus', 'no social stimulus']:
            return True
        else:
            return False"
footshock,"class footshock(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates whether a footshock was applied or not""
        self.format = ""A boolean string""
        self.examples = ['footshock only', 'no footshock', 'footshock only', 'no footshock', 'footshock only']

    def super_cast(self, val):
        if str(val).lower() == 'footshock only':
            return 'true'
        elif str(val).lower() == 'no footshock':
            return 'false'
        else:
            raise Exception(""Invalid input"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['true', 'false']:
            return True
        else:
            return False"
runningincirclesbout,"class runningincirclesbout(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of running in circles bouts'
        self.format = 'An integer between 0 and 40'
        self.examples = [0, 2, 4, 23, 40]
    
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value must be an integer"")
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 40:
            return True
        else:
            return False"
runningawaybout,"
class runningawaybout(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of running away bouts'
        self.format = 'Number of running away bouts should be an integer between 0 and 50'
        self.examples = [0, 3, 9, 18, 50]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value can't be converted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 50:
            return True
        else:
            return False"
totalsocialinteractionsec,"class totalsocialinteractionsec(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total duration of social interactions'
        self.format = 'Total duration of social interactions should be a floating-point number in seconds'
        self.examples = [19.8, 124.732, 170.121, 245.186, 343.88]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
totalaggressivegroomingsec,"class totalaggressivegroomingsec(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total duration of aggressive grooming'
        self.format = 'Total duration of aggressive grooming should be a floating-point number in seconds'
        self.examples = [0.0, 3.714, 11.992, 23.276, 76.791]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(""Invalid input. Only float values are accepted."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val > float('inf'):
            return False
        else:
            return True"
nonaggressivesocialbehaviorsec,"class nonaggressivesocialbehaviorsec(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total duration of non-aggressive social behaviors'
        self.format = 'Total duration of non-aggressive social behaviors should be a floating-point number in seconds'
        self.examples = [2.006, 118.852, 157.764, 228.482, 326.29]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(""Cannot cast the value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
vohpermm2,"class vohpermm2(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of VOH per square millimeter'
        self.format = 'Volume of VOH per square millimeter should be a floating-point number'
        self.examples = [185.16666666666663, 358.417, 441.833, 512.875, 720.5]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            return 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'invalid':
            return False
        elif casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
plhpermm2,"class plhpermm2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Volume of PLH per square millimeter'
        self.format = 'Volume of PLH per square millimeter should be a floating-point number'
        self.examples = [132.0, 1174.25, 1575.75, 1742.125, 2541.0]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, (int, float)) and 0 <= casted_val:
            return True
        else:
            return False"
ilhpermm2,"class ilhpermm2(GeneralSemanticType):

    def __init__(self):
        self.description = 'Volume of ILH per square millimeter'
        self.format = 'Volume of ILH per square millimeter should be a floating-point number'
        self.examples = [194.3337, 1019.333, 1370.0, 1583.083, 2558.6]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 4)
            return float_val
        except ValueError:
            raise Exception(f""Value {val} cannot be converted to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            raise Exception(f""Value {val} is out of range"")"
blahpermm2,"class blahpermm2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Volume of BLAH per square millimeter'
        self.format = 'A floating-point number'
        self.examples = [33.0, 121.0, 161.333, 194.333, 295.16666666666663]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except Exception:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
ceahpermm2,"class ceahpermm2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Volume of CEAH per square millimeter'
        self.format = 'A floating-point number'
        self.examples = [99.0, 352.825, 436.333, 497.2, 723.8]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
mevhpermm2,"class mevhpermm2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Volume of MEVH per square millimeter'
        self.format = 'Volume of MEVH per square millimeter should be a floating-point number'
        self.examples = [0.0, 72.6, 99.917, 144.925, 245.66666666666663]
    
    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
schoolcode,"class schoolcode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Code of a school'
        self.format = ""The school code is a two-character string in the form 'SX'""
        self.examples = ['S01', 'S02', 'S03', 'S04', 'S05']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'S\d{2}', casted_val):
            return True
        else:
            return False"
gradecode,"class gradecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Code of a grade'
        self.format = ""The grade code is a two-character string in the form 'PX'""
        self.examples = ['P1', 'P2', 'P3', 'P4', 'P5']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        regex = r'^P[0-9]+$'
        if re.match(regex, casted_val):
            return True
        else:
            return False"
classcode,"class classcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Code of a class'
        self.format = ""The class code is a six-character string in the form 'AXYPZ'""
        self.examples = ['A01P61', 'A02P21', 'A03P21', 'A03M31', 'A04P61']

    def super_cast(self, val):
        casted_val = str(val).upper()
        if re.match(""^[A-Z][0-9]{2}[A-Z][0-9]{2}$"", casted_val):
            return casted_val
        else:
            raise ValueError(""Invalid format"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Z][0-9]{2}[A-Z][0-9]{2}$"", casted_val):
            return True
        else:
            return False"
seroconversion,"class seroconversion(GeneralSemanticType):
    def __init__(self):
        self.description = 'Seroconversion value'
        self.format = 'Either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in [0, 1]:
                return val
            else:
                return 'Invalid value'
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
feedback,"class feedback(GeneralSemanticType):
    def __init__(self):
        self.description = ""Feedback or Suggestions""
        self.format = ""Feedback should be a string of text with only the first letter capitalized.""
        self.examples = ['Improve slide formatting', 'If more than one', 'Examples of abstracts/case reports', 'More teaching/presentations', 'Slide formatting']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, str):
            return True
        else:
            return False"
htn,"class htn(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean representation of hypertension""
        self.format = ""A float of either 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]
    
    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return float(val)
        else:
            raise ValueError('Invalid value, expecting 0.0 or 1.0')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
dm,"class dm(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean type representing a specific condition""
        self.format = ""A float, 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return float(val)
        else:
            raise ValueError(""Input must be either 0.0 or 1.0"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val not in [0.0, 1.0]:
            return False
        return True"
other,"class other(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary boolean type""
        self.format = ""In decimal and as a float""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, float) and val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
hxtb,"class hxtb(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""0.0 for False and 1.0 for True""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid hxtb')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
bcgscar,"class bcgscar(GeneralSemanticType):
    def __init__(self):
        self.description = ""BCG scar presence""
        self.format = ""0.0 for absence and 1.0 for presence""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return float(val)
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
safbsmear,"class safbsmear(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean Semantic Type for safbsmear""
        self.format = ""A binary representation (0 or 1)""
        self.examples = [0.0, 1.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid safbsmear')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
safbsmearscore,"class safbsmearscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'SAF B Smear Score'
        self.format = ""String format '0' or '1+'""
        self.examples = ['0', '1+', '0', '1+', '0']

    def super_cast(self, val):
        if val in ['0', '1+']:
            return str(val)
        else:
            raise Exception('Invalid safbsmearscore')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1+']:
            return True
        else:
            return False"
safbcultureresult,"class safbcultureresult(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value indicating the result of a SAFB culture""
        self.format = ""binary (0.0/1.0) as float""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            if val in [0.0, 1.0]:
                return float(val)
            else:
                raise Exception('Invalid safbcultureresult')
        else:
            raise Exception('Invalid type, safbcultureresult expects a numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
riskgroup,"class riskgroup(GeneralSemanticType):
    def __init__(self):
        self.description = ""Risk Group""
        self.format = ""A single digit number""
        self.examples = [1.0, 2.0, 3.0, 1.0, 2.0]
    
    def super_cast(self, val):
        if val in [1.0, 2.0, 3.0]:
            return val
        else:
            raise Exception('Invalid riskgroup')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0, 3.0]:
            return True
        else:
            return False"
tstsize,"
class tstsize(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'TST Size'
        self.format: str = 'TST Size should be represented as a float'
        self.examples: list = [0.0, 2.0, 12.75, 25.0]

    def super_cast(self, val):
        try:
            tst_size = float(val)
            if 0 <= tst_size <= 25:
                return tst_size
            else:
                raise Exception('Invalid tstsize')
        except ValueError:
            raise Exception(""Value is not a number"")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 25:
            return True
        else:
            return False"
qftresult,"class qftresult(GeneralSemanticType):
    def __init__(self):
        self.description = ""Result of a Quantum Fourier Transform""
        self.format = ""0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid qftresult')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
extrapultb,"class extrapultb(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean value""
        self.format = ""As a float 0.0 or 1.0""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return float(val)
        else:
            raise Exception('Invalid extrapultb')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
extrapultbtype,"class extrapultbtype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Extra Pul TB Type""
        self.format = ""Single digit number""
        self.examples = [0.0, 1.0, 2.0]

    def super_cast(self, val):
        if val in [0.0, 1.0, 2.0]:
            return val
        else:
            raise Exception('Invalid extrapultbtype')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, 2.0]:
            return True
        else:
            return False"
identifieryearpmidentifier,"class identifieryearpmidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier consisting of year and PubMed ID'
        self.format = 'First 4 characters represent the year and the characters after underscore (_) represent the PubMed ID'
        self.examples = ['2005_16339345', '2005_16433627', '2005_16023640', '2005_16385084', '2005_16236447']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('(\\d{4})_(\\d+)', string)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid identifier'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('(\\d{4})_(\\d+)', casted_val):
            return True
        else:
            return False"
categoryvalue,"class categoryvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Category values'
        self.format = 'Category values should be integers ranging from 1 to 99'
        self.examples = [1, 2, 3, 4, 99]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 1 and num <= 99:
                return num
            else:
                raise Exception('Invalid category value')
        except ValueError:
            raise Exception('Invalid input, expected an integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 1 <= casted_val <= 99"
fearlevel,"class fearlevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Fear Level'
        self.format = 'Fear levels are integers between 0 and 3'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 3:
            return True
        else:
            return False"
depressionlevel,"class depressionlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Depression Level'
        self.format = 'Depression levels are integers between 0 and 5'
        self.examples = [0, 1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            raise Exception(""Cannot cast to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 5:
            return True
        else:
            return False"
anxietylevel,"class anxietylevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Anxiety Level'
        self.format = 'Anxiety levels are integers between 0 and 3'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1, 2, 3]:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise ValueError(f""Invalid value {val}. Value must be an integer between 0 and 3."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2, 3]:
            return True
        else:
            return False"
yearinprogram,"class yearinprogram(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of years in a program'
        self.format = 'Number of years should be formatted as a floating point number'
        self.examples = [2.0, 2.0, 2.0, 2.0, 2.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 1)
        else:
            raise ValueError(""Invalid input, Expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0:
            return True
        else:
            raise ValueError(""Invalid value, year in program should be greater than or equal to 1"")"
likelihood,"class likelihood(GeneralSemanticType):

    def __init__(self):
        self.description = 'Likelihood scale of 1-6'
        self.format = 'Likelihood should be formatted as a floating point number'
        self.examples: list = [3.0, 2.0, 3.0, 3.0, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 1 or num > 6:
                raise ValueError('Invalid likelihood value')
            return round(num, 1)
        except ValueError:
            raise ValueError('Invalid likelihood value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1 <= casted_val <= 6:
            return True
        else:
            return False"
studyoutcome,"class studyoutcome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Study outcome'
        self.format = 'In string format'
        self.examples = ['PT', 'shControl', '10', '0.02']

    def super_cast(self, val):
        if pd.notna(val):
            return str(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
studyoutcomebinary,"class studyoutcomebinary(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary outcome of a study""
        self.format = ""In lower-case and as a string""
        self.examples = ['shNR2F1', 'SUM', 'shNR2F1', 'SUM', 'shNR2F1']

    def super_cast(self, val):
        return str(val).lower() if pd.notna(val) else None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['shnr2f1', 'sum']:
            return True
        else:
            return False"
nummice,"class nummice(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of mice used in study'
        self.format = 'Should be a positive integer'
        self.examples = [80, 120, 160, 2, 362]

    def super_cast(self, val):
        if pd.isna(val):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
psa,"class psa(GeneralSemanticType):

    def __init__(self):
        self.description = 'Prostate-specific antigen levels'
        self.format = 'PSA levels should be a floating point number'
        self.examples = [4.37, 11.9, 6.19, 32.92, 28.82]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise ValueError(""Invalid input for PSA level"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
tumorstage,"class tumorstage(GeneralSemanticType):
    def __init__(self):
        self.description = 'Stage of the tumor in the patient'
        self.format = 'Tumor stage should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if 1 <= int_val <= 5:
                return int_val
            else:
                raise ValueError(f""Value {val} is not within the valid range"")
        elif isinstance(val, int):
            if 1 <= val <= 5:
                return val
            else:
                raise ValueError(f""Value {val} is not within the valid range"")
        else:
            raise TypeError(f""Value {val} is not of the expected type"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False
"
gleasonscore,"
class gleasonscore(GeneralSemanticType):

    def __init__(self):
        self.description = ""Gleason score of the patient's prostate cancer""
        self.format = 'Gleason score should be an integer between 1 and 100'
        self.examples = [90, 80, 72, 90, 90]
        
    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 100:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            return 'Invalid value, cannot cast to Gleason score'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 100:
            return True
        else:
            return False"
nodalstage,"class nodalstage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nodal stage of the cancer in the patient'
        self.format = 'Nodal stage should be an integer between -1 and 1'
        self.examples = [0, 0, 0, 1, 0]

    def super_cast(self, val):
        casted_val = int(val)
        if casted_val >= -1 and casted_val <= 1:
            return casted_val
        else:
            raise Exception('The value is out of range. It should be between -1 and 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -1 and casted_val <= 1:
            return True
        else:
            return False"
nodespositive,"class nodespositive(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of positive nodes in the patient'
        self.format = 'Number of positive nodes should be a non-negative integer'
        self.examples = [0, 0, 0, 5, 0]

    def super_cast(self, val):
        try:
            # cast the input value to integer
            return int(val)
        except ValueError:
            # if the input value cannot be casted to integer, return None
            return None

    def validate(self, val):
        # cast the input value using the super_cast method
        casted_val = self.super_cast(val)
        # if the casted value is None, it means the input value is invalid
        if casted_val is None:
            return False
        # if the casted value is less than 0, it means the input value is invalid
        elif casted_val < 0:
            return False
        # otherwise, the input value is valid
        else:
            return True"
nodesremoved,"class nodesremoved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of nodes removed from the patient'
        self.format = 'Non-negative integer'
        self.examples = [9, 25, 13, 34, 12]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                raise ValueError(""Invalid input"")
        elif isinstance(val, float):
            if val.is_integer():
                return int(val)
            else:
                raise ValueError(""Invalid input"")
        elif isinstance(val, int):
            return val
        else:
            raise ValueError(""Invalid input"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
perineuralinvasion,"class perineuralinvasion(GeneralSemanticType):
    def __init__(self):
        self.description = ""Perineural Invasion status""
        self.format = ""As an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
lymphovascularinvasion,"class lymphovascularinvasion(GeneralSemanticType):
    def __init__(self):
        self.description = ""Lymphovascular invasion""
        self.format = ""A boolean value represented as an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
resectionmarginstatus,"class resectionmarginstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""The resection margin status""
        self.format = ""A binary value represented as an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
psanadir,"class psanadir(GeneralSemanticType):

    def __init__(self):
        self.description = 'PSA Nadir of the patient'
        self.format = 'PSA Nadir should be an integer between -1 and 1'
        self.examples = [-1, -1, -1, 0, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
        except ValueError:
            raise Exception(f""ValueError: {val} cannot be cast to integer."")
        return int_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val not in range(-1, 2):
            raise Exception(f""InvalidValue: {casted_val} is not in valid range (-1, 1)."")
        else:
            return True"
bcr,"class bcr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Biochemical recurrence of the cancer in the patient'
        self.format = 'BCR should be an integer between -1 and 1'
        self.examples = [-1, -1, -1, -1, -1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for BCR')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -1 and casted_val <= 1:
            return True
        else:
            return False"
timetobcr,"class timetobcr(GeneralSemanticType):
    def __init__(self):
        self.description = 'Time to biochemical recurrence'
        self.format = 'Time to BCR should be a non-negative floating point number'
        self.examples = [215.0, 541.0, 751.0, 1446.0, 2569.0]
        
    def super_cast(self, val):
        # If the value is nan, we return it as is
        if isinstance(val, float) and math.isnan(val):
            return float('nan')
        # Convert the value to float and round it
        else:
            return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        # check if the value is in the valid range
        if 0 <= casted_val and casted_val != float('inf'):
            return True
        else:
            return False"
timetolastfollowup,"class timetolastfollowup(GeneralSemanticType):
    def __init__(self):
        self.description = ""Time to last follow-up with the patient""
        self.format = ""Non-negative floating point number representing days""
        self.examples = [4.0, 417.0, 1621.0, 2192.0, 2834.0]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 1)
            if float_val >= 0:
                return float_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
secondarytreatment,"class secondarytreatment(GeneralSemanticType):

    def __init__(self):
        self.description = ""Secondary treatment""
        self.format = ""Boolean (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, bool):
            return int(val)
        elif isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError(""Invalid value"")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
timetosecondarytreatment,"class timetosecondarytreatment(GeneralSemanticType):
    def __init__(self):
        self.description = 'Time to secondary treatment for the patient'
        self.format = 'Time to secondary treatment should be a non-negative floating point number'
        self.examples = [15.0, 167.0, 375.0, 829.5, 2715.0]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 1)
            if casted_val < 0:
                return float('nan')
            return casted_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
csdeath,"class csdeath(GeneralSemanticType):
    def __init__(self):
        self.description = ""Represents whether a death has occurred.""
        self.format = ""A boolean, represented as an integer (0 or 1)""
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise ValueError(""Value must be either 0 or 1."")
        except ValueError as ve:
            print(ve)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False
"
death,"class death(GeneralSemanticType):
    def __init__(self):
        self.description = ""Death status""
        self.format = ""Boolean 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
infectionstatus,"class infectionstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'Infection Status'
        self.format = 'The values should be either ""not infected"" or ""infected""'
        self.examples = ['not infected', 'infected']

    def super_cast(self, val):
        if val == 1:
            return 'not infected'
        elif val == 2:
            return 'infected'
        else:
            raise Exception('Invalid infection status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['not infected', 'infected']:
            return True
        else:
            return False"
phonenumber,"class phonenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Phone Number'
        self.format = 'Phone Number should be a numerical value with no special characters'
        self.examples = [1234567890, 9876543210, 1029384756, 5678901234, 5432106789]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 1000000000 or num > 9999999999:
            raise ValueError('Invalid phone number')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1000000000 <= casted_val <= 9999999999:
            return True
        else:
            return False"
causeofesrd,"class causeofesrd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cause of ESRD'
        self.format = 'Cause of ESRD should be represented as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return int(val)
        elif isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                raise Exception('The value cannot be casted to an integer')
        else:
            raise Exception('The value is not a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val not in range(1,8):
            raise Exception('The value is not in the valid range')
        else:
            return True"
calcium,"class calcium(GeneralSemanticType):

    def __init__(self):
        self.description = 'Calcium level in blood'
        self.format = 'Calcium level should be a floating point number'
        self.examples = [2.155, 2.365, 2.602, 2.839, 3.076]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except:
            raise TypeError(""Could not convert value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
phosphate,"class phosphate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Phosphate level in blood'
        self.format = 'Phosphate level should be a floating point number'
        self.examples = [0.378, 0.58, 0.945, 1.31, 1.675]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
cnaq,"
class cnaq(GeneralSemanticType):
    def __init__(self):
        self.description = 'CNAQ score'
        self.format = 'CNAQ score should be a floating point number'
        self.examples = [23.0, 28.0, 31.0, 34.0, 37.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
mnaasses,"
class mnaasses(GeneralSemanticType):

    def __init__(self):
        self.description = 'MNA Assessment Score'
        self.format = 'MNA Assessment Score should be a floating point number'
        self.examples = [8.0, 9.5, 12.0, 14.5, 17.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Cannot cast {val} to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
mnascreen,"class mnascreen(GeneralSemanticType):

    def __init__(self):
        self.description = 'MNA Screening Score'
        self.format = 'MNA Screening Score should be a floating point number'
        self.examples = [8.0, 10.0, 12.0, 14.0, 16.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input. Value should be convertible to a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0:
            return True
        else:
            return False"
mna,"class mna(GeneralSemanticType):
    def __init__(self):
        self.description = 'MNA Score'
        self.format = 'MNA Score should be a floating point number'
        self.examples = [16.5, 19.5, 23.125, 26.75, 30.375]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return 0 <= casted_val <= float('inf')
        else:
            return False"
infectionknowledge,"class infectionknowledge(GeneralSemanticType):
    def __init__(self):
        self.description = ""Knowledge about infection""
        self.format = ""Boolean""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        if val in [1, 2]:
            return bool(val - 1)
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
sexknowledge,"class sexknowledge(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of the individual'
        self.format = ""The sex should be represented as a single lower-case letter: 'm' or 'f'""
        self.examples = ['m', 'f', 'm', 'm', 'f']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['m', 'f']:
            return val
        else:
            return 'Invalid sex'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['m', 'f']:
            return True
        else:
            return False"
infectionresponse,"class infectionresponse(GeneralSemanticType):
    def __init__(self):
        self.description = 'Responses to the questions related to infections and antibiotics, where responses are coded numerically'
        self.format = 'Responses should be integer values between 1 and 3'
        self.examples = [1, 2, 3, 2, 1]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        int_val = int(val)
        if int_val in [1,2,3]:
            return int_val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        elif casted_val in [1,2,3]:
            return True
        else:
            return False"
ageresponse,"class ageresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the respondents'
        self.format = 'Age should be an integer representing the number of years'
        self.examples = [20, 40, 60, 80, 100]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
sexresponse,"class sexresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sex of the respondents'
        self.format = ""Sex should be a single character 'm' or 'f'""
        self.examples = ['m', 'f', 'm', 'f', 'm']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['m', 'f']:
            return val
        else:
            raise Exception('Invalid sex response')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['m', 'f']:
            return True
        else:
            return False"
numbercount,"class numbercount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of an entity'
        self.format = 'Count should be formatted as an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
geneticvariant,"class geneticvariant(GeneralSemanticType):

    def __init__(self):
        self.description = 'Genetic variant of a sample'
        self.format = ""Values must be either 'KO' or 'WT'""
        self.examples = ['KO', 'WT', 'KO', 'WT', 'KO']

    def super_cast(self, val):
        casted_val = str(val).upper()
        if casted_val in ['KO', 'WT']:
            return casted_val
        else:
            raise Exception(""Invalid Value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['KO', 'WT']:
            return True
        else:
            return False"
weightingrams,"
class weightingrams(GeneralSemanticType):
    def __init__(self):
        self.description = 'Weight in grams'
        self.format = 'Weights should be formatted as a floating point number (in grams) with one decimal place for milligrams'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            # Try to convert the value to a float and round it to 1 decimal place
            return round(float(val), 1)
        except Exception as e:
            print(f""Could not cast value: {val} to float. Error: {e}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is greater than or equal to 0 and not None
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
usubjidentifier,"class usubjidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'The unique identifier of a subject within a study'
        self.format = 'USubJID must be a string'
        self.examples = ['CRC305C-9004-301', 'CRC305C-9060-337', 'CRC305C-9026-314', 'CRC305C-9018-309', 'CRC305C-9021-310']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
bsrefidentifier,"class bsrefidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'The unique identifier of a reference within a study'
        self.format = 'BSRefID must be a string'
        self.examples = ['CRC305C-9004-d0', 'CRC305C-9061-d1', 'CRC305C-9028-d0', 'CRC305C-9018-d3', 'CRC305C-9004-d3']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(r'^CRC305C-\d{4}-d\d$', casted_val):
            return True
        else:
            return False"
bsdy,"class bsdy(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of days since the start of a study'
        self.format = 'BSDY should be a non-negative integer'
        self.examples = [0, 1, 3, 5, 7]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return max(int(val), 0)
        elif isinstance(val, int):
            return max(val, 0)
        else:
            raise ValueError('Invalid input')
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
visitnum,"
class visitnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of visits by a subject to a study'
        self.format = 'VisitNum should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and val > 0:
            return val
        elif isinstance(val, float) and val > 0:
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return 'invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'invalid':
            return True
        else:
            return False"
bsblfl,"class bsblfl(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""In upper-case and as a string""
        self.examples = ['Y', 'N', 'Y', 'N', 'Y']

    def super_cast(self, val):
        if str(val).upper() == 'Y':
            return 'Y'
        else:
            return 'N'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Y', 'N']:
            return True
        else:
            return False"
lognumber,"class lognumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Subject Log Number'
        self.format = 'Subject Log Number should be a numeric string'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        try:
            return str(val)
        except ValueError as ve:
            raise Exception(f'Invalid value: {val}. Error: {str(ve)}')
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^\d+$"", casted_val):
            return True
        else:
            return False"
pancescore,"class pancescore(GeneralSemanticType):
    def __init__(self):
        self.description = 'PANCE score of a participant'
        self.format = 'PANCE score should be a positive integer'
        self.examples = [453, 445, 561, 431, 500]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise ValueError
        except ValueError:
            raise ValueError(""Invalid value for PANCE score"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
diseasename,"class diseasename(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a disease'
        self.format = 'Only the first letter of each word in the disease name should be capitalized'
        self.examples = ['Rheumatoid Arthritis', 'Relapsing Remitting Multiple Sclerosis/ Clinically Isolated Syndrome Population', 'Obesity', 'Epilepsy', 'Type 1 Diabetes']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
coreoutcome,"class coreoutcome(GeneralSemanticType):
    def __init__(self):
        self.description = ""Description of a core outcome""
        self.format = ""Only the first letter of each word in the core outcome description should be capitalized""
        self.examples = ['Overall Survival', 'Swollen Joints', 'Mortality', 'Mortality ', 'Seizure Severity']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str):
            return val.title()
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
timeinminutes,"class timeinminutes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time in minutes'
        self.format = 'Time should be formatted as a floating point number with one decimal place'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
celsiustemperature,"class celsiustemperature(GeneralSemanticType):

    def __init__(self):
        self.description = 'Temperature in Celsius'
        self.format = 'Temperature should be formatted as a floating point number with one decimal place'
        self.examples = [36.1, 36.2, 36.35, 37.675, 39.7]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -273.15 and not math.isnan(casted_val):
            return True
        else:
            return False"
lizardidentifier,"class lizardidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique ID for each lizard'
        self.format = ""ID should be a string in the format 'KMW_XXX'""
        self.examples = ['KMW_001', 'KMW_002', 'KMW_003', 'KMW_004', 'KMW_005']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return bool(re.match('^KMW_\d{3}$', casted_val))"
environment,"class environment(GeneralSemanticType):
    def __init__(self):
        self.description = ""Context or environment of the study""
        self.format = ""A string representing the environment of the study""
        self.examples = ['natural', 'urban', 'natural', 'urban', 'natural']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['natural', 'urban']:
            return True
        else:
            return False"
snoutventlength,"class snoutventlength(GeneralSemanticType):

    def __init__(self):
        self.description = 'Snout-vent length (SVL) of the lizard in mm'
        self.format = 'SVL should be a floating point number in mm'
        self.examples = [71.0, 67.0, 70.0, 66.0, 65.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Unable to cast the value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 50.0 <= casted_val <= 75.0:
            return True
        else:
            return False"
crestpresence,"class crestpresence(GeneralSemanticType):
    def __init__(self):
        self.description = ""Presence of a crest""
        self.format = ""boolean value in string format""
        self.examples = ['0', '1', '0', '1', '0']

    def super_cast(self, val):
        if str(val) in ['0', '1']:
            return str(val)
        else:
            raise Exception(""Invalid value, it should be either '0' or '1'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1']:
            return True
        else:
            return False"
areaundercrest,"class areaundercrest(GeneralSemanticType):

    def __init__(self):
        self.description = 'Area under the crest of the lizard'
        self.format = 'Area under crest should be a floating point number in square millimeters'
        self.examples = [0.5724, 0.4438, 0.510933333333333, 0.5696, 0.4697]

    def super_cast(self, val):
        try:
            return round(float(val), 6) if not pd.isna(val) else float('nan')
        except ValueError:
            raise Exception(""Invalid value for areaundercrest"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and self.examples[0] <= casted_val <= self.examples[-1]:
            return True
        else:
            return False"
tailheight,"class lizardtailheight(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Maximum height of the tail of the lizard'
        self.format: str = 'Tail height should be a floating point number'
        self.examples: list = [0.316066666666667, 0.311766666666667, 0.301533333333333, 0.362533333333333, 0.295233333333333]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            raise Exception(""Invalid input, expecting a float or integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.1456 <= casted_val <= 0.6142:
            return True
        else:
            return False"
taildistance,"class taildistance(GeneralSemanticType):
    def __init__(self):
        self.description = 'Distance from the base of the lizard to the end of the crest'
        self.format = 'In millimeters and as a floating point number'
        self.examples = [2.355533, 1.9264, 2.249033, 2.0261, 2.0804]

    def super_cast(self, val):
        try:
            return round(float(val), 6) if not pd.isna(val) else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and 1.2652 <= casted_val <= 2.43633333333333:
            return True
        else:
            return False"
timeseries,"class timeseries(GeneralSemanticType):
    def __init__(self):
        self.description = 'Time series data for the experiment'
        self.format = 'Data should be stored as a string'
        self.examples = ['BL', '5', '10', '15', '20']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 'BL':
            return 'BL'
        elif isinstance(val, str) and re.match('^\d+$', val):
            return val
        else:
            return 'Invalid value'
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['BL'] or re.match('^\d+$', casted_val):
            return True
        else:
            return False"
sedationscore,"class sedationscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sedation score of a rat'
        self.format = 'Score should be an integer value between 0 and 19'
        self.examples = [0, 4, 7, 10, 14]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) and 0 <= val <= 19:
            return val
        else:
            raise Exception('Invalid sedation score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val) or (isinstance(casted_val, int) and 0 <= casted_val <= 19):
            return True
        else:
            return False"
ratname,"class ratname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a rat'
        self.format = 'Data should be stored as a string'
        self.examples = ['Rat 1', 'Rat 2', 'Rat 3', 'Rat 4', 'Rat 5']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif re.match('^Rat \\d+$', val):
            return val
        else:
            return 'Invalid rat name'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid rat name':
            return False
        else:
            return True"
sequencecount,"class sequencecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'A sequence count of entities'
        self.format = 'Sequence count should be an integer'
        self.examples = [94, 97, 11, 15, 47]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 150:
            return True
        else:
            return False"
binarytraining,"class binarytraining(GeneralSemanticType):

    def __init__(self):
        self.description = 'Binary representation of an entity undergoing training'
        self.format = 'Binary representation should be an integer'
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if casted_val in [0, 1]:
                return True
        return False"
binarysex,"class binarysex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Binary representation of sex'
        self.format = 'Binary sex representation should be an integer'
        self.examples = [1, 1, 1, 1, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [1, 2]:
                return casted_val
            else:
                raise Exception(""Invalid value"")
        except ValueError:
            raise Exception(""Value cannot be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
violencetotalcount,"class violencetotalcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total count of violent incidents'
        self.format = 'Violence count should be an integer'
        self.examples = [0, 0, 0, 0, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= 18:
            return True
        else:
            return False"
binaryviolence,"class binaryviolence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Binary representation of violence occurrence'
        self.format = 'Binary violence representation should be an integer'
        self.examples = [0, 0, 1, 0, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except (TypeError, ValueError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
binaryworkduration,"class binaryworkduration(GeneralSemanticType):
    def __init__(self):
        self.description = 'Binary representation of work duration'
        self.format = 'Binary work duration representation should be an integer'
        self.examples = [1, 1, 1, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError(f""Invalid value: {val}. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (casted_val == 0 or casted_val == 1):
            return True
        else:
            return False"
binaryagegroup,"class binaryagegroup(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary representation of an age group""
        self.format = ""Binary age group representation should be an integer""
        self.examples = [0, 0, 1, 1, 0]

    def super_cast(self, val):
        return int(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
violencenumber,"class violencenumber(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Violence number representation'
        self.format: str = 'Violence number should be a float'
        self.examples: list = [0.0, 39.0, 18.0, 36.0, float('nan')]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if 0 <= casted_val <= 112:
            return True
        else:
            return False"
daysobserved,"class daysobserved(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days in which observations were made'
        self.format = 'Number of days should be a positive floating point number.'
        self.examples = [533.0, 0.0, 100.0, 365.0, 1505.0]
        
    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
medicationpossessionratio,"class medicationpossessionratio(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ratio of the total days of medication supplied over the observation period'
        self.format = 'A positive floating point number'
        self.examples = [88.028, 8.219178, 101.762, 105.458, 133.33333]
        
    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '.')
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('nan'):
            return True
        else:
            return False"
categorization,"class categorization(GeneralSemanticType):

    def __init__(self):
        self.description = 'Categorization of data (1, 2, 3, 4)'
        self.format = 'Categorization should be an integer between 1 and 4.'
        self.examples = [1, 2, 3, 4, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1 <= casted_val <= 4:
                return casted_val
            else:
                raise ValueError(""Value should be between 1 and 4."")
        except ValueError:
            raise ValueError(""Invalid value. Expected an integer between 1 and 4."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
booleanindicator,"class booleanindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean indicator""
        self.format = ""Integer values""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
datetimestamp,"class datetimestamp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date of a certain event or observation'
        self.format = 'Dates should be in the format ""YYYY-MM-DD""'
        self.examples = ['2013-01-31', '2013-03-01', '2013-08-13', '2013-04-16', '2013-08-01']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').date()
            except ValueError:
                raise Exception(""Invalid string format for date. Expected format: 'YYYY-MM-DD'"")
        elif isinstance(val, datetime):
            return val.date()
        else:
            raise Exception(""Invalid value type for date. Expected string or datetime"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime.date):
            return True
        else:
            return False"
abundance,"class abundance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Abundance values'
        self.format = 'A floating point number with three decimal places'
        self.examples = [0.0, 0.083, 0.273, 0.917, 0.6]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(""Invalid value. Expected a number."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
presenceabsence,"class presenceabsence(GeneralSemanticType):

    def __init__(self):
        self.description = 'Presence or Absence values'
        self.format = 'Presence or Absence values should be a floating point number with three decimal places'
        self.examples = [0.0, 0.083, 0.286, 0.5, 0.42]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (0 <= casted_val <= 1):
            raise Exception(f'Invalid value: {casted_val}. Expected a value between 0 and 1.')
        return True"
followupperiod,"class followupperiod(GeneralSemanticType):

    def __init__(self):
        self.description = 'The follow up period of patients in months'
        self.format = 'Positive number'
        self.examples = [113.0, 52.0, 73.0, 6.0, 254.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                raise ValueError(""Value cannot be negative"")
            return float_val
        except ValueError:
            raise ValueError(""Invalid input value. Expected a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
booleanmedicalhistory,"class booleanmedicalhistory(GeneralSemanticType):
    def __init__(self):
        self.description = ""Medical History in boolean""
        self.format = ""float representation of boolean""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val == 1.0 or val == '1.0':
            return 1.0
        elif val == 0.0 or val == '0.0':
            return 0.0
        else:
            raise Exception(""Invalid value. Expected 0.0 or 1.0"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
igccc,"class igccc(GeneralSemanticType):

    def __init__(self):
        self.description = 'The IGCCC score of patients'
        self.format = 'IGCCC score should be a positive number between 0 and 3 inclusive'
        self.examples = [1.0, 0.0, 0.0, 0.0, 1.0]

    def super_cast(self, val):
        if not math.isnan(val):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 3:
            return True
        else:
            return False"
facility,"class facility(GeneralSemanticType):

    def __init__(self):
        self.description = 'Facility'
        self.format = 'Facility values should be strings'
        self.examples = ['2', ' ', '3', '1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '3', '4', ' ']:
            return True
        else:
            return False"
timefromtesttoartinitiation,"class timefromtesttoartinitiation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Time from test to ART initiation""
        self.format = ""Time from test to ART initiation values should be strings""
        self.examples = ['1', ' ', '6', '4', '3']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit():
            int_val = int(casted_val)
            if 1 <= int_val <= 6:
                return True
        return False"
entrypoint,"class entrypoint(GeneralSemanticType):

    def __init__(self):
        self.description = 'Entry Point'
        self.format = 'Entry point values should be strings'
        self.examples = ['1', '2', '3', '1', '2']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '3']:
            return True
        else:
            return False"
numberofcontacts,"class numberofcontacts(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Contacts'
        self.format = 'Positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
contactnumber,"class contactnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Contact Number'
        self.format = 'Contact number should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for contact number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
csex,"class csex(GeneralSemanticType):
    def __init__(self):
        self.description = ""A gender""
        self.format = ""In lower-case and as a string""
        self.examples = ['male', 'female', 'unknown', 'male', 'female']

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.lower()
            if val == '1' or val == 'male':
                return 'male'
            elif val == '2' or val == 'female':
                return 'female'
            else:
                return 'unknown'
        else:
            raise ValueError(""Invalid input type. Expected a string"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female', 'unknown']:
            return True
        else:
            return False"
cage,"class cage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cage'
        self.format = 'Cage should be a positive integer'
        self.examples = [41, 49, 42, 26, 54]
    
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 17 <= casted_val <= 80:
            return True
        else:
            return False"
crelationship,"class crelationship(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary relationship status""
        self.format = ""In lower-case and as a string""
        self.examples = ['relationship exists', 'no relationship', 'unknown', 'relationship exists', 'no relationship']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['1', 'relationship exists']:
            return 'relationship exists'
        elif str_val in ['2', 'no relationship']:
            return 'no relationship'
        else:
            return 'unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['relationship exists', 'no relationship', 'unknown']:
            return True
        else:
            return False"
cmaritalstatus,"class cmaritalstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'C Marital Status'
        self.format = 'C Marital status should be a positive integer'
        self.examples = [1, 1, 1, 2, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value must be convertible to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 11:
            return True
        else:
            return False"
ctestperiod,"
class ctestperiod(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'C Test Period'
        self.format: str = 'C Test period should be a positive integer'
        self.examples: list = [4, 5, 1, 5, 1]
    
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
chivstatus,"class chivstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'C HIV Status'
        self.format = 'C HIV status should be a positive integer'
        self.examples = [1, 4, 1, 4, 1]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(1, 5):
                return casted_val
            else:
                raise ValueError
        except ValueError:
            print(""Invalid value!"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
ctimefromtesttoart,"class ctimefromtesttoart(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'C Time from test to ART'
        self.format: str = 'C Time from test to ART values should be strings'
        self.examples: list = ['5', '1', '6', '2', ' ']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and 1 <= int(casted_val) <= 6:
            return True
        else:
            return False"
experimentalgroup,"class experimentalgroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Experimental group in a scientific study'
        self.format = 'String may contain alphanumeric characters and special symbols'
        self.examples = ['yw/w; 1407/+ ', '3 an, 8 mfs', 'w/w ; UAS-Mito(119a) / +', '3 an, 7 mfs', 'yw/Y ; UAS-WT-Mito(119a)/ 1407-GAL4']

    def super_cast(self, val):
        if pd.isna(val):
            return val
        else:
            return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
statisticalmeasure,"class statisticalmeasure(GeneralSemanticType):
    def __init__(self):
        self.description = 'Statistical measure such as mean or SEM'
        self.format = 'String representing the statistical measure'
        self.examples = ['mean', 'SEM', 'mean', 'SEM', 'mean']

    def super_cast(self, val):
        if pd.isna(val):
            return val
        else:
            return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['mean', 'SEM']:
            return True
        else:
            return False"
measurementvalue,"class measurementvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'Measurement value in a scientific study'
        self.format = 'Value should be a floating point number'
        self.examples = [0.6924666055506022, 0.0699094088673044, 0.6407124011877533, 0.07394676064625422, 1.75]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif isinstance(casted_val, float):
            return True
        else:
            return False"
healthtype,"class healthtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type related to a certain health aspect'
        self.format = 'Health type should be a floating point number ranging from 15 to 18'
        self.examples = [15.0, 15.5, 16.0, 16.5, 17.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if 15 <= num <= 18:
                return num
            else:
                raise Exception('Invalid health type')
        except ValueError:
            raise Exception('Invalid value. A number was expected.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 15 <= casted_val <= 18:
            return True
        else:
            return False"
healthvalue,"class healthvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value related to a certain health aspect'
        self.format = 'A floating point number ranging from 0 to 100'
        self.examples = [34.51, 32.54, 31.01, 29.53, 26.17]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 100:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val is not None and 0 <= casted_val <= 100"
logarithm,"class logarithm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Logarithm of a quantity'
        self.format = 'A floating point number'
        self.examples = [1.588, -0.71, 4.061, 2.891, 1.758, -0.73, 1.573, 6.737]

    def super_cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        else:
            return max(0.0, val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
caseidentifier,"class caseidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Case ID number'
        self.format = 'Case ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value, cannot be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
ageinmonths,"class ageinmonths(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of patient in months'
        self.format = 'Age should be an integer'
        self.examples = [6, 23, 19, 4, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be able to convert into an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
weightinkg,"class weightinkg(GeneralSemanticType):
    def __init__(self):
        self.description = 'Weight of patient'
        self.format = 'Weight should be a floating point number in kilograms'
        self.examples = [3.4, 15.2, 14.2, 3.0, 3.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise TypeError(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ventricularseptaldefectdiameter,"class ventricularseptaldefectdiameter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diameter of ventricular septal defect'
        self.format = 'Diameter should be a floating point number'
        self.examples = [1.37, 0.75, 1.36, 1.0, 0.9]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
pulmonaryhypertension,"class pulmonaryhypertension(GeneralSemanticType):

    def __init__(self):
        self.description = 'Pulmonary hypertension of patient'
        self.format = 'In mmHg'
        self.examples = [23, 20, 19, 16, 17]

    def super_cast(self, val):
        # if the value is not a number, raise an error
        if not isinstance(val, (int, float)):
            raise ValueError(f'Invalid value: {val}. Expected a number')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('inf'):
            return True
        else:
            return False"
ejectionfraction,"class ejectionfraction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ejection fraction of the heart'
        self.format = 'Ejection fraction should be an integer'
        self.examples = [63, 65, 63, 63, 60]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be convertible to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
whitebloodcellcount,"class whitebloodcellcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'White Blood Cell count of patient'
        self.format = 'A floating point number'
        self.examples = [13.0, 9.7, 9.03, 15.0, 11.3]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value for white blood cell count"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
redbloodcellcount,"class redbloodcellcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Red Blood Cell count of patient'
        self.format = 'RBC count should be a floating point number in units of 10^12/L'
        self.examples = [3.97, 4.0, 4.6, 3.67, 4.56]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
meanredcellvolume,"class meanredcellvolume(GeneralSemanticType):

    def __init__(self):
        self.description = ""Mean Red Cell Volume in patient's blood""
        self.format = 'MCV should be a floating point number'
        self.examples = [78.8, 83.9, 81.2, 84.2, 78.7]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Failed to cast value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
meanredcellhemoglobin,"
class meanredcellhemoglobin(GeneralSemanticType):

    def __init__(self):
        self.description = ""Mean Red Cell Hemoglobin in patient's blood""
        self.format = 'Floating point number in picograms'
        self.examples = [24.4, 27.8, 29.2, 29.7, 28.3]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input. Expected a numeric value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
lacticdehydrogenase,"class lacticdehydrogenase(GeneralSemanticType):

    def __init__(self):
        self.description = ""Lactic Dehydrogenase level in patient's blood""
        self.format = 'LDH level should be a floating point number'
        self.examples = [267.0, 277.0, 255.0, 304.8, 256.26]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""Invalid value. The value should be a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
binaryinput,"class binaryinput(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary input""
        self.format = ""A float number""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return float(val)
        else:
            raise Exception('Invalid binary input value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
binaryoutcome,"class binaryoutcome(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary outcome""
        self.format = ""Integer value""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and val in [0.0, 1.0, 0, 1]:
            return int(val)
        else:
            raise ValueError('Input value should be either 0.0, 1.0, 0 or 1.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
deviceidentifier,"class deviceidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a device'
        self.format = 'Device identifier should be a string of alphanumeric characters'
        self.examples = ['ref', 'C10', 'C11', 'C12', 'C13']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
accelerometeraxis,"class accelerometeraxis(GeneralSemanticType):

    def __init__(self):
        self.description = 'Axis of an accelerometer reading'
        self.format = 'A single lowercase character'
        self.examples = ['x', 'y', 'z']

    def super_cast(self, val):
        casted_val = str(val).lower()
        if casted_val in ['x', 'y', 'z']:
            return casted_val
        else:
            raise ValueError(""Invalid value, expected one of ['x', 'y', 'z']"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['x', 'y', 'z']:
            return True
        else:
            return False"
runidentifier,"class runidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a run'
        self.format = 'Positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 1:
                return int_val
            else:
                raise ValueError(""Invalid input. Value should be a positive integer."")
        except Exception as e:
            raise ValueError(""Invalid input. Value should be a positive integer."") from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
acceleration,"class acceleration(GeneralSemanticType):
    def __init__(self):
        self.description = 'Acceleration data'
        self.format = 'Acceleration should be a positive floating point number'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
frequency,"class frequency(GeneralSemanticType):
    def __init__(self):
        self.description = 'Frequency'
        self.format = 'Frequency should be a floating point number rounded to 6 decimal places'
        self.examples = [0.140000, 0.297000, 0.377000, 0.652695, 0.047904]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            raise Exception('Invalid frequency')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
powerlevel,"class powerlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Power level reading from an accelerometer'
        self.format = 'Power level should be a positive floating point number'
        self.examples = [10.0, 20.0, 30.0, 40.0, 50.0]

    def super_cast(self, val):
        try:
            float_val = round(float(val), 2)
            if float_val < 0:
                raise ValueError(""Value must be a positive number"")
            return float_val
        except ValueError as ve:
            return str(ve)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
vaccinatedcount,"class vaccinatedcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vaccinated individuals'
        self.format = 'Number of vaccinated individuals should be a float'
        self.examples: list = [2.68, 3.78, 3.58, 3.0, 2.81]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid input: value cannot be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if casted_val < 0:
            raise Exception(""Invalid input: number of vaccinated individuals cannot be negative."")
        return True"
citypoliocases,"class citypoliocases(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of polio cases in a city'
        self.format = 'float'
        self.examples = [10.41, 10.73, 10.92, 10.66, 9.91]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace("","", ""."") 
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
streetaddress,"class streetaddress(GeneralSemanticType):

    def __init__(self):
        self.description = 'Street Address'
        self.format = 'The string should not contain any special characters other than spaces and alphanumeric characters'
        self.examples = ['100th Ave', '102nd Ave', '100th Ave NE', '102nd Ave NE', 'Bellevue Wy NE']

    def super_cast(self, val):
        address = str(val).replace('†', '').strip()
        if not re.match('^[A-Za-z0-9 ]+$', address):
            raise ValueError('Street address must only contain alphanumeric characters and spaces')
        return address

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not re.match('^[A-Za-z0-9 ]+$', casted_val):
            return False
        return True"
participantnumber,"class participantnumber(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""Participant's unique identification number""
        self.format = 'Participant number should be a whole number without any decimal places'
        self.examples = [101, 102, 103, 104, 106]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return ""Invalid value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 101 <= casted_val <= 152:
            return True
        else:
            return False"
age,"class age(GeneralSemanticType):
    def __init__(self):
        self.description = 'The age of a person'
        self.format = 'Age should be a decimal number'
        self.examples = [65.0, 60.0, 51.0, 40.0, 30.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if '-' in val:  # it's an age range
                val = val.split('-')
                val = (float(val[0]) + float(val[1])) / 2  # taking the average of the age range
            else:
                val = float(val)
        elif isinstance(val, int):
            val = float(val)
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 120:
            return True
        else:
            return False
"
eyewear,"class eyewear(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of corrective eyewear used while driving'
        self.format = 'Value should be a string representing one of the valid eyewear types'
        self.examples = ['None', 'Glasses or Contacts', 'Contacts']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['None', 'Glasses or Contacts', 'Contacts']:
            return True
        else:
            return False"
biketrip,"class biketrip(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of trips taken when riding a bicycle'
        self.format = 'Value should be a string of trip types separated by commas'
        self.examples = ['Exercise,Recreation,Commuting (i.e., traveling to/from work)', 'Recreation', 'Exercise,Recreation']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Exercise','Recreation', 'Commuting (i.e., traveling to/from work)']
        for trip in casted_val.split(','):
            if trip not in valid_values:
                return False
        return True"
bikemiles,"class bikemiles(GeneralSemanticType):
    def __init__(self):
        self.description = 'Average miles ridden on bike per week'
        self.format = 'Value should be a string representing one of the valid mileage ranges'
        self.examples = ['5-10 miles', '1-5 miles', '10-20 miles', 'Less than 1 mile', '20-50 miles']
        
    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        valid_values = ['5-10 miles', '1-5 miles', '10-20 miles', 'Less than 1 mile', '20-50 miles', 'Never']
        casted_val = self.super_cast(val)
        if casted_val in valid_values:
            return True
        else:
            return False"
gender,"class gender(GeneralSemanticType):
    def __init__(self):
        self.description = ""A gender""
        self.format = ""In capitalized and as a string""
        self.examples = ['Male', 'Female', 'Male', 'Female', 'Male']
        
    def super_cast(self, val):
        if isinstance(val, int):
            if val == 1:
                return 'Male'
            elif val == 2:
                return 'Female'
            else:
                raise ValueError(f""Unexpected value {val}"")
        elif isinstance(val, str):
            if val.lower() in ['male', 'female', 'm', 'f', 'gender_m', 'gender_f']:
                return val.capitalize()
            else:
                raise ValueError(f""Unexpected value {val}"")
        else:
            raise TypeError(f""Unexpected type {type(val)}"")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Male', 'Female']:
            return True
        else:
            return False"
income,"class income(GeneralSemanticType):
    def __init__(self):
        self.description: str = ""Participant's annual household income""
        self.format: str = ""Value should be a string representing one of the valid income ranges""
        self.examples: list = ['$25,000 to less than $50,000', '$75,000 to less than $100,000', 'Less than $25,000', '$50,000 to less than $75,000', '$100,000 to less than $200,000']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif np.isnan(val):
            return float('nan')
        else:
            return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples or isinstance(casted_val, float) and np.isnan(casted_val):
            return True
        else:
            return False"
tracklayout,"class tracklayout(GeneralSemanticType):
    def __init__(self):
        self.description = ""Track layout""
        self.format = ""Whole number without any decimal places""
        self.examples = [24531, 43521, 15423, 53142, 35124]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and self.examples[0] <= casted_val <= self.examples[-1]:
            return True
        else:
            return False"
hasridden,"class hasridden(GeneralSemanticType):

    def __init__(self):
        self.description = ""Whether a person has ridden or not""
        self.format = ""A simple Yes/No string representation""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        str_val = str(val)
        if str_val.lower() in ['yes', 'no', 'unsure']:
            return str_val.capitalize()
        else:
            raise Exception()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No', 'Unsure']:
            return True
        else:
            return False"
levelofauthenticity,"class levelofauthenticity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of authenticity in simulated environment (on a scale of 0-100)'
        self.format = 'Whole number without decimal places'
        self.examples = [69, 80, 75, 90, 45]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, float) and val.is_integer():
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= 100:
            return True
        else:
            return False"
levelofcomfort,"class levelofcomfort(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of comfort when encountering certain scenarios (on a scale of 0-100)'
        self.format = 'Level of comfort should be a whole number without any decimal places'
        self.examples = [79, 25, 100, 76, 40]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. Expected a whole number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (5 <= casted_val <= 100):
            return True
        else:
            return False"
topicidentifier,"class topicidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a Topic'
        self.format = 'Topic IDs should be non-negative integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val < 0:
                raise ValueError(""Value cannot be negative"")
            return int_val
        except ValueError:
            raise ValueError(""Value cannot be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not isinstance(casted_val, int):
            return False
        else:
            return True"
topicdistribution,"class topicdistribution(GeneralSemanticType):
    def __init__(self):
        self.description = 'Distribution of a Topic'
        self.format = 'Topic distributions should be floating point numbers between 0 and 1'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            val = round(float(val), 3)
            if val < 0 or val > 1:
                raise ValueError()
            else:
                return val
        except Exception as e:
            raise Exception('Invalid topic distribution')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
wordincomputer,"class wordincomputer(GeneralSemanticType):

    def __init__(self):
        self.description = 'Word in Computer Science Topic'
        self.format = 'Words should be all lowercase'
        self.examples = ['data', 'inform', 'user', 'databas', 'use']

    def super_cast(self, val):
        return re.sub('\\W+', '', str(val)).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.islower():
            return True
        else:
            return False"
arrivalrate,"class arrivalrate(GeneralSemanticType):
    def __init__(self):
        self.description = 'The rate at which something occurs or is repeated over a particular period of time'
        self.format = 'A floating point number'
        self.examples = [10.0, 20.5, 100.0, 200.5, 1000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid input. Input should be a numeric value.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0:
            return False
        return True"
congestion,"class congestion(GeneralSemanticType):

    def __init__(self):
        self.description = 'The level of congestion in a given area'
        self.format = 'Congestion level should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 1:
                return None
            else:
                return num
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1:
            return True
        else:
            return False"
averagetraveltime,"class averagetraveltime(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'The average time taken to travel between two points'
        self.format = 'Average travel time should be a non-negative floating point number'
        self.examples = [24.88, 25.97, 26.83, 27.38, 29.22]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Average travel time cannot be negative')
            return num
        except ValueError as e:
            print(f'Error while casting: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val:
            return True
        else:
            return False"
averagewaitingusers,"class averagewaitingusers(GeneralSemanticType):
    def __init__(self):
        self.description = 'The average number of users waiting'
        self.format = 'Average waiting users should be a non-negative floating point number'
        self.examples = [91.82, 160.08, 497.91, 2451.11, 10263.02]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Could not cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
identifier,"class identifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an entity""
        self.format = ""Non-negative integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num.is_integer():
                return int(num)
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid ID value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
replication,"class replication(GeneralSemanticType):
    def __init__(self):
        self.description = ""Replication instance or number""
        self.format = ""In integer format""
        self.examples = [1, 2, 3, -10, -5]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val[1:])
            else:
                raise Exception(""Invalid string format."")
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return True
        else:
            return False"
rercapacity,"class rercapacity(GeneralSemanticType):
    def __init__(self):
        self.description = ""Capacity of RER (Réseau Express Régional), a hybrid suburban commuter/rapid transit system""
        self.format = ""RER capacity should be a non-negative floating point number""
        self.examples = [10.0, 20.5, 100.0, 200.5, 1000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid RER capacity')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
rerinterval,"class rerinterval(GeneralSemanticType):

    def __init__(self):
        self.description = 'Interval between two RERs (Réseau Express Régional), a hybrid suburban commuter/rapid transit system'
        self.format = 'RER interval should be a non-negative floating point number'
        self.examples = [6.0, 7.0, 8.0, 9.0, 10.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid RER interval')
            return num
        except ValueError:
            raise Exception('Invalid input. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        return True"
totalarrivedusers,"class totalarrivedusers(GeneralSemanticType):
    def __init__(self):
        self.description = 'The total number of users that have arrived'
        self.format = 'Total arrived users should be a non-negative floating point number'
        self.examples = [9846.0, 22920.0, 25757.0, 26204.25, 26883.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid total arrived users')
            return num
        except ValueError:
            raise Exception('Invalid input. Expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
totaldivertedusers,"class totaldivertedusers(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total number of users that have been diverted'
        self.format = 'Total diverted users should be a non-negative floating point number'
        self.examples = [2375.0, 19445.25, 23266.5, 23804.0, 24324.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid total diverted users')
            return num
        except Exception as e:
            raise ValueError('Invalid value. It should be a non-negative floating point number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
batchnumber,"
class batchnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Batch Number'
        self.format = 'Batch number should be an integer between 1 and 14'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 1 and num <= 14:
                return num
            else:
                return 'Invalid batch number'
        except ValueError:
            return 'Invalid batch number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 14:
            return True
        else:
            return False"
testnumber,"class testnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Test Number'
        self.format = 'Test number should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid test number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 4:
            return True
        else:
            return False"
materialtype,"class materialtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of Material'
        self.format = 'Material type should be a string representing the type of material'
        self.examples = ['Weldox 1300 ', 'Domex 700 ', 'AISI 316L']

    def super_cast(self, val):
        string = str(val).strip()
        if string in self.examples:
            return string
        else:
            return 'Invalid material type'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
thicknessmm,"class thicknessmm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Thickness in Millimeters'
        self.format = 'Thickness should be a float representing the thickness in millimeters'
        self.examples = [3.98, 4.03, 5.045, 5.99]

    def super_cast(self, val):
        try:
            num = float(val)
        except ValueError:
            raise Exception('Unable to cast to float')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 3.98 <= casted_val <= 5.99:
            return True
        else:
            return False"
punchmm,"class punchmm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Punch in Millimeters'
        self.format = 'Punch should be a float representing the punch in millimeters'
        self.examples = [10.0, 20.0, 30.0, 35.0, 40.0]

    def super_cast(self, val):
        num = float(val)
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val >= 10 and casted_val <= 40
"
diemm,"class diemm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Die in Millimeters'
        self.format = 'Die should be a float representing the die in millimeters'
        self.examples = [40, 60, 70, 80]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 40.0 and num <= 80.0:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
contactpointsmm,"class contactpointsmm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Contact Points in Millimeters'
        self.format = 'A float number representing the contact points in millimeters'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid contact points')
        except ValueError:
            raise Exception('The value is not castable to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
slidingmm,"
class slidingmm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sliding in Millimeters'
        self.format = 'Sliding should be a float representing the sliding in millimeters'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid sliding')
        except ValueError:
            raise Exception('Invalid value. Expected a float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, float):
            return True
        else:
            return False"
angle,"class angle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Angle in Degrees'
        self.format = 'Angle should be a float representing the angle in degrees'
        self.examples = [0.0, 45.0, 90.0, 135.0, 180.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
        except ValueError:
            raise Exception('Invalid angle')
        else:
            return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= math.inf:
            return True
        else:
            return False"
forceknm,"class forceknm(GeneralSemanticType):
    def __init__(self):
        self.description = 'Force in Kilo Newton Meters'
        self.format = 'Force should be a float representing the force in kilo newton meters'
        self.examples = [0.0, 500.0, 1000.0, 1500.0, 2000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Invalid force')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
bamm,"class bamm(GeneralSemanticType):

    def __init__(self):
        self.description = 'BA in Millimeters'
        self.format = 'BA should be a float representing the BA in millimeters'
        self.examples = [-21.85, -10, 0, 0.55]
        
    def super_cast(self, val):
        try:
            num = float(val)
            if num >= -21.85 and num <= 0.55:
                return num
            else:
                raise ValueError('Invalid BA')
        except ValueError as ve:
            print(f""Invalid input: {val}. Error: {ve}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val >= -21.85 and casted_val <= 0.55:
            return True
        else:
            return False"
current,"class current(GeneralSemanticType):

    def __init__(self):
        self.description = 'Current in Amperes'
        self.format = 'Current should be represented as a floating point number in Amperes'
        self.examples = [0.0, 0.25286, 0.50076, 0.75088, 0.99971]

    def super_cast(self, val):
        val = float(val)
        return round(val, 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
power,"class power(GeneralSemanticType):

    def __init__(self):
        self.description = 'Power in Watts'
        self.format = 'Power should be represented as a floating point number in Watts'
        self.examples = [0.0, 0.18871, 0.35331, 0.50332, 0.63947]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid power value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
voltage,"class voltage(GeneralSemanticType):
    def __init__(self):
        self.description = ""Voltage in Volts""
        self.format = ""Voltage should be represented as a floating point number in Volts""
        self.examples = [220.0, 220.0, 220.0, 220.0, 220.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0:
                raise Exception('Invalid voltage value')
            return val
        except ValueError:
            raise Exception('Value cannot be casted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        return True"
temperature,"class temperature(GeneralSemanticType):
    def __init__(self):
        self.description = ""A temperature value""
        self.format = ""Temperature should be formatted as a floating point number in Celsius units""
        self.examples = [27.6, 27.5, 27.4, 27.3, 27.2]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < -273.15:  # Temperature can't be less than absolute zero
                raise Exception('Invalid temperature value')
            return round(num, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -273.15:  # Temperature can't be less than absolute zero
            return True
        else:
            return False"
flowrate,"class flowrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flow rate in Litres per minute'
        self.format = 'Flow rate should be represented as a floating point number in Litres per minute'
        self.examples = [0.046985, 0.047651, 0.071626, 0.086969, 0.10166]

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                num = float(val)
                if num >= 0:
                    return num
                else:
                    raise ValueError('Invalid flow rate value')
            except ValueError:
                raise ValueError('Invalid input, expected a string that can be converted to float')
        elif isinstance(val, (int, float)):
            if val >= 0:
                return float(val)
            else:
                raise ValueError('Invalid flow rate value')
        else:
            raise TypeError('Invalid input, expected a string, int or float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
vehiclecount,"class vehiclecount(GeneralSemanticType):
    def __init__(self):
        self.description = ""Vehicle Count""
        self.format = ""Vehicle count should be a floating point number greater than or equal to 0""
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError(""Vehicle count cannot be negative."")
            return round(casted_val, 2)
        except ValueError:
            return ValueError(""Invalid input. Expected a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
agegroup,"class agegroup(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Age group of a person'
        self.format: str = 'The age group should be represented as strings'
        self.examples: list = ['Below 20', 'Between 21-25', 'Between 31-35', 'Between 36-40', 'Above 41']

    def super_cast(self, val):
        if isinstance(val, (int, float)) and not math.isnan(val):
            if val == 1:
                return 'Below 20'
            elif val == 2:
                return 'Between 21-25'
            elif val == 3:
                return 'Between 31-35'
            elif val == 4:
                return 'Between 36-40'
            elif val == 5:
                return 'Above 41'
            else:
                raise Exception('Invalid age group')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
fluency,"class fluency(GeneralSemanticType):
    def __init__(self):
        self.description = ""Fluency level in a language""
        self.format = ""The fluency level should be represented as strings""
        self.examples = ['Good', 'Poor', 'Average']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            raise TypeError(""Expected string, got %s"" % type(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Good', 'Poor', 'Average']:
            return True
        else:
            return False"
translationaccuracy,"class translationaccuracy(GeneralSemanticType):
    def __init__(self):
        self.description = ""The accuracy of a translation""
        self.format = ""Lowercase string""
        self.examples = ['correct', 'wrong', 'correct', 'wrong', 'correct']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['correct', 'wrong']:
            return True
        else:
            return False"
appratings,"class appratings(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating for different aspects of an app'
        self.format = 'A floating point number between 1 and 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        num = float(val)
        if num < 1 or num > 5:
            return None
        return round(num, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 5:
            return True
        else:
            return False"
dialogueactlabel,"class dialogueactlabel(GeneralSemanticType):
    def __init__(self):
        self.description = ""Dialogue Act Label""
        self.format = ""String in lower-case, words separated by underscores""
        self.examples = ['neutral_talk', 'negative_talk', 'reflection', 'command', 'behavior_description', 'labelled_praise']

    def super_cast(self, val):
        return str(val).lower().replace(' ', '_')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
talk,"class talk(GeneralSemanticType):
    def __init__(self):
        self.description = 'Talk'
        self.format = 'Talk should be a string, all lowercase, words separated by spaces'
        self.examples = ['yeah', 'no', 'there', 'okay', 'yes', 'i found the hat for potato head']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, int):
            return str(val)
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        if isinstance(casted_val, str):
            return True
        else:
            return False"
journalname,"class journalname(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Name of a Journal'
        self.format: str = 'Only the first letter of each word in the journal name should be capitalized, followed by year'
        self.examples: list = ['J Cataract Refract Surg.  2011', 'Patient Educ Couns.  2011', 'J Periodontol.  2011', 'J Oral Maxillofac Surg.  2011', 'Trials.  2011']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(r""^[A-Z][a-z]+\s[A-Z][a-z]+\s[A-Z][a-z]+\.\s+\d{4}$"")
        if pattern.match(casted_val):
            return True
        else:
            return False"
openaccessstatus,"class openaccessstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'Open Access status of a Journal'
        self.format = ""Should be either 'OA' or 'NOA'""
        self.examples = ['OA', 'NOA', 'NOA', 'NOA', 'OA']

    def super_cast(self, val):
        str_val = str(val)
        if str_val == 'OA' or str_val == 'NOA':
            return str_val
        else:
            raise Exception('Invalid Open Access status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['OA', 'NOA']:
            return True
        else:
            return False"
binarystatus,"class binarystatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary status""
        self.format = ""integer, either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        int_val = int(val)
        if int_val == 0 or int_val == 1:
            return int_val
        else:
            raise Exception('Invalid binary status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
impactfactor,"class impactfactor(GeneralSemanticType):

    def __init__(self):
        self.description = 'The impact factor of a journal'
        self.format = 'Impact factor should be formatted as a floating point number with three decimal places'
        self.examples = [2.264, 2.305, 2.602, 1.64, 2.496]

    def super_cast(self, val):
        num = float(val)
        return round(num, 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
citations,"class citations(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of citations a journal has'
        self.format = 'Number of citations should be a positive integer or zero'
        self.examples = [10, 31, 20, 10, 20]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(f""Value {val} can't be converted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
idtype,"class idtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'An identification number or type of location'
        self.format = 'The ID should be a positive integer or a string in capitalized format'
        self.examples = [1, 'Bus', 'Home', 'Sidewalk', 5]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                return val.capitalize()
        elif isinstance(val, int):
            if val > 0:
                return val
            else:
                raise Exception('Invalid ID number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        elif isinstance(casted_val, str) and casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
mpgindicator,"class mpgindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates whether a car's mileage per gallon (MPG) is above or below a certain threshold""
        self.format = ""Integer of either -1 or 1""
        self.examples = [-1, 1, -1, 1, -1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [-1, 1]:
            return True
        else:
            return False"
cylinderscount,"class cylinderscount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of cylinders in a car'
        self.format = 'Cylinder count should be an integer'
        self.examples = [3, 4, 6, 8]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(3, 8 + 1):
                return num
            else:
                return 'Invalid cylinders count'
        except ValueError:
            return 'Invalid cylinders count'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(3, 8 + 1):
            return True
        else:
            return False"
displacementvolume,"class displacementvolume(GeneralSemanticType):

    def __init__(self):
        self.description = 'Displacement volume of a car in cubic inches'
        self.format = 'Displacement volume should be a floating point number'
        self.examples = [68.0, 100.0, 200.0, 300.0, 455.0]
        self.valid_range = [68, 455]

    def super_cast(self, val):
        num = float(val)
        if num in np.arange(self.valid_range[0], self.valid_range[1] + 1, 0.1):
            return num
        else:
            raise Exception('Invalid displacement volume')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and self.valid_range[0] <= casted_val <= self.valid_range[1]:
            return True
        else:
            return False"
horsepower,"class horsepower(GeneralSemanticType):

    def __init__(self):
        self.description = 'Horsepower of a car'
        self.format = 'Horsepower should be an integer'
        self.examples = [46, 75, 100, 150, 230]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(46, 231):
                return num
            else:
                return ""Invalid horsepower""
        except ValueError:
            return ""Invalid horsepower""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(46, 231):
            return True
        else:
            return False"
weight,"class weight(GeneralSemanticType):
    def __init__(self):
        self.description = 'A weight, possibly associated with various entities and units'
        self.format = 'A floating point number'
        self.examples = [92.8, 1613.0, 10.5, 55.0, 0.9758315]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 3)
        elif isinstance(val, int):
            return float(val)
        elif isinstance(val, float):
            if math.isnan(val):
                return None
            return round(val, 3)
        else:
            raise ValueError('Invalid weight')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return True
        elif isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
modelyear,"class modelyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of car model'
        self.format = 'Model year should be an integer'
        self.examples = [70, 72, 75, 78, 82]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(70, 83):
                return num
            else:
                raise ValueError('Invalid model year')
        except ValueError:
            return 'Invalid model year'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(70, 83):
            return True
        else:
            return False"
originjapanindicator,"class originjapanindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""An indicator if the origin is Japan""
        self.format = ""Boolean (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError(""Value must be 0 or 1"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
webdomain,"class webdomain(GeneralSemanticType):

    def __init__(self):
        self.description = 'Web domain name'
        self.format = 'Domain names are typically lower-case, may include numbers and hyphens, and are separated by periods'
        self.examples = ['bitly.com', 'youtube.com', 'instagram.com', 'facebook.com', 'ow.ly']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,6}$', casted_val):
            return True
        else:
            return False"
biascore,"class biascore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Bias score'
        self.format = 'Bias score should be a floating point number between -1.0 (extreme left bias) to 1.0 (extreme right bias)'
        self.examples = [-0.351, -0.022, 0.22, 0.9838, -1.0]

    def super_cast(self, val):
        num = float(val)
        if -1.0 <= num <= 1.0:
            return num
        else:
            return 'Invalid bias score'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and -1.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
countryname,"class countryname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a Country'
        self.format = 'Country name should be the full name, capitalized'
        self.examples = ['United States', 'United Kingdom', 'Canada', 'India', 'Australia']

    def super_cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
examgrades,"class examgrades(GeneralSemanticType):
    def __init__(self):
        self.description = 'Exam grades'
        self.format = 'Grade should be a float within 0-100 range'
        self.examples = [50.0, 70.0, 80.0, 90.0, 100.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 100:
                raise Exception('Invalid grade')
            return round(num, 2)
        except:
            raise Exception(""Cannot cast the value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and (0 <= casted_val <= 100):
            return True
        else:
            return False"
performancecategory,"class performancecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Performance Category'
        self.format = 'Performance category should be a string'
        self.examples = ['Good', 'Very Good', 'Excellent', 'Satisfactory']

    def super_cast(self, val):
        val = str(val)
        if val not in self.examples:
            raise Exception('Invalid performance category')
        return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
incomelevel,"class incomelevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Income level'
        self.format = 'Should be a positive number or a string representing the income level'
        self.examples = [217500.0, '5000-10000', '10000-20000', 194000.0, 'More Than 20000']

    def super_cast(self, val):
        if isinstance(val, str):
            if val == 'Less Than 5000':
                return 0.0
            elif val == '5000-10000':
                return 7500.0
            elif val == '10000-20000':
                return 15000.0
            elif val == 'More Than 20000':
                return 20000.0
            else:
                raise Exception('Invalid income level')
        elif isinstance(val, (int, float)):
            if val >= 0:
                return float(val)
            else:
                raise Exception('Invalid income level')
        else:
            raise Exception('Invalid income level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
year,"class year(GeneralSemanticType):
    def __init__(self):
        self.description = ""A calendar year""
        self.format = ""Year should be formatted as a full 4-digit integer (e.g., 1980, 2021)""
        self.examples = [2000, 2010, 2020, 2030, 2040]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit() and len(val) == 4:
            return int(val)
        elif isinstance(val, (int, float)) and not math.isnan(val):
            return int(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and 0 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
month,"class month(GeneralSemanticType):
    def __init__(self):
        self.description = 'Month'
        self.format = 'Month should be capitalized and spelled out completely'
        self.examples = ['January', 'February', 'March', 'April', 'May']
    
    def super_cast(self, val):
        month_dict = {'1':'January', '2':'February', '3':'March', '4':'April', '5':'May', '6':'June', 
                      '7':'July', '8':'August', '9':'September', '10':'October', '11':'November', '12':'December',
                      'Enero':'January', 'Febrero':'February', 'Marzo':'March', 'Abril':'April', 'Mayo':'May'}

        if pd.isna(val):
            return float('nan')
        
        val = str(val).title()
        if val in month_dict.keys():
            return month_dict[val]
        else:
            return val
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
journalcount,"class journalcount(GeneralSemanticType):

    def __init__(self):
        self.description = ""The count of journals deposited""
        self.format = ""Count should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(str(val).strip())
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
articlecount,"class articlecount(GeneralSemanticType):
    def __init__(self):
        self.description = 'The count of articles deposited'
        self.format = 'Count should be formatted as an integer'
        self.examples = [100, 200, 300, 400, 500]

    def super_cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            return int(val)
        except:
            raise ValueError(""Invalid input value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
visitorcount,"class visitorcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The count of visitors'
        self.format = 'Count should be formatted as an integer'
        self.examples = [100, 200, 300, 400, 500]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
pageviewcount,"class pageviewcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'The count of page views'
        self.format = 'Count should be formatted as an integer'
        self.examples = [1000, 2000, 3000, 4000, 5000]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and np.isnan(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
malignancy,"class malignancy(GeneralSemanticType):

    def __init__(self):
        self.description = ""Malignancy status""
        self.format = ""Boolean represented as -1 or 1""
        self.examples = [-1, 1, -1, 1, -1]

    def super_cast(self, val):
        if val in [-1, 1]:
            return val
        else:
            raise Exception('Invalid malignancy value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [-1, 1]:
            return True
        else:
            return False"
cellfeature,"class cellfeature(GeneralSemanticType):
    def __init__(self):
        self.description = 'Cell feature in cancer diagnostic'
        self.format = 'Cell feature should be an integer between 1 and 10'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1 or val > 10:
                raise ValueError('Invalid cell feature value')
            return val
        except ValueError:
            raise ValueError('Invalid cell feature value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 10:
            return False
        return True"
legidentifier,"
class legidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Identifier for a leg of the journey'
        self.format: str = 'Leg ID should be formatted as an integer with no decimal places'
        self.examples: list = [5182, 6523, 5878, 1275, 8117]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and 1 <= casted_val <= 14661"
placeidentifier,"class placeidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Identifier for a place""
        self.format = ""Place ID should be formatted as an integer with no decimal places""
        self.examples = [256, 431, 700, 671, 166]
        
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 100 <= casted_val <= 815:
            return True
        else:
            return False"
numhops,"class numhops(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of hops'
        self.format = 'Number of hops should be formatted as an integer with no decimal places'
        self.examples = [1, 1, 1, 2, 2]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(""Invalid value. The value should be able to be casted to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
numlegs,"class numlegs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of legs'
        self.format = 'Integer'
        self.examples = [1, 2, 2, 1, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be converted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
count,"class count(GeneralSemanticType):
    def __init__(self):
        self.description = ""A count""
        self.format = ""Count should be a non-negative integer""
        self.examples = [215, 126, 153, 92, 757]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
replies,"class replies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of replies'
        self.format = 'Count should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(""Invalid value for 'replies'. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
nonreplies,"class nonreplies(GeneralSemanticType):
    def __init__(self):
        self.description = 'Count of non-replies'
        self.format = 'Count should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
replied,"class replied(GeneralSemanticType):
    def __init__(self):
        self.description = ""Response status""
        self.format = ""Capitalized string""
        self.examples = ['Yes', 'No', 'Yes', 'No', 'Yes']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Yes', 'No']:
            return True
        else:
            return False"
acceptabilityscore,"class acceptabilityscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'A score representing the acceptability of a car'
        self.format = 'The score should be -1, 0 or 1'
        self.examples = [-1, 0, 1, 1, -1]

    def super_cast(self, val):
        val = int(val)
        if val in [-1, 0, 1]:
            return val
        else:
            raise Exception('Invalid acceptability score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [-1, 0, 1]:
            return True
        else:
            return False"
pricecategory,"class pricecategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'A category representing the price of a car'
        self.format = 'The category should be one of 0, 1, 2, or 3'
        self.examples = [0, 1, 2, 3, 0]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in [0, 1, 2, 3]:
                return val
            else:
                return 'Invalid price category'
        except ValueError:
            return 'Invalid price category'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2, 3]:
            return True
        else:
            return False"
maintenancecategory,"class maintenancecategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'A category representing the maintenance cost of a car'
        self.format = 'The category should be one of 0, 1, 2, or 3'
        self.examples = [0, 1, 2, 3, 0]
    
    def super_cast(self, val):
        try:
            val = int(val)
            if val in [0, 1, 2, 3]:
                return val
            else:
                raise Exception('Invalid maintenance category')
        except ValueError:
            raise Exception('Invalid maintenance category')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2, 3]:
            return True
        else:
            return False"
doorsnumber,"
class doorsnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of doors in a car'
        self.format = 'A single integer between 2 and 5'
        self.examples = [2, 3, 4, 5, 2]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and val in [2, 3, 4, 5]:
            return int(val)
        else:
            raise Exception('Invalid number of doors')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [2, 3, 4, 5]:
            return True
        else:
            return False
"
personsnumber,"class personsnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The maximum number of persons that can be seated in a car'
        self.format = 'The number should be one of 2, 4, or 6'
        self.examples = [2, 4, 6, 4, 2]

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid input. Expected an integer value.')

        if val in [2, 4, 6]:
            return val
        else:
            raise Exception('Invalid number of persons')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [2, 4, 6]:
            return True
        else:
            return False"
luggagecapacity,"class luggagecapacity(GeneralSemanticType):

    def __init__(self):
        self.description = 'The luggage capacity of a car'
        self.format = 'The capacity should be one of 0, 1, or 2'
        self.examples = [0, 1, 2, 0, 1]

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid value')

        if val in [0, 1, 2]:
            return val
        else:
            raise Exception('Invalid luggage capacity')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
safetyrating,"class safetyrating(GeneralSemanticType):
    def __init__(self):
        self.description = 'The safety rating of a car'
        self.format = 'integer between 0 and 2'
        self.examples = [0, 1, 2, 0, 1]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in [0, 1, 2]:
                return val
            else:
                raise ValueError()
        except ValueError:
            raise Exception('Invalid safety rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 2:
            return True
        else:
            return False"
variable,"
class variable(GeneralSemanticType):
    def __init__(self):
        self.description = ""Variable related to sustainable development implications of climate change mitigation""
        self.format = ""Strings should not contain any special characters except for '|' and should be capitalized""
        self.examples = ['Land Cover|Forest', 'Price|Agriculture|Non-Energy Crops and Livestock|Index', 'Energy Intensity', 'GDP per capita', 'Secondary industry share']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and all(x.isalpha() or x.isspace() or x == '|' for x in casted_val):
            return True
        else:
            return False"
length,"class length(GeneralSemanticType):
    def __init__(self):
        self.description = ""Length of an object""
        self.format = ""Length should be formatted as a floating point number in cm""
        self.examples = [164.1, 152.2, 158.7, 144.0, 156.5]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace(',', '.')
        val = float(val)
        if 'mm' in str(val):
            val = val / 10  # converting mm to cm
        return round(val, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
width,"class width(GeneralSemanticType):
    def __init__(self):
        self.description = 'The width of an object in cm'
        self.format = 'Width should be represented as a float with two decimal places'
        self.examples = [10.50, 1.30, 100.00, 0.90, 21.00]

    def super_cast(self, val):
        # Handling the expected output of both class's cast() methods
        if isinstance(val, float) or isinstance(val, int):
            return round(float(val), 2)
        else:
            raise TypeError(""Expected value to be a float or int"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Perform sanity-check on the casted data
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
topic,"class topic(GeneralSemanticType):
    def __init__(self):
        self.description = ""Topic of the debate or election""
        self.format = ""The values should be 'election_debate' or None""
        self.examples = ['election_debate', None, 'election_debate', None, 'election_debate']

    def super_cast(self, val):
        if val == 'election_debate':
            return 'election_debate'
        elif pd.isna(val):
            return None
        else:
            raise Exception('Invalid topic value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['election_debate', None]:
            return True
        else:
            return False"
displayuniversalbotscores,"class displayuniversalbotscores(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Universal bot scores displayed'
        self.format: str = 'The values should be a float between 0 and 1'
        self.examples: list = [0.3, 0.4, 0.2, 0.6, 0.5]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise ValueError(""Invalid value. Value should be castable to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
bothuman,"class bothuman(GeneralSemanticType):
    def __init__(self):
        self.description = ""A bot or human""
        self.format = ""A string 'Human' or 'Bot'""
        self.examples = ['Human', 'Bot', 'Human', 'Bot', 'Human']

    def super_cast(self, val):
        if val in ['Human', 'Bot']:
            return val
        else:
            raise Exception('Invalid bothuman value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Human', 'Bot']:
            return True
        else:
            return False"
authentic,"class authentic(GeneralSemanticType):

    def __init__(self):
        self.description = 'Authenticity score'
        self.format = 'The values should be a float between 1 and 99'
        self.examples = [1, 43.37, 13.15, 99, 1.06]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""The input value could not be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 99:
            return True
        else:
            return False"
truthiness,"class truthiness(GeneralSemanticType):
    def __init__(self):
        self.description = ""A truthiness value""
        self.format = ""In lower-case and as a string""
        self.examples = ['deceit', 'honest', 'deceit', 'honest', 'deceit']

    def super_cast(self, val):
        if isinstance(val, str):
            lower_val = str(val).lower()
            if lower_val in ['deceit', 'honest']:
                return lower_val
            else:
                raise Exception('Invalid truthiness value')
        else:
            raise Exception('Invalid truthiness value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['deceit', 'honest']:
            return True
        else:
            return False"
emotionaltone,"class emotionaltone(GeneralSemanticType):

    def __init__(self):
        self.description = 'Emotional tone score'
        self.format = 'The values should be a float between 1 and 99'
        self.examples = [1, 99, 25.77, 72.854, 37.278]

    def super_cast(self, val):
        casted_val = float(val)
        if isinstance(casted_val, float):
            return casted_val
        else:
            raise Exception(""Invalid input! Input needs to be a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 99:
            return True
        else:
            return False
"
sentiment,"class sentiment(GeneralSemanticType):
    def __init__(self):
        self.description = ""Sentiment as a score or a category""
        self.format = ""Sentiment score as a float between 1.0 and 5.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val == 'positive':
                return 5.0
            elif val == 'negative':
                return 1.0
            else:
                raise Exception('Invalid sentiment value')
        else:
            float_val = float(val)
            if float_val >= 1 and float_val <= 5:
                return round(float_val, 1)
            else:
                raise Exception('Invalid sentiment score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 1.0 and casted_val <= 5.0:
            return True
        else:
            return False"
participationcode,"class participationcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Participation code'
        self.format = ""The values should be 'passive', 'active', 'junkie' or float('nan')""
        self.examples = ['passive', 'active', 'junkie', float('nan')]

    def super_cast(self, val):
        if val in ['passive', 'active', 'junkie']:
            return val
        elif math.isnan(float(val)):
            return float('nan')
        else:
            raise Exception('Invalid participationcode value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['passive', 'active', 'junkie'] or math.isnan(casted_val):
            return True
        else:
            return False"
tweetidentifier,"class tweetidentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique identifier for Tweets'
        self.format: str = 'Tweet ID should be a positive integer'
        self.examples: list = [1210000000000000000, 1210000000000000001, 1210000000000000002, 1210000000000000003, 1210000000000000004]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError(""Tweet ID should be a positive integer"")
            return casted_val
        except ValueError:
            raise ValueError(""Invalid input. Expected a positive integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError(""Invalid input. Expected a positive integer."")
        elif not isinstance(casted_val, int):
            raise ValueError(""Invalid input. Expected a positive integer."")
        else:
            return True"
useridentifier,"class useridentifier(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Unique identifier for Twitter users'
        self.format: str = 'User ID should be a positive integer'
        self.examples: list = [21948091, 1130000000000000000, 140822144, 202980899, 19012891]

    def super_cast(self, val):
        if pd.isnull(val):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0:
            return False
        else:
            return True"
postdate,"class postdate(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Date and time when the tweet was posted'
        self.format: str = ""Date and time in the format 'm/d/yyyy H:M'""
        self.examples: list = ['1/1/2020 1:54', '1/1/2020 3:52', '1/1/2020 4:09', '1/1/2020 4:21', '1/1/2020 16:14']

    def super_cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y %H:%M')
        except ValueError:
            raise ValueError(""Incorrect data format, should be 'm/d/yyyy H:M'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            if isinstance(casted_val, datetime):
                return True
            else:
                return False
        except ValueError:
            return False"
geotype,"class geotype(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of geographical data'
        self.format: str = ""Either 'Place' or 'LatLon'""
        self.examples: list = ['Place', 'LatLon', 'Place', 'Place', 'LatLon']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['Place', 'LatLon']:
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Place', 'LatLon']:
            return True
        else:
            return False"
place,"class place(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Place where the data is related to'
        self.format: str = ""String representing a place""
        self.examples: list = ['Melbourne; Victoria', 'Sydney; New South Wales', 'Adelaide; South Australia', 'Brisbane; Queensland', 'Perth; Western Australia']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
placetype,"class placetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of place where the tweet was posted'
        self.format = ""String 'city', 'admin', 'neighborhood', or 'poi'""
        self.examples = ['city', 'admin', 'neighborhood', 'poi', 'city']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['city', 'admin', 'neighborhood', 'poi']:
            return True
        else:
            return False"
source,"class source(GeneralSemanticType):
    def __init__(self):
        self.description = ""Source of the data""
        self.format = ""String representing the source of the data""
        self.examples = ['Rezende et al. 2007', 'literature', 'Dryad', 'Fricke et al 2017', 'unpublished']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
conditiontype,"class conditiontype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of condition for the experiment'
        self.format = 'Integer from 1 to 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val_int = int(val)
            if val_int in range(1, 5):
                return val_int
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
interviewerrating,"class interviewerrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Interviewer rating for the experiment'
        self.format = 'Integer from 1 to 13'
        self.examples = [1, 2, 3, 4, 13]

    def super_cast(self, val):
        try:
            val = int(val)
            if val in range(1, 14):
                return val
            else:
                raise ValueError('Invalid interviewer rating')
        except ValueError:
            raise ValueError('Invalid input: expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 14):
            return True
        else:
            return False"
affectrating,"class affectrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of affect for LGBT'
        self.format = 'Float from 0 to 100'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and 0 <= val <= 100:
            return val
        else:
            raise ValueError('Invalid affect rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, (int, float)) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
sexualorientation,"class sexualorientation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sexual orientation of the participant'
        self.format = 'Integer from 1 to 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, int) and val in range(1, 5):
            return val
        else:
            raise ValueError('Invalid sexual orientation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
booleanrepresentation,"class booleanrepresentation(GeneralSemanticType):
    def __init__(self):
        self.description = 'A boolean value'
        self.format = 'Boolean values should be represented as False and True'
        self.examples = [False, True, True, False, False]

    def super_cast(self, val):
        if isinstance(val, float):
            if math.isnan(val):
                return np.nan
            elif val == 0.0:
                return False
            elif val == 1.0:
                return True
            else:
                raise Exception('Invalid boolean representation')
        else:
            raise Exception('Invalid input type for super_cast')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [False, True, np.nan]:
            return True
        else:
            return False"
casenumber,"class casenumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Case Number'
        self.format = 'Case Numbers should be formatted as an integer'
        self.examples = [412304976, 412719110, 414161579, 414188842, 414239456]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                raise Exception(""Invalid value for case number"")
        else:
            raise Exception(""Invalid type for case number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
pid3code,"class pid3code(GeneralSemanticType):

    def __init__(self):
        self.description = 'PID3 Code'
        self.format = 'PID3 codes should be stored as integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in range(1, 6):
                return int_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
miatreatment,"class miatreatment(GeneralSemanticType):

    def __init__(self):
        self.description = 'MIA Treatment'
        self.format = 'MIA Treatment should be formatted as an integer'
        self.examples: list = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(1, 5):
                return num
            else:
                return 'Invalid MIA Treatment'
        except ValueError:
            return 'Invalid MIA Treatment'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(1, 5):
            return True
        else:
            return False"
miaevaluation,"class miaevaluation(GeneralSemanticType):

    def __init__(self):
        self.description = 'MIA Evaluation'
        self.format = 'MIA Evaluation should be formatted as an integer'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(1, 6):
                return num
            else:
                raise ValueError('Invalid MIA Evaluation')
        except ValueError:
            return 'Invalid MIA Evaluation'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in range(1, 6):
            return True
        else:
            return False"
surveydata,"class surveydata(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survey data collected from individuals, represented as numerical categories'
        self.format = 'Survey data is commonly represented as integers, with each integer representing a different category or response'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 10:
                raise ValueError('Invalid survey response')
            return num
        except ValueError:
            raise Exception('Invalid input. Expected an integer value between 1 and 10.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
surveydatawithnan,"class surveydatawithnan(GeneralSemanticType):
    def __init__(self):
        self.description = 'Survey data collected from individuals, represented as numerical categories. This data may contain missing values'
        self.format = 'Survey data is commonly represented as integers, with each integer representing a different category or response. Missing values are represented as NaN'
        self.examples = [1, 2, 3, 4, float('nan')]

    def super_cast(self, val):
        if pd.isnull(val):  # using pandas to handle NaN values
            return np.nan
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input for survey data')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val) or (1 <= casted_val <= 10):
            return True
        else:
            return False"
binarysurveydata,"class binarysurveydata(GeneralSemanticType):

    def __init__(self):
        self.description = ""Binary survey data""
        self.format = ""Integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Unable to cast value to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
militaryescalationindicator,"class militaryescalationindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""A military escalation indicator""
        self.format = ""In integers as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
regionindicator,"class regionindicator(GeneralSemanticType):
    def __init__(self):
        self.description = 'Region indicator'
        self.format = 'Integer numbers (1, 2, or 3)'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) and val in [1, 2, 3]:
            return val
        else:
            raise ValueError(f""Invalid value: {val}. Expected integer between 1 and 3."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in [1, 2, 3]"
politicaleventindicator,"class politicaleventindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""An indicator of a political event""
        self.format = ""A binary number""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Only 0 and 1 are accepted."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
politicalstatusindicator,"class politicalstatusindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political status indicator'
        self.format = 'Integer numbers (1, 2, or 3)'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
internalmeasure,"class internalmeasure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Internal measure'
        self.format = 'Internal measure should be a floating point number from -3 to 3'
        self.examples = [-3.0, -2.0, -1.0, 1.0, 3.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if -3 <= num <= 3:
                return num
            else:
                raise ValueError
        except ValueError:
            print(""Invalid input: super_cast can only convert numeric values within the range -3 to 3"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -3 <= casted_val <= 3:
            return True
        else:
            return False
"
opinion,"class opinion(GeneralSemanticType):
    def __init__(self):
        self.description = 'Opinion on a statement'
        self.format = 'Opinion should be a floating point number from 0 to 100'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'strongly disagree':
                return 0.0
            elif val.lower() == 'disagree':
                return 25.0
            elif val.lower() == 'no view':
                return 50.0
            elif val.lower() == 'agree':
                return 75.0
            elif val.lower() == 'strongly agree':
                return 100.0
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise Exception('Invalid opinion value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
humandevelopmentindex,"class humandevelopmentindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Human Development Index (HDI)'
        self.format = 'HDI should be a floating point number ranging from 0 (low human development) to 1 (high human development)'
        self.examples = [0.118, 0.485, 0.674, 0.787, 0.313]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
homicidenumber,"class homicidenumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Homicides'
        self.format = 'Number of Homicides should be a positive integer or NaN'
        self.examples = [4, 94, 229, 1418, 40974]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Number of Homicides')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
homiciderate,"class homiciderate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Homicide Rate'
        self.format = 'Homicide Rate should be a positive floating point number'
        self.examples = [0.2, 1.3, 3.1, 11.3, 82.1]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            num = float(val)
            if num >= 0:
                return round(num, 1)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
ageofcriminalresponsibility,"class ageofcriminalresponsibility(GeneralSemanticType):
    def __init__(self):
        self.description = 'Age of Criminal Responsibility'
        self.format = 'Age of Criminal Responsibility should be a positive integer'
        self.examples = [0, 9, 13, 14, 18]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid Age of Criminal Responsibility')
        except ValueError:
            raise Exception('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
studentrestorativescore,"class studentrestorativescore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Student score for understanding benefits of restorative justice mechanisms'
        self.format = 'Score should be a string, representing an integer value between 0 and 3'
        self.examples = ['0', '1', '2', '3']

    def super_cast(self, val):
        if str(val) in ['0', '1', '2', '3']:
            return str(val)
        else:
            raise Exception('Invalid score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['0', '1', '2', '3']:
            return True
        else:
            return False"
presimulationreflection,"class presimulationreflection(GeneralSemanticType):

    def __init__(self):
        self.description = 'Pre-simulation reflection scores'
        self.format = 'Scores are strings that can be cast to integers, ranging from 1 to 10'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return val
        else:
            return 'Invalid score'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() and 1 <= int(casted_val) <= 10:
            return True
        else:
            return False"
postsimulationreflection,"class postsimulationreflection(GeneralSemanticType):
    def __init__(self):
        self.description = 'Post-simulation reflection scores'
        self.format = 'Scores are integers, ranging from 1 to 10'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError(""Input value should be a string that can be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
finalexamscore,"class finalexamscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Final exam scores'
        self.format = 'Scores are integers ranging from 1 to 10'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) and 1 <= val <= 10:
            return val
        else:
            raise Exception('Invalid score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
trustscore,"class trustscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trust score'
        self.format = 'Float ranging from -1 to 1'
        self.examples = [0.021508, 0.153861, 0.255209, 0.443431, -0.353892]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if -1 <= float_val <= 1:
                return float_val
            else:
                raise ValueError(""Invalid value. Trust score should be between -1 and 1."")
        except ValueError as ve:
            raise ValueError(str(ve))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -1 <= casted_val <= 1:
            return True
        else:
            return False
"
partidentifier,"class partidentifier(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = ""Part Identifier""
        self.format = ""Boolean Integer (0 or 1)""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        # Since the only valid values are 1 and 2, we map them to 0 and 1 respectively.
        if val == 1 or val == '1':
            return 1
        elif val == 2 or val == '2':
            return 0
        else:
            raise ValueError(""Invalid input for part identifier."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validate that the casted value is either 0 or 1.
        if casted_val in [0, 1]:
            return True
        else:
            return False"
cond3dummy,"class cond3dummy(GeneralSemanticType):
    def __init__(self):
        self.description = ""A dummy boolean condition""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError(""Invalid input"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
racedummy,"class racedummy(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary representation of a race condition""
        self.format = ""integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
acad,"class acad(GeneralSemanticType):

    def __init__(self):
        self.description = 'Academic Level'
        self.format = 'Academic Level must be an integer between 1 and 5'
        self.examples = [5, 1, 3, 4, 1]

    def super_cast(self, val):
        try:
            if np.isnan(val):
                return float('nan')
            else:
                return int(val)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == float('nan'):
            return False
        else:
            return 1 <= casted_val <= 5"
gtfresh,"class gtfresh(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""A number""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
female,"class female(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary indicator of whether an individual is female""
        self.format = ""Integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in [0, 1]"
aar,"class aar(GeneralSemanticType):

    def __init__(self):
        self.description = 'AAR Value'
        self.format = 'A floating point number rounded to 9 decimal places'
        self.examples = [0.319333333, 0.929666667, 0.901333333, 0.481666667, 0.511333333]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -0.173 and casted_val <= 0.951:
            return True
        else:
            return False"
peakfreq,"class peakfreq(GeneralSemanticType):

    def __init__(self):
        self.description = 'Peak Frequency'
        self.format = 'Peak Frequency must be a floating point number'
        self.examples = [5.24346, 4.57849, 4.59651, 5.54869, 2.45276]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 5)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.13081 <= casted_val <= 5.55959:
            return True
        else:
            return False"
speakingtime,"class speakingtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Speaking Time'
        self.format = 'Speaking Time must be a floating point number'
        self.examples = [3.28, 3.56, 2.27, 1.47, 2.56]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        elif isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.61 <= casted_val <= 6.17:
            return True
        else:
            return False"
zwa,"class zwa(GeneralSemanticType):
    def __init__(self):
        self.description = 'ZWA Value'
        self.format = 'ZWA value must be a floating point number'
        self.examples = [7.666666667, 5.666666667, 7.0, 7.0, 6.333333333]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return round(float(val), 9)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if (casted_val >= 3.666666667 and casted_val <= 9.0) or math.isnan(casted_val):
            return True
        else:
            return False"
zwb,"class zwb(GeneralSemanticType):
    def __init__(self):
        self.description = 'ZWB Value'
        self.format = 'ZWB value must be a floating point number'
        self.examples = [7.666666667, 7.333333333, 7.666666667, 8.333333333, 8.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return round(float(val), 9)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, float) and 5.333333333 <= casted_val <= 9.0:
            return True
        else:
            return False"
prestigea,"class prestigea(GeneralSemanticType):

    def __init__(self):
        self.description = 'Prestige A'
        self.format = 'Floating point number, rounded to 9 decimal places'
        self.examples = [6.583333333, 4.0, 5.083333333, 5.333333333, 5.583333333]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return round(float(val), 9)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2.333333333 and casted_val <= 6.833333333:
            return True
        else:
            return False"
prestigeb,"class prestigeb(GeneralSemanticType):

    def __init__(self):
        self.description = 'Prestige B'
        self.format = 'Prestige B value must be a floating point number'
        self.examples = [5.5, 5.666666667, 5.833333333, 4.666666667, 6.416666667]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return round(float(val), 9)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 4.25 <= casted_val <= 7.0:
            return True
        else:
            return False"
dominancea,"class dominancea(GeneralSemanticType):
    def __init__(self):
        self.description = 'Dominance A'
        self.format = 'Dominance A value must be a floating point number'
        self.examples = [3.2, 2.5, 4.3, 3.5, 2.9]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 6.1:
            return True
        else:
            return False"
dominanceb,"
class dominanceb(GeneralSemanticType):
    def __init__(self):
        self.description = 'Dominance B'
        self.format = 'Dominance B value must be a floating point number'
        self.examples = [2.7, 4.6, 4.2, 6.4, 3.5]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isnull(casted_val):
            if 1.0 <= casted_val <= 6.4:
                return True
        else:
            return False
        return False"
abilitya,"class abilitya(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Ability A'
        self.format = 'Ability A must be an integer between 3 and 9'
        self.examples = [9, 4, 6, 7, 7]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 3 and casted_val <= 9:
            return True
        else:
            return False"
abilityb,"class abilityb(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ability B'
        self.format = 'Ability B must be an integer between 5 and 9'
        self.examples = [7, 8, 9, 6, 8]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 5 <= casted_val <= 9:
            return True
        else:
            return False"
statusselfsubj,"class statusselfsubj(GeneralSemanticType):

    def __init__(self):
        self.description = 'Subjective Status Self'
        self.format = 'Subjective Status Self must be an integer between 1 and 7'
        self.examples = [3, 6, 4, 6, 4]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (1 <= casted_val <= 7):
            return True
        else:
            return False"
statuspartsubj,"class statuspartsubj(GeneralSemanticType):
    def __init__(self):
        self.description = 'Subjective Status Part'
        self.format = 'Integer between 1 and 7'
        self.examples = [5, 4, 5, 5, 7]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 7:
            return False
        else:
            return True"
statussubjdiff,"class statussubjdiff(GeneralSemanticType):
    def __init__(self):
        self.description = 'Subjective Status Difference'
        self.format = 'An integer between -6 and 5'
        self.examples = [-2, 2, -1, 1, -3]
        
    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            return float('nan')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and not (casted_val >= -6 and casted_val <= 5):
            return False
        else:
            return True"
percentagechange,"class percentagechange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage Change'
        self.format = 'Should be a floating point number representing a percentage change'
        self.examples = [1.549, 1.359, 0.301, 0.344, 0.799, 1.132]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Expected a float or integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise Exception(f'Invalid value: {val}. Expected a float.')
        return True"
prevalence,"class prevalence(GeneralSemanticType):

    def __init__(self):
        self.description = 'The prevalence of a condition or characteristic'
        self.format = 'Prevalence should be a floating point number'
        self.examples = [0.0001890582330549, 0.0172926432196818, 0.0100469366832702, 0.0021224456280992, 0.0061713334201581]

    def super_cast(self, val):
        if isinstance(val, str) and val == '.':
            return float('nan')
        elif isinstance(val, str) and val.isdigit():
            num = float(val)
            if num < 0:
                raise Exception('Invalid prevalence')
            return num
        elif math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
programtitle,"class programtitle(GeneralSemanticType):

    def __init__(self):
        self.description = 'Title of a Program'
        self.format = 'Title should be formatted with each word capitalized and without any trailing spaces'
        self.examples = ['Agriculture, General', 'Agricultural Business And Management, General', 'Agribusiness/Agricultural Business Operations', 'Agricultural Economics', 'Farm/Farm And Ranch Management Or Agricultureal Studies']

    def super_cast(self, val):
        return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
cipcode,"class cipcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Classification of Instructional Programs (CIP) Code'
        self.format = 'CIP code should be a numerical value'
        self.examples = [1.0, 10101.0, 10102.0, 10103.0, 1.0104]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Cannot cast {val} to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and not np.isinf(casted_val):
            return True
        else:
            return False"
indicator,"class indicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'Indicators of vulnerability to climate change'
        self.format = 'Each indicator is represented as a string or 0/1 boolean value'
        self.examples = ['Road type', 'Transport of products', 'Quality of housing', 'Access and availability of water ', 'Conservation', 0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val == 0 or int_val == 1:
                return int_val
        except ValueError:
            return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (casted_val == 0 or casted_val == 1):
            return True
        elif isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
ifdi,"class ifdi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Inward Foreign Direct Investment'
        self.format = 'IFDI should be formatted as a floating point number'
        self.examples = [-0.06, 4.58, 6.325, 8.905, 13.37]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif isinstance(casted_val, float):
            return True
        else:
            return False"
bitstatus,"class bitstatus(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Boolean status represented in binary'
        self.format: str = '0 or 1'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 1:
            return 1
        else:
            return 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif casted_val in [0, 1]:
            return True
        else:
            return False"
treatyprovisionlevel,"class treatyprovisionlevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of Treaty Provision'
        self.format = 'Treaty provision levels should be formatted as integers'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            try:
                return int(val)
            except ValueError:
                raise ValueError(""Invalid value for treaty provision level: {}"".format(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
gdpratio,"class gdpratio(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ratio of GDP'
        self.format = 'GDP ratio should be formatted as a floating point number'
        self.examples = [0.110144585, 11.912, 62.726, 237.04, 26105.924]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str) and re.search(r'^-?\d+(?:\.\d+)?$', val) is not None:
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise Exception(f'Invalid value: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
growthratio,"class growthratio(GeneralSemanticType):
    def __init__(self):
        self.description = 'Growth Ratio'
        self.format = 'Growth ratio should be formatted as a floating point number'
        self.examples = [-1129.0985, 1.286, 1.961, 3.099, 896.714]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or (casted_val >= float('-inf') and casted_val <= float('inf')):
            return True
        else:
            return False"
economy,"class economy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economy'
        self.format = 'Economy names should be capitalized and whitespace should be removed from the ends'
        self.examples = ['Afghanistan', 'Bangladesh', 'Bolivia', 'Belize', 'Belarus']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is a valid country name
        if casted_val in [country.name for country in pycountry.countries]:
            return True
        else:
            return False"
complexity,"class complexity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Complexity level'
        self.format = 'Complexity level should be represented as a floating point number'
        self.examples = [4.2, 5.0, 3.0, 6.0, 4.8]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f""Could not convert {val} to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 2.6 or casted_val > 6.0:
            raise ValueError(f""Value {casted_val} out of valid range [2.6, 6.0]"")
        return True"
emotionvalence,"class emotionvalence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Emotion valence'
        self.format = 'Emotion valence should be represented as a floating point number'
        self.examples = [5.3, 4.3, 1.4, 4.9, 5.7]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception(f""Invalid value: {val}. Error: {str(e)}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.4 and casted_val <= 6.0:
            return True
        else:
            return False"
directedness,"class directedness(GeneralSemanticType):
    def __init__(self):
        self.description = 'Directedness level'
        self.format = 'Directedness level should be represented as a floating point number'
        self.examples = [3.8, 3.2, 3.0, 5.0, 4.6]
    
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Value cannot be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2.0 and casted_val <= 5.6:
            return True
        else:
            return False"
anxiety,"
class anxiety(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of anxiety'
        self.format = 'A floating point number'
        self.examples = [1.8, 1.0, 4.0, 2.5, 2.8]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Invalid input, it couldn't be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.0 <= casted_val <= 4.0:
            return True
        else:
            return False"
diagnosedcovid19,"class diagnosedcovid19(GeneralSemanticType):
    def __init__(self):
        self.description = ""Covid19 diagnosis status""
        self.format = ""boolean represented as float 1.0 or 2.0""
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val in [1.0, 2.0]:
                return float_val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
psychcondition,"class psychcondition(GeneralSemanticType):
    def __init__(self):
        self.description = ""Psychological condition status""
        self.format = ""Float representing condition status""
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
swisspostalcode,"class swisspostalcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Swiss Postal Codes'
        self.format = 'Swiss Postal Codes must be 4-digit numbers'
        self.examples = [5000, 5001, 5004, 5017, 5018]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 1000 <= casted_val <= 9999:
                return casted_val
            else:
                raise Exception()
        except:
            raise Exception(""Invalid value. Expected a 4-digit number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1000 <= casted_val <= 9999:
            return True
        else:
            return False"
placename,"class placename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Place names'
        self.format = 'Each word in the place name should be capitalized'
        self.examples = ['Aarau', 'Barmelweid', 'Erlinsbach', 'Zürich', 'Basel']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val.istitle()"
cantonname,"
class cantonname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Canton names in Switzerland'
        self.format = 'Each word in the canton name should be capitalized'
        self.examples = ['Kanton Aargau', 'Kanton Bern', 'Canton de Vaud', 'Kanton Zürich', 'Kanton Graubünden']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
cantonabbreviation,"class cantonabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Canton abbreviations in Switzerland'
        self.format = 'Abbreviations should be 2 uppercase letters'
        self.examples = ['AG', 'BE', 'VD', 'ZH', 'GR']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[A-Z]{2}$', casted_val) and casted_val in self.examples:
            return True
        else:
            return False"
countyname,"class countyname(GeneralSemanticType):
    def __init__(self):
        self.description = ""Name of a county""
        self.format = ""County names are capitalized and replace spaces with underscores""
        self.examples = ['AGUAS_VERMELHAS', 'BERIZAL', 'BOCAIUVA', 'BONITO_DE_MINAS', 'BRASILIA_DE_MINAS']

    def super_cast(self, val):
        return str(val).replace(' ', '_').upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and ""_"" in casted_val:
            return True
        else:
            return False"
iso3166,"class iso3166(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISO 3166 Country Code'
        self.format = 'ISO 3166 Country Code should be in uppercase'
        self.examples = ['AFG', 'ALB', 'DZA', 'AGO', 'ARG']

    def super_cast(self, val):
        code = pycountry.countries.get(alpha_3=val)
        if code:
            return code.alpha_3
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val.isupper() and len(casted_val) == 3:
            return True
        else:
            return False"
prevunit,"class prevunit(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'A boolean value indicating if the unit is previous or not'
        self.format: str = '0 for no and 1 for yes'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return 0
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
electionnumber,"class electionnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Election Number'
        self.format = 'Election Number must be positive integers'
        self.examples: list = [28, 29, 30, 31, 32]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1:
                raise ValueError('Invalid election number')
            return num
        except ValueError:
            raise ValueError(""Invalid input for casting"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1:
            return False
        else:
            return True"
districtcode,"class districtcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'District Code'
        self.format = 'Positive integers'
        self.examples: list[int] = [101, 102, 103, 104, 105]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val > 0:
            return True
        else:
            return False"
occupation,"class occupation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Occupation and its size""
        self.format = ""String representation for occupation type and integers for occupation size""
        self.examples = ['agricul', 108612, 'merchant/oth', 195316, 'offic']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif isinstance(val, int):
            return val
        else:
            raise Exception(""Invalid value type"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        elif isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
highincome1990,"class highincome1990(GeneralSemanticType):

    def __init__(self):
        self.description = ""Indicates if a country had a high income in 1990""
        self.format = ""lower-case string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
isocode,"class isocode(GeneralSemanticType):
    def __init__(self):
        self.description = 'ISO 3166-1 alpha-3 codes of a Country'
        self.format = 'Codes should be all upper case'
        self.examples = ['MOZ', 'SLV', 'COD', 'MMR', 'RWA']

    def super_cast(self, val):
        if isinstance(val, str):
            if pycountry.countries.get(alpha_3=val):
                return str(val).upper()
            else:
                raise Exception('Invalid ISO Code')
        else:
            raise Exception('Invalid input format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [country.alpha_3 for country in pycountry.countries]:
            return True
        else:
            return False"
gamblercondition,"class gamblercondition(GeneralSemanticType):

    def __init__(self):
        self.description = ""Gambler's Initial Condition""
        self.format = ""Condition should be either 'initial-winning' or 'initial-losing'""
        self.examples = ['initial-winning', 'initial-losing']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['initial-winning', 'initial-losing']:
            return True
        else:
            return False"
perceivedwinningrate,"class perceivedwinningrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Perceived Winning Rate of a Gambler'
        self.format = 'Perceived winning rate should be a float between 0 and 100'
        self.examples = [60.0, 50.0, 70.0, 80.0, 80.0]

    def super_cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return num
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
ecw,"class ecw(GeneralSemanticType):

    def __init__(self):
        self.description = 'Expected Continuing Winnings of a Gambler'
        self.format = 'Expected continuing winnings should be a positive float'
        self.examples = [6.4, 60.08, 40.88, 1108.72, 172.72]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid expected continuing winnings')
        except Exception as e:
            print(f""Error: {e}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
ecl,"class ecl(GeneralSemanticType):

    def __init__(self):
        self.description = 'Expected Continuing Losses of a Gambler'
        self.format = 'Expected continuing losses should be a positive float'
        self.examples = [138.04, 44.6, 35.8, 1012.04, 610.52]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                return ""Invalid expected continuing losses""
        except ValueError:
            return ""Invalid input, not a float""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
numberoftrialsinsecondsession,"class numberoftrialsinsecondsession(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Trials in Second Session'
        self.format = 'Number of trials should be a positive integer'
        self.examples = [12, 21, 30, 30, 30]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            raise ValueError(""Invalid value for number of trials: {}"".format(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
moneybolivian,"class moneybolivian(GeneralSemanticType):

    def __init__(self):
        self.description = 'Money in Bolivian currency'
        self.format = 'Money should be formatted as a floating point number with two decimal places for cents'
        self.examples = [14462.14, 552909.228, 8335498.52, 23828152.3, 1698194056.21]
    
    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
dateofreport,"class dateofreport(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date when the report was made'
        self.format = 'Date should be formatted as an integer representing the number of days since the epoch (1970-01-01)'
        self.examples = [43793, 43788, 43781, 43780, 43779]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            date_obj = datetime.strptime(val, '%B %d, %Y')
            epoch = datetime(1970, 1, 1)
            return (date_obj - epoch).days

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (0 <= casted_val <= float('inf')):
            return True
        else:
            return False"
dateofincident,"class dateofincident(GeneralSemanticType):

    def __init__(self):
        self.description = 'The date when the incident occurred'
        self.format = 'Date should be formatted as an integer representing the number of days since the epoch (1970-01-01)'
        self.examples = [43792, 43787, float('nan'), float('nan'), float('nan')]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            date_obj = datetime.strptime(val, '%B %d, %Y')
            epoch = datetime(1970, 1, 1)
            return (date_obj - epoch).days

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
idnum,"class idnum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Id number of a record'
        self.format = 'ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
taxamount,"
class taxamount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount of yearly taxes'
        self.format = 'Tax amount should be a positive floating point number'
        self.examples = [10.0, 100.0, 1000.0, 10000.0, 100000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError('Invalid tax amount')
            return round(num, 2)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
gdppercapita,"class gdppercapita(GeneralSemanticType):
    def __init__(self):
        self.description = ""Gross Domestic Product per capita""
        self.format = ""In USD""
        self.examples = [161.73, 1241.65, 3582.86, 12979.03, 194188.19]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and (casted_val < 0 or casted_val > float('inf')):
            return False
        return True"
neworg,"class neworg(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of new organizations'
        self.format = 'Number of new organizations should be an integer.'
        self.examples = [0, 1, 2, 3, 11]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if isinstance(casted_val, int) and 0 <= casted_val <= 11:
            return True
        else:
            return False"
competorg,"class competorg(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of competing organizations'
        self.format = 'Integer format'
        self.examples = [0, 1, 2, 3, 67]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 67:
            return True
        else:
            return False"
warintra,"class warintra(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of intra wars'
        self.format = 'Number of intra wars should be an integer.'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        if isinstance(val, (float, np.float)) and not math.isnan(val):
            return int(val)
        if isinstance(val, (int, np.int)):
            return val
        return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3:
            return True
        return False"
lnpop,"class lnpop(GeneralSemanticType):
    def __init__(self):
        self.description = 'Natural logarithm of population'
        self.format = 'Natural logarithm of population should be a floating point number'
        self.examples = [8.65, 14.05, 15.5, 16.64, 21.04]

    def super_cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            return round(float(val), 2)
        except ValueError:
            print(""Unable to convert value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('nan'):
            return True
        else:
            return False"
politysq,"class politysq(GeneralSemanticType):

    def __init__(self):
        self.description = 'Squared Polity Score'
        self.format = 'Integer value'
        self.examples = [0, 36, 49, 81, 100]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
lngdppc,"class lngdppc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Natural logarithm of GDP per capita'
        self.format = 'A floating point number'
        self.examples = [5.09, 7.12, 8.18, 9.47, 12.18]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
lngdppc2,"class lngdppc2(GeneralSemanticType):
    def __init__(self):
        self.description = 'Squared Natural logarithm of GDP per capita'
        self.format = 'Squared natural logarithm of GDP per capita should be a floating point number'
        self.examples = [25.87, 50.75, 66.98, 89.7, 148.27]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            else:
                return round(float(val), 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or not (0 <= casted_val <= float('inf')):
            return False
        else:
            return True"
sf,"class sf(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary value""
        self.format = ""An integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
selfperceivedability,"class selfperceivedability(GeneralSemanticType):

    def __init__(self):
        self.description: str = ""This represents a student's self-perceived ability in a certain academic category""
        self.format: str = 'This should be a floating point number from 1.0 to 5.0, where higher values indicate greater self-perceived ability'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input, float value is expected"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 5.0:
            return True
        else:
            return False
"
stereotype,"class stereotype(GeneralSemanticType):
    def __init__(self):
        self.description: str = ""This represents a student's stereotype in a certain academic category""
        self.format: str = 'This should be a floating point number from 1.0 to 5.0, where higher values indicate greater stereotyping'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        num = float(val)
        if 1.0 <= num <= 5.0:
            return num
        else:
            raise Exception('Invalid stereotype value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 5.0:
            return True
        else:
            return False"
proportion,"class proportion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Proportion'
        self.format = 'Proportions are represented as decimal values between 0 and 1'
        self.examples = [0.0, 0.6, 0.33333334, 1.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 1:
                return round(val, 6)
            else:
                raise ValueError(""Invalid proportion value"")
        except ValueError as ve:
            print(ve)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1:
            return True
        else:
            return False"
ccodealp,"class ccodealp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country Code in Alpha'
        self.format = 'Country code in Alpha should be in capital letters'
        self.examples = ['ALB', 'BGR', 'HRV', 'CRI', 'COL']

    def super_cast(self, val):
        if isinstance(val, str) and pycountry.countries.get(alpha_3=val):
            return str(val).upper()
        else:
            return 'Invalid alpha-3 country code'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(alpha_3=casted_val):
            return True
        else:
            return False"
clientelism,"class clientelism(GeneralSemanticType):

    def __init__(self):
        self.description = 'Clientelism Measure'
        self.format = 'A floating point number'
        self.examples = [0.6845706, 1.1185348, -1.3364308, -0.85565805, -0.6077854]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif not np.isfinite(casted_val):
            return False
        else:
            return True"
partysize,"class partysize(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political Party Size Measure'
        self.format = 'Political party size measure should be a floating point number between 0 and 1'
        self.examples = [0.4045, 0.38796154, 0.405, 0.32299998, 0.1375]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except Exception as e:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0 and casted_val <= 1:
            return True
        else:
            return False"
hiring,"class hiring(GeneralSemanticType):
    def __init__(self):
        self.description = 'Hiring Measure'
        self.format = 'Floating point number'
        self.examples = [0.27216476, -1.1299663, 1.4312645, 0.25973514, 1.519164]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
prmean,"class prmean(GeneralSemanticType):
    def __init__(self):
        self.description = ""PR Mean""
        self.format = ""Boolean values (0, 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            if val in [0, 1]:
                return int(val)
            else:
                raise Exception('Invalid PR Mean value')
        except Exception as e:
            print('Error:', e)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
consent,"class consent(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""Represents consent or non-consent""
        self.format = ""1.0 for consent, NaN for non-consent""
        self.examples = [1.0, np.nan, 1.0, np.nan, 1.0]
        
    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return 1.0
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 1.0 or np.isnan(casted_val):
            return True
        else:
            return False"
satisfaction,"class satisfaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Satisfaction Level'
        self.format = 'Satisfaction level should be a floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def super_cast(self, val):
        try:
            casted_val = min(max(float(val), 0), 10)
        except ValueError:
            raise ValueError(""Invalid input value"")
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
care,"class care(GeneralSemanticType):
    def __init__(self):
        self.description = ""Represents care boolean values""
        self.format = ""Floating point number""
        self.examples = [0.0, 1.0, 0.0, 1.0, float('nan')]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, float('nan')]:
            return True
        else:
            return False"
worry,"class worry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Worry Level'
        self.format = 'Floating point number between 0 and 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return min(max(float_val, 0.0), 10.0)
        except ValueError:
            return ""Invalid input. Expected a number between 0 and 10.""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 10.0:
            return True
        else:
            return False"
agecat4,"class agecat4(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age Category'
        self.format = 'Age category should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                return 1
            elif val > 4:
                return 4
            else:
                return val
        except ValueError:
            raise Exception(""Invalid value. Expected an integer between 1 and 4."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 4:
            return True
        else:
            return False"
educ3,"class educ3(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary indicator of education""
        self.format = ""float, either 0.0, 1.0, or NaN""
        self.examples = [0.0, 1.0, 0.0, 1.0, np.nan]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if math.isnan(casted_val):
                return np.nan
            elif casted_val == 0.0:
                return 0.0
            else:
                return 1.0
        except ValueError:
            raise Exception(""Invalid input. Expected a float or 'nan'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, np.nan]:
            return True
        else:
            return False"
abuse,"class abuse(GeneralSemanticType):
    def __init__(self):
        self.description = 'Abuse Level'
        self.format = 'Abuse level should be a floating point number between 0 and 1'
        self.examples = [0.0, 0.5, 1.0, 0.2, 0.8]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return min(max(casted_val, 0), 1)
        except ValueError:
            raise ValueError(f""Unable to cast {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 1:
            return True
        else:
            return False"
jobtenure3,"class jobtenure(GeneralSemanticType):
    def __init__(self):
        self.description = 'Job Tenure Category'
        self.format = 'Job Tenure category should be an integer between 1 and 3'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        casted_val = int(val)
        return min(max(casted_val, 1), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 4):
            return True
        else:
            return False"
engagement,"class engagement(GeneralSemanticType):
	def __init__(self):
		self.description = 'Engagement Level'
		self.format = 'Engagement level should be a floating point number between 0 and 6'
		self.examples = [0.0, 1.5, 3.0, 4.5, 6.0]

	def super_cast(self, val):
		try:
			# Attempt to cast the value to a float
			val = float(val)
		except ValueError:
			raise ValueError(f""Cannot cast {val} to float"")

		# Check if the value is within the valid range
		if not (0 <= val <= 6):
			raise ValueError(f""Value {val} is not within the valid range [0, 6]"")

		return val

	def validate(self, val):
		casted_val = self.super_cast(val)
		if not (0 <= casted_val <= 6):
			raise ValueError(f""Value {casted_val} is not within the valid range [0, 6]"")
		return True"
factoryf,"class factoryf(GeneralSemanticType):

    def __init__(self):
        self.description = 'Factory Category'
        self.format = 'Factory category should be an integer between 6 and 8'
        self.examples = [6, 7, 8]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 6:
                return 6
            elif val > 8:
                return 8
            else:
                return val
        except Exception:
            raise ValueError(""Invalid value. Value should be an integer between 6 and 8"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 6 <= casted_val <= 8:
            return True
        else:
            return False"
politicalposition,"class politicalposition(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political Position'
        self.format = 'A string'
        self.examples = ['DeputadoFederal', 'Governador', 'DeputadoFederal', 'Governador', 'DeputadoFederal']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['DeputadoFederal', 'Governador']:
            return True
        else:
            return False"
numericcount,"class numericcount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Numeric Count'
        self.format = 'Count should be formatted as a floating point number'
        self.examples = [26.0, 30.0, 1.0, 9.0, 6.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""The value cannot be casted to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and math.isfinite(casted_val):
            return True
        else:
            return False"
countycode,"class countycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'County Codes'
        self.format = 'County codes must be 6-digit numbers stored as strings'
        self.examples = ['000001', '001000', '002000', '003000', '008400']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.zfill(6)
        else:
            return str(int(val)).zfill(6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^\d{6}$', casted_val) and int(casted_val) <= 840:
            return True
        else:
            return False"
kaopen,"class kaopen(GeneralSemanticType):

    def __init__(self):
        self.description = 'kaopen'
        self.format = 'kaopen should be a floating point number'
        self.examples = [-1.8, -1.13, -0.76, 1.27, 2.54]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Unable to convert value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
ckaopen,"class ckaopen(GeneralSemanticType):

    def __init__(self):
        self.description = 'ckaopen'
        self.format = 'ckaopen should be a floating point number'
        self.examples = [-1.757101, -1.081, -1.0, 1.252, 2.532269]

    def super_cast(self, val):
        if isinstance(val, str):
            val = re.sub('[^0-9.]','', val)
        if val == '' or val == '.':
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        if casted_val < float('-inf') or casted_val > float('inf'):
            return False
        return True"
pollingstationcode,"class pollingstationcode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Code for each polling station'
        self.format = 'Alpha numeric string'
        self.examples = ['A010102', 'A133203', 'A012002', 'A010403', 'A010201']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
binaryscore,"class binaryscore(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary score""
        self.format = ""Float number""
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val in [1.0, 2.0]:
                return casted_val
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
countofvotes,"class countofvotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of votes'
        self.format = 'Integer number'
        self.examples = [270, 442, 582, 4, 1814]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
publishinghouse,"class publishinghouse(GeneralSemanticType):

    def __init__(self):
        self.description = 'The publishing house that published the book'
        self.format = 'Must be a string representing the name of the publishing house'
        self.examples = ['Routledge', 'Springer', 'Cambridge', 'Chatham House', 'Rowman & Littlefield']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
yearpublished,"class yearpublished(GeneralSemanticType):

    def __init__(self):
        self.description = 'The year a book was published'
        self.format = 'Year should be formatted as a 4-digit integer'
        self.examples = [2006, 2012, 2009, 2008, 2011]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 0 and val <= datetime.now().year:
                return val
            else:
                raise ValueError(""The input value is out of the valid range."")
        except ValueError as ve:
            raise ve
        except Exception as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= datetime.now().year:
            return True
        else:
            return False"
numberofauthors,"class numberofauthors(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of authors of a book'
        self.format = 'Number of authors should be an integer'
        self.examples = [1, 2, 1, 1, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
googlecitations,"class googlecitations(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of times a book was cited on Google Scholar'
        self.format = 'Number of citations should be an integer'
        self.examples = [8, 15, 6, 47, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
academicrank,"class academicrank(GeneralSemanticType):
    def __init__(self):
        self.description = ""The academic rank of the author(s) of a book""
        self.format = ""Must be a string representing the academic rank""
        self.examples = ['Unknown', 'Full', 'Reprint', 'Assistant', 'Associate']
        
    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
yearmonth,"class yearmonth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year and Month'
        self.format = 'Year and month should be represented as a 6-digit number YYYYMM'
        self.examples = [199001, 199002, 199003, 199004, 199005]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            val = float(val)
            (year, month) = divmod(val, 1)
            month = round(month * 100)
            if month < 1 or month > 12:
                raise ValueError('Invalid month: {}'.format(month))
            return int('{}.{}'.format(int(year), int(month)))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            (year, month) = divmod(casted_val, 100)
            if year < 1900 or month < 1 or month > 12:
                return False
        return True"
visibility,"class visibility(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Visibility'
        self.format: str = 'Visibility should be represented as a floating point number'
        self.examples: list = [-0.35404775, -0.35404775, -0.35404775, 1.1776638, -0.35404775]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, float) and not np.isnan(casted_val)"
relativechange,"class relativechange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Relative Change'
        self.format = 'Relative change should be represented as a floating point number'
        self.examples = [-115.67, 15.9, 8.07, -52.1, 0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or (casted_val >= float('-inf') and casted_val <= float('inf')):
            return True
        else:
            return False"
creationdatetime,"class creationdatetime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and Time'
        self.format = 'Date and Time in ISO format'
        self.examples = ['2018-08-17T13:46:49.939Z', '2018-08-22T19:29:39.234065Z', '2018-08-22T18:55:37.910885Z', '2018-08-22T17:40:45.200288Z', '2018-08-22T15:54:17.574866Z']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val.isoformat()
        else:
            try:
                return datetime.strptime(val, '%Y-%m-%dT%H:%M:%S.%fZ').isoformat()
            except ValueError:
                raise Exception(""Input is not a valid date/time"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%dT%H:%M:%S.%fZ')
            return True
        except ValueError:
            return False"
probability,"class probability(GeneralSemanticType):
    def __init__(self):
        self.description = 'Probability of political ad'
        self.format = 'Probability should be a float number between 0 and 1'
        self.examples = [0.0990357064994881, 0.8128642136960172, 0.9058867575623988, 0.9128300949012592, 0.9932264181091732]

    def super_cast(self, val):
        try:
            num = float(val)
            return num if 0 <= num <= 1 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
minimumage,"class minimumage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minimum age targeted by the ad'
        self.format = 'Minimum age should be an integer'
        self.examples = [13, 18, 20, 25, 30]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            num = int(val)
            return num if 13 <= num <= 120 else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        else:
            return 13 <= casted_val <= 120"
countryabbreviation,"class countryabbreviation(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Abbreviation of a country'
        self.format: str = 'Country abbreviation should be an uppercase string'
        self.examples: list = ['AFG', 'ALB', 'ALG', 'ANG', 'ARG']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper() and isinstance(pycountry.countries.get(alpha_3=casted_val), pycountry.db.Country):
            return True
        else:
            return False"
difference,"class difference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Difference between two numeric values'
        self.format = 'Difference should be a numeric value'
        self.examples = [0.0, -12.5, 20.83, 0.0, 0.0]

    def super_cast(self, val):
        try:
            val = float(val)
            return val
        except ValueError:
            raise Exception('Cannot cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -100.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
elevationmeter,"class elevationmeter(GeneralSemanticType):

    def __init__(self):
        self.description = 'The elevation in meters of an entity'
        self.format = 'Elevation should be formatted as a floating point number (in meters)'
        self.examples: list = [1134.951, 742.314, 30.02, 336.742, 1350.71]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
countofneighboringvillages,"class countofneighboringvillages(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of neighboring villages'
        self.format = 'The count should be an integer'
        self.examples: list = [4, 20, 3, 20, 4]
        
    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise ValueError(""Invalid value. It must be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
percentrepresentation,"class percentrepresentation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage representation'
        self.format = 'Percentage representation should be stored as a float'
        self.examples = [11.1, 22.65, 33.3, 0, 57.1]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except Exception as e:
            raise Exception('Invalid percentage representation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
binaryrepresentation,"class binaryrepresentation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary representation""
        self.format = ""Integer format""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid binary representation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
indexrepresentation,"class indexrepresentation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index representation'
        self.format = 'Index representation should be stored as an integer'
        self.examples = [2, 4, 5, 3, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid index representation')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
assessment,"class assessment(GeneralSemanticType):
    def __init__(self):
        self.description = 'Assessment score'
        self.format = 'Assessment score should be an integer value between 0 and 10'
        self.examples = [0, 2, 4, 6, 8, 10]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 10:
            return True
        else:
            return False"
totalscore,"class totalscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total assessment score of a resident'
        self.format = 'The total score should be a non-negative integer'
        self.examples = [6, 15, 20, 23, 34]

    def super_cast(self, val):
        if isinstance(val, float) and not math.isnan(val):
            if val >= 0:
                return int(val)
            else:
                raise Exception('Invalid Total Score')
        elif isinstance(val, int):
            if val >= 0:
                return val
            else:
                raise Exception('Invalid Total Score')
        else:
            raise Exception('Invalid Total Score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
corruptionindex,"class corruptionindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Corruption index of a country'
        self.format = 'Corruption index should be a floating point number between 0 and 10'
        self.examples = [3.485, 1.763, 0.4, 2.3, 9.4]

    def super_cast(self, val):
        try:
            index = float(val)
            return index
        except ValueError:
            raise ValueError(f'Invalid corruption index: {val}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 10:
            return False
        return True"
decisionmaking,"class decisionmaking(GeneralSemanticType):

    def __init__(self):
        self.description = 'Decision making factor'
        self.format = 'Should be a floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid decision making factor')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1.0 or casted_val > 7.0:
            return False
        else:
            return True"
numericvalue,"class numericvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'Numeric values, can be any real number'
        self.format = 'Numeric values should be formatted as floating point numbers'
        self.examples = [1.2, 3.4, 5.6, 7.8, 9.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            val = str(val).strip()
            if val.lower() == 'total':
                return float('nan')
            elif val.isnumeric() or self.is_float(val):
                return float(val)
            else:
                raise Exception('Invalid numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if np.isnan(casted_val) or -float('inf') <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            raise Exception('Invalid numeric value')

    def is_float(self, n):
        try:
            float_n = float(n)
        except ValueError:
            return False
        else:
            return True"
officeposition,"class officeposition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Office Position'
        self.format = 'Position should be stored as a string'
        self.examples = ['ESTATE DEPUTY', 'FEDERAL DEPUTY']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['ESTATE DEPUTY', 'FEDERAL DEPUTY']:
            return True
        else:
            return False"
brazilianparty,"class brazilianparty(GeneralSemanticType):
    def __init__(self):
        self.description = 'Brazilian Political Party'
        self.format = 'Party should be stored as a string'
        self.examples = ['PT', 'PV', 'PMDB', 'PSB', 'PSDB']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
establishmentdate,"class establishmentdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of establishment of a political party'
        self.format = ""Date should be in the format 'MM/DD/YYYY'""
        self.examples = [datetime(1994, 10, 2), datetime(2006, 3, 19), datetime(2015, 2, 7), datetime(2011, 12, 18), datetime(2006, 10, 1)]

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val
        elif isinstance(val, str):
            try:
                return pd.to_datetime(val, format='%m/%d/%Y', errors='coerce')
            except:
                return None
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
disbandmentdate,"class disbandmentdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of disbandment of a political party'
        self.format = ""Date should be in the format 'YYYY-MM-DD' or 'NaN' indicating that the party has not been disbanded""
        self.examples = ['NaN', '2020-06-30', '2021-09-03', '2021-05-20', '2021-09-11']

    def super_cast(self, val):
        if isinstance(val, str):
            if val == '.':
                return 'NaN'
            else:
                try:
                    dt = datetime.strptime(val, '%m/%d/%Y')
                    return dt.strftime('%Y-%m-%d')
                except ValueError:
                    return 'NaN'
        elif pd.isnull(val):
            return 'NaN'
        elif isinstance(val, datetime):
            return val.strftime('%Y-%m-%d')
        else:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'NaN':
            return True
        else:
            try:
                dt = datetime.strptime(casted_val, '%Y-%m-%d')
                if dt.year >= 0 and dt <= datetime.now():
                    return True
                else:
                    return False
            except ValueError:
                return False"
politicalseat,"class politicalseat(GeneralSemanticType):

    def __init__(self):
        self.description = ""A political seat""
        self.format = ""Boolean value as integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
countryiso,"class countryiso(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISO country codes'
        self.format = 'Three uppercase letters'
        self.examples = ['DZA', 'ARG', 'AZE', 'BHR', 'BLR']

    def super_cast(self, val):
        val = str(val)
        if val.isalpha() and len(val) == 3 and val.isupper():
            return val
        else:
            raise ValueError('Invalid ISO country code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 3 and casted_val.isupper() and casted_val in [country.alpha_3 for country in pycountry.countries]:
            return True
        else:
            return False"
index,"class index(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index values'
        self.format = 'Positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val > 0:
                return val
            else:
                raise ValueError('Invalid index value')
        except Exception as e:
            raise ValueError('Invalid index value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
playname,"class playname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a Play'
        self.format = 'The string should be in title case'
        self.examples = ['King Lear', 'Richard III', 'Romeo and Juliet', 'Othello', ""A Midsummer Night's Dream""]

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
convosize,"class convosize(GeneralSemanticType):
    def __init__(self):
        self.description = ""Size of the Conversation""
        self.format = ""Conversation size should be an integer""
        self.examples = [1, 2, 4, 3, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 21:
            return True
        else:
            return False"
municipalitycode,"class municipalitycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Municipality code'
        self.format = 'Municipality codes should be alphanumeric strings'
        self.examples = ['1234', 'A1B2', 'XYZ9', '78JK', 'LMN0']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9]*$', casted_val):
            return True
        else:
            return False"
description,"class description(GeneralSemanticType):

    def __init__(self):
        self.description = 'Description'
        self.format = 'Descriptions should be strings'
        self.examples = ['This is a description', 'Another description', 'Yet another description', 'One more description', 'And a final description']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            try:
                return str(val)
            except Exception as e:
                raise Exception(f""Error casting value: {e}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
youtubevideoidentifier,"class youtubevideoidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'YouTube Video ID'
        self.format = 'YouTube video ID is a combination of alphanumeric characters'
        self.examples = ['UUuSDDrGOQA', 'ibNCZM2bMaI', 'rPNk74BqW2I', 'TSF1gFMJXJY', 'fxZiWWYcaeo']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) == 11:
            return True
        else:
            return False"
uploadtimestamp,"class uploadtimestamp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Upload Timestamp'
        self.format = 'Timestamps are in UTC'
        self.examples = ['2017-07-03 00:59:26', '2017-03-11 23:16:01', '2018-04-17 03:20:31', '2017-09-07 09:43:08', '2018-05-22 00:42:51']

    def super_cast(self, val):
        if isinstance(val, datetime):
            return val
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                return None
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            now = datetime.utcnow()
            if casted_val <= now:
                return True
        return False"
videoduration,"class videoduration(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Video Duration'
        self.format = 'Video duration is in hours, minutes, and seconds'
        self.examples = ['0:00:55', '0:01:23', '0:03:45', '0:00:54', '0:02:06']

    def super_cast(self, val):
        if isinstance(val, str):
            if re.match(r'\d{1,2}:\d{1,2}:\d{1,2}', val):
                return val
            else:
                raise ValueError('Value does not match the ""HH:MM:SS"" format')
        else:
            raise TypeError('Value is not a string')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if re.match(r'\d{1,2}:\d{1,2}:\d{1,2}', casted_val):
                return True
            else:
                return False
        else:
            return False"
youtubelikes,"class youtubelikes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of YouTube Likes'
        self.format = 'Likes should be integers'
        self.examples = [15, 1712, 7, 5, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
youtubedislikes,"class youtubedislikes(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of YouTube Dislikes'
        self.format = 'Dislikes should be integers'
        self.examples = [7, 78, 0, 0, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False
"
youtubeviews,"class youtubeviews(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of YouTube Views'
        self.format = 'Views should be floating point numbers'
        self.examples = [2439.0, 104026.0, 808.0, 22.0, 83.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. Expected a float."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0.0:
            return True
        else:
            return False"
binarysemantictype,"class binarysemantictype(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""A binary value""
        self.format = ""Either 0 or 1""
        self.examples = [0,1,0,1,0]

    def super_cast(self, val):
        if val in [0, 1]:
            return int(val)
        else:
            raise ValueError('Invalid binary value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
populationpercent,"class populationpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of Population'
        self.format = 'Population percentage should be a float between 0 and 1'
        self.examples = [0.62, 0.119, 0.85, 0.15, 0.85]

    def super_cast(self, val):
        try:
            if 0 <= float(val) <= 1:
                return float(val)
            else:
                raise ValueError('Invalid population percentage')
        except:
            raise ValueError('Invalid population percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 0 <= casted_val <= 1"
disciplinecategory,"class disciplinecategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Discipline category under the Web of Science classification'
        self.format = 'Each word in the category should be capitalized'
        self.examples = ['Acoustics', 'Cell Biology', 'Agricultural Engineering', 'Art', 'Agriculture Dairy Animal Science']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
broaderdisciplinecategory,"
class broaderdisciplinecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Broader discipline category classification'
        self.format = 'Exact match to one of the valid values'
        self.examples = ['Life Sciences & Biomedicine', 'Technology', 'Social Sciences', 'Physical Sciences', 'Arts & Humanities']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
numberofpapers,"class numberofpapers(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of scientific papers produced in selected cities'
        self.format = 'Should be a non-negative integer'
        self.examples = [14995, 2449, 8230, 15048, 13379]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val < 0:
                raise ValueError(""Value should be non-negative integer"")
            else:
                return int_val
        except Exception as e:
            raise TypeError(""Invalid value type, should be an integer"") from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
numberofcities,"
class numberofcities(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of cities with papers in a specific category'
        self.format = 'Should be a non-negative integer'
        self.examples = [245, 201, 237, 232, 242]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise Exception(""Invalid input. Expected a non-negative integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(""Invalid value. Expected a non-negative integer."")
        return True"
ratioofpapers,"class ratioofpapers(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ratio of papers produced in a specific discipline category'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [0.139, 0.022, 0.076, 0.139, 0.124]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
countyidentifier,"class countyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'US County ID'
        self.format = 'County ID should be a whole number'
        self.examples = [1001, 1003, 1005, 1007, 1009]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1001 <= casted_val <= 56045:
            return True
        else:
            return False"
obesityrate,"class obesityrate(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Obesity Rate'
        self.format: str = 'Obesity rate should be a floating point number'
        self.examples: list = [33.8, 27.2, 44.7, 40.3, 34.9]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            print(f""Value {val} cannot be cast to float."")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 11.8 <= casted_val <= 47.9:
            return True
        else:
            print(f""Value {casted_val} is out of valid range [11.8, 47.9]."")
            return False"
incomeusd,"class incomeusd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Income in USD'
        self.format = 'Income should be a floating point number in USD units'
        self.examples = [48235.0, 44209.0, 28811.0, 36995.0, 41283.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
        except ValueError:
            raise ValueError(""Unable to cast the value to float"")
        return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 20061 <= casted_val <= 109437:
            return True
        else:
            return False"
leisuretime,"class leisuretime(GeneralSemanticType):

    def __init__(self):
        self.description = ""Leisure Time""
        self.format = ""Float""
        self.examples = [28.6, 22.3, 31.8, 33.9, 28.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 8.1 <= casted_val <= 41.4:
            return True
        else:
            return False"
diabetesrate,"class diabetesrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diabetes Rate'
        self.format = 'Diabetes rate should be a floating point number'
        self.examples = [11.9, 8.8, 16.9, 13.8, 12.3]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Cannot cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 3.8 <= casted_val <= 20.8:
            return True
        else:
            return False"
logincome,"class logincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Log of Income'
        self.format = 'Log of income should be a floating point number'
        self.examples = [10.7838, 10.6967, 10.2685, 10.5185, 10.6282]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 9.9065 <= casted_val <= 11.6031:
            return True
        else:
            return False"
usregion,"class usregion(GeneralSemanticType):
    def __init__(self):
        self.description = 'US Region'
        self.format = 'Region should be one or two capitalized letters'
        self.examples = ['S', 'MW', 'W', 'NE']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S', 'MW', 'W', 'NE']:
            return True
        else:
            return False"
codeable,"class codeable(GeneralSemanticType):
    def __init__(self):
        self.description = ""If an item can be coded or not""
        self.format = ""Number, either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str):
            if val == '0':
                return 0
            elif val == '1':
                return 1
            else:
                raise Exception('Invalid Value')
        elif isinstance(val, int):
            if val == 0 or val == 1:
                return val
            else:
                raise Exception('Invalid Value')
        else:
            raise Exception('Invalid Value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
pid3,"class pid3(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political identification'
        self.format = 'An integer from 1 to 5'
        self.examples = [1, 2, 1, 1, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
pid7,"class pid7(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political identification'
        self.format = 'An integer from 1 to 8'
        self.examples = [1, 7, 1, 1, 2]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 8:
                return int_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError(""Invalid Value: The value should be an integer from 1 to 8"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 8:
            return True
        else:
            return False
"
ideo5,"class ideo5(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ideological identification'
        self.format = 'An integer from 1 to 6'
        self.examples = [1, 6, 2, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value must be an integer from 1 to 6."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 6:
            return True
        else:
            return False"
newsint,"class newsint(GeneralSemanticType):

    def __init__(self):
        self.description = 'Interest in news'
        self.format = 'An integer, either 1 or 2'
        self.examples = [2, 1, 1, 1, 2]

    def super_cast(self, val):
        if val == 32766 or math.isnan(val):
            return None
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, None]:
            return True
        else:
            return False"
pewreligimp,"class pewreligimp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Importance of religion'
        self.format = 'An integer from 1 to 4'
        self.examples = [4, 1, 1, 1, 1]
        
    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 4:
            return True
        else:
            return False"
binaryboolean,"class binaryboolean(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary boolean value""
        self.format = ""A floating number""
        self.examples = [0.0, 1.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if isinstance(val, bool):
            return float(val)
        elif isinstance(val, str):
            if val.lower() in ['true', 'yes']:
                return 1.0
            else:
                return 0.0
        elif isinstance(val, (int, float)):
            if val == 1.0 or val == 0.0:
                return val
            else:
                raise ValueError(""Invalid binary boolean value"")
        else:
            raise TypeError(""Invalid type for binary boolean value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in [0.0, 1.0]"
equipmentquality,"class equipmentquality(GeneralSemanticType):
    def __init__(self):
        self.description = 'Quality of Equipment'
        self.format = 'Quality is a string that must be one of the valid values'
        self.examples = ['Boa', 'Má', 'Péssima', 'Muito boa', 'Excelente']

    def super_cast(self, val):
        valid_values = ['Boa', 'Má', 'Péssima', 'Muito boa', 'Excelente']
        if str(val) in valid_values:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Boa', 'Má', 'Péssima', 'Muito boa', 'Excelente', 'Unknown']:
            return True
        else:
            return False"
surveyrating,"class surveyrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating provided in the survey response'
        self.format = 'Rating should be a float within the range 0 to 10'
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
jobdescription,"class jobdescription(GeneralSemanticType):
    def __init__(self):
        self.description = 'Job description of the survey respondent'
        self.format = 'Job description should be in uppercase'
        self.examples = ['PROFESSIONALS', 'ADMIN SUPPORT WORKERS', '1ST/MID LEVEL OFFICIALS &', 'OPERATIVES (SEMI-SKILLED)', 'TECHNICIANS']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        if casted_val.isupper():
            return True
        else:
            return False"
timeindecimal,"class timeindecimal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time in decimal'
        self.format = 'String with digits and decimal point'
        self.examples = ['-239.167.824.074.074', '-240.625', '-23.625', '-23.909.837.962.963', '145.694.444.444.444']

    def super_cast(self, val):
        return str(val).replace('.', '')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^-?\d+\.?\d*$"", casted_val):
            return True
        else:
            return False"
trustlevel,"class trustlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of Trust in an entity'
        self.format = 'Trust level should be a floating point number from 0 to 10'
        self.examples = [0.0, 3.0, 5.0, 7.0, 10.0]

    def super_cast(self, val):
        num = float(val)
        if num >= 0 and num <= 10:
            return num
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 10:
            return True
        else:
            return False"
unemploymentduration,"class unemploymentduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unemployment duration of a Person'
        self.format = ""The format should be 'X-Y weeks'""
        self.examples = ['21 weeks or more', '11-15 weeks', '0-5 weeks', '6-10 weeks', '16-20 weeks']

    def super_cast(self, val):
        casted_val = str(val)
        if casted_val.isdigit():
            return casted_val + ' weeks'
        elif '-' in casted_val:
            return casted_val.split('-')[0].strip() + '-' + casted_val.split('-')[1].strip() + ' weeks'
        else:
            return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(r'\d+-\d+ weeks|\d+ weeks or more')
        if pattern.match(casted_val):
            return True
        else:
            return False"
unemploymentperiods,"class unemploymentperiods(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of unemployment periods of a Person'
        self.format = 'Unemployment periods should be a whole number from 1 to 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(1,6):
                return casted_val
            else:
                return 'Error: Value out of range'
        except ValueError:
            return 'Error: Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1,6):
            return True
        else:
            return False"
pressurelevel,"class pressurelevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of Pressure a Person has'
        self.format = 'Pressure level should be a floating point number from 0 to 4'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num <= 4:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0 and casted_val <= 4:
            return True
        else:
            return False"
satisfactionlevel,"class satisfactionlevel(GeneralSemanticType):
    def __init__(self):
        self.description = ""Levels of satisfaction""
        self.format = ""Should be a discrete integer between 1 to 5""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int):
            return int(val)
        elif isinstance(val, float):
            return int(round(val))
        else:
            raise ValueError(""Invalid input. Expected a number but received: "", type(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 5:
            raise ValueError('Invalid satisfaction value')
        else:
            return True"
currentlystudent,"class currentlystudent(GeneralSemanticType):

    def __init__(self):
        self.description = ""Student status""
        self.format = ""Numeric: 1 for Yes, 2 for No""
        self.examples = [1, 2, 1, 1, 2]

    def super_cast(self, val):
        if isinstance(val, int) and val in [1, 2]:
            return val
        else:
            raise Exception('Invalid student status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
coloniaselection,"class coloniaselection(GeneralSemanticType):
    def __init__(self):
        self.description = 'Selections of the Colonias'
        self.format = ""Either a string ('COLONIAS SELECCIONADAS') or a numeric value""
        self.examples = ['COLONIAS SELECCIONADAS', '1', '2', '3', '4']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val == 'COLONIAS SELECCIONADAS':
            return val
        else:
            return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and math.isnan(casted_val):
            return True
        elif isinstance(casted_val, str) and (casted_val == 'COLONIAS SELECCIONADAS' or casted_val.isdigit()):
            return True
        else:
            return False"
colonianame,"class colonianame(GeneralSemanticType):

    def __init__(self):
        self.description = 'Names of the Colonias'
        self.format = 'Names should be capitalized'
        self.examples = ['Altares', 'Cerro de la Campana', 'La Matanza', 'Las Pilas', 'Bella Vista']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
verification,"class verification(GeneralSemanticType):
    def __init__(self):
        self.description = 'Verification status of the Colonias'
        self.format = ""Either a string ('VERIFICADO 100%') or a numeric percentage""
        self.examples = ['VERIFICADO 100%', '30%', '40%', '50%', '60%']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        if isinstance(val, str):
            if val == 'VERIFICADO 100%':
                return val
            elif '%' in val:
                return val
            else:
                return str(int(val)) + '%'
        elif isinstance(val, int) or isinstance(val, float):
            return str(int(val)) + '%'
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, str):
            if casted_val == 'VERIFICADO 100%':
                return True
            elif '%' in casted_val:
                return True
            else:
                return False
        else:
            return False"
totalhouses,"class totalhouses(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total number of houses'
        self.format = 'Housing numbers are integers'
        self.examples = [160, 0, 749, 307, 258]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
category,"class category(GeneralSemanticType):

    def __init__(self):
        self.description = 'A categorical representation'
        self.format = 'Category is a string representing the type of the sample'
        self.examples = ['Fruit', 'D. aurita', 'M. nudicaudatus', 'Predator', 'Detritivore']

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            pass

        if isinstance(val, int):
            categories = ['Fruit', 'D. aurita', 'M. nudicaudatus', 'Predator', 'Detritivore']
            if val in range(1, 6):
                return categories[val - 1]
            else:
                raise Exception('Invalid category')
        elif isinstance(val, str):
            if val in self.examples:
                return val
            else:
                raise Exception('Invalid category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
jobdifficultyrating,"class jobdifficultyrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating of job difficulty'
        self.format = 'Job difficulty should be a floating point number ranging from 1 (least difficult) to 6 (most difficult)'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if 1 <= num <= 6:
                return round(num, 1)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != float('nan'):
            return True
        else:
            return False"
booleanexperience,"class booleanexperience(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean Experience""
        self.format = ""A float number""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
satisfactionwithlife,"class satisfactionwithlife(GeneralSemanticType):

    def __init__(self):
        self.description = 'Satisfaction with life rating'
        self.format = 'Satisfaction with life should be a floating point number ranging from 0 (least satisfied) to 9.99 (most satisfied)'
        self.examples = [0.0, 2.22, 4.44, 6.66, 9.99]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0 <= num <= 9.99:
                return round(num, 2)
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 0 <= casted_val <= 9.99"
factory,"class factory(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Factory identifier'
        self.format: str = 'Factory identifier should be a floating point number either 1.0 or 2.0'
        self.examples: list = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        num = float(val)
        if num in [1, 2]:
            return round(num, 1)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
smokingstatus,"class smokingstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""A smoking status""
        self.format = ""A binary value 0 or 1""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid smoking status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
abuseexperienced,"
class abuseexperienced(GeneralSemanticType):
    def __init__(self):
        self.description = ""Abuse experienced status""
        self.format = ""A boolean value expressed as a float""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid abuse experienced status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
disabilitydays,"
class disabilitydays(GeneralSemanticType):
    def __init__(self):
        self.description = ""Disability days status""
        self.format = ""binary value""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid disability days status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
raceofcaller,"class raceofcaller(GeneralSemanticType):
    def __init__(self):
        self.description = 'Race of the caller'
        self.format = 'Race of the caller should be stored as strings'
        self.examples = ['non-black', 'black', 'non-black', 'black', 'non-black']

    def super_cast(self, val):
        val = str(val).lower()
        if val in ['black', 'non-black']:
            return val
        else:
            raise ValueError('Invalid race')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['black', 'non-black']:
            return True
        else:
            return False"
supportyn,"class supportyn(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""Support indicator""
        self.format = ""binary""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
volrace,"class volrace(GeneralSemanticType):
    def __init__(self):
        self.description = ""Voluntary Race Information""
        self.format = ""Boolean Value""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
agecat,"class agecat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Categorical representation of age'
        self.format = 'Age category should be an integer between 1 and 7'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val in range(1, 8):
            return val
        else:
            raise ValueError('Invalid age category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (1 <= casted_val <= 7):
            return True
        else:
            return False"
inccat,"class inccat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Categorical representation of income'
        self.format = 'Income category should be an integer between 1 and 15'
        self.examples = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val in range(1, 16):
            return val
        else:
            raise ValueError('Invalid income category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 16) or np.isnan(casted_val):
            return True
        else:
            return False"
presenceofchildren,"class presenceofchildren(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Presence of children in a family'
        self.format: str = 'boolean representation with True for ""Y"" and False for ""N""'
        self.examples: list = [True, False, True, False, True]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        val = str(val).upper()
        if val == 'Y':
            return True
        elif val == 'N':
            return False
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False, np.nan]:
            return True
        else:
            return False"
homeowner,"class homeowner(GeneralSemanticType):
    def __init__(self):
        self.description = 'Home ownership status'
        self.format = 'Status should be stored as strings'
        self.examples = ['OWNER', 'RENTER', 'OWNER', 'RENTER', 'OWNER']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = str(val).upper()
        if val in ['OWNER', 'RENTER']:
            return val
        else:
            raise ValueError('Invalid home ownership status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['OWNER', 'RENTER']:
            return True
        else:
            return False
"
educ,"class educ(GeneralSemanticType):
    def __init__(self):
        self.description = ""Education status""
        self.format = ""Numeric representation""
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif val in [1, 2]:
            return val
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, float('nan')]:
            return True
        else:
            return False"
casename,"class casename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a legal case'
        self.format = ""Case names should be in Title Case, with the format 'Applicant v. Respondent'""
        self.examples = ['Eweida and Others v. the United Kingdom (48420/10)', 'Bayatyan v. Armenia [GC]', 'Bukhartyan v. Armenia', 'Knights of the Golden Lotus v. France (50615/07)', 'Pyramid Temple v. France (50471/07)']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Basic string checks
        if isinstance(casted_val, str) and len(casted_val) > 0:
            # Regular expression to match the case name format
            pattern = r'[A-Za-z\s]+v\.[A-Za-z\s]+(\s\(\d+\/\d+\))?'
            if re.match(pattern, casted_val):
                return True
        return False"
judge,"
class judge(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a judge'
        self.format = ""Judges' names should be in Title Case""
        self.examples = ['Vajic', 'Rozakis', 'Spielmann', 'Hajiyev', 'Kovler']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
binarycategorical,"class binarycategorical(GeneralSemanticType):
    def __init__(self):
        self.description = 'Binary Categorical Variable'
        self.format = 'These values are represented as strings'
        self.examples = ['example1', 'example2', 'example1', 'example2', 'example1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
ternarycategorical,"class ternarycategorical(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ternary Categorical Variable'
        self.format = 'These values are represented as strings'
        self.examples = ['Value 1', 'Value 2', 'Value 3']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
multivaluecategorical,"class multivaluecategorical(GeneralSemanticType):
    def __init__(self):
        self.description = 'Multi-value Categorical Variable'
        self.format = 'These values are represented as strings'
        self.examples = ['Value1', 'Value2, Value3, Value4', 'Value5, Value6, Value7']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
quantity,"class quantity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quantity of a commodity'
        self.format = 'Quantity should be an integer value'
        self.examples = [10, 50, 75, 100, 200]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
value,"class value(GeneralSemanticType):
    def __init__(self):
        self.description = 'Value of a commodity'
        self.format = 'In USD as a floating point number'
        self.examples = [10.0, 50.0, 75.0, 100.0, 200.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
hhi,"class hhi(GeneralSemanticType):
    def __init__(self):
        self.description = 'Herfindahl-Hirschman Index'
        self.format = 'HHI should be a floating point number between 0 and 1'
        self.examples = [0.1, 0.2, 0.5, 0.7, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1:
            return True
        else:
            return False"
ban,"class ban(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary ban status""
        self.format = ""Binary value 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0,1]:
                return int_val
            else:
                return ""Invalid Value""
        except ValueError:
            return ""Invalid Type""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0,1]:
            return True
        else:
            return False"
quota,"class quota(GeneralSemanticType):
    def __init__(self):
        self.description = 'Quota of a commodity'
        self.format = 'Quota should be an integer value'
        self.examples = [10, 50, 75, 100, 200]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid data'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
production,"class production(GeneralSemanticType):

    def __init__(self):
        self.description = 'Production of a commodity'
        self.format = 'Production should be an integer value'
        self.examples = [10, 50, 75, 100, 200]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)):
            try:
                return int(val)
            except ValueError:
                raise Exception(""Invalid value for production. Expected an integer."")
        else:
            raise Exception(""Invalid type for production. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
demand,"class demand(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Demand of a commodity'
        self.format = 'Demand should be an integer value'
        self.examples = [10, 50, 75, 100, 200]

    def super_cast(self, val):
        if isinstance(val, str):
            if val.isdigit():
                return int(val)
            else:
                raise ValueError(""Value must be numeric"")
        elif isinstance(val, int) or isinstance(val, float):
            return int(val)
        else:
            raise TypeError(""Value must be a string, int or float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
googletrend,"class googletrend(GeneralSemanticType):
    def __init__(self):
        self.description = 'Google Trend data'
        self.format = 'Google Trend data should be an integer value between 0 and 100'
        self.examples = [10, 20, 30, 40, 50]
        
    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 100:
            return True
        else:
            return False"
studentlevel,"class studentlevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Student Level'
        self.format = 'Integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]
        
    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in range(1, 6):
                return int_val
        except ValueError:
            raise Exception(f""Value {val} cannot be cast to integer between 1 and 5."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (casted_val in range(1, 6)):
            return True
        else:
            return False"
yearborn,"class yearborn(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of Birth'
        self.format = 'Year of birth should be an integer less than or equal to current year'
        self.examples = [1992, 1985, 1963, 1978, 1991]

    def super_cast(self, val):
        try:
            val = int(val)
            if val > datetime.now().year:
                return np.nan
            else:
                return val
        except:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not np.nan and 0 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
vignum,"class vignum(GeneralSemanticType):

    def __init__(self):
        self.description = 'The vignette number'
        self.format = 'Vignette number should be an integer'
        self.examples = [1, 2, 3, 4, 5]
        
    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise ValueError(""Unable to cast value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 8:
            return True
        else:
            return False"
uniquevigidentifier,"class uniquevigidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique Identifier for the vignette'
        self.format = 'Unique Vignette Identifiers should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1:
            return True
        else:
            return False"
practiceidentifier,"class practiceidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for the practice""
        self.format = ""Practice Identifiers should be integers""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= float('inf'):
            return True
        else:
            return False"
knowledgecode,"class knowledgecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'A code representing the knowledge of the veterinarian'
        self.format = 'Knowledge codes are strings'
        self.examples = ['preventpneumonia', 'suspectswaterymouth', 'suspectspneumonia', 'preventwaterymouth']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['preventpneumonia', 'suspectswaterymouth', 'suspectspneumonia', 'preventwaterymouth']
        if casted_val in valid_values:
            return True
        else:
            return False"
vetcode,"class vetcode(GeneralSemanticType):

    def __init__(self):
        self.description = ""A vet code""
        self.format = ""A string""
        self.examples = ['noothervet', 'othervet', 'noothervet', 'othervet', 'noothervet']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['noothervet', 'othervet']:
            return True
        else:
            return False"
timecode,"class timecode(GeneralSemanticType):
    def __init__(self):
        self.description = ""A time status""
        self.format = ""In lower-case and as a string""
        self.examples = ['runninglate', 'notrunninglate', 'runninglate', 'notrunninglate', 'runninglate']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['runninglate', 'notrunninglate']:
            return True
        else:
            return False"
habitcode,"class habitcode(GeneralSemanticType):
    def __init__(self):
        self.description = ""Habit code, which represents if a certain habit is never used or used at the same time every year""
        self.format = ""lower-cased string""
        self.examples = ['neverused', 'sametimeeveryyear', 'neverused', 'neverused', 'sametimeeveryyear']
        
    def super_cast(self, val):
        return str(val).lower()
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['neverused', 'sametimeeveryyear']:
            return True
        else:
            return False"
easecode,"class easecode(GeneralSemanticType):
    def __init__(self):
        self.description = ""A code representing customer's willingness to pay""
        self.format = ""In lower-case and as a string""
        self.examples = ['happytopay', 'notwanttopay', 'happytopay', 'notwanttopay', 'happytopay']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['happytopay', 'notwanttopay']:
            return True
        else:
            return False"
confidencecode,"class confidencecode(GeneralSemanticType):
    def __init__(self):
        self.description = ""Confidence level""
        self.format = ""Confidence level in string format""
        self.examples = ['confident', 'notconfident', 'confident', 'notconfident', 'confident']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['confident', 'notconfident']:
            return True
        else:
            return False"
outcomea,"class outcomea(GeneralSemanticType):
    def __init__(self):
        self.description = 'Outcome a'
        self.format = 'Outcome a should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(""Cannot convert {} to integer"".format(val))
 
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 11:
            return True
        else:
            return False
        return casted_val in self.examples"
outcomeb,"class outcomeb(GeneralSemanticType):
    def __init__(self):
        self.description = 'Outcome b'
        self.format = 'An integer in the range of 1 to 10'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        # Convert input to integer if possible
        try:
            int_val = int(val)
        except ValueError:
            raise Exception(""Invalid input, expected an integer."")
        return int_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the integer is in the valid range
        if 1 <= casted_val <= 10:
            return True
        else:
            return False"
agebin,"class agebin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age group of the veterinarian'
        self.format = 'Age group is a string'
        self.examples = ['>31', '<=30']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['>31', '<=30']:
            return True
        else:
            return False"
practicesa,"class practicesa(GeneralSemanticType):

    def __init__(self):
        self.description = ""If a practice is followed""
        self.format = ""Yes or No in string format""
        self.examples = ['yesSA', 'noSA', 'yesSA', 'noSA', 'yesSA']

    def super_cast(self, val):
        str_val = str(val)
        if str_val.lower() in ['yessa', 'nosa']:
            return str_val.upper()
        else:
            raise Exception(""Invalid Value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['YESSA', 'NOSA']:
            return True
        else:
            return False"
agreeableness,"class agreeableness(GeneralSemanticType):
    def __init__(self):
        self.description = 'Agreeableness score of the veterinarian'
        self.format = 'Agreeableness score should be an integer'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 3:
            return True
        else:
            return False"
companyname,"class companyname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Company Names'
        self.format = 'Company names should be capitalized strings'
        self.examples = ['Rutgers University Libraries', 'SIU Edwardsville', 'University of California, Berkeley', 'University of Arkansas at Little Rock', 'George Mason University', 'African Media', 'Hulamin', 'Verimark', 'Argent', 'Aspen']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
industry,"class industry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Industry Names'
        self.format = 'Industry names should be strings'
        self.examples = ['Academic/Research (College/University)', 'Information Technology', 'Finance', 'Healthcare', 'Manufacturing']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
jobfunction,"class jobfunction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job Functions'
        self.format = 'Job functions should be strings'
        self.examples = ['Other', 'Scholarly Communication/Copyright', 'Administration/Management', 'Other / Not listed', 'Reference']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
jobtype,"class jobtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Job Types'
        self.format = ""Job types should be either 'Full-time' or 'Part-time'""
        self.examples = ['Full-time', 'Part-time', 'Full-time', 'Part-time', 'Full-time']

    def super_cast(self, val):
        if val in ['Full-time', 'Part-time']:
            return val
        else:
            raise ValueError(""Invalid job type, should be either 'Full-time' or 'Part-time'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Full-time', 'Part-time']:
            return True
        else:
            return False"
jobduration,"class jobduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job Durations'
        self.format = ""Job durations should be either 'Indefinite', '6-12 Months', or '1-2 Years'""
        self.examples = ['Indefinite', '6-12 Months', '1-2 Years']

    def super_cast(self, val):
        if val in ['Indefinite', '6-12 Months', '1-2 Years']:
            return val
        else:
            raise ValueError(""Invalid job duration, should be either 'Indefinite', '6-12 Months', or '1-2 Years'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Indefinite', '6-12 Months', '1-2 Years']:
            return True
        else:
            return False
"
mineducation,"class mineducation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Minimum Education Requirements'
        self.format = ""Minimum education requirements should be either 'Master's Degree' or 'BA/BS/Undergraduate'""
        self.examples = [""Master's Degree"", 'BA/BS/Undergraduate']

    def super_cast(self, val):
        if val in [""Master's Degree"", 'BA/BS/Undergraduate']:
            return val
        else:
            raise ValueError(""Invalid minimum education requirement, should be either 'Master's Degree' or 'BA/BS/Undergraduate'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [""Master's Degree"", 'BA/BS/Undergraduate']:
            return True
        else:
            return False"
minexperience,"class minexperience(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minimum Experience Requirements'
        self.format = ""A string indicating range of years, e.g. '2-3 Years'""
        self.examples = ['3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years']

    def super_cast(self, val):
        if val in ['3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years']:
            return val
        else:
            raise ValueError(""Invalid minimum experience requirement, should be one of '3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years']:
            return True
        else:
            return False"
salary,"class salary(GeneralSemanticType):

    def __init__(self):
        self.description = 'Salary in USD'
        self.format = 'In float rounded to two decimal places'
        self.examples = [42000.0, 50000.0, 55000.0, 62868.0, 95000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
facilitycode,"class facilitycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'A unique identifier for a medical facility'
        self.format = 'Facility codes should be integers ranging from 10101 to 90201'
        self.examples = [10101, 10105, 10118, 10124, 10130]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 10101 <= casted_val <= 90201:
            return True
        else:
            return False"
hospital,"class hospital(GeneralSemanticType):
    def __init__(self):
        self.description = ""Hospital presence""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, float) and math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
pnurse,"class pnurse(GeneralSemanticType):
    def __init__(self):
        self.description = ""The proportion of nurses in a medical facility""
        self.format = ""A float between 0 and 1""
        self.examples = [0.6923077, 0.33333334, 0.33333334, 0.6666667, 0.6666667]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 1:
            return True
        else:
            return False"
hivprev14,"class hivprev14(GeneralSemanticType):
    def __init__(self):
        self.description = 'The prevalence of HIV in 2014'
        self.format = 'A float between 0 and 37.333332'
        self.examples = [18.0, 18.181818, 14.634146, 10.0, 11.627908]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            if math.isnan(val):
                return float('nan')
            return float(val)
        else:
            raise ValueError(""Value must be a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 37.333332:
            return True
        else:
            return False
"
mtct14,"class mtct14(GeneralSemanticType):
    def __init__(self):
        self.description = 'The rate of mother to child transmission of HIV in 2014'
        self.format = 'mtct14 should be a float between 0 and 50, representing a percentage'
        self.examples = [0.0, 14.285715, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            else:
                return val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= 50:
                return True
        return False"
survival14,"class survival14(GeneralSemanticType):

    def __init__(self):
        self.description = 'The survival rate in 2014'
        self.format = 'survival14 should be a float between 50 and 100, representing a percentage'
        self.examples = [100.0, 85.71429, 100.0, 100.0, 100.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace('%', '')
            val = float(val)
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 50 and casted_val <= 100:
            return True
        else:
            return False"
hivtest14,"class hivtest14(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rate of HIV testing in 2014'
        self.format = 'hivtest14 should be a float between 54.761906 and 100, representing a percentage'
        self.examples = [98.18182, 78.723404, 93.333336, 85.71429, 72.093025]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return False
        return 54.761906 <= casted_val <= 100"
lntested,"class lntested(GeneralSemanticType):
    def __init__(self):
        self.description = 'The natural logarithm of the number of people tested'
        self.format = 'A float between 1.7917595 and 9.031812'
        self.examples = [6.1696105, 4.0943446, 4.5217886, np.nan, 5.1817837]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif 1.7917595 <= casted_val <= 9.031812:
            return True
        else:
            return False"
lnart,"
class lnart(GeneralSemanticType):

    def __init__(self):
        self.description = 'The natural logarithm of the number of people receiving antiretroviral therapy'
        self.format = 'lnart should be a float between 0 and 5.765191'
        self.examples = [3.9702919, 0.6931472, 1.9459101, float('nan'), 1.7917595]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif 0 <= casted_val <= 5.765191:
            return True
        else:
            return False
"
lncosttested,"class lncosttested(GeneralSemanticType):

    def __init__(self):
        self.description = 'The natural logarithm of the cost of testing'
        self.format = 'float between 2.449549 and 6.2694573'
        self.examples = [3.729312, 4.8842654, 4.1110787, float('nan'), 4.1271315]

    def super_cast(self, val):
        try:
            # Try to cast the value to float
            casted_val = float(val)
            # If the value is NaN, return it as it is
            if math.isnan(casted_val):
                return casted_val
            # If the value is within the valid range, return it
            if self.valid_range[0] <= casted_val <= self.valid_range[1]:
                return casted_val
            else:
                # If the value is not within the valid range, raise an exception
                raise ValueError(""The value is not within the valid range."")
        except ValueError:
            # If the value cannot be casted to float, raise an exception
            raise ValueError(""The value cannot be casted to float."")

    def validate(self, val):
        # Cast the value
        casted_val = self.super_cast(val)
        # If the value is NaN, it is considered valid
        if math.isnan(casted_val):
            return True
        # If the value is within the valid range, it is considered valid
        if self.valid_range[0] <= casted_val <= self.valid_range[1]:
            return True
        # If the value is not within the valid range, it is considered invalid
        return False"
lncostart,"class lncostart(GeneralSemanticType):

    def __init__(self):
        self.description = 'The natural logarithm of the cost of antiretroviral therapy'
        self.format = 'lncostart should be a float between 4.469213 and 8.520749'
        self.examples = [5.928631, 8.285463, 6.686957, float('nan'), 7.517155]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 4.469213 and casted_val <= 8.520749:
            return True
        else:
            return False"
urban,"class urban(GeneralSemanticType):
    def __init__(self):
        self.description = ""Urban area status""
        self.format = ""A Boolean value""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
contra,"class contra(GeneralSemanticType):
    def __init__(self):
        self.description = 'A score representing the level of contraception use'
        self.format = 'Contraception scores should be integers'
        self.examples = [4, 4, 4, 4, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for contraception score. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 4:
            return True
        else:
            raise Exception(""Invalid value for contraception score. Expected an integer between 0 and 4."")"
prophylaxis,"class prophylaxis(GeneralSemanticType):
    def __init__(self):
        self.description = 'A score representing the level of prophylaxis use'
        self.format = 'Prophylaxis scores should be integers'
        self.examples = [6, 6, 6, 6, 5]
    
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('The provided value is not valid. It must be an integer.')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 6:
            return True
        else:
            return False"
antenatal,"class antenatal(GeneralSemanticType):
    def __init__(self):
        self.description = 'A score representing the level of antenatal care'
        self.format = 'Antenatal scores should be integers'
        self.examples = [11, 10, 11, 11, 10]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 12:
            return True
        else:
            return False"
province,"class province(GeneralSemanticType):

    def __init__(self):
        self.description = ""Province names""
        self.format = ""Capitalized string""
        self.examples = ['DKI Jakarta', 'Jawa Barat', 'Jawa Timur', 'Sulawesi Selatan', 'Jawa Tengah']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
donationamount,"class donationamount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The donation amount'
        self.format = 'Donation amount should be formatted as a floating point number (in EUR units) with two decimal places for cents'
        self.examples = [0.0, 10.5, 1.3, 10000.0, 8998.0]
        
    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif isinstance(val, str) and val.isdigit():
            return round(float(val), 2)
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isnull(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
numericidentifier,"class numericidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Numeric ID""
        self.format = ""Integer""
        self.examples = [100, 200, 300, 400, 500]
    
    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 100 and casted_val <= 800:
            return True
        else:
            return False"
dayofweek,"class dayofweek(GeneralSemanticType):
    def __init__(self):
        self.description = 'Day of the week'
        self.format = 'In string format and capitalized'
        self.examples = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

    def super_cast(self, val):
        if isinstance(val, int):
            days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            if 1 <= val <= 7:
                return days[val - 1]
            else:
                return 'Invalid Day'
        elif isinstance(val, str):
            return val.capitalize()
        else:
            return 'Invalid Input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        if casted_val in valid_values:
            return True
        else:
            return False"
treatmentgroup,"class treatmentgroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Treatment group'
        self.format = 'Treatment group should be a string'
        self.examples = ['france', 'un', 'control']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['france', 'un', 'control']:
            return True
        else:
            return False"
entityidentifier,"class entityidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique entity identifier'
        self.format = 'Entity ID should be a non-negative integer'
        self.examples = [1, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1:
                raise ValueError('Entity ID must be a non-negative integer')
            return val
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
specificityindex,"class specificityindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Specificity Index'
        self.format = 'Specificity Index should be a non-negative floating point number'
        self.examples = [np.nan, 4.0, 6.0, 1.0, 7.0]
        
    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val) or val < 0:
                return np.nan
            return val
        except ValueError:
            return np.nan
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 or np.isnan(casted_val):
            return True
        else:
            return False"
mood,"class mood(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mood as a numeric representation'
        self.format = 'Mood should be a floating point number'
        self.examples = [55.562, 59.417, 60.488, 64.195, 64.699]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception(""Value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
caselaw,"class caselaw(GeneralSemanticType):

    def __init__(self):
        self.description = 'Case Law as a numeric representation'
        self.format = 'Floating point number'
        self.examples = [-1.421054, 1.771928, 12.96491, 19.157892, 16.350874]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value: Cannot be converted to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
policy,"class policy(GeneralSemanticType):
    def __init__(self):
        self.description = 'Policy as a numeric representation'
        self.format = 'Policy should be a floating point number'
        self.examples = [-2.368422, -3.157896, -3.94737, -3.736844, -5.526318]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value for policy"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
unemployment,"class unemployment(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unemployment rate as a percentage'
        self.format = 'Unemployment rate should be a floating point number with 1 decimal place'
        self.examples = [5.5, 4.4, 4.1, 4.3, 6.8]
    
    def super_cast(self, val):
        return round(float(val), 1)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
inflation,"class inflation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Inflation rate as a percentage'
        self.format = 'A floating point number'
        self.examples = [0.4, 3.0, 2.9, 1.8, 1.7]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            raise Exception(""Invalid data: Unable to cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            return False
        else:
            return True"
segalmedmeancum,"class segalmedmeancum(GeneralSemanticType):
    def __init__(self):
        self.description = 'SegalMedMeanCum as a numeric representation'
        self.format = 'SegalMedMeanCum should be a floating point number'
        self.examples = [1.2288889, 1.67, 2.086111, 2.5744445, 3.0627778]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. The value should be a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if math.isnan(casted_val):
                return False
            else:
                return True
        else:
            return False"
partygdp,"class partygdp(GeneralSemanticType):

    def __init__(self):
        self.description = 'PartyGDP as a numeric representation'
        self.format = 'PartyGDP should be a floating point number'
        self.examples = [-7.1986003, -1.9757589, -2.0159292, 0.9034639, -7.1733356]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Cannot cast value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
caselawnonsal,"class caselawnonsal(GeneralSemanticType):
    def __init__(self):
        self.description = 'CaseLawNonSal as a numeric representation'
        self.format = 'CaseLawNonSal should be a floating point number'
        self.examples = [24.89475, 58.193, 94.49125, 121.7895, 145.08775]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif isinstance(casted_val, float):
            return True
        else:
            return False"
cityidentifier,"class cityidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'ID for cities'
        self.format = 'City ID should be a 4-digit integer'
        self.examples = [1001, 8119, 14064, 20024, 23169]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or casted_val < 1001 or casted_val > 23169:
            return False
        else:
            return True"
timepoint,"class timepoint(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year when the conflict happened'
        self.format = 'Time point should be a 4-digit year'
        self.examples = [1453, 1552, 1632, 1688, 1849]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for timepoint"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 233 <= casted_val <= 1849:
            return True
        else:
            return False"
typeconflict,"class typeconflict(GeneralSemanticType):
    def __init__(self):
        self.description = 'Conflict Type'
        self.format = 'Conflict type should be an integer ranging from 1-3'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [1,2,3]:
                return casted_val
            else:
                return 'Invalid value'
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1,2,3]:
            return True
        else:
            return False"
typedetail,"class typedetail(GeneralSemanticType):
    def __init__(self):
        self.description = 'Detailed description of conflict type'
        self.format = 'Conflict details should be represented as a string with a combination of letters and numbers'
        self.examples = ['cd1', 'b3', 'a1', 'e2', 'f1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[a-zA-Z0-9]*$', casted_val): 
            return True
        else:
            return False"
warlabel,"class warlabel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Label for wars'
        self.format = 'War label should be an integer ranging from 0-30'
        self.examples = [0, 2, 30]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        else:
            try:
                return int(val)
            except ValueError:
                raise Exception(""Invalid value. Value should be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 30:
            return True
        else:
            return False
"
overreported,"class overreported(GeneralSemanticType):
    def __init__(self):
        self.description = ""Overreporting status""
        self.format = ""A boolean represented as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return int(val)
        else:
            raise Exception(""Value must be a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
uncertainty,"class uncertainty(GeneralSemanticType):
    def __init__(self):
        self.description = 'Uncertainty in the conflict report'
        self.format = 'Uncertainty should be an integer ranging from 0-2'
        self.examples = [0, 1, 2, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except Exception as e:
            raise ValueError(f""Unable to convert {val} to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(0,3):
            return True
        else:
            return False"
range,"class range(GeneralSemanticType):
    def __init__(self):
        self.description = 'Range of conflict'
        self.format = 'Range should be an integer ranging from 0-5'
        self.examples = [0, 2, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 5:
            return True
        else:
            return False"
thirtyywleader,"class thirtyywleader(GeneralSemanticType):
    def __init__(self):
        self.description = ""Leader during the Thirty Years' War""
        self.format = ""Leader should be represented as a string with a combination of letters and numbers""
        self.examples = ['0', '28', '5', 'm', '36']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
thirtyywconflictparty,"class thirtyywconflictparty(GeneralSemanticType):
    def __init__(self):
        self.description = ""Party involved in the conflict during the Thirty Years' War""
        self.format = ""Conflict party should be represented as an integer ranging from 0-2""
        self.examples = [0, 1, 2, 0, 1]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 2:
            return True
        else:
            return False"
thirtyywterritory,"class thirtyywterritory(GeneralSemanticType):
    def __init__(self):
        self.description = ""Territory during the Thirty Years' War""
        self.format = 'Territory should be represented as a float ranging from 0-30'
        self.examples = [0.0, 18.5, 21.0, 30.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0.0 <= casted_val <= 30.0:
            return True
        else:
            return False"
thirtyywcountry,"class thirtyywcountry(GeneralSemanticType):
    def __init__(self):
        self.description = ""Country during the Thirty Years' War""
        self.format = 'Country should be represented as an integer ranging from 0-8'
        self.examples = [0, 3, 7, 8, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(0, 9):
            return True
        else:
            return False"
askedheavenhell,"class askedheavenhell(GeneralSemanticType):

    def __init__(self):
        self.description = ""Boolean type indicating if asked about heaven or hell""
        self.format = ""An integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val is np.nan or val is None:
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, np.nan]:
            return True
        else:
            return False"
beliefheavenhell,"class beliefheavenhell(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Belief in heaven and hell'
        self.format = 'Stored as float'
        self.examples = ['0.0', '1.0', '2.0', '0.0', '1.0']

    def super_cast(self, val):
        try:
            return float(val)
        except Exception:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val in [0.0, 1.0, 2.0]:
            return True
        else:
            return False"
donationprice,"class donationprice(GeneralSemanticType):
    def __init__(self):
        self.description = 'Donation price in local currency'
        self.format = 'Stored as float'
        self.examples = [0.0, 1.0, 2.0, 1.5, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value. Expected a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        elif 0 <= casted_val <= 2:
            return True
        else:
            return False"
donationyes,"class donationyes(GeneralSemanticType):
    def __init__(self):
        self.description = ""Donation status""
        self.format = ""Boolean represented as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [0,1]:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
femaler,"class femaler(GeneralSemanticType):

    def __init__(self):
        self.description = ""Indicates whether a person is female or not""
        self.format = ""Boolean value as integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if not math.isnan(val):
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1] or np.isnan(casted_val):
            return True
        else:
            return False"
agebracketr,"class agebracket(GeneralSemanticType):
    def __init__(self):
        self.description = 'Age bracket of the respondent'
        self.format = 'Stored as float'
        self.examples = [0.0, 1.0, 2.0, 3.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Unable to convert value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, 2.0, 3.0]:
            return True
        else:
            return False"
educationr,"class educationr(GeneralSemanticType):
    def __init__(self):
        self.description = 'Education level of the respondent'
        self.format = 'Stored as float'
        self.examples = [0.0, 1.0, 2.0, 0.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input, expected a numeric value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, 2.0]:
            return True
        else:
            return False"
economicr,"class economicr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economic status of the respondent'
        self.format = 'Stored as float'
        self.examples = [0.0, 1.0, 2.0, 3.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, float) and 0.0 <= casted_val <= 3.0"
politicr,"class politicr(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political affiliation of the respondent'
        self.format = 'Stored as float'
        self.examples = [0.0, 1.0, 2.0, 0.0, 1.0]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return casted_val in [0.0, 1.0, 2.0]"
christian,"class christian(GeneralSemanticType):
    def __init__(self):
        self.description = ""Christian""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise ValueError(f""Invalid value: {val}. Expected 0 or 1."")
        except ValueError as ve:
            print(ve)
        except Exception as e:
            print(e)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
adins,"class adins(GeneralSemanticType):

    def __init__(self):
        self.description = 'ADINs initiated'
        self.format = 'ADINs should be positive numbers'
        self.examples: list = [207, 64, 336, 182, 52]

    def super_cast(self, val):
        try:
            num = int(val)
            if num > 0:
                return num
            else:
                return None
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val > 0:
            return True
        else:
            return False"
reviewerank,"class reviewerank(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rank of the reviewer'
        self.format = 'Rank should be an integer value'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if val in range(1, 5):
            return val
        elif val is None or pd.isna(val):
            return float('nan')
        else:
            raise Exception('Invalid rank')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5) or np.isnan(casted_val):
            return True
        else:
            return False"
ranking,"class ranking(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ranking of an entity'
        self.format = 'Ranking should be formatted as a whole number'
        self.examples: list = [1, 2, 3, 4, 5]
    
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
cfcscore,"
class cfcscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'CFC (Consideration of Future Consequences) score in a survey'
        self.format = 'CFC score should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 5:
                raise ValueError
            else:
                return num
        except ValueError:
            raise Exception('Invalid CFC score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
logtransformed,"class logtransformed(GeneralSemanticType):
    def __init__(self):
        self.description = 'Logarithmically Transformed Variables'
        self.format = 'Logarithmically transformed variables must be floats'
        self.examples = [-4.985991, -4.284, -4.141, -3.893, -2.565392]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif math.isinf(casted_val):
            return False
        else:
            return True"
courtage,"class courtage(GeneralSemanticType):
    def __init__(self):
        self.description = 'Court Age'
        self.format = 'Integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if np.isnan(val):
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 40:
            return True
        else:
            return False"
coalition,"class coalition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Winning Coalition'
        self.format = 'float'
        self.examples = [0.0, 0.326, 0.501, 0.751, 1.0014246]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return float(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1.0014246:
            return True
        else:
            return False"
competition,"class competition(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political Competition'
        self.format = 'Political Competition must be floats'
        self.examples = [0, 3.7, 19.1, 23.4, 49]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 49:
            return True
        else:
            return False"
independence,"class independence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Judicial Independence'
        self.format = 'float'
        self.examples = [0.0164, 0.179, 0.313, 0.684, 0.9886]

    def super_cast(self, val):
        if math.isnan(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0164 and casted_val <= 0.9886:
            return True
        else:
            return False"
unrest,"class unrest(GeneralSemanticType):

    def __init__(self):
        self.description = 'Civil Unrest'
        self.format = 'Civil Unrest must be integers'
        self.examples = [0, 0, 0, 0, 10]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and 0 <= casted_val <= 10:
            return True
        else:
            return False"
ethnicfractionalization,"class ethnicfractionalization(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Ethnic Fractionalization'
        self.format: str = 'float'
        self.examples: list = [0.0009999871, 0.125, 0.34, 0.57, 0.88]

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.replace("","", ""."") # handle case where comma is used as decimal point
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""Cannot cast value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0009999871 <= casted_val <= 0.88:
            return True
        else:
            return False"
projectyear,"class projectyear(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of the project'
        self.format = 'Year must be in 4-digit form, and the project code in 2-digit form, separated by /'
        self.examples = ['MPV0443/08', 'MPV0445/08', 'MPV0447/08', 'MPV0451/08', 'MPV0457/09']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the pattern matches
        if re.match(r'^MPV\d{4}/\d{2}$', casted_val):
            return True
        else:
            return False"
numsen,"class numsen(GeneralSemanticType):
    def __init__(self):
        self.description = 'Senate bill number'
        self.format = 'Bill number must be in 4-digit form, and the project code in 2-digit form, separated by /'
        self.examples = ['MPV0443/08', 'PLC0027/97', 'MPV0466/09', 'MPV0447/08', 'MPV0451/08']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'\b(MPV|PLC)\d{4}/\d{2}\b', casted_val):
            return True
        else:
            return False"
lastaction,"class lastaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Last action taken'
        self.format = ""Last action must be either 'TNJR' or 'VETT'""
        self.examples = ['TNJR', 'VETT', 'TNJR', 'VETT', 'TNJR']

    def super_cast(self, val):
        str_val = str(val)
        if str_val == 'TNJR' or str_val == 'VETT':
            return str_val
        else:
            raise Exception('Invalid last action')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['TNJR', 'VETT']:
            return True
        else:
            return False"
totaldevicesfinal,"class totaldevicesfinal(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Total final devices'
        self.format = 'Total final devices should be a non-negative floating point number'
        self.examples = [0.0, 25.5, 53.0, 135.5, 2189.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                return ""Invalid total final devices""
        except ValueError:
            return ""Invalid total final devices""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
protestidentifier,"class protestidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique protest ID'
        self.format = 'Protest ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val > 0"
protestdate,"
class protestdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of protest'
        self.format = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2013-01-10', '2013-01-11', '2013-01-15', '2013-01-15', '2013-01-18']

    def super_cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d').date().isoformat()
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and re.match(r'^\d{4}-\d{2}-\d{2}$', casted_val):
            return True
        else:
            return False"
protestact,"class protestact(GeneralSemanticType):

    def __init__(self):
        self.description = 'Act of protest'
        self.format = 'Act should be a string'
        self.examples = ['Trabajadores y trabajadoras públicas', 'ANEP', 'Sindicatos', 'Docentes', 'SINTRAJAP']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
protestenti,"class protestentity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Entity involved in the protest'
        self.format = 'Entity should be a string'
        self.examples = ['Administración Alvarado Quesada', 'CCSS', 'MEP', 'Administración Solís Rivera', 'Asamblea Legislativa de la Administraci��n Solís Rivera']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
protestdem,"class protestdem(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of demand associated with the protest'
        self.format = 'Type of demand should be an integer between 1 and 14'
        self.examples = [1, 5, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in range(1, 15):
                return casted_val
            else:
                raise ValueError(""Value not within valid range."")
        except ValueError as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 14:
            return True
        else:
            return False"
landercode,"
class landercode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Represents codes associated with a particular region or state. The codes are integers from 1 to 16.'
        self.format = 'Lander codes are positive integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            val = int(val)
        if np.isnan(val):
            return np.nan
        val = int(val)
        if 1 <= val <= 16:
            return val
        else:
            return ""Invalid lander code""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 16:
            return True
        else:
            return False"
turnout,"class turnout(GeneralSemanticType):
    def __init__(self):
        self.description = 'Represents voter turnout percentage'
        self.format = 'Turnout percentage should be a floating point number'
        self.examples = [44.4, 60.5, 70.8, 80.45, 91.3]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        val = float(val)
        if val < 0 or val > 100:
            raise Exception('Invalid turnout percentage')
        return round(val, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 100:
            raise Exception('Invalid turnout percentage')
        else:
            return True"
treatment,"class treatment(GeneralSemanticType):

    def __init__(self):
        self.description = ""A treatment type""
        self.format = ""lower-case string""
        self.examples = ['control', 'stress', 'virus', '0', '1']

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 0:
                return 'control'
            elif val == 1:
                return 'stress'
            else:
                return 'unknown'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['control', 'stress', 'virus']:
            return True
        else:
            return False"
privacy,"class privacy(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Privacy status'
        self.format: str = 'boolean'
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return bool(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
politicaldistance,"class politicaldistance(GeneralSemanticType):
    def __init__(self):
        self.description = 'A measure of the political distance between entities'
        self.format = 'integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 1 and num <= 4:
                return num
        except ValueError:
            pass
        raise Exception('Invalid political distance')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        return False"
feeling,"class feeling(GeneralSemanticType):

    def __init__(self):
        self.description = 'A measure of feeling or emotion'
        self.format = 'Feeling should be a floating point number between 1.5 and 5.0'
        self.examples = [1.5, 2.5, 3.5, 4.5, 5.0]

    def super_cast(self, val):
        num = float(val)
        if num < 1.5 or num > 5.0:
            raise Exception('Invalid feeling value')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.5 <= casted_val <= 5.0:
            return True
        else:
            return False"
created,"class created(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value representing whether an object was created""
        self.format = ""A boolean value, 0 or 1""
        self.examples = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
politicalaccuracy,"class politicalaccuracy(GeneralSemanticType):

    def __init__(self):
        self.description = 'A measure of the accuracy of political beliefs'
        self.format = 'Political accuracy should be a floating point number between 1.0 and 7.0'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 1.0 or num > 7.0:
                raise ValueError
            return num
        except ValueError:
            raise Exception('Invalid political accuracy value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 7.0:
            return True
        else:
            return False"
scientificaccuracy,"class scientificaccuracy(GeneralSemanticType):

    def __init__(self):
        self.description = 'A measure of the accuracy of scientific beliefs'
        self.format = 'Scientific accuracy should be a floating point number between 1.0 and 7.0'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 1.0 or num > 7.0:
            raise Exception('Invalid scientific accuracy value')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and 1.0 <= casted_val <= 7.0:
            return True
        else:
            return False"
journalpissn,"class journalpissn(GeneralSemanticType):

    def __init__(self):
        self.description = 'The P-ISSN of a journal'
        self.format = 'String of numbers'
        self.examples = ['2615-9112', '1859-0020', '2198-4093', '0866-787X']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return bool(re.match(r'^\d{4}-\d{4}$', casted_val))"
journalessn,"class journalessn(GeneralSemanticType):
    def __init__(self):
        self.description = ""The E-ISSN of a journal, with '-' representing no E-ISSN""
        self.format = ""E-ISSN should be a string of numbers, with '-' representing no E-ISSN""
        self.examples = ['-', '2515-964X', '2475-1847', '0866-7136']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[-0-9A-Z]*$', casted_val):
            return True
        else:
            return False"
journalurl,"class journalurl(GeneralSemanticType):

    def __init__(self):
        self.description = 'The URL of a journal'
        self.format = 'URL should be a string'
        self.examples = ['http://jabes.ueh.edu.vn/', 'http://jed.neu.edu.vn/', 'http://www.bmrat.org/', 'http://tckh.dlu.edu.vn/', 'http://jabes.ueh.edu.vn/']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            result = re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', casted_val)
            return result is not None
        except:
            return False"
journalindexyear,"class journalindexyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'The year a journal was indexed'
        self.format = 'Year should be an integer'
        self.examples = [2015, 2016, 2017, 2018, 2019]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast the value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= datetime.now().year:
            return True
        else:
            return False"
ipaddress,"class ipaddress(GeneralSemanticType):
    def __init__(self):
        self.description = 'IP Address'
        self.format = 'IP addresses must be stored as strings'
        self.examples = ['100.0.4.242', '100.18.23.4', '100.19.117.40', '100.1.3.9', '100.10.44.134']

    def super_cast(self, val):
        if re.match('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', str(val)):
            return str(val)
        else:
            raise Exception('Invalid IP address')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', str(casted_val)):
            return True
        else:
            return False"
educationcategory,"class educationcategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Education Category'
        self.format = 'Education categories must be stored as strings'
        self.examples = [""bachelor's degree"", 'some college', 'high school or less', 'post-graduate']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid education category'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
regioncategory,"class regioncategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Geographic Region Category'
        self.format = 'Geographic regions must be stored as strings'
        self.examples = ['South', 'West', 'Northeast', 'Midwest']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
vote,"class vote(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vote Count'
        self.format = 'Votes should be formatted as an integer'
        self.examples = [43805, 728049, 1460644, 3376535, 21967444]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and val.isdigit():
            num = int(val)
            return num
        else:
            raise Exception('Invalid vote count')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
treatmenttype,"class treatmenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of treatment'
        self.format = 'Treatment type should be a string in lower-case'
        self.examples = ['msndem', 'apdem', 'foxrep', 'aprep', 'foxdem']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['msndem', 'apdem', 'foxrep', 'aprep', 'foxdem', 'a', 'b', 'c', 'd', 'baseline', 'caffeine']
        if casted_val in valid_values:
            return True
        else:
            return False"
copartytreatmenttype,"class copartytreatmenttype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Co-party treatment'
        self.format = 'Co-party treatment type should be a string'
        self.examples = ['si.pi', 'co.pi', 'so.po', 'co.po', 'si.po']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['si.pi', 'co.pi', 'so.po', 'co.po', 'si.po']:
            return True
        else:
            return False"
punditrank,"class punditrank(GeneralSemanticType):
    def __init__(self):
        self.description = 'Rank of the pundit'
        self.format = 'Pundit rank should be an integer with no decimal point'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if casted_val < 0:
            return False
        return True"
punditideology,"class punditideology(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ideology of the pundit'
        self.format = 'float between 0 and 1'
        self.examples = [0.71, 0.57, 0.57, 0.43, 1.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
biaslevel,"class biaslevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of bias'
        self.format = 'Bias level is a float between 0 and 1'
        self.examples = [0.6, 0.4, 0.8, 0.8, 1.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
interestlevel,"class interestlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of interest'
        self.format = 'Interest level should be a float between 0 and 1'
        self.examples = [0.6, 0.4, 0.7, 0.8, 0.2]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1:
            return True
        else:
            return False"
partyidentification,"class partyidentification(GeneralSemanticType):

    def __init__(self):
        self.description = 'Party identification'
        self.format = 'an integer between 1 and 7'
        self.examples = [6, 5, 5, 1, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(""Expected a number, but got: {}"".format(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
carbonemission,"class carbonemission(GeneralSemanticType):
    def __init__(self):
        self.description = 'The amount of carbon emission'
        self.format = 'Carbon emission should be formatted as a floating point number'
        self.examples = [2719.2862144, 2600.1003029799995, 9822.71762634, 12229.36756726, 4318.80543426]
        self.units = 'In kilotons'
        
    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 6)
        except ValueError:
            raise Exception('Invalid value. Unable to cast to float.')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
povertyrate,"class povertyrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Poverty Rate'
        self.format = 'Poverty rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.'
        self.examples = [17.2, 14.7, 15.4, 6.2, 5.8]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 1)
        except ValueError:
            raise Exception(""Value cannot be casted to float."")
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= 100:
            raise Exception(""Value is not within the valid range of 0 and 100."")
        return True"
socialmobilitydifference,"class socialmobilitydifference(GeneralSemanticType):

    def __init__(self):
        self.description = 'Social Mobility Difference'
        self.format = 'Social Mobility Difference should be formatted as a floating point number with one decimal place.'
        self.examples = [6.2, 5.8, 4.1, 16.0, 15.4]
        
    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except Exception:
            raise ValueError('Invalid value. It should be a numeric value.')
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
meanincome,"class meanincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mean Income'
        self.format = 'Mean income should be formatted as a floating point number with no decimal places.'
        self.examples = [16175.4, 18151.9, 15276.9]

    def super_cast(self, val):
        return round(float(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
shareofincome,"class shareofincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'Share of Income'
        self.format = 'Share of income should be formatted as a floating point number with one decimal place. The range is between 0 and 100.'
        self.examples = [4.7, 8.6, 10.1, 16.0, 15.4]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
healthcareoutcomes,"class healthcareoutcomes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health Care Outcomes'
        self.format = 'Health Care Outcomes should be formatted as a floating point number with one decimal place. The range is between 0 and 100.'
        self.examples = [8.6, 10.1, 9.7, 15.3, 22.1]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
meanhealthcare,"class meanhealthcare(GeneralSemanticType):

    def __init__(self):
        self.description = 'Mean Health Care'
        self.format = 'Mean Health Care should be formatted as a floating point number with one decimal place. The range is between 0 and 100.'
        self.examples = [16.0, 15.5, 17.0, 18.5, 19.0]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 100:
            return True
        else:
            return False"
unemployeerate,"class unemployeerate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unemployement Rate'
        self.format = 'Floating point number with one decimal place in the range of 0 to 100'
        self.examples = [25.0, 7.0, 0.9, 2.5, 3.8]

    def super_cast(self, val):
        try:
            val = round(float(val), 1)
            if 0 <= val <= 100:
                return val
            else:
                raise ValueError()
        except Exception:
            raise ValueError(f'Value {val} cannot be casted to the required format')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
educationrate,"class educationrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Education Rate'
        self.format = 'Education Rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.'
        self.examples = [8.7, 37.5, 23.5, 50.2, 12.3]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except Exception as e:
            print(f""Error occurred: {e}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 100:
            return True
        else:
            return False"
undernutrition,"class undernutrition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Undernutrition Rate'
        self.format = 'A floating point number with one decimal place'
        self.examples = [0.9, 2.5, 3.8, 4.7, 1.2]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
presidentidentifier,"class presidentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'ID of the president'
        self.format = 'President ID should be a numerical value'
        self.examples = [1, 37, 82, 114, 916]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for presidentidentifier"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 916:
            return True
        else:
            return False"
surname,"class surname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Surname of a person'
        self.format = 'Capitalized string'
        self.examples = ['Barrios', 'Zedillo', 'Alfonsin', 'Lagos', 'Calderon']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
economicgrowth,"class economicgrowth(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economic growth'
        self.format = 'Economic growth should be a numerical value'
        self.examples = [2.2117735037724344, -7.586677184135311, 7.875779830414856, 2.90999313057101, -2.5569048769462484]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise Exception(""Value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -12.312041447129602 and casted_val <= 18.28660668912445:
            return True
        else:
            return False"
majority,"class majority(GeneralSemanticType):

    def __init__(self):
        self.description = 'Majority'
        self.format = 'Majority should be a numerical value'
        self.examples = [50.98814, 51.1811, 50.9804, 48.34711, 46.06299]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input: Expected a numerical value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 6.96203 <= casted_val <= 100.0"
antigovernment,"class antigovernment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Antigovernment'
        self.format = 'Antigovernment should be a numerical value'
        self.examples = [0, 2, 10]

    def super_cast(self, val):
        try:
            # It will try to cast the value into integer
            return int(val)
        except ValueError:
            # If it fails, it means the value cannot be casted to integer
            raise Exception(f""Cannot cast {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)

        # Validate the range of the value
        if not 0 <= casted_val <= 10:
            raise Exception(f""{casted_val} is out of valid range [0, 10]"")
        
        return True"
scandals,"class scandals(GeneralSemanticType):

    def __init__(self):
        self.description = 'Scandals'
        self.format = 'Scandals should be a numerical value'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 21:
            return True
        return False"
hyperinflation,"class hyperinflation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hyperinflation'
        self.format = 'A numerical value'
        self.examples = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise Exception('Invalid value. Value must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
partyinstitutionalization,"class partyinstitutionalization(GeneralSemanticType):

    def __init__(self):
        self.description = 'Party Institutionalization'
        self.format = 'Numerical value'
        self.examples = [55.341496, 51.74145, 34.718, 39.322, 46.164]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f'Invalid value: {val}. Value must be a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 14.924614 or casted_val > 71.97012:
            raise Exception(f'Invalid value: {casted_val}. Value must be between 14.924614 and 71.97012.')
        return True"
publishercategory,"class publishercategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Publisher Category'
        self.format = 'Publisher Categories should be strings'
        self.examples = ['News', 'Arts & Entertainment', 'Mobile', 'Other', 'Reference']

    def super_cast(self, val):
        if val in self.examples:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
geography,"class geography(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographical Location'
        self.format = ""Geography should be a string of the format 'Country-Region-City'""
        self.examples = ['US-MIDWEST-NE-Lincoln', 'US-NORTHEAST-NY-New-York', 'US-MIDWEST-IL-Chicago', 'US-MIDWEST-KS-Lawrence', 'US-NORTHEAST-PA-Erie']

    def super_cast(self, val):
        if isinstance(val, str) and '-' in val:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
urbandensity,"class urbandensity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Urban Density'
        self.format = 'String representation of urban density'
        self.examples = ['Suburban', 'Urban', 'Rural', 'Unknown']

    def super_cast(self, val):
        val = str(val)
        if val in self.examples:
            return val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
screeneranswer,"class screeneranswer(GeneralSemanticType):

    def __init__(self):
        self.description = 'Screener Answer'
        self.format = 'Screener answer as a string'
        self.examples = ['not interested at all', 'extremely interested', 'very interested', 'moderately interested', 'slightly interested']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
answer,"class answer(GeneralSemanticType):
    def __init__(self):
        self.description = 'Answer'
        self.format = 'Answer should be a string'
        self.examples = ['Yes, I support same sex marriage', 'No, I oppose same sex marriage', 'No, but I support civil unions']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
federalreserveeconomicdata,"class federalreserveeconomicdata(GeneralSemanticType):

    def __init__(self):
        self.description = 'Federal Reserve Economic Data'
        self.format = 'The data should be a string of numbers without any characters'
        self.examples = ['32112', '29221', '29526', '29252', '29281']

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return val
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[0-9]*$', casted_val):
            return True
        else:
            return False"
racecategory,"class racecategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Race category of an individual'
        self.format = 'Race category should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 5:
                return int_val
            else:
                raise Exception('Invalid race category')
        except ValueError:
            raise Exception('Invalid input type for race category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
incomecategory,"class incomecategory(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Income category of an individual'
        self.format: str = 'Income category should be an integer between 1 and 9'
        self.examples: list = [1, 3, 5, 6, 9]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 9:
            return int(val)
        else:
            return 'Invalid income category'
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 9:
            return True
        else:
            return False"
conditioncategory,"class conditioncategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Condition category of an individual'
        self.format = 'Condition category should be an integer between 2 and 7'
        self.examples = [2, 3, 5, 6, 7]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 2 <= int_val <= 7:
                return int_val
            else:
                raise ValueError('Invalid condition category')
        except ValueError as e:
            print(f'Error in casting: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
artno,"class artno(GeneralSemanticType):

    def __init__(self):
        self.description = 'Article Number'
        self.format = 'Formatted as a floating point number'
        self.examples = [29.0, 1060.0, 12057.0, 70824.5, 9060971.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise ValueError(f""Invalid value: {val}. The super_cast function expects a numeric value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
pagestart,"class pagestart(GeneralSemanticType):
    def __init__(self):
        self.description = 'Start Page'
        self.format = 'Start Page should be formatted as a floating point number'
        self.examples = [1.0, 93.5, 238.5, 730.5, 78779.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
pageend,"class pageend(GeneralSemanticType):

    def __init__(self):
        self.description = 'End Page'
        self.format = 'End Page should be formatted as a floating point number'
        self.examples = [9.0, 113.5, 247.5, 741.0, 78807.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0 or np.isnan(casted_val):
            return False
        return True"
pagecount,"class pagecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Page Count'
        self.format = 'Page Count should be formatted as a floating point number'
        self.examples = [11.0, 22.0, 33.0, 44.0, 55.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
citedby,"class citedby(GeneralSemanticType):
    def __init__(self):
        self.description = ""Cited By""
        self.format = ""Cited By should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 6.0, 12.25, 71.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            try:
                return float(val)
            except ValueError:
                raise ValueError(""The input cannot be converted to a float."")
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False
"
doi,"class doi(GeneralSemanticType):
    def __init__(self):
        self.description = 'DOI'
        self.format = 'DOI should be a string'
        self.examples = ['10.26803/ijlter.19.12.5', '10.15700/saje.v40ns2a1841', '10.18844/CJES.V15I6.5321', '10.13189/ujer.2020.082273', '10.3390/su12218865']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^10\.\d{4,9}/[-._;()/:A-Z0-9]+$', casted_val, re.I):
            return True
        else:
            return False"
documenttype,"class documenttype(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'A type of document'
        self.format = 'As a string'
        self.examples = ['Article', 'Review', 'Conference Paper', 'Book Chapter', 'Editorial']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        else:
            raise ValueError(""The value is not a string"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
publicationstage,"class publicationstage(GeneralSemanticType):
    def __init__(self):
        self.description = 'Publication Stage'
        self.format = 'Publication Stage should be a string'
        self.examples = ['Final', 'Article in Press']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Final', 'Article in Press']:
            return True
        else:
            return False"
eidentifier,"class eidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'EID'
        self.format = 'EID should be a string'
        self.examples = ['2-s2.0-85101103356', '2-s2.0-85099596130', '2-s2.0-85099475092', '2-s2.0-85096214188', '2-s2.0-85094166618']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^2-s2\.0-\d{11}$', casted_val):
            return True
        else:
            return False"
routedate,"class routedate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Route Date'
        self.format = ""Route Date should be in the format 'day location'""
        self.examples = ['22 Harrisburg,Pa.', '23 Lancaster,Pa.', '2 Scranton,Pa.', '4 Reading,Pa.', '5 Newark,N.J.']

    def super_cast(self, val):
        try:
            route_date = str(val)
            (day, location) = route_date.split(' ', 1)
            if day.isdigit():
                return route_date
            else:
                raise ValueError('Invalid route date')
        except Exception as e:
            raise ValueError('Invalid input: ' + str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            (day, location) = casted_val.split(' ', 1)
            if day.isdigit():
                return True
        return False"
groupidentifier,"class groupidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""ID of the group""
        self.format = ""Group ID should be an integer""
        self.examples = [1, 65, 166, 323, 648]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Unable to cast value to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 648:
            return True
        else:
            return False"
attacks,"class attacks(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of attacks'
        self.format = 'Number of attacks as a float'
        self.examples = [0.0, 2.0, 5.0, 75.0, 509.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value for attacks')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 509:
            return True
        else:
            return False"
lagfto,"class lagfto(GeneralSemanticType):
    
    def __init__(self):
        self.description: str = 'A binary flag value' 
        self.format: str = 'A number, either 0 or 1' 
        self.examples: list = [0, 1, 0, 1, 0] 

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise Exception('Invalid value')
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
usalliance,"class usalliance(GeneralSemanticType):
    def __init__(self):
        self.description: str = ""US Alliance status""
        self.format: str = ""binary (0 or 1)""
        self.examples: list = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid usalliance, expected 0 or 1"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
fbioffice,"class fbioffice(GeneralSemanticType):
    def __init__(self):
        self.description = ""FBI office status""
        self.format = ""As an integer 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num in [0, 1]:
            return num
        else:
            raise Exception('Invalid fbioffice')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ucdp,"class ucdp(GeneralSemanticType):
    def __init__(self):
        self.description = ""Represents UCDP (Uppsala Conflict Data Program) which indicates presence of conflicts""
        self.format = ""A binary number (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        num = int(val)
        if num in [0, 1]:
            return num
        else:
            raise Exception('Invalid value for super_cast()')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False
"
size,"class size(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the group'
        self.format = 'Size of the group should be an integer'
        self.examples: list = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value. It should be an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3:
            return True
        else:
            return False"
religious,"class religious(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean indicating religious or not""
        self.format = ""An integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if int_val in [0,1]:
                return int_val
            else:
                raise Exception('Invalid religious')
        elif isinstance(val, int):
            if val in [0,1]:
                return val
            else:
                raise Exception('Invalid religious')
        else:
            raise Exception('Invalid religious')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
territory,"class territory(GeneralSemanticType):
    def __init__(self):
        self.description = ""A territory""
        self.format = ""As a boolean""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return bool(val)
        else:
            raise Exception('Invalid territory')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
statesponsored,"class statesponsored(GeneralSemanticType):

    def __init__(self):
        self.description = ""State sponsorship status""
        self.format = ""boolean""
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in [0, 1]:
                return bool(num)
            else:
                raise ValueError('Invalid statesponsored')
        except ValueError as e:
            print(str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
studentidentifier,"class studentidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""A student identifier""
        self.format = ""Positive integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        casted_val = int(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return casted_val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 797:
            return True
        else:
            return False"
bmi,"class bmi(GeneralSemanticType):
    def __init__(self):
        self.description = 'Body Mass Index'
        self.format = 'BMI should be a floating point number rounded to two decimal places'
        self.examples = [18.59, 14.29, 20.06, 19.05, 17.7]

    def super_cast(self, val):
        if val == -999:
            return float('nan')
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 10 <= casted_val <= 36.88:
            return True
        else:
            return False"
questionnaireanswerstr,"class questionnaireanswerstr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Questionnaire answer'
        self.format = ""Answers to questionnaire are strings ranging from '1' to '4' or 'nan'""
        self.examples = ['4', '4', '1', '3', '3']

    def super_cast(self, val):
        if val == '#NULL!':
            return 'nan'
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '3', '4', 'nan']:
            return True
        else:
            return False"
assetclass,"class assetclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Asset class'
        self.format = 'Asset class names should be capitalized'
        self.examples = ['Bonds', 'Equity', 'Real Estate', 'Commodities', 'Cash']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
assetclasscode,"class assetclasscode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Asset class code'
        self.format = 'Asset class codes should be uppercased'
        self.examples = ['B', 'E', 'R', 'C', 'S']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
position,"class position(GeneralSemanticType):
    def __init__(self):
        self.description = ""The position in USD of an entity or a position on a scale or a chromosome""
        self.format = ""Formatted as a floating point number (in USD units) with two decimal places for cents or as an integer between 1 and 3""
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in range(1, 4):
                return num
            else:
                raise ValueError
        except ValueError:
            try:
                num = float(val)
                return round(num, 2)
            except ValueError:
                raise Exception(""Invalid value, it should be a floating point number or an integer between 1 and 3"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int):
            return casted_val in range(1, 4)
        elif isinstance(casted_val, float):
            return casted_val >= 0
        else:
            return False"
entrydate,"class entrydate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Entry date of the president'
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1922-10-12', '1928-10-12', '1932-10-12', '1936-10-12', '1940-10-12']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
            except ValueError:
                raise ValueError(""Incorrect data format, should be YYYY-MM-DD"")
        else:
            raise TypeError(""Expected string, got %s"" % type(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%Y-%m-%d')
            return True
        except ValueError:
            return False"
booleanvariable,"class booleanvariable(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean variable""
        self.format = ""In integer form""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, float):
            return int(val)
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
demonstrationcount,"class demonstrationcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of demonstrations'
        self.format = 'Demonstration count should be formatted as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
homeadvantage,"class homeadvantage(GeneralSemanticType):
    def __init__(self):
        self.description = ""Home advantage in sports""
        self.format = ""0 (No advantage) or 1 (Home advantage)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
denomination,"class denomination(GeneralSemanticType):

    def __init__(self):
        self.description = 'Denomination of the church'
        self.format = 'First letter of each word should be capitalized, rest in lower case'
        self.examples = ['Roman Catholic', 'Orthodox Church In America', 'Congregational Churches', 'American Baptist Church In The Usa', 'Methodist Episcopal Church']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val.split()) > 0:
            if all(word[0].isupper() and word[1:].islower() for word in casted_val.split()):
                return True
        return False"
missionboard,"class missionboard(GeneralSemanticType):
    def __init__(self):
        self.description = ""A status indicator whether a mission is on board""
        self.format = ""In integer""
        self.examples = [0, 1, 2, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, 2]:
            return True
        else:
            return False"
articlechanges,"class articlechanges(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of changes in articles'
        self.format = 'Should be an integer'
        self.examples: list[int] = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        # As all the outputs generated by the cast() of the provided classes are integers, 
        # the super_cast method can directly return the value casted to integer
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validation will check if the value is an integer and also if it falls within the expected range [0, inf)
        return isinstance(casted_val, int) and (0 <= casted_val < np.inf)"
expire,"class expire(GeneralSemanticType):
    def __init__(self):
        self.description = ""Expiration status""
        self.format = ""Boolean""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
cabinet,"class cabinet(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cabinet names'
        self.format = 'Should be a string'
        self.examples = ['Rasmussen N I', 'Verhofstadt I', 'Verhofstadt II', 'Kok II', 'Kok I']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
seats,"class seats(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of seats in percentage'
        self.format = 'Should be a floating point number'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and self.validate(val):
            return round(float(val), 2)
        else:
            raise ValueError(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
jm,"class jm(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean type""
        self.format = ""boolean""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
jmfocal,"class jmfocal(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean type data""
        self.format = ""Boolean (True or False)""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
chair,"class chair(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean indicating whether a chair is present""
        self.format = ""Boolean""
        self.examples = [True, False, True, True, False]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
ministerchair,"class ministerchair(GeneralSemanticType):

    def __init__(self):
        self.description = ""Whether a person is a minister chair""
        self.format = ""boolean (True or False)""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, int) and (val == 0 or val == 1):
            return bool(val)
        elif isinstance(val, bool):
            return val
        else:
            raise Exception(""Invalid value. Expected a boolean or an integer 0 or 1"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
partnerchair,"class partnerchair(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether the person is a partner chair or not""
        self.format = ""Boolean value""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
minority,"class minority(GeneralSemanticType):
	def __init__(self):
		self.description: str = 'Minority status' 
		self.format: str = 'boolean' 
		self.examples: list = [True, False, True, False, True] 

	def super_cast(self, val): 
		if isinstance(val, bool):
			return val
		elif isinstance(val, int) and val in [0, 1]:
			return bool(val)
		else:
			raise Exception('Invalid value passed for super_cast')

	def validate(self, val): 
		casted_val = self.super_cast(val)
		if casted_val in [True, False]:
			return True
		else:
			return False"
cabparties,"class cabparties(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of parties in the cabinet'
        self.format = 'Should be a floating point number'
        self.examples: list = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Could not convert to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
daysinreview,"class daysinreview(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days in review'
        self.format = 'Should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if not (0 <= casted_val < float('inf')):
            return False
        return True"
articles,"class articles(GeneralSemanticType):
    def __init__(self):
        self.description = ""Number of articles""
        self.format = ""Floating point number""
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception:
            raise Exception(""Value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
catcountry,"class catcountry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Category of country'
        self.format = 'Should be an integer from 0 to 3'
        self.examples: list = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return ""Invalid input. Expected an integer.""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 3:
            return True
        else:
            return False"
ministerdistance,"class ministerdistance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Minister distance in the cabinet'
        self.format = 'Should be a floating point number'
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value for ministerdistance: {val}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
popdivcab,"class popdivcab(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political diversity in the cabinet'
        self.format = 'Should be a floating point number'
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Expected float value. Got: {}"".format(type(val)))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
cmpdivcab,"class cmpdivcab(GeneralSemanticType):
    def __init__(self):
        self.description = ""CMP diversity in the cabinet""
        self.format = ""Should be a floating point number""
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Cannot cast to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
oppositionchair,"class oppositionchair(GeneralSemanticType):
    def __init__(self):
        self.description: str = ""Boolean value representing if the chair is in opposition or not""
        self.format: str = ""A boolean value""
        self.examples: list = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        if isinstance(val, (int, float)):
            return bool(val)
        if isinstance(val, str):
            if val.lower() in ['true', '1']:
                return True
            if val.lower() in ['false', '0']:
                return False
        raise ValueError(""Invalid value for super_cast"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
marker,"class marker(GeneralSemanticType):
    def __init__(self):
        self.description = 'Marker for the cabinet'
        self.format = 'Should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('NaN')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val:
            return True
        else:
            return False"
estsimple,"class estsimple(GeneralSemanticType):
    def __init__(self):
        self.description = ""A simple Boolean value""
        self.format = ""Boolean""
        self.examples = [True, False, True, False, True]
        
    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
simplepred,"
class simplepred(GeneralSemanticType):

    def __init__(self):
        self.description = 'Simple prediction value'
        self.format = 'Should be a floating point number'
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Cannot cast to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception('Value cannot be negative')
        return True"
simpledev,"class simpledev(GeneralSemanticType):

    def __init__(self):
        self.description = 'Simple deviation value'
        self.format = 'Should be a floating point number'
        self.examples: list = [0.1, 0.2, 0.3, 0.4, 0.5]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Cannot cast to float'
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
estfull,"class estfull(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'A boolean value representing if something is estimated to be full or not'
        self.format: str = 'A boolean value'
        self.examples: list = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, bool):
            return val
        else:
            return bool(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
fullpred,"class fullpred(GeneralSemanticType):

    def __init__(self):
        self.description = 'Full prediction value'
        self.format = 'Should be a floating point number'
        self.examples: list = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Cannot cast value {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
fulldev,"class fulldev(GeneralSemanticType):

    def __init__(self):
        self.description = 'Full deviation value'
        self.format = 'Should be a floating point number'
        self.examples: list = [0.1, 0.2, 0.3, 0.4, 0.5]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
typefpselect,"class typefpselect(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of Family Planning Selected'
        self.format = 'Type of Family Planning Selected should be an integer (0, 1, 2, or 3)'
        self.examples = [0, 1, 2, 3]
    
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
qualscorefpcounsel,"class qualscorefpcounsel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Quality Score of Family Planning Counseling'
        self.format = 'Quality Score of Family Planning Counseling should be a float between 0.0 and 100.0'
        self.examples = [58.819702, 58.909313, 66.88544, 51.69061, 39.67081]

    def super_cast(self, val):
        return round(float(val), 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
religion,"class religion(GeneralSemanticType):
    def __init__(self):
        self.description = ""Religion""
        self.format = ""Boolean value as integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
agewoman,"class agewoman(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of Woman'
        self.format = 'Age of Woman should be an integer between 19 and 42'
        self.examples = [26.0, 22.0, 25.0, 25.0, 24.0]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float):
            return int(val)
        else:
            raise Exception('Invalid input type. Expected string, integer or float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 19 <= casted_val <= 42:
            return True
        else:
            return False"
numlivingchild,"
class numlivingchild(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Living Children'
        self.format = 'Number of Living Children should be an integer (1, 2, or 3)'
        self.examples = [3.0, 2.0, 1.0, 3.0, 2.0]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 3:
            return val
        else:
            raise ValueError('Invalid value. Number of Living Children should be an integer (1, 2, or 3)')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
malechild,"class malechild(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates if a child is male""
        self.format = ""Boolean in integer form""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
primeduwoman,"class primeduwoman(GeneralSemanticType):
    def __init__(self):
        self.description = ""Primary education status of a woman""
        self.format = ""integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ageprovider,"class ageprovider(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of Provider'
        self.format = 'Age of Provider should be an integer between 21 and 59'
        self.examples = [25, 38, 38, 40, 25]

    def super_cast(self, val):
        # handle all values generated by cast() of the provided classes
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            # if value cannot be converted to an integer, return as it is
            return val

    def validate(self, val):
        # sanity-checks on the casted data
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 21 <= casted_val <= 59:
            return True
        else:
            return False"
providerdesig,"class providerdesig(GeneralSemanticType):
    def __init__(self):
        self.description = ""A provider designation""
        self.format = ""integer""
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        int_val = int(val)
        if int_val in [1, 2]:
            return int_val
        else:
            raise ValueError(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in [1, 2]"
providertrainedcounsel,"class providertrainedcounsel(GeneralSemanticType):

    def __init__(self):
        self.description = ""Indicates if a provider is trained or not""
        self.format = ""Binary integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
total,"class total(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total score of an individual'
        self.format = 'Total should be an integer'
        self.examples = [53, 69, 56, 67, 49]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Can't convert {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            raise Exception(f""{casted_val} is not an integer"")
        elif casted_val < 0:
            raise Exception(f""{casted_val} is a negative integer"")
        else:
            return True"
stateabbreviation,"class stateabbreviation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The abbreviation of a state'
        self.format = 'The abbreviation must be a 2-letter string, all upper case'
        self.examples = ['TX', 'GA', 'VA', 'KY', 'MO']

    def super_cast(self, val):
        casted_val = str(val).upper()
        if len(casted_val) != 2 or not casted_val.isalpha():
            return casted_val
        else:
            raise Exception('Invalid state abbreviation')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if len(casted_val) == 2 and casted_val.isalpha() and casted_val.isupper():
            return True
        else:
            return False"
regioncode,"class regioncode(GeneralSemanticType):
    def __init__(self):
        self.description = 'The code of a region in Brazil'
        self.format = 'Region code should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if 1 <= val <= 5:
                return val
            else:
                raise Exception('Invalid region code')
        except ValueError:
            raise Exception('Invalid region code')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
idhmscore,"class idhmscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'The IDHM (Municipal Human Development Index) score'
        self.format = 'IDHM score should be a floating point number between 0 and 1000'
        self.examples = [5.0, 579.0, 651.0, 712.0, 862.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if 0 <= val <= 1000:
                return val
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid IDHM score')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 1000:
            return True
        else:
            return False"
isregistered,"class isregistered(GeneralSemanticType):
    def __init__(self):
        self.description = ""Registration status""
        self.format = ""Boolean represented as 0.0 or 1.0""
        self.examples = [1.0, 0.0, 1.0, 0.0, 1.0]
    
    def super_cast(self, val):
        if isinstance(val, float) or isinstance(val, int):
            return 1.0 if val > 0.5 else 0.0
        else:
            raise ValueError(""Invalid value for casting. Expected a float or int."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
agestudent,"class agestudent(GeneralSemanticType):

    def __init__(self):
        self.description = 'The age of a student'
        self.format = 'A whole number'
        self.examples = [18, 19, 20, 21, 22]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input. Expected a whole number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 18 <= casted_val <= 30:
            return True
        else:
            return False"
uniquesectionidentifier,"class uniquesectionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique ID for the section'
        self.format = 'The ID should be a whole number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if not isinstance(casted_val, int) or not 1 <= casted_val <= 140:
            return False
        return True"
uniqueroomidentifier,"class uniqueroomidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique ID for the room'
        self.format = 'The ID should be a whole number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and 1 <= casted_val <= 4198:
            return True
        else:
            return False"
roommatescount,"class roommatescount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of roommates'
        self.format = 'Whole number'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val):
            if not 1 <= casted_val <= 4:
                return False
        return True"
isethnicity,"class isethnicity(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Indicates whether a given entity has an ethnicity or not'
        self.format: str = 'A boolean value represented as a float, where 1.0 means True and 0.0 means False'
        self.examples: list = [1.0, 0.0, 1.0, 0.0, 1.0]

    def super_cast(self, val):
        if val > 0.5:
            return 1.0
        else:
            return 0.0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
senatenum,"class senatenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Senate Number'
        self.format = 'AAA####/##'
        self.examples = ['PLC0046/96', 'PLN0029/06', 'PLN0006/14', 'PLN0018/14', '-1']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        elif val == '-1':
            return val
        else:
            raise Exception('Invalid senate number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', casted_val) or casted_val == '-1':
            return True
        else:
            return False"
legislativeorg,"class legislativeorg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Legislative Org'
        self.format = 'AA'
        self.examples = ['EF', 'GH', 'IJ', 'KL', 'MN']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{2}', string)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and len(casted_val) == 2 and casted_val.isupper():
            return True
        else:
            return False"
legislatureaction,"class legislatureaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Legislature Action'
        self.format = 'AAAA'
        self.examples = ['TNJR', 'PRJD', 'TCOM', 'RTPA', 'SEFI']

    def super_cast(self, val):
        string_val = str(val)
        if len(string_val) == 4 and string_val.isalpha() and string_val.isupper():
            return string_val
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None or len(casted_val) != 4 or not casted_val.isalpha() or not casted_val.isupper():
            return False
        else:
            return True"
honeymoon,"class honeymoon(GeneralSemanticType):

    def __init__(self):
        self.description = ""Indicates if a trip was a honeymoon""
        self.format = ""A boolean value represented as an integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                raise ValueError('Invalid honeymoon value')
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise TypeError('Invalid honeymoon value type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
electiontype,"class electiontype(GeneralSemanticType):

    def __init__(self):
        self.description = ""Type of Election""
        self.format = ""Election type should be capitalized strings""
        self.examples = ['President', 'Federal', 'General', 'Election', 'Various']

    def super_cast(self, val):
        if pd.isna(val):
            return val
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
dependentvariable,"class dependentvariable(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dependent Variable'
        self.format = 'Dependent variable should be capitalized strings'
        self.examples = ['Incumbent Vote', 'Liberal Vote', 'Dependent Variable', 'Incumbent Government Vote', 'Ldp (Percent Seats)']

    def super_cast(self, val):
        if pd.isna(val):
            return val
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
modelfit,"class modelfit(GeneralSemanticType):
    def __init__(self):
        self.description = 'Model Fit'
        self.format = 'Model fit should be a floating point number between 0 and 1'
        self.examples = [0.732, 0.782, 0.897, 0.937, 0.194]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and math.isnan(val):
            return np.nan
        try:
            float_val = float(val)
            if 0 <= float_val <= 1:
                return float_val
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
noofelections,"class noofelections(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Elections'
        self.format = 'Number of elections should be an integer greater than or equal to 0'
        self.examples = [9, 13, 16, 19, 40]

    def super_cast(self, val):
        if math.isnan(val):
            return np.nan
        if val >= 0:
            return int(val)
        else:
            raise Exception('Invalid number of elections')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
noofvariables,"class noofvariables(GeneralSemanticType):
    def __init__(self):
        self.description = ""Number of Variables""
        self.format = ""An integer number""
        self.examples = [2, 3, 4, 5, 6]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int):
            return val
        else:
            raise Exception(""Invalid input type for super casting"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
h,"class h(GeneralSemanticType):
    def __init__(self):
        self.description = 'H value'
        self.format = 'H value should be an integer greater than or equal to 0'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if pd.isna(val):
            return val
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return 'Invalid H value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
i,"class i(GeneralSemanticType):
    def __init__(self):
        self.description = 'I value'
        self.format = 'I value should be an integer greater than or equal to 0'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        if pd.isna(val):
            return val
        elif str(val).isdigit():
            return int(val)
        else:
            raise Exception('Invalid I value')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
phdstatus,"class phdstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the status of a PhD'
        self.format = ""Values should be string representations of integers or 'PhD'""
        self.examples = ['PhD', '0', '1', '2', '3']

    def super_cast(self, val):
        if val == 'PhD':
            return val
        else:
            return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'PhD' or (casted_val.isdigit() and 0 <= int(casted_val) <= 6):
            return True
        else:
            return False"
mastatus,"class mastatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the status of a MA'
        self.format = ""Values should be string representations of integers or 'MA'""
        self.examples = ['MA', '2', '5', '10', '38']

    def super_cast(self, val):
        if val == 'MA':
            return val
        else:
            try:
                return str(int(val))
            except Exception as e:
                return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'MA' or (casted_val.isdigit() and 0 <= int(casted_val) <= 38):
            return True
        else:
            return False"
schoolgrade,"class schoolgrade(GeneralSemanticType):

    def __init__(self):
        self.description = 'School Grade'
        self.format = 'Grades should be represented as integers'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 6:
            return True
        else:
            return False"
booleananswer,"class booleananswer(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean answer""
        self.format = ""An integer of 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) or (isinstance(val, str) and val.isdigit()):
            int_val = int(val)
            if int_val in [0, 1]:
                return int_val
            else:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
lunchspending,"class lunchspending(GeneralSemanticType):

    def __init__(self):
        self.description = 'Lunch Spending'
        self.format = 'Amount spent on lunch over the course of the year should be stored as strings'
        self.examples = ['< $50', '$50-150', '> $150']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['< $50', '$50-150', '> $150']:
            return True
        else:
            return False"
ideol,"class ideol(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ideological level of a person'
        self.format = 'Ideological level should be a whole number between 1 and 7'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 1 and num <= 7:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
concession,"class concession(GeneralSemanticType):
    def __init__(self):
        self.description = 'Concession period of a project in years'
        self.format = 'Concession period should be a positive integer'
        self.examples = [1, 20, 34, 52, 72]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            raise ValueError(""Unable to cast value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= self.examples[0] and casted_val <= self.examples[-1]:
            return True
        else:
            return False"
rate,"class rate(GeneralSemanticType):

    def __init__(self):
        self.description = ""Rate for the project""
        self.format = ""Rate should be a float number greater than or equal to 0""
        self.examples = [0.0, 0.064, 0.197, 0.099, 1.4743]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""Value must be able to be casted to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not (isinstance(casted_val, float) and casted_val >= 0):
            raise Exception(""Value must be a float and greater than or equal to 0"")
        return True"
typeofva,"class typeofva(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of VA'
        self.format = 'Type of VA should be stored as a string'
        self.examples = ['interurbana', 'urbana']

    def super_cast(self, val):
        if val not in ['interurbana', 'urbana']:
            raise ValueError('Invalid Type of VA')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['interurbana', 'urbana']:
            return True
        else:
            return False"
situation,"class situation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Project situation'
        self.format = 'Project situation should be stored as a string'
        self.examples = ['interior', 'costa']

    def super_cast(self, val):
        if val not in ['interior', 'costa']:
            raise ValueError('Invalid Project situation')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['interior', 'costa']:
            return True
        else:
            return False"
financing,"class financing(GeneralSemanticType):
	def __init__(self):
		self.description: str = 'Financing status' # Short string description of what the Type Represents
		self.format: str = 'Yes or No' # Short string description of a single, canonical representation that spans the inputs
		self.examples: list = ['Yes', 'No', 'Yes', 'No', 'Yes'] # 5-length list with 5 examples of the canonical format of this SemanticType, stored as floats

	def super_cast(self, val): # From any class, convert the expected output of its cast() method, to the format described in self.format
		if val == 'Si':
			return 'Yes'
		elif val == 'No':
			return 'No'
		else:
			raise ValueError('Invalid Financing')
		return val

	def validate(self, val): # Generate validation code that performs sanity-checks on the casted data, i.e. range checking, comparison to average value, etc.
		casted_val = self.super_cast(val)
		if casted_val in ['Yes', 'No']:
			return True
		else:
			return False
"
typeofppp,"class typeofppp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of PPP'
        self.format = 'Type of PPP should be stored as a string'
        self.examples = ['Peaje Sombra', 'Peaje Exlícito al usuario']

    def super_cast(self, val):
        if val in ['Peaje Sombra', 'Peaje Exlícito al usuario']:
            return val
        else:
            raise ValueError('Invalid Type of PPP')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Peaje Sombra', 'Peaje Exlícito al usuario']:
            return True
        else:
            return False"
typeofproject,"class typeofproject(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Project'
        self.format = 'Type of Project should be stored as a string'
        self.examples = ['Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf']

    def super_cast(self, val):
        if val not in ['Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf']:
            raise ValueError('Invalid Type of Project')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf']:
            return True
        else:
            return False"
grantor,"class grantor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Grantor of the project'
        self.format = 'Grantor should be stored as a string'
        self.examples = ['Gobierno autonómico', ' Admon Central', 'Admon Central']

    def super_cast(self, val):
        if val not in ['Gobierno autonómico', ' Admon Central', 'Admon Central']:
            raise ValueError('Invalid Grantor')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Gobierno autonómico', ' Admon Central', 'Admon Central']:
            return True
        else:
            return False"
economicprofitability,"class economicprofitability(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economic profitability of a project'
        self.format = 'A float number between -0.423204 and 0.247718'
        self.examples = [-0.020882, -0.021644, -0.016891, -0.018089, -0.017189]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value. Value must be convertible to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if -0.423204 <= casted_val <= 0.247718:
            return True
        else:
            return False
"
concessionyear,"class concessionyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concession year of a project'
        self.format = 'Concession year should be a positive integer'
        self.examples = [1, 5, 8, 14, 47]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 1:
            return False
        else:
            return True"
lightvehicles,"class lightvehicles(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of light vehicles'
        self.format = 'Number of light vehicles should be a float number greater than or equal to 2007.0'
        self.examples = [2344.0, 2007.0, 2110.0, 2131.0, float('nan')]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            val = float(val)

        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2007.0 or math.isnan(casted_val):
            return True
        else:
            return False"
heavyvehicles,"class heavyvehicles(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of heavy vehicles'
        self.format = 'Float number greater than or equal to 145.0'
        self.examples = [1192.0, 894.0, 883.0, 865.0, float('nan')]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 145.0 and not math.isnan(casted_val):
            return False
        return True"
totalvehicles,"class totalvehicles(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of vehicles'
        self.format = 'Total number of vehicles should be a float number greater than or equal to 2737.0'
        self.examples = [3536.0, 2901.0, 2993.0, 2996.0, float('nan')]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif casted_val >= 2737.0:
            return True
        else:
            return False"
speakeridentifier,"class speakeridentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Speaker ID'
        self.format = 'Speaker ID should be a floating point number'
        self.examples = [402.0, 403.0, 404.0, 405.0, 406.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
dateinexcel,"class dateinexcel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date in Excel'
        self.format = 'Date should be a string in the format: YYYY-MM-DD'
        self.examples: list = ['2022-07-15', '2022-07-16', '2022-07-17', '2022-07-18', '2022-07-19']

    def super_cast(self, val):
        if isinstance(val, float):
            try:
                return pd.to_datetime(val, unit='D', origin='1899-12-30').strftime('%Y-%m-%d')
            except:
                return np.nan
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'\d{4}-\d{2}-\d{2}', casted_val):
            return True
        else:
            return False"
stancecategoryidentifier,"class stancecategoryidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Stance Category ID'
        self.format = 'Stance Category ID should be a floating point number, either 0.0, 1.0 or 2.0'
        self.examples: list = [0.0, 1.0, 2.0, 0.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, 2.0]:
            return True
        else:
            return False"
frameidentifier,"class frameidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Frame ID'
        self.format = 'a floating point number'
        self.examples: list = [605.0, 738.0, 801.0, 803.0, 803.0]

    def super_cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and not math.isnan(casted_val):
            return True
        else:
            return False"
idtitulares,"class idtitulares(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for the senators'
        self.format = 'Positive integer'
        self.examples = [1, 2, 3, 4, 5]
    
    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return int(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if isinstance(casted_val, int) and 1 <= casted_val <= 851:
            return True
        return False"
tipodetrajetória,"class tipodetrajetória(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of career trajectory'
        self.format = 'Career type should be a positive integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
totaldecargospréviosaosenado,"class totaldecargospréviosaosenado(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Total number of previous positions to the senate'
        self.format: str = 'Number of positions should be a positive integer between 0 and 19'
        self.examples: list = [0, 3, 5, 7, 19]

    def super_cast(self, val):
        if isinstance(val, float) and np.isnan(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        if 0 <= casted_val <= 19:
            return True
        else:
            return False"
tempodecarreira,"class tempodecarreira(GeneralSemanticType):
    def __init__(self):
        self.description = ""Career duration""
        self.format = ""Career duration should be a positive integer between 0 and 99""
        self.examples = [0, 7, 19, 35, 99]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 99:
            return True
        else:
            return False"
agregaçãodaseleiçõesparecerista3,"
class agregaçãodaseleiçõesparecerista3(GeneralSemanticType):
    def __init__(self):
        self.description = 'Aggregation of the election rapporteur'
        self.format = 'Aggregation should be a positive integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
níveisexperiênciapolítica,"class niveisexperienciapolitica(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of political experience'
        self.format = 'Level of experience should be a positive integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, float) and np.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return 1 <= casted_val <= 4"
níveisexperdummy,"class níveisexperdummy(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary indicator""
        self.format = ""Integer format""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
employmentstatuscode,"class employmentstatuscode(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Code representing employment status'
        self.format: str = 'Employment status code should be an integer between 1 and 9'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 9:
            return val
        else:
            try:
                casted_val = int(val)
                if 1 <= casted_val <= 9:
                    return casted_val
                else:
                    return None
            except ValueError:
                return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
familymembers,"class familymembers(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of children in a household'
        self.format = 'Number of children should be stored as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
incomelevelcode,"class incomelevelcode(GeneralSemanticType):
    def __init__(self):
        self.description = ""Code representing annual income level""
        self.format = 'Income level code should be an integer between 1 and 6'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 6:
            return True
        else:
            return False"
birthplacecode,"class birthplacecode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Code representing birth location'
        self.format = 'Birthplace code should be an integer between 1 and 3'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in self.examples:
                return casted_val
            else:
                raise ValueError
        except ValueError:
            raise Exception(""Invalid value. It should be an integer between 1 and 3."")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
surveytypecode,"class surveytypecode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Code representing type of survey'
        self.format = 'Survey type code should be an integer 1 or 2'
        self.examples = [1, 2]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
contribution,"class contribution(GeneralSemanticType):
    def __init__(self):
        self.description = 'Contribution amount'
        self.format = 'Contribution should be stored as a floating point number'
        self.examples = [0.0, 200.0, 400.0, 600.0, 1000.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not np.nan and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
asc,"class asc(GeneralSemanticType):
    def __init__(self):
        self.description = 'Binary value'
        self.format = 'Integer'
        self.examples = [0, 1]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val not in [0, 1]:
                raise ValueError(""Invalid input for ASC. It should be either 0 or 1."")
            return int_val
        except ValueError as ve:
            print(str(ve))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
experimentidentifier,"class experimentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experiment ID'
        self.format = 'Experiment ID should be an integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value could not be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 4:
            raise Exception(""Value out of valid range [1, 4]"")
        else:
            return True"
trialnum,"class trialnum(GeneralSemanticType):
    def __init__(self):
        self.description = 'Trial Number'
        self.format = 'Trial Number should be an integer'
        self.examples = [1, 32, 63, 110, 180]

    def super_cast(self, val):
        try:
            # Trying to convert the input to an integer
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be able to be converted to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Checking if the casted value is within the valid range
        if 1 <= casted_val <= 180:
            return True
        else:
            return False
"
participantspecies,"class participantspecies(GeneralSemanticType):
    def __init__(self):
        self.description = ""Species of participant""
        self.format = ""binary values, 0 and 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0,1]:
                return casted_val
            else:
                raise Exception(""Invalid value for participant species."")
        except ValueError as ve:
            raise Exception(""Value cannot be casted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0,1]:
            return True
        else:
            return False"
stimuluspecies,"class stimuluspecies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stimulus Species'
        self.format = 'Stimulus Species should be an integer'
        self.examples = [0, 1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input, expected integer'
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 2:
            return True
        else:
            return False"
stimulusbodypart,"class stimulusbodypart(GeneralSemanticType):

    def __init__(self):
        self.description = 'Stimulus Body Part'
        self.format = 'Stimulus Body Part should be an integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(f""Cannot convert {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
stimulusorientation,"class stimulusorientation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Stimulus Orientation""
        self.format = ""Boolean value""
        self.examples = [1, 0, 1, 0, 1]

    def super_cast(self, val):
        try:
            return bool(int(val))
        except ValueError:
            return False

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
error,"class error(GeneralSemanticType):
    def __init__(self):
        self.description = 'Error'
        self.format = 'Error should be an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        if pd.notnull(val):
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
persmeanreactiontime,"class persmeanreactiontime(GeneralSemanticType):
    def __init__(self):
        self.description = 'Personal Mean Reaction Time'
        self.format = 'Should be an integer'
        self.examples = [522, 667, 749, 899, 30003]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot convert value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 522:
            return True
        else:
            return False"
persstdreactiontime,"class persstdreactiontime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Personal Standard Deviation of Reaction Time'
        self.format = 'Personal Standard Deviation of Reaction Time should be an integer'
        self.examples = [126, 212, 257, 376, 30003]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError(""Invalid input for Personal Standard Deviation of Reaction Time"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 126 or not isinstance(casted_val, int):
            return False
        else:
            return True"
cutofffilter2sd,"class cutofffilter2sd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cutoff Filter 2 Standard Deviations'
        self.format = 'Should be an integer'
        self.examples = [820, 1091, 1267, 1709, 90009]

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise ValueError(""Expected integer value"")
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 820:
            return True
        else:
            return False"
choicereactiontime,"class choicereactiontime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Choice Reaction Time'
        self.format = 'Choice Reaction Time should be an integer'
        self.examples = [6, 569, 719, 945, 60000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(f""Cannot convert {val} to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if casted_val < 6:
            return False
        return True"
choicereactiontimefiltered2sd,"class choicereactiontimefiltered2sd(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Choice Reaction Time Filtered 2 Standard Deviations'
        self.format = 'Choice Reaction Time Filtered 2 Standard Deviations should be an integer'
        self.examples = [6, 562, 699, 890, 2768]
        
    def super_cast(self, val):
        try:
            return int(val) if pd.notnull(val) else float('nan')
        except ValueError:
            return float('nan')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 6 or np.isnan(casted_val):
            return False
        else:
            return True"
surveydate,"
class surveydate(GeneralSemanticType):
    def __init__(self):
        self.description = 'A representation of the date in days since 1899-12-30'
        self.format = 'Date should be represented as a datetime object'
        self.examples = []

    def super_cast(self, val):
        # Convert number of days since 1899-12-30 to datetime object
        base_date = datetime(1899, 12, 30)
        delta_days = pd.to_timedelta(val, unit='D')
        return base_date + delta_days

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is a datetime object and within a reasonable date range
        if isinstance(casted_val, datetime) and casted_val.year >= 1899:
            return True
        else:
            return False
"
familyname,"class familyname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Family name of a species'
        self.format = 'Family names should be capitalised'
        self.examples = ['Scombridae', 'Scaridae', 'Lutjanidae', 'Lethrinidae', 'Siganidae']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
fishprice,"class fishprice(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price per piece of fish in SBD (Solomon Islands Dollar)'
        self.format = 'Price should be a non-negative number, representing the price in SBD'
        self.examples = [1.0, 5.0, 15.0, 40.0, 800.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError(""Price cannot be negative."")
            return num
        except ValueError as ve:
            print(f""ValueError: {ve}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
fishlength,"class fishlength(GeneralSemanticType):
    def __init__(self):
        self.description = 'The length of the fish'
        self.format = 'Length should be a non-negative number, representing the length in cm'
        self.examples = [7.0, 24.0, 31.0, 50.0, 225.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError(f""Value {val} is not a valid fish length."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
fishweight,"class fishweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight of the fish in kg'
        self.format = 'Weight should be a non-negative number, representing the weight in kg'
        self.examples = [0.1, 0.35, 0.75, 2.7, 15.0]

    def super_cast(self, val):
        if np.isnan(val):
            return np.nan
        else:
            num = float(val)
            return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
fishingsite,"class fishingsite(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a fishing site'
        self.format = 'Names should be capitalised and in the English language'
        self.examples = ['Alite Reef', 'Ramos Island', 'Lau Lagoon', ""East Kwara'ae and Kwaio"", 'Langalanga Lagoon']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
priceinsbd,"class priceinsbd(GeneralSemanticType):
    def __init__(self):
        self.description = 'The price in SBD (Solomon Islands Dollar)'
        self.format = 'Price should be a non-negative number, representing the price in SBD'
        self.examples = [0.0, 20.0, 70.0, 240.0, 7200.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception(f""Invalid input {val}, unable to cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception(f""Invalid value {casted_val}, expected a non-negative number"")
        return True"
habitat,"class habitat(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of habitat'
        self.format = 'Types should be capitalised and in the English language'
        self.examples = ['Reef', 'Pelagic', 'Deep water']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
sublevel,"class sublevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sublevel of governance'
        self.format = 'Sublevel names should be capitalized'
        self.examples = ['Braunschweig', 'Hannover', 'Oldenburg', 'Hessen-Nord', 'Hessen-Süd']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
money,"class money(GeneralSemanticType):

    def __init__(self):
        self.description = 'The amount of money'
        self.format = 'Amount should be formatted as a floating point number with two decimal places'
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception:
            return 'Invalid Value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
geographiccoordinates,"class geographiccoordinates(GeneralSemanticType):
    def __init__(self):
        self.description = 'Geographical coordinates'
        self.format = 'Coordinates should be floating point numbers stored as strings'
        self.examples = ['-34.603684, -58.381559', '52.370216, 4.895168', '-27.469771, 153.025124', '-35.280937, 149.130009', '-37.813628, 144.963058']

    def super_cast(self, val):
        (lat, lon) = map(float, str(val).split(','))
        return f'{lat:.6f}, {lon:.6f}'

    def validate(self, val):
        casted_val = self.super_cast(val)
        (lat, lon) = map(float, str(casted_val).split(','))
        return -90 <= lat <= 90 and -180 <= lon <= 180
"
publicationoutput,"class publicationoutput(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of publications output in a specific time period'
        self.format = 'Publication output should be an integer'
        self.examples = [22030, 20974, 29123, 15008, 45093]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
annualgrant,"class annualgrant(GeneralSemanticType):

    def __init__(self):
        self.description = 'Annual state grant in mio'
        self.format = 'Annual grant should be an integer value (in mio units)'
        self.examples = [15, 193, 156, 115, 139]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        elif isinstance(val, str) and val.strip().endswith('mio'):
            return int(val.strip().split(' ')[0])
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
donationtype,"class donationtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of donation'
        self.format = 'Donation type should be one of the valid values'
        self.examples = ['Transactional/CRM/BA', 'Transformative', 'Donation', 'Transactional/transformative', 'Transactional/CRM/BA/transformative']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        val = str(val)
        valid_values = ['Transactional/CRM/BA', 'Transformative', 'Donation', 'Transactional/transformative', 'Transactional/CRM/BA/transformative']
        if val not in valid_values:
            raise Exception('Invalid donation type')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        else:
            return casted_val in ['Transactional/CRM/BA', 'Transformative', 'Donation', 'Transactional/transformative', 'Transactional/CRM/BA/transformative']"
participationrate,"class participationrate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Annual Labor Participation Rate'
        self.format = 'Participation rate should be formatted as a floating point number and should be within the range 0 to 100'
        self.examples = [58.65, 59.45, 63.65, 66.1, 67.1]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except ValueError:
            return ""Invalid value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
capitalgain,"class capitalgain(GeneralSemanticType):

    def __init__(self):
        self.description = 'Capital Gain'
        self.format = 'Capital gain should be formatted as a floating point number'
        self.examples = [10.12, 11.64, 15.59, 23.5, 19.3]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
quarter,"class quarter(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = ""Quarter of a year""
        self.format = ""Represented as an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 1 and int_val <= 4:
                return int_val
            else:
                raise ValueError('The value is not in the expected range (1-4).')
        except ValueError:
            raise ValueError('The value could not be converted to integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
outputgap,"class outputgap(GeneralSemanticType):

    def __init__(self):
        self.description = 'Output gap of the economy'
        self.format = 'Output gap must be a float'
        self.examples = [-0.37186, -2.77494, 3.83546, 3.64517, 2.44083]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid output gap')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
fedfunds,"class fedfunds(GeneralSemanticType):

    def __init__(self):
        self.description = 'Federal funds rate'
        self.format = 'Federal funds rate must be a float'
        self.examples = [0.085, 0.0975, 6.0625, 5.515, 7.18]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'Invalid federal funds rate'
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
cpi,"class cpi(GeneralSemanticType):

    def __init__(self):
        self.description = 'Consumer Price Index'
        self.format = 'Consumer Price Index must be a float'
        self.examples = [5.86319, 2.27378, -0.235, 0.37304, 0.24975]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Consumer Price Index')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
pce,"class pce(GeneralSemanticType):
    def __init__(self):
        self.description = 'Personal Consumption Expenditures'
        self.format = 'Personal Consumption Expenditures must be a float'
        self.examples = [4.62691, 1.99354, 0.7353, 1.10827, 1.18621]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception('Invalid Personal Consumption Expenditures')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= float('-inf') and casted_val <= float('inf'):
            return True
        else:
            return False"
ipd,"class ipd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Implicit Price Deflator'
        self.format = 'Implicit Price Deflator must be a float'
        self.examples = [5.46059, 2.0271, 1.87769, 2.57365, 3.09741]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Implicit Price Deflator')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
depressionindex,"class depressionindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Depression index representing the level of depression'
        self.format = 'Depression index should be an integer'
        self.examples = [13, 12, 7, 21, 21]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 2 or num > 22:
                raise ValueError
            else:
                return num
        except ValueError:
            raise Exception('Invalid value for Depression Index')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2 and casted_val <= 22:
            return True
        else:
            return False"
gratitudeindex,"class gratitudeindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gratitude index representing the level of gratitude'
        self.format = 'Gratitude index is an integer'
        self.examples = [19, 27, 29, 29, 17]

    def super_cast(self, val):
        try:
            num = int(val)
            return num
        except ValueError:
            raise Exception('Gratitude index should be an integer')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 9 <= casted_val <= 42:
            return True
        else:
            return False"
lonelinessindex,"class lonelinessindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Loneliness index representing the level of loneliness'
        self.format = 'Loneliness index should be an integer'
        self.examples = [22, 20, 20, 19, 19]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 6 <= casted_val <= 22:
            return True
        else:
            return False"
sleephours,"class sleephours(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of sleep hours'
        self.format = 'Sleep hours should be an integer'
        self.examples = [14, 12, 8, 11, 7]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0 or num > 20:
                raise Exception('Sleep hours out of valid range')
            return num
        except ValueError:
            raise Exception('Invalid input. Expected an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 20:
            return True
        else:
            return False"
surveyaccesslevel,"class surveyaccesslevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'The level of access to the survey'
        self.format = 'Stored as an integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
writingattitudelevel,"class writingattitudelevel(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = ""The level of student's attitude towards writing""
        self.format = 'Stored as integer'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for super_cast"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
studenttype,"class studenttype(GeneralSemanticType):
    def __init__(self):
        self.description = 'The type of student'
        self.format = 'Stored as integer'
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input. The input should be convertible to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [1, 2]:
            return True
        else:
            raise Exception(""Invalid value. The value should be either 1 or 2."")"
studyyears,"class studyyears(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of years a student has studied'
        self.format = 'Stored as a float number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 1 or casted_val > 7:
            return False
        return True"
ratingscore,"class ratingscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating scores of different student attributes'
        self.format = 'Stored as a float number'
        self.examples = [20.0, 45.0, 76.0, 100.0, 35.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val <= 100.0:
            return True
        else:
            return False"
gendertype,"class gendertype(GeneralSemanticType):

    def __init__(self):
        self.description = 'The gender of students'
        self.format = 'Stored as integer'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise Exception(""Invalid value. Value must be an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 3:
            return True
        else:
            return False"
englishproficiency,"class englishproficiency(GeneralSemanticType):
    def __init__(self):
        self.description = 'The level of English proficiency'
        self.format = 'Stored as integer'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
powerindicator,"class powerindicator(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Indicator of power, ranges from 0 to 4'
        self.format: str = 'Power value should be a float within the range 0 to 4'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        num = float(val)
        if num < 0 or num > 4:
            raise Exception('Invalid power value')
        else:
            return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 4:
            return True
        else:
            return False"
totalindicator,"class totalindicator(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Total power indicator, ranges from 0 to 24'
        self.format: str = 'Total power value should be a float within the range 0 to 24'
        self.examples: list = [0.0, 6.0, 12.0, 18.0, 24.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0.0 or num > 24.0:
                raise ValueError('Invalid total power value')
            else:
                return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
profileidentifier,"class profileidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each profile'
        self.format = 'ProfileID should be a positive floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 1.0:
            return False
        else:
            return True"
binarychoice,"class binarychoice(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'A binary choice'
        self.format: str = 'float'
        self.examples: list = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, bool):
            return 1.0 if val else 0.0
        elif isinstance(val, (int, float)) and val in [0.0, 1.0]:
            return float(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
repositoryname,"class repositoryname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Repository'
        self.format = 'Repository names are stored as strings'
        self.examples = ['Indian Academy of Sciences: Publications of Fellows', 'KrishiKosh', 'ShodhGanga: A reservoir of Indian theses', 'Archives of Indian Labour', 'Name 5']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
numrecs,"class numrecs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Records'
        self.format = 'Number of Records should be formatted as an integer'
        self.examples = [2091, 51326, 50014, 42845, 12345]

    def super_cast(self, val):
        if isinstance(val, int):
            return val
        else:
            try:
                return int(val)
            except ValueError:
                raise Exception(""Invalid value. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
publicationstatus,"class publicationstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""Publication status""
        self.format = ""A boolean""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if val == '*':
            return True
        else:
            return False

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
softwareused,"class softwareused(GeneralSemanticType):

    def __init__(self):
        self.description = 'Software used for the repository'
        self.format = 'Software names are stored as strings'
        self.examples = ['DSpace', 'EPrints', 'Software', 'HTML', 'CALIBRE']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
farmingtechnique,"class farmingtechnique(GeneralSemanticType):

    def __init__(self):
        self.description = 'Farming techniques'
        self.format = 'The technique is a string which represents a type of farming technique'
        self.examples = ['Extensive', 'Intensive']

    def super_cast(self, val):
        if val in ['Extensive', 'Intensive']:
            return val
        else:
            raise Exception('Invalid farming technique')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Extensive', 'Intensive']:
            return True
        else:
            return False"
membershipstatus,"class membershipstatus(GeneralSemanticType):

    def __init__(self):
        self.description = 'Membership status in AAC'
        self.format = 'The status is a string which represents membership status in AAC'
        self.examples = ['AAC member', 'Non-AAC member']

    def super_cast(self, val):
        if val in ['AAC member', 'Non-AAC member']:
            return val
        else:
            return 'Invalid membership status'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['AAC member', 'Non-AAC member']:
            return True
        else:
            return False"
articlecode,"class articlecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique code for each article'
        self.format = 'Article codes are numerical float values'
        self.examples = [200602010401.0, 200602010401.0, 200602010401.0, 200602010401.0, 200602010401.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 200602010401.0 and casted_val <= 200602270102.0:
            return True
        else:
            return False"
section,"class section(GeneralSemanticType):
    def __init__(self):
        self.description = 'Section of a newspaper'
        self.format = 'Section names are stored as strings'
        self.examples = ['opinion', 'opinion', 'opinion', 'opinion', 'front page']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['opinion', 'front page']:
            return True
        else:
            return False"
frame,"class frame(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique code for each frame'
        self.format = 'Frame codes are numerical float values'
        self.examples = [308000.0, 101000.0, 102000.0, 109000.0, 102010.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 101000.0 <= casted_val <= 512000.0:
            return True
        else:
            return False"
framegroup,"class framegroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique code for each frame group'
        self.format = 'Numeric float value'
        self.examples = [3.0, 1.0, 1.0, 1.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Value cannot be converted to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.0 <= casted_val <= 5.0:
            return True
        else:
            return False"
muslim,"class muslim(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean representation of being a Muslim or not""
        self.format = ""Lower-case string representation of boolean""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
location,"class location(GeneralSemanticType):

    def __init__(self):
        self.description = ""A location""
        self.format = ""A string representing a location""
        self.examples = ['Melkassa 2', 'Anlong Tamey', 39.794, 'Belgium', 'West Beach South']

    def super_cast(self, val):
        if isinstance(val, float) or isinstance(val, int):
            return str(round(val, 6))
        else:
            val = str(val).title()
            country = pycountry.countries.get(name=val)
            if country:
                return country.name
            else:
                return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            try:
                float(casted_val)
                return -180 <= float(casted_val) <= 180
            except ValueError:
                return pycountry.countries.get(name=casted_val) is not None or bool(re.match(r'^[a-zA-Z\s]*$', casted_val))
        else:
            return False"
transnatl,"class transnatl(GeneralSemanticType):

    def __init__(self):
        self.description = ""Transnational status""
        self.format = ""In lower-case and as a string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
freespeech,"class freespeech(GeneralSemanticType):
    def __init__(self):
        self.description = ""The status of free speech""
        self.format = ""lower-case string""
        self.examples = ['yes', 'no', 'yes', 'no', 'yes']
    
    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['yes', 'no']:
            return True
        else:
            return False"
newspaper,"class newspaper(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the newspaper'
        self.format = 'Newspaper names are stored as strings'
        self.examples = ['Telegraph', 'Telegraph', 'Telegraph', 'Telegraph', 'Guardian']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Telegraph', 'Guardian']:
            return True
        else:
            return False"
electiondistrict,"class electiondistrict(GeneralSemanticType):
    def __init__(self):
        self.description = ""Election District Codes""
        self.format = ""Alphanumeric starting with a letter followed by numbers""
        self.examples = ['a0101', 'a0102', 'a0207', 'a0103', 'a0104']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[a-zA-Z][0-9]+$"", casted_val):
            return True
        else:
            return False"
countcandidates,"class countcandidates(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Candidates'
        self.format = 'Number of candidates must be a non-negative integer'
        self.examples = [2, 1, 0, 4, 7]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 0:
                return num
            else:
                raise Exception('Invalid candidate count')
        except ValueError:
            raise Exception('Value must be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
provincename,"class provincename(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a Province'
        self.format = 'The first letter of each word should be capitalized and the rest in lower case'
        self.examples = ['East Azerbaijan', 'West Azerbaijan', 'Ardabil', 'Esfahan', 'Alborz']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validating if the value is a string and it's capitalized
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
isinoffice,"class isinoffice(GeneralSemanticType):
    def __init__(self):
        self.description = ""Office status of a person""
        self.format = ""A boolean""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise Exception('Invalid boolean value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
surveyresponse,"class surveyresponse(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survey responses are numerical values representing the response of a person to a survey question'
        self.format = 'Survey responses should be floats between 1 and 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        val = float(val)
        if val < 1 or val > 5:
            raise Exception('Invalid survey response')
        else:
            return round(val, 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0 and casted_val <= 5.0:
            return True
        else:
            return False"
personidentifier,"class personidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for a person""
        self.format = ""In form 'RJ-IGOP-PER-XXX' or as a positive integer""
        self.examples = ['RJ-IGOP-PER-058', 'RJ-IGOP-PER-006', 'RJ-IGOP-PER-060', 'RJ-IGOP-PER-037', 'RJ-IGOP-PER-007', 1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif isinstance(val, int) and val > 0:
            return f""RJ-IGOP-PER-{str(val).zfill(3)}""
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        elif re.match(r'^RJ-IGOP-PER-\d{3}$', casted_val):
            return True
        else:
            return False"
countynumber,"class countynumber(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'County Number'
        self.format = 'County Number should be a float and ranges from 1 to 254'
        self.examples = [1.0, 60.0, 101.0, 180.25, 254.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if 1.0 <= val <= 254.0:
                return val
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 254.0:
            return True
        else:
            return False"
county,"
class county(GeneralSemanticType):
    def __init__(self):
        self.description = ""Name of a US county""
        self.format = ""County names should be properly capitalized and spelled correctly""
        self.examples = ['Autauga', 'Baldwin', 'Barbour', 'Bibb', 'Blount']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle() and isinstance(casted_val, str):
            return True
        else:
            return False"
locationofpostoffice,"class locationofpostoffice(GeneralSemanticType):
    def __init__(self):
        self.description = 'Location of Post Office'
        self.format = 'Only the first letter of the location name should be capitalized'
        self.examples = ['Houston', 'San Antonio', 'Dallas', 'Austin', 'El Paso']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
totalcases,"class totalcases(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total Cases'
        self.format = 'Total Cases should be a float and greater than or equal to 1'
        self.examples = [63.0, 853.0, 19.0, 42.0, 285.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 1.0:
                return val
            else:
                raise ValueError(""Value must be greater than or equal to 1"")
        except ValueError as ve:
            print(f""Error: {ve}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
totalrecipients,"class totalrecipients(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total Recipients'
        self.format = 'Total Recipients should be a float and greater than or equal to 1'
        self.examples = [155.0, 2059.0, 36.0, 80.0, 636.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 1.0:
                return val
            else:
                return np.nan
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.0:
            return True
        else:
            return False"
averagebenefit,"class averagebenefit(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average Benefit'
        self.format = 'Average Benefit should be a float and greater than or equal to 8'
        self.examples = [253.48, 263.47, 195.42, 182.31, 248.34]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except Exception:
            raise ValueError('Invalid input. Expected a float or a string that can be converted to a float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 8.0:
            raise Exception('Invalid average benefit. Value should be greater than or equal to 8.')
        else:
            return True"
totalbenefits,"class totalbenefits(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total Benefits'
        self.format = 'Total Benefits should be a float and greater than or equal to 8'
        self.examples = [15969.0, 224739.0, 3713.0, 7657.0, 70777.0]

    def super_cast(self, val):
        if isinstance(val, str):
            val = float(val)
        if isinstance(val, (int, float)) and val >= 8.0:
            return val
        else:
            raise Exception('Invalid total benefits')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, (int, float)) and casted_val >= 8.0:
            return True
        else:
            return False"
totalincomeeligibleindividuals,"class totalincomeeligibleindividuals(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total Income Eligible Individuals'
        self.format = 'Total Income Eligible Individuals should be a float and greater than or equal to 0'
        self.examples = [402.0, 4682.0, 30.0, 387.0, 1585.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 0.0:
                return val
            else:
                raise Exception('Invalid total income eligible individuals')
        except ValueError:
            raise Exception('Invalid input. Expected a number.')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
totalincomeeligiblebutnotreceivingindividuals,"class totalincomeeligiblebutnotreceivingindividuals(GeneralSemanticType):
    def __init__(self):
        self.description = ""Total Income Eligible But Not Receiving Individuals""
        self.format = ""A float number greater than or equal to 0""
        self.examples = [247.0, 2623.0, 0.0, 307.0, 949.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 0:
                return val
            else:
                raise ValueError(""Value should be greater than or equal to 0"")
        except ValueError:
            raise ValueError(""Invalid input value. It should be a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
senatoridentifier,"class senatoridentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique identifier for each senator'
        self.format = 'Identifier should be an integer greater than zero'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num <= 0:
                raise ValueError('Invalid senator id')
            return num
        except ValueError as ve:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
trajectorytype,"class trajectorytype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of trajectory of a senator'
        self.format = 'Trajectory types are 1, 2, 3, and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in self.examples:
                return num
            else:
                raise Exception('Invalid trajectory type')
        except ValueError:
            raise Exception('Invalid input format for trajectory type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
totalpreviousroles,"class totalpreviousroles(GeneralSemanticType):
    
    def __init__(self):
        self.description: str = 'Total number of previous roles held by a senator'
        self.format: str = 'Number of roles should be an integer greater than or equal to zero'
        self.examples: list = [0, 1, 2, 3, 4]
    
    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid number of roles')
            return num
        except ValueError:
            raise ValueError('Invalid input, expected a number')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
careerduration,"class careerduration(GeneralSemanticType):

    def __init__(self):
        self.description = ""Duration of a senator's career in years""
        self.format = 'Career duration should be an integer greater than or equal to zero'
        self.examples = [0, 10, 20, 30, 40]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid career duration')
            return num
        except ValueError:
            raise Exception('Invalid input: Non-numeric value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
aggregation,"class aggregation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of aggregation for a senator""
        self.format = ""Aggregation types are 1, 2, 3, 4, and 5""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num not in self.examples:
                raise ValueError('Invalid aggregation type')
            return num
        except ValueError:
            return ""Invalid value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
handedness,"class handedness(GeneralSemanticType):

    def __init__(self):
        self.description = ""The handedness of a person""
        self.format = ""As a number""
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
cfc12,"class cfc12(GeneralSemanticType):

    def __init__(self):
        self.description = 'CFC-12 level'
        self.format = 'CFC-12 level should be a non-negative integer'
        self.examples = [22, 49, 54, 58, 74]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                return None
            else:
                return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
favoritismindex,"class favoritismindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Index measuring favoritism (arbitrary units)'
        self.format = 'Favoritism index should be a floating point number'
        self.examples = [1.2, 3.45, 2.78, 0.95, 1.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
jobpercent,"class jobpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job percentages'
        self.format = 'Job percentages should be floating point numbers'
        self.examples = [10.5, 20.3, 30.7, 40.8, 50.9]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if 0 <= casted_val <= 100:
                return casted_val
            else:
                return np.nan
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
authorname,"class authorname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of the author(s)'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Abdulai, Hickey', 'Aguilar and Alis', 'Aidt, Jensen', 'Albertus', 'Allen']
        
    def super_cast(self, val):
        if isinstance(val, str):
            return str(val).title()
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
academicjournal,"class academicjournal(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the academic journal'
        self.format = 'The journal name should be fully spelled out and capitalized'
        self.examples = ['Comparative Political Studies', 'American Journal of Political Science', 'Cambridge University Press', 'Electoral Studies', 'Comparative Politics']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
publicationyear,"class publicationyear(GeneralSemanticType):
    def __init__(self):
        self.description = 'The year of publication'
        self.format = 'Year should be formatted as a 4-digit integer number'
        self.examples = [2008, 2013, 2015, 2017, 2019]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError(""Invalid input value. Expected an integer or string representation of an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > datetime.now().year:
            raise ValueError('Invalid year')
        return True"
studytype,"class studytype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of the study'
        self.format = 'The study type should be a lowercase string'
        self.examples = ['quant', 'mixed', 'qual', 'theory']

    def super_cast(self, val):
        val = str(val).lower()
        if val in self.examples:
            return val
        else:
            raise ValueError('Invalid study type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
president,"class president(GeneralSemanticType):

    def __init__(self):
        self.description = 'President'
        self.format = 'All caps'
        self.examples = ['MENEM', 'FHC', 'LULA', 'ALFONSIN', 'SARNEY']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str) or not casted_val.isupper():
            return False
        else:
            return True"
typeofgovernment,"class typeofgovernment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Government'
        self.format = ""Should be either 'unipartidario' or 'coalizão'""
        self.examples = ['unipartidario', 'coalizão']

    def super_cast(self, val):
        if val not in ['unipartidario', 'coalizão']:
            raise ValueError('Invalid type of government')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['unipartidario', 'coalizão']:
            return True
        else:
            return False"
popularity,"class popularity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Popularity'
        self.format = 'Decimal number between 0 and 100'
        self.examples = [51.7, 72.0, 62.67, 58.67, 35.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 100:
                raise ValueError('Invalid popularity value')
            return num
        except Exception as e:
            raise ValueError('Super cast failed')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
resignation,"class resignation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Resignation status""
        self.format = ""Boolean values 0 or 1""
        self.examples = [0, 1, 0, 1, 0]
        
    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
satisfactionrating,"class satisfactionrating(GeneralSemanticType):
    def __init__(self):
        self.description = 'Satisfaction rating'
        self.format = 'Satisfaction rating should be a floating point number between 0 and 10'
        self.examples = [5.0, 10.0, 8.0, 9.0, 9.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num if 0 <= num <= 10 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 10:
            return True
        else:
            return False"
jobstresslevel,"class jobstresslevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job stress level'
        self.format = 'A floating point number'
        self.examples = [4.07, 5.0, 1.0, 3.0, 6.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num if num >= 0 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and not math.isnan(casted_val):
            return True
        else:
            return False"
jobperformance,"class jobperformance(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job performance level'
        self.format = 'Job performance level should be a floating point number between 0 and 10'
        self.examples = [5.0, 10.0, 10.0, 10.0, 9.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num if 0 <= num <= 10 else float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            return 0 <= casted_val <= 10
        else:
            return False"
factoryidentifier,"class factoryidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Factory ID'
        self.format = 'Factory ID should be represented as a floating point number: 1.0 or 2.0'
        self.examples = [1.0, 2.0, 1.0, 2.0, 2.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val in [1.0, 2.0]:
                return float_val
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
isethnofed,"class isethnofed(GeneralSemanticType):
    def __init__(self):
        self.description = ""Whether or not the entity is an ethnofederation""
        self.format = ""Boolean format""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
ethnoterrcivilwar01,"class ethnoterrcivilwar01(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean value indicating the presence of an ethnoterrorist civil war""
        self.format = ""A boolean value (True/False)""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
ethnoterrcivilwarcount,"class ethnoterrcivilwarcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'The count of ethnic territorial civil wars in a country'
        self.format = 'The count should be an integer'
        self.examples = [0, 1, 2, 3, 6]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value must be an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int):
            return False
        if not 0 <= casted_val <= 6:
            return False
        return True"
countriesstatesystem,"class countriesstatesystem(GeneralSemanticType):
    def __init__(self):
        self.description = 'Country state system'
        self.format = 'Country state system is represented as an integer'
        self.examples = [71, 121, 149, 170, 173]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(""Invalid input value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 71 <= casted_val <= 173:
            return True
        else:
            return False"
educationcompleted,"class educationcompleted(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of education completed by a person'
        self.format = 'Education level as an integer between 1 and 7'
        self.examples = [1, 2, 4, 5, 7]

    def super_cast(self, val):
        if isinstance(val, (int, str)) and val.isdigit():
            return min(max(int(val), 1), 7)
        else:
            raise Exception('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 8):
            return True
        else:
            return False"
daycount,"class daycount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of days'
        self.format = 'A floating point number'
        self.examples = [54.0, 31.0, 45.0, 0.0, 58.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if math.isnan(val):
                return float('nan')
            else:
                return val
        except Exception as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
report,"class report(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'A report status indicator'
        self.format: str = '0 or 1'
        self.examples: list = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
regionname,"class regionname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Region name'
        self.format = 'Region name should be capitalized'
        self.examples = ['Africa', 'Eastern Mediterranean', 'Western Pacific', 'Americas', 'Europe']

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.title()
            if val in self.examples:
                return val
            else:
                raise Exception('Invalid Region Name')
        else:
            raise Exception('Invalid input type. String expected')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
diplomaticaction,"class diplomaticaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Description of Diplomatic Action'
        self.format = 'Diplomatic action should be formatted as a string.'
        self.examples = ['Policy', 'Transition', 'Ambassador behavior', 'Transition of Leadership', 'Insult']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise Exception('Invalid diplomatic action')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
diplomaticduration,"class diplomaticduration(GeneralSemanticType):
    def __init__(self):
        self.description = 'Duration of Diplomatic Action'
        self.format = 'String that represents the time period of the diplomatic action'
        self.examples = ['Immediately replaced', 'Reinstated all 8 months later', 'Reappointed within the year', '4 months', 'Reestablished in 2016']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif math.isnan(val):
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or math.isnan(casted_val):
            return True
        else:
            return False"
subjectidentifier,"class subjectidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identification for subjects'
        self.format = ""Subject ID should be a string of the form 'Sxx'""
        self.examples = ['S1', 'S12', 'S13', 'S3', 'S4']

    def super_cast(self, val):
        if isinstance(val, str):
            match_obj = re.match('S[0-9]+', val)
            if match_obj:
                return match_obj.group()
            else:
                return 'Invalid subject ID'
        elif isinstance(val, (int, float, np.number)):
            if val > 0:
                return 'S' + str(int(val))
            else:
                return 'Invalid subject ID'
        else:
            return 'Invalid subject ID'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('S[0-9]+', casted_val):
            return True
        else:
            return False"
median,"class median(GeneralSemanticType):

    def __init__(self):
        self.description = 'Median'
        self.format = 'Median should be a positive float'
        self.examples = [90.0, 270.0, 310.0, 370.0, 470.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val > 0:
                return round(val, 3)
            else:
                raise ValueError('Invalid median')
        except ValueError as ve:
            print(f""ValueError: {ve}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
ssrt,"class ssrt(GeneralSemanticType):
    def __init__(self):
        self.description = 'Stop-Signal Reaction Time (SSRT)'
        self.format = 'SSRT should be a positive float'
        self.examples = [155.175438596491, 224.304, 252.783, 290.013, 386.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val > 0:
                return round(val, 3)
            else:
                raise ValueError('Invalid SSRT')
        except Exception as e:
            print(e)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val > 0:
            return True
        else:
            return False"
reactiontime,"class reactiontime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reaction Time (RT)'
        self.format = 'RT should be a positive float'
        self.examples = [443.386503067485, 556.424, 597.091, 624.032, 796.245714285714]

    def super_cast(self, val):
        try:
            val = float(val)
            if val > 0:
                return round(val, 3)
            else:
                return ""Invalid RT""
        except ValueError:
            return ""Invalid RT""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val > 0:
            return True
        else:
            return False"
direction,"class direction(GeneralSemanticType):
    def __init__(self):
        self.description = 'Direction of policy entrepreneurship'
        self.format = 'Values should be integers'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
dirtopbot,"class dirtopbot(GeneralSemanticType):

    def __init__(self):
        self.description = 'Direction from top to bottom'
        self.format = 'Values should be integers'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 4:
            return True
        else:
            return False"
butd,"class butd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Boundary to boundary direction'
        self.format = 'Values should be integers'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        elif math.isnan(casted_val):
            return True
        else:
            return False"
function,"class function(GeneralSemanticType):
    def __init__(self):
        self.description = 'Function of policy entrepreneurship'
        self.format = 'Values should be integers'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except (ValueError, TypeError):
            raise Exception(""Invalid value. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
strategy,"class strategy(GeneralSemanticType):
    def __init__(self):
        self.description = 'Strategy of policy entrepreneurship'
        self.format = 'Values should be integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
dhori,"class dhori(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""A number 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
dverti,"class dverti(GeneralSemanticType):

    def __init__(self):
        self.description = ""Binary value""
        self.format = ""Integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ddia,"class ddia(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value representing the DDIA status""
        self.format = ""A boolean value""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
fintegrate,"class fintegrate(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""A number (0 or 1)""
        self.examples = [0,1,0,1,0]

    def super_cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
fexpand,"class fexpand(GeneralSemanticType):

    def __init__(self):
        self.description = ""A boolean value indicating if the feature is expanded""
        self.format = ""integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
fshift,"class fshift(GeneralSemanticType):
    def __init__(self):
        self.description = ""A shift category""
        self.format = ""integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1, float('nan')]:
            return True
        else:
            return False"
sprom,"class sprom(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary value""
        self.format = ""0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
sfram,"class sfram(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""A number""
        self.examples = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
scoal,"class scoal(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'School attendance'
        self.format: str = '0 or 1 as integer'
        self.examples: list = [0, 1, 1, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
sinst,"class sinst(GeneralSemanticType):

    def __init__(self):
        self.description = ""Boolean value""
        self.format = ""A boolean value""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
slead,"class slead(GeneralSemanticType):
    def __init__(self):
        self.description = ""Boolean value indicating whether the entity is a SLEAD""
        self.format = ""Integer of either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
commune,"class commune(GeneralSemanticType):

    def __init__(self):
        self.description = 'Commune'
        self.format = 'All letters should be in uppercase'
        self.examples = ['LA SERENA', 'COQUIMBO', 'ANDACOLLO', 'LA HIGUERA', 'PAIHUANO']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
relationship,"class relationship(GeneralSemanticType):

    def __init__(self):
        self.description = 'Relationship status of a person'
        self.format = 'In lower-case and as a string'
        self.examples = ['sister', 'husband', 'aunt', 'uncle', 'brother']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
anxietyindex,"class anxietyindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Anxiety Index'
        self.format = 'Anxiety Index should be represented as a floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Value could not be cast to a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not np.isfinite(casted_val):
            return False
        else:
            return True"
cost,"class cost(GeneralSemanticType):
    def __init__(self):
        self.description = ""The cost of an entity""
        self.format = ""Cost should be formatted as a floating point number""
        self.examples = [0.0, 2.0, 10.0, 4.0, float('nan')]
    
    def super_cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or casted_val < 0:
            return False
        else:
            return True"
mechanism,"
class mechanism(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mechanism type'
        self.format = 'Mechanism should be formatted as a floating point number'
        self.examples = [1.0, 2.0, 3.0, 4.0, float('nan')]

    def super_cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (casted_val in self.examples or math.isnan(casted_val)):
            return True
        else:
            return False"
citizenshipstatus,"class citizenshipstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'The citizenship status'
        self.format = 'Formatted as a floating point number'
        self.examples = [1.0, 2.0, np.nan, 1.0, 2.0]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val) or casted_val in [1.0, 2.0]:
            return True
        else:
            return False"
fulfillmentstatus,"class fulfillmentstatus(GeneralSemanticType):
    def __init__(self):
        self.description = 'The fulfillment status'
        self.format = 'Fulfillment status should be formatted as a floating point number'
        self.examples = [1.0, 2.0, 3.0, float('nan'), 2.0]

    def super_cast(self, val):
        if val is None or str(val).lower() in ['nan', 'none', '']:
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or (1 <= casted_val <= 3):
            return True
        else:
            return False"
endstatus,"class endstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""End status of a process""
        self.format = ""a boolean value represented as an integer""
        self.examples = [0, 1, 0, 1, 1]

    def super_cast(self, val):
        if np.isnan(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            if casted_val in [0, 1]:
                return True
            else:
                return False
        else:
            return False"
considerationfuture,"class considerationfuture(GeneralSemanticType):

    def __init__(self):
        self.description = 'Consideration of Future Consequences (CFC) scale'
        self.format = 'CFC scale values should be represented as floats'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 1 or val > 7:
                raise ValueError('Invalid CFC scale value')
            return val
        except ValueError:
            raise Exception('Invalid input type. The value should be convertible to a float.')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 7:
            return True
        else:
            return False"
huntinggrounds,"class huntinggrounds(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Type of location'
        self.format: str = 'All characters should be capitalized'
        self.examples: list = ['Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Hunting Grounds':
            return True
        else:
            return False"
chineseera,"class chineseera(GeneralSemanticType):
    def __init__(self):
        self.description = 'Chinese historical era'
        self.format = 'Era names should be capitalized'
        self.examples = ['Tang', 'Liao', 'Wei', 'Beishi', 'Jin']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
colorlevel,"class colorlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Color level'
        self.format = 'Color level should be an integer between 1 and 8'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num >= 1 and num <= 8:
                return num
            else:
                return 'Invalid color level'
        except Exception:
            return 'Invalid color level'

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and 1 <= casted_val <= 8"
areacode,"class areacode(GeneralSemanticType):

    def __init__(self):
        self.description = 'The area code of a given location'
        self.format = 'Area code should be a positive integer'
        self.examples = [1001, 14083, 20230, 24030, 32058]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1001 and casted_val <= 32058:
            return True
        else:
            return False"
economicindicator,"
class economicindicator(GeneralSemanticType):
	def __init__(self):
		self.description = 'The economic indicator of a given location'
		self.format = 'Economic indicator should be a positive float'
		self.examples = [0.0, 0.062, 0.103, 0.152, 0.7270398]

	def super_cast(self, val):
		try:
			float_val = float(val)
			return float_val
		except ValueError:
			raise Exception(""Invalid value for economic indicator"")

	def validate(self, val):
		casted_val = self.super_cast(val)
		if casted_val >= 0:
			return True
		else:
			return False"
borderpresence,"class borderpresence(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates if a country has a border or not""
        self.format = ""boolean""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
politicalindicator,"class politicalindicator(GeneralSemanticType):

    def __init__(self):
        self.description = 'The political indicator of a given location'
        self.format = 'A positive float'
        self.examples = [0.0, 0.062, 0.103, 0.152, 0.7270398]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError(""Invalid value. Value must be a positive float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
governmentbudget,"class governmentbudget(GeneralSemanticType):
    def __init__(self):
        self.description = 'The total government budget of a given location'
        self.format = 'Government budget should be a positive float'
        self.examples = [3864.0, 1410828.0, 4491056.0, 18381049.0, 3941318990.0]
        
    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value for government budget"")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 3864 and casted_val < float('inf'):
            return True
        else:
            return False"
geographiclocation,"class geographiclocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'The geographic location code of a given location'
        self.format = 'Geographic location code should be a positive integer'
        self.examples = [1, 23, 56, 129, 570]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        try:
            return int(val)
        except Exception:
            raise ValueError('Invalid input for geographic location')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, int) and 1 <= casted_val <= 570:
            return True
        else:
            return False"
educationyears,"
class educationyears(GeneralSemanticType):
    def __init__(self):
        self.description = 'Years of Education of a person'
        self.format = 'Years of Education should be a non-negative floating point number'
        self.examples = [5.0, 10.0, 12.0, 16.0, 20.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError
            return round(num, 1)
        except ValueError:
            raise ValueError('Invalid input for years of education')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
booleansemantic,"class booleansemantic(GeneralSemanticType):
    def __init__(self):
        self.description = ""A Boolean value""
        self.format = ""In integer format""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
numericalindex,"
class numericalindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Numerical index'
        self.format = 'Numerical indexes should be represented as an integer'
        self.examples = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
financialvalue,"class financialvalue(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Financial value'
        self.format = 'Financial values should be represented as a floating point number'
        self.examples = [0.0, 1000.0, 2000.0, 3000.0, 4000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Cannot convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
numericalindexwithunits,"class numericalindexwithunits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Numerical index with specific units'
        self.format = 'Numerical indexes with units should be represented as a floating point number'
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception(f""Invalid value {val}. Expected a numerical value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if casted_val < 0 or math.isinf(casted_val):
            return False
        return True"
taskdescription,"class taskdescription(GeneralSemanticType):
    def __init__(self):
        self.description = 'Description of a task or activity'
        self.format = 'A task description should start with a capital letter and end with a period'
        self.examples = ['Training and competency records for all staff.', 'Identify Quality Assurance Manager (Tzn candidate).', 'Lab coat rack - PAMVERC coats, lab coats only.', 'Run the status report.', 'Check the inventory.']

    def super_cast(self, val):
        clean_val = str(val).strip()
        clean_val = clean_val[0].upper() + clean_val[1:]
        if not clean_val.endswith('.'):
            clean_val = clean_val + '.'
        return clean_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0].isupper() and casted_val[-1] == '.':
            return True
        else:
            return False"
biologicalsex,"class biologicalsex(GeneralSemanticType):
    def __init__(self):
        self.description = ""Biological sex of an individual""
        self.format = ""Values should be stored as a lower case string""
        self.examples = ['m', 'f', 'm', 'f', 'm']

    def super_cast(self, val):
        lower_val = str(val).lower()
        if lower_val in ['m', 'f']:
            return lower_val
        else:
            raise Exception('Invalid biological sex')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['m', 'f']:
            return True
        else:
            return False"
diagnosis,"class diagnosis(GeneralSemanticType):
    def __init__(self):
        self.description = ""A medical diagnosis""
        self.format = ""As a string with the first letter of each word capitalized""
        self.examples = ['Benigin', 'Malignant', 'Follicular Neoplasm', 'Adhd', 'None']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
responder,"class responder(GeneralSemanticType):

    def __init__(self):
        self.description = 'Responder of the survey'
        self.format = 'Responder type should be represented as a string'
        self.examples = ['self', 'student', 'trainer', 'parent']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
question,"class question(GeneralSemanticType):

    def __init__(self):
        self.description = 'Response to a question'
        self.format = 'Response must be represented as integers (0 to 11)'
        self.examples = [0, 2, 5, 7, 11]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError(""Invalid input. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 11:
            return True
        else:
            return False"
canadianriding,"class canadianriding(GeneralSemanticType):
    def __init__(self):
        self.description = 'Canadian electoral district'
        self.format = 'Each word in the district name should be capitalized'
        self.examples = ['Avalon', 'Bonavista--Gander--Grand Falls--Windsor', 'Repentigny', 'Manicouagan', 'Drummond']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val.istitle():
            return False
        return True"
incumbentstatus,"class incumbentstatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""Incumbent status""
        self.format = ""String representation""
        self.examples = ['Incumbent', 'Non-incumbent', 'Incumbent', 'Non-incumbent', 'Incumbent']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['Incumbent', 'Non-incumbent']:
            return val
        else:
            raise ValueError('Invalid value for incumbent status')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Incumbent', 'Non-incumbent']:
            return True
        else:
            return False"
profession,"
class profession(GeneralSemanticType):

    def __init__(self):
        self.description = 'Profession of a person'
        self.format = 'Each word in the profession should be capitalized'
        self.examples = ['Other', 'Business', 'Education', 'Law', 'Government & politics']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
electstatus,"class electstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""Election status of a person""
        self.format = ""Elected or Defeated""
        self.examples = ['Elected', 'Defeated', 'Elected', 'Defeated', 'Elected']

    def super_cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid election status')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Elected', 'Defeated']:
            return True
        else:
            return False"
tradeindex,"class tradeindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Trade Index'
        self.format = 'Trade Index should be formatted as a floating point number'
        self.examples = [4.1130714, 4.129145, 4.18512, 4.2665963, 4.2588696]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 6)
            return casted_val
        except ValueError:
            raise Exception(f""Unable to cast value: {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
democracyfactor,"class democracyfactor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Democracy Factor'
        self.format = 'Democracy Factor should be formatted as a floating point number between 0 and 1'
        self.examples = [0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667]

    def super_cast(self, val):
        try:
            num = round(float(val), 8)
            if num < 0 or num > 1:
                raise ValueError
            return num
        except ValueError:
            return 'Invalid democracy factor'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        elif 0 <= casted_val <= 1:
            return True
        else:
            return False"
growthrate,"class growthrate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Growth Rate'
        self.format = 'A floating point number, rounded to 7 decimal places'
        self.examples = [4.279382, 5.8614464, 2.9577184, 4.4654303, 0.2492289]

    def super_cast(self, val):
        try:
            return round(float(val), 7)
        except Exception as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
debtindex,"class debtindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Debt Index'
        self.format = 'Debt Index should be formatted as a floating point number'
        self.examples = [4.0842957, 3.9248939, 3.6722622, 3.351741, 3.1905997]

    def super_cast(self, val):
        try:
            return round(float(val), 7)
        except ValueError:
            return None
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
budgetvalue,"class budgetvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'Budget Value'
        self.format = 'Budget Value should be formatted as a floating point number'
        self.examples = [1.164, 4.876, 5.259, 13.629, 13.945]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            print(""The value cannot be casted to float"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if isinstance(casted_val, float) and not math.isnan(casted_val):
            return True
        else:
            return False"
label,"class label(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary label""
        self.format = ""Boolean""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
interviewidentifier,"class interviewidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for an Interview""
        self.format = ""Positive integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
interviewcode,"class interviewcode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique Code for an Interview'
        self.format = 'A string of alphanumeric characters'
        self.examples = ['QV1', 'QV2', 'QC3', 'QC4', 'PM5']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
communityidentifier,"class communityidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a Community'
        self.format = 'Community ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
districtidentifier,"class districtidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a District'
        self.format = 'District ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, float) and not math.isnan(val):
            return int(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
regiondepartmentidentifier,"
class regiondepartmentidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Identifier for a Region Department'
        self.format = 'Region Department ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5] # Added two more examples to make it a 5-length list

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0: # Check if the casted value is a non-negative integer
            return True
        else:
            return False"
interviewdate,"class interviewdate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of the Interview'
        self.format = 'Interview Date should be formatted as a datetime object'
        self.examples = ['2016-07-01', '2016-07-02', '2016-07-03', '2016-07-04', '2016-07-05']

    def super_cast(self, val):
        if isinstance(val, (int, float)) and not math.isnan(val):
            return datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(val) - 2)
        elif isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y-%m-%d')
            except ValueError:
                return float('nan')
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
interviewername,"class interviewername(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of the Interviewer'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Daniela Yepez', 'John Doe', 'Jane Smith', 'Alice Johnson', 'Robert Brown']
    
    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        else:
            names = casted_val.split(' ')
            return all(name[0].isupper() and name[1:].islower() for name in names if name)"
scale,"class scale(GeneralSemanticType):
    def __init__(self):
        self.description = 'Scale Value'
        self.format = 'Scale values should be floating point numbers within the range of 1 to 5'
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        elif isinstance(val, int) or isinstance(val, float):
            return round(float(val), 2)
        else:
            raise ValueError(""Invalid input. Please ensure the input is a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 5.0:
            return True
        else:
            return False
"
employmentsituation,"class employmentsituation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Employment situation of an individual""
        self.format = ""Boolean (0 = Unemployed, 1 = Employed)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return casted_val in [0, 1]"
wage,"class wage(GeneralSemanticType):

    def __init__(self):
        self.description = 'The wage in USD'
        self.format = 'Wage should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            print(f'Error: Invalid value {val} for wage. Expected a numeric value.')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif casted_val < 0 or math.isnan(casted_val):
            print(f'Error: Invalid value {casted_val} for wage. Expected a non-negative number.')
            return False
        else:
            return True"
tradeeffect,"class tradeeffect(GeneralSemanticType):

    def __init__(self):
        self.description = 'Perceived Effect of Trade on US'
        self.format = ""Trade effect values should be one of the following: '1Not', '2ALittle', '3Somewhat', '4Very'""
        self.examples = ['1Not', '2ALittle', '3Somewhat', '4Very', '1Not']

    def super_cast(self, val):
        valid_values = [""1Not"", ""2ALittle"", ""3Somewhat"", ""4Very""]
        if val in valid_values:
            return val
        else:
            raise Exception('Invalid value for trade effect')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [""1Not"", ""2ALittle"", ""3Somewhat"", ""4Very""]:
            return True
        else:
            return False"
tradefears,"class tradefears(GeneralSemanticType):
    def __init__(self):
        self.description = 'Prospective Trade Fears'
        self.format = ""Trade fear values should be one of the following: '2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd'""
        self.examples = ['2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd']

    def super_cast(self, val):
        if val in ['2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd']:
            return val
        else:
            raise Exception('Invalid value for trade fears')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd']:
            return True
        else:
            return False"
homeownership,"class homeownership(GeneralSemanticType):
    def __init__(self):
        self.description = ""Homeownership status""
        self.format = ""Boolean""
        self.examples = [0, 1, 0, 1, 0]
        
    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        elif isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return None
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
unionmembership,"class unionmembership(GeneralSemanticType):

    def __init__(self):
        self.description = ""Union Membership""
        self.format = ""0 for non-member, 1 for member""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
conflictidentifier,"class conflictidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conflict ID'
        self.format = 'Integer'
        self.examples = [186, 186, 205, 36, 120]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
conflictoutcome,"class conflictoutcome(GeneralSemanticType):
    def __init__(self):
        self.description = 'Conflict Outcome'
        self.format = 'A string representation of conflict outcome'
        self.examples = ['3: Government success', '1: Rebel success', '2: Draw', '2: Draw', '2: Draw']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['3: Government success', '1: Rebel success', '2: Draw']:
            return True
        else:
            return False"
rownumber,"class rownumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Row Number'
        self.format = 'Row numbers should be formatted as integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. The value should be a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
iranianregion,"class iranianregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Iranian Region Name'
        self.format = 'Iranian region names should be formatted as strings'
        self.examples = ['کرج', 'تهران', 'تبریز', 'اصفهان', 'مشهد']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
regionnumber,"class regionnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Region Number'
        self.format = 'Region numbers should be formatted as integers'
        self.examples = [1, 51, 46, 16, 151]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif (casted_val >= 0) and (casted_val == math.floor(casted_val)):
            return True
        else:
            return False"
femalepopulation,"class femalepopulation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Female Population'
        self.format = 'Integer'
        self.examples = [77540, 846262, 283056, 303173, 258377]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
urbanpopulation,"class urbanpopulation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Urban Population'
        self.format = 'Urban Population should be formatted as integers'
        self.examples = [14526, 1512082, 289998, 254708, 241989]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. The value must be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
economicallyactivepopulation,"class economicallyactivepopulation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economically Active Population'
        self.format = 'Economically Active Population should be formatted as integers'
        self.examples = [37567, 516498, 147845, 156146, 140426]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast input to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
literatepopulationpercent,"class literatepopulationpercent(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Literate Population Percentage'
        self.format = 'Floats'
        self.examples = [35.4, 42.9, 18.1, 18.1, 17.2]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.','',1).isdigit():
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError(""Invalid value. Value should be convertible to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False
"
muslimpopulation,"class muslimpopulation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Muslim Population'
        self.format = 'Muslim Population should be formatted as integers'
        self.examples = [np.nan, 1666434, 568080, 608287, 524513]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
economicallyactivepopulationpercent,"class economicallyactivepopulationpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Economically Active Population Percentage'
        self.format = 'Economically Active Population Percentage should be formatted as floats'
        self.examples = [45.0, 46.5, 46.3, 46.5, 45.6]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if self.validate(casted_val):
                return casted_val
        except ValueError:
            raise Exception(f""Unable to cast value {val} to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
totalworkingpopulation,"class totalworkingpopulation(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Total Working Population'
        self.format = 'Total Working Population should be formatted as integers'
        self.examples = [48002, 581262, 181017, 195063, 165504]
        
    def super_cast(self, val):
        try:
            return int(val)
        except:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, int) and casted_val >= 0"
farmingpopulation,"class farmingpopulation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Farming Population'
        self.format = 'Farming Population should be formatted as integers'
        self.examples = [31756, 44646, 64231, 85165, 73117]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
miningpopulation,"class miningpopulation(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Mining Population'
        self.format: str = 'integer'
        self.examples: list = [1357, 2246, 58, 166, 235]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        elif isinstance(val, str):
            if val.isnumeric():
                return int(val)
            else:
                raise ValueError('The value must be numeric')
        elif isinstance(val, (int, float)):
            return int(val)
        else:
            raise TypeError('Invalid type. The value must be either str, int or float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
industrialpopulation,"class industrialpopulation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Industrial Population'
        self.format = 'Industrial Population should be formatted as integers'
        self.examples = [2793, 126336, 50109, 48588, 29263]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
industrialpopulationpercent,"class industrialpopulationpercent(GeneralSemanticType):
    def __init__(self):
        self.description = 'Industrial Population Percentage'
        self.format = 'Industrial Population Percentage should be formatted as floats'
        self.examples = [0.058185075621849, 0.2173477708847301, 0.2768193042642404, 0.2490887559403884, 0.1768114365815932]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if 0 <= casted_val <= 100:
                return casted_val
            else:
                raise ValueError()
        except ValueError:
            raise ValueError(""Invalid value. It should be a number between 0 and 100"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            raise ValueError(""Invalid value. The value cannot be NaN"")
        elif 0 <= casted_val <= 100:
            return True
        else:
            return False"
farmingpopulationpercent,"class farmingpopulationpercent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Farming Population Percentage'
        self.format = 'Farming Population Percentage should be formatted as floats'
        self.examples = [0.6615557685096455, 0.0768087368518843, 0.3548340763574691, 0.4366025335404459, 0.4417838843774168]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input, unable to convert to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 0 <= casted_val <= 100:
            return False
        else:
            return True"
miningpopulationpercent,"class miningpopulationpercent(GeneralSemanticType):
    def __init__(self):
        self.description = 'Mining Population Percentage'
        self.format = 'The data is formatted as a float'
        self.examples = [0.0282696554310237, 0.0038640062484731, 0.0003204118950153, 0.0008510071105232, 0.0014199052590873]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return ""Invalid Value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
schoolname,"class schoolname(GeneralSemanticType):
    def __init__(self):
        self.description = ""Name of a school""
        self.format = ""School names should be stored as capitalized strings""
        self.examples = ['Akron East CLC', 'Buchtel High School-Akron', 'Arcanum High School- Arcanum-Butler Local', 'Barberton City SD- New West Elementary School', 'Barberton East Elementary']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isalpha():
            return True
        else:
            return False"
schooladdress,"class schooladdress(GeneralSemanticType):
    def __init__(self):
        self.description = 'Address of a School'
        self.format = 'Address in uppercase'
        self.examples = ['PO BOX 129', '206 W 8TH ST', 'PO BOX 549', '7022 W 1300 N', 'PO BOX 250']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
schoolcity,"class schoolcity(GeneralSemanticType):

    def __init__(self):
        self.description = 'City where the School is located'
        self.format = 'City names should be in uppercase'
        self.examples = ['MILWAUKEE', 'CINCINNATI', 'INDIANAPOLIS', 'COLUMBUS', 'WASHINGTON']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
schoolenrollment,"class schoolenrollment(GeneralSemanticType):
    def __init__(self):
        self.description = ""School Enrollment""
        self.format = ""In integer format""
        self.examples = [1, 50, 100, 150, 200]

    def super_cast(self, val):
        try:
            # cast the value to integer
            return int(val)
        except ValueError:
            # if the value is not castable to integer, raise an exception
            raise Exception(f""Invalid value {val}. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        # check if the value is in the valid range
        if 1 <= casted_val <= float('inf'):
            return True
        else:
            return False
"
countryyear,"class countryyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country and year combined'
        self.format = 'Country should be the country code and year should be a 4 digit number'
        self.examples = ['10_2002', '10_2003', '10_2004', '10_2005', '10_2006']

    def super_cast(self, val):
        if isinstance(val, str):
            (country, year) = val.split('_')
            try:
                country = str(pycountry.countries.get(alpha_2=country).name)
                year = int(year)
                return country + '_' + str(year)
            except:
                return False
        return False

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val:
            (country, year) = casted_val.split('_')
            if len(year) == 4 and year.isdigit():
                try:
                    pycountry.countries.get(name=country)
                    return True
                except:
                    return False
        return False"
validvote,"class validvote(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Valid Votes'
        self.format = 'Number of valid votes should be an integer'
        self.examples = [625881, 1795876, 2019, 85792, 129510]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is float('nan'):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
partyvote,"class partyvote(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Votes for a Party'
        self.format = 'Number of party votes should be an integer'
        self.examples = [48740, 168952, 0, 3585, 15313]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            try:
                return int(val)
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
validvotefirst,"class validvotefirst(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Valid Votes at the First Count'
        self.format = 'Valid votes at the first count should be an integer'
        self.examples = [403342, 1046181, 2019, 78842, 109706]
        
    def super_cast(self, val):
        if isinstance(val, int):
            return val
        try:
            return int(val)
        except Exception:
            raise ValueError(""Invalid value for valid vote count"")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
validvotelast,"class validvotelast(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Valid Votes at the Last Count'
        self.format = 'Number of valid votes at the last count should be an integer'
        self.examples = [843380, 2258043, 3526, 131047, 166252]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
timea,"class timea(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time Measure A'
        self.format = 'Time measure should be an integer'
        self.examples = [10, 7, 0, 4, 10]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            return False
        else:
            return True"
timeb,"class timeb(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'Time Measure B'
        self.format = 'Time measure should be an integer'
        self.examples = [9, 7, 0, 3, 9]

    def super_cast(self, val):
        if isinstance(val, (int, float, str)) and val.isdigit():
            return int(val)
        else:
            raise ValueError(""Unexpected value. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
electionvotes,"class electionvotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Election Votes'
        self.format = 'Election votes should be formatted as a floating point number'
        self.examples = [366.91187, 411.96503, 311.08844, 109.79592, 332.58182]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return ""Invalid Input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
primarysupport,"class primarysupport(GeneralSemanticType):

    def __init__(self):
        self.description = 'Primary Support'
        self.format = 'Primary support should be formatted as a floating point number'
        self.examples = [-7.1, -0.925, 7.1, 22.9]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif -math.inf < casted_val < math.inf:
            return True
        else:
            return False"
adjustedvotes,"class adjustedvotes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Adjusted Votes'
        self.format = 'Adjusted votes should be formatted as a floating point number'
        self.examples = [96.911865, 141.96503, 41.08844, -160.20407, 62.581818]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return 'NaN'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return True"
funeralcost,"class funeralcost(GeneralSemanticType):
    def __init__(self):
        self.description = 'The cost of a funeral in a specific country'
        self.format = 'Cost should be formatted as a floating point number'
        self.examples = [3000.0, 3311.0, 2334.0, 5888.0, 10879.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise ValueError(f""Cannot cast {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
booleancategory,"class booleancategory(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean category""
        self.format = ""In 0s and 1s as integers""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
governmentreaction,"class governmentreaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'The reaction of the government to funeral costs'
        self.format = 'Value should be an integer'
        self.examples = [0, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid government reaction value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in self.examples:
            return True
        else:
            return False"
superstitionscore,"class superstitionscore(GeneralSemanticType):
    def __init__(self):
        self.description = 'The superstition score of a country'
        self.format = 'Score should be a floating point number'
        self.examples = [7.57, 36.33, 49.74, 63.11, 95.0]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
gdpgrowthrate,"class gdpgrowthrate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Gross Domestic Product Growth Rate'
        self.format = 'Formatted as a floating point number'
        self.examples = [7.23000001907349, 7.15999984741211, 7.5, 7.63000011444092, 7.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -float('inf') and casted_val <= float('inf'):
            return True
        else:
            return False"
scientistname,"class scientistname(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Name of a Scientist'
        self.format: str = 'The first letter of the first and last name should be capitalized, and the names should be separated by a comma'
        self.examples: list = [""Van'T Hoff, Jacobus Henricus"", 'Fischer, Hermann Emil', 'Arrhenius, Svante August', 'Ramsay, Sir William', 'Von Baeyer, Johann']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[A-Z][a-z]+,\s[A-Z][a-z]+$', casted_val):
            return True
        else:
            return False"
scientificfield,"class scientificfield(GeneralSemanticType):

    def __init__(self):
        self.description = 'Field of Scientific Study'
        self.format = 'The field should be represented as a string, with the first letter capitalized'
        self.examples = ['Medicine', 'Physics', 'Chemistry']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Medicine', 'Physics', 'Chemistry']:
            return True
        else:
            return False"
booleanflag,"class booleanflag(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean flag""
        self.format = ""integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
exportvalue,"class exportvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'The value of exports in USD'
        self.format = 'Export value should be a floating point number'
        self.examples: list = [0.0011104329129437, 0.391, 648919000.0, 6174327000.0, 70017569000.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val >= 0:
            return val
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
gdpppp,"class gdpppp(GeneralSemanticType):
    def __init__(self):
        self.description = 'GDP per capita, PPP (constant 2011 international $)'
        self.format = 'A floating point number'
        self.examples = [11900.0, 20200.0, 48800.0, 47900.0, 44900.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
braincondition,"class braincondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'The condition of the brain'
        self.format = ""Condition name with capitalized first letter""
        self.examples = ['Normal Hs', 'Down Syndrome', 'LB1']
    
    def super_cast(self, val):
        return str(val).strip().capitalize()
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
job,"class job(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job type of a person'
        self.format = 'Job type should be represented as a float between 1.0 and 10.0'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception('Invalid job type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 10.0:
            return True
        else:
            return False"
cowcode,"class cowcode(GeneralSemanticType):
    def __init__(self):
        self.description = 'The Correlates of War numerical code for a country'
        self.format = 'The cowcode should be a three digit number'
        self.examples = [700, 365, 452, 645, 817]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Value should be a three digit number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= 1000:
            return True
        else:
            return False"
fullname,"class fullname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Full name of a person'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Deng Xiaoping', ""Shcherbitsky, Vladimir Vasil'evich"", 'Ali, Aires Bolif��cio Baptista', ""Kuznetsov, Vasiliy Vasil'evich"", 'Salom��o, Tom��z']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is a string and if it contains at least two words (assumes a space between first and last names)
        if isinstance(casted_val, str) and len(casted_val.split("" "")) >= 2:
            return True
        else:
            return False"
enterobacterprevalence,"class enterobacterprevalence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Enterobacter prevalence (LOG CFU/g)'
        self.format = 'Prevalence should be a floating point number'
        self.examples = [1.1, 2.2, 3.3, 4.4, 5.5]

    def super_cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            raise Exception(""Invalid value. Expected a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val == float('inf'):
            return False
        else:
            return True"
animalnumber,"class animalnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for an animal'
        self.format = 'A unique integer identifier'
        self.examples = [1010, 1050, 1200, 1500, 2000]

    def super_cast(self, val):
        if isinstance(val, (int, float, np.int64)):
            return int(val)
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError(f""Value {val} can't be converted to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            raise ValueError(f""Value {val} is out of the valid range [0, infinity]."")"
feedconsumed,"
class feedconsumed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount of feed consumed by an animal'
        self.format = 'A floating point number representing the amount of feed consumed'
        self.examples = [0.48, 5.39, 7.03, 5.06, 11.69]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise ValueError(f""Value {val} could not be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
milkyield,"class milkyield(GeneralSemanticType):

    def __init__(self):
        self.description = 'Amount of milk produced by an animal'
        self.format = 'A floating point number representing the amount of milk produced'
        self.examples = [9.36, 30.06, 27.01, 24.1, 36.41]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
agriculturepractice,"class agriculturepractice(GeneralSemanticType):

    def __init__(self):
        self.description = ""Agriculture Practice""
        self.format = ""In upper-case string""
        self.examples = ['CA', 'CT', 'CA', 'CT', 'CA']

    def super_cast(self, val):
        if isinstance(val, str) and val.isupper():
            return str(val)
        else:
            return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['CA', 'CT']:
            return True
        else:
            return False"
samplecode,"class samplecode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for each sample'
        self.format = 'Sample codes are alphanumeric strings'
        self.examples = ['CAF1A', 'CAF1B', 'CAF1C', 'CAF2A', 'CAF2B']
        
    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
soilrespiration,"class soilrespiration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Soil respiration at specific depths'
        self.format = 'Soil respiration should be a floating point number'
        self.examples = [0.961, 0.74, 0.5309999999999999, 0.9, 0.977]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception('Invalid soil respiration value') from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
poxc,"class poxc(GeneralSemanticType):
    def __init__(self):
        self.description = ""Peroxidase oxidizable carbon at specific depths""
        self.format = ""Floating point number""
        self.examples = [720.536, 720.754, 432.4751999999999, 569.84, 703.728]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid POXC value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
litterindex,"class litterindex(GeneralSemanticType):
    def __init__(self):
        self.description = 'Litter Index (LI)'
        self.format = 'Litter index should be a floating point number'
        self.examples = [15.648, 18.108, 0.0, 2.6, 9.35]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid litter index value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
soilmoisture,"class soilmoisture(GeneralSemanticType):
    def __init__(self):
        self.description = 'Soil moisture at specific depths'
        self.format = 'Soil moisture should be a floating point number'
        self.examples = [20.766, 21.294, 5.769230769230783, 16.478, 19.89]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid soil moisture value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False
"
soilbulkdensity,"class soilbulkdensity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Soil bulk density at specific depths'
        self.format = 'Soil bulk density should be a floating point number'
        self.examples = [1.512, 1.508, 0.9886369426751592, 1.44, 1.539]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid soil bulk density value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not np.isinf(casted_val):
            return True
        else:
            return False"
wateragregatesstability,"class wateragregatesstability(GeneralSemanticType):
    def __init__(self):
        self.description = 'Water aggregate stability at specific depths'
        self.format = 'Water aggregate stability should be a floating point number'
        self.examples = [3.876, 3.803, 1.1111111111111112, 1.944, 3.889]

    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid water aggregate stability value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
beerkan,"class beerkan(GeneralSemanticType):
    def __init__(self):
        self.description = 'Beerkan infiltration rate'
        self.format = 'Beerkan infiltration rate should be a floating point number'
        self.examples = [356.878, 482.019, 0.1752107790381014, 71.649, 121.176]
        
    def super_cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid Beerkan infiltration rate value')
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
booleanvalue,"class booleanvalue(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value""
        self.format = ""Boolean format""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            return val.capitalize() == 'Yes'
        else:
            return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return isinstance(casted_val, bool) and (casted_val == True or casted_val == False)"
integercount,"
class integercount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Countable entities'
        self.format = 'Count should be an integer'
        self.examples: list = [0, 1, 2, 3, 4]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
eggtype,"class eggtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of egg'
        self.format = 'String representation of egg types'
        self.examples = ['CC', 'Coniesta', 'MEM']

    def super_cast(self, val):
        # Expecting the output from cast() to be a string representation of the egg type
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is within the expected egg types
        return casted_val in ['CC', 'Coniesta', 'MEM']"
eggcode,"class eggcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Code assigned to the egg type'
        self.format = 'Egg codes should be integers from 1 to 3'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. Value should be an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            raise Exception(f""Invalid value: {casted_val}. Value should be in the range 1-3"")"
emergencerate,"class emergencerate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Emergence rate in percent'
        self.format = 'Floating point number from 0 to 100'
        self.examples = [0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 0 <= float_val <= 100:
                return round(float_val, 6)
            else:
                raise ValueError(f'Value {val} is not within the acceptable range of 0 to 100.')
        except ValueError as ve:
            raise ValueError(f'Could not convert {val} to float. Original error: {ve}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            raise ValueError(f'Value {val} is not valid for Emergence Rate.')"
numberoftrichogramma,"class numberoftrichogramma(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Trichogramma'
        self.format = 'Trichogramma numbers should be floating point numbers'
        self.examples = [0, 20.0, 40.0, 60.0, 80.0]

    def super_cast(self, val):
        return round(float(val), 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
marketidentifier,"
class marketidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'ID of a market'
        self.format = ""Format is 'Mx'""
        self.examples = ['M1', 'M2', 'M3', 'M4', 'M5']

    def super_cast(self, val):
        if isinstance(val, str) and re.match('^M\\d+$', val):
            return val
        else:
            raise ValueError('Invalid Market ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('^M\\d+$', casted_val):
            return True
        else:
            return False"
locationtype,"class locationtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of location where the network is measured'
        self.format = 'Location type should be a string and is case-insensitive'
        self.examples = ['Out.', 'Ins.', 'Out.', 'Ins.', 'Out.']

    def super_cast(self, val):
        casted_val = str(val).title()
        if casted_val in ['Out.', 'Ins.']:
            return casted_val
        elif casted_val == 'Continent':
            return 'Out.'
        elif casted_val in ['Island', 'Island/Continent']:
            return 'Ins.'
        else:
            raise ValueError('Invalid Location Type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Out.', 'Ins.']:
            return True
        else:
            return False"
vendoridentifier,"class vendoridentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'ID of a vendor'
        self.format = 'Vendor IDs are integers'
        self.examples = [1, 5, 10, 15, 20]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input. Input must be convertible to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1:
            return True
        else:
            return False"
sampledescription,"class sampledescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'Description of a sample'
        self.format = 'Format is a string'
        self.examples = ['Floor', 'Basket', 'Mat', 'Wall', 'Scale']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
surfacetype,"class surfacetype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of surface'
        self.format = ""Format is either 'FCS' or 'NFCS'""
        self.examples = ['FCS', 'NFCS', 'FCS', 'NFCS', 'FCS']

    def super_cast(self, val):
        if val == 'FCS' or val == 'NFCS':
            return val
        else:
            raise ValueError('Invalid Surface Type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['FCS', 'NFCS']:
            return True
        else:
            return False"
seasontype,"class seasontype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of season'
        self.format = ""Format is either 'Dry' or 'Rainy'""
        self.examples = ['Dry', 'Rainy', 'Dry', 'Rainy', 'Dry']

    def super_cast(self, val):
        if val == 'Dry' or val == 'Rainy':
            return val
        else:
            return 'Invalid Season Type'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Dry', 'Rainy']:
            return True
        else:
            return False"
genotype,"class genotype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Genotype of an organism'
        self.format = 'Genotype should be an integer'
        self.examples = [143934, 143936, 142490, 142492, 142496]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input, expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 142462 <= casted_val <= 143936:
            return True
        else:
            return False"
maxwidth,"class maxwidth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Maximum width of an organism or its part in millimeters'
        self.format = 'Maximum width should be a floating point number'
        self.examples = [17.370968, 30.989480, 51.854301, 53.008826, 47.698553]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            raise Exception(""Invalid value for maxwidth"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 13.1976 <= casted_val <= 65.610144:
            return True
        else:
            return False"
rootfill,"class rootfill(GeneralSemanticType):

    def __init__(self):
        self.description = 'Root fill of an organism'
        self.format = 'Root fill should be a floating point number'
        self.examples = [0.064118, -1.565468, 0.137902, -2.405798, -3.880445]
    
    def super_cast(self, val):
        return round(float(val), 6)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= -6.437193 and casted_val <= 8.085443:
            return True
        else:
            return False"
lengthwidthratio,"class lengthwidthratio(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ratio of length to width of an organism or its part'
        self.format = 'A float number rounded to six decimal places'
        self.examples = [10.885931, 7.825000, 3.619264, 2.907799, 3.475941]

    def super_cast(self, val):
        try:
            return round(float(val), 6)
        except ValueError:
            raise ValueError(""The value is not a number."")
        except TypeError:
            raise TypeError(""The type of value is not a float or int."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.089158 <= casted_val <= 23.321429:
            return True
        else:
            return False"
datasetname,"class datasetname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the Dataset'
        self.format = 'Dataset names should be meaningful and descriptive'
        self.examples = ['Description', 'Period data were collected', 'Metadata', 'Primary contributor', 'Contact']

    def super_cast(self, val):
        # Considering the format and cast function of the provided class, any value can be casted to a string.
        # Therefore, the output of super_cast() can only be a string.
        return str(val).strip()

    def validate(self, val):
        # Since the format is a string, the validation checks if the casted value is indeed a string.
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
datasource,"class datasource(GeneralSemanticType):

    def __init__(self):
        self.description = 'Source of the Data'
        self.format = 'Data sources should be meaningful and descriptive'
        self.examples = ['Formulated by authors', 'FAOStat(http://www.fao.org/faostat/en/#data/QC)', 'Source', 'FAO EcoCrop (http://ecocrop.fao.org/ecocrop/srv/en/home)', 'Original data from FAOStat(http://www.fao.org/faostat/en/#data/QC)']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and isinstance(casted_val, str):
            return True
        else:
            return False"
group,"class group(GeneralSemanticType):
    def __init__(self):
        self.description = ""A group identifier""
        self.format = ""In string format""
        self.examples = ['1', '2', '0', '1.0', 'G1', 'Group A']

    def super_cast(self, val):
        if isinstance(val, str):
            return val
        elif isinstance(val, int) or isinstance(val, float):
            return str(val)
        else:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '0', '1.0', '2.0', '3.0', 'G1', 'G2', 'G3', 'G4', 'G5', 'Group A', 'Group B', 'Treatment']:
            return True
        else:
            return False"
sex,"class sex(GeneralSemanticType):
    def __init__(self):
        self.description = ""Sex of an individual""
        self.format = ""String format: 'male', 'female', or 'other'""
        self.examples = ['male', 'female', 'male', 'female', 'other']

    def super_cast(self, val):
        if isinstance(val, int) and val in [1,2,3]:
            if val == 1:
                return 'male'
            elif val == 2:
                return 'female'
            else:
                return 'other'
        elif isinstance(val, str):
            if val.lower() in ['m', 'male']:
                return 'male'
            elif val.lower() in ['f', 'female']:
                return 'female'
            else:
                return 'other'
        elif isinstance(val, int) and val in [0,1]:
            return 'male' if val == 0 else 'female'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female', 'other']:
            return True
        else:
            return False"
weightchange,"class weightchange(GeneralSemanticType):

    def __init__(self):
        self.description = 'Change in weight of the cattle from beginning to end'
        self.format = 'Weight change should be a floating point number with one decimal place'
        self.examples = [-0.2, -9.6, 6.0, 13.2, 0.0]

    def super_cast(self, val):
        try:
            if isinstance(val, str) and all((x.replace('.', '', 1).isdigit() or x == '-' for x in val.split())):
                return round(float(val), 1)
            else:
                return round(float(val), 1)
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
photo,"class photo(GeneralSemanticType):

    def __init__(self):
        self.description = 'Photo of the cattle'
        self.format = 'Photo should be in the format \'Intial photo side \', \'Initial photo rear\', \'End photo side\', or \'End photo rear\''
        self.examples = ['Intial photo side ', 'Initial photo rear', 'End photo side', 'End photo rear']

    def super_cast(self, val):
        if val in ['Intial photo side ', 'Initial photo rear', 'End photo side', 'End photo rear']:
            return val
        else:
            return 'Invalid photo'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Intial photo side ', 'Initial photo rear', 'End photo side', 'End photo rear']:
            return True
        else:
            return False"
herbicidetreatment,"class herbicidetreatment(GeneralSemanticType):

    def __init__(self):
        self.description = 'Herbicide treatments represented by numbers'
        self.format = 'Herbicide treatments should be stored as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2', '3', '4', '5']:
            return True
        else:
            return False"
herbicidename,"class herbicidename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the herbicide'
        self.format = 'Herbicide names should be stored as strings'
        self.examples = ['Testemunha capinada', 'Testemunha absoluta', 'Glifosato*', 'Glifosato + 2,4-D*', 'Glifosato + Saflufenacil*']

    def super_cast(self, val):
        return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
herbiciderate,"class herbiciderate(GeneralSemanticType):

    def __init__(self):
        self.description = 'The rate of herbicide in grams per hectare'
        self.format = 'Herbicide rates should be formatted as floating point numbers (in grams per hectare)'
        self.examples = [1440.0, 1005.0, 35.0, 60.0, 0.0]
    
    def super_cast(self, val):
        if val == '-':
            val = '0'
        elif '+' in val:
            parts = val.split('+')
            return sum((float(part) for part in parts))
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        return False"
samplecollectionday,"class samplecollectionday(GeneralSemanticType):

    def __init__(self):
        self.description = 'The day when the sample was collected'
        self.format = 'Day should be an integer between 1 and 6'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 6:
                return None
            else:
                return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 6:
            return True
        else:
            return False"
season,"class season(GeneralSemanticType):
    def __init__(self):
        self.description = 'Season of the year'
        self.format = 'Season should be a lowercase string'
        self.examples = ['spring', 'summer', 'fall', 'winter']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['spring', 'summer', 'fall', 'winter', 'dry', 'wet']:
            return True
        else:
            return False"
penidentifier,"class penidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'ID number of the pen'
        self.format = 'Pen ID should be an integer between 1 and 15'
        self.examples = [1, 6, 7, 12, 13]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise ValueError('Invalid pen ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 15:
            return True
        else:
            return False"
intake,"class intake(GeneralSemanticType):

    def __init__(self):
        self.description = 'The food intake of the pig, in the given period'
        self.format = 'Non-negative float in grams'
        self.examples = [86.94, 135.29, 90.66, 139.76]

    def super_cast(self, val):
        casted_val = float(val)
        if casted_val >= 0:
            return casted_val
        else:
            raise ValueError('Invalid food intake')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, float):
            return True
        else:
            return False"
gain,"class gain(GeneralSemanticType):

    def __init__(self):
        self.description = 'The weight gain of the pig, in the given period'
        self.format = 'Weight gain should be a non-negative float'
        self.examples = [54.59, 71.91, 649.83, 856.06]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 0:
                return val
            else:
                raise ValueError('Invalid weight gain')
        except Exception as e:
            print(f""Error occurred: {e}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
days,"
class days(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days in the given period'
        self.format = 'Number of days should be a non-negative integer'
        self.examples = [84, 100, 365, 7, 30]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val >= 0:
                return int_val
            else:
                raise ValueError('Invalid number of days')
        except ValueError as v:
            raise ValueError('Invalid input, cannot cast to integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
feedefficiency,"class feedefficiency(GeneralSemanticType):
    
    def __init__(self):
        self.description = ""The feed efficiency of the pig, in the given period""
        self.format = ""Feed efficiency should be a non-negative float""
        self.examples = [1.66, 1.94, 1.82]

    def super_cast(self, val):
        try:
            val = float(val)
            if val >= 0:
                return val
            else:
                raise ValueError('Invalid feed efficiency')
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
treatmentduration,"class treatmentduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of treatment'
        self.format = 'Treatment duration should be formatted as a string'
        self.examples = ['4 weeks', '6 weeks', 'control', '4 weeks', '6 weeks']

    def super_cast(self, val):
        if val not in ['4 weeks', '6 weeks', 'control']:
            raise Exception('Invalid treatment duration')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['4 weeks', '6 weeks', 'control']:
            return True
        else:
            return False"
treatmentnumber,"class treatmentnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Numerical representation of treatment duration'
        self.format = 'Treatment number should be represented as a floating point number'
        self.examples = [4.0, 0.0, 6.0, 4.0, 6.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= 6:
            return True
        else:
            return False"
mineswithcocoon,"class mineswithcocoon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of mines with cocoon'
        self.format = 'Number of mines with cocoon should be represented as a floating point number'
        self.examples = [0.0, 6.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value. Expected a float or an integer.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
mineslengthwithcocoon,"class mineslengthwithcocoon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total length of mines with cocoon'
        self.format = 'Total length of mines with cocoon should be represented as a floating point number'
        self.examples = [0.0, 41.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('inf'):
            return True
        else:
            return False"
mineswithoutcocoon,"class mineswithoutcocoon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of mines without cocoon'
        self.format = 'Floating point number'
        self.examples = [0.0, 36.0, 0.0, 0.0, 1.0]

    def super_cast(self, val):
        try:
            # Try to convert the value into a float
            return float(val)
        except ValueError:
            # If the value cannot be converted into a float, return None
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the value is within the valid range
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
mineslengthwithoutcocoon,"class mineslengthwithoutcocoon(GeneralSemanticType):
    def __init__(self):
        self.description = 'Total length of mines without cocoon'
        self.format = 'Total length of mines without cocoon should be represented as a floating point number'
        self.examples = [0.0, 101.0, 0.0, 0.0, 4.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
deadlarvae,"class deadlarvae(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Number of dead larvae'
        self.format: str = 'Floating point number'
        self.examples: list = [0.0, 8.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            val = float(val)
            if val < 0 or math.isnan(val):
                raise ValueError
        except Exception:
            raise ValueError(""Invalid input for dead larvae"")
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
othercauses,"class othercauses(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of larvae killed by other causes'
        self.format = 'Number of larvae killed by other causes should be represented as a floating point number'
        self.examples = [0.0, 4.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return float(val)
        except ValueError:
            raise Exception(""Value must be castable to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
totalmines,"class totalmines(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of mines'
        self.format = 'Floating point number'
        self.examples = [0.0, 36.0, 0.0, 0.0, 1.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
combine,"class combine(GeneralSemanticType):
    def __init__(self):
        self.description = 'Combined measure'
        self.format = 'Floating point number'
        self.examples = [0.0, 11.0, 0.0, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Unable to convert to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
scientificvalue,"class scientificvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A scientific value'
        self.format = 'a float number'
        self.examples = [20.45, 20.76, 20.9, 20.93, 19.73]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Cannot cast the value to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
normalizedvalue,"class normalizedvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'A normalized scientific value, typically a result from an experiment or observation'
        self.format = 'Normalized values should be stored as floating point numbers within the range [0,1]'
        self.examples = [0.2573655641069742, 0.364, 0.7, 1.0, 1.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if 0 <= float_val <= 1:
                return float_val
            else:
                return np.nan
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
experimentnumber,"class experimentnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of the experiment'
        self.format = 'Roman numerals'
        self.examples = ['I', 'II', 'III', 'IV', 'V']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
accessionnumber,"class accessionnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Accession number of the banana cultivar'
        self.format = 'ITCXXXX'
        self.examples = ['ITC0643', 'ITC0123', 'ITC1483', 'ITC1122', 'ITC0767']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = r'^ITC\d{4}$'
        if re.match(pattern, casted_val):
            return True
        else:
            return False"
accessionname,"class accessionname(GeneralSemanticType):
    def __init__(self):
        self.description = ""The name of the banana cultivar""
        self.format = ""String""
        self.examples = ['Cachaco', 'Simili Radjah', 'Monthan', 'Gros Michel', 'Dole']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
rootfreshmassmeasgco3250000907,"class rootfreshmassmeasgco3250000907(GeneralSemanticType):
    def __init__(self):
        self.description = 'The root fresh mass measurement'
        self.format = 'Floating point number'
        self.examples = [12.51527402, 12.60126126, 9.313506796, 19.52970107, 14.94755625]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0.809236499 <= casted_val <= 32.89092667"
dateofinfestation,"class dateofinfestation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date of infestation represented as a floating-point number'
        self.format = 'Dates should be in the Excel date format, which is the number of days since January 1, 1900'
        self.examples = [42965.685, 42962.0, 42968.0, 42972.0, 42963.0]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return pd.to_datetime(val, origin='1900-01-01', unit='D')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, pd.Timestamp) and not pd.isnull(casted_val):
            return True
        else:
            return False"
choiceornotchoice,"class choiceornotchoice(GeneralSemanticType):
    def __init__(self):
        self.description = ""A choice or not choice""
        self.format = ""In original format as a string""
        self.examples = ['Choix', 'Nn choix', 'Choix', 'Nn choix', 'Choix']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Choix', 'Nn choix']:
            return True
        else:
            return False"
traitcode,"class traitcode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Trait code'
        self.format = 'Trait codes should be either 1.0 or 2.0'
        self.examples = [1.0, 2.0, 1.0, 2.0, 1.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
typeofeggs,"class typeofeggs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of eggs'
        self.format = ""Egg types should be one of the following: 'MEM', 'Coniesta', 'Harmigera', 'Corcyra'""
        self.examples = ['MEM', 'Coniesta', 'Harmigera', 'Corcyra']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['mem', 'coniesta', 'harmigera', 'corcyra']:
            return True
        else:
            return False"
typeeggscode,"class typeeggscode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of eggs code'
        self.format = 'Floating-point number'
        self.examples = [1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0, 3.0, 4.0]:
            return True
        else:
            return False"
eggs,"class eggs(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of eggs'
        self.format = 'Number of eggs should be represented as a floating-point number'
        self.examples = [0.0, 5.0, 10.0, 15.0, 20.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return ""Cannot cast value to float""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
totalofeggs,"class totalofeggs(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total number of eggs'
        self.format = 'Total number of eggs should be represented as a floating-point number'
        self.examples = [7.0, 27.0, 30.0, 50.0, 103.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid input, expected a numeric value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not math.isnan(casted_val):
            return True
        else:
            return False"
serialnumber,"class serialnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Serial Numbers'
        self.format = 'Serial Numbers must be formatted as strings'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        if isinstance(val, float) and np.isnan(val):
            return 'nan'
        else:
            return str(int(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit() or casted_val == 'nan':
            return True
        else:
            return False"
planttaxon,"class planttaxon(GeneralSemanticType):

    def __init__(self):
        self.description = 'Taxonomic classification of a plant'
        self.format = ""Scientific name of the plant species, typically in Latin, in the form 'Genus_species'""
        self.examples = ['Cucurbita_palmata', 'Cucurbita_digitata', 'Cucurbita_cordata', 'Cucurbita_palmata', 'Cucurbita_digitata']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[A-Za-z]+_[A-Za-z]+$', casted_val):
            return True
        else:
            return False"
planttype,"
class planttype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Type of plant""
        self.format = ""Single upper-case letter""
        self.examples = ['H', 'G', 'H', 'G', 'H']

    def super_cast(self, val):
        if str(val) in ['H', 'G']:
            return str(val)
        else:
            raise Exception('Invalid Plant Type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['H', 'G']:
            return True
        else:
            return False"
replicate,"class replicate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Replicate identifier'
        self.format = 'Replicate must be a string'
        self.examples = ['R1', 'R2', 'R3', 'R4']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['R1', 'R2', 'R3', 'R4']:
            return True
        else:
            return False"
rootstock,"class rootstock(GeneralSemanticType):
    def __init__(self):
        self.description = ""Rootstock type""
        self.format = ""String representation""
        self.examples = ['Non-grafted', 'EG59EW', 'EG190', 'Local EG', 'Other']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
rootstockvariety,"class rootstockvariety(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rootstock variety'
        self.format = 'String representation of rootstock variety'
        self.examples = ['No rootstock', 'Eggplant 59 F1 East West Seed', 'Eggplant 190', 'Local eggplant', 'Mango']
        
    def super_cast(self, val):
        return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
tomatovariety,"class tomatovariety(GeneralSemanticType):

    def __init__(self):
        self.description = 'Tomato variety'
        self.format = 'A string'
        self.examples = ['Yolanum lycopersicum', 'Solanum lycopersicum', 'Cherry Tomato', 'Beefsteak Tomato', 'Roma Tomato']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
height,"class height(GeneralSemanticType):

    def __init__(self):
        self.description = 'The height of a person or a plant'
        self.format = 'Height should be a non-negative floating point number'
        self.examples = [150.0, 160.0, 170.0, 180.0, 190.0]

    def super_cast(self, val):
        return round(float(val), 1)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
branchnumber,"class branchnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'The number of branches of a plant'
        self.format = 'An integer number'
        self.examples = [8, 0, 15, 6, 10]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
yieldweight,"class yieldweight(GeneralSemanticType):

    def __init__(self):
        self.description = 'The yield weight in kg/ha of an entity'
        self.format = 'Yield weight should be formatted as a floating point number (in kg/ha units)'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not pd.isnull(casted_val):
            return True
        else:
            return False"
plantstatus,"class plantstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""The status of a plant""
        self.format = ""A boolean value represented as a string""
        self.examples = ['True', 'False', 'True', 'False', 'True']

    def super_cast(self, val):
        if isinstance(val, str):
            if val.lower() == 'alive':
                return 'True'
            elif val.lower() == 'dead':
                return 'False'
            else:
                return 'False'
        else:
            return str(bool(val)).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['True', 'False']:
            return True
        else:
            return False"
datestamp,"class datestamp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date'
        self.format = ""Date should be in the form 'yymmdd'""
        self.examples = ['42990', '42991', '42992', '42993', '42994']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^\d{6}$', casted_val):
            return True
        else:
            return False"
electricalcurrent,"class electricalcurrent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Electrical Current'
        self.format = 'Electrical Current should be a floating point number (in Ampere units)'
        self.examples = [0.19, 0.18, 0.2, 3.06, 3.09]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
doorstate,"class doorstate(GeneralSemanticType):
    def __init__(self):
        self.description = ""A door state""
        self.format = ""In upper-case and as a string""
        self.examples = ['OPEN', 'CLOSE', 'OPEN', 'CLOSE', 'OPEN']

    def super_cast(self, val):
        str_val = str(val).upper()
        if str_val in ['OPEN', 'CLOSE']:
            return str_val
        else:
            raise Exception('Invalid door state')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['OPEN', 'CLOSE']:
            return True
        else:
            return False"
eggscollected,"class eggscollected(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of eggs collected'
        self.format = 'Integer'
        self.examples = [350, 545, 740, 416, 145]

    def super_cast(self, val):
        try:
            return int(round(float(val)))
        except Exception:
            raise ValueError(""Invalid value for eggs collected"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
trichoemerged,"class trichoemerged(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Tricho emerged'
        self.format = 'Integer'
        self.examples = [15, 20, 35, 15, 17]

    def super_cast(self, val):
        return int(round(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
eggsparasitized,"class eggsparasitized(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of eggs parasitized'
        self.format = 'Number of eggs parasitized should be formatted as an integer'
        self.examples = [62, 106, 151, 74, 26]

    def super_cast(self, val):
        return int(round(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
episobserved,"class episobserved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of Epi observed'
        self.format = 'Number of Epi observed should be formatted as an integer'
        self.examples = [100, 100, 100, 125, 125]

    def super_cast(self, val):
        try:
            return int(round(float(val)))
        except ValueError:
            raise Exception(""Invalid value. Expected a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise Exception(""Invalid value. Expected an integer greater than or equal to 0"")
        return True"
infestationrate,"class infestationrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rate of infestation'
        self.format = 'Infestation rate should be formatted as a floating point number with two decimal places for percentage'
        self.examples = [28.0, 30.0, 31.0, 40.0, 28.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
datetimeutc,"class datetimeutc(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date and Time in UTC'
        self.format = 'Date and Time should be in UTC stored as float'
        self.examples = [43450.81400462963, 43450.90672453704, 43450.90743055556, 43450.908101851855, 43450.90880787037]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Unable to cast {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            raise Exception(f""The value {casted_val} is not a valid datetime representation"")
        return True"
sitesinglevalue,"class sitesinglevalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'Site Name'
        self.format = 'Site name should be a string'
        self.examples = ['THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
personname,"class personname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Person'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Buitrago Rubira, Beatriz', 'Navarro Bonilla, Diego', 'López Guillamón, Ignacio', 'Agustí Ruiz, Lluis', 'Acal Díaz, Inmaculada']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and all(word[0].isupper() for word in casted_val.split() if word):
            return True
        else:
            return False"
binarylink,"class binarylink(GeneralSemanticType):
    def __init__(self):
        self.description = ""A binary link""
        self.format = ""In float format""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]
        
    def super_cast(self, val):
        if isinstance(val, (int, float)) and val in [0.0, 1.0]:
            return float(val)
        else:
            raise Exception('Invalid value for Binary Link')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
datetimestring,"class datetimestring(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date values'
        self.format = ""Dates should be stored as strings in the format 'dd-mm-yyyy' or 'before dd-mm'""
        self.examples = ['40579', '40580', '40581', '2, 5, 6-Feb', 'before 7 Feb']

    def super_cast(self, val):
        if re.match('^before', val):
            val = val.split(' ')[1]
            val = datetime.strptime(val, '%d-%b').strftime('%d-%m')
            return 'before ' + val
        elif re.match('^[0-9]{5}$', val):
            return pd.to_datetime(val, format='%Y%j').strftime('%d-%m-%Y')
        elif re.match('^([0-9]{1,2},\\s*)+[0-9]{1,2}-[A-Za-z]{3}$', val):
            dates = val.split(', ')
            dates = [datetime.strptime(date, '%d-%b').strftime('%d-%m') for date in dates]
            return ', '.join(dates)
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^before [0-9]{2}-[0-9]{2}$', casted_val):
            return True
        elif re.match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$', casted_val):
            return True
        elif re.match('^([0-9]{2}-[0-9]{2},\\s*)+[0-9]{2}-[0-9]{2}$', casted_val):
            return True
        else:
            return False"
weekday,"class weekday(GeneralSemanticType):
    def __init__(self):
        self.description = ""A weekday""
        self.format = ""In numeric form""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value for weekday')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
loyal,"class loyal(GeneralSemanticType):
    def __init__(self):
        self.description = ""Loyalty status""
        self.format = ""integer with values 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise ValueError(""Invalid value for loyal"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
grossincome,"class grossincome(GeneralSemanticType):
    def __init__(self):
        self.description = 'Gross income of an individual'
        self.format = 'Income should be formatted as a floating point number'
        self.examples = [44.092438, 69.65735, 44.730003, 63.10961, 44.092438]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value. It cannot be converted to a floating point number."")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val != np.inf:
            return True
        else:
            return False"
traderank,"class traderank(GeneralSemanticType):
    def __init__(self):
        self.description = ""Rank of a trader""
        self.format = ""Rank should be a whole number""
        self.examples = [8.0, 13.0, 13.0, 15.0, 7.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and not math.isnan(val):
            return int(val)
        else:
            raise ValueError(f""Invalid value {val}, it should be a numeric value."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 26:
            return True
        else:
            return False"
newrank,"class newrank(GeneralSemanticType):
    def __init__(self):
        self.description = 'Rank of a new commodity'
        self.format = 'Rank should be a whole number in float representation'
        self.examples = [17.0, 21.0, 13.0, 16.0, 13.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid value. The value should be a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 1 <= casted_val <= 25:
            raise Exception('Invalid value. The value should be in the range [1, 25]')
        else:
            return True"
newusedalt,"class newusedalt(GeneralSemanticType):
    def __init__(self):
        self.description = ""Indicates if an item is new or used""
        self.format = ""An integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val not in [0, 1]:
            raise ValueError('Invalid value for newusedalt')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
paymenttype1,"class paymenttype(GeneralSemanticType):
    def __init__(self):
        self.description = ""Payment type""
        self.format = ""integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val not in [0, 1]:
            raise ValueError('Invalid value for payment type')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
newused1xloyal,"class newused1xloyal(GeneralSemanticType):

    def __init__(self):
        self.description = ""A flag indicating whether a customer is new or a repeat customer""
        self.format = ""Boolean represented as integers 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if val in [0, 1]:
            return int(val)
        else:
            raise ValueError('Invalid value for newused1xloyal')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
newpricelge,"class newpricelge(GeneralSemanticType):
    def __init__(self):
        self.description = 'Price of a new commodity'
        self.format = 'Price should be formatted as a floating point number'
        self.examples = [27.0, 44.96, 32.0, 32.5, 13.495]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isfinite(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
tradepaymentlge,"class tradepaymentlge(GeneralSemanticType):

    def __init__(self):
        self.description = 'Trade payment'
        self.format = 'Payment should be formatted as a floating point number'
        self.examples = [5.15, 6.15, 13.75, 5.35, 2.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Can't convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
paperidentifier,"class paperidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a paper'
        self.format = ""ID should be of the form 'rayyan-#######'""
        self.examples = ['rayyan-72425496', 'rayyan-72425497', 'rayyan-72425499', 'rayyan-72425500', 'rayyan-72425501']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^rayyan-\d+$"", casted_val):
            return True
        else:
            return False"
issn,"class issn(GeneralSemanticType):
    def __init__(self):
        self.description = 'International Standard Serial Number (ISSN) of the journal where the paper was published'
        self.format = ""ISSN should be of the form '####-####'""
        self.examples = ['0959-6526', '0020-7543', '0964-4733', '1532-9194', '2345-0282']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).replace('-', '')
        if len(val) != 8:
            return float('nan')
        return val[:4] + '-' + val[4:]

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == float('nan'):
            return False
        if re.fullmatch(r'\d{4}-\d{4}', casted_val):
            return True
        else:
            return False"
volume,"class volume(GeneralSemanticType):
    def __init__(self):
        self.description = ""The volume of a particular object""
        self.format = ""Volume should be a floating point number with one decimal place""
        self.examples = [1164.7, 795.0, 10719.5, 2220.5, 107.0]

    def super_cast(self, val):
        if isinstance(val, float):
            return round(val, 1)
        elif isinstance(val, int):
            return float(val)
        else:
            raise ValueError(""Invalid input type. Value should be int or float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0 <= casted_val < float('inf'):
            return True
        else:
            return False"
logvalue,"class logvalue(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Logarithmic value'
        self.format: str = 'Logarithmic value as float'
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]
        
    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            return 'Value cannot be cast to float'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return False
        else:
            return float('-inf') <= casted_val <= float('inf')"
dealtype,"class dealtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of deal in a transaction'
        self.format = 'Deal type should be a number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Could not convert value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
industrytype,"
class industrytype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of industry'
        self.format = 'Industry type should be a number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return ""Invalid value""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 13:
            return True
        else:
            return False"
industryyear,"class industryyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'A particular year in an industry'
        self.format = 'Year should be a number'
        self.examples = [1.0, 50.0, 100.0, 150.0, 200.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value, can't be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1 <= casted_val < float('inf'):
            return True
        else:
            return False"
date,"class date(GeneralSemanticType):
    def __init__(self):
        self.description = ""A date""
        self.format = ""String in the format 'YYYY-MM-DD'""
        self.examples = ['1862-09-02', '1862-09-28', '1862-07-01', '1862-08-19', '1862-08-12']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%d/%m/%y').strftime('%Y-%m-%d')
            except ValueError:
                try:
                    return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')
                except ValueError:
                    return None
        elif isinstance(val, int) or isinstance(val, float):
            try:
                return datetime.strptime(str(int(val)), '%Y%m%d').strftime('%Y-%m-%d')
            except ValueError:
                try:
                    return pd.to_datetime(val, origin='1899-12-30', unit='D').strftime('%Y-%m-%d')
                except ValueError:
                    return None
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            try:
                datetime.strptime(casted_val, '%Y-%m-%d')
                return True
            except ValueError:
                return False"
weathercondition,"class weathercondition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weather condition during bird monitoring'
        self.format = 'Weather condition should be a capitalized string'
        self.examples = ['Sunny', 'Warm', 'Windy', 'Warm', 'Warm']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Sunny', 'Warm', 'Windy']:
            return True
        else:
            return False"
food,"class food(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of food'
        self.format = 'The name of the food should be capitalized'
        self.examples = ['Mercimek', 'Diger', 'Ezogelin', 'Sebze', 'Domates']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
foodtype,"class foodtype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of food'
        self.format = 'The name of the food type should be capitalized'
        self.examples = ['Meat', 'Chicken', 'Fish', 'None', 'Sandwich']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Meat', 'Chicken', 'Fish', 'None', 'Sandwich']:
            return True
        else:
            return False"
foodconsumption,"class foodconsumption(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of food consumption'
        self.format = 'Values should be integers'
        self.examples: list = [3513, 3746, 3201, 3548, 4523]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
ratingscale,"class ratingscale(GeneralSemanticType):
    def __init__(self):
        self.description = ""A rating scale that ranges from 1 to 5""
        self.format = ""Ratings should be integer values ranging from 1 to 5""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if 1 <= num <= 5:
                return num
            else:
                raise ValueError
        except ValueError:
            return 'Invalid rating'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
foundation,"class foundation(GeneralSemanticType):
    def __init__(self):
        self.description = ""Foundation""
        self.format = ""Foundation names should be capitalized""
        self.examples = [""Association Pour La Fondation Pour L'Europe Des Libertes Et De La Democratie"", 'Centre For European Studies', 'Centre Maurits Coppieters', 'Christian Political Foundation For Europe', 'European Foundation For Freedom']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
datasetidentifier,"class datasetidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Dataset ID'
        self.format = 'Dataset ID should be represented as an integer'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
fbaccount,"class fbaccount(GeneralSemanticType):

    def __init__(self):
        self.description = ""Facebook account status""
        self.format = ""integer (0 or 1)""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False
"
fbbidentifier,"class fbbidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Facebook bid amount'
        self.format = 'Facebook bid amount should be formatted as a floating point number'
        self.examples = [10.0, 100.0, 500.0, 50000.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
noffbaccounts,"class noffbaccounts(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Facebook accounts'
        self.format = 'Number of Facebook accounts should be formatted as a floating point number'
        self.examples = [1.0, 2.0, 13.0, 5.0, 10.0]

    def super_cast(self, val):
        try:
            return float(val)
        except:
            raise Exception(f'Value {val} can\'t be casted to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False
"
binaryresponse,"
class binaryresponse(GeneralSemanticType):
    def __init__(self):
        self.description = ""Binary response""
        self.format = ""Binary number as float""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, float) or isinstance(val, int):
            return float(val)
        elif val is None or math.isnan(val):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0, float('nan')]:
            return True
        else:
            return False"
b3sector,"class b3sector(GeneralSemanticType):
    def __init__(self):
        self.description = 'A numerical representation of a sector in a 3-level business classification'
        self.format = 'A number'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 10:
            raise Exception(""Value out of valid range"")
        return True"
assets,"class assets(GeneralSemanticType):
    def __init__(self):
        self.description = 'The total value of all assets owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
currentassets,"class assets(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of all assets owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False
"
cash,"class assets_cash(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of all assets or cash owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]
        
    def super_cast(self, val):
        return round(float(val), 2)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and np.isfinite(casted_val):
            return True
        else:
            return False"
accountreceivables,"
class financial(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of a specific financial aspect of a firm'
        self.format = 'Floating point number rounded to 2 decimal places with unit in USD'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            print(""The provided value cannot be converted to a float."")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
inventories,"
class assets(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of all assets owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 2)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
properties,"class assets(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'The total value of assets or properties owned by a firm'
        self.format = 'Floating point number in USD'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 2)
            return casted_val
        except ValueError:
            raise Exception(""Invalid input. It should be a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
intangibleassets,"class assets(GeneralSemanticType):
    def __init__(self):
        self.description = ""The total value of all assets owned by a firm, including both tangible and intangible assets""
        self.format = ""A floating point number in USD""
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
deferredassets,"class assets(GeneralSemanticType):
    def __init__(self):
        self.description = 'The total value of all assets owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]
    
    def super_cast(self, val):
        return round(float(val), 2)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not np.isnan(casted_val):
            return True
        else:
            return False"
ppe,"class assets(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of all assets owned by a firm'
        self.format = 'Assets should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid Value. Please input a numerical value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
currentliabilities,"class currentliabilities(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of all current liabilities (liabilities that are due within one year) of a firm'
        self.format = 'Current liabilities should be a floating point number'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid value. Value must be a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
std,"class std(GeneralSemanticType):

    def __init__(self):
        self.description = 'The standard deviation of a set of values'
        self.format = 'Standard deviation should be a floating point number'
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        elif isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        else:
            raise ValueError('Invalid input: expected a number, got {}'.format(type(val)))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
noncurrentassets,"class assets(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total value of assets owned by a firm'
        self.format = 'Assets should be a floating point number, in USD'
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid value for casting"")

        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val) or math.isinf(casted_val):
            raise Exception(""Invalid value after casting"")
        else:
            return True"
equity,"class equity(GeneralSemanticType):
    def __init__(self):
        self.description = ""The total equity of a firm""
        self.format = ""Equity should be a floating point number""
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        elif isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        else:
            raise ValueError(""Invalid value for equity"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
revenue,"class revenue(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total revenue earned by a firm'
        self.format = 'Revenue should be a floating point number'
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return np.nan
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            return True
        else:
            return False"
grossearnings,"class earnings(GeneralSemanticType):

    def __init__(self):
        self.description = 'The total earnings of a firm'
        self.format = 'In USD as a floating point number'
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val):
            return True
        else:
            return False"
depreciation,"class depreciation(GeneralSemanticType):

    def __init__(self):
        self.description = ""The total depreciation of a firm's assets""
        self.format = ""Depreciation should be a floating point number""
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            raise Exception(f""Failed to cast value {val} to float. Exception: {e}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            raise ValueError(f""Expected a float value, but got {type(casted_val)}"")
        elif casted_val < 0:
            raise ValueError(f""Depreciation cannot be negative, but got {casted_val}"")
        return True"
netincome,"class netincome(GeneralSemanticType):

    def __init__(self):
        self.description = 'The net income of a firm'
        self.format = 'Net income should be a floating point number'
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid value for net income"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False
"
cfo,"class cfo(GeneralSemanticType):

    def __init__(self):
        self.description = 'The cash flow from operations of a firm'
        self.format = 'Cash flow from operations should be a floating point number'
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid input. Expected a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
companyidentifier,"class companyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique Company Identifier'
        self.format = 'Company ID should be an integer'
        self.examples = [3, 3002, 6077, 8972, 12138]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Input cannot be converted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
fixedscore,"class fixedscore(GeneralSemanticType):

    def __init__(self):
        self.description = ""A fixed score""
        self.format = ""boolean""
        self.examples = [True, True, True, True, True]

    def super_cast(self, val):
        if val == 1:
            return True
        else:
            return False

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
gvkey,"
class gvkey(GeneralSemanticType):
    def __init__(self):
        self.description = 'Global Company Key (GVKEY)'
        self.format = 'GVKEY should be an integer'
        self.examples = [1004, 5492, 10115, 25124, 315318]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast value to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
railwaycompanyname,"class railwaycompanyname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of Railway Company'
        self.format = 'The company name should be capitalized'
        self.examples = ['Vale', 'Rio Tinto', 'Arcelor Mittal', 'BHP', 'FMG']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
railwayname,"class railwayname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of Railway'
        self.format = 'The railway name should be capitalized'
        self.examples = ['EFVM', 'EFC', 'NEWM', 'RTRR', 'RTHA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
usdollar,"class usdollar(GeneralSemanticType):

    def __init__(self):
        self.description = 'US dollar exchange rate'
        self.format = 'Exchange rate should be represented as a float'
        self.examples = [1.8215, 1.8912, 2.0217, 2.0207, 2.0494]

    def super_cast(self, val):
        if isinstance(val, str) and re.match(""^\d+?\.\d+?$"", val) is not None:
            return float(val)
        elif isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError('Cannot cast value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
indexvalue,"class indexvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index value'
        self.format = 'Index value should be represented as a float'
        self.examples = [164.42, 164.99, 163.05, 162.35, 160.56]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Cannot convert value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        return True"
timeperiod,"class timeperiod(GeneralSemanticType):
    def __init__(self):
        self.description = ""Time period related to the experiment or study""
        self.format = ""Time period should be an integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    
    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError('Time period cannot be negative')
            return int(casted_val)
        except ValueError:
            return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        elif isinstance(casted_val, str):
            return True
        else:
            return False"
groups,"class groups(GeneralSemanticType):
    def __init__(self):
        self.description = 'Groups'
        self.format = 'Groups are integers ranging from 1 to 3'
        self.examples = [1, 2, 3, 1, 2]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in [1, 2, 3]:
                return int_val
        except ValueError:
            raise Exception('Invalid group value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2, 3]:
            return True
        else:
            return False"
network,"class network(GeneralSemanticType):

    def __init__(self):
        self.description = 'Networking score'
        self.format = 'Networking score should be a float between 1 and 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 1 and float_val <= 5:
                return round(float_val, 1)
            else:
                raise ValueError('Invalid networking score')
        except ValueError:
            raise Exception('Invalid input, expecting a float between 1 and 5')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 1.0 and casted_val <= 5.0:
            return True
        else:
            return False
"
sumscore,"class sumscore(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sum of scores'
        self.format = 'Sum of scores should be a float'
        self.examples = [9.0, 12.0, 16.0, 8.0, 10.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return round(float_val, 1)
            else:
                raise ValueError
        except ValueError:
            raise Exception('Invalid sum of scores')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= float('inf'):
            return True
        else:
            return False"
declined,"class declined(GeneralSemanticType):
    def __init__(self):
        self.description = ""Declined status""
        self.format = ""A boolean integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Expected a boolean integer (0 or 1)"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
valueclient,"class valueclient(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value that the client brings to the business'
        self.format = 'Value should be a floating point number'
        self.examples = [16800.0, 10584.0, 15456.0, 5000.0, 30000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise ValueError(f""Value '{val}' cannot be converted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        elif casted_val < 0 or math.isinf(casted_val):
            return False
        return True"
extracost,"class extracost(GeneralSemanticType):
    def __init__(self):
        self.description = 'Extra costs incurred'
        self.format = 'Value should be a floating point number rounded to two decimal places'
        self.examples = [0.0, 50.0, 100.0, 200.0, 500.0]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
valueresources,"class valueresources(GeneralSemanticType):

    def __init__(self):
        self.description = 'Value of resources used'
        self.format = 'Value should be a floating point number'
        self.examples = [5000.0, 7896.0, 10080.0, 20000.0, 50000.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
net,"class net(GeneralSemanticType):
    def __init__(self):
        self.description = 'Net value'
        self.format = 'Floating point number rounded to two decimal places'
        self.examples = [0.0, 715.01, 2096.17, -34755.84, 25669.73]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid value. Value should be convertible to a floating point number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        return True"
processduration,"
class processduration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Duration of the process'
        self.format = 'Duration should be an integer'
        self.examples = [0, 6, 21, 100, 405]

    def super_cast(self, val):
        try:
            int_val = int(val)
            return int_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                return False
        else:
            return False"
daysoncontact,"class daysoncontact(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days on contact'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 5, 10, 15, 11]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Invalid value for casting!')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysoninterview,"class daysoninterview(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days on interview'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 2, 4, 6, 8]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysonsendcv,"class daysonsendcv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days on sending CV'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 5, 10, 15, 19]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysonreturn,"class daysonreturn(GeneralSemanticType):
    def __init__(self):
        self.description = ""Number of days on return""
        self.format = ""Integer value""
        self.examples = [0, 15, 30, 45, 75]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysoncschedule,"class daysoncschedule(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days on schedule'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 10, 20, 30, 71]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input. Expected an integer or a value that can be converted to an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysoncrealized,"class daysoncrealized(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days on realization'
        self.format = 'Number of days should be an integer, represented as an integer'
        self.examples = [0, 10, 20, 30, 74]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysonapproved,"class daysonapproved(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of days on approval'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 100, 200, 300, 1617]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot convert to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
daysonclosed,"class daysonclosed(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days on closure'
        self.format = 'Number of days should be an integer'
        self.examples = [0, 100, 200, 300, 1659]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""The value should be an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
firmsizeemp,"class firmsizeemp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Size of the firm by employee count'
        self.format = 'Firm size should be an integer value in the range [1, 3]'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1 or val > 3:
                raise ValueError('Invalid firm size')
            return val
        except ValueError as e:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 3:
            return True
        else:
            return False"
literacy,"class literacy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Literacy level'
        self.format = 'Integers ranging from 1 to 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        if isinstance(val, int) and (1 <= val <= 4):
            return val
        else:
            raise ValueError('Invalid literacy level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and (1 <= casted_val <= 4):
            return True
        else:
            return False"
firmsizeprofit,"class firmsizeprofit(GeneralSemanticType):
    def __init__(self):
        self.description = 'Size of the firm by profit'
        self.format = 'Firm size should be an integer value in the range [1, 5]'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if 1 <= val <= 5:
                return val
            else:
                raise ValueError('Value out of range')
        except ValueError:
            raise ValueError('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not 1 <= casted_val <= 5:
            raise ValueError('Value out of range')
        return True"
transaction,"class transaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Transaction level'
        self.format = 'Transaction level should be an integer value in the range [1, 5]'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 1 or val > 5:
                raise ValueError('Invalid transaction level')
            return val
        except Exception as e:
            print(""Error:"", str(e))
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
eco,"
class eco(GeneralSemanticType):
    def __init__(self):
        self.description = 'Economic level'
        self.format = 'Economic level should be an integer value in the range [2, 5]'
        self.examples = [2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 2 <= casted_val <= 5:
                return casted_val
            else:
                raise ValueError(""Value out of range"")
        except ValueError:
            raise ValueError(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 2 <= casted_val <= 5:
            return True
        else:
            return False"
survival,"class survival(GeneralSemanticType):

    def __init__(self):
        self.description = 'Survival level'
        self.format = 'Survival level should be an integer value in the range [1, 5]'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 1 <= int_val <= 5:
                return int_val
        except ValueError:
            raise ValueError('Invalid survival level')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
sumtransaction,"
class sumtransaction(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sum of transaction levels'
        self.format = 'Sum of transaction levels should be an integer value in the range [8, 20]'
        self.examples = [8, 10, 12, 15, 20]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 8 or val > 20:
                raise ValueError('Invalid sum of transaction levels')
            return val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
sumeco,"class sumeco(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sum of economic levels'
        self.format = 'integer in the range of 12 to 20'
        self.examples = [12, 14, 15, 18, 20]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 12 or val > 20:
                raise ValueError('Invalid sum of economic levels')
            return val
        except ValueError:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 12 <= casted_val <= 20:
            return True
        else:
            return False"
sumsurv,"class sumsurv(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sum of survival levels'
        self.format = 'Sum of survival levels should be an integer value in the range [3, 15]'
        self.examples = [3, 5, 7, 10, 15]

    def super_cast(self, val):
        try:
            val = int(val)
            if 3 <= val <= 15:
                return val
            else:
                return 'Invalid'
        except ValueError:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid':
            return False
        else:
            return True"
businesscategory,"class businesscategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Business Category of a Firm'
        self.format = 'Integer representation'
        self.examples = [1, 2]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        return casted_val in self.examples"
respondentgender,"
class respondentgender(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gender of the respondent'
        self.format = 'Gender should be represented as strings: ""male"", ""female"", ""unknown""'
        self.examples = ['male', 'female', 'unknown', 'male', 'female']

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val == 1:
                return 'male'
            elif int_val == 2:
                return 'female'
            else:
                return 'unknown'
        except ValueError:
            return 'unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female', 'unknown']:
            return True
        else:
            return False"
employeesize,"class employeesize(GeneralSemanticType):
    def __init__(self):
        self.description = 'Size of the firm in terms of number of employees'
        self.format = 'Employee size should be represented as integers'
        self.examples = [1, 2, 3]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if int_val in self.examples:
                return int_val
            else:
                return float('nan')
        except Exception:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return False
        else:
            return True"
respondenteducation,"class respondenteducation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Education level of the respondent'
        self.format = 'Education level should be represented as float'
        self.examples = [1.0, 2.0, 3.0, 4.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if 1.0 <= num <= 4.0:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 1.0 <= casted_val <= 4.0"
profitlevel,"
class profitlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Profit level of the firm'
        self.format = 'Profit level should be represented as integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and val in self.examples:
            return val
        elif isinstance(val, str) and val.isdigit() and int(val) in self.examples:
            return int(val)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
hedgetc,"class hedgetc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hedging level of the firm'
        self.format = 'Hedging level should be represented as integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if 1 <= num <= 5:
                return num
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif 1 <= casted_val <= 5:
            return True
        else:
            return False"
hedgets,"class hedgets(GeneralSemanticType):
    def __init__(self):
        self.description = 'Hedging level of the firm'
        self.format = 'Hedging level should be represented as integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 5:
            return True
        else:
            return False"
hedgee,"class hedgee(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hedging level of the firm'
        self.format = 'Hedging level should be represented as integer'
        self.examples = [2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        else:
            return 2 <= casted_val <= 5"
firm,"class firm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of the firm'
        self.format = 'Firm level should be represented as integer'
        self.examples = [3, 4, 5, 6, 15]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 3 <= casted_val <= 15:
            return True
        else:
            return False"
responseidentifier,"class responseidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique identifier for each response'
        self.format = 'Response ID should be a string'
        self.examples = ['R_6W45lMJvb9leVWR', 'R_4Sj2AMAUcAJXmT3', 'R_0iY78w9Ae2yqXzL', 'R_aWTmKr3M6FMONeJ', 'R_8uGm24XgkXLStQV']

    def super_cast(self, val):
        # As the cast function in the given class returns the string format of the input value,
        # we just need to convert the input value to a string format.
        return str(val)

    def validate(self, val):
        # The cast function in the given class does not have any restrictions on the format of the input value.
        # So, we just need to check if the casted value is a string.
        casted_val = self.super_cast(val)
        return isinstance(casted_val, str)"
decision,"
class decision(GeneralSemanticType):

    def __init__(self):
        self.description = 'The decision made by the individual'
        self.format = 'Decision values should be an integer'
        self.examples = [7, 2, 6, 6, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except:
            raise Exception('Value cannot be casted to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 666:
            return True
        else:
            return False"
stresslevel,"
class stresslevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of stress experienced by the individual'
        self.format = 'Stress level should be an integer between 1 and 7'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
        except Exception as e:
            raise Exception(f""Value '{val}' can't be casted to int"") from e

        if casted_val < 1 or casted_val > 7:
            raise Exception(f""Casted value '{casted_val}' is outside of the valid range [1, 7]"")
        
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)

        if casted_val < 1 or casted_val > 7:
            return False
        else:
            return True"
verbatim,"class verbatim(GeneralSemanticType):

    def __init__(self):
        self.description = 'Verbatim response'
        self.format = 'The response should be a string'
        self.examples = ['1', '0', '?']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '0', '?']:
            return True
        else:
            return False"
gist,"class gist(GeneralSemanticType):
    def __init__(self):
        self.description = 'The gist of the response'
        self.format = 'Gist should be an integer, either 0 or 1'
        self.examples = [0, 1, 0, 1, 0]
        
    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast value to integer"")
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
holism,"class holism(GeneralSemanticType):
    def __init__(self):
        self.description = 'Holism score of the individual'
        self.format = 'Holism score should be a float between 2.5 and 6.9'
        self.examples = [5.1, 5.8, 5.5, 5.4, 5.4]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            raise ValueError(""Cannot cast to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 2.5 <= casted_val <= 6.9:
            return True
        else:
            return False"
birthyear,"class birthyear(GeneralSemanticType):
    def __init__(self):
        self.description = ""The birth year of a person""
        self.format = ""Birth year should be a four digit integer""
        self.examples = [1980, 1990, 2000, 2010, 2020]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val < 1900 or val > datetime.now().year:
            raise Exception('Invalid birth year')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1900 or casted_val > datetime.now().year:
            return False
        else:
            return True"
assetsusd,"class assetsusd(GeneralSemanticType):
    def __init__(self):
        self.description = 'The value of assets in USD'
        self.format = 'Asset value should be formatted as a floating point number (in USD units) with two decimal places for cents'
        self.examples = [15.0, 160.0, 600.0, 1900.0, 24400.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception(""Invalid value for conversion"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
log10assets,"class log10assets(GeneralSemanticType):

    def __init__(self):
        self.description = 'Logarithm of asset value base 10'
        self.format = 'Logarithm value must be a positive floating point number'
        self.examples = [1.1760912590556811, 2.204, 2.778, 3.279, 4.491361693834273]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise ValueError(""Invalid log10assets value"")
            return num
        except ValueError:
            raise ValueError(""Invalid log10assets value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
opinionleadership,"class opinionleadership(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the opinion leadership score for an individual'
        self.format = 'Opinion Leadership is represented as an integer ranging from 1 to 7'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 7:
            return val
        elif isinstance(val, str) and val.isdigit():
            val = int(val)
            if 1 <= val <= 7:
                return val
        else:
            raise ValueError('Invalid input for Opinion Leadership')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
quantitypurchased,"
class quantitypurchased(GeneralSemanticType):

    def __init__(self):
        self.description = 'Represents the quantity of a product purchased by an individual'
        self.format = 'Quantity Purchased is represented as an integer'
        self.examples = [0, 1, 2, 3, 15]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if 0 <= casted_val:
                return casted_val
            else:
                raise ValueError('Invalid Quantity Purchased value')
        except ValueError:
            raise ValueError('Invalid Quantity Purchased value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val:
            return True
        else:
            return False"
marketcapital,"class marketcapital(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market Capital'
        self.format = 'Market Capital should be a floating point number'
        self.examples = [293352000.0, 409830000.0, 430976000.0, 578088000.0, 703545000.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(""Invalid value. Value must be a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 18900000.0:
            return True
        else:
            return False"
studycode,"class studycode(GeneralSemanticType):

    def __init__(self):
        self.description = 'The unique code representing a study'
        self.format = 'Study codes should be uppercase strings'
        self.examples = ['NO_TO', 'UK_CA', 'US_BO', 'DE_FR', 'FR_PA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Z]{2}_[A-Z]{2}$"", casted_val):
            return True
        else:
            return False"
valuecount,"class valuecount(GeneralSemanticType):
    def __init__(self):
        self.description = ""The count of a value in a study""
        self.format = ""Value counts should be non-negative floating point numbers""
        self.examples = [22.0, 49.0, 146.0, 31.0, 57.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                return float('nan')
        except Exception as e:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
studydetails,"class studydetails(GeneralSemanticType):

    def __init__(self):
        self.description = 'Detailed description of a study'
        self.format = ""Study details should be strings with the format 'Name; Year; Field'""
        self.examples = ['Besada; 2013 and 2014; Rheumatology', 'Alberici; 2014; Rheumatology', 'Pendergraft; 2014; Clin J Am Soc Nephrol', 'Venhoff;2014; Autoimmunity', 'Calich; 2014; Autoimmunity']

    def super_cast(self, val):
        details = str(val).split(';')
        if len(details) != 3:
            return float('nan')
        else:
            return ';'.join([details[0].strip(), details[1].strip(), details[2].strip()])

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val.split(';')) == 3:
            return True
        else:
            return False"
marketcapitalization,"class marketcapitalization(GeneralSemanticType):

    def __init__(self):
        self.description = 'Market Capitalization of a company'
        self.format = 'float in USD'
        self.examples = [13307539.0, 12852519.75, 18088731.5, 30465232.0, 37303933.04]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value for market capitalization. Expected a number, got: "", val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
profitlossindicator,"class profitlossindicator(GeneralSemanticType):
    def __init__(self):
        self.description = ""A profit or loss indicator""
        self.format = ""Integer, either 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
ccc,"class ccc(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ccc'
        self.format = 'Ccc should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]
        
    def super_cast(self, val):
        num = int(val)
        if num in range(1, 6):
            return num
        else:
            raise Exception('Invalid ccc')
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 6):
            return True
        else:
            return False"
participantgroup,"class participantgroup(GeneralSemanticType):
    def __init__(self):
        self.description = 'Participant Group'
        self.format = 'String of a float number'
        self.examples = ['1.0', '2.0', '1.0', '2.0', '1.0']
        
    def super_cast(self, val):
        if isinstance(val, str) and val in ['1.0', '2.0']:
            return val
        else:
            raise Exception('Invalid participantgroup')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1.0', '2.0']:
            return True
        else:
            return False"
cityofbirth,"class cityofbirth(GeneralSemanticType):
    def __init__(self):
        self.description = 'City of Birth'
        self.format = 'The city of birth should be a string'
        self.examples = ['São Paulo', 'Santos', 'Curitiba', 'Rio de Janeiro', 'Sao Paulo']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
stateofbirth,"class stateofbirth(GeneralSemanticType):
    def __init__(self):
        self.description = 'State of Birth'
        self.format = 'The state of birth should be a string'
        self.examples = ['São Paulo', 'Rio de Janeiro', 'Minas Gerais', 'Rio Grande do Sul', 'Paraná']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
completededucationlevel,"class completededucationlevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Completed Education Level'
        self.format = 'The completed education level should be a string'
        self.examples = ['Universitário Incompleto', 'Ensino Médio', 'Universitário Completo', 'Pós-Graduação', 'Mestrado']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
maritalstatus,"class maritalstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""Marital status of a person""
        self.format = ""All letters should be in lower case""
        self.examples = ['married', 'widowed', 'divorced', 'single', ' ']

    def super_cast(self, val):
        if isinstance(val, float) and val in [0.0, 1.0]:
            if val == 1.0:
                return 'married'
            else:
                return 'single'
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['married', 'widowed', 'divorced', 'single', ' ']:
            return True
        else:
            return False"
sportpracticed,"class sportpracticed(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sport Practiced'
        self.format = 'The sport practiced should be a string'
        self.examples = ['Voleibol', 'Football', 'Basketball', 'Tennis', 'Cricket']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
sportpracticestatus,"class sportpracticestatus(GeneralSemanticType):

    def __init__(self):
        self.description = ""The status of sport practice""
        self.format = ""In lower-case and as a string""
        self.examples = ['sim', 'não', 'sim', 'não', 'sim']

    def super_cast(self, val):
        if isinstance(val, str) and val in ['sim', 'não']:
            return str(val)
        else:
            return 'Invalid sportpracticestatus'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['sim', 'não']:
            return True
        else:
            return False"
professionalizedstatus,"class professionalizedstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""Professionalized status""
        self.format = ""String with either 'sim' or empty space""
        self.examples = ['sim', ' ', 'sim', 'sim', ' ']

    def super_cast(self, val):
        if val in ['sim', ' ']:
            return str(val)
        else:
            raise Exception('Invalid professionalizedstatus')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['sim', ' ']:
            return True
        else:
            return False"
stoppedcompetingstatus,"class stoppedcompetingstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""The status of competition""
        self.format = ""In lower-case and as a string""
        self.examples = ['sim', 'não', ' ']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['sim', 'não', ' ']:
            return True
        else:
            return False"
firstforeignclubcountry,"class firstforeignclubcountry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Country of the first foreign club that the player played for'
        self.format = 'The country should be a string in title case'
        self.examples = ['Portugal', 'Espanha', 'Suíça', 'Libano', 'Usa']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
transferreason,"class transferreason(GeneralSemanticType):
	def __init__(self):
		self.description: str = 'Reason for player transfer' 
		self.format: str = 'The reason for player transfer should be a string' 
		self.examples: list = ['Estava sem clube e fui contratado', 'Comprado', 'Estudo', 'Empréstimo', 'Proposta interessante']

	def super_cast(self, val): 
		return str(val).title()
		
	def validate(self, val):
		casted_val = self.super_cast(val)
		if isinstance(casted_val, str):
			return True
		else:
			return False"
currentclubcountry,"class currentclubcountry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Country of the current club that the player plays for'
        self.format = 'The country should be a string in title case'
        self.examples = ['Portugal', 'Líbano', 'França', 'Usa', 'Belgica']
        
    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
transferfeeling,"class transferfeeling(GeneralSemanticType):

    def __init__(self):
        self.description = 'Feeling about transfer'
        self.format = 'Feeling about transfer should be a floating point number between 1 and 5'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception('Invalid transferfeeling')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 5:
            return False
        else:
            return True"
binaryvalue,"class binaryvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'A binary value that can either be 0 or 1'
        self.format = 'Binary value should be a float of either 0.0 or 1.0'
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            if val in [0, 1, 0.0, 1.0]:
                return float(val)
        raise Exception('Invalid binary value')
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False"
ordinalvalue,"class ordinalvalue(GeneralSemanticType):

    def __init__(self):
        self.description = 'An ordinal value that ranges from 2 to 4'
        self.format = 'Integer'
        self.examples = [2, 3, 4, 3, 2]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [2, 3, 4]:
                return casted_val
            else:
                return 'Invalid value'
        except ValueError:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val in [2, 3, 4]:
            return True
        else:
            return False"
floatingpointvalue,"class floatingpointvalue(GeneralSemanticType):
    def __init__(self):
        self.description = 'A floating point value'
        self.format = 'Floating point values should be formatted as a floating point number with up to nine decimal places'
        self.examples = [0.697081298, 2.841257652, 1.217888679, 0.864633434, 0.684342433]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 9)
        except ValueError:
            raise Exception('Invalid floating point value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= float('inf'):
            return True
        else:
            return False"
peoplecategory,"class peoplecategory(GeneralSemanticType):
    def __init__(self):
        self.description = 'Category of people'
        self.format = 'Should be a string'
        self.examples = ['Public charges from following causes existing prior to entry within 3yrs.', 'Likely to become a public charge', 'Entered without inspection', 'Prostitutes', '(1yr.) Returned within of landing']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
nationalityracialcategory,"class nationalityracialcategory(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Nationality and racial category'
        self.format: str = 'A string'
        self.examples: list = ['English', 'Mexican', '(Southern) Italian', 'French', 'Irish']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
countryisoalpha,"class countryisoalpha(GeneralSemanticType):

    def __init__(self):
        self.description = 'ISO alpha country codes'
        self.format = '3-letter string'
        self.examples = ['GBR', 'POL', 'ITA', 'MEX', 'FRA']

    def super_cast(self, val):
        if isinstance(val, str) and len(val) == 3:
            if val in [country.alpha_3 for country in pycountry.countries]:
                return val
            else:
                return 'Invalid ISO alpha code'
        else:
            return 'Invalid ISO alpha code'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [country.alpha_3 for country in pycountry.countries]:
            return True
        else:
            return False"
numberofpeople,"class numberofpeople(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of people'
        self.format = 'Should be a positive integer'
        self.examples = [1, 3, 9, 14, 825]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 0:
                return val
            else:
                return None
        except:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
universityexperience,"class universityexperience(GeneralSemanticType):
    def __init__(self):
        self.description = 'Years of experience in a university setting'
        self.format = 'Experience should be a whole number with no decimal places'
        self.examples = [1, 27, 53, 84, 120]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        try:
            value = int(val)
            if value < 1 or value > 120:
                raise Exception('Invalid experience value')
            return value
        except Exception:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 120:
            return True
        else:
            return False"
score,"class score(GeneralSemanticType):
    def __init__(self):
        self.description = ""A score""
        self.format = ""Non-negative floating point number""
        self.examples = [17.0, 14.0, 15.0, 18.0, 15.0]
        
    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0:
                return num
            else:
                raise ValueError(""Negative values are not valid for score."")
        except Exception as e:
            raise ValueError(""Invalid value for score."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
fips,"class fips(GeneralSemanticType):

    def __init__(self):
        self.description = 'Federal Information Processing Standards code'
        self.format = 'FIPS should be formatted as a five digit number'
        self.examples = [51001, 51001, 51001, 51001, 51001]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
nomrate,"class nomrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nominal Rate'
        self.format = 'Float'
        self.examples = [0.64, 0.69, 0.69, 0.34, 0.41]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
stress,"class stress(GeneralSemanticType):
    def __init__(self):
        self.description = 'Stress Level'
        self.format = 'Floating point number'
        self.examples = [100.11, 100.94, 100.37, 100.73, 100.19]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Value could not be converted to a floating point number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
nosc2,"class nosc2(GeneralSemanticType):
    def __init__(self):
        self.description = 'NOSC2 Code'
        self.format = 'NOSC2 should be formatted as a floating point number'
        self.examples = [711.0, 683.0, 417.0, 326.0, 264.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if np.isnan(float_val):
                return np.nan
            else:
                return float_val
        except Exception:
            raise ValueError(""Unable to cast value to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and (casted_val < 0 or casted_val == float('inf')):
            raise ValueError(""Invalid NOSC2 code. It should be a non-negative finite number."")
        return True"
ri2,"class ri2(GeneralSemanticType):
    def __init__(self):
        self.description = 'RI2 Level'
        self.format = 'RI2 should be formatted as a floating point number'
        self.examples = [106.0, 106.0, 101.0, 114.0, 113.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""Value cannot be cast to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isfinite(casted_val):
            return False
        return 0 <= casted_val <= float('inf')"
bizshare,"class bizshare(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Business Share Level'
        self.format: str = 'Business share should be formatted as a floating point number'
        self.examples: list = [0.021012416, 0.03264095, 0.03255814, 0.024229076, 0.017902814]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
homogen,"class homogen(GeneralSemanticType):
    def __init__(self):
        self.description = 'Homogeneity Level'
        self.format = 'Homogeneity should be formatted as a floating point number'
        self.examples = [0.5555663, 0.55650103, 0.5563708, 0.5558739, 0.55955136]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
share65,"class share65(GeneralSemanticType):
    def __init__(self):
        self.description = 'Share 65 Level'
        self.format = 'Share 65 should be formatted as a floating point number'
        self.examples = [0.17371285, 0.1752671, 0.17926085, 0.18522225, 0.18886727]

    def super_cast(self, val):
        try:
            float_val = float(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be cast to float."")
        return float_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or not np.isfinite(casted_val):
            return False
        return True"
pgrowth,"class pgrowth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Population Growth Level'
        self.format = 'Population growth should be formatted as a floating point number'
        self.examples = [0.013081796, 0.01794335, 0.018157536, 0.01687263, 0.016337946]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(f""Can't convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val != float('inf'):
            return True
        else:
            return False"
cmass,"class cmass(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean representing if an object has mass or not""
        self.format = ""A boolean""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return bool(int(val))
        elif isinstance(val, int):
            return bool(val)
        else:
            raise Exception(""Invalid input for cmass"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
cmaint,"class cmaint(GeneralSemanticType):
    def __init__(self):
        self.description = ""Maintenance flag""
        self.format = ""Integer (0 or 1)""
        self.examples = [0, 1, 0, 0, 1]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
cod2,"class cod2(GeneralSemanticType):
    def __init__(self):
        self.description = 'COD2 Level'
        self.format = 'COD2 should be formatted as a floating point number'
        self.examples = [63.16, 55.8, 56.43, 33.12, 36.73]

    def super_cast(self, val):
        try:
            if math.isnan(val):
                return float('nan')
            else:
                return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val) or casted_val < 0:
            return False
        return True"
likertscale,"class likertscale(GeneralSemanticType):

    def __init__(self):
        self.description = 'Likert scale ratings'
        self.format = 'Responses should be a float between 1 and 7'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]

    def super_cast(self, val):
        num = float(val)
        if 1.0 <= num <= 7.0:
            return round(num)
        else:
            raise Exception('Invalid Likert scale rating')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 7.0:
            return True
        else:
            return False"
sheet,"class sheet(GeneralSemanticType):

    def __init__(self):
        self.description = ""Sheet names in the dataset""
        self.format = ""strings and capitalized""
        self.examples = ['System', 'Assemblages', 'Assemblage Groups', 'Bead Periods', 'All']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['System', 'Assemblages', 'Assemblage Groups', 'Bead Periods', 'All']:
            return True
        else:
            return False"
field,"class field(GeneralSemanticType):

    def __init__(self):
        self.description = 'Field names in the dataset'
        self.format = 'Single letter capital string'
        self.examples = ['A', 'B', 'C', 'D', 'E']

    def super_cast(self, val):
        if isinstance(val, str):
            upper_val = val.upper()
            if len(upper_val) > 1:
                return upper_val[0]
            else:
                return upper_val
        else:
            raise Exception('Invalid Value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:
            return True
        else:
            return False"
entry,"class entry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Entry values in the dataset'
        self.format = 'Entry values are strings'
        self.examples = ['All', '213', '501-951', '971-980', '978 (976)']

    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is a string
        if isinstance(casted_val, str):
            return True
        else:
            return False"
tenure,"class tenure(GeneralSemanticType):
    def __init__(self):
        self.description = 'Tenure'
        self.format = 'Tenure should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid input, expected an integer')
        
        if val >= 1 and val <= 4:
            return val
        else:
            raise Exception('Invalid tenure')

    def validate(self, val):
        casted_val = self.super_cast(val)
        
        if isinstance(casted_val, int) and (1 <= casted_val <= 4):
            return True
        else:
            return False"
valuecreation,"class valuecreation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Value creation'
        self.format = 'Value creation should be an integer between 2 and 5'
        self.examples = [2, 3, 4, 5]

    def super_cast(self, val):
        try:
            int_val = int(val)
            if 2 <= int_val <= 5:
                return int_val
            else:
                return 'Invalid value creation'
        except ValueError:
            return 'Invalid value creation'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 2 <= casted_val <= 5:
            return True
        else:
            return False"
conceptualskills,"class conceptualskills(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conceptual skills'
        self.format = 'Conceptual skills should be an integer between 2 and 5'
        self.examples = [2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if val >= 2 and val <= 5:
                return val
            else:
                raise Exception('Invalid conceptual skills')
        except:
            raise Exception('Invalid conceptual skills')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 2 and casted_val <= 5:
            return True
        else:
            return False"
jobsatisfaction,"class jobsatisfaction(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job satisfaction'
        self.format = 'Job satisfaction should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            val = int(val)
            if 1 <= val <= 5:
                return val
            else:
                raise ValueError(""Value must be between 1 and 5"")
        except ValueError as e:
            print(f""Error: {e}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
workmotivation,"class workmotivation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Work motivation'
        self.format = 'Work motivation should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        val = int(val)
        if val >= 1 and val <= 5:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val != 'Invalid':
            return True
        else:
            return False"
pageorder,"class pageorder(GeneralSemanticType):

    def __init__(self):
        self.description = 'The order of pages in a book'
        self.format = 'integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 320:
            return True
        else:
            return False"
bookside,"
class bookside(GeneralSemanticType):
    def __init__(self):
        self.description = ""Bookside""
        self.format = ""In upper-case and as a string""
        self.examples = ['L', 'R', 'L', 'R', 'L']

    def super_cast(self, val):
        if isinstance(val, str) and val.upper() in ['L', 'R']:
            return val.upper()
        else:
            raise ValueError('Value must be either L or R')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['L', 'R']:
            return True
        else:
            return False
"
pageheading,"
class pageheading(GeneralSemanticType):

    def __init__(self):
        self.description = 'The heading of a page'
        self.format = 'Page headings are stored as strings'
        self.examples = ['Negroes sold Mr. Armfield', 'Rock Creek Farm', 'Negroes to be disposed of', 'Negroes to be kept', 'North-West Farm']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
number,"class number(GeneralSemanticType):

    def __init__(self):
        self.description = 'A numerical value'
        self.format = 'Numbers should be in decimal format'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            # Try to convert to float
            return float(val)
        except ValueError:
            # If conversion fails, return original value
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1 <= casted_val <= 165:
            return True
        else:
            return False"
agecategory,"class agecategory(GeneralSemanticType):
    def __init__(self):
        self.description = ""Age category of a person""
        self.format = ""Age categories are stored as strings""
        self.examples = ['Child', 'Adult', 'Infant', 'Older Person']

    def super_cast(self, val):
        if isinstance(val, str):
            if val in ['Child', 'Adult', 'Infant', 'Older Person']:
                return val
        elif isinstance(val, (int, float)):
            if val == 1:
                return 'Child'
            elif val == 2:
                return 'Adult'
            elif val == 3:
                return 'Infant'
            elif val == 4:
                return 'Older Person'
        else:
            raise ValueError('Invalid input type for super_cast')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Child', 'Adult', 'Infant', 'Older Person']:
            return True
        else:
            return False"
price,"class price(GeneralSemanticType):

    def __init__(self):
        self.description = 'The price of a good or service'
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples = [250.0, 300.0, 700.0, 350.0, 150.0]

    def super_cast(self, val):
        try:
            num = float(str(val).replace('$', ''))
            return round(num, 2)
        except ValueError:
            raise Exception(""Invalid input. Input should be a number or a string that can be converted to a number."")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
townname,"class townname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a town'
        self.format = 'The town name should start with a capital letter'
        self.examples = ['Acton', 'Arlington', 'Ashland', 'Bedford', 'Bellingham']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
population,"class population(GeneralSemanticType):

    def __init__(self):
        self.description = 'The population of a country, region or town'
        self.format = 'Population should be a floating point number'
        self.examples = [14011.422, 2437.932, 52.0, 8925.122, 726.182]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
percent,"class percent(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percentage values'
        self.format = 'Percentage should be a floating point number'
        self.examples = [18.381, 16.754, 0.817907878, 6.976, 13.003]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            num *= 100
        return round(num, 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        return 0 <= casted_val <= 100"
tenurelevel,"class tenurelevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of tenure, represented as a number'
        self.format = 'Tenure level should be an integer between 1 and 4'
        self.examples = [1, 2, 3, 4]

    def super_cast(self, val):
        try:
            int_val = int(val)
        except ValueError:
            raise Exception('Value cannot be converted to integer')

        if 1 <= int_val <= 4:
            return int_val
        else:
            raise Exception('Invalid tenure level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 4:
            return True
        else:
            return False"
ratinglevel,"class ratinglevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Rating level, represented as a number'
        self.format = 'Rating level should be an integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, int) and 1 <= val <= 5:
            return val
        else:
            raise Exception('Invalid rating level')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 5:
            return True
        else:
            return False"
firearmsmanufacturer,"class firearmsmanufacturer(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of Firearms Manufacturer'
        self.format = ""Each word's first letter should be capitalized""
        self.examples = ['Remington Arms Company LLC', 'Sturm, Ruger & Company, Inc', 'Strategic Armory Corps LLC', 'Palmetto State Armory LLC', 'Ghost Firearms LLC']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        for word in words:
            if not word.istitle():
                return False
        return True"
firearmsmanufactureraddress,"class firearmsmanufactureraddress(GeneralSemanticType):

    def __init__(self):
        self.description = 'Address of Firearms Manufacturer'
        self.format = ""Each word's first letter should be capitalized""
        self.examples = ['69400 E Hwy 60', '291 E Ocotillo Rd Unit 27', '100 Burritt Street', '75 Cal Foster Dr', '15543 Birch Dr']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        words = casted_val.split()
        for word in words:
            if not word[0].isupper():
                return False
        return True"
firearmscount,"class firearmscount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Count of firearms'
        self.format = 'Should be formatted as an integer'
        self.examples = [10, 15, 100, 500, 1000]

    def super_cast(self, val):
        try:
            # attempt to cast to int
            return int(val)
        except Exception:
            raise Exception(""Unable to cast to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
personsex,"class personsex(GeneralSemanticType):
    def __init__(self):
        self.description = ""A person's sex""
        self.format = ""In lower-case and as a string""
        self.examples = ['male', 'female', 'male', 'female', 'male']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['male', 'female']:
            return True
        else:
            return False"
personlegalstatus,"class personlegalstatus(GeneralSemanticType):
    def __init__(self):
        self.description = ""A person's legal status""
        self.format = ""A string""
        self.examples = ['Africano Livre', 'Escravo da Nação', 'Africano Livre', 'Escravo da Nação', 'Africano Livre']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Africano Livre', 'Escravo da Nação']:
            return True
        else:
            return False"
nation,"class nation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Nation of a Person'
        self.format = 'The nation should be capitalized'
        self.examples = ['Crioulo', 'Quilimane', 'Moçambique', 'Congo', 'Benguela']

    def super_cast(self, val):
        # Assuming all values are strings representing nations
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        
        # Check if the casted value is a valid country name
        if pycountry.countries.get(name=casted_val):
            return True
        else:
            return False"
workingat,"class workingat(GeneralSemanticType):
    def __init__(self):
        self.description = ""Where a Person is Working at""
        self.format = ""The first letter of each word should be capitalized""
        self.examples = ['Repartição', 'Telegraphos', 'Menor de idade', 'Paineiras', 'Lavagem de roupas']

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
personcondition,"class personcondition(GeneralSemanticType):

    def __init__(self):
        self.description = ""Person's Condition""
        self.format = 'The condition should be in lowercase'
        self.examples = ['none', 'underage', 'invalid', 'arrested']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['none', 'underage', 'invalid', 'arrested']:
            return True
        else:
            return False"
forestassignment,"class forestassignment(GeneralSemanticType):
    def __init__(self):
        self.description = ""Forest Assignment""
        self.format = ""Boolean Format""
        self.examples = [True, False, True, False, True]

    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower() in ['true', '1', 't', 'y', 'yes']
        else:
            return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            return False"
licensename,"class licensename(GeneralSemanticType):
    def __init__(self):
        self.description = 'Licensee name'
        self.format = 'Names should be in uppercase'
        self.examples = ['STURM, RUGER & COMPANY, INC', 'REMINGTON ARMS COMPANY LLC', 'SMITH & WESSON CORP', 'KIMBER MFG INC', 'BARRETT FIREARMS MFG INC']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
firearmcount,"class firearmcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of firearms'
        self.format = 'Count should be formatted as a non-negative integer'
        self.examples = [0, 1, 10, 100, 1000]

    def super_cast(self, val):
        try:
            count = int(val)
            if count < 0:
                raise Exception('Invalid count')
            return count
        except ValueError:
            raise Exception('Invalid input type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
country,"class country(GeneralSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.format = ""Country name should be capitalized and of type string""
        self.examples = ['Haiti', 'Mexico', 'Guatemala', 'El Salvador', 'U.S.A']

    def super_cast(self, val):
        if isinstance(val, str):
            val = val.title()
            if pycountry.countries.get(name=val) is not None:
                return val
            else:
                raise ValueError('Invalid country')
        else:
            raise ValueError('Invalid Input, expected string value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val) is not None:
            return True
        else:
            return False"
imports,"class imports(GeneralSemanticType):

    def __init__(self):
        self.description = 'The value of imports'
        self.format = 'Import value should be formatted as a floating point number'
        self.examples = [112336039.09090908, 141664750.9090909, 223468180.0, 76701698.18181817, 85019760.9090909]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        else:
            raise ValueError(""Invalid import value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
workidentifier,"class workidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier of the work'
        self.format = ""Work id should be a string of the format 'PGxxxxx'""
        self.examples = ['PG52204', 'PG37657', 'PG44860', 'PG35533', 'PG53581']

    def super_cast(self, val):
        string = str(val)
        match_obj = re.match('PG[0-9]{5}', val)
        if match_obj:
            return match_obj.group()
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val and re.match('PG[0-9]{5}', casted_val):
            return True
        else:
            return False"
biodiversityrichness,"class biodiversityrichness(GeneralSemanticType):

    def __init__(self):
        self.description = 'Biodiversity richness of the work'
        self.format = 'Biodiversity richness should be a floating point number'
        self.examples = [26.5, 15.52, 14.1, 13.89, 12.62]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
lexicalrichness,"
class lexicalrichness(GeneralSemanticType):
    def __init__(self):
        self.description = 'Lexical richness of the work'
        self.format = 'Lexical richness should be a floating point number'
        self.examples = [2483.93, 2245.41, 2290.33, 1888.27, 1989.59]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0:
            return True
        else:
            return False"
agepublication,"class agepublication(GeneralSemanticType):
    def __init__(self):
        self.description = 'Age of publication of the work'
        self.format = 'Age of publication should be an integer'
        self.examples = [36, 40, 36, 55, 37]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Cannot cast the value to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
yearpublication,"class yearpublication(GeneralSemanticType):

    def __init__(self):
        self.description = 'Year of publication of the work'
        self.format = 'Year of publication should be an integer'
        self.examples = [1847, 1851, 1847, 1876, 1858]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for year of publication"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
literatureform,"class literatureform(GeneralSemanticType):
    def __init__(self):
        self.description = 'Literature form of the work'
        self.format = 'string'
        self.examples = ['epic_art_novel', 'epic_art_shortstory', 'nonfiction', 'lyric_art', 'dramatic_art']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
parenthood,"class parenthood(GeneralSemanticType):
    def __init__(self):
        self.description = 'Parenthood status of the author'
        self.format = 'Parenthood status should be a string'
        self.examples = ['has_children', 'has_no_children']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['has_children', 'has_no_children']:
            return True
        else:
            return False"
highesteducation,"class highesteducation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Highest education of the author'
        self.format = 'Highest education should be a string'
        self.examples = ['university', 'school', 'academic']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['university', 'school', 'academic']:
            return True
        else:
            return False"
biodiversitybackground,"class biodiversitybackground(GeneralSemanticType):
    def __init__(self):
        self.description = 'Biodiversity inclination of the author'
        self.format = 'Biodiversity inclination should be a string'
        self.examples = ['no_bio_inclination', 'has_bio_inclination']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['no_bio_inclination', 'has_bio_inclination']:
            return True
        else:
            return False"
mainregion,"class mainregion(GeneralSemanticType):

    def __init__(self):
        self.description = 'Main region of the author'
        self.format = 'Main region should be a string'
        self.examples = ['north_america', 'british_isles', 'europe', 'other']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['north_america', 'british_isles', 'europe', 'other']:
            return True
        else:
            return False"
migrating,"class migrating(GeneralSemanticType):

    def __init__(self):
        self.description = 'Migration status of the author'
        self.format = 'Migration status should be an integer between 1 and 6'
        self.examples = [1, 2, 3, 4, 5, 6]

    def super_cast(self, val):
        try:
            num = int(val)
            if num in self.examples:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 6:
            return True
        else:
            return False"
mainresidence,"class mainresidence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Main residence of the author'
        self.format = 'Main residence should be a string'
        self.examples = ['city', 'town', 'village']

    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['city', 'town', 'village']:
            return True
        else:
            return False"
genre,"class genre(GeneralSemanticType):
    def __init__(self):
        self.description = ""A genre""
        self.format = ""In boolean form""
        self.examples = [True, False, True, False, True]
    
    def super_cast(self, val):
        return bool(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, bool):
            return True
        else:
            return False"
chineseextract,"class chineseextract(GeneralSemanticType):
    def __init__(self):
        self.description = 'Text extracted from Chinese literature'
        self.format = 'Chinese characters in traditional form'
        self.examples = ['大鹿三十隻，獐子五十隻，麅子五十隻', '四隊各引戰船三百隻，前面各擺列火船二十隻', '北庭都護府貢陰牙角五隻\u3000速藿角十隻\u3000阿魏截根二十斤']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.search(""[\u4e00-\u9FFF]"", casted_val):
            return True
        else:
            return False"
historicalperiod,"class historicalperiod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Historical period in Chinese history'
        self.format = 'Name of the historical period'
        self.examples = ['Song-Ming', 'Qing', 'Sui-Tang', 'PreQin and Han', 'Wei, Jin, and North-South']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
entityclassification,"
class entityclassification(GeneralSemanticType):
    def __init__(self):
        self.description = 'Classification of an entity'
        self.format = 'The entity classification'
        self.examples = ['船', '手', '雞', '戰船']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if type(casted_val) == str:
            return True
        else:
            return False"
entitytype,"class entitytype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of an entity'
        self.format = 'The entity type'
        self.examples = ['boat', 'one of a pair', 'bird', 'shoe', 'container']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
entityrole,"class entityrole(GeneralSemanticType):

    def __init__(self):
        self.description = 'Role of an entity'
        self.format = 'The entity role in string format'
        self.examples = ['Classifier', 'Noun', 'Classifier in Chengyu', 'Adjective', 'Verb']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
textnotes,"class textnotes(GeneralSemanticType):
    def __init__(self):
        self.description = 'Notes on a text extract'
        self.format = 'string'
        self.examples = ['ncn', 'zhi not included but meaning clear', 'Key character omitted', '舄 means a shoe but here possibly used metaphorically meaning a step indicating progress', 'metaphorical use but clear referent ']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) or np.isnan(casted_val):
            return True
        else:
            return False"
commonphrases,"class commonphrases(GeneralSemanticType):

    def __init__(self):
        self.description = 'Common phrases or idioms'
        self.format = 'Common phrases or idioms'
        self.examples = ['船隻', '斗酒隻雞', '隻身', '張弓隻箭', '雞、鴨、鵝']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
referencegene,"class referencegene(GeneralSemanticType):

    def __init__(self):
        self.description = 'Reference gene'
        self.format = 'Reference gene must be stored as a lower-case string'
        self.examples = ['tubilin', 'actb', 'gapdh', 'rplp0', 'b2m']

    def super_cast(self, val):
        return str(val).strip().lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
sample,"class sample(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Sample ID'
        self.format: str = 'Sample ID must be stored as a string'
        self.examples: list = ['10A', '10B', '12C', '10C', '9A']
    
    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
targetgene,"class targetgene(GeneralSemanticType):

    def __init__(self):
        self.description = 'Target gene'
        self.format = 'Target gene must be stored as a string'
        self.examples = ['Virus', 'virus', 'VIRUS', 'virus ', ' Virus']

    def super_cast(self, val):
        return str(val).strip().lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
corrected,"
class corrected(GeneralSemanticType):

    def __init__(self):
        self.description = 'Corrected data'
        self.format = 'Corrected data should be a floating point number'
        self.examples = [-0.81331661, -0.261, 0.206, 4.244, 5.483101667]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError('Invalid value. Expected a number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
logcopy,"class logcopy(GeneralSemanticType):

    def __init__(self):
        self.description = 'Log copy of data'
        self.format = 'Log copy data should be a floating point number'
        self.examples = [0.15370337, 0.548, 1.61, 17532.741, 304159.6969]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 9)
            return casted_val
        except Exception:
            raise ValueError(""Invalid value for casting: {}"".format(val))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
smokerates,"class smokerates(GeneralSemanticType):
    def __init__(self):
        self.description = 'Smoking Rates in 2000'
        self.format = 'Smoking rate should be a floating point number between 0 and 1, inclusive'
        self.examples = [0.26, 0.264, 0.284, 0.296, 0.302]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 3)
            return casted_val
        except ValueError:
            raise ValueError(""Unable to cast the value to float"")
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
respondentidentifier,"
class respondentidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""A unique identifier assigned to each respondent""
        self.format = ""Positive integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
plantorigin,"class plantorigin(GeneralSemanticType):
    def __init__(self):
        self.description = 'Origin of the plant'
        self.format = 'Alphanumeric plant origin identifier'
        self.examples = ['AU4X', 'AU5X', 'C', 'CA5X', 'CH5X']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
allelopathicactivity,"class allelopathicactivity(GeneralSemanticType):
    def __init__(self):
        self.description = ""Allelopathic activity status""
        self.format = ""In upper-case and as a string""
        self.examples = ['Y', 'N', 'Y', 'N', 'Y']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Y', 'N']:
            return True
        else:
            return False"
numericrepresentation,"class numericrepresentation(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Numeric representation'
        self.format: str = 'Numeric representation should be a floating point number'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            raise Exception('Unable to cast the value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.0 <= casted_val <= 10.0:
            return True
        else:
            return False"
plantheight,"class plantheight(GeneralSemanticType):
    def __init__(self):
        self.description = ""Height of the plant""
        self.format = ""Plant height should be a floating point number in cm""
        self.examples = [3.9, 3.5, 2.1, 3.9, 3.0]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1.0 <= casted_val <= 4.8:
            return True
        else:
            return False"
biomass,"class biomass(GeneralSemanticType):
    def __init__(self):
        self.description = 'Biomass of an entity of the plant'
        self.format = 'Biomass should be a floating point number'
        self.examples = [0.1113, float('nan'), 0.0833, 0.0811, 0.0796]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if (casted_val >= 0) or np.isnan(casted_val):
            return True
        else:
            return False"
germination,"class germination(GeneralSemanticType):

    def __init__(self):
        self.description = 'Germination level of the plant'
        self.format = 'Floating point number'
        self.examples = [2.0, 0.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(f""Can't convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0.0 and casted_val <= 5.0:
            return True
        else:
            return False
"
deadseedlings,"class deadseedlings(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of dead seedlings of the plant'
        self.format = 'Integer value'
        self.examples = [0, 0, 0, 1, 0]

    def super_cast(self, val):
        try:
            # if value is a string representation of a number
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= 2:
            return True
        else:
            return False"
target,"class target(GeneralSemanticType):

    def __init__(self):
        self.description = 'Target organisms in a biological experiment'
        self.format = 'Target should be a string starting with a capital letter'
        self.examples = ['Sodalis', 'Sodalis', 'Sodalis', 'Sodalis', 'Sodalis']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
dateandtimeutc,"class dateandtimeutc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date and Time in UTC'
        self.format = 'Date and Time should be in UTC format, represented as a float number'
        self.examples = [40663.14013888889, 40663.1421875, 40663.156909722224, 40663.46306712963, 40663.48835648148]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not pd.isna(casted_val):
            return True
        else:
            return False"
studyday,"class studyday(GeneralSemanticType):
    def __init__(self):
        self.description = 'Study Day'
        self.format = 'A positive float number'
        self.examples = [30.0, 31.0, 32.0, 33.0, 34.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
studyweek,"class studyweek(GeneralSemanticType):

    def __init__(self):
        self.description = 'Study Week'
        self.format = 'Study Week should be a positive float'
        self.examples = [5.0, 6.0, 7.0, 8.0, 9.0]
        
    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        else:
            return 0 <= casted_val <= float('inf')"
systemrkm,"class systemrkm(GeneralSemanticType):
    def __init__(self):
        self.description = 'System RKM'
        self.format = 'System RKM should be a positive float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
day,"class day(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Day of data collection'
        self.format: str = 'Day should be formatted as an integer between 1 and 31'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 1 or casted_val > 31:
                raise ValueError()
            return casted_val
        except ValueError:
            raise ValueError(""Input must be a number between 1 and 31"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 31:
            return True
        else:
            return False"
humidity,"class humidity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Humidity in Percent'
        self.format = 'Humidity should be in percent and stored as float'
        self.examples = [61.2, 64.4, 59.1, 57.4, 62.6]

    def super_cast(self, val):
        float_val = float(val)
        if 0 <= float_val <= 100:
            return round(float_val, 2)
        else:
            raise ValueError('Invalid humidity value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
earthquakeidentifier,"class earthquakeidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Earthquake event identifier'
        self.format = 'Earthquake ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1:
                return casted_val
            else:
                raise ValueError('Value must be a positive integer')
        except ValueError as e:
            raise Exception(f'Cannot cast value: {e}')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False"
earthquaketime,"class earthquaketime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Time of the earthquake event'
        self.format = 'Time should be a datetime object in Python'
        self.examples = ['2010/01/16 20:23:38.3', '2010/01/16 21:26:19.9', '2010/01/17 09:34:20.6', '2010/01/18 03:13:41.5', '2010/02/07 21:20:16.5']

    def super_cast(self, val):
        if isinstance(val, str):
            try:
                return datetime.strptime(val, '%Y/%m/%d %H:%M:%S.%f')
            except ValueError:
                raise Exception(""Invalid time format. It should be 'YYYY/MM/DD HH:MM:SS.S'"")
        elif isinstance(val, datetime):
            return val
        else:
            raise Exception(""Invalid input type. Expected a string or datetime object"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
depth,"class depth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Depth of the earthquake event'
        self.format = 'Depth should be a floating point number'
        self.examples = [9.5, 15.0, 2.9, 11.2, 4.5]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
magnitude,"class magnitude(GeneralSemanticType):
    def __init__(self):
        self.description = 'Magnitude of the earthquake event'
        self.format = 'A floating point number'
        self.examples = [4.9, 4.1, 4.3, 4.0, 4.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and -np.inf < casted_val < np.inf:
            return True
        else:
            return False"
magnitudetype,"class magnitudetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of the magnitude'
        self.format = 'Either ""MN"" or ""Mw""'
        self.examples = ['MN', 'Mw', 'MN', 'Mw', 'MN']

    def super_cast(self, val):
        if val in ['MN', 'Mw']:
            return val
        else:
            raise Exception('Invalid magnitude type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['MN', 'Mw']:
            return True
        else:
            return False"
rms,"class rms(GeneralSemanticType):

    def __init__(self):
        self.description = 'Root Mean Square travel time residual'
        self.format = 'RMS should be a floating point number'
        self.examples = [0.4, 0.2, 0.4, 0.3, 0.4]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
azimuthalgap,"class azimuthalgap(GeneralSemanticType):
    def __init__(self):
        self.description = 'Azimuthal Gap'
        self.format = 'Azimuthal Gap should be a floating point number'
        self.examples = [198.0, 198.0, 197.0, 229.0, 297.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0 and float_val <= 360:
                return float_val
            else:
                raise ValueError
        except ValueError:
            return ""Invalid input. Expected a floating point number between 0 and 360.""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0 and casted_val <= 360:
            return True
        else:
            return False"
downloadfile,"class downloadfile(GeneralSemanticType):

    def __init__(self):
        self.description = 'Downloadable file type'
        self.format = ""Should be a string 'Wave file'""
        self.examples = ['Wave file', 'Wave file', 'Wave file', 'Wave file', 'Wave file']

    def super_cast(self, val):
        if val == 'Wave file':
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Wave file':
            return True
        else:
            return False"
parasitecount,"class parasitecount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Count of a specific type of parasite in a fish'
        self.format = 'Parasite count should be an integer'
        self.examples = [0, 12, 360, 746, 199]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
watershedsidentifier,"class watershedsidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Watershed ID'
        self.format = 'Watershed ID should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif isinstance(casted_val, int) and 1 <= casted_val <= 65:
            return True
        else:
            return False"
microgramsperliter,"class microgramsperliter(GeneralSemanticType):
    def __init__(self):
        self.description = 'Amount of a Substance in Micrograms per Liter'
        self.format = 'Should be a floating point number'
        self.examples = [9.045, 1.782, 5.236472, 8.065, 8.737]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 6)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
action,"class action(GeneralSemanticType):

    def __init__(self):
        self.description = 'Action performed by a person'
        self.format = 'Every word should start with a capital letter'
        self.examples = ['Studying', 'Doing Housework', 'Working', 'Doing Housework', 'Keeping Shop']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            raise TypeError(""Value should be a string"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
socialcontext,"class socialcontext(GeneralSemanticType):

    def __init__(self):
        self.description = 'Social context of a person'
        self.format = 'Every word should start with a capital letter'
        self.examples = ['With classmates', 'With family', 'With colleagues', 'With family', 'Alone']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
earthquakeintensity,"
class earthquakeintensity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Earthquake intensity'
        self.format = 'Intensity should be a string in the form of a roman numeral'
        self.examples = ['Ⅴ', 'Ⅴ', 'Ⅴ', 'Ⅴ', 'Ⅴ']

    def super_cast(self, val):
        if val in ['Ⅶ', 'Ⅷ', 'Ⅵ', 'Ⅴ', 'below Ⅴ']:
            return val
        else:
            raise Exception('Invalid earthquake intensity')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Ⅶ', 'Ⅷ', 'Ⅵ', 'Ⅴ', 'below Ⅴ']:
            return True
        else:
            return False"
speed,"class speed(GeneralSemanticType):
    def __init__(self):
        self.description = 'Speed of a person'
        self.format = 'Speed should be a floating point number'
        self.examples = [1.269, 6.461, 1.295, 6.461, 3.255]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
birdspecies,"class birdspecies(GeneralSemanticType):
    def __init__(self):
        self.description = 'Bird Species'
        self.format = 'The name of the bird species should be written in full, with the first letter of each word capitalized'
        self.examples = ['Turdus Merula', 'C Caeruleus', 'G Glandarius', 'S Europaea', 'P Major']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
discoverycount,"class discoverycount(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of Discoveries'
        self.format = 'The number of discoveries should be an integer'
        self.examples = [15, 11, 5, 11, 28]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be casted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
firstdiscoverycount,"class firstdiscoverycount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of First Discoveries'
        self.format = 'The number of first discoveries should be an integer'
        self.examples = [4, 1, 2, 5, 13]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be cast to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
birdpopulation,"class birdpopulation(GeneralSemanticType):
    def __init__(self):
        self.description = ""The population of a bird species""
        self.format = ""Integer""
        self.examples = [330, 270, 35, 75, 370]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Value cannot be cast to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
sitename,"class sitename(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a site'
        self.format = 'The site name should be represented in uppercase'
        self.examples = ['RH', 'CA', 'QZ', 'JA', 'RH']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
dispersionmechanism,"class dispersionmechanism(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of dispersion mechanism'
        self.format = 'The dispersion mechanism should start with a capital letter'
        self.examples = ['Wind', 'Insect']
    
    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Wind', 'Insect']:
            return True
        else:
            return False"
sitetype,"class sitetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of site'
        self.format = 'The site type should start with a capital letter'
        self.examples = ['Ground', 'Roof']

    def super_cast(self, val):
        # Ensuring the value is string and capitalizing the first letter
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validation check: is the casted value in the valid values
        if casted_val in ['Ground', 'Roof']:
            return True
        else:
            return False"
numberofseedsfruits,"class numberofseedsfruits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of seeds/fruits'
        self.format = 'Number of seeds/fruits should be formatted as an integer'
        self.examples = [0, 4, 93, 5909]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            raise Exception(f""Value {val} cannot be casted to integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
percentvegetation,"class percentvegetation(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Percentage of vegetation'
        self.format: str = 'Percentage should be formatted as a floating point number between 0.0 and 1.0'
        self.examples: list = [0.1586, 0.402, 0.458, 0.91, 0.9105]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0.0 <= num <= 1.0:
                return num
            else:
                return 'Invalid percentage'
        except ValueError:
            return 'Invalid percentage'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Invalid percentage':
            return False
        else:
            return True"
percentimpervioussurface,"class percentimpervioussurface(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percentage of impervious surface'
        self.format = 'Percentage should be formatted as a floating point number between 0.0 and 1.0'
        self.examples = [0.0424, 0.042, 0.534, 0.596, 0.7415]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0.0 and num <= 1.0:
                return num
            else:
                raise Exception('Invalid percentage')
        except:
            raise ValueError(""Invalid input, can't be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.0 <= casted_val <= 1.0:
            return True
        else:
            return False"
weatherparameter,"class weatherparameter(GeneralSemanticType):
    def __init__(self):
        self.description = 'Weather parameter'
        self.format = 'Weather parameter should be a floating point number'
        self.examples = [68.9, 68.9, 68.9, 68.9, 68.9]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
lossidentifier,"class lossidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Unique identifier for each loss event'
        self.format = 'Loss IDs are integer values'
        self.examples: list = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value for loss identifier"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
numberoflosses,"class numberoflosses(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of losses occurred'
        self.format = 'Integer values'
        self.examples: list = [2, 3, 2, 5, 2]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 2 <= casted_val <= 9:
            return True
        else:
            return False"
dateloss,"class dateloss(GeneralSemanticType):

    def __init__(self):
        self.description = 'Date when the loss event occurred'
        self.format = ""Dates should be in the format 'yyyymmdd'""
        self.examples: list = [19970101, 19980205, 20021215, 19980203, 20051231]

    def super_cast(self, val):
        if np.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 19780105 <= casted_val <= 20110401:
            return True
        else:
            return False"
zipcode,"class zipcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Zip Codes'
        self.format = 'Zip Codes must be 5-digit numbers stored as strings'
        self.examples = ['85286', '85248', '10003', '30309', '30308']

    def super_cast(self, val):
        try:
            string = str(int(val))
            match_obj = re.match('[0-9]{5}(?:-[0-9]{4})?', string)
            if match_obj:
                return match_obj.group()
            else:
                return float('nan')
        except Exception:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match('[0-9]{5}(?:-[0-9]{4})?', casted_val):
            return True
        else:
            return False"
asofdate,"
class asofdate(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Date as of which the data is reported'
        self.format: str = ""Dates should be in the format 'yyyymmdd'""
        self.examples: list = [20100430, 20100430, 20100430, 20100430, 20100430]

    def super_cast(self, val):
        try:
            casted_value = int(val)
            return casted_value
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and self.examples[0] <= casted_val <= self.examples[-1]:
            return True
        else:
            return False"
load,"class load(GeneralSemanticType):
    def __init__(self):
        self.description = 'The load of the willow chips'
        self.format = 'Load should be an integer'
        self.examples = [107, 108, 109, 110, 111]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        return self.examples[0] <= casted_val <= self.examples[-1]"
htm,"class htm(GeneralSemanticType):
    def __init__(self):
        self.description = 'The height of the willow chips'
        self.format = 'Height in meters represented as a floating point number'
        self.examples = [5.0, 5.0, 5.0, 5.0, 5.0]

    def super_cast(self, val):
        if isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return round(float(val), 2)
        elif isinstance(val, int) or isinstance(val, float):
            return round(val, 2)
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 4.65 <= casted_val <= 7.01:
            return True
        else:
            return False"
htcat,"class htcat(GeneralSemanticType):

    def __init__(self):
        self.description = 'The height category of the willow chips'
        self.format = 'Height category should be a single letter stored as a string'
        self.examples = ['S', 'L', 'S', 'L', 'S']

    def super_cast(self, val):
        if val in ['S', 'L']:
            return val
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['S', 'L']:
            return True
        else:
            return False"
mgperhaload,"class mgperhaload(GeneralSemanticType):
    def __init__(self):
        self.description = 'The load of the willow chips in mg per ha'
        self.format = 'Load should be stored as a float'
        self.examples = [np.nan, 38.494, 49.742, 41.338, 39.183]

    def super_cast(self, val):
        if isinstance(val, str) and val == '.':
            return np.nan
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or (isinstance(casted_val, float) and casted_val >= 0):
            return True
        else:
            return False"
mcpercent,"class mcpercent(GeneralSemanticType):
    def __init__(self):
        self.description = 'The moisture content of the willow chips'
        self.format = 'Moisture content should be a floating point number'
        self.examples = [52.404, 51.8512, 52.4969, 54.0465, 54.7282]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 4)
            return casted_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to float.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 42.7063 <= casted_val <= 60.1673:
            return True
        else:
            return False"
tractor,"class tractor(GeneralSemanticType):
    def __init__(self):
        self.description = 'The tractor used for the data collection'
        self.format = 'Tractor should be an integer'
        self.examples = [2, 3, 1, 2, 3]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 1 <= casted_val <= 3:
            return True
        else:
            return False"
type3,"class type3(GeneralSemanticType):

    def __init__(self):
        self.description = 'The type of the collection'
        self.format = 'Type should be a string'
        self.examples = ['fixed', 'small', 'walking', 'fixed', 'small']

    def super_cast(self, val):
        if val in ['fixed', 'small', 'walking']:
            return val
        else:
            raise Exception('Invalid type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['fixed', 'small', 'walking']:
            return True
        else:
            return False"
loadkg,"class loadkg(GeneralSemanticType):
    def __init__(self):
        self.description = 'The load of the willow chips in kg'
        self.format = 'Load should be an integer'
        self.examples = [7172, 3482, 5770, 7282, 3348]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 2936 and casted_val <= 9490:
            return True
        else:
            return False"
vol,"class vol(GeneralSemanticType):

    def __init__(self):
        self.description = 'The volume of the willow chips'
        self.format = 'Volume should be a floating point number'
        self.examples = [28.06, 10.28, 29.45, 28.06, 10.28]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 10.28 <= casted_val <= 29.45:
            return True
        else:
            return False"
effbd,"class effbd(GeneralSemanticType):
    def __init__(self):
        self.description = 'The effective bulk density of the willow chips'
        self.format = 'Effective bulk density should be a floating point number'
        self.examples = [255.6, 338.72, 195.93, 259.52, 325.68]
        
    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 139.97 <= casted_val <= 393.0:
            return True
        else:
            return False"
actbd,"class actbd(GeneralSemanticType):

    def __init__(self):
        self.description = 'The actual bulk density of the willow chips'
        self.format = 'Actual bulk density should be stored as a float'
        self.examples = [np.nan, 206.14, 332.47, 259.83, 221.28]

    def super_cast(self, val):
        if val == '.':
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val) or (0 <= casted_val <= 1000):  # assuming bulk density range
            return True
        else:
            return False"
isobd,"class isobd(GeneralSemanticType):

    def __init__(self):
        super().__init__()
        self.description = 'The isotherm bulk density of the willow chips'
        self.format = 'Isotherm bulk density should be stored as a float'
        self.examples = [278.0, 228.87, 254.04, 252.84, 261.23]

    def super_cast(self, val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isnull(casted_val):
            return True
        elif isinstance(casted_val, float) and not np.isnan(casted_val):
            return True
        else:
            return False"
variablename,"class variablename(GeneralSemanticType):

    def __init__(self):
        self.description = 'Variable name in a dataset'
        self.format = 'Strings with no spaces, typically using underscores or CamelCase for multi-word names'
        self.examples = ['load', 'date', 'field', 'ht_m', 'Mgperha_Load']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not re.search(r'\s', casted_val):
            return True
        else:
            return False"
variabledescription,"class variabledescription(GeneralSemanticType):
    def __init__(self):
        self.description = 'Description of a variable in a dataset'
        self.format = 'Strings, which may contain spaces and punctuation'
        self.examples = ['Load Number', 'Date', 'Field Number', 'Tree Height', 'Standing Biomass Delivered']
        
    def super_cast(self, val):
        # Since the format mentioned in the class is a string, we can safely cast all values to a string
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validation can be done by checking if the casted value is a string
        return isinstance(casted_val, str)"
notesorunits,"class notesorunits(GeneralSemanticType):

    def __init__(self):
        self.description = 'Notes or units for a variable in a dataset'
        self.format = 'Strings, which may contain spaces and punctuation'
        self.examples = [""serial numbner 100's day of harvest, 10's consecutive load number"", 'date of collection', 'character', 'm', 'Mg/ha: Standing biomass based on material weighted at landing (does not include dropped biomass)']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
precipitationmeasurement,"class precipitationmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Precipitation measurement in millimeters'
        self.format = 'Precipitation measurement should be formatted as a floating point number (in mm units)'
        self.examples = [10.5, 1.3, 1000.0, 0.9, 10000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
potentialtranspirationmeasurement,"class potentialtranspirationmeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Potential Transpiration measurement in millimeters'
        self.format = 'Potential Transpiration measurement should be formatted as a floating point number (in mm units)'
        self.examples: list = [10.5, 1.3, 1000.0, 0.9, 10000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception('Invalid value. Please provide a valid floating point number.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception('Invalid value. Potential Transpiration measurement cannot be negative.')
        return True"
runoffmeasurement,"class runoffmeasurement(GeneralSemanticType):
    def __init__(self):
        self.description = 'Runoff measurement in millimeters'
        self.format = 'Runoff measurement should be formatted as a floating point number (in mm units)'
        self.examples: list = [10.5, 1.3, 1000.0, 0.9, 10000.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val < float('inf'):
            return True
        else:
            return False"
slope,"class slope(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Slope of the best fit line through the log-transformed flow duration curve'
        self.format: str = 'Slope should be formatted as a floating point number'
        self.examples: list = [2.83, 2.85, 2.57, 2.87, 2.49]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise ValueError(""The value could not be converted to a float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not math.isnan(casted_val):
            return True
        else:
            return False"
precipitationtopotentialtranspirationratio,"class precipitationtopotentialtranspirationratio(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'The ratio of precipitation to potential transpiration'
        self.format: str = 'The ratio should be formatted as a floating point number'
        self.examples: list = [1.09, 1.12, 1.14, 1.07, 1.46]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise ValueError(""Value must be a number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
floodduration,"class floodduration(GeneralSemanticType):
    def __init__(self):
        self.description = 'Duration of a flood event'
        self.format = 'Should be a number representing the duration of a flood event in days'
        self.examples = [23, 2, 2, 5, 44]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise Exception('Invalid flood duration')
            return num
        except:
            raise Exception('Invalid input')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise Exception('Invalid flood duration')
        else:
            return True"
flooddurationindex,"class flooddurationindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Index of a flood duration event'
        self.format = 'Should be an integer greater than 0'
        self.examples = [1, 5, 5, 3, 2]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1:
                raise Exception('Invalid flood duration index')
            return num
        except Exception as e:
            print(f'Error in casting: {e}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val > 0:
            return True
        else:
            return False"
qf1cei,"class qf1cei(GeneralSemanticType):
    def __init__(self):
        self.description = 'Q-Factor 1 for the Compound Event Index'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [0.732394366, 0.0, 0.021126761, 0.0, 0.401408451]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid Q-Factor 1')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
gphdim,"class gphdim(GeneralSemanticType):

    def __init__(self):
        self.description = 'GeoPotential Height Dimension'
        self.format = 'Should be a floating point number'
        self.examples = [-0.020750215, 0.066087202, 0.076635487, 0.006451178, 0.424409443]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception(""Invalid value. It cannot be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
divwvgm,"class divwvgm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Divergence of the Westerly Wind Anomaly'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [8.14e-06, 8.14e-06, 8.14e-06, 8.14e-06, 8.14e-06]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and not isinstance(val, bool):
            if val < 0 or math.isnan(val):
                return float('nan')
            else:
                return float(val)
        else:
            raise ValueError(""Invalid input"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 or np.isnan(casted_val):
            return True
        else:
            return False"
viwvgm,"class viwvgm(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vorticity of the Westerly Wind Anomaly'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [5.263938638, 5.263938638, 5.263938638, 5.263938638, 5.263938638]

    def super_cast(self, val):
        if math.isnan(val):
            return np.nan
        num = float(val)
        if num < 0:
            raise Exception('Invalid Vorticity of the Westerly Wind Anomaly')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
specimenidentifier,"class specimenidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The specimen ID of the shark'
        self.format = 'Specimen ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception('Failed to cast value to int')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1:
            return True
        else:
            return False"
sharkspecies,"class sharkspecies(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Species of the shark'
        self.format: str = 'Species name should be a single word in lowercase'
        self.examples: list = ['mako', 'porbeagle', 'white', 'dusky', 'blue']
        
    def super_cast(self, val):
        if isinstance(val, str):
            return val.lower()
        else:
            return str(val).lower()
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
sharklength,"class sharklength(GeneralSemanticType):
    def __init__(self):
        self.description = ""The length of the shark""
        self.format = ""Length should be a positive floating point number""
        self.examples = [64.7, 151.6, 210.45, 229.0, 380.9]

    def super_cast(self, val):
        try:
            val = round(float(val), 2)
            if val >= 0:
                return val
            else:
                raise ValueError(""Invalid Value: Length cannot be negative"")
        except ValueError as ve:
            print(ve)
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
ontogenyenum,"class ontogenyenum(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ontogeny of the shark'
        self.format = 'Ontogeny should be a capitalized three-letter acronym'
        self.examples = ['YOY', 'IMM', 'MAT']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['YOY', 'IMM', 'MAT']:
            return True
        else:
            return False"
samplelocation,"class samplelocation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Sampling location of the shark specimen'
        self.format = 'Location should be a single capital letter'
        self.examples = ['A', 'C', 'D', 'E']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['A', 'C', 'D', 'E']:
            return True
        else:
            return False"
samplelocationregion,"class samplelocationregion(GeneralSemanticType):
    def __init__(self):
        self.description = ""The sample location region""
        self.format = ""In lower-case and as a string""
        self.examples = ['posterior', 'anterior', 'posterior', 'anterior', 'posterior']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['posterior', 'anterior']:
            return True
        else:
            return False"
centrummeasurement,"class centrummeasurement(GeneralSemanticType):

    def __init__(self):
        self.description = 'Measurement related to the centrum of the shark'
        self.format = 'Measurement should be a positive floating point number'
        self.examples = [2.6, 8.7, 11.545, 15.265, 28.33]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return round(float(val), 2)
        else:
            raise Exception(f'Invalid value {val} for centrummeasurement')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
strainrate,"class strainrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Strain rate of the shark specimen'
        self.format = 'Strain rate should be a positive floating point number between 0 and 0.1'
        self.examples = [0.1, 0.01, 0.001, 0.1, 0.01]

    def super_cast(self, val):
        try:
            return round(float(val), 3)
        except ValueError:
            raise Exception('Invalid input, expected a float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 0.1:
            return True
        else:
            return False"
mechanicalproperty,"class mechanicalproperty(GeneralSemanticType):
    def __init__(self):
        self.description = 'Mechanical property of the shark specimen'
        self.format = 'Mechanical property should be a positive floating point number'
        self.examples = [0.134, 1.275, 3.012, 6.354, 129.9]

    def super_cast(self, val):
        return round(float(val), 3)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
sampleidentifier,"class sampleidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sample Identifier'
        self.format = 'Sample Identifier is a string of digits or alphanumeric'
        self.examples = ['26', '27', 'KG01', 'KG02', 'T – 1']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('^[A-Za-z0-9 –]+$', casted_val):
            return True
        else:
            return False"
d13c,"class d13c(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'D13C'
        self.format: str = 'D13C value should be a floating point number'
        self.examples: list = [-31.42, -26.79, -29.9, -35.77, -28.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return ""Can't convert to float""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
camountug,"class camountug(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'CAmountug'
        self.format: str = 'floating point number'
        self.examples: list = [575.47, 593.82, 432.21, 465.85, 479.5]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and not math.isnan(casted_val):
            return True
        else:
            return False"
d15n,"class d15n(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'D15N'
        self.format: str = 'D15N value should be a floating point number'
        self.examples: list = [-0.06, 1.14, 5.77, 4.74, -1.74]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
namountug,"class namountug(GeneralSemanticType):
    def __init__(self):
        self.description = ""NAmountug""
        self.format = ""floating point number""
        self.examples = [14.19, 56.5, 47.72, 27.17, 12.11]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
wellidentifier,"class wellidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Well Identifier'
        self.format = 'Well Identifier is a string of digits and/or characters'
        self.examples = ['A1', 'A2', 'A3', 'A4', 'A5']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
typeofmaterial,"class typeofmaterial(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of Material'
        self.format = 'Material type is a string representing the type of the sample'
        self.examples = ['marsupial nail', 'invertebrate animal', 'plant tissue', 'rodent tail', 'lizard skin']

    def super_cast(self, val):
        valid_values = ['marsupial nail', 'invertebrate animal', 'plant tissue', 'rodent tail', 'lizard skin']
        if val in valid_values:
            return str(val)
        else:
            raise Exception('Invalid material type')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
amountmg,"class amountmg(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Amountmg'
        self.format: str = 'Amountmg value should be a floating point number'
        self.examples: list = [1.2, 1.1, 1.1, 1.2, 1.1]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Cannot convert {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or math.isnan(casted_val):
            return False
        else:
            return True"
ourlabidentifier,"class ourlabidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Our Lab Identifier'
        self.format = 'A string of digits'
        self.examples = ['735010', '735011', '735012', '735013', '735014']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^\d+$"", casted_val):
            return True
        else:
            return False"
modelname,"class modelname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the model used in earth and environmental sciences'
        self.format = 'Model names should be capitalized and stored as strings'
        self.examples = ['SR', 'LR', 'DSSAT', 'APSIM', 'Year']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['SR', 'LR', 'DSSAT', 'APSIM', 'YEAR']:
            return True
        else:
            return False"
percentincrease,"class percentincrease(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percent increase from a previous year'
        self.format = 'Percent increase should be a numerical value'
        self.examples = [-16.0, 23.4375, 3.141361257, 18.75725727, -14.09090909]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise ValueError(""Invalid input, expected a float value."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
weighttype,"class weighttype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Type of weight used in the network'
        self.format = 'Weight type should be a string and is case-insensitive'
        self.examples = ['Weighted', 'Binary', 'BINARY/WEIGHTED', 'Weighted', 'Binary']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Weighted', 'Binary', 'BINARY/WEIGHTED']:
            return True
        else:
            return False"
zonetype,"class zonetype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of zone where the network is measured'
        self.format = 'Zone type should be a string and is case-insensitive'
        self.examples = ['Tropical', 'Non-tropical', 'ZONE']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Tropical', 'Non-tropical', 'ZONE']:
            return True
        else:
            return False"
notes,"class notes(GeneralSemanticType):
    def __init__(self):
        self.description = 'Notes regarding the data'
        self.format = 'Notes may contain any characters'
        self.examples = ['Lizard excluded', 'NOTES', 'Mammals excluded']

    def super_cast(self, val):
        return str(val) if pd.notna(val) else 'No notes'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
vulnerabilityindex,"class vulnerabilityindex(GeneralSemanticType):

    def __init__(self):
        self.description = 'Vulnerability index to climate change'
        self.format = 'Vulnerability index should be a decimal between 0 and 1 inclusive'
        self.examples = [0.5, 0.75, 0.2, 0.85, 0.33]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and num <= 1:
                return round(num, 2)
            else:
                raise ValueError('Invalid vulnerability index')
        except ValueError:
            raise ValueError('Invalid value for vulnerability index')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 1:
            return True
        else:
            return False"
daysopen,"class daysopen(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of days a lock is open'
        self.format = 'Days should be an integer'
        self.examples = [2, 2, 2, 1, 1]
    
    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in range(1, 5):
            return True
        else:
            return False"
department,"class department(GeneralSemanticType):
    def __init__(self):
        self.description = 'Department of a country'
        self.format = 'The name of the department should be capitalized'
        self.examples = ['Cauca', 'Bogota', 'Antioquia', 'Atlantico', 'Bolivar']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
municipality,"class municipality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Municipality of a department in a country'
        self.format = 'The name of the municipality should be capitalized'
        self.examples = ['Piendamo', 'Puerto Tejada', 'El Tambo', 'Guachene', 'Jambalo']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
precipitation,"class precipitation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Precipitation level'
        self.format = 'In millimeters'
        self.examples = [2.7, 89.765, 165.245, 271.665, 826.89]

    def super_cast(self, val):
        # Check if value is a number
        if isinstance(val, (int, float)):
            return float(val)
        elif isinstance(val, str) and val.replace('.', '', 1).isdigit():
            return float(val)
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if value is a positive number
        if casted_val >= 0:
            return True
        else:
            return False"
radiation,"class radiation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Radiation level'
        self.format = 'Radiation level formatted as a floating point number (MJ/m2)'
        self.examples = [34491.94, 78588.335, 96329.15, 116543.265, 197420.68]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        if casted_val < 0 or casted_val == float('inf'):
            return False
        return True"
weatherstationidentifier,"class weatherstationidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Weather Station Identifier'
        self.format = 'Weather Station Identifier must be stored as strings'
        self.examples = ['35244', '35188', '35152', '35125', '35216']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isdigit():
            return True
        else:
            return False"
phlevel,"
class phlevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'pH level of rainwater'
        self.format = 'A floating point number between 0 and 14'
        self.examples = [4.5, 4.7, 7.8, 4.5, 6.5]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif (casted_val >= 0) and (casted_val <= 14):
            return True
        else:
            return False"
nitrateconcentration,"class nitrateconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of Nitrate in rainwater'
        self.format = 'Nitrate Concentration should be a floating point number'
        self.examples = [2.6562, 7.9686, 11.5102, 10.1234, 8.7654]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return ""Invalid""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
ammoniumconcentration,"class ammoniumconcentration(GeneralSemanticType):
    def __init__(self):
        self.description = 'Concentration of Ammonium in rainwater'
        self.format = 'Ammonium Concentration should be a floating point number'
        self.examples = [1.932, 1.1592, 6.1824, 7.728, 5.4321]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            print(f""Error occurred while casting {val} to float: {e}"")
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if 0 <= casted_val <= float('inf'):
                return True
            else:
                print(f""Value {casted_val} is out of valid range [0, Infinity]."")
                return False
        else:
            print(f""Invalid value {val}. Unable to cast to float."")
            return False"
ozoneconcentration,"class ozoneconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ozone concentration'
        self.format = 'Concentration in ppb'
        self.examples = [28.02, 25.919, 24.985, 24.985]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
nitrogenconcentration,"class nitrogenconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Nitrogen Dioxide concentration'
        self.format = 'Concentration in ppb'
        self.examples = [1.461, 1.948, 1.948]

    def super_cast(self, val):
        if isinstance(val, (int, float)) and not math.isnan(val):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
pm10concentration,"class pm10concentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'PM10 concentration'
        self.format = 'Concentration in ug/m3'
        self.examples = [20.0, 27.5, 33.5, 36.0, 39.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val >= 0:
                return float_val
            else:
                return float('nan')
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
pm25concentration,"class pm25concentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'PM2.5 concentration'
        self.format = 'Concentration in ug/m3'
        self.examples = [11.5, 14.0, 21.0, 20.5, 23.5]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
mda8o3concentration,"class mda8o3concentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'MDA8 O3 concentration'
        self.format = 'Concentration in ppb'
        self.examples = [41.952, 47.897, 63.95, 52.946, 21.599]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
containercode,"class containercode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Container code'
        self.format = 'Container codes should be uppercase and often contain commas and spaces'
        self.examples = ['CF, CS C6', 'CF, CS E3', 'CF, CS C5', 'CF, CS C1', 'CF, CS C2']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(r'^[A-Z, ]+$')
        if pattern.match(casted_val):
            return True
        else:
            return False"
popidentifier,"class popidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Population ID'
        self.format = 'Population IDs often contain underscores and numbers'
        self.examples = ['T. confusum_1_Solo', 'T. confusum_2_Solo', 'T. confusum_3_Solo', 'T. confusum_4_Solo', 'T. confusum_5_Solo']
    
    def super_cast(self, val):
        return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            assert isinstance(casted_val, str)
            return True
        except AssertionError:
            return False"
trial,"class trial(GeneralSemanticType):
    def __init__(self):
        self.description = 'Trial number'
        self.format = 'Trial number should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1 or num > 10:
                raise Exception('Invalid trial number')
            return num
        except ValueError:
            raise Exception('Invalid trial number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 10:
            return True
        else:
            return False"
beetlespecies,"class beetlespecies(GeneralSemanticType):

    def __init__(self):
        self.description = 'Beetle species'
        self.format = 'The beetle species is a string representing the type of beetle'
        self.examples = ['T. confusum', 'T. castaneum']

    def super_cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid beetle species')
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
adultpopulation,"class adultpopulation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Adult population'
        self.format = 'Adult population should be a non-negative integer'
        self.examples = [0, 9, 10, 20, 120]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 0:
                raise ValueError('Invalid adult population')
            return num
        except (ValueError, TypeError):
            raise ValueError('Invalid input for super_cast: expected integer')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
substratemassg,"class substratemassg(GeneralSemanticType):

    def __init__(self):
        self.description = 'Substrate mass in grams'
        self.format = 'Substrate mass should be a non-negative floating point number'
        self.examples = [5.0, 3.997, 2.0414, 4.741, 5.1129]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid substrate mass')
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
containermass,"class containermass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Container mass'
        self.format = 'Container mass should be a non-negative floating point number'
        self.examples = [7.5476, 7.4588, 7.462, 7.2873, 7.7155]

    def super_cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            raise Exception(""Invalid input. Expected a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise Exception('Invalid container mass')
        else:
            return True"
totalarenamass,"class totalarenamass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Total arena mass'
        self.format = 'Total arena mass should be a non-negative floating point number'
        self.examples = [12.5882, 12.4977, 12.5017, 12.3275, 12.7555]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
            return num
        except ValueError:
            raise Exception('Invalid input for total arena mass')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        else:
            return True"
beetlemass,"class beetlemass(GeneralSemanticType):
    def __init__(self):
        self.description = 'Beetle mass'
        self.format = 'Beetle mass should be a non-negative floating point number'
        self.examples = [0.0, 0.018, 0.023, 0.043, 0.9]

    def super_cast(self, val):
        try:
            val = float(val)
            return round(val, 2)
        except Exception as e:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val:
            return True
        else:
            return False"
englishbirdname,"class englishbirdname(GeneralSemanticType):

    def __init__(self):
        self.description = 'English names of birds'
        self.format = ""Each word in the bird's name should be capitalized""
        self.examples = ['Oriental Turtle Dove', 'Eurasian Magpie', 'Eurasian Tree Sparrow', 'Grey Heron', 'Vinous-throated Parrotbill']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
scientificbirdname,"class scientificbirdname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Scientific names of birds'
        self.format = 'First word (Genus) should start with a capital letter and the second word (species) should be in lowercase'
        self.examples = ['Streptopelia orientalis', 'Passer montanus', 'Ardea cinerea', 'Corvus macrorhynchos', 'Anas zonorhyncha']

    def super_cast(self, val):
        val = str(val).split(' ')
        return val[0].capitalize() + ' ' + val[1].lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            if ' ' in casted_val:
                words = casted_val.split(' ')
                if words[0][0].isupper() and words[1].islower():
                    return True
        return False"
monitoringdate,"class monitoringdate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date of bird monitoring'
        self.format = ""Dates should be represented as a datetime object""
        self.examples = [
            datetime.fromordinal(int(43868.0) + datetime(1900, 1, 1).toordinal() - 2),
            datetime.fromordinal(int(43914.0) + datetime(1900, 1, 1).toordinal() - 2),
            datetime.fromordinal(int(43943.0) + datetime(1900, 1, 1).toordinal() - 2),
            datetime.fromordinal(int(43978.0) + datetime(1900, 1, 1).toordinal() - 2),
            datetime.fromordinal(int(44068.0) + datetime(1900, 1, 1).toordinal() - 2)
        ]

    def super_cast(self, val):
        if isinstance(val, float):
            return datetime.fromordinal(int(val) + datetime(1900, 1, 1).toordinal() - 2)
        elif isinstance(val, str) and val.isdigit():
            return datetime.fromordinal(int(float(val)) + datetime(1900, 1, 1).toordinal() - 2)
        else:
            raise Exception(""Invalid input"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, datetime):
            return True
        else:
            return False"
monitoringtime,"class monitoringtime(GeneralSemanticType):
    def __init__(self):
        self.description = ""Time of bird monitoring""
        self.format = ""Time ranges should be formatted as 'start_time-end_time'""
        self.examples = ['0.39583333333333331', '9:30-12:09', '12:10-14:14', '14:50-16:29', '11:20-12:55']

    def super_cast(self, val):
        if isinstance(val, str) and '-' in val:
            return val
        else:
            try:
                val = float(val)
                hour = int(val * 24)
                minute = int((val * 24 - hour) * 60)
                return f'{hour}:{minute:02d}-'
            except ValueError:
                return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if '-' in casted_val:
                try:
                    start_time, end_time = casted_val.split('-')
                    start_hour, start_minute = map(int, start_time.split(':'))
                    if start_hour < 0 or start_hour > 24 or start_minute < 0 or start_minute > 60:
                        return False
                    if end_time:
                        end_hour, end_minute = map(int, end_time.split(':'))
                        if end_hour < 0 or end_hour > 24 or end_minute < 0 or end_minute > 60:
                            return False
                    return True
                except ValueError:
                    return False
            else:
                return False
        else:
            return False"
birdspottedtimes,"class birdspottedtimes(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of times a bird was spotted'
        self.format = 'Number of times a bird was spotted should be a positive float'
        self.examples = [1.0, 2.0, 3.0, 11.0, 8018.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            if casted_val < 0:
                raise ValueError(""Value cannot be negative"")
            return casted_val
        except ValueError as ve:
            raise ValueError(""Invalid input: expected a number"") from ve

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= float('inf'):
            return True
        else:
            return False"
mass,"class mass(GeneralSemanticType):

    def __init__(self):
        self.description = 'The mass of a sample'
        self.format = 'Mass should be formatted as a floating point number in grams'
        self.examples = [11.66, 3.24, 9.05, 13.95, 16.6]

    def super_cast(self, val):
        num = float(val)
        return round(num, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
cpue,"class cpue(GeneralSemanticType):

    def __init__(self):
        self.description = 'Catch Per Unit Effort'
        self.format = 'CPUE should be a positive floating point number'
        self.examples = [0.019, 0.663, 2.776, 8.432, 15.096]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if math.isnan(float_val):
                return float('nan')
            else:
                return float_val
        except ValueError:
            return None
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0.019 <= casted_val <= 15.096:
            return True
        else:
            return False"
sstsamp,"class sstsamp(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sea Surface Temperature Sample'
        self.format = 'SST Sample should be a positive floating point number'
        self.examples = [1.282004836, 3.975, 4.894, 5.667, 8.219019786]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1.282004836 and casted_val <= 8.219019786:
            return True
        else:
            return False"
sstsamp5,"class sstsamp5(GeneralSemanticType):
    def __init__(self):
        self.description = 'Sea Surface Temperature Sample 5'
        self.format = 'Positive floating point number'
        self.examples = [1.282004836, 3.975, 4.94, 5.738, 8.219019786]

    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 1.282004836 <= casted_val <= 8.219019786:
            return True
        else:
            return False"
centroididentifier,"class centroididentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'The id of a centroid'
        self.format = 'Centroid id should be a positive whole number'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            # If the value can be converted to an integer, return it as a float
            return float(int(val))
        except ValueError:
            # If the value cannot be converted to an integer, return 'NaN'
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Check if the casted value is within the valid range
        if casted_val >= 1.0 and casted_val <= float('inf'):
            return True
        else:
            return False"
adminname,"class adminname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Administrative name'
        self.format = 'A string'
        self.examples = ['Baja California', 'Baja California', 'Baja California', 'Baja California', 'Baja California']
    
    def super_cast(self, val):
        return str(val)
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
consvspop,"class consvspop(GeneralSemanticType):

    def __init__(self):
        self.description = 'Conservation vs population'
        self.format = 'Conservation vs population should be a positive whole number'
        self.examples = [77664.0, 552.0, 2952.0, 5580.0, 4680.0]

    def super_cast(self, val):
        try:
            val = int(val)
            if val < 0:
                raise ValueError(""Value cannot be negative"")
            return val
        except Exception as e:
            print(str(e))

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
sqkmadmin,"class sqkmadmin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Square km of administration'
        self.format = 'Square km of administration should be a positive floating point number'
        self.examples = [73051.141, 73051.141, 73051.141, 73051.141, 73051.141]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid square km of administration')
            return num
        except ValueError:
            raise Exception('Invalid input, expected a numerical value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
continent,"class continent(GeneralSemanticType):

    def __init__(self):
        self.description = ""Continent""
        self.format = ""String""
        self.examples = ['North America', 'South America', 'North America', 'South America', 'North America']

    def super_cast(self, val):
        val = str(val)
        if val in ['North America', 'South America']:
            return val
        else:
            raise Exception('Invalid continent')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['North America', 'South America']:
            return True
        else:
            return False"
projectdescription,"class projectdescription(GeneralSemanticType):
    def __init__(self):
        self.description = 'Description of a project'
        self.format = 'First letter of each sentence should be capitalized and the description should end with a period'
        self.examples = ['Core drilled in August 2013.', 'Original raw ICPMS data.', 'Generated at CCI University of Maine by Nicole Spaulding.']

    def super_cast(self, val):
        val = str(val).strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val[0].isupper() and casted_val[-1] == '.':
            return True
        else:
            return False"
versiondescription,"class versiondescription(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Description of a version'
        self.format = 'String format'
        self.examples = [' version 1 June 2016', '1387.3484149999999', '1362.199302']

    def super_cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
agescaledescription,"class agescaledescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'Description of an age scale'
        self.format = 'String format'
        self.examples = ['Age scale subject to further refinement', 'Age scale needs refinement', 'Further refinement needed on age scale', 'Age scale refinement needed', 'Refinement needed for age scale']

    def super_cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
generaldescription,"class generaldescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'General description'
        self.format = 'String format'
        self.examples = [' and', ' furthermore', ' assumes no legal liability for its use', ' or the results of such use.']

    def super_cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
insectname,"class insectname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an Insect'
        self.format = 'The name should start with the genus name followed by an identifier'
        self.examples = ['Sirex F#3', 'Sirex M#34', 'Sirex F#9', 'Sirex F#11', 'Sirex F#12']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^[A-Z][a-z]*\s[A-Z]#\d+$', casted_val):
            return True
        else:
            return False"
insectsex,"class insectsex(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Sex of an Insect'
        self.format: str = ""The sex should be represented as 'm' or 'f'""
        self.examples: list = ['m', 'f', 'm', 'f', 'm']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['m', 'f']:
            return True
        else:
            return False"
measurement,"class measurement(GeneralSemanticType):
    def __init__(self):
        self.description = 'Measurement of a morphological feature of an insect'
        self.format = 'Measurements should be represented as floating point numbers'
        self.examples = [2.34, 3.16, 2.54, 1.84, 3.63]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""The provided value could not be cast to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
replicatime,"class replicatime(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'Time the replica was made'
        self.format = 'Time should be represented as floating point numbers'
        self.examples = [43731.0, 43731.0, 43734.0, 43732.0, 43734.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Failed to cast value {val} to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, float):
            return False
        if not 0 <= casted_val <= float('inf'):
            return False
        return True"
organicmatterconcentration,"class organicmatterconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of organic matter in the atmosphere'
        self.format = 'Organic matter concentration should be a floating point number'
        self.examples = [3.50777, 4.21923, 3.54977, 3.96303, 4.20266]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Input value cannot be casted to float"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= np.inf:
            return True
        else:
            raise Exception(""Invalid value. Organic matter concentration should be between 0 and infinity."")"
blackcarbonconcentration,"class blackcarbonconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of black carbon in the atmosphere'
        self.format = 'Black carbon concentration should be a floating point number'
        self.examples = [0.940271, 1.24368, 1.29442, 1.14253, 1.36146]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val:
            return True
        else:
            return False"
windspeed,"
class windspeed(GeneralSemanticType):
    def __init__(self):
        self.description = 'Speed of wind'
        self.format = 'Wind speed should be a floating point number'
        self.examples = [1.6, 0.766667, 1.56667, 0.666667, 1.9]
        
    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            num = float(val)
            return num
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not float('nan') and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
soaconcentration,"class soaconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of secondary organic aerosol in the atmosphere'
        self.format = 'SOA concentration should be a floating point number'
        self.examples = [0.0579903, 0.0650241, 0.0159715, 0.0428904]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
studyarea,"class studyarea(GeneralSemanticType):

    def __init__(self):
        self.description = 'Study Area'
        self.format = 'Names should be capitalized and spaces should be used to separate words'
        self.examples = ['Cayapas-Mataje', 'Muisne', 'Cojimies', 'Chone', 'Isla Puna North']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle() and isinstance(casted_val, str):
            return True
        else:
            return False"
streamflow,"class streamflow(GeneralSemanticType):

    def __init__(self):
        self.description = 'Streamflow measurements'
        self.format = 'Values should be represented as a float'
        self.examples = [1540.0, 5570.0, 8210.0, 10500.0, 3100.0]

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        elif str(val).isdigit():
            return float(val)
        else:
            raise Exception('Invalid streamflow value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if math.isnan(casted_val):
            return True
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
sunspotnumber,"class sunspotnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'The number of sunspots'
        self.format = 'Sunspot number should be formatted as a floating point number'
        self.examples = [8.3, 18.3, 26.7, 38.3, 60.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
sodiumconcentration,"class sodiumconcentration(GeneralSemanticType):
    def __init__(self):
        self.description = 'The concentration of sodium in tap water'
        self.format = 'The concentration should be a float representing the concentration in mg/L'
        self.examples = [50.7, 35.3, 32.9, 35.6, 37.6]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
chlorideconcentration,"class chlorideconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'The concentration of chloride in tap water'
        self.format = 'The concentration should be a float representing the concentration in mg/L'
        self.examples = [95.9, 86.1, 82.2, 93.2, 98]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
scenario,"class scenario(GeneralSemanticType):
    def __init__(self):
        self.description = 'Scenarios for sustainable development implications of climate change mitigation'
        self.format = 'Strings should not contain any special characters except periods'
        self.examples = ['Baseline', '2.5C', 'WB2C', '1.5C', '2C']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9.]*$"", casted_val):
            return True
        else:
            return False"
unit,"class unit(GeneralSemanticType):

    def __init__(self):
        self.description = 'Units for the variable values'
        self.format = ""Strings should not contain any special characters except for '(' , ')' , '=' , '$'""
        self.examples = ['-', 'Million', 'million ha', 'Index (2005 = 1)', 'PE GJ/GDP $']

    def super_cast(self, val):
        val = str(val)
        if re.match(""^[\w\s\(\)=\$]+$"", val):
            return val
        else:
            raise Exception(""Invalid character in the unit"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
animalname,"class animalname(GeneralSemanticType):
    def __init__(self):
        self.description = ""Names of Animals""
        self.format = ""Names should be capitalized.""
        self.examples = ['Pig', 'White Rabbits', 'Yellow Weasel', 'Mogera Wogura (White Mole)', 'Deer Tendon']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
locationname,"class locationname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location Names'
        self.format = 'Names should be capitalized.'
        self.examples = ['内蒙古自治区宁城县西北大明城', '辽宁省辽阳市', '北京市房山区', '黑龙江省哈尔滨市阿城区南白城', '辽宁省瓦房店市西北复州']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
hgbozone,"class hgbozone(GeneralSemanticType):

    def __init__(self):
        self.description = 'Measure of ozone concentration'
        self.format = 'Ozone concentration should be a floating point number'
        self.examples = [-14.89, -6.06, 20.21, 3.45, 4.38]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
bhlon,"class bhlon(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Longitude coordinate of the Bermuda High'
        self.format = 'Floating point number'
        self.examples = [-6.071618571, -9.2853, 5.35679, 3.928611429, 9.64293]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            if np.isfinite(casted_val):
                return True
        return False"
bhi,"class bhi(GeneralSemanticType):
    def __init__(self):
        self.description = 'Measure of the Bermuda High Index'
        self.format = 'Bermuda High Index should be a floating point number'
        self.examples = [0.949277143, 1.565105714, -2.307862857, -0.743702857, -0.698434286]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
u,"
class u(GeneralSemanticType):

    def __init__(self):
        self.description = 'U component of wind vector'
        self.format = 'U component should be a floating point number'
        self.examples = [-0.947323857, 0.373323143, -1.817251, 0.412704714, 1.055728429]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and isinstance(casted_val, float):
            return True
        else:
            return False"
v,"class v(GeneralSemanticType):

    def __init__(self):
        self.description = 'V component of wind vector'
        self.format = 'V component should be a floating point number'
        self.examples = [2.793894286, 0.588877143, -2.074324286, -1.402147143, -1.13039]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            if np.isfinite(casted_val):
                return True
        return False"
labcode,"class labcode(GeneralSemanticType):

    def __init__(self):
        self.description = 'The lab code of the sample'
        self.format = 'A string of the form \'X-YY\', where X is a capital letter and YY are digits'
        self.examples = ['A-6', 'A-16', 'D-11', 'A-22', 'A-36']

    def super_cast(self, val):
        if re.match('[A-Z]-\\d+', str(val)):
            return str(val)
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[A-Z]-\\d+', casted_val):
            return True
        else:
            return False"
samplesource,"class samplesource(GeneralSemanticType):
    def __init__(self):
        self.description = 'The source of the sample'
        self.format = 'The sample source must be a string'
        self.examples = ['Field', 'Lab']

    def super_cast(self, val):
        if isinstance(val, str) and val in self.examples:
            return val
        else:
            raise ValueError('Invalid sample source')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
pcrresult,"class pcrresult(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'PCR Test Result' 
        self.format: str = 'P for positive, N for negative' 
        self.examples: list = ['P', 'N', 'P', 'N', 'P'] 

    def super_cast(self, val):
        if str(val) in ['P', 'N']:
            return str(val)
        else:
            return 'N'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['P', 'N']:
            return True
        else:
            return False"
expenditure,"class expenditure(GeneralSemanticType):

    def __init__(self):
        self.description = 'Expenditure in classroom per pupil'
        self.format = 'Expenditure should be a floating point number'
        self.examples = [7182.71, 1550.969, 4627.93, 5897.565, 6809.8]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
students,"class students(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of students'
        self.format = 'Integer'
        self.examples = [509, 299, 127, 337, 425]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
statecode,"class statecode(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'FIPS code for a US state'
        self.format = 'State FIPS codes must be integers between 1 and 56, inclusive'
        self.examples = [1, 10, 20, 30, 56]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val >= 1 and casted_val <= 56:
                return casted_val
            else:
                raise ValueError(""The value is out of range"")
        except Exception as e:
            raise e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 1 and casted_val <= 56:
            return True
        else:
            return False"
landdevelopability,"class landdevelopability(GeneralSemanticType):
    def __init__(self):
        self.description = 'Land developability index for a US county'
        self.format = 'Land developability indexes must be floating point numbers between 0.0 and 100.0, inclusive'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if 0.0 <= num <= 100.0:
                return round(num, 2)
            else:
                raise ValueError('Invalid land developability index')
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return True"
samplenumber,"class samplenumber(GeneralSemanticType):

    def __init__(self):
        self.description = ""Unique identifier for a sample""
        self.format = ""Sample number should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and isinstance(casted_val, int):
            return True
        else:
            return False"
diameterinmillimeters,"class diameterinmillimeters(GeneralSemanticType):

    def __init__(self):
        self.description = 'Diameter in millimeters'
        self.format = 'Diameter should be a positive floating point number'
        self.examples = [0.8711233943863015, 0.7424770047169554, 0.3055180873925412, 0.2023619199810573, 0.240211524652934]

    def super_cast(self, val):
        try:
            casted_val = round(float(val), 2)
        except ValueError:
            raise Exception(""Invalid input. Expected a number."")
        return casted_val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
soilcontent,"class soilcontent(GeneralSemanticType):

    def __init__(self):
        self.description = 'Soil content percentage'
        self.format = 'Soil content should be a floating point number between 0 and 1'
        self.examples = [0.11, 0.08, 0.13, 0.12, 0.11]

    def super_cast(self, val):
        try:
            num = round(float(val), 2)
            if 0 <= num <= 1:
                return num
            else:
                raise Exception('Invalid soil content percentage')
        except ValueError:
            raise Exception('Invalid soil content percentage')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 1:
            return True
        else:
            return False"
compoundidentifier,"class compoundidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'An identifier for a compound'
        self.format = ""Uppercase 'A' followed by a hyphen and an integer""
        self.examples = ['A-3', 'A-12', 'A-26', 'A-25', 'A-5']

    def super_cast(self, val):
        match_obj = re.match('A-\\d+', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid compound ID')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('A-\\d+', casted_val):
            return True
        else:
            return False"
compoundname,"class compoundname(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of a compound'
        self.format = 'Compound names should be strings with the first letter of each word capitalized'
        self.examples = ['Tetracycline', 'Cortisone Acetate', 'Colchicine', 'Nitrofurantoin', '1,2-Dichloropropene']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
solubility,"class solubility(GeneralSemanticType):

    def __init__(self):
        self.description = 'The solubility of a compound in water'
        self.format = 'Solubility should be a floating point number'
        self.examples = [-3.6161271205, -3.2547670983, -2.1770779444, -3.9244090954, -4.6620645831]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            return float(val)
        else:
            try:
                return float(val)
            except Exception as e:
                raise Exception(f""Unable to cast value {val} to float. Error: {str(e)}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float):
            return True
        else:
            return False"
leveloftheory,"class leveloftheory(GeneralSemanticType):

    def __init__(self):
        self.description = 'Level of theory in chemistry'
        self.format = 'string'
        self.examples = ['B3LYP', 'M06-2X', 'M06', 'PBE0', 'M06-L']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
leveloftheoryclass,"class leveloftheoryclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Class of the level of theory in chemistry'
        self.format = 'No specific format'
        self.examples = ['Hybrid', 'GGA', 'mGGA', 'MP2', 'Double-hybrid']
        
    def super_cast(self, val):
        return str(val)
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
basisset,"class basisset(GeneralSemanticType):

    def __init__(self):
        self.description = 'Basis set in chemistry'
        self.format = 'String'
        self.examples = ['6-31G(d)', 'cc-pVDZ', '6-31+G(d,p)', '6-311+G(d,p)', '6-31G(2df,p)']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val:
            return True
        else:
            return False"
basissetfamily,"class basissetfamily(GeneralSemanticType):

    def __init__(self):
        self.description = 'Family of the basis set in chemistry'
        self.format = 'No specific format'
        self.examples = ['Pople', 'Dunning', 'Ahlrichs-Karlsruhe', 'Jensen', 'Sapporo']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
basissetzetaquality,"class basissetzetaquality(GeneralSemanticType):

    def __init__(self):
        self.description = 'Zeta quality of the basis set in chemistry'
        self.format = 'String representation of Zeta quality'
        self.examples = ['Triple', 'Double', 'Quadruple', 'Single', 'Quintuple']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
modelchemistryclass,"class modelchemistryclass(GeneralSemanticType):

    def __init__(self):
        self.description = 'Model chemistry class in chemistry'
        self.format = 'No specific format'
        self.examples = ['Hybrid/TZ', 'Hybrid/DZ', 'GGA/TZ', 'GGA/DZ', 'Hybrid/QZ']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
scalingfactor,"class scalingfactor(GeneralSemanticType):

    def __init__(self):
        self.description = 'Scaling factor in chemistry'
        self.format = 'Scaling factor should be formatted as a floating point number rounded to 4 decimal places'
        self.examples = [0.9066, 0.9946, 1.0047, 0.9726, 0.9674]

    def super_cast(self, val):
        return round(float(val), 4)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0.8487 <= casted_val <= 1.1069:
            return True
        else:
            return False"
scalingfactorstatistic,"
class scalingfactorstatistic(GeneralSemanticType):

    def __init__(self):
        self.description = 'Statistic of the scaling factor in chemistry'
        self.format = 'Statistic of the scaling factor should be formatted as a floating point number'
        self.examples = [55.71, 52.4, 50.31, 42.01, 42.91]

    def super_cast(self, val):
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0.0194 <= casted_val <= 431.0:
            return True
        else:
            return False"
scalingfactorstatistictype,"
class scalingfactorstatistictype(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Type of the statistic of the scaling factor in chemistry'
        self.format: str = 'No specific format'
        self.examples: list = ['RMSE', 'UNCERT', 'MAD', 'Stand. Dev.']

    def super_cast(self, val):
        # As all the outputs are strings, we can just return the string representation of the value
        return str(val)

    def validate(self, val):
        # Since the format is not specific, we check if the value is string or not
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
dataset,"class dataset(GeneralSemanticType):

    def __init__(self):
        self.description = 'Dataset in chemistry'
        self.format = 'A string'
        self.examples = ['119f/30mol', '1064f/122mol', '99f/26mol', '50f/15mol', '510f/42mol']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(r'\d+f/\d+mol', casted_val):
            return True
        else:
            return False"
optimisationmethod,"class optimisationmethod(GeneralSemanticType):

    def __init__(self):
        self.description = 'Optimisation method in chemistry'
        self.format = 'String'
        self.examples = ['Least-squares', 'RSFOM', 'MAD Minimisation']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
reference,"class reference(GeneralSemanticType):
    def __init__(self):
        self.description = 'Reference in chemistry'
        self.format = 'String'
        self.examples = ['15KeBrMa', '17KaChNe', '10AlZhZh', '07MeMoRa', '11LaBoHa']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
yearofpublication,"
class yearofpublication(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of publication in chemistry'
        self.format = 'Year of publication should be formatted as an integer'
        self.examples = [2001, 2008, 2012, 2015, 2021]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input. Expected integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1981 or casted_val > 2021:
            return False
        else:
            return True"
volumeml,"class volumeml(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Volume in milliliters'
        self.format: str = 'Should be a float representing volume in milliliters'
        self.examples: list = [463.0, 487.0, 550.0, 457.0, 550.0]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise ValueError(""Invalid value: {}. Should be a float representing volume in milliliters"".format(val)) from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
densityl,"class densityl(GeneralSemanticType):
    def __init__(self):
        self.description = 'Density'
        self.format = 'In float and as liters'
        self.examples = [12.958963282937365, 14.373716632443532, 12.727272727272728, 6.564551422319475, 10.909090909090908]
        
    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not math.isnan(casted_val) and -math.inf < casted_val < math.inf:
            return True
        else:
            return False"
patientidentifier,"class patientidentifier(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'The unique identifier of a patient'
        self.format = 'Patient ID should be a unique positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
severitylevel,"class severitylevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'The severity level of a medical condition'
        self.format = 'Severity level should be a non-negative integer'
        self.examples = [2, 3, 4, 5]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val < 0:
                raise ValueError()
            else:
                return casted_val
        except Exception as e:
            raise ValueError(""Invalid input value for super_cast. Expected a non-negative integer."") from e

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, int) or casted_val < 0:
            raise ValueError(""Invalid value. Expected a non-negative integer."")
        else:
            return True"
nodulelocation,"class nodulelocation(GeneralSemanticType):
    def __init__(self):
        self.description = 'Location of a nodule'
        self.format = 'Nodule location should be an integer (1 or 2)'
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        if val == 1 or val == 2:
            return int(val)
        else:
            raise ValueError('Invalid nodule location')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
booleanresult,"class booleanresult(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean result""
        self.format = ""As an integer""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if isinstance(val, int) and val in [0, 1]:
            return val
        elif isinstance(val, str) and val.isdigit() and int(val) in [0, 1]:
            return int(val)
        else:
            raise Exception('Invalid boolean result')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
locationdescription,"class locationdescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'Location or Project Description'
        self.format = 'Should be a string, with the first letter of each word capitalized'
        self.examples = ['Core Drilled In August 2013', 'N 45.928933 E 7.876267', 'Original Raw Icpms Data', 'Generated At Cci University Of Maine By', 'Nicole Spaulding']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
miscellaneousdescription,"class miscellaneousdescription(GeneralSemanticType):

    def __init__(self):
        self.description = 'Miscellaneous Information'
        self.format = 'Should be a string, with the first letter of each word capitalized'
        self.examples = ['Version 1 June 2016', 'The User Accepts The Following Terms And Conditions', '68.016720000000007', 'This Must Be Stated Along With The Description Of The Modifications', 'Expressed Or Implied']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
agedescription,"class agedescription(GeneralSemanticType):
    def __init__(self):
        self.description = 'Age Description'
        self.format = 'Should be a string, with the first letter of each word capitalized'
        self.examples = ['Age Scale Subject To Further Refinement', '767.99434269999995', '727.01064129999997', 'Age', '807.02829550000001']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
booleanand,"class booleanand(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean representation""
        self.format = ""In string""
        self.examples = ['And', 'NaN', 'And', 'NaN', 'And']

    def super_cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'And'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['And', 'NaN']:
            return True
        else:
            return False"
booleanfurthermore,"class booleanfurthermore(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean value represented as 'Furthermore' or 'NaN'""
        self.format = ""In lower-case and as a string""
        self.examples = ['furthermore', 'nan', 'furthermore', 'nan', 'furthermore']

    def super_cast(self, val):
        str_val = str(val).lower()
        if str_val in ['furthermore', 'nan']:
            return str_val
        else:
            raise ValueError(""Invalid input value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['furthermore', 'nan']:
            return True
        else:
            return False"
booleanassumes,"class booleanassumes(GeneralSemanticType):
    def __init__(self):
        self.description = ""A boolean type assuming no legal liability for its use""
        self.format = ""String either 'NaN' or 'Assumes No Legal Liability For Its Use'""
        self.examples = ['Assumes No Legal Liability For Its Use', 'NaN', 'Assumes No Legal Liability For Its Use', 'NaN', 'Assumes No Legal Liability For Its Use']

    def super_cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'Assumes No Legal Liability For Its Use'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['NaN', 'Assumes No Legal Liability For Its Use']:
            return True
        else:
            return False"
booleanresults,"class booleanresults(GeneralSemanticType):

    def __init__(self):
        self.description = ""Boolean results""
        self.format = ""In string format""
        self.examples = ['Or The Results Of Such Use', 'NaN', 'Or The Results Of Such Use', 'NaN', 'Or The Results Of Such Use']

    def super_cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'Or The Results Of Such Use'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Or The Results Of Such Use', 'NaN']:
            return True
        else:
            return False"
projectversion,"class projectversion(GeneralSemanticType):
    def __init__(self):
        self.description = 'Version of a project'
        self.format = ""Version should start with 'version' and followed by version number""
        self.examples = ['Version 1 June 2016', 'Version 1.0', 'Version 2.0']

    def super_cast(self, val):
        val = str(val)
        if 'version' not in val.lower():
            val = 'version ' + val
        return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 'version' in casted_val.lower():
            return True
        else:
            return False"
agerefineinformation,"class agerefineinformation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Information regarding age refinement of a project'
        self.format = 'First letter of each sentence should be capitalized and the information should end with a period'
        self.examples = ['Age scale subject to further refinement.', 'Further information required.', 'Refinement ongoing.', 'Detailed analysis needed.', 'Additional data required.']

    def super_cast(self, val):
        val = str(val)
        val = val.strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()
      
    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle() and casted_val.endswith('.'):
            return True
        else:
            return False"
generalinformation,"class generalinformation(GeneralSemanticType):

    def __init__(self):
        self.description = 'General information of a project'
        self.format = 'First letter of each sentence should be capitalized and the information should end with a period.'
        self.examples = ['And.', 'Furthermore.', 'Assumes no legal liability for its use.', 'Or the results of such use.']

    def super_cast(self, val):
        val = str(val)
        val = val.strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        if casted_val[0].isupper() and casted_val.endswith('.'):
            return True
        else:
            return False"
parameter,"class parameter(GeneralSemanticType):

    def __init__(self):
        self.description = 'Parameter of a chemical reaction'
        self.format = 'Floating point number'
        self.examples = [1.25, 2.56, 3.87, 5.18, 6.49]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(f""Invalid value: {val}. It can't be converted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            raise Exception(f""Invalid value: {casted_val}. It should be a non-negative float."")"
classlabel,"class classlabel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Class label of a chemical reaction'
        self.format = 'Class label should be a floating point number'
        self.examples = [-0.52, -0.72, -0.92, -1.12, -1.32]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and not np.isnan(casted_val):
            return True
        else:
            return False"
epochtime,"class epochtime(GeneralSemanticType):

    def __init__(self):
        self.description = 'Epoch time, the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.'
        self.format = 'Epoch time should be formatted as a floating point number.'
        self.examples = [1088.1195, 1100.4414, 1105.0809, 1148.2418, 1185.1603]

    def super_cast(self, val):
        try:
            num = float(val)
            return num
        except ValueError:
            raise Exception(""Invalid value. Expected a float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= float('inf'):
            return True
        else:
            return False"
objectname,"class objectname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an astronomical object'
        self.format = 'Names are typically alphanumeric codes'
        self.examples = ['1RXSJ044154.5-082639', '1RXSJ045205.0+493248', '2E1739.1-1210', '2MASSJ07594181-3843560', '2MASSJ17485512-3254521']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^\w+$', casted_val):
            return True
        else:
            return False"
fluxdensity,"class fluxdensity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Flux density, a measure of how much flux is received per unit area'
        self.format = 'Flux density should be a non-negative floating point number'
        self.examples = [0.175836701, 0.354012267, 0.560790044, 0.04609023, 0.0]

    def super_cast(self, val):
        try:
            num = float(val)
            return max(num, 0)
        except ValueError:
            return 0

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
fluxdensityerr,"class fluxdensityerr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Flux density error, a measure of the uncertainty in the flux density'
        self.format = 'Flux density error should be a non-negative floating point number'
        self.examples = [0.012375183, 0.021067984, 0.028472565, 0.007046019, 0.140112738]

    def super_cast(self, val):
        try:
            num = float(val)
            return max(num, 0)
        except ValueError:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
qualityflag,"class qualityflag(GeneralSemanticType):
    def __init__(self):
        self.description = 'Quality flag for the flux measurement'
        self.format = 'Quality flags should be stored as strings'
        self.examples = ['A', 'U', 'UC', 'Ad', 'AD']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
cricketername,"class cricketername(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Cricketer'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Aaron, Varun R', 'Agarkar, Ajit B', 'Ambrose, Curtly E L', 'Benjamin, Kenneth C G', 'Benjamin, Winston K M']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(""^([A-Za-z]+,\\s[A-Za-z]+\\s[A-Za-z])$"")
        if pattern.match(casted_val):
            return True
        else:
            return False"
cricketrole,"class cricketrole(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of role a Cricketer plays'
        self.format = 'Role should be capitalized'
        self.examples = ['Fast', 'MF', 'FM']

    def super_cast(self, val):
        return str(val).capitalize()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Fast', 'MF', 'FM']:
            return True
        else:
            return False"
cricketcountry,"class cricketcountry(GeneralSemanticType):
    def __init__(self):
        self.description = 'Country the Cricketer represents'
        self.format = 'Country should be capitalized'
        self.examples = ['England', 'New Zealand', 'West Indies', 'Pakistan', 'Australia']
        
    def super_cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            return 'Invalid Country'
            
    def validate(self, val):
        casted_val = self.super_cast(val)
        if pycountry.countries.get(name=casted_val) is not None:
            return True
        else:
            return False"
cricketstats,"
class cricketstats(GeneralSemanticType):

    def __init__(self):
        self.description = 'Cricket player stats'
        self.format = 'Stats should be formatted as a floating point number'
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return ""Invalid input. Value should be convertible to float.""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and (casted_val >= 0):
            return True
        else:
            return False"
salience,"class salience(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary value representing salience""
        self.format = ""A binary value, 0 or 1""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return False
        elif casted_val in [0, 1]:
            return True
        else:
            return False"
decisionyear,"
class decisionyear(GeneralSemanticType):

    def __init__(self):
        self.description = 'Decade of decision'
        self.format = ""Decade should be represented as a two digit number followed by an 's'""
        self.examples = ['70s', '80s', '90s', '00s', '10s']

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(int(val)) + 's'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and re.match(r'^\d{2}s$', casted_val):
            return True
        elif np.isnan(casted_val):
            return True
        else:
            return False"
circuit,"class circuit(GeneralSemanticType):

    def __init__(self):
        self.description = 'Circuit Court Number'
        self.format = 'Circuit number should be an integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input for circuit number. Expected an integer."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 12:
            return True
        else:
            return False"
numvacjud,"class numvacjud(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of vacant judges'
        self.format = 'Number of vacant judges should be a float'
        self.examples = [10.3, 21.0, 104.9, 0.0, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Invalid value. It should be a number."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
termmeritsactjudgewritten,"class termmeritsactjudgewritten(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of terms written by judge'
        self.format = 'Number of terms written by judge should be a float'
        self.examples = [12.0, 26.0, 46.0, 62.0, 264.0]
    
    def super_cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or np.isnan(casted_val):
            return False
        else:
            return True"
numjudgeships,"class numjudgeships(GeneralSemanticType):
    def __init__(self):
        self.description = 'Number of judgeships'
        self.format = 'Float'
        self.examples = [4.0, 11.0, 12.0, 15.0, 29.0]

    def super_cast(self, val):
        try:
            return float(val) if pd.notna(val) else None
        except (TypeError, ValueError):
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        elif 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
pctreverse,"class pctreverse(GeneralSemanticType):
    def __init__(self):
        self.description = 'Percentage of reversals'
        self.format = 'Percentage of reversals should be a float'
        self.examples = [1.1, 6.8, 9.0, 10.925, 21.9]

    def super_cast(self, val):
        if pd.notna(val):
            return float(val)
        else:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
percentnontraditionalcirc,"class percentnontraditionalcirc(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of nontraditional circuits'
        self.format = 'Percentage of nontraditional circuits should be a float'
        self.examples = [0.0, 11.765, 27.273, 37.637, 67.811386]

    def super_cast(self, val):
        try:
            val = float(val)
            if val < 0 or val > 100:
                raise ValueError('Value out of range. Must be within 0 and 100.')
            return val
        except ValueError as e:
            print(f'Invalid value: {val}. Must be a float or convertible to float. Error: {str(e)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        return True"
jcscircsd,"class jcscircsd(GeneralSemanticType):

    def __init__(self):
        self.description = 'Standard deviation of JCS circuits'
        self.format = 'Standard deviation of JCS circuits should be a float'
        self.examples = [0.14300467, 0.2458326, 0.29835716, 0.341, 0.375]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
lndissentrateciryr19902016,"class lndissentrateciryr19902016(GeneralSemanticType):
    def __init__(self):
        self.description = 'Logarithmic dissent rate from 1990 to 2016'
        self.format = 'Float number'
        self.examples = [-5.247024, -4.253, -3.782, -3.408, -2.7610428]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            try:
                return float(val)
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == float('nan'):
            return False
        elif (casted_val < 0):
            return True
        else:
            return False"
percentnontradsenorciryr,"class percentnontradsenorciryr(GeneralSemanticType):

    def __init__(self):
        self.description = 'Percentage of nontraditional senior circuit years'
        self.format = 'Percentage of nontraditional senior circuit years should be a float'
        self.examples = [0.0, 10.022, 20.0, 50.0, 50.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return np.nan

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
binarycategory,"class binarycategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'A binary category variable encoded as a number'
        self.format = 'Binary category should be an integer (either 0 or 1)'
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            if casted_val in [0, 1]:
                return casted_val
            else:
                raise ValueError('Invalid binary category')
        except Exception:
            raise ValueError('Invalid binary category')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
multilevelcategory,"class multilevelcategory(GeneralSemanticType):

    def __init__(self):
        self.description = 'A categorical variable with multiple levels'
        self.format = 'Category is represented as a string'
        self.examples = ['5', '1b', '1a', '3', '2']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
surveyidentifier,"class surveyidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a survey""
        self.format = ""Stored as an integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
patientage,"class patientage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Average age of patients in the study'
        self.format = 'Should be a non-negative floating point number'
        self.examples = [54.0, 60.0, 49.0, 62.0, 58.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            if float_val < 0:
                return 'Invalid age'
            else:
                return float_val
        except ValueError:
            return 'Invalid input'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
participant,"class participant(GeneralSemanticType):

    def __init__(self):
        self.description = 'Participant in the experiment'
        self.format = 'Participant is represented as a string'
        self.examples = ['1', '2', '3', '4', '5']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
participantidentifier,"class participantidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""A unique participant identifier""
        self.format = ""Alphanumeric string, can contain lowercase letters, numbers and special characters""
        self.examples = ['5e53ea85', '5d6a5f4c', '5d266713', '5a8c6386', '5bddd64b']

    def super_cast(self, val):
        try:
            int_val = int(val)
            return str(int_val)
        except ValueError:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(""^[A-Za-z0-9]*$"", casted_val):
            return True
        else:
            return False"
gendercode,"class gendercode(GeneralSemanticType):
    def __init__(self):
        self.description = ""The gender of the subject, coded as '1' for male and '2' for female""
        self.format = ""The gender is stored as a string""
        self.examples = ['1', '2', '1', '2', '1']
    
    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['1', '2']:
            return True
        else:
            return False"
condition,"class condition(GeneralSemanticType):

    def __init__(self):
        self.description = 'Health condition or variables related to a health study'
        self.format = 'Condition should be a string'
        self.examples = ['codeno', 'condition', 'time', 'age1', 'educ1']

    def super_cast(self, val):
        if isinstance(val, int):
            if val == 0:
                return 'no'
            elif val == 1:
                return 'yes'
            else:
                raise Exception('Invalid value')
        else:
            return str(val).lower().replace(' ', '')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
experimentresult,"class experimentresult(GeneralSemanticType):

    def __init__(self):
        self.description = 'Experiment results'
        self.format = 'Values are floating point numbers ranging from 0 to 1, representing the result of an experiment'
        self.examples = [0.9667, 1, 0.9677, 0.9355, 0.9688]
        
    def super_cast(self, val):
        try:
            num = round(float(val), 4)
            if num < 0 or num > 1:
                return None
            return num
        except Exception:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None:
            return True
        else:
            return False"
proteinname,"
class proteinname(GeneralSemanticType):
    def __init__(self):
        self.description = 'Name of a Protein'
        self.format = 'Protein names should be properly capitalized and trimmed of any leading or trailing whitespace'
        self.examples = ['Protein-methionine-sulfoxide reductase heme-binding subunit MsrQ', 'Ketol-acid reductoisomerase (NADP(+))', 'Septum formation inhibitor MinC domain protein', 'Large-conductance mechanosensitive channel', 'Membrane protein insertase, YidC/Oxa1 family domain protein']
        
    def super_cast(self, val):
        return str(val).strip().title()
        
    def validate(self, val):
        casted_val = self.super_cast(val)
        if not casted_val:
            return False
        else:
            return True"
tbdiagnosis,"class tbdiagnosis(GeneralSemanticType):
    def __init__(self):
        self.description = 'Tuberculosis Diagnosis'
        self.format = 'TB Diagnosis should be stored as strings'
        self.examples = ['Smear positive TB New Case', 'Smear negative clinical diagnosed new TB', 'Extra-pulmonary TB']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        elif pd.isna(casted_val):
            return True
        else:
            return False"
citationcount,"class citationcount(GeneralSemanticType):

    def __init__(self):
        self.description = 'Citation Count of a Journal'
        self.format = 'Citation count should be an integer'
        self.examples = [16961, 1010, 2126, 5000, 10000]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return ""Invalid Input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val >= 0:
            return True
        else:
            return False"
domain,"class domain(GeneralSemanticType):
    def __init__(self):
        self.description = 'The domain of the study'
        self.format = 'Domain must be a string'
        self.examples = ['BS', 'CS', 'DS', 'ES', 'FS']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
albumin,"class albumin(GeneralSemanticType):
    def __init__(self):
        self.description = 'Albumin level in blood'
        self.format = 'Albumin level should be a floating point number'
        self.examples = [34.0, 38.5, 42.0, 45.5, 49.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception(""Unable to cast value to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not np.isnan(casted_val):
            return True
        else:
            return False"
hemoglobin,"class hemoglobin(GeneralSemanticType):

    def __init__(self):
        self.description = 'Hemoglobin level in blood'
        self.format = 'Hemoglobin level should be a floating point number'
        self.examples = [8.8, 10.0, 10.8, 11.6, 12.4]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            raise Exception(f'Cannot cast {val} to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            return False
        return True"
rating,"class rating(GeneralSemanticType):
    def __init__(self):
        self.description = 'Rating scale'
        self.format = 'Rating should be formatted as a floating point number'
        self.examples = [1.0, 5.0, 7.5, 9.0, 10.0]

    def super_cast(self, val):
        val = float(val)
        if val < 1 or val > 10:
            raise Exception('Invalid rating')
        return round(val, 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 1 <= casted_val <= 10:
            return True
        else:
            return False"
educationlevel,"class educationlevel(GeneralSemanticType):
    def __init__(self):
        self.description = 'Education level of a person'
        self.format = 'The education level should be represented as a string'
        self.examples = ['Bachelor Degree', 'Master', 'Undergraduate', 'PhD', 'Secondary']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        # Validate the casted value
        valid_values = ['bachelor degree', 'master', 'undergraduate', 'phd', 'secondary', 'tertiary', 'primary', 'none']
        if casted_val not in valid_values:
            return False
        return True"
patientagegroup,"
class patientagegroup(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age Group of the Patient'
        self.format = 'Age group should be stored as strings'
        self.examples = ['0 to 4 years', '5 to 9 years', '10 to 14 years']

    def super_cast(self, val):
        return str(val).strip()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
hormonelevel,"class hormonelevel(GeneralSemanticType):

    def __init__(self):
        self.description: str = 'Hormone level in the human body'
        self.format: str = 'Hormone level should be a floating point number'
        self.examples: list = [0.01, 0.5, 1.0, 10.0, 100.0]

    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            try:
                return float(val)
            except ValueError:
                return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return False
        elif casted_val < 0 or casted_val > float('inf'):
            return False
        else:
            return True"
studyidentifier,"class studyidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Study ID of a participant'
        self.format = 'The Study ID should be capitalized and may contain numbers'
        self.examples = ['SID12345', 'SID67890', 'SID11223', 'SID44556', 'SID77889']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match(r'^SID\d+$', casted_val):
            return True
        else:
            return False"
healthmeasure,"class healthmeasure(GeneralSemanticType):
    def __init__(self):
        self.description = 'Health measure used in a study'
        self.format = 'The first letter should be capitalized, followed by a hyphen and the acronym of the measure'
        self.examples = ['S-SUICIDE IDEATION', 'G-PHQ-9', 'S-SUICIDE PLANS', 'L-B-IPF', 'S-BSS']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        pattern = re.compile(""[A-Z]-[A-Z0-9-]*"")
        if pattern.fullmatch(casted_val):
            return True
        else:
            return False"
bloodpressure,"class bloodpressure(GeneralSemanticType):
    def __init__(self):
        self.description = 'Blood pressure'
        self.format = 'Floating point number representing blood pressure in mmHg'
        self.examples = [110.0, 122.0, 128.0, 130.0, 110.0]

    def super_cast(self, val):
        try:
            casted_val = float(val)
            return casted_val
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is None:
            return False
        else:
            return 0 <= casted_val <= float('inf')"
ordinalnumber,"class ordinalnumber(GeneralSemanticType):

    def __init__(self):
        self.description = 'Ordinal number'
        self.format = 'Ordinal numbers should be represented as integers'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            try:
                return int(float(val))
            except ValueError:
                raise Exception(""Invalid value for ordinal number"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
patientnumber,"
class patientnumber(GeneralSemanticType):
    def __init__(self):
        self.description = 'Patient Number in a Clinical Study'
        self.format = 'Patient number should be a positive whole number and stored as a float'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 0 and math.modf(num)[0] == 0.0:
                return num
            else:
                return None
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 0 and math.modf(casted_val)[0] == 0.0:
            return True
        else:
            return False"
residence,"class residence(GeneralSemanticType):
    def __init__(self):
        self.description = 'Place of residence'
        self.format = 'Residence names should be stored as strings, with the first letter of each word capitalized'
        self.examples = ['Alhag Yosef', 'Ombada', 'Omdorman', 'Alsawra', 'Khartoum']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
village,"class village(GeneralSemanticType):
    def __init__(self):
        self.description = 'Village name'
        self.format = 'Village names should be in capitalized form.'
        self.examples = ['Gondohon', 'Barankason', 'Suvil', 'Perpaduan', 'Kotud']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.title()
        else:
            return 'Invalid'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val) > 0:
            return True
        else:
            return False"
intersectionidentifier,"class intersectionidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = ""The id of an intersection""
        self.format = ""Intersection id should be formatted as a positive integer""
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            num = int(val)
            if num < 1:
                raise ValueError('Intersection id must be a positive integer')
            return num
        except ValueError:
            return ""Invalid input""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False"
experimentdate,"class experimentdate(GeneralSemanticType):
    def __init__(self):
        self.description = ""An experiment date""
        self.format = ""A Boolean""
        self.examples = [1, 2, 1, 2, 1]

    def super_cast(self, val):
        if val in [1, 2]:
            return val
        else:
            raise ValueError('Invalid experiment date')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1, 2]:
            return True
        else:
            return False"
giniindex,"class giniindex(GeneralSemanticType):
	def __init__(self):
		self.description = 'Gini Index'
		self.format = 'Gini Index should be a floating point number (in percentage points) ranging from 0 (perfect equality) to 100 (perfect inequality)'
		self.examples = [22.28, 28.57, 32.99, 41.289, 51.8]

	def super_cast(self, val):
		if pd.isna(val):
			return float('nan')
		try:
			num = float(val)
			if 0 <= num <= 100:
				return round(num, 2)
			else:
				raise ValueError('Invalid Gini Index')
		except ValueError as e:
			raise ValueError('Invalid Gini Index')

	def validate(self, val):
		casted_val = self.super_cast(val)
		if pd.isna(casted_val):
			return True
		elif 0 <= casted_val <= 100:
			return True
		else:
			return False"
unemploymentrate,"class unemploymentrate(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Unemployment Rate'
        self.format = 'Unemployment Rate should be formatted as a floating point number'
        self.examples = [3.8155122, 3.749504, 3.708682, 3.421, 3.1738784]

    def super_cast(self, val):
        try:
            num = round(float(val), 7)
            if num < 0:
                raise Exception('Invalid unemployment rate')
            return num
        except ValueError:
            return 'Invalid input: Not a number'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
sessionidentifier,"class sessionidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Session ID'
        self.format = 'Integer'
        self.examples = [1, 2, 3, 4, 5, 6, 7]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and 1 <= casted_val <= 7:
            return True
        else:
            return False"
politicalparty,"class politicalparty(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political Party'
        self.format = 'Should be a string representing the official name of the political party'
        self.examples = ['Greens', 'Green', 'FPO', 'SPD', 'SPO']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
name,"class name(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of the organization'
        self.format = 'Name should be formatted as a string with the first letter of each word capitalized'
        self.examples = ['Ku Klux Klan (KKK)', 'Popular Front for the Liberation of Palestine - General Command', 'Sandinistas', 'Popular Front for the Liberation of Palestine (PFLP)', 'Basque Fatherland and Freedom (ETA)']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
countryidentifier,"class countryidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Identifier for each country'
        self.format = 'CountryID should be a positive integer'
        self.examples = ['1', '2', '3', '1', '2']

    def super_cast(self, val):
        try:
            # Try casting to int and converting to string
            return str(int(val))
        except Exception:
            # If casting to int fails, return as is
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)

        # Check if casted value is a digit
        if casted_val.isdigit():
            # Check if casted value is within the range 1-3
            if 1 <= int(casted_val) <= 3:
                return True
        return False"
newspapername,"class newspapername(GeneralSemanticType):

    def __init__(self):
        self.description = 'The name of the newspaper'
        self.format = 'The first letter of each word should be capitalized'
        self.examples = ['Punch', 'Vanguard', 'Guardian']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
gdp,"class gdp(GeneralSemanticType):

    def __init__(self):
        self.description = 'Gross Domestic Product'
        self.format = 'GDP should be formatted as a floating point number'
        self.examples = [9312432040.848455, 9802873832.604143, 9964277849.567902, 10389682135.642508, 10874596698.20806]

    def super_cast(self, val):
        return float(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and not math.isnan(casted_val):
            return True
        else:
            return False"
polity,"class polity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Polity Score'
        self.format = 'Polity score should be an integer.'
        self.examples = [-10, -7, 4, 9, 10]

    def super_cast(self, val):
        try:
            casted_val = int(val)
            return casted_val
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if np.isnan(casted_val):
            return True
        if -10 <= casted_val <= 10:
            return True
        else:
            return False"
ccode,"class ccode(GeneralSemanticType):

    def __init__(self):
        self.description = 'Country Code'
        self.format = 'Country code must be an integer'
        self.examples = [8, 32, 36, 40, 56]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid input, expected an integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 1 or casted_val > 999:
            raise Exception(""Invalid Country Code, expected value between 1 and 999"")
        else:
            return True"
ethnicity,"class ethnicity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Ethnicity of a person'
        self.format = 'Ethnicity should be represented as a lower-case string'
        self.examples = ['east indian', 'south asian', 'south african', 'indian', 'caucasian']

    def super_cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if pd.isna(casted_val):
            return True
        elif isinstance(casted_val, str):
            return True
        else:
            return False"
children,"class children(GeneralSemanticType):

    def __init__(self):
        self.description = 'Number of children a Person has'
        self.format = ""The format should be 'None', 'One child', 'Two children', 'More than two children'""
        self.examples = ['None', 'One child', 'Two children', 'More than two children']

    def super_cast(self, val):
        try:
            val = int(val)
            if val == 0:
                return 'None'
            elif val == 1:
                return 'One child'
            elif val == 2:
                return 'Two children'
            elif val > 2:
                return 'More than two children'
            else:
                return 'Invalid'
        except ValueError:
            return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
married,"class married(GeneralSemanticType):

    def __init__(self):
        self.description = ""Marital status""
        self.format = ""A binary value, 1 if married, 0 if not""
        self.examples = [0,1,0,1,0]

    def super_cast(self, val):
        if pd.isnull(val):
            return np.nan
        elif val in [0, 1]:
            return val
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0,1]:
            return True
        else:
            return False"
politicalaffiliation,"class politicalaffiliation(GeneralSemanticType):

    def __init__(self):
        self.description = 'Political Affiliation'
        self.format = 'Political Affiliation as a string'
        self.examples = ['1986/PASART', '1990/PSDB', '1986/PMDB', '1986/PCdoB', '1986/PCN']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str):
            return True
        else:
            return False"
constituency,"class constituency(GeneralSemanticType):
    def __init__(self):
        self.description = 'Constituency of a country'
        self.format = 'Names should be capitalized'
        self.examples = ['BIBIANI-ANHWIASO-BEKWAI', 'PRESTEA HUNI-VALLEY', 'JOMORO', 'HO CENTRAL', 'AGONA WEST']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
organizationname,"class organizationname(GeneralSemanticType):
    
    def __init__(self):
        self.description = 'Name of an Organization'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['WWF Verdensnaturfonden', 'Dansk Røde Kors', 'Red Barnet', 'Folkekirkens Nødhjælp', 'CARE Danmark']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and len(casted_val.split("" "")) >= 2:
            return True
        else:
            return False"
state,"class state(GeneralSemanticType):

    def __init__(self):
        self.description = 'A state'
        self.format = 'Capitalized full state name or abbreviation'

    def super_cast(self, val):
        if len(val) == 2:
            for state in pycountry.subdivisions.get(country_code='US'):
                if state.code.split('-')[1] == val:
                    return state.name
        else:
            return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        state_names = [state.name for state in pycountry.subdivisions.get(country_code='US')]
        if casted_val in state_names:
            return True
        else:
            return False"
brazilianstate,"class brazilianstate(GeneralSemanticType):
    def __init__(self):
        super().__init__()
        self.description = 'Brazilian State'
        self.format = 'State should be stored as a string'
        self.examples = ['SP', 'RJ', 'MG', 'DF', 'BA']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['SP', 'RJ', 'MG', 'DF', 'BA']:
            return True
        else:
            return False"
partyname,"class partyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a Political Party'
        self.format = 'Name should be a properly capitalized string'
        self.examples = ['The Democratic Party', 'Civic Party', 'Youngspiration', 'Labour Party', 'League of Social Democrats']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
usstate,"class usstate(GeneralSemanticType):

    def __init__(self):
        self.description = 'US State'
        self.format = 'Only the first letter should be capitalized'
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        states = [state.name for state in pycountry.subdivisions.get(country_code='US')]
        if casted_val in states:
            return True
        else:
            return False"
yearofbirth,"class yearofbirth(GeneralSemanticType):
    def __init__(self):
        self.description = 'Year of birth'
        self.format = 'A four digit integer'
        self.examples = [1994, 1970, 1956, 1956, 1977]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(""Invalid value. The value should be a number."")
    
    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1900 and casted_val <= datetime.now().year:
            return True
        else:
            return False"
workexperience,"class workexperience(GeneralSemanticType):
    def __init__(self):
        self.description = 'Work Experience'
        self.format = 'Work experience is a string that must be one of the valid values'
        self.examples = ['Entre 10 e 20 anos', 'Entre 5 a 10 anos', 'Menos de 5 anos', 'Mais de 20 anos']

    def super_cast(self, val):
        valid_values = ['Entre 10 e 20 anos', 'Entre 5 a 10 anos', 'Menos de 5 anos', 'Mais de 20 anos']
        if str(val) in valid_values:
            return str(val)
        else:
            return 'Unknown'

    def validate(self, val):
        casted_val = self.super_cast(val)
        valid_values = ['Entre 10 e 20 anos', 'Entre 5 a 10 anos', 'Menos de 5 anos', 'Mais de 20 anos']
        if casted_val in valid_values:
            return True
        else:
            return False"
employmentstatus,"class employmentstatus(GeneralSemanticType):
    def __init__(self):
        self.description: str = 'Employment status of a Person'
        self.format: str = 'First letter should be capitalized'
        self.examples: list = ['Unemployed', 'Other', 'Unemployed', 'Other', 'Unemployed']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['Unemployed', 'Other']:
            return True
        else:
            return False"
cfc,"class cfc(GeneralSemanticType):

    def __init__(self):
        self.description = 'CFC score measure'
        self.format = 'CFC score should be a floating point number between 0 and 7'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except:
            raise ValueError('Unable to convert value to float')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0 or casted_val > 7:
            return False
        return True"
nationality,"class nationality(GeneralSemanticType):
    def __init__(self):
        self.description = ""Nationality of a person""
        self.format = ""Nationality should be represented as the English name of a country""
        self.examples = ['Irish', 'American', 'British', 'Canadian', 'French']
        
    def super_cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [country.name for country in list(pycountry.countries)]:
            return True
        else:
            return False"
jobtenurelevel,"class jobtenurelevel(GeneralSemanticType):

    def __init__(self):
        self.description = 'Job tenure level'
        self.format = 'Job tenure level should be represented as a floating point number: 1.0, 2.0, or 3.0'
        self.examples = [1.0, 2.0, 3.0, 1.0, 3.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [1.0, 2.0, 3.0, float('nan')]:
            return True
        else:
            return False"
farmercode,"class farmercode(GeneralSemanticType):

    def __init__(self):
        self.description = 'A code representing the farmer'
        self.format = 'Farmer codes are strings'
        self.examples = ['10yrsrare', 'newclient', '10yrsreg']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in self.examples:
            return True
        else:
            return False"
city,"class city(GeneralSemanticType):
    def __init__(self):
        self.description = 'City name'
        self.format = 'City names should be capitalized strings'
        self.examples = ['Los Angeles', 'Edwardsville', 'Philadelphia', 'Little Rock', 'Denton']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
binaryflag,"class binaryflag(GeneralSemanticType):

    def __init__(self):
        self.description = ""A binary flag""
        self.format = ""A float representing a boolean value""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        if isinstance(val, (int, float)):
            if val in [0.0, 1.0]:
                return float(val)
            else:
                return float('nan')
        else:
            raise Exception(""Invalid value"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0.0, 1.0]:
            return True
        else:
            return False
"
lawtype,"class lawtype(GeneralSemanticType):

    def __init__(self):
        self.description = 'Type of law'
        self.format = 'Law type should be a floating point number between 1 and 5'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]

    def super_cast(self, val):
        try:
            num = float(val)
            if num >= 1 and num <= 5:
                return num
            else:
                return float('NaN')
        except ValueError:
            return float('NaN')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
constituencyname,"class constituencyname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Constituency Names'
        self.format = 'Constituency names should be capitalized and stored as strings'
        self.examples = ['Acre', 'Alagoas', 'Amapá', 'Amazonas', 'Bahia']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
voteshare,"class voteshare(GeneralSemanticType):
    def __init__(self):
        self.description = ""Vote Share""
        self.format = ""Formatted as a floating point number with up to three decimal places""
        self.examples = [0.0, 5.154, 9.833, 17.499, 68.364]

    def super_cast(self, val):
        try:
            num = round(float(val), 3)
            return num
        except ValueError:
            raise Exception('Invalid vote share')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0 and casted_val <= 100:
            return True
        else:
            return False"
inflationrate,"class inflationrate(GeneralSemanticType):
    def __init__(self):
        self.description = ""Inflation Rate""
        self.format = ""A floating point number""
        self.examples = [12.92, 13.37, 13.65, 13.94, 0.0]

    def super_cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise ValueError(""The value cannot be casted to float."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val < 0:
            raise ValueError(""Inflation rate cannot be negative."")
        elif not isinstance(casted_val, float):
            raise TypeError(""Inflation rate must be a floating point number."")
        else:
            return True"
author,"class author(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of an Author'
        self.format = 'Only the first letter of the first and last name should be capitalized'
        self.examples = ['Nwosu K.C.', 'Wahl W.P.', 'Cassim H.', 'Okwuduba E.N.', 'Nnaemeka G.U.']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not isinstance(casted_val, str):
            return False
        return bool(re.match(r""^[A-Z][a-z]*\s[A-Z]\.?[A-Z]?$"", casted_val))"
presidentname,"
class presidentname(GeneralSemanticType):

    def __init__(self):
        self.description = 'Name of a President'
        self.format = 'Only the first letter of each word should be capitalized'
        self.examples = ['Máximo Marcelo Torcuato de Alvear Pacheco', 'Juan Hipólito del Sagrado Corazón de Jesús Yrigoyen Alem']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.istitle():
            return True
        else:
            return False"
projectidentifier,"class projectidentifier(GeneralSemanticType):
    def __init__(self):
        self.description = 'Project ID'
        self.format = 'AAA####/##'
        self.examples = ['MPV0666/14', 'MPV0658/14', 'PLN0020/14', 'PLN0022/14', 'MPV0665/14']

    def super_cast(self, val):
        val = str(val)
        match_obj = re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            return 'Invalid value'

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', casted_val):
            return True
        else:
            return False"
ufsprojetolove,"class ufsprojetolove(GeneralSemanticType):

    def __init__(self):
        self.description = 'Project Love UFS'
        self.format = 'UFS Project Love should be a positive integer between 1 and 5'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 1 and casted_val <= 5:
            return True
        else:
            return False"
party,"class party(GeneralSemanticType):
    def __init__(self):
        self.description = 'Political party'
        self.format = 'Party names should be capitalized'
        self.examples = ['SPD', 'CDU', 'FDP', 'Greens', 'Left']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.istitle():
            return True
        else:
            return False"
level,"class level(GeneralSemanticType):
    def __init__(self):
        self.description = 'Level of governance'
        self.format = 'Level names should be lowercase'
        self.examples = ['local', 'branch', 'sublocal', 'federal']

    def super_cast(self, val):
        return str(val).lower()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['local', 'branch', 'sublocal', 'federal']:
            return True
        else:
            return False"
vegetabletype,"class vegetabletype(GeneralSemanticType):
    def __init__(self):
        self.description = 'Nominal name of vegetable type sampled'
        self.format = 'Vegetable name should be spelled out and the first letter capitalized'
        self.examples = ['Tomato', 'Cucumber', 'Lettuce', 'Carrot', 'Potato']

    def super_cast(self, val):
        return str(val).title()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val[0].isupper() and casted_val[1:].islower():
            return True
        else:
            return False"
parasitismrate,"class parasitismrate(GeneralSemanticType):

    def __init__(self):
        self.description = 'Parasitism rate represented as a floating-point number'
        self.format = 'Parasitism rate should be represented as a percentage (0.0 to 100.0)'
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except (ValueError, TypeError):
            return float('nan')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not np.isnan(casted_val) and 0 <= casted_val <= 100:
            return True
        else:
            return False"
infestation,"class infestation(GeneralSemanticType):

    def __init__(self):
        self.description = ""Infestation status""
        self.format = ""as a boolean value""
        self.examples = [0.0, 1.0, 0.0, 1.0, 0.0]

    def super_cast(self, val):
        try:
            return bool(float(val))
        except ValueError:
            raise ValueError(f""Invalid value: {val}. Expected a boolean value (0.0 or 1.0)."")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [True, False]:
            return True
        else:
            raise ValueError(f""Invalid value: {val}. Expected a boolean value (0.0 or 1.0)."")"
parasitization,"class parasitization(GeneralSemanticType):
    def __init__(self):
        self.description = ""Parasitization status""
        self.format = ""Boolean [0,1]""
        self.examples = [0, 1, 0, 1, 0]

    def super_cast(self, val):
        int_val = int(val)
        if int_val in [0, 1]:
            return int_val
        else:
            raise Exception('Invalid parasitization value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in [0, 1]:
            return True
        else:
            return False"
binaryoption,"class binaryoption(GeneralSemanticType):

    def __init__(self):
        self.description = ""Binary option""
        self.format = ""In capitalized form""
        self.examples = ['No', 'Yes', 'No', 'Yes', 'No']

    def super_cast(self, val):
        if str(val).lower() in ['no', 'yes']:
            return str(val).capitalize()
        else:
            raise ValueError('Invalid value')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val in ['No', 'Yes']:
            return True
        else:
            return False"
firmidentifier,"class firmidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'An unique identifier for a firm'
        self.format = 'Firm ID should be a positive integer'
        self.examples = [1, 2, 3, 4, 5]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            raise Exception(f""Value {val} cannot be converted to integer"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, int) and casted_val > 0:
            return True
        else:
            return False
"
firmage,"
class firmage(GeneralSemanticType):

    def __init__(self):
        self.description = 'Age of the firm'
        self.format = 'Firm age should be an integer value in the range [2, 4]'
        self.examples = [2, 3, 4]

    def super_cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise ValueError(""Invalid value for firm age"")

        if val < 2 or val > 4:
            raise ValueError('Invalid firm age')
        return val

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 2 <= casted_val <= 4:
            return True
        else:
            return False"
shareprice,"class shareprice(GeneralSemanticType):
    def __init__(self):
        self.description = 'Price of a share'
        self.format = 'In USD'
        self.examples = [0.14, 0.135, 0.19, 0.32, 0.335]

    def super_cast(self, val):
        try:
            float_val = float(val)
            return float_val
        except ValueError:
            return ""Cannot convert to float""

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and casted_val >= 0:
            return True
        else:
            return False"
species,"class species(GeneralSemanticType):

    def __init__(self):
        self.description = 'Species involved in a biological experiment'
        self.format = 'Species should be a string in uppercase'
        self.examples = ['Gmm', 'Gmm', 'Gmm', 'Gmm', 'Gmm']

    def super_cast(self, val):
        if isinstance(val, str):
            return val.upper()
        else:
            raise ValueError('Invalid input type, expected string.')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val == 'Gmm':
            return True
        else:
            return False"
relativequantity,"class relativequantity(GeneralSemanticType):
    def __init__(self):
        self.description = 'Relative quantity of a biological entity'
        self.format = 'Relative quantity should be a floating point number between 0 and 1'
        self.examples = [0.08704, 0.08991, 0.09345, 0.04905, 0.0576]

    def super_cast(self, val):
        try:
            num = float(val)
            if num < 0 or num > 1:
                raise Exception('Invalid relative quantity')
            return num
        except ValueError:
            raise Exception('Invalid input, expected a number')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, float) and 0 <= casted_val <= 1:
            return True
        else:
            return False"
normalizeddata,"class normalizeddata(GeneralSemanticType):

    def __init__(self):
        self.description = 'Normalized data values from a biological experiment'
        self.format = 'Normalized data should be a non-negative floating point number'
        self.examples = [0.290249433106576, 0.3251717902350813, 0.2717596766219792, 0.1896751740139211, 0.211936124806829]

    def super_cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid normalized data')
        return num

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val >= 0:
            return True
        else:
            return False"
fipscode,"class fipscode(GeneralSemanticType):
    def __init__(self):
        self.description = 'Federal Information Processing Standards code, unique code for US geographies'
        self.format = 'FIPS should be an integer number with no decimal places'
        self.examples = [1001, 1003, 1005, 1007, 1009]

    def super_cast(self, val):
        try:
            return int(val)
        except ValueError:
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and casted_val >= 1001:
            return True
        else:
            return False"
fishidentifier,"class fishidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Unique identifier for a fish'
        self.format = 'Fish ID should be a capitalized string'
        self.examples = ['3ED01', '3ED02', '3ED03', '3ED04', '3ED05']

    def super_cast(self, val):
        return str(val).upper()

    def validate(self, val):
        casted_val = self.super_cast(val)
        if isinstance(casted_val, str) and casted_val.isupper():
            return True
        else:
            return False"
geoidentifier,"class geoidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Geographic identifier'
        self.format = ""Geographic identifiers should start with '0500000US' followed by a 5-digit FIPS code""
        self.examples = ['0500000US01001', '0500000US01003', '0500000US01005', '0500000US01007', '0500000US01009']

    def super_cast(self, val):
        match_obj = re.match('0500000US[0-9]{5}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid geoid')

    def validate(self, val):
        casted_val = self.super_cast(val)
        if re.match('0500000US[0-9]{5}', casted_val):
            return True
        else:
            return False"
concentration,"class concentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of a chemical in the air'
        self.format = 'Concentration should be a floating point number'
        self.examples = [1.65, 1.39, 1.92, 1.49, 1.43]

    def super_cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            print(f'Error occurred while casting value: {val}, Error: {str(e)}')
            return None

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val is not None and 0 <= casted_val <= float('inf'):
            return True
        else:
            return False"
stationidentifier,"class stationidentifier(GeneralSemanticType):

    def __init__(self):
        self.description = 'Station ID'
        self.format = 'Station ID must be a string of numbers'
        self.examples = ['3324300', '3326500', '3349000', '3331500', '3308500']

    def super_cast(self, val):
        return str(val)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if casted_val.isdigit():
            return True
        else:
            return False"
relativehumidity,"class relativehumidity(GeneralSemanticType):

    def __init__(self):
        self.description = 'Relative humidity'
        self.format = 'Relative humidity should be formatted as a floating point number'
        self.examples = [64.02, 80.505, 84.895, 88.16, 95.69]

    def super_cast(self, val):
        try:
            return float(val)
        except Exception as e:
            raise Exception(f""Cannot cast {val} to float: {str(e)}"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        if 0 <= casted_val <= 100:
            return True
        else:
            return False"
sulfateconcentration,"class sulfateconcentration(GeneralSemanticType):

    def __init__(self):
        self.description = 'Concentration of Sulfate in rainwater'
        self.format = 'Sulfate Concentration should be a floating point number'
        self.examples = [6.0, 4.4, 50.0, 15.2, 10.0]
        
    def super_cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 2)

    def validate(self, val):
        casted_val = self.super_cast(val)
        if not pd.isna(casted_val) and casted_val >= 0:
            return True
        else:
            return False"
collectiondate,"class collectiondate(GeneralSemanticType):
    def __init__(self):
        self.description = 'Date of Fish Collection'
        self.format = 'Date string in the format \'MM/DD/YYYY\''
        self.examples = ['08/29/2018', '08/16/2018', '09/03/2018', '08/10/2018', '08/31/2018']

    def super_cast(self, val):
        try:
            return datetime.strptime(str(val), '%m/%d/%Y').strftime('%m/%d/%Y')
        except ValueError:
            raise Exception(""Invalid date format. It should be 'MM/DD/YYYY'"")

    def validate(self, val):
        casted_val = self.super_cast(val)
        try:
            datetime.strptime(casted_val, '%m/%d/%Y')
            return True
        except ValueError:
            return False"
