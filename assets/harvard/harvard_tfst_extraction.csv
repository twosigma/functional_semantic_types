tfsts_classes
"class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Dates are represented as a float""
        self.examples = [43846.0, 43847.0, 43848.0, 43849.0, 43850.0]
    def cast(self, val):
        return pd.to_datetime(val, origin='julian', unit='D')

class dailycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Daily Count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Counts should be formatted as a float""
        self.examples = [0.0, 4.0, 94.0, 59.0, 93.0]
    def cast(self, val):
        return float(val)

class symptoms(NumericSemanticType):
    def __init__(self):
        self.description = ""Symptoms""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Symptoms should be formatted as a float""
        self.examples = [5885.0, 6448.0, 6392.0, 6570.0, 6564.0]
    def cast(self, val):
        return float(val)

class temperature(NumericSemanticType):
    def __init__(self):
        self.description = ""Temperature""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Temperature should be formatted as a float""
        self.examples = [374.0, 398.0, 366.0, 376.0, 378.0]
    def cast(self, val):
        return float(val)

class searchvolume(NumericSemanticType):
    def __init__(self):
        self.description = ""Search Volume""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Search Volume should be formatted as a float""
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val)

MAPPING = {
    'data': date, 
    'thenewconfirmed': dailycount,
    'thenewsuspected': dailycount,
    'cough': symptoms,
    'dyspnea': symptoms,
    'drycough': symptoms,
    'chestcongestion': symptoms,
    'pyrexia': symptoms,
    'fever': symptoms,
    'fevertemperature': temperature,
    'howmanydegreeisafever': temperature,
    'lowfever': temperature,
    'cold': symptoms,
    'symptomsoffever': symptoms,
    'exhaustion': symptoms,
    'limbweakness': symptoms,
    'diarrhea': symptoms,
    'newcoronavirus': searchvolume,
    'wuhanpneumonia': searchvolume
}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender should be one of the following: ['Male', 'Female', 'Total', 'By gender']""
        self.format = ""Gender should be a string starting with a capital letter""
        self.examples = ['Male', 'Female', 'Total', 'By gender']
    def cast(self, val):
        return str(val).title()

class totalcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Total count of a certain category""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be a non-negative integer""
        self.examples = [298820, 161187, 137633, 8746, 10]
    def cast(self, val):
        if pd.isna(val) or val == '' or val == 'Total':
            return float('nan')
        else:
            return int(val)

class agegroup(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age group of a person""
        self.valid_values = ""Age group should be a string containing the range of ages or 'Age unknown'""
        self.format = ""Age group should be a string, with a hyphen separating the lower and upper age limit""
        self.examples = ['0 year old', '1-4 Years old', '5-9 Years old', '10-14 Years old', '15-19 Years old']
    def cast(self, val):
        if val == 'Age unknown':
            return val
        else:
            match_obj = re.match(r'(\d+)-(\d+) Years old', val)
            if match_obj:
                return match_obj.group()
            else:
                return val + "" Years old""

MAPPING = {
    'b': gender, 
    'c': totalcount, 
    'd': agegroup, 
    'e': agegroup, 
    'f': agegroup, 
    'g': agegroup, 
    'h': agegroup, 
    'i': agegroup, 
    'j': agegroup, 
    'k': agegroup, 
    'l': agegroup, 
    'm': agegroup, 
    'n': agegroup, 
    'o': agegroup, 
    'p': agegroup, 
    'q': agegroup, 
    'r': agegroup, 
    's': agegroup, 
    't': agegroup, 
    'u': agegroup, 
    'v': agegroup, 
    'w': agegroup, 
    'x': agegroup
}"
"class studentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a student""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class studentclass(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Class (grade level) the student is in""
        self.valid_values = ""Should be an integer from 1-9""
        self.format = ""A single digit string representing the class""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

class studentage(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age of the student""
        self.valid_values = ""Should be an integer representing the age of the student""
        self.format = ""A two-digit string representing the age""
        self.examples = ['18', '19', '20', '21', '22']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

class studentgender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val in self.valid_values:
            return val
        else:
            raise ValueError(f""Invalid value for gender: {val}"")

class meqscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Morningness–Eveningness Questionnaire (MEQ) score""
        self.valid_range = [21, 72]
        self.dtype = float
        self.format = ""MEQ score should be a floating point number""
        self.examples = [39.0, 63.0, 36.0, 61.0, 44.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class staisscore(NumericSemanticType):
    def __init__(self):
        self.description = ""STAI State-Anxiety score""
        self.valid_range = [20, 71]
        self.dtype = float
        self.format = ""STAI State-Anxiety score should be a floating point number""
        self.examples = [48.0, 46.0, 56.0, 38.0, 45.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class staittraitscore(NumericSemanticType):
    def __init__(self):
        self.description = ""STAI Trait-Anxiety score""
        self.valid_range = [23, 67]
        self.dtype = float
        self.format = ""STAI Trait-Anxiety score should be a floating point number""
        self.examples = [40.0, 54.0, 56.0, 46.0, 43.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class psqiscore(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Pittsburgh Sleep Quality Index (PSQI) score""
        self.valid_values = ""Should be an integer representing the PSQI score""
        self.format = ""A single digit string representing the PSQI score""
        self.examples = ['5', '4', '6', '8', '7']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

MAPPING = {
    'code': studentid,
    'class': studentclass,
    'age': studentage,
    'gender': studentgender,
    'meq': meqscore,
    'stais': staisscore,
    'stait': staittraitscore,
    'psqi': psqiscore,
}"
"class surveyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each survey respondent""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Survey ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num > 0:
            return num
        else:
            raise Exception('Invalid survey id')

class agreement(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Agree', 'Disagree']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid agreement value')

class agegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age group of survey respondent""
        self.valid_values = ""Age group should be one of: ['20-40y', '41-50y', '51y']""
        self.format = ""Age group should be represented as a string""
        self.examples = ['20-40y', '41-50y', '51y']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid age group')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of survey respondent""
        self.valid_values = ""Gender should be one of: ['male', 'female']""
        self.format = ""Gender should be represented as a string""
        self.examples = ['male', 'female']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid gender')

class yearsatoccupation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Years at occupation of survey respondent""
        self.valid_values = ""Years at occupation should be one of: ['0-6y', '>6']""
        self.format = ""Years at occupation should be represented as a string""
        self.examples = ['0-6y', '>6']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid years at occupation')

class occupation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Occupation of survey respondent""
        self.valid_values = ""Occupation can take any value""
        self.format = ""Occupation should be represented as a string""
        self.examples = ['agricul', 'merchant/oth', 'offic', 'NoOcc']
    def cast(self, val):
        return str(val)

class maritalstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Marital status of survey respondent""
        self.valid_values = ""Marital status should be one of: ['married', 'Single/DIvorce']""
        self.format = ""Marital status should be represented as a string""
        self.examples = ['married', 'Single/DIvorce']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid marital status')

class familyincome(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Family income of survey respondent""
        self.valid_values = ""Family income should be one of: ['>10000', '<10000']""
        self.format = ""Family income should be represented as a string""
        self.examples = ['>10000', '<10000']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid family income')

class numberofsmokers(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Number of smokers in the household""
        self.valid_values = ""Number of smokers should be one of: ['1p', '2-6p']""
        self.format = ""Number of smokers should be represented as a string""
        self.examples = ['1p', '2-6p']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid number of smokers')

class numberofchildren(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Number of children under 5 in the household""
        self.valid_values = ""Number of children under 5 should be one of: ['1person', '>=2person']""
        self.format = ""Number of children under 5 should be represented as a string""
        self.examples = ['1person', '>=2person']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid number of children under 5')

class smokinganddrinkinghabits(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Smoking and drinking habits of survey respondent""
        self.valid_values = ""Smoking and drinking habits should be one of: ['both', 'no', 'alcysmkn']""
        self.format = ""Smoking and drinking habits should be represented as a string""
        self.examples = ['both', 'no', 'alcysmkn']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid smoking and drinking habits')

MAPPING = {'id': surveyid, 'thirdper': agreement, 'agegr': agegroup, 'gender': gender, 'yrsatt': yearsatoccupation, 'occup': occupation, 'matst': maritalstatus, 'faminc': familyincome, 'nusmkgr': numberofsmokers, 'childu5': numberofchildren, 'drnksmk': smokinganddrinkinghabits}"
"class eventid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique Event ID""
        self.valid_values = ""Event ID must be a string and can be a combination of numbers or RDWTI or Additional GTD Event Identified""
        self.format = ""Event ID can be of any format""
        self.examples = ['RDWTI', 'Additional GTD Event Identified', '200006080016', '199002170002', '197304220001']
    def cast(self, val):
        return str(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of the event""
        self.valid_range = [1970, 2017]
        self.dtype = int
        self.format = ""Year should be stored as an integer""
        self.examples = [1970, 1980, 1990, 2000, 2010]
    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country where the event occurred""
        self.valid_values = ""Country should be a valid country name""
        self.format = ""Country name should be capitalized""
        self.examples = ['Afghanistan', 'Iraq', 'United States', 'Japan', 'United Kingdom']
    def cast(self, val):
        return str(val).title()

class worldregion(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""World Region per GTD codebook""
        self.valid_values = ""World Region must be one of the following: South Asia, Middle East & North Africa, Western Europe, North America, East Asia""
        self.format = ""World Region should be capitalized""
        self.examples = ['South Asia', 'Middle East & North Africa', 'Western Europe', 'North America', 'East Asia']
    def cast(self, val):
        return str(val).title()

class weapontype(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of weapon used in the attack""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Weapon type should be an integer from 1 to 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class eventtype(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class doubtterrorism(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class connectedevents(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class multipletypeofharmfulmechanismsexistorsuspected(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class poisoningagent(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Poisoning agent used in the attack""
        self.valid_values = ""Poisoning agent can be any string""
        self.format = ""Poisoning agent should be stored as a string""
        self.examples = ['chlorine gas', 'unknown', 'acid', 'anthrax', 'cyanide']
    def cast(self, val):
        return str(val)

class presenceofpoisondoubtful(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class suicideattack(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class poisoningoccurred(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Whether poisoning occurred during the event""
        self.valid_values = ""Can be either 0, 1, Unknown or unknown""
        self.format = ""Should be a string""
        self.examples = ['1', '0', 'Unknown', 'unknown']
    def cast(self, val):
        return str(val)

MAPPING = {
    'gtdid000000000000orrdwti': eventid,
    'year': year,
    'eventcountry': country,
    'worldregionpergtdcodebook': worldregion,
    'weaponsubstancetypereportedchemicalbiologicalradiologicalorunknown1234': weapontype,
    'eventtypeenacted1oronlyattempted2': eventtype,
    'doubtterrorismproperpergtdcodebooknodoubt0doubt1': doubtterrorism,
    'connectedevents01pergtdcodebook': connectedevents,
    'multipletypeofharmfulmechanismsexistorsuspected01': multipletypeofharmfulmechanismsexistorsuspected,
    'poisoningagent1': poisoningagent,
    'presenceofpoisondoubtfulasreported01': presenceofpoisondoubtful,
    'suicideattack01': suicideattack,
    'poisoningoccurred01': poisoningoccurred
}"
"class provincecode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code that represents a province in China""
        self.valid_range = [10, 65]
        self.dtype = float
        self.format = ""Province codes are floats with a precision of 1 decimal place""
        self.examples = [10.0, 11.0, 12.0, 13.0, 14.0]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

class provincechinese(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a province in China in Chinese""
        self.valid_values = ""Province names should be strings in Chinese characters""
        self.format = ""Province names should be in Chinese characters""
        self.examples = ['全国', '北京市', '天津市', '河北省', '山西省']
    def cast(self, val):
        return str(val)

class provinceenglish(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a province in China in English""
        self.valid_values = ""Province names should be strings in English""
        self.format = ""Province names should be in English""
        self.examples = ['Nation', 'Beijing', 'Tianjin', 'Hebei', 'Shanxi']
    def cast(self, val):
        return str(val)

class totalnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of instances of a particular entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total numbers should be formatted as floating point numbers with a precision of 3 decimal places""
        self.examples = [684801.0, 5790.0, 4498.0, 70990.0, 21731.0]
    def cast(self, val):
        num = float(val)
        return round(num, 3)

class healthcarefacilitycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of a particular type of healthcare facility""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Counts should be formatted as floating point numbers with a precision of 3 decimal places""
        self.examples = [756.0, 6.0, 8.0, 72.0, 23.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return round(num, 3)

MAPPING = {'gbprov': provincecode, 
           'provch': provincechinese, 
           'proven': provinceenglish, 
           'total': totalnumber, 
           '三级甲等医院': healthcarefacilitycount, 
           '专科医院': healthcarefacilitycount, 
           '传染病医院': healthcarefacilitycount, 
           '医疗保健服务场所': healthcarefacilitycount, 
           '卫生院': healthcarefacilitycount, 
           '口腔医院': healthcarefacilitycount, 
           '妇科医院': healthcarefacilitycount, 
           '急救中心': healthcarefacilitycount, 
           '整形美容': healthcarefacilitycount, 
           '疾病预防': healthcarefacilitycount, 
           '眼科医院': healthcarefacilitycount, 
           '精神病医院': healthcarefacilitycount, 
           '综合医院': healthcarefacilitycount, 
           '耳鼻喉医院': healthcarefacilitycount, 
           '肿瘤医院': healthcarefacilitycount, 
           '胸科医院': healthcarefacilitycount, 
           '脑科医院': healthcarefacilitycount, 
           '诊所': healthcarefacilitycount, 
           '骨科医院': healthcarefacilitycount}"
"class studylocation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location where the study was conducted, denoted by a country code and a short identifier""
        self.valid_values = ""Values should be of the form 'COUNTRY_CODE_IDENTIFIER', where COUNTRY_CODE is a valid 2-letter country code, and IDENTIFIER is a short descriptor""
        self.format = ""Values should be strings with the country code and identifier separated by an underscore""
        self.examples = ['DE_KI', 'US_BO', 'US_CL', 'DE_FR', 'DE_MU']
    def cast(self, val):
        parts = str(val).split('_')
        if len(parts) != 2 or not pycountry.countries.get(alpha_2=parts[0]):
            raise Exception('Invalid study location')
        return str(val)

class patientcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of patients involved in the study""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Should be an integer greater than 0""
        self.examples = [59, 39, 105, 37, 17]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid patient count')
        return num

class patientage(NumericSemanticType):
    def __init__(self):
        self.description = ""Average age of patients in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a non-negative floating point number""
        self.examples = [54, 60, 49, 62, 58]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid age')
        return num

MAPPING = {'studyplace': studylocation, 'number': patientcount, 'age': patientage}"
"class participant(NumericSemanticType):
    def __init__(self):
        self.description = ""An individual participating in the study.""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Participant should be represented as an integer.""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
        
class machine(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the machine used in the exercise.""
        self.valid_values = ""Any valid machine name as a string.""
        self.format = ""Machine names should be capitalized and stored as strings.""
        self.examples = ['LEG PRESS', 'LEG EXTENSION', 'ABDUCTOR', 'ADDUCTOR', 'LOWER BACK']
    def cast(self, val):
        return str(val).upper()

class setvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A set of exercises in the study.""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Set should be represented as an integer.""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class contractionmode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Contraction mode of the exercise.""
        self.valid_values = ""Any valid contraction mode as a string.""
        self.format = ""Contraction modes should start with 'Con' followed by a numeric value and stored as strings.""
        self.examples = ['Con01', 'Con02', 'Con03', 'Con04', 'Con05']
    def cast(self, val):
        return str(val)

class time(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Time taken for an action in milliseconds.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be represented as a floating-point number.""
        self.unit = ""In milliseconds""
        self.examples = [1340.0, 1160.0, 1220.0, 1260.0, 1560.0]
    def cast(self, val):
        return float(val)

class relative_difference(NumericSemanticType):
    def __init__(self):
        self.description = ""Relative difference in time between two measurements.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Relative difference should be represented as a floating point number.""
        self.examples = [0.241, 0.154, 0.118, 0.083, 0.033]
    def cast(self, val):
        return float(val)

class contraction_mode_levels(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of contraction mode.""
        self.valid_values = ""The valid values are 'Con', 'Ecc', 'Rep', and 'TuT'.""
        self.format = ""Contraction mode level should be represented as a string.""
        self.examples = ['Con', 'Ecc', 'Rep', 'TuT']
    def cast(self, val):
        return str(val)
        
class outlier(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if val in self.valid_values else Exception('Invalid value for BooleanSemanticType')

class normalized_error(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Normalized error of the smartphone.""
        self.valid_values = ""Any valid normalized error as a string.""
        self.format = ""Normalized error should be represented as a string.""
        self.examples = ['0', '6.67', '4', '20', '1.82']
    def cast(self, val):
        return str(val)

class participant_age(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age group of the participant.""
        self.valid_values = ""The valid age groups are 'young' and 'old'.""
        self.format = ""Age group should be represented as a string.""
        self.examples = ['young', 'old']
    def cast(self, val):
        return str(val)

class participant_age_years(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the participant in years.""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be represented as an integer.""
        self.examples = [19, 31, 38, 50, 70]
    def cast(self, val):
        return int(val)

class participant_height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of the participant in centimeters.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be represented as a floating-point number.""
        self.unit = ""In centimeters""
        self.examples = [160.0, 166.0, 178.0, 181.0, 187.0]
    def cast(self, val):
        return float(val)

class participant_weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of the participant in kilograms.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be represented as a floating-point number.""
        self.unit = ""In kilograms""
        self.examples = [46.0, 68.0, 77.0, 90.0, 105.0]
    def cast(self, val):
        return float(val)

class participant_gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the participant.""
        self.valid_values = ""The valid genders are 'm' and 'f'.""
        self.format = ""Gender should be represented as a string.""
        self.examples = ['m', 'f']
    def cast(self, val):
        return str(val)

MAPPING = {'participant': participant, 'machine': machine, 'set': setvalue, 'contractionmode': contractionmode, 
           'timevideoratercvms': time, 'timevideoraterdgms': time, 'timesmartphone1ms': time, 'timesmartphone2ms': time, 
           'videoratermeanms': time, 'smartphonesmeanms': time, 'relativedifference': relative_difference, 
           'differencevideosmartphonems': time, 'meanvideosmartphonems': time, 'contractionmodelevels': contraction_mode_levels, 
           'differencevideoratersms': time, 'differencesmartphonesms': time, 'videosmartphonedifferenceoutlier': outlier, 
           'raterdifferenceoutlier': outlier, 'smartphonedifferenceoutlier': outlier, 'normalizederrorsmartphone': normalized_error, 
           'participantagelevels': participant_age, 'participantageyears': participant_age_years, 
           'participantheightcm': participant_height, 'participantweightkg': participant_weight, 'participantgender': participant_gender}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Year of the review' 
        self.valid_range: list = [1900, datetime.now().year]
        self.dtype: object = int
        self.format: str = 'Year should be formatted as a 4-digit integer'
        self.examples: list = [2017, 2006, 2002, 2016, 2019]
    def cast(self, val): 
        return int(val)

class issue(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Issue number of the review' 
        self.valid_range: list = [1, 12]
        self.dtype: object = int
        self.format: str = 'Issue number should be an integer between 1 and 12'
        self.examples: list = [4, 3, 4, 10, 3]
    def cast(self, val): 
        return int(val)

class accessnumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Access number of the review""
        self.valid_values = ""Access number should be a string starting with 'CD' followed by 6 digits""
        self.format = ""Access number should be in the format 'CD######'""
        self.examples = ['CD011882', 'CD001275', 'CD003830', 'CD001347', 'CD003690']
    def cast(self, val):
        match_obj = re.match('CD[0-9]{6}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid access number')

class reviewerdecision(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Decision of the reviewer on the review""
        self.valid_values = ""Decision should be one of ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']""
        self.format = ""Decision should be a string""
        self.examples = ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']
    def cast(self, val):
        valid_decisions = ['Yes', 'No', 'Need to read full paper to make a decision', 'No decision made yet', 'No consensus']
        if val in valid_decisions:
            return val
        else:
            raise Exception('Invalid decision')

class finalcommitteedecision(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid decision')

class conflictorerror(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Conflict or error in the review""
        self.valid_values = ""Conflict or error should be one of ['None', 'CONFLICT', 'Error in inclusion']""
        self.format = ""Conflict or error should be a string""
        self.examples = ['None', 'CONFLICT', 'Error in inclusion']
    def cast(self, val):
        valid_values = ['None', 'CONFLICT', 'Error in inclusion']
        if val in valid_values:
            return val
        else:
            raise Exception('Invalid value')

MAPPING = {'year': year, 'issue': issue, 'accessnumber': accessnumber, 'comparisonofinitialreviewerscreening': reviewerdecision, 'isthisarehabilitationreviewreviewer1': reviewerdecision, 'isthisarehabilitationreviewreviewer2': reviewerdecision, 'finalcommitteedecisiononinclusion': finalcommitteedecision, 'conflictorerror': conflictorerror}"
"class participantid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a participant""
        self.valid_range = [1, 156]
        self.dtype = int
        self.format = ""Participant id should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class surgeonsurveytimestamp(NumericSemanticType):
    def __init__(self):
        self.description = ""Timestamp for the surgeon survey""
        self.valid_range = [42283.43611111112, 42348.927777777775]
        self.dtype = float
        self.format = ""Timestamp should be represented as float""
        self.examples = [42283.43611111112, 42283.44791666666, 42283.45069444445, 42283.538194444445, 42283.54930555556]
    def cast(self, val):
        return float(val)

class americaninstitution(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if pd.isnull(val):
            return None
        elif float(val) in self.valid_values:
            return int(val)
        else:
            raise ValueError(f""Invalid value for americaninstitution: {val}"")

class yearsinpractice(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of years in practice""
        self.valid_range = [1, 40]
        self.dtype = int
        self.format = ""Years in practice should be an integer""
        self.examples = [8, 10, 5, 33, 6]
    def cast(self, val):
        return int(val)

class specialty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Specialty of the practitioner""
        self.valid_values = ""Specialty should be a string""
        self.format = ""Specialty should be in lowercase""
        self.examples = ['neurosurgery', 'neurosurgery ', 'neurosurgery', 'pediatrics', 'neurosurgery']
    def cast(self, val):
        return str(val).strip().lower()

class subspecialty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Subspecialty of the practitioner""
        self.valid_values = ""Subspecialty should be a string""
        self.format = ""Subspecialty should be in lowercase""
        self.examples = ['neurotrauma', 'pulmonary, neurophysiology (sleep), critical care']
    def cast(self, val):
        return str(val).strip().lower() if pd.notnull(val) else None

MAPPING = {
    'participantid': participantid,
    'surgeonsurveytimestamp': surgeonsurveytimestamp,
    'americaninstitution': americaninstitution,
    'yearsinpractice': yearsinpractice,
    'specialty': specialty,
    'subspecialty': subspecialty
}"
"class researchtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Types of research in a journal""
        self.valid_values = ""Different categories of research like 'RW2', 'R7', 'R15', 'R1', 'R10'""
        self.format = ""Research type should be a string, for example: 'RW2'""
        self.examples = ['RW2', 'RW1', 'E1', 'R6', 'R16']
    def cast(self, val):
        return str(val)
        
class paperorder(NumericSemanticType):
    def __init__(self):
        self.description = ""Order number of the paper""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Order number should be an integer""
        self.examples = [17, 12, 24, 10, 27]
    def cast(self, val):
        return int(val)
        
class fieldofstudy(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Field of study for the paper""
        self.valid_values = ""Field of study should be a string representing the discipline, for example: 'medicine'""
        self.format = ""The field of study should be a string""
        self.examples = ['medicine', 'nursing', 'physical therapy', 'pharmacy', 'healthcare']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).strip()

class researchsubject(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Subject of the research""
        self.valid_values = ""Subject of the research should be a string""
        self.format = ""The research subject should be a string""
        self.examples = ['student', 'graduate student', 'resident', 'university, college', 'clinical instructors']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class researchcategory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Category of the research""
        self.valid_values = ""Category of the research should be a string""
        self.format = ""The research category should be a string""
        self.examples = ['perception survey', 'course evaluation', 'paper review', 'assessment tool', 'licensing examination content evaluation']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class researchmethod(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Method used in the research""
        self.valid_values = ""Method used in the research should be a string""
        self.format = ""The research method should be a string""
        self.examples = ['quantitative', 'quantitative, cross sectional, factor analysis', 'quantitative, descriptive', 'quantitative, cohort study, ANOVA, t-test', 'quantitative, cross sectional, correlation']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country name""
        self.valid_values = ""Country name should be a string and a valid country""
        self.format = ""The country name should be a string""
        self.examples = ['Korea', 'USA', 'Australia', 'Spain', 'Japan']
    def cast(self, val):
        if pycountry.countries.get(name=str(val)):
            return str(val)
        else:
            raise ValueError('Invalid Country')

class authorcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of authors for the paper""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Number of authors should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class countrycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of countries the authors belong to""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Number of countries should be an integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

MAPPING = {
    'typerresearchoopinionttechnicalreportedmeducationaldevelopmentrwreviewbbriefreporteeditorial': researchtype,
    'no': paperorder,
    'field': fieldofstudy,
    'subject': researchsubject,
    'categoryconceptprocessmethodsevaluation': researchcategory,
    'methodquantitativequalitative': researchmethod,
    'country1stauthor': country,
    'noofauthors저자수': authorcount,
    'diversityofauthorsnoofcountries국가수': countrycount
}"
"class province(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Province names in Indonesia""
        self.valid_values = ""Province names must be valid names of provinces in Indonesia""
        self.format = ""Province names must be capitalized and spelled correctly""
        self.examples = ['DKI Jakarta', 'Jawa Barat', 'Jawa Timur', 'Sulawesi Selatan', 'Jawa Tengah']
    def cast(self, val):
        return str(val).title()

class confirmed_cases(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of confirmed COVID-19 cases""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of cases should be stored as integers""
        self.examples = [1, 50, 100, 500, 1000]
    def cast(self, val):
        return int(val)

class recovered_cases(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of recovered COVID-19 cases""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of cases should be stored as integers""
        self.examples = [1, 20, 50, 100, 500]
    def cast(self, val):
        return int(val)

class death_cases(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of COVID-19 related deaths""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of cases should be stored as integers""
        self.examples = [1, 10, 50, 100, 500]
    def cast(self, val):
        return int(val)

MAPPING = {'province': province, 'confirmed': confirmed_cases, 'recovered': recovered_cases, 'deaths': death_cases}"
"class questionnumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Identifier for a question""
        self.valid_values = ""Question numbers should be a string that is of the form 'Qx' or 'Qx_y_TEXT', where x and y are integers""
        self.format = ""Only alphanumeric characters and underscores are allowed""
        self.examples = ['Q1', 'Q1_4_TEXT', 'Q2', 'Q3', 'Q4']
    def cast(self, val):
        return str(val)

class datatype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Datatype of a given variable""
        self.valid_values = ""Datatype can only be one of the following: ['Numeric', 'String', 'None', '{1, Cardiovascular}...']""
        self.format = ""All characters should be capitalized""
        self.examples = ['Numeric', 'String', 'None', '{1, Cardiovascular}...']
    def cast(self, val):
        return str(val).capitalize()

class options(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Options for answering a question""
        self.valid_values = ""Options should be a string that is of the form '{1, option_name}...' or 'None'""
        self.format = ""Only alphanumeric characters, commas, and curly braces are allowed""
        self.examples = ['{1, Male}...', 'None', '{1, 17}...', '{1, Asian/Asian British}...', '{1, Medicine}...']
    def cast(self, val):
        if pd.isna(val):
            return 'None'
        else:
            return str(val)

MAPPING = {'questionnumber': questionnumber, 'type': datatype, 'options': options}"
"class subjectnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for each subject in the study""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Subject numbers are positive integers""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(int(val))

class ageinyears(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The age of the subject in years""
        self.valid_values = ""Age values should be positive integers""
        self.format = ""The age is stored as a string""
        self.examples = ['22', '20', '27', '23', '21']
    def cast(self, val):
        return str(int(val))

class educationinyears(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The number of years of education a subject has completed""
        self.valid_values = ""Education values should be positive integers""
        self.format = ""The education level is stored as a string""
        self.examples = ['14', '13', '16', '15', '12']
    def cast(self, val):
        return str(int(val))

class gendercode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The gender of the subject, coded as 1 for male and 2 for female""
        self.valid_values = ""1 for male, 2 for female""
        self.format = ""The gender is stored as a string""
        self.examples = ['1', '2']
    def cast(self, val):
        return str(int(val))

class incomeinchf(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The income of the subject in Swiss Francs""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Income should be positive, represented as a floating point number""
        self.unit = ""Swiss Francs (CHF)""
        self.examples = [1000.0, 1500.0, 2000.0, 2500.0, 3000.0]
    def cast(self, val):
        return float(val)

class spendinginchf(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The spending of the subject in Swiss Francs""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Spending should be positive, represented as a floating point number""
        self.unit = ""Swiss Francs (CHF)""
        self.examples = [500.0, 800.0, 1200.0, 1500.0, 2000.0]
    def cast(self, val):
        return float(val)

class handednesscode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The handedness of the subject, coded as 1 for right, 2 for left, and 3 for both/other""
        self.valid_values = ""1 for right, 2 for left, and 3 for both/other""
        self.format = ""The handedness is stored as a string""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return str(int(val))

class groupdosefkcode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The group or dose that the subject belongs to, coded as 0 for did not participate, 1 for Negative Symptoms, 2 for Control, and 3 for Hypomania""
        self.valid_values = ""0 for did not participate, 1 for Negative Symptoms, 2 for Control, and 3 for Hypomania""
        self.format = ""The group/dose is stored as a string""
        self.examples = ['0', '1', '2', '3']
    def cast(self, val):
        return str(int(val))

class negativesymptomsscore(NumericSemanticType):
    def __init__(self):
        self.description = ""The score for negative symptoms in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be positive, represented as a floating point number""
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]
    def cast(self, val):
        return float(val)

class hypomaniascore(NumericSemanticType):
    def __init__(self):
        self.description = ""The score for hypomania symptoms in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be positive, represented as a floating point number""
        self.examples = [7.0, 8.0, 9.0, 10.0, 11.0]
    def cast(self, val):
        return float(val)

class lossaversion(NumericSemanticType):
    def __init__(self):
        self.description = ""The score for loss aversion in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be positive, represented as a floating point number""
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]
    def cast(self, val):
        return float(val)

class riskaversion(NumericSemanticType):
    def __init__(self):
        self.description = ""The score for risk aversion in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be positive, represented as a floating point number""
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

class consistency(NumericSemanticType):
    def __init__(self):
        self.description = ""The score for consistency in the study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be positive, represented as a floating point number""
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

MAPPING = {
    'subjectnumber': subjectnumber,
    'age': ageinyears,
    'education': educationinyears,
    'gender': gendercode,
    'income': incomeinchf,
    'spending': spendinginchf,
    'handedness': handednesscode,
    'groupdosefk': groupdosefkcode,
    'nsoverall': negativesymptomsscore,
    'hyp': hypomaniascore,
    'lambda': lossaversion,
    'rho': riskaversion,
    'mu': consistency
}"
"class condition(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Health condition or variables related to a health study""
        self.valid_values = ""Condition should be a string representing a health condition or variable""
        self.format = ""Condition should be in lowercase letters with no spaces""
        self.examples = ['codeno', 'condition', 'time', 'age1', 'educ1']
    def cast(self, val):
        return str(val).lower().replace(' ', '')

MAPPING = {'variablelabel': condition}"
"class participantid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Participant ID""
        self.valid_values = ""ID must be a numerical string""
        self.format = ""Participant ID should be a string of digits""
        self.examples = ['1', '18', '29', '42', '43']
    def cast(self, val):
        try:
            return str(int(val))
        except ValueError:
            return float('nan')

class physicalactivitystatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Physical Activity Status""
        self.valid_values = ""Status can be 'Sedentary', 'Standing', 'LIPA', 'MVPA' or a numerical string""
        self.format = ""Status should be a string""
        self.examples = ['Sedentary', 'Standing', 'LIPA', 'MVPA', '100']
    def cast(self, val):
        try:
            if val in ['Sedentary', 'Standing', 'LIPA', 'MVPA']:
                return val
            else:
                return str(int(val))
        except ValueError:
            return float('nan')

MAPPING = {
    'id': participantid, 
    'svm': physicalactivitystatus, 
    'c': physicalactivitystatus, 
    'd': physicalactivitystatus, 
    'e': physicalactivitystatus, 
    'ima': physicalactivitystatus, 
    'g': physicalactivitystatus, 
    'h': physicalactivitystatus, 
    'i': physicalactivitystatus, 
    'tm': physicalactivitystatus, 
    'k': physicalactivitystatus, 
    'l': physicalactivitystatus, 
    'm': physicalactivitystatus, 
    'rf': physicalactivitystatus, 
    'o': physicalactivitystatus, 
    'p': physicalactivitystatus, 
    'q': physicalactivitystatus
}"
"class schooltype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of school""
        self.valid_values = ""The type of school is represented as a number between 1 and 3""
        self.format = ""Type of school should be an integer""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return str(int(val))
        
class studyyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of study""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Year of study should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise Exception('Invalid study year')
        return num

class levelofstudy(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of study""
        self.valid_values = ""The level of study is represented as a number between 1 and 2""
        self.format = ""Level of study should be an integer""
        self.examples = ['1', '2']
    def cast(self, val):
        return str(int(val))
        
class studentscount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of students""
        self.valid_range = [8, 40]
        self.dtype = int
        self.format = ""Number of students should be an integer between 8 and 40""
        self.examples = [8, 10, 20, 30, 40]
    def cast(self, val):
        num = int(val)
        if num < 8 or num > 40:
            raise Exception('Invalid number of students')
        return num
    
class classroomlength(NumericSemanticType):
    def __init__(self):
        self.description = ""Length of classroom""
        self.valid_range = [630.0, 933.8]
        self.dtype = float
        self.format = ""Length of classroom should be a floating point number""
        self.examples = [630.0, 700.0, 800.0, 900.0, 933.8]
    def cast(self, val):
        num = float(val)
        if num < 630.0 or num > 933.8:
            raise Exception('Invalid classroom length')
        return num

class classroomwidth(NumericSemanticType):
    def __init__(self):
        self.description = ""Width of classroom""
        self.valid_range = [650.0, 761.3]
        self.dtype = float
        self.format = ""Width of classroom should be a floating point number""
        self.examples = [650.0, 700.0, 730.0, 760.0, 761.3]
    def cast(self, val):
        num = float(val)
        if num < 650.0 or num > 761.3:
            raise Exception('Invalid classroom width')
        return num

class furthestdistance(NumericSemanticType):
    def __init__(self):
        self.description = ""Furthest distance""
        self.valid_range = [400.0, 762.7]
        self.dtype = float
        self.format = ""Furthest distance should be a floating point number""
        self.examples = [400.0, 500.0, 600.0, 700.0, 762.7]
    def cast(self, val):
        num = float(val)
        if num < 400.0 or num > 762.7:
            raise Exception('Invalid furthest distance')
        return num

class targetonwhiteboard(NumericSemanticType):
    def __init__(self):
        self.description = ""Smallest target on whiteboard""
        self.valid_range = [0.5, 3.0]
        self.dtype = float
        self.format = ""Smallest target on whiteboard should be a floating point number""
        self.examples = [0.5, 1.0, 1.5, 2.0, 3.0]
    def cast(self, val):
        num = float(val)
        if num < 0.5 or num > 3.0:
            raise Exception('Invalid smallest target on whiteboard')
        return num

class neartarget(NumericSemanticType):
    def __init__(self):
        self.description = ""Small near target""
        self.valid_range = [0.1, 0.5]
        self.dtype = float
        self.format = ""Small near target should be a floating point number""
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        num = float(val)
        if num < 0.1 or num > 0.5:
            raise Exception('Invalid small near target')
        return num

class vademand(NumericSemanticType):
    def __init__(self):
        self.description = ""Distant VA demand""
        self.valid_range = [-0.56, 0.52]
        self.dtype = float
        self.format = ""Distant VA demand should be a floating point number""
        self.examples = [-0.56, -0.3, 0.0, 0.3, 0.52]
    def cast(self, val):
        num = float(val)
        if num < -0.56 or num > 0.52:
            raise Exception('Invalid distant VA demand')
        return num

class nearvademand(NumericSemanticType):
    def __init__(self):
        self.description = ""Near VA demand""
        self.valid_range = [0.09, 0.44]
        self.dtype = float
        self.format = ""Near VA demand should be a floating point number""
        self.examples = [0.09, 0.2, 0.3, 0.4, 0.44]
    def cast(self, val):
        num = float(val)
        if num < 0.09 or num > 0.44:
            raise Exception('Invalid near VA demand')
        return num

MAPPING = {
    'typeofschool': schooltype,
    'year': studyyear,
    'levelofstudy': levelofstudy,
    'numberofstudents': studentscount,
    'lengthofclassroom': classroomlength,
    'widthofclassroom': classroomwidth,
    'furthestdistance': furthestdistance,
    'smallesttargetonwhiteboard': targetonwhiteboard,
    'smallneartarget': neartarget,
    'distantvademand': vademand,
    'nearvademand': nearvademand
}"
"class familyplanningmethodtype(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of family planning method""
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = ""Family planning method type should be an integer in the range 0-3""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        if val >= 0 and val <= 3:
            return float(val)
        else:
            raise Exception('Invalid family planning method type')

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid binary response')
        
class qualityscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Quality score of family planning counseling""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Quality score should be a floating point number in the range 0-100""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        if val >= 0 and val <= 100:
            return float(val)
        else:
            raise Exception('Invalid quality score')

class caste(NumericSemanticType):
    def __init__(self):
        self.description = ""Caste of the individual""
        self.valid_range = [1, 3]
        self.dtype = float
        self.format = ""Caste should be an integer in the range 1-3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if val >= 1 and val <= 3:
            return float(val)
        else:
            raise Exception('Invalid caste')

class providerdesignation(NumericSemanticType):
    def __init__(self):
        self.description = ""Designation of the provider""
        self.valid_range = [1, 2]
        self.dtype = float
        self.format = ""Provider designation should be an integer in the range 1-2""
        self.examples = [1, 2]
    def cast(self, val):
        if val == 1 or val == 2:
            return float(val)
        else:
            raise Exception('Invalid provider designation')

class qualityscorecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Category of quality score""
        self.valid_range = [1, 3]
        self.dtype = float
        self.format = ""Quality score category should be an integer in the range 1-3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if val >= 1 and val <= 3:
            return float(val)
        else:
            raise Exception('Invalid quality score category')

MAPPING = {
    'typefpselect': familyplanningmethodtype,
    'askfertilitygoal': binaryresponse,
    'askprobmethod': binaryresponse,
    'askmethodpref': binaryresponse,
    'askmethodusedearly': binaryresponse,
    'tolddiffmethod': binaryresponse,
    'toldmethoduse': binaryresponse,
    'toldmethodside': binaryresponse,
    'toldexpprob': binaryresponse,
    'askquestion': binaryresponse,
    'sufficienttime': binaryresponse,
    'treatfriendly': binaryresponse,
    'treatrespectful': binaryresponse,
    'nopressure': binaryresponse,
    'qualscorefpcounsel': qualityscore,
    'caste': caste,
    'religion': binaryresponse,
    'agewoman': NumericSemanticType,
    'numlivingchild': NumericSemanticType,
    'malechild': binaryresponse,
    'primeduwoman': binaryresponse,
    'ageprovider': NumericSemanticType,
    'providerdesig': providerdesignation,
    'providertrainedcounsel': binaryresponse,
    'qualscorecat': qualityscorecategory
}"
"class treatmenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of treatment""
        self.valid_values = ""Valid values are 'Baseline' and 'Caffeine'""
        self.format = ""Values should be strings and capitalized""
        self.examples = ['Baseline', 'Caffeine', 'Baseline', 'Caffeine', 'Baseline']
    def cast(self, val):
        return str(val).capitalize()

class binarycode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class timeinseconds(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Time measurement in seconds""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be represented as a floating point number with at least 4 decimal places""
        self.unit = ""seconds""
        self.examples = [0.8841, 0.9674, 0.9167, 1.0361, 1.012305]
    def cast(self, val):
        return round(float(val), 4)

class heightincentimeters(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height measurement in centimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be represented as a floating point number with at least 4 decimal places""
        self.unit = ""centimeters""
        self.examples = [36.6675, 30.3825, 26.1525, 26.2775, 30.38]
    def cast(self, val):
        return round(float(val), 4)

class forceinnewtons(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Force measurement in Newtons""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Force should be represented as a floating point number with at least 4 decimal places""
        self.unit = ""newtons""
        self.examples = [0.75875, 0.7455, 0.7725, 0.7925, 0.794]
    def cast(self, val):
        return round(float(val), 4)

class velocityinmeterspersecond(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Velocity measurement in meters per second""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Velocity should be represented as a floating point number with at least 5 decimal places""
        self.unit = ""m/s""
        self.examples = [0.2994, 0.30575, 0.27285, 0.28585, 0.3361]
    def cast(self, val):
        return round(float(val), 5)

MAPPING = {'treatment': treatmenttype, 'code': binarycode, 'divetime': timeinseconds, 'sprinttime': timeinseconds, 'jump': heightincentimeters, 'fith': forceinnewtons, 'fithf': forceinnewtons, 'vrt': velocityinmeterspersecond}"
"class experimentcondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Experiment conditions""
        self.valid_values = ""Values must be one of the following: ['Condition', 'Delay (ms)', 'Subject 1', 'Subject 2', 'Subject 3']""
        self.format = ""Values are strings representing different experiment conditions""
        self.examples = ['Condition', 'Delay (ms)', 'Subject 1', 'Subject 2', 'Subject 3']
    def cast(self, val):
        if val in self.examples:
            return str(val)
        else:
            raise Exception('Invalid experiment condition')

class experimentresult(NumericSemanticType):
    def __init__(self):
        self.description = ""Experiment results""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Values are floating point numbers ranging from 0 to 1, representing the result of an experiment""
        self.examples = [0.9667, 1, 0.9677, 0.9355, 0.96879999999999999]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid experiment result')
        return round(num, 4)

MAPPING = {
    'experiment': experimentcondition, 
    '1': experimentresult, 
    '11': experimentresult, 
    '12': experimentresult, 
    '13': experimentresult, 
    '14': experimentresult, 
    '15': experimentresult, 
    '16': experimentresult, 
    '17': experimentresult, 
    '18': experimentresult, 
    '19': experimentresult, 
    '2': experimentresult, 
    '21': experimentresult, 
    '22': experimentresult, 
    '23': experimentresult, 
    '24': experimentresult, 
    '25': experimentresult, 
    '26': experimentresult, 
    '27': experimentresult, 
    '28': experimentresult, 
    '29': experimentresult
}"
"class proteinname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Protein""
        self.valid_values = ""Protein names are strings of varying length that describe the protein""
        self.format = ""Protein names should be properly capitalized and trimmed of any leading or trailing whitespace""
        self.examples = ['Protein-methionine-sulfoxide reductase heme-binding subunit MsrQ', 'Ketol-acid reductoisomerase (NADP(+))', 'Septum formation inhibitor MinC domain protein', 'Large-conductance mechanosensitive channel', 'Membrane protein insertase, YidC/Oxa1 family domain protein']
    def cast(self, val):
        return str(val).strip().title()

class numberofresidues(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Residues in a Protein""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of residues should be a non-negative integer""
        self.examples = [204, 491, 81, 135, 235]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of residues')
        return num

class molecularweight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Molecular Weight of a Protein""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Molecular weight should be a non-negative floating point number""
        self.unit = 'In Da (Daltons)'
        self.examples = [24109.774999999943, 54191.56999999985, 8670.649999999998, 14792.360000000002, 26402.31999999995]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid molecular weight')
        return num

MAPPING = {'name': proteinname, 'noofresidues': numberofresidues, 'molweight': molecularweight}"
"class projectstage(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Project stages in medical article publishing""
        self.valid_values = ""Stages can be 'instructions', 'whole presentation', 'conciseness', 'criteria for case selection', 'information provided', etc.""
        self.format = ""Stages are string values that represent different stages in publishing a medical article.""
        self.examples = ['whole presentation', 'instructions', 'conciseness', 'criteria for case selection', 'information provided']
    def cast(self, val):
        return str(val).lower()

class multipleprojectstages(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['whole presentation', float('nan')]
    def cast(self, val):
        if pd.isna(val):
            return 'whole presentation'
        else:
            return str(val).lower()
        
MAPPING = {'stage2': projectstage, 'stage3': projectstage, 'stage4': projectstage, 'ifmorethanone': multipleprojectstages}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of the record""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight of the record""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number""
        self.examples = [534.393, 165.24, 208.6176058118797, 437.624, 511.008]
    def cast(self, val):
        return float(val)

class injury(NumericSemanticType):
    def __init__(self):
        self.description = ""Injury count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples = [1, 0, 0, 0, 0]
    def cast(self, val):
        return int(val)

class province(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class urbanorrural(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class householdmembers(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of household members""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples = [6, 8, 7, 4, 3]
    def cast(self, val):
        return int(val)

class datetest(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of the test""
        self.valid_range = [20726, 20934]
        self.dtype = datetime
        self.format = ""Date should be in the format YYYYMMDD""
        self.examples = [20754, 20759, 20754, 20754, 20754]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return datetime.strptime(str(int(val)), '%Y%m%d')

class vehicles(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of vehicle""
        self.valid_values = ""One of ['None', 'Moto only', 'Car only', 'Both']""
        self.format = ""String representing vehicle type""
        self.examples = ['None', 'Moto only', 'Car only', 'Both']
    def cast(self, val):
        return str(val)

MAPPING = {'id': id, 'totalsw': weight, 'injmvaany': injury, 'injmvaadults': injury, 'injmvachildren': injury, 
           'province': province, 'urbanorrural': urbanorrural, 'householdn': householdmembers, 'child04': householdmembers, 
           'child514': householdmembers, 'women15': householdmembers, 'men15': householdmembers, 'datetest': datetest, 
           'nkids': householdmembers, 'nadults': householdmembers, 'injury2allyes': injury, 'injury2allno': injury, 
           'injury2kidyes': injury, 'injury2kidno': injury, 'injury2adultyes': injury, 'injury2adultno': injury, 
           'hasmotorcycle': BooleanSemanticType, 'hascar': BooleanSemanticType, 'vehicles': vehicles, 'vehicles2': vehicles, 
           'outcome2': NumericSemanticType, 'sesindex': NumericSemanticType, 'urban': BooleanSemanticType}"
"class positivenegativevalues(NumericSemanticType):
    def __init__(self):
        self.description = ""Positive and Negative Values""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Positive and Negative Values should be integers""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        val = int(val)
        if val < 0:
            return 0
        else:
            return val

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""1 for Male and 2 for Female""
        self.format = ""Gender should be represented as 1 for Male and 2 for Female""
        self.examples = [1, 2]
    def cast(self, val):
        if val not in [1, 2]:
            raise Exception('Invalid value for gender')
        return int(val)

class cptype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Cerebral Palsy Type""
        self.valid_values = ""1 for type1, 2 for type2, 3 for type3""
        self.format = ""Cerebral Palsy Type should be represented as 1 for type1, 2 for type2, 3 for type3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if val not in [1, 2, 3]:
            raise Exception('Invalid value for Cerebral Palsy Type')
        return int(val)

MAPPING = {'positivedra': positivenegativevalues, 
           'positivedpa': positivenegativevalues, 
           'positivedsa': positivenegativevalues, 
           'positivedsba': positivenegativevalues, 
           'positivedsia': positivenegativevalues, 
           'negativedra': positivenegativevalues, 
           'negativedpa': positivenegativevalues, 
           'negativedsa': positivenegativevalues, 
           'negativedsba': positivenegativevalues, 
           'negativedsia': positivenegativevalues, 
           'sex': sex, 
           'cptype': cptype}"
"class proteinname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Protein""
        self.valid_values = ""Protein name should be a string that represents the protein's scientific name""
        self.format = ""First character should be capitalized""
        self.examples = ['Proline--tRNA ligase', 'tRNA(Phe) 7-((3-amino-3-carboxypropyl)-4-demethylwyosine(37)-N(4))-methyltransferase 1', 'Glycine--tRNA ligase', 'S-adenosyl-L-methionine-dependent tRNA 4-demethylwyosine synthase', 'tRNA(Phe) (4-demethylwyosine(37)-C(7)) aminocarboxypropyltransferase']
    def cast(self, val):
        return str(val).strip().capitalize()

class proteinresidues(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of residues in a protein""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of residues should be a positive integer""
        self.examples = [480, 196, 570, 342, 278]
    def cast(self, val):
        return int(val)

class proteinweight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Molecular weight of a protein""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Molecular weight should be a positive floating point number""
        self.unit = 'In Daltons'
        self.examples = [56098.91, 22657.23, 66458.10, 39840.12, 32150.52]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {'name': proteinname, 'noofresidues': proteinresidues, 'molweight': proteinweight}"
"class timestamp(NumericSemanticType):
    def __init__(self):
        self.description = ""Timestamp in Excel format""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Timestamps should be floating point numbers that represent Excel timestamps""
        self.examples = [42740.56604626158, 42740.5835291088, 42740.5878327199, 42740.58787305556, 42740.58799855324]
    def cast(self, val):
        return pd.to_datetime(datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(val) - 2) + pd.Timedelta(days=int(val)%1))

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F', 'No', 'Yes']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError('Invalid binary response')

class multipleskilllevels(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Responses to a self-assessed digital skill proficiency questionnaire""
        self.valid_values = ""Responses can be any of the following: 'Skillful', 'Depends on the task .', 'Usually need help ', 'Very skillful', 'Not confident at all'""
        self.format = ""Responses should be one of the five options listed in self.valid_values""
        self.examples = ['Skillful', 'Depends on the task .', 'Usually need help ', 'Very skillful', 'Not confident at all']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise ValueError('Invalid skill level response')

class lecturewatchingdevice(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The device used to watch a lecture""
        self.valid_values = ""The device can be any device capable of playing a video""
        self.format = ""Device names should be strings""
        self.examples = ['Smartphone', 'Personal computer', 'Personal computer, Smartphone', 'Smartphone, Personal tablet/pad ', 'Personal tablet/pad ']
    def cast(self, val):
        return val.strip()

class lecturewatchlocation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location where a lecture was watched""
        self.valid_values = ""The location can be any place where a video can be watched""
        self.format = ""Location names should be strings""
        self.examples = ['Home', 'Home, Campus', 'Campus', 'Home, cafe', 'Home, Campus, cafe']
    def cast(self, val):
        return val.strip()

MAPPING = {
    'timestamp': timestamp,
    'gender': binaryresponse,
    'selfassesseddigitalskillproficiencyinternetgooglemobilesmartphoneetc': multipleskilllevels,
    'whatdevicedidyouusetowatchthelecturemultipleselection': lecturewatchingdevice,
    'wheredidyouwatchthelecturemultipleselection': lecturewatchlocation,
    'whattimeofthedaydidyouwatchthelecture': lecturewatchlocation,
    'howmanycompanionsdidyouhavewhilewatchingthevideo': binaryresponse,
    'didyouwatchthevideobeforeeachclass': multipleskilllevels,
    'howdidyousetthespeedofvideoplaying': lecturewatchingdevice,
    'whenwatchingthevideodidyoueverpresstheskipbutton': binaryresponse,
    'haveyoueverstoppedalecturebypressingthepausebuttoninordertobetterunderstandthelecture': multipleskilllevels,
    'haveyouwatchedthevideoagainaspartofstudyingforthemidtermfinalexam': multipleskilllevels,
    'doyouthinkthevideolectureswereeasiertounderstandthanfacetofacelectures': binaryresponse,
    'ifyouhaveanyquestionsaboutperiodontologyaftergraduationwillyouwatchthesevideosagain': multipleskilllevels,
    'haveyousubscribedtoanydentalyoutubechannelincludingthiscourseanddoyoureceiveapushnotificationwhenanewvideoisuploaded': multipleskilllevels,
    'haveyoueversharedamajorrelatedvideolinkusingthesharefunction': binaryresponse,
    'haveyoueveradditionallywatchedvideosrecommendedbyyoutubepresentednexttothescreenwhilewatchinglecturevideos': binaryresponse
}"
"class facilitytype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of medical facility""
        self.valid_values = ""The type of medical facility can be 'General Hospital', 'Polyclinic', 'Teaching Hospital', 'Regional Hospital'""
        self.format = ""The facility type should be a string and one of the valid values""
        self.examples = ['General Hospital', 'Polyclinic', 'Teaching Hospital', 'Regional Hospital']
    def cast(self, val):
        return str(val).strip()

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a patient""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [32, 48, 27, 40, 34]
    def cast(self, val):
        return int(val)

class agegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age group of a patient""
        self.valid_values = ""The age group can be '35-44', '25-34', '45-54', '>54', '15-24'""
        self.format = ""Age group should be a string and one of the valid values""
        self.examples = ['35-44', '25-34', '45-54', '>54', '15-24']
    def cast(self, val):
        return str(val).strip()

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val)

class hivstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""HIV status of a patient""
        self.valid_values = ""The HIV status can be 'No', 'Yes', 'Don’t know'""
        self.format = ""HIV status should be a string and one of the valid values""
        self.examples = ['No', 'Yes', 'Don’t know']
    def cast(self, val):
        return str(val).strip()

class tbdiagnosis(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""TB diagnosis of a patient""
        self.valid_values = ""The TB diagnosis can be 'SPTB', 'SNTB', 'EPTB'""
        self.format = ""TB diagnosis should be a string and one of the valid values""
        self.examples = ['SPTB', 'SNTB', 'EPTB']
    def cast(self, val):
        return str(val).strip()

class ptbeptb(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""PTB or EPTB""
        self.valid_values = ""The value can be 'PTB', 'EPTB'""
        self.format = ""Value should be a string and one of the valid values""
        self.examples = ['PTB', 'EPTB']
    def cast(self, val):
        return str(val).strip()

class tmtoutcome(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Treatment outcome of a patient""
        self.valid_values = ""The treatment outcome can be 'Treatment completed', 'Cured', 'Died', 'Treatment failed', 'Not evaluated'""
        self.format = ""Treatment outcome should be a string and one of the valid values""
        self.examples = ['Treatment completed', 'Cured', 'Died', 'Treatment failed', 'Not evaluated']
    def cast(self, val):
        return str(val).strip()

class eptbsite(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Site of EPTB""
        self.valid_values = ""The site of EPTB can be 'Disseminated', 'Pleural', 'Spine', 'CNS', 'Lymph nodes'""
        self.format = ""Site of EPTB should be a string and one of the valid values""
        self.examples = ['Disseminated', 'Pleural', 'Spine', 'CNS', 'Lymph nodes']
    def cast(self, val):
        return str(val).strip()

MAPPING = {'facilitytype': facilitytype, 'age': age, 'agegroup': agegroup, 'sex': sex, 'hivstatus': hivstatus, 
           'tbdiagnosis': tbdiagnosis, 'ptbeptb': ptbeptb, 'tmtoutcome': tmtoutcome, 'eptbsite': eptbsite}"
"class journaltitle(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Title of a Journal""
        self.valid_values = ""Title should be a string with each word capitalized""
        self.format = ""Each word's first letter should be capitalized and the rest should be lowercase""
        self.examples = ['Vascular Health and Risk Management', 'Journal of Clinical Laboratory Analysis', 'LGBT Health', 'Fibrogenesis and Tissue Repair', 'Journal of Lasers in Medical Sciences']
    def cast(self, val):
        return str(val).title()

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score of a Journal""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be a floating point number""
        self.examples = [130.47, 63.12, 29.94, 88.164, 34.637]
    def cast(self, val):
        return float(val)

class percentile(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentile of a Journal""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Percentile should be an integer""
        self.examples = [99, 70, 100, 50, 25]
    def cast(self, val):
        return int(val)

class citationcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Citation Count of a Journal""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Citation count should be an integer""
        self.examples = [16961, 1010, 2126, 5000, 10000]
    def cast(self, val):
        return int(val)

class scholarlyoutput(NumericSemanticType):
    def __init__(self):
        self.description = ""Scholarly Output of a Journal""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Scholarly output should be an integer""
        self.examples = [130, 16, 71, 100, 200]
    def cast(self, val):
        return int(val)

class percentcited(NumericSemanticType):
    def __init__(self):
        self.description = ""Percent Cited of a Journal""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Percent cited should be an integer""
        self.examples = [70, 100, 50, 25, 75]
    def cast(self, val):
        return int(val)

class publisher(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Publisher of a Journal""
        self.valid_values = ""Publisher should be a string with each word capitalized""
        self.format = ""Each word's first letter should be capitalized and the rest should be lowercase""
        self.examples = ['Elsevier', 'Springer Nature', 'Taylor & Francis', 'Wiley-Blackwell', 'Wolters Kluwer Health']
    def cast(self, val):
        return str(val).title()

class openaccess(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['YES', 'NO']
    def cast(self, val):
        if str(val).upper() in self.valid_values:
            return str(val).upper()
        else:
            raise ValueError('Invalid value for openaccess')

class journaltype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of a Journal""
        self.valid_values = ""Journal type should be one of the following: ['Journal', 'Type']""
        self.format = ""Journal type should be a string""
        self.examples = ['Journal', 'Type']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise ValueError('Invalid value for journaltype')

class ranks(NumericSemanticType):
    def __init__(self):
        self.description = ""Rank of a Journal""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Rank should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

MAPPING = {'b': journaltitle, 'c': score, 'd': percentile, 'e': citationcount, 'f': scholarlyoutput, 'g': percentcited, 'h': score, 'i': score, 'j': ranks, 'k': ranks, 'l': publisher, 'm': journaltype, 'n': openaccess, 'o': ranks, 'q': ranks, 'r': ranks}"
"class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sample ID""
        self.valid_values = ""Sample IDs should be strings with structure 'CRC305C-number-dnumber'""
        self.format = ""Sample IDs should be strings with structure 'CRC305C-number-dnumber'""
        self.examples = ['CRC305C-9004-d0', 'CRC305C-9061-d1', 'CRC305C-9028-d0', 'CRC305C-9018-d3', 'CRC305C-9004-d3']
    def cast(self, val):
        match_obj = re.match('CRC305C-\d+-d\d+', str(val))
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Sample ID')

class domain(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Domain""
        self.valid_values = ""The only valid value for domain is 'CY'""
        self.format = ""Domain value should be 'CY'""
        self.examples = ['CY', 'CY', 'CY', 'CY', 'CY']
    def cast(self, val):
        if str(val) == 'CY':
            return 'CY'
        else:
            raise Exception('Invalid Domain')

class pop(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Population""
        self.valid_values = ""Population values should be strings describing cell populations""
        self.format = ""Population values should be strings describing cell populations""
        self.examples = ['CD14+CD16-', 'CD14+CD16DIM', 'CD14DIMCD16+', 'CD11C+CD16-']
    def cast(self, val):
        return str(val)

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Count should be a non-negative number""
        self.examples = [22204.0, 2153.75, 6404.5, 21445.75, 427948.0]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid Count')

class feat(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Feature""
        self.valid_values = ""Feature values should be strings describing cell features""
        self.format = ""Feature values should be strings describing cell features""
        self.examples = ['CCR5', 'CX3CR1', 'CD64', 'CD32', 'CD40']
    def cast(self, val):
        return str(val)

class obsmea(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Observed Measurement""
        self.valid_values = ""The only valid value for observed measurement is 'MEDIAN INTENSITY'""
        self.format = ""Observed Measurement value should be 'MEDIAN INTENSITY'""
        self.examples = ['MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY', 'MEDIAN INTENSITY']
    def cast(self, val):
        if str(val) == 'MEDIAN INTENSITY':
            return 'MEDIAN INTENSITY'
        else:
            raise Exception('Invalid Observed Measurement')

class obsvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Observed Value""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Observed Value should be a number""
        self.examples = [10.6, 670.0, 1179.0, 15545.0, 8.82]
    def cast(self, val):
        return float(val)

MAPPING = {'sampleid': sampleid, 'domain': domain, 'pop': pop, 'count': count, 'feat': feat, 'obsmea': obsmea, 'obsvalue': obsvalue}"
"class sequencenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Sequence Number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Sequence number should be a positive integer""
        self.examples = [1, 2, 3, 5, 6]
    def cast(self, val):
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a positive integer""
        self.examples = [1999, 2001, 2005, 2007, 2009]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a non-negative integer""
        self.examples = [2, 77, 10, 49, 19]
    def cast(self, val):
        return int(val)

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be a non-negative floating point number""
        self.unit = ""In cm""
        self.examples = [79.0, 150.6, 162.4, 171.6, 204.4]
    def cast(self, val):
        return float(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender should be either 1 (Male) or 2 (Female)""
        self.format = ""Gender should be represented as an integer (1 for Male, 2 for Female)""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid gender')

MAPPING = {'seqn': sequencenumber, 'nhanes': year, 'age': age, 'height': height, 'gender': gender}"
"class patientidentifier(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a patient""
        self.valid_values = ""Should be a string with the format 'Kidney_mor_#'""
        self.format = ""Should be in the form 'Kidney_mor_#', where # is a number""
        self.examples = ['Kidney_mor_1', 'Kidney_mor_2', 'Kidney_mor_3', 'Kidney_mor_4', 'Kidney_mor_5']
    def cast(self, val):
        match = re.match(r'Kidney_mor_\d+', val)
        if match:
            return match.group()
        else:
            raise Exception('Invalid patient identifier')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""The age of an entity""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be an integer number""
        self.examples = [39, 56, 40, 37, 50]
    def cast(self, val):
        num = int(val)
        if 0 <= num <= 150:
            return num
        else:
            raise Exception('Invalid age')

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The sex of an entity""
        self.valid_values = ""Should be either 'Male' or 'Female'""
        self.format = ""Should be either 'Male' or 'Female'""
        self.examples = ['Male', 'Female', 'Male', 'Female', 'Male']
    def cast(self, val):
        if val in ['Male', 'Female']:
            return val
        else:
            raise Exception('Invalid sex')

class survivaldaysaftertransplantation(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of survival days after kidney transplantation""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be an integer number""
        self.examples = [73, 46, 9, 17, 20]
    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of survival days')

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""The weight of an entity in kilograms""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [45.0, 65.0, 52.0, 51.0, 55.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid weight')

class donor(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The status of the donor""
        self.valid_values = ""Should be either 'Deceased', 'Living' or 'Non-heart beating'""
        self.format = ""Should be either 'Deceased', 'Living' or 'Non-heart beating'""
        self.examples = ['Deceased', 'Living', 'Non-heart beating', 'Deceased', 'Living']
    def cast(self, val):
        if val in ['Deceased', 'Living', 'Non-heart beating']:
            return val
        else:
            raise Exception('Invalid donor status')

class retrasplant(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        if val in ['Yes', 'No']:
            return val
        else:
            raise Exception('Invalid retrasplant status')

class abocompatibility(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The ABO compatibility status""
        self.valid_values = ""Should be either 'Identical', 'Compatible' or 'Incompatible'""
        self.format = ""Should be either 'Identical', 'Compatible' or 'Incompatible'""
        self.examples = ['Identical', 'Compatible', 'Incompatible', 'Identical', 'Compatible']
    def cast(self, val):
        if val in ['Identical', 'Compatible', 'Incompatible']:
            return val
        else:
            raise Exception('Invalid ABO compatibility status')

class bun(NumericSemanticType):
    def __init__(self):
        self.description = ""The Blood Urea Nitrogen level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [85.8, 85.0, 13.0, 48.0, 60.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid BUN level')

class creatinine(NumericSemanticType):
    def __init__(self):
        self.description = ""The Creatinine level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [6.7, 13.8, 1.5, 1.3, 2.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Creatinine level')

class glucose(NumericSemanticType):
    def __init__(self):
        self.description = ""The Glucose level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [117.0, 95.0, 233.0, 88.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Glucose level')

class albumin(NumericSemanticType):
    def __init__(self):
        self.description = ""The Albumin level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [3.3, 4.0, 3.7, 3.3, 3.5]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Albumin level')

class protein(NumericSemanticType):
    def __init__(self):
        self.description = ""The Protein level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [5.7, 7.0, 5.6, 6.5, 6.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Protein level')

class sgot(NumericSemanticType):
    def __init__(self):
        self.description = ""The Serum Glutamic-Oxaloacetic Transaminase level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [8.0, 223.0, 36.0, 21.0, 25.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid SGOT level')

class sgpt(NumericSemanticType):
    def __init__(self):
        self.description = ""The Serum Glutamic-Pyruvic Transaminase level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [11.0, 316.0, 94.0, 12.0, 15.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid SGPT level')

class totalbilirubin(NumericSemanticType):
    def __init__(self):
        self.description = ""The Total Bilirubin level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [0.6, 1.1, 0.2, 0.4, 0.5]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Total Bilirubin level')

class sodium(NumericSemanticType):
    def __init__(self):
        self.description = ""The Sodium level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [135.0, 138.0, 142.0, 138.0, 140.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Sodium level')

class potassium(NumericSemanticType):
    def __init__(self):
        self.description = ""The Potassium level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [6.1, 5.9, 4.4, 4.9, 5.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Potassium level')

class chloride(NumericSemanticType):
    def __init__(self):
        self.description = ""The Chloride level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [19.0, 99.0, 114.0, 99.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Chloride level')

class wbc(NumericSemanticType):
    def __init__(self):
        self.description = ""The White Blood Cell count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [825.0, 5.2, 84.0, 519.0, 500.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid WBC count')

class hemoglobin(NumericSemanticType):
    def __init__(self):
        self.description = ""The Hemoglobin level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [11.4, 9.1, 9.7, 9.7, 10.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Hemoglobin level')

class hematocrit(NumericSemanticType):
    def __init__(self):
        self.description = ""The Hematocrit level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [19.2, 28.2, 24.2, 29.0, 30.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Hematocrit level')

class platelet(NumericSemanticType):
    def __init__(self):
        self.description = ""The Platelet count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating-point number""
        self.examples = [274.0, 159.0, 112.0, 164.0, 150.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Platelet count')

MAPPING = {
    's1tabledatasetofrecipientswithtrmafterkidneytransplantation': patientidentifier, 
    'b': age, 
    'c': sex, 
    'd': survivaldaysaftertransplantation, 
    'e': weight, 
    'f': donor, 
    'g': retrasplant, 
    'h': abocompatibility, 
    'i': bun, 
    'j': creatinine, 
    'k': glucose, 
    'l': albumin, 
    'm': protein, 
    'n': sgot, 
    'o': sgpt, 
    'p': totalbilirubin, 
    'q': sodium, 
    'r': potassium, 
    's': chloride, 
    't': wbc, 
    'u': hemoglobin, 
    'v': hematocrit, 
    'w': platelet
}"
"class year(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Years from 1996 to 2016""
        self.valid_values = ""The years should fall within the range from 1996 to 2016""
        self.format = ""The year should be a 4-digit number stored as a string""
        self.examples = ['1996', '2000', '2005', '2010', '2016']
    def cast(self, val):
        val = str(val)
        if re.match('^[1-2][0-9]{3}$', val) and 1996 <= int(val) <= 2016:
            return val
        else:
            raise ValueError('Invalid year')
            
class totaldeath(NumericSemanticType):
    def __init__(self):
        self.description = ""The total number of child deaths""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Total deaths should be integer values""
        self.examples = [6000, 5000, 4000, 3000, 2000]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class injurydeath(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of injury deaths among children""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Injury deaths should be integer values""
        self.examples = [2500, 2000, 1500, 1000, 500]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class injurypercent(NumericSemanticType):
    def __init__(self):
        self.description = ""The percentage of injury deaths among total deaths""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage of injury deaths should be a floating point number""
        self.examples = [40.0, 30.0, 20.0, 10.0, 5.0]
    def cast(self, val):
        num = float(val) if pd.notna(val) else float('nan')
        return round(num, 1)

class deathrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Death rate per 100,000 population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Death rate should be a floating point number""
        self.examples = [30.0, 25.0, 20.0, 15.0, 10.0]
    def cast(self, val):
        num = float(val) if pd.notna(val) else float('nan')
        return round(num, 1)

MAPPING = {
    'supplement1thenumberofchildinjurydeathsanddeathratefrom1996to2016inkorea': year,
    'c': totaldeath,
    'd': injurydeath,
    'g': injurypercent,
    'i': deathrate
}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID should be an integer greater than 0""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num > 0:
            return num
        else:
            raise Exception('Invalid ID')

class code(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A code representing an entity""
        self.valid_values = ""Codes can be any string""
        self.format = ""Codes should be lower-case strings""
        self.examples = ['999', 'k', 'd', 'j', 'kw']
    def cast(self, val):
        return str(val).lower()

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of an individual""
        self.valid_values = ""Gender can be 'male', 'female', or 'other'""
        self.format = ""Gender should be a lower-case string""
        self.examples = ['male', 'female', 'other']
    def cast(self, val):
        val = str(val).lower()
        if val in ['male', 'female', 'other']:
            return val
        else:
            raise Exception('Invalid gender')

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""A rating given to an entity""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Rating should be a floating point number between 1 and 5""
        self.examples = [1.0, 2.5, 3.0, 4.5, 5.0]
    def cast(self, val):
        num = float(val)
        if num >= 1 and num <= 5:
            return round(num, 2)
        else:
            raise Exception('Invalid rating')

class constant(NumericSemanticType):
    def __init__(self):
        self.description = ""A constant value""
        self.valid_range = [1, 1]
        self.dtype = int
        self.format = ""Constant should always be 1""
        self.examples = [1, 1, 1, 1, 1]
    def cast(self, val):
        num = int(val)
        if num == 1:
            return num
        else:
            raise Exception('Invalid constant')

MAPPING = {
    'id': id,
    '1': code,
    '2': gender,
    '3': rating,
    '4': rating,
    '5': rating,
    '11': rating,
    '12': rating,
    '13': rating,
    '14': rating,
    '15': rating,
    '16': rating,
    '17': rating,
    '18': rating,
    '19': rating,
    '110': rating,
    '111': rating,
    '112': rating,
    '113': rating,
    '21': constant
}"
"class heartrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Heartrate in beats per minute""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Heartrate should be a positive integer""
        self.examples = [60, 72, 84, 96, 108]
    def cast(self, val):
        return int(val)

class caloriecount(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Amount of calories burnt""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Calorie count should be a positive floating point number""
        self.unit = 'In Kcal'
        self.examples = [0.925449377, 0.369343757, 0.313061296, 0.431494582, 0.943021295]
    def cast(self, val):
        return round(float(val), 9)

class stepcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of steps taken""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Step count should be a positive floating point number""
        self.examples = [16.78922122, 67.0915257, 67.0915257, 67.0915257, 67.0915257]
    def cast(self, val):
        return round(float(val), 8)

class distancecovered(NumericSemanticType):
    def __init__(self):
        self.description = ""Distance covered""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Distance should be a positive floating point number""
        self.examples = [14.38036272, 56.94511067, 56.94511067, 56.94511067, 56.94511067]
    def cast(self, val):
        return round(float(val), 8)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age in years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [35, 35, 35, 35, 35]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Should be 'M' for Male or 'F' for Female""
        self.format = ""Should be a string with a single character""
        self.examples = ['M', 'F']
    def cast(self, val):
        return str(val)

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a positive floating point number""
        self.unit = 'In Pounds'
        self.examples = [179.0, 179.0, 179.0, 179.0, 179.0]
    def cast(self, val):
        return round(float(val), 1)

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be a positive floating point number""
        self.unit = 'In Feet'
        self.examples = [5.6, 5.6, 5.6, 5.6, 5.6]
    def cast(self, val):
        return round(float(val), 1)

class activitylevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of activity""
        self.valid_values = ""Should be one of the following: ['1.Sedentary', '0.Sleep', '2.Light', '3.Moderate', '4.Vigorous']""
        self.format = ""Should be a string""
        self.examples = ['1.Sedentary', '0.Sleep', '2.Light', '3.Moderate', '4.Vigorous']
    def cast(self, val):
        return str(val)

MAPPING = {'heart': heartrate, 'calories': caloriecount, 'steps': stepcount, 'distance': distancecovered, 'age': age, 'gender': gender, 'weight': weight, 'height': height, 'activity': activitylevel}"
"class cityname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a City""
        self.valid_values = ""City name can be any valid Brazilian city""
        self.format = ""City names should be formatted as strings with first letter capitalized""
        self.examples = ['Brasília', 'Fortaleza', 'Campo Grande', 'Manaus', 'São Paulo']
    def cast(self, val):
        return str(val).title()

class idsequence(NumericSemanticType):
    def __init__(self):
        self.description = ""An ID sequence""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID sequence should be formatted as integers""
        self.examples = [20, 209, 1260, 110, 95]
    def cast(self, val):
        return int(val)

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be formatted as a floating point number""
        self.examples = [5.184958, 122.831619, 800.3343241, 244.720184, 82.337025]
    def cast(self, val):
        return round(float(val), 6)

class agegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Groups""
        self.valid_values = ""Age groups are either '< 25 anos' or '>=25 anos'""
        self.format = ""Age groups should be either '< 25 anos' or '>=25 anos'""
        self.examples = ['< 25 anos', '>=25 anos']
    def cast(self, val):
        return str(val)

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return int(val)

class responsetype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Response types""
        self.valid_values = ""Response types are either 'sim', 'não' or 'nunca'""
        self.format = ""Response types should be either 'sim', 'não' or 'nunca'""
        self.examples = ['sim', 'não', 'nunca']
    def cast(self, val):
        return str(val)

class socioeconomiclevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Socioeconomic level""
        self.valid_values = ""Socioeconomic levels are either 'A-B', 'C' or 'D-E'""
        self.format = ""Socioeconomic levels should be either 'A-B', 'C' or 'D-E'""
        self.examples = ['A-B', 'C', 'D-E']
    def cast(self, val):
        return str(val)

MAPPING = {
    'cidade': cityname, 
    'idseq': idsequence, 
    'peso': weight, 
    'idade2': agegroup, 
    'viosex': binaryresponse, 
    'ideacaosui': responsetype, 
    'viofis': responsetype, 
    'contoumae': responsetype,
    'contoupai': responsetype,
    'onglgbt': responsetype,
    'usodroga': responsetype,
    'relig': responsetype,
    'sitconj': responsetype,
    'testhiv': responsetype,
    'escolcat2': responsetype,
    'audit2': responsetype,
    'corcat3': responsetype,
    'lcadisc419': responsetype,
    'ident2': responsetype,
    'nse3': socioeconomiclevel,
    'aprovafam': responsetype
}"
"class typenum(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A type number from 1 to 3""
        self.valid_values = ""Must be an integer in the range 1 to 3 inclusive""
        self.format = ""Integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 3:
            return int_val
        else:
            raise Exception('Invalid type number')

class uniqueidentifier(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Integer""
        self.examples = [1561447201011, 1540609202011, 1750408027011, 1740382051021, 1820675204011]
    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return val
        else:
            raise Exception('Invalid binary value')

class educationlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education Level from 1 to 4""
        self.valid_values = ""Must be an integer in the range 1 to 4 inclusive""
        self.format = ""Integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 4:
            return int_val
        else:
            raise Exception('Invalid education level')

class socialstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Social Status from 1 to 3""
        self.valid_values = ""Must be an integer in the range 1 to 3 inclusive""
        self.format = ""Integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 3:
            return int_val
        else:
            raise Exception('Invalid social status')

MAPPING = {
    'oritype': typenum,
    'iij': typenum,
    'wuid': uniqueidentifier,
    'unintendedpreg': binaryvalue,
    'e22sign8': binaryvalue,
    'e22sign16': binaryvalue,
    'e22sign18': binaryvalue,
    'pregexpdanger1': binaryvalue,
    'pregexpdanger3': binaryvalue,
    'pregexpdanger5': binaryvalue,
    'pregexpdanger6': binaryvalue,
    'paper4anc': binaryvalue,
    'paperashavis': binaryvalue,
    'paperdel': binaryvalue,
    'papermedu': educationlevel,
    'papersli': socialstatus,
    'paperhedu': educationlevel,
    'papercaste': socialstatus,
}"
"class hospitaltype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Hospital Type""
        self.valid_values = ""Hospital types should be one of the following: Children's  Hospital, General Hospital, Specialized Hospital, Polyclinic""
        self.format = ""Hospital types should be stored as strings""
        self.examples = [""Children's  Hospital"", 'General Hospital', 'Specialized Hospital', 'Polyclinic']
    def cast(self, val):
        return str(val).strip()

class registrationdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Registration date in Julian format""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Dates should be integers""
        self.examples = [18400, 18437, 18561, 18324, 18969]
    def cast(self, val):
        return int(val)

class patientagegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Group of the Patient""
        self.valid_values = ""Age group should be one of the following: 0 to 4 years, 5 to 9 years, 10 to 14 years""
        self.format = ""Age group should be stored as strings""
        self.examples = ['0 to 4 years', '5 to 9 years', '10 to 14 years']
    def cast(self, val):
        return str(val).strip()

class patientgender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the Patient""
        self.valid_values = ""Gender should be one of the following: Male, Female, Missing""
        self.format = ""Gender should be stored as strings""
        self.examples = ['Male', 'Female', 'Missing']
    def cast(self, val):
        return str(val).strip()

class patienthivstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        return str(val).strip() if str(val).strip() in self.valid_values else 'Unknown'

class sputumresult(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sputum Test Result""
        self.valid_values = ""Sputum test results can range from Not Available, Negative, 1+, 2+, 3+, etc.""
        self.format = ""Sputum results should be stored as strings""
        self.examples = ['Not Available', 'Negative', '1+', '2+', '3+']
    def cast(self, val):
        return str(val).strip()

class xraydone(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        return str(val).strip() if str(val).strip() in self.valid_values else ""Don't know""

class xrayresult(CategoricalSemanticType):
    def __init__(self):
        self.description = ""X-Ray Result""
        self.valid_values = ""X-Ray results can range from Suggestive of TB, Other Abnormalities, etc.""
        self.format = ""X-Ray results should be stored as strings""
        self.examples = ['Suggestive of TB', 'Other Abnormalities']
    def cast(self, val):
        return str(val).strip() if not pd.isna(val) else float('nan')

class tbdiagnosis(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Tuberculosis Diagnosis""
        self.valid_values = ""TB Diagnosis can range from Smear positive TB New Case, Smear negative clinical diagnosed new TB, Extra-pulmonary TB, etc.""
        self.format = ""TB Diagnosis should be stored as strings""
        self.examples = ['Smear positive TB New Case', 'Smear negative clinical diagnosed new TB', 'Extra-pulmonary TB']
    def cast(self, val):
        return str(val).strip() if not pd.isna(val) else float('nan')

class treatmentoutcome(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Treatment Outcome""
        self.valid_values = ""Treatment Outcome can range from Treatment completed, Cured, Died, Missing, Treatment failed, etc.""
        self.format = ""Treatment Outcome should be stored as strings""
        self.examples = ['Treatment completed', 'Cured', 'Died', 'Missing', 'Treatment failed']
    def cast(self, val):
        return str(val).strip()

MAPPING = {'facilitytype': hospitaltype, 'regdate': registrationdate, 'age': patientagegroup, 'gender': patientgender, 
           'hivstatus': patienthivstatus, 'sputumresults1': sputumresult, 'sputumresults2': sputumresult, 'xraydone': xraydone,
           'xrayresult': xrayresult, 'tbdiagnosis': tbdiagnosis, 'treatmentoutcome': treatmentoutcome}"
"class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a person""
        self.valid_values = ""1 for Male and 2 for Female""
        self.format = ""Should be an integer (1 for Male, 2 for Female)""
        self.examples = [1,2]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Should be an integer""
        self.examples = [25, 35, 45, 55, 65]
    def cast(self, val):
        return int(val)

class clinical(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1]
    def cast(self, val):
        return int(val)

class sizeg(NumericSemanticType):
    def __init__(self):
        self.description = ""Size group of a lesion""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Should be an integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

MAPPING = {'sex': sex, 'age': age, 'clinical': clinical, 'sizeg': sizeg}"
"class familynumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Family number in the GIFT G18 families""
        self.valid_range = [1, 90]
        self.dtype = int
        self.format = ""Family number should be an integer within the range of 1 to 90""
        self.examples = [1, 22, 43, 69, 90]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class sirefather(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identification code for the sire""
        self.valid_values = ""Identification codes are alphanumeric strings of length 10""
        self.format = ""Identification code should be an alphanumeric string of length 10""
        self.examples = ['00076FABAC', '00076DE7DA', '000771F541', '00076DB4A3', '00076FA8BB']
    def cast(self, val):
        if len(val) != 10 or not val.isalnum():
            raise Exception('Invalid sirefather code')
        return str(val)

class dammother(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identification code for the dam""
        self.valid_values = ""Identification codes are alphanumeric strings of length 10""
        self.format = ""Identification code should be an alphanumeric string of length 10""
        self.examples = ['0007720C30', '0007722A74', '00076DB545', '00076E0D2B', '000771F3E8']
    def cast(self, val):
        if len(val) != 10 or not val.isalnum():
            raise Exception('Invalid dammother code')
        return str(val)

class dateofeggcollection(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of egg collection""
        self.valid_range = [43849, 44028]
        self.dtype = datetime
        self.format = ""Date should be in the format YYYY-MM-DD""
        self.examples = ['2020-01-01', '2020-02-02', '2020-03-03', '2020-04-04', '2020-05-05']
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return pd.to_datetime(val, format='%Y-%m-%d', errors='coerce')

class dateoffrycollection(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of fry collection""
        self.valid_range = [43854, 44003]
        self.dtype = datetime
        self.format = ""Date should be in the format YYYY-MM-DD""
        self.examples = ['2020-01-01', '2020-02-02', '2020-03-03', '2020-04-04', '2020-05-05']
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return pd.to_datetime(val, format='%Y-%m-%d', errors='coerce')

MAPPING = {'familynumber': familynumber, 'sirefather': sirefather, 'dammother': dammother, 'dateofeggcollection': dateofeggcollection, 'dateoffrycollection': dateoffrycollection}"
"class ittglucosemmoll(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Intravenous glucose tolerance test (IVGTT) glucose values""
        self.valid_values = ""Values are expected to be strings representing time intervals or numeric values""
        self.format = ""Values should be either time intervals in the format 'Time (min)' or numeric values representing glucose concentration""
        self.examples = ['Group', 'Time (min)', '0', '30', '60']
    def cast(self, val):
        if isinstance(val, str) and re.match('Time \(\w+\)', val):
            return val
        elif isinstance(val, (int, float)):
            return str(val)
        else:
            raise ValueError('Invalid value for ittglucosemmoll')
        
class glucosemeasurement(NumericSemanticType):
    def __init__(self):
        self.description = ""Glucose concentration in blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Glucose concentration should be a floating point number""
        self.examples = [10.0455, 6.771, 4.7175, 5.2725, 9.324]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif isinstance(val, str) and val.lower() == 'hfd':
            return float('nan')
        else:
            try:
                return float(val)
            except:
                raise ValueError('Invalid value for glucose measurement')

MAPPING = {'ittglucosemmoll': ittglucosemmoll,
           'b': glucosemeasurement,
           'c': glucosemeasurement,
           'd': glucosemeasurement,
           'e': glucosemeasurement,
           'f': glucosemeasurement,
           'g': glucosemeasurement,
           'h': glucosemeasurement}"
"class topics(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Topic of discussion in nutrition-sensitive project""
        self.valid_values = ""Various topics like 'Nutrition/nutrition education/nutrition knowledge and attitudes', 'Kitchen gardening', '(Women) empowerment', 'Poultry keeping', 'Community cohesion'""
        self.format = ""Topics should be strings representing various aspects of the project""
        self.examples = ['Nutrition/nutrition education/nutrition knowledge and attitudes', 'Kitchen gardening', '(Women) empowerment', 'Poultry keeping', 'Community cohesion']
    def cast(self, val):
        return str(val).lower().strip()

class mentionfrequency(NumericSemanticType):
    def __init__(self):
        self.description = ""Frequency of mentions of a statement""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Frequency should be an integer represented by the number of 'I' in the string""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return len(str(val).replace('(', '').replace(')', ''))

MAPPING = {'topic': topics, 'nooftimesstatementmentionedinmenfgds': mentionfrequency, 
           'nooftimesstatementmentionedinwomenfgds': mentionfrequency, 
           'nooftimesstatementmentionedinkiis': mentionfrequency}"
"class distance(NumericSemanticType):
    def __init__(self):
        self.description = ""Distance from the centre of a pad in centimetres""
        self.valid_range = [0.0, 18.0]
        self.dtype = float
        self.format = ""Distance should be a floating point number""
        self.examples = [0.0, 3.0, 6.0, 9.0, 12.0]
    def cast(self, val):
        return float(val)

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature readings from different positions""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Temperature should be a floating point number""
        self.unit = 'In degree Celsius'
        self.examples = [35.0, 36.2, 38.6, 39.0, 39.4]
    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        else:
            return val

MAPPING = {
    'distancefromcentreofpadcm': distance,
    'up': temperature,
    'c': temperature,
    'd': temperature,
    'down': temperature,
    'f': temperature,
    'g': temperature,
    'left': temperature,
    'i': temperature,
    'j': temperature,
    'right': temperature,
    'l': temperature,
    'm': temperature
}"
"class indexnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""A simple index number""
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = ""Index numbers should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid index number')
        return num

class yesnoindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Y', 'N']
    def cast(self, val):
        val = str(val)
        if val not in self.valid_values:
            raise Exception('Invalid yes/no indicator')
        return val

MAPPING = {
    'a': indexnumber,
    'commandandcontrol': yesnoindicator,
    'safety': yesnoindicator,
    'communication': yesnoindicator,
    'assessment': yesnoindicator,
    'triage': yesnoindicator,
    'treatment': yesnoindicator,
    'transport': yesnoindicator
}"
"class bodyofwater(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a body of water""
        self.valid_values = ""Name should be a string""
        self.format = ""The name of the body of water should be capitalized""
        self.examples = ['Koiya Beel Kaima Beel', 'Rajghori Beel', 'Dhola Pakna Jalmahal', 'Basker Beel o Jolsuker Beel']
    def cast(self, val):
        return str(val).title()

class yearcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Year count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Year count should be a floating point number""
        self.examples = [164.424, 197.63, 3.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class projectname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a project""
        self.valid_values = ""Name should be a string""
        self.format = ""The name of the project should be capitalized""
        self.examples = ['Bancharampur', '7', '8', '2', '3']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Year should be a floating point number""
        self.examples = [2017.0, 2018.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class yeartext(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Year text""
        self.valid_values = ""Year text should be a string""
        self.format = ""Year text should be a string""
        self.examples = ['2010-11', '2011-12', '2012-13', '2013-14', '2014-15']
    def cast(self, val):
        return str(val)

MAPPING = {'hilipworldfishpartnershipproject': projectname, 
           'b': bodyofwater, 
           'c': yeartext, 
           'd': yeartext, 
           'e': yeartext, 
           'f': yeartext,
           'g': yeartext,
           'h': yeartext,
           'i': year, 
           'j': year, 
           'k': yearcount, 
           'l': yeartext,
           'm': yeartext,
           'n': yeartext,
           'o': yeartext,
           'p': yeartext,
           'q': yeartext,
           'r': yeartext,
           's': yeartext,
           't': yeartext,
           'u': projectname
          }"
"class studentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for students""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Student ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
        
class location(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Location of the student rotation""
        self.valid_values = ""Should be one of: 'Main Campus', 'Affiliate'""
        self.format = ""Location should be a string""
        self.examples = ['Main Campus', 'Affiliate']
    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid location')
        return str(val)
        
class rotation(NumericSemanticType):
    def __init__(self):
        self.description = ""Rotation number for the student""
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = ""Rotation should be an integer between 1 and 9""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 9:
            raise Exception('Invalid rotation number')
        return num

class completedtasks(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [""Yes"", ""No""]
    def cast(self, val):
        val = str(val).lower()
        if val not in ['yes', 'no']:
            raise Exception('Invalid value')
        return 'Yes' if val == 'yes' else 'No'

class completionsquantity(NumericSemanticType):
    def __init__(self):
        self.description = ""The quantity of completed tasks per student""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The quantity of completions per student should be a non-negative float""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid quantity of completions')
        return num

MAPPING = {
    'student': studentid,
    'location': location,
    'rotation': rotation,
    'observeaprocedureielumbarpuncture': completedtasks,
    'usetheinterpreterphonetoobtainhistoryofapediatricpatient': completedtasks,
    'askapreceptortocritiqueyourclinicalnote': completedtasks,
    'followuponapatientafteryourrotation': completedtasks,
    'quantityofcompletionsperstudent': completionsquantity
}"
"class publicationid(NumericSemanticType):
    def __init__(self):
        self.description = ""Publication ID""
        self.valid_range = [50000, 90000]
        self.dtype = int
        self.format = ""Publication ID must be a 5 digit integer""
        self.examples = [58421, 78077, 61466, 86981, 54062]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)
class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_values = ""Age Category must be one of the following values: 0, 1, 2""
        self.format = ""Age Category must be an integer""
        self.examples = [1, 2, 1, 0, 0]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)
class gendercategory(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
class marriagestatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)
class medinc(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
class occat(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Occupation Category""
        self.valid_values = ""Occupation Category must be one of the following values: 0, 1, 2, 3""
        self.format = ""Occupation Category must be an integer""
        self.examples = [2.0, 2.0, 2.0, 2.0, 0.0]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)
class selfrisk(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Self Risk""
        self.valid_values = ""Self Risk must be one of the following values: 0, 1, 2""
        self.format = ""Self Risk must be an integer""
        self.examples = [1.0, 2.0, 1.0, 1.0, 1.0]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)
class lessoneyrhiv(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
class lessoneyrhep(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
class lessoneyrtb(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
class location(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Location""
        self.valid_values = ""Location must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12""
        self.format = ""Location must be an integer""
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

MAPPING = {'pubid': publicationid, 'agecat': agecategory, 'gender': gendercategory, 'secondplus': gendercategory,
           'married': marriagestatus, 'alcabu': gendercategory, 'medinc': medinc, 'occat': occat, 'selfrisk': selfrisk,
           'lessoneyrhiv': lessoneyrhiv, 'lessoneyrhep': lessoneyrhep, 'lessoneyrtb': lessoneyrtb, 'location': location}"
"class hormonelevel(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Hormone level in the human body""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Hormone level should be a floating point number""
        self.unit = 'pg/mL for estradiol, mIU/mL for fsh and lh, ng/mL for progesterone, mg/dL for cholesterol, glucose, triglycerides and vldl, g/L for leptin, pg/mL for il6'
        self.examples: list = [0.01, 0.5, 1.0, 10.0, 100.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class cholesterollevel(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Cholesterol level in the human body""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cholesterol level should be a floating point number""
        self.unit = 'mg/dL'
        self.examples: list = [50.0, 100.0, 150.0, 200.0, 250.0]
    def cast(self, val):
        return float(val)

class glucoselevel(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Glucose level in the human body""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Glucose level should be a floating point number""
        self.unit = 'mg/dL'
        self.examples: list = [50.0, 70.0, 90.0, 110.0, 130.0]
    def cast(self, val):
        return float(val)

class inflammationlevel(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Inflammation level in the human body""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Inflammation level should be a floating point number""
        self.unit = 'mg/L for crp'
        self.examples: list = [0.01, 0.1, 0.5, 1.0, 2.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class bodymassindex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Body Mass Index category""
        self.valid_values = ""BMI category can take three values: 0 (normal weight), 1 (overweight), 2 (obesity)""
        self.format = ""BMI category should be an integer""
        self.examples = ['0', '1', '2']
    def cast(self, val):
        return int(val)

class menopausestatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1] # 0: pre-menopause, 1: post-menopause
    def cast(self, val):
        return int(val)

MAPPING = {
    'estradiol': hormonelevel,
    'fsh': hormonelevel,
    'lh': hormonelevel,
    'progesterone': hormonelevel,
    'totalcolesterol': cholesterollevel,
    'hdl': cholesterollevel,
    'ldl': cholesterollevel,
    'bloodglucose': glucoselevel,
    'triglycerides': cholesterollevel,
    'vldl': cholesterollevel,
    'crp': inflammationlevel,
    'leptin': hormonelevel,
    'il6': hormonelevel,
    'classbmi': bodymassindex,
    'menopause': menopausestatus
}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be a non-negative integer""
        self.examples = [10, 25, 30, 45, 60]
    def cast(self, val):
        return abs(int(val))
    
class yesnocondition(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        if str(val).lower() in ['yes', 'no']:
            return str(val).capitalize()
        else:
            raise Exception('Invalid yes/no condition')

class iief5score(NumericSemanticType):
    def __init__(self):
        self.description = ""International Index of Erectile Function (IIEF-5) score""
        self.valid_range = [5, 25]
        self.dtype = int
        self.format = ""IIEF-5 score should be an integer between 5 and 25""
        self.examples = [5, 10, 15, 20, 25]
    def cast(self, val):
        num = int(val)
        if 5 <= num <= 25:
            return num
        else:
            raise Exception('Invalid IIEF-5 score')

class edseverity(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Erectile Dysfunction (ED) severity""
        self.valid_values = ""ED severity should be one of the following: 'No Erectile Dysfunction', 'Mild Erectile Dysfunction', 'Mild to moderate Erectile Dysfunction', 'Moderate Erectile Dysfunction', 'Severe Erectile Dysfunction'""
        self.format = ""Capitalization should be consistent, with only the first letter of each word capitalized""
        self.examples = ['No Erectile Dysfunction', 'Mild Erectile Dysfunction', 'Mild To Moderate Erectile Dysfunction', 'Moderate Erectile Dysfunction', 'Severe Erectile Dysfunction']
    def cast(self, val):
        return str(val).title()

class edstatus(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Erectile Dysfunction (ED) status""
        self.valid_values = ""ED status should be either 'No ED' or 'Erectile Dysfunction'""
        self.format = ""Capitalization should be consistent, with only the first letter of each word capitalized""
        self.examples = ['No ED', 'Erectile Dysfunction']
    def cast(self, val):
        return str(val).title()

class agegroup(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age group of a person""
        self.valid_values = ""Age group should be in the form of '<lower limit>-<upper limit> Years Old' or 'Older Than <lower limit> Years Old'""
        self.format = ""Capitalization should be consistent, with only the first letter of each word capitalized""
        self.examples = ['20-29 Years Old', '30-39 Years Old', '40-49 Years Old', '50-59 Years Old', 'Older Than 60 Years Old']
    def cast(self, val):
        return str(val).title()

MAPPING = {'age': age, 
           'hypertension': yesnocondition, 
           'heartdisease': yesnocondition, 
           'stroke': yesnocondition, 
           'dm': yesnocondition, 
           'neurologic': yesnocondition, 
           'chronicliverdisease': yesnocondition, 
           'hormonaldisease': yesnocondition, 
           'kidneyproblems': yesnocondition, 
           'hypercholesterolemia': yesnocondition, 
           'spinaloperation': yesnocondition, 
           'prostateoperation': yesnocondition, 
           'genitaloperation': yesnocondition, 
           'spinaltrauma': yesnocondition, 
           'pelvictrauma': yesnocondition, 
           'genitaltrauma': yesnocondition, 
           'smoker': yesnocondition, 
           'alcoholic': yesnocondition, 
           'drugsuser': yesnocondition, 
           'iief5': iief5score, 
           'edseverity': edseverity, 
           'edstatus': edstatus, 
           'agegroup': agegroup, 
           'agegroup2': agegroup}"
"class recordnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Record number""
        self.valid_range = [1, 31]
        self.dtype = int
        self.format = ""Record number should be an integer between 1 and 31""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 31:
            raise Exception('Invalid record number')
        return num

class measurementtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of measurement""
        self.valid_values = ""Measurement type must be either 'Zeta' or 'Surface Zeta'""
        self.format = ""Measurement type should be a string ('Zeta' or 'Surface Zeta')""
        self.examples = ['Zeta', 'Surface Zeta', 'Zeta', 'Zeta', 'Zeta']
    def cast(self, val):
        if val not in ['Zeta', 'Surface Zeta']:
            raise Exception('Invalid measurement type')
        return val

class datetime(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Measurement date and time""
        self.valid_values = ""Date and time should be in the format 'Weekday, Month Day, Year Hour:Minute:Second AM/PM'""
        self.format = ""Date and time should be a string in the format 'Weekday, Month Day, Year Hour:Minute:Second AM/PM'""
        self.examples = ['Wednesday, February 17, 2016 3:57:50 PM', 'Wednesday, February 17, 2016 4:00:25 PM', 'Wednesday, February 17, 2016 4:02:37 PM', 'Wednesday, February 17, 2016 4:04:31 PM', 'Wednesday, February 17, 2016 4:06:26 PM']
    def cast(self, val):
        date_time_obj = datetime.strptime(val, '%A, %B %d, %Y %I:%M:%S %p')
        return date_time_obj.strftime('%A, %B %d, %Y %I:%M:%S %p')

class temperaturecelsius(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature in Celsius""
        self.valid_range = [24.9, 25.1]
        self.dtype = float
        self.format = ""Temperature should be a floating point number in Celsius""
        self.unit = 'In Celsius'
        self.examples = [25.0, 25.1, 25.0, 24.9, 25.0]
    def cast(self, val):
        num = float(val)
        if num < 24.9 or num > 25.1:
            raise Exception('Invalid temperature')
        return round(num, 1)

class potentialmv(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Potential in millivolts""
        self.valid_range = [-46.4, 10.3]
        self.dtype = float
        self.format = ""Potential should be a floating point number in millivolts""
        self.unit = 'In millivolts'
        self.examples = [-0.0237, -0.0497, -0.00496, -0.043, 10.3]
    def cast(self, val):
        num = float(val)
        if num < -46.4 or num > 10.3:
            raise Exception('Invalid potential')
        return round(num, 4)

class conductivitymscm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Conductivity in mS/cm""
        self.valid_range = [0.126, 0.149]
        self.dtype = float
        self.format = ""Conductivity should be a floating point number in mS/cm""
        self.unit = 'In mS/cm'
        self.examples = [0.137, 0.149, 0.148, 0.143, 0.126]
    def cast(self, val):
        num = float(val)
        if num < 0.126 or num > 0.149:
            raise Exception('Invalid conductivity')
        return round(num, 3)

class countratekcps(NumericSemanticType):
    def __init__(self):
        self.description = ""Count rate in kcps""
        self.valid_range = [15864.9, 540480.9]
        self.dtype = float
        self.format = ""Count rate should be a floating point number in kcps""
        self.examples = [524879.3, 540480.9, 507199.6, 503655.6, 15864.9]
    def cast(self, val):
        num = float(val)
        if num < 15864.9 or num > 540480.9:
            raise Exception('Invalid count rate')
        return round(num, 1)

MAPPING = {'record': recordnumber, 'type': measurementtype, 'measurementdateandtime': datetime, 'tc': temperaturecelsius, 'reportedzetapotentialmv': potentialmv, 'condmscm': conductivitymscm, 'derivedcountratekcps': countratekcps}"
"class sjogrenssyndrome(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Classification of Sjögren's Syndrome""
        self.valid_values = ""Valid values include 'Non-SS', 'Primary SS', 'Secondary SS'""
        self.format = ""Values are strings and only the first letter of each word is capitalized""
        self.examples = ['Non-SS', 'Primary SS', 'Secondary SS']
    def cast(self, val):
        return str(val).title()

class eyecondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Group of eye conditions""
        self.valid_values = ""Valid values include 'SS', 'GVHD', 'GO', 'CG', 'BAK'""
        self.format = ""Values are strings and in all capital letters""
        self.examples = ['SS', 'GVHD', 'GO', 'CG', 'BAK']
    def cast(self, val):
        return str(val).upper()

class subjectid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Identification for subjects""
        self.valid_values = ""Subject IDs must start with 'S' followed by an integer""
        self.format = ""Subject ID should be a string of the form 'Sxx'""
        self.examples = ['S1', 'S12', 'S13', 'S3', 'S4']
    def cast(self, val):
        match_obj = re.match('S[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid subject ID')

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F']
    def cast(self, val):
        if str(val).upper() in self.valid_values:
            return str(val).upper()
        else:
            raise Exception('Invalid gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the subject""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [64, 29, 30, 28, 42]
    def cast(self, val):
        return int(val)

class st(NumericSemanticType):
    def __init__(self):
        self.description = ""Schirmer's test result""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Schirmer's test result should be a floating point number""
        self.examples = [13.0, 13.0, 25.0, 40.0, 28.0]
    def cast(self, val):
        return float(val)

class cfs(NumericSemanticType):
    def __init__(self):
        self.description = ""Corneal fluorescein staining score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Corneal fluorescein staining score should be a floating point number""
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val)

class tfbut(NumericSemanticType):
    def __init__(self):
        self.description = ""Tear film breakup time""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Tear film breakup time should be a floating point number""
        self.examples = [10.0, 5.0, 5.0, 13.0, 10.0]
    def cast(self, val):
        return float(val)

class osdi(NumericSemanticType):
    def __init__(self):
        self.description = ""Ocular Surface Disease Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Ocular Surface Disease Index should be a floating point number""
        self.examples = [21.0, 8.0, 30.0, 3.0, 25.0]
    def cast(self, val):
        return float(val)

MAPPING = {'groupss': sjogrenssyndrome, 'group': eyecondition, 'subjectid': subjectid, 
           'gender': gender, 'age': age, 'st': st, 'cfs': cfs, 'tfbut': tfbut, 'osdi': osdi}"
"class studyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique study identifier""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Study ID should be a floating point number between 0 and 1""
        self.examples = [0.2179386846929094, 0.2896371258824074, 0.1019542756362228, 0.0368813471333709, 0.6395024899183244]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid study ID')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the participant""
        self.valid_values = ""'1' for male, '2' for female""
        self.format = ""Gender should be '1' for male and '2' for female""
        self.examples = ['1', '2']
    def cast(self, val):
        if val == '1':
            return 'Male'
        elif val == '2':
            return 'Female'
        else:
            raise Exception('Invalid gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the participant on admission""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a floating point number""
        self.examples = [39.0, 65.0, 75.0, 81.0, 34.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid age')

class diagnosis(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Diagnosis on admission""
        self.valid_values = ""Diagnosis should be a whole number from 1 to 18""
        self.format = ""Diagnosis should be a whole number""
        self.examples = [1.0, 2.0, 2.0, 5.0, 5.0]
    def cast(self, val):
        num = int(val)
        return num

class comorbidcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of comorbidities""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of comorbidities should be a whole number""
        self.examples = [16.0, 16.0, 14.0, 16.0, 9.0]
    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number of comorbidities')

class ckd(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid CKD value')

class mortality(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid mortality value')

class critcare(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid critical care value')

class akiscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Highest Acute Kidney Injury (AKI) score""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""AKI score should be a whole number between 0 and 3""
        self.examples = [0.0, 0.0, 0.0, 1.0, 0.0]
    def cast(self, val):
        num = int(val)
        if 0 <= num <= 3:
            return num
        else:
            raise Exception('Invalid AKI score')

MAPPING = {'studynumberrand': studyid, 'gender1male2female': gender, 'ageonadmissionyears': age, 'admissiondiagnosishf1acs2cap3copd4uti5ald6gib7sepsis8chole11ticb12nticb13abscess14acutepanc15acuteappendicitis16ent17nof18': diagnosis, 'comorbidcount': comorbidcount, 'ckd1yes0no': ckd, 'mortalitydead1alive0': mortality, 'critcare0yes1no': critcare, 'highestakiscorestage': akiscore}"
"class advertisementtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of advertisement in use""
        self.valid_values = ""Advertisement type should be one of the following: ['TAKE-UP OF:', 'HOTLINE', 'CONSULTATION', 'PROCEDURE']""
        self.format = ""Advertisement type should be a string""
        self.examples = ['TAKE-UP OF:', 'HOTLINE', 'CONSULTATION', 'PROCEDURE']
    def cast(self, val):
        return str(val)

class postcardgroup(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Grouping category for postcards""
        self.valid_values = ""Postcard group can be any string value""
        self.format = ""Postcard group should be a string""
        self.examples = ['Money v control', 'CONTROL', '3.7576697690451564', '1.1787389963805353', '5.2999656002751978']
    def cast(self, val):
        return str(val)
        
class groupdata(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Data associated with a particular group""
        self.valid_values = ""Group data can be any string value""
        self.format = ""Group data should be a string""
        self.examples = ['Information v control', '1.2246938546230759', '0.69070342877341828', '1.6734006734006737', 'COMPENSATION ONLY']
    def cast(self, val):
        return str(val)

class challengetype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of challenge in use""
        self.valid_values = ""Challenge type can be any string value""
        self.format = ""Challenge type should be a string""
        self.examples = ['Challenge v control', 'INFORMATION ONLY', '0.01', '0.60313960666725464', '2.0183299389002034']
    def cast(self, val):
        return str(val)

class compensation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Compensation details""
        self.valid_values = ""Compensation details can be any string value""
        self.format = ""Compensation should be a string""
        self.examples = ['COMPENSATION AND INFORMATION', '24', '27', '24', '2.4590163934426229E-2']
    def cast(self, val):
        return str(val)

class challenge(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Challenge details""
        self.valid_values = ""Challenge details can be any string value""
        self.format = ""Challenge should be a string""
        self.examples = ['CHALLENGE ONLY', 'All Info', '-4.9999999999999996E-6', '18', '16']
    def cast(self, val):
        return str(val)

class compensationchallenge(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Compensation and challenge details""
        self.valid_values = ""Compensation and challenge details can be any string value""
        self.format = ""Compensation and challenge should be a string""
        self.examples = ['COMPENSATION AND CHALLENGE', 'All Challenge', '-7.4999999999999997E-3', '25', '23']
    def cast(self, val):
        return str(val)

MAPPING = {'a': advertisementtype, 'b': advertisementtype, 'postcardgroup': postcardgroup, 'd': groupdata, 'e': challengetype, 'f': compensation, 'g': challenge, 'h': compensationchallenge}"
"class area(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Area of a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Area should be formatted as a floating point number in square kilometers""
        self.units = 'Square Kilometers'
        self.examples = [886.47, 1259.89, 323.3, 908.32, 437.55]
    def cast(self, val):
        return round(float(val), 2)

class roadlength(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Length of the roads in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Road length should be formatted as a floating point number in kilometers""
        self.units = 'Kilometers'
        self.examples = [244.0, 248.0, 138.0, 334.0, 178.0]
    def cast(self, val):
        return round(float(val), 2)

class coastlinelength(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Length of the coastline of a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Coastline length should be formatted as a floating point number in kilometers""
        self.units = 'Kilometers'
        self.examples = [17.447, 23.225]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        return round(float(val), 2)

class tsunamiheight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Average height of Tsunami in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Tsunami height should be formatted as a floating point number in meters""
        self.units = 'Meters'
        self.examples = [0.0, 16.900503, 13.144628]
    def cast(self, val):
        return round(float(val), 2)

class binary(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents a binary variable""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary variable can take only values 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class populationdensity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Density of population in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Population density should be formatted as a floating point number in persons per square kilometer""
        self.units = 'Persons per square kilometer'
        self.examples = [336.55737, 47.170784, 126.003716]
    def cast(self, val):
        return round(float(val), 2)

class crimeprop(NumericSemanticType):
    def __init__(self):
        self.description = ""Proportion of crime in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Proportion of crime should be formatted as a floating point number""
        self.examples = [0.009924652, 0.0037691402, 0.0055723297]
    def cast(self, val):
        return round(float(val), 4)

class deathprop(NumericSemanticType):
    def __init__(self):
        self.description = ""Proportion of deaths in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Proportion of deaths should be formatted as a floating point number""
        self.examples = [0.008466623, 0.013579001, 0.012543879]
    def cast(self, val):
        return round(float(val), 4)

class employmentprop(NumericSemanticType):
    def __init__(self):
        self.description = ""Proportion of employment in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Proportion of employment should be formatted as a floating point number""
        self.examples = [0.00012401625, 0.010297829, 0.0073888605]
    def cast(self, val):
        return round(float(val), 4)

class householdprop(NumericSemanticType):
    def __init__(self):
        self.description = ""Proportion of single households in a location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Proportion of single households should be formatted as a floating point number""
        self.examples = [0.3763087, 0.26632577, 0.26965252]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {'areat': area, 'roadp': roadlength, 'coastlinelength': coastlinelength, 'avtsunami': tsunamiheight, 'mergeinto': binary, 'unitednew': binary, 'popdensity': populationdensity, 'propcrime': crimeprop, 'heightcrime': crimeprop, 'imputedmaxbank': crimeprop, 'percgendeath': deathprop, 'propdeadmissflood': deathprop, 'fishempperc': employmentprop, 'ffeprop': employmentprop, 'percsinglehouseholds': householdprop, 'ldpst25': binary, 'ldp2530': binary, 'ldp3035': binary, 'ldplt35': binary}"
"class diettype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of diet""
        self.valid_values = ""Diet type should be a string, either 'HFD' or a floating point number""
        self.format = ""Diet type should be 'HFD' or a floating point number with up to 16 decimal places""
        self.examples = ['HFD', '6.2715000000000005', '14.874000000000001', '24.142500000000002', '25.252500000000001']
    def cast(self, val):
        if val == 'HFD':
            return 'HFD'
        else:
            try:
                return ""{:.16f}"".format(float(val))
            except ValueError:
                return float('nan')

class bloodglucoselevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Blood glucose level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Blood glucose level should be a floating point number with up to 16 decimal places""
        self.examples = [0, 5, 15]
    def cast(self, val):
        try:
            return ""{:.16f}"".format(float(val))
        except ValueError:
            return float('nan')

MAPPING = {'ogttglucosemmoll': bloodglucoselevel, 'b': diettype, 'c': diettype, 'd': diettype, 'e': diettype, 'f': diettype, 'g': diettype, 'h': diettype, 'i': diettype}"
"class surveyresponse(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Survey response""
        self.valid_values = ""Possible values are 1 or 2""
        self.format = ""Survey responses are stored as integers""
        self.examples = ['1', '2']
    def cast(self, val):
        if val in [1, 2]:
            return str(val)
        else:
            raise Exception('Invalid survey response')

class surveynumericalresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey numerical response""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Survey numerical responses are stored as integers""
        self.examples = [1, 2, 3, 4, 5, 6]
    def cast(self, val):
        if val in range(1, 7):
            return int(val)
        else:
            raise Exception('Invalid survey numerical response')

MAPPING = {'q1': surveyresponse, 'q2': surveyresponse, 'q3': surveyresponse, 'q4': surveynumericalresponse, 'q5': surveyresponse, 'q6': surveyresponse, 'q7': surveyresponse, 'q8': surveyresponse, 'q9': surveyresponse, 'q10': surveyresponse, 'q11': surveyresponse, 'q12': surveyresponse, 'q13': surveyresponse, 'q14': surveyresponse, 'q15': surveyresponse, 'q16': surveyresponse, 'q17': surveyresponse, 'q18': surveyresponse, 'q19': surveyresponse, 'q20': surveyresponse, 'q21': surveyresponse, 'q22': surveyresponse, 'q23': surveyresponse, 'q24': surveyresponse, 'q25': surveyresponse, 'q26': surveyresponse, 'q27': surveyresponse, 'q28': surveyresponse, 'q29': surveyresponse}"
"class contactid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Contact ID""
        self.valid_values = ""Contact IDs should be a string with the format 'xxxxx-xxxx-x'""
        self.format = ""Contact ID must be a string of 5 digits followed by a hyphen, 4 digits, a hyphen and then 1 digit""
        self.examples = ['001027-0001-1', '001027-0012-2', '001027-0005-3', '001027-0006-9', '001027-0007-6']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('^\d{5}-\d{4}-\d$', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid contact ID')

class indexid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Index ID""
        self.valid_values = ""Index IDs should be a string with the format 'xxxxx-xxxx-x'""
        self.format = ""Index ID must be a string of 5 digits followed by a hyphen, 4 digits, a hyphen and then 1 digit""
        self.examples = ['001026-0001-6', '001026-0002-8', '001026-0003-6', '001026-0004-7', '001026-0005-8']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('^\d{5}-\d{4}-\d$', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid index ID')

class healthunits(NumericSemanticType):
    def __init__(self):
        self.description = ""Health Units""
        self.valid_range = [1, 14]
        self.dtype = int
        self.format = ""Health Units should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class tbtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""TB Type""
        self.valid_values = ""TB Type should be one of the following: 'Pulmonar', 'MDR', 'Extrapulmonar'""
        self.format = ""TB Type must be a string that is one of the 3 pre-defined categories""
        self.examples = ['Pulmonar', 'MDR', 'Extrapulmonar']
    def cast(self, val):
        types = ['Pulmonar', 'MDR', 'Extrapulmonar']
        if val in types:
            return val
        else:
            raise Exception('Invalid TB Type')

class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_values = ""Age Category should be one of the following: '20+', '05-19', '00-04'""
        self.format = ""Age Category must be a string that is one of the 3 pre-defined categories""
        self.examples = ['20+', '05-19', '00-04']
    def cast(self, val):
        categories = ['20+', '05-19', '00-04']
        if val in categories:
            return val
        else:
            raise Exception('Invalid Age Category')

class procedurecompletion(NumericSemanticType):
    def __init__(self):
        self.description = ""Completion of a procedure""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Procedure completion should be formatted as an integer (0 or 1)""
        self.examples = [0, 1]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid procedure completion value')

MAPPING = {'contactid': contactid, 'indexid': indexid, 'eess': healthunits, 'indextbtype': tbtype, 'contactagecat': agecategory, 'ppdaplaced': procedurecompletion, 'ppdlindyn': procedurecompletion, 'anysymptomv0': procedurecompletion, 'exdonev0': procedurecompletion, 'raddonev0': procedurecompletion, 'ptrx': procedurecompletion, 'anysymptomv1': procedurecompletion, 'exdonev1': procedurecompletion, 'raddonev1': procedurecompletion, 'anysymptomv2': procedurecompletion, 'exdonev2': procedurecompletion, 'raddonev2': procedurecompletion}"
"class studyid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Study ID of a participant""
        self.valid_values = ""Study ID should be a string that uniquely identifies a participant""
        self.format = ""The Study ID should be capitalized and may contain numbers""
        self.examples = ['SID12345', 'SID67890', 'SID11223', 'SID44556', 'SID77889']
    def cast(self, val):
        return str(val).upper()

class studyvisit(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Study visit""
        self.valid_values = ""Study visit should be a string that represents the visit number or description""
        self.format = ""The Study Visit should be capitalized and may contain numbers and/or descriptive words""
        self.examples = ['Visit1', 'Visit2', 'Initial', 'Final', 'FollowUp']
    def cast(self, val):
        return str(val).title()

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a participant""
        self.valid_values = ""Sex should be a string that represents the gender of the participant. It should only take the values 'Male', 'Female' or 'Other'""
        self.format = ""The Sex should be capitalized""
        self.examples = ['Male', 'Female', 'Other']
    def cast(self, val):
        return str(val).title()

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a participant""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be formatted as a floating point number with two decimal places for pounds""
        self.unit = 'In lbs' 
        self.examples = [150.50, 130.75, 180.00, 200.90, 170.25]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a participant""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be formatted as a floating point number with two decimal places for centimeters""
        self.unit = 'In cm' 
        self.examples = [150.50, 130.75, 180.00, 200.90, 170.25]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'variable': studyid, 'visit': studyvisit, 'sex': sex, 'wt': weight, 'ht': height}"
"class studyid(NumericSemanticType):
    def __init__(self):
        self.description = 'The Study ID'
        self.valid_range = [1000, 1200]
        self.dtype = int
        self.format = ""Study ID should be a 4-digit integer""
        self.examples = [1001, 1049, 1158, 1191, 1108]
    def cast(self, val):
        return int(val)
        
class telomere(NumericSemanticType):
    def __init__(self):
        self.description = ""Telomere length""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Telomere length should be a floating point number""
        self.examples = [1.1489919332782708, 1.4800934209980383, 1.488749391321074, 1.3566733841111491, 0.972653]
    def cast(self, val):
        return round(float(val), 6)
        
class snappe2(NumericSemanticType):
    def __init__(self):
        self.description = ""SNAPPE-II Score""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""SNAPPE-II Score should be a floating point number""
        self.examples = [25.0, 41.0, 68.0, 44.0, 9.0]
    def cast(self, val):
        return round(float(val), 1)

class birthweight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight at birth""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Birth weight should be an integer""
        self.unit = ""In grams""
        self.examples = [670, 700, 600, 750, 495]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the infant""
        self.valid_values = ""Can be either 0 or 1 where 1 signifies male and 0 signifies female""
        self.format = ""Should be either 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class yesno(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Yes or No represented as 1 or 0""
        self.valid_values = ""Can be either 0 or 1 where 1 signifies Yes and 0 signifies No""
        self.format = ""Should be either 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class specimen(NumericSemanticType):
    def __init__(self):
        self.description = ""Specimen count""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Specimen count should be an integer""
        self.examples = [1, 4, 5, 9, 10]
    def cast(self, val):
        return int(val)

class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sample ID""
        self.valid_values = ""Sample ID should be alphanumeric""
        self.format = ""Sample ID should be a string with 4 characters""
        self.examples = ['KG01', 'KG02', 'KG03', 'KG06', 'KG04']
    def cast(self, val):
        return str(val)

class gestageweek(NumericSemanticType):
    def __init__(self):
        self.description = ""Gestational age in weeks""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Gestational age should be a floating point number""
        self.examples = [27.29, 26.14, 27.215, 28.0, 29.0]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {
    'studyid': studyid, 
    'telomere': telomere, 
    'snappe2': snappe2, 
    'birthweight': birthweight, 
    'sex': gender, 
    'bpd': yesno, 
    'necrotizingenterocolitis': yesno,
    'pda': yesno, 
    'bloodculturegrowth': yesno, 
    'antenatalsteroids': yesno, 
    'modeofdelivery': yesno, 
    'specimen': specimen, 
    'sampleid': sampleid, 
    'gestageweek': gestageweek, 
    'sga10': yesno
}"
"class blocknumber(NumericSemanticType):
    def __init__(self):
        self.description: str = ""The block number in a sequence of blocks""
        self.valid_range: list = [0, float('inf')] 
        self.dtype: object = float 
        self.format: str = ""Block numbers are represented as floating point numbers""
        self.examples: list = [2.0, 4.0, 8.0, 10.0, 12.0] 
    def cast(self, val): 
        return float(val)
    
class coursesection(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = ""Different sections of a course""
        self.valid_values: str = ""The sections are 'SET', 'Online', and 'CD'""
        self.format: str = ""Course sections are represented as strings""
        self.examples: list = ['SET', 'Online', 'CD', 'SET', 'Online']
    def cast(self, val):
        return str(val)
        
class courseorganizationrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of course organization""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.5, 3.0, 4.5, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class eventsequencingrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of sequencing of events/coordination of events""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class examrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of exams/quizzes""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class lecturecontentrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of lecture content organization""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class teachingmodalitiesrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of specific teaching modalities""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class coursecommunicationrating(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Rating of course communication""
        self.valid_range: list = [0, 5] 
        self.dtype: object = float 
        self.format: str = ""Ratings are represented as floating point numbers between 0 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0] 
    def cast(self, val): 
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

MAPPING = {'block': blocknumber, 'b': coursesection, 'courseorganization': courseorganizationrating, 
           'sequencingofeventscoordinatingevents': eventsequencingrating, 'examsquizzes': examrating, 
           'lecturecontentorganization': lecturecontentrating, 'specificteachingmodalities': teachingmodalitiesrating,
           'coursecommunication': coursecommunicationrating}"
"class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ID of a Sample""
        self.valid_values = ""Sample ID should be a string that starts with 'BG' followed by numbers""
        self.format = ""Sample ID should be of the form 'BGXXX' where XXX is a numeric value""
        self.examples = ['BG116', 'BG152', 'BG51', 'BG108', 'BG54']
    def cast(self, val):
        val = str(val)
        match_obj = re.match(r'BG\d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid sample ID')

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage representation of a value""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be a floating point number between 0 and 100""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        val = float(val)
        if 0 <= val <= 100:
            return val
        else:
            raise Exception('Invalid percentage value')

class speciesname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Scientific name of a Species""
        self.valid_values = ""Species name should be a string that is in the form 'Genus species'""
        self.format = ""The first letter of the genus should be capitalized and the species name should be in lowercase""
        self.examples = ['Panulirus argus', 'Dasyatis americana', 'Strombus gigas', 'Ginglymostoma cirratum', 'Carcharhinus perezii']
    def cast(self, val):
        val = str(val).strip()
        if re.match(r'^[A-Z][a-z]*\s[a-z]*$', val):
            return val
        else:
            raise Exception('Invalid species name')

class commonname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Common name of a Species""
        self.valid_values = ""Common name should be a string""
        self.format = ""Each word in the common name should start with a capital letter""
        self.examples = ['Spiny Lobster', 'Southern Stingray', 'Queen Conch', 'Nurse Shark', 'Caribbean Reef Shark']
    def cast(self, val):
        return str(val).title()

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of an individual""
        self.valid_values = ""Sex should be one of the following: '-', 'F', 'M', '?', 'M (Juv)'""
        self.format = ""Sex should be represented as a string""
        self.examples = ['-', 'F', 'M', '?', 'M (Juv)']
    def cast(self, val):
        val = str(val)
        if val in ['-', 'F', 'M', '?', 'M (Juv)']:
            return val
        else:
            raise Exception('Invalid sex value')

class recordid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a Record""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Record ID should be a positive integer""
        self.examples = [1, 10, 100, 1000, 10000]
    def cast(self, val):
        val = int(val)
        if val > 0:
            return val
        else:
            raise Exception('Invalid record ID')

MAPPING = {
    'sample': sampleid,
    'co2ht': percentage,
    'wt': percentage,
    'percentc': percentage,
    'd13c': NumericSemanticType,
    'nht': percentage,
    'percentn': percentage,
    'd15n': NumericSemanticType,
    'cn': NumericSemanticType,
    'species': speciesname,
    'commonname': commonname,
    'tissue': CategoricalSemanticType,
    'sex': sex,
    'sizecm': CategoricalSemanticType,
    'type': CategoricalSemanticType,
    'srt': CategoricalSemanticType,
    'recid': recordid
}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents a unique identifier for each row""
        self.valid_range = [2, 1365]
        self.dtype = int
        self.format = ""Values should be integers and should not contain any special characters""
        self.examples = [2, 3, 4, 5, 6]
    def cast(self, val):
        return int(val)

class totalscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents a total score""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Values should be integers and should not contain any special characters""
        self.examples = [1, 5, 19, 12, 7]
    def cast(self, val):
        return int(val)

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {
    'serialno': serialnumber,
    'anxtotal': totalscore,
    'deptotal': totalscore,
    'feartotal': totalscore,
    'sleeptotal': totalscore,
    'i01gender': binaryresponse,
    'i06por': binaryresponse,
    'i09ut': binaryresponse,
    'sleepqualitybinary': binaryresponse,
    'programbinary': binaryresponse
}"
"class academicstudy(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Study conducted by an academic or group of academics""
        self.valid_values = ""Studies should be a string of the form 'Author et al, Year'""
        self.format = ""The first letter of the author's name should be capitalized and the year should be in yyyy format""
        self.examples = ['Bush et al, 2017', 'Mackintosh et al, 2017', 'Morland et al, 2016', 'Melvin et al., 2018', 'Tighe et al, 2017']
    def cast(self, val):
        return str(val).title()

class healthmeasure(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Health measure used in a study""
        self.valid_values = ""Measures should be a string that starts with one letter (representing the type of measure) followed by a hyphen and the acronym of the measure""
        self.format = ""The first letter should be capitalized, followed by a hyphen and the acronym of the measure""
        self.examples = ['S-Suicide Ideation', 'G-PHQ-9', 'S-Suicide Plans', 'L-B-IPF', 'S-BSS']
    def cast(self, val):
        return str(val).upper()

class meanvalue(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Mean value of a measure""
        self.valid_range: list = [float('-inf'), float('inf')]
        self.dtype: object = float
        self.format: str = ""Mean should be a floating point number""
        self.examples: list = [10.57, 8.81, 10.81, 16.41, 24.9]
    def cast(self, val):
        return float(val)

class standarddeviation(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Standard deviation of a measure""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = ""Standard deviation should be a floating point number""
        self.examples: list = [7.73, 7.18, 2.86, 6.35, 8.73]
    def cast(self, val):
        return float(val)

class testretestcorrelation(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Test-retest correlation of a measure""
        self.valid_range: list = [-1, 1]
        self.dtype: object = float
        self.format: str = ""Correlation should be a floating point number between -1 and 1""
        self.examples: list = [0.7, 0.7, 0.7, 0.7, 0.7]
    def cast(self, val):
        return float(val)

class samplesize(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Sample size of a study""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = ""Sample size should be an integer""
        self.examples: list = [50, 50, 50, 50, 49]
    def cast(self, val):
        return int(val)

class effectdirection(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Direction of the effect observed in the study""
        self.valid_values = ""Effect direction should be either 2 (negative) or 3 (positive)""
        self.format = ""Effect direction should be represented as an integer""
        self.examples = [3, 3, 3, 3, 2]
    def cast(self, val):
        return int(val)

MAPPING = {'study': academicstudy, 
           'measure': healthmeasure, 
           'premean': meanvalue, 
           'presd': standarddeviation, 
           'postmean': meanvalue, 
           'postsd': standarddeviation, 
           'testretestcorrcandefaultto7': testretestcorrelation, 
           'n': samplesize, 
           'effectdirection3positive2negative': effectdirection}"
"class stimulationgroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Stimulation group in the experiment""
        self.valid_values = ""Stimulation group must be one of the following: 'Sham 1 mA', 'Sham 2 mA', 'Anodal 1 mA', 'Anodal 2 mA', 'Cathodal 1 mA', 'Cathodal 2 mA'""
        self.format = ""Stimulation group is a string indicating the group of stimulation in the experiment""
        self.examples = ['Sham 1 mA', 'Sham 2 mA', 'Anodal 1 mA', 'Anodal 2 mA', 'Cathodal 1 mA', 'Cathodal 2 mA']
    def cast(self, val):
        val = str(val)
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid stimulation group')

class participant(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Participant in the experiment""
        self.valid_values = ""Participant is a string representing an anonymous participant in the experiment""
        self.format = ""Participant is represented as a string""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        return str(val)

class experimentresult(NumericSemanticType):
    def __init__(self):
        self.description = ""Result of the experiment""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Experiment result should be a decimal number between 0 and 1""
        self.examples = [0, 0.5, 1]
    def cast(self, val):
        num = float(val)
        if self.valid_range[0] <= num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid experiment result')

MAPPING = {
    'a': stimulationgroup,
    'experiment1averageidentifcationrateoutoftwotrialspercondition1correct0incorrect': participant,
    'c': experimentresult,
    'd': experimentresult,
    'e': experimentresult,
    'f': experimentresult,
    'g': experimentresult,
    'h': experimentresult
}"
"class chromosome(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The chromosome number of the genetic variant""
        self.valid_values = ""Chromosome numbers should be within the range 1-22, X, or Y""
        self.format = ""Chromosome numbers should be stored as strings""
        self.examples = ['1', '19', '6', '2', '11']
    def cast(self, val):
        return str(val)

class position(NumericSemanticType):
    def __init__(self):
        self.description = ""The position of the genetic variant on the chromosome""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Position should be a floating point number""
        self.examples = [108898775.0, 69361281.0, 53544725.0, 130276675.0, 38738202.0]
    def cast(self, val):
        return float(val)

class variantid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The unique identifier of the genetic variant""
        self.valid_values = ""Variant IDs should start with 'rs' followed by a series of digits""
        self.format = ""Variant IDs should be stored as strings""
        self.examples = ['rs752074397', 'rs913543', 'rs17879759', 'rs17590', 'rs2072797']
    def cast(self, val):
        return str(val)

class gene(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The gene in which the genetic variant is located""
        self.valid_values = ""Gene names should consist of alphanumeric characters and underscores""
        self.format = ""Gene names should be stored as strings""
        self.examples = ['DAO', 'ADGRB3', 'GCLC', 'CPA2', 'SUN2']
    def cast(self, val):
        return str(val)

class exonicfunction(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The function of the genetic variant in the exome""
        self.valid_values = ""Exonic functions should be one of the following: ['exonic', 'UTR3', 'UTR5', 'ncRNA_intronic', 'upstream']""
        self.format = ""Exonic functions should be stored as strings""
        self.examples = ['exonic', 'UTR3', 'UTR5', 'ncRNA_intronic', 'upstream']
    def cast(self, val):
        return str(val)

class allele(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The allele of the genetic variant""
        self.valid_values = ""Alleles should be one of the following: ['A', 'T', 'G', 'C', '-']""
        self.format = ""Alleles should be stored as strings""
        self.examples = ['A', 'T', 'G', 'C', '-']
    def cast(self, val):
        return str(val)

class allelefrequency(NumericSemanticType):
    def __init__(self):
        self.description = ""The frequency of the alternate allele in the population""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Allele frequency should be a floating point number between 0 and 1""
        self.examples = [0.0093833780160857, 0.758713136729222, 0.0663956639566396, 0.683646112600536, 0.0509383378016086]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid allele frequency')

class energyexpenditure(NumericSemanticType):
    def __init__(self):
        self.description = ""The energy expenditure associated with the genetic variant""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Energy expenditure should be a floating point number""
        self.examples = [-267.865539534646, 55.1440336087256, 94.4127838702549, -50.3779849247316, -105.280369971031]
    def cast(self, val):
        return float(val)

class pvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""The p-value of the association between the genetic variant and the trait""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""P-value should be a floating point number between 0 and 1""
        self.examples = [1.45414549758062e-05, 1.80626984613767e-05, 2.38756651001788e-05, 5.47656319105322e-05, 6.53900813226633e-05]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid p-value')

MAPPING = {'chr': chromosome, 'position': position, 'variantid': variantid, 'gene': gene, 'exonicfunction': exonicfunction, 
           'refallele': allele, 'altallele': allele, 'frequencyaltallelen373': allelefrequency, 
           'frequencyaltallelen3180fullheritagepimaindians': allelefrequency, 'βaltkcalday': energyexpenditure, 'pvalue': pvalue}"
"class residentid(NumericSemanticType):
    def __init__(self):
        self.description = ""The ID of a resident""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The ID should be a non-negative float""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid Resident ID')
        return float(val)

class totalscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Total score of a resident""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The total score should be a non-negative float""
        self.examples = [24.0, 25.0, 22.0, 28.0, 22.0]
    def cast(self, val):
        if val < 0 or math.isnan(val):
            raise Exception('Invalid Total Score')
        return float(val)

class questionscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Score of a question""
        self.valid_range = [0, 4.0]
        self.dtype = float
        self.format = ""The question score should be a float between 0.0 and 4.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 3.0]
    def cast(self, val):
        if val < 0 or val > 4.0 or math.isnan(val):
            raise Exception('Invalid Question Score')
        return float(val)

class year(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_values = ""Year should be in the format YY-YY""
        self.format = ""Year should be a string in the format YY-YY""
        self.examples = ['07-08', '08-09', '09-10', '10-11', '11-12']
    def cast(self, val):
        if not re.match('\d{2}-\d{2}', str(val)):
            raise Exception('Invalid Year Format')
        return str(val)

MAPPING = {'resident': residentid, 'total': totalscore, 'q1': questionscore, 'q2': questionscore, 'q3': questionscore, 'q4': questionscore, 'q5': questionscore, 'q6': questionscore, 'q7': questionscore, 'j': year}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique ID of a patient""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Patient ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Blood pressure""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Blood pressure should be a floating point number""
        self.unit = ""In mmHg""
        self.examples = [110.0, 122.0, 128.0, 130.0, 110.0]
    def cast(self, val):
        return float(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a floating point number""
        self.examples = [72.0, 77.0, 68.0, 78.0, 82.0]
    def cast(self, val):
        return float(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(""Invalid value for gender"")

class race(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race of a person""
        self.valid_values = ""Caucasian, African A, Asian ""
        self.format = ""Race should be one of the following: Caucasian, African A, Asian""
        self.examples = ['Caucasian', 'African A', 'Asian ']
    def cast(self, val):
        if val in self.valid_values:
            return val.strip()
        else:
            raise ValueError(""Invalid value for race"")

class bmi(NumericSemanticType):
    def __init__(self):
        self.description = ""Body Mass Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""BMI should be a floating point number""
        self.examples = [32.51, 28.59, 28.97, 22.96, 27.25]
    def cast(self, val):
        return float(val)

class diseasepresence(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(""Invalid value for disease presence"")

class hscrp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""High-sensitivity C-reactive protein""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Hs-CRP should be a floating point number""
        self.unit = ""In mg/L""
        self.examples = [0.29, 17.16, 2.7, 0.09, 4.92]
    def cast(self, val):
        return float(val)

MAPPING = {'id': patientid, 'sbp': bloodpressure, 'dbp': bloodpressure, 'age': age, 'gender': gender, 'race': race, 'bmi': bmi, 'dmdurationyrs': age, 'htn': diseasepresence, 'cad': diseasepresence, 'pvd': diseasepresence, 'cec': patientid, 'µalbmcgmg': hscrp, 'crmgdl': hscrp, 'egfr': hscrp, 'vwa': hscrp, 'hscrp': hscrp, 'ldl': hscrp, 'hba1c': hscrp, 'hct': hscrp, 'alb': hscrp, 'ua': hscrp}"
"class ordinalnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""An ordinal number is a number that tells the position of something in a list""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Ordinal numbers should be non-negative floating point numbers""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date in Excel format""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Dates should be non-negative floating point numbers, representing the number of days since 1900-01-01""
        self.examples = [43363.0, 43370.0, 43371.0, 43372.0, 43373.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return pd.to_datetime(float(val), unit='D', origin='1899-12-30')

class coreelement(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Core elements of character education for medical students""
        self.valid_values = ""The core elements should be string representations of various attributes""
        self.format = ""Core elements should be lowercase strings""
        self.examples = ['empathy', 'honest', 'sense of responsibility', 'consideration', 'an understanding of others']
    def cast(self, val):
        return str(val).lower()

MAPPING = {'number': ordinalnumber, 'id': ordinalnumber, 'replydate': date, 
           'coreelements': coreelement, 'e': coreelement, 'f': coreelement, 
           'g': coreelement, 'h': coreelement, 'i': coreelement, 'j': coreelement, 
           'k': coreelement, 'l': coreelement, 'm': coreelement}"
"class yearid(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Numeric representation of year id""
        self.valid_range: list = [1, 3] # values are between 1 and 3
        self.dtype: object = int # integer data-type
        self.format: str = ""Year id should be an integer""
        self.examples: list = [1, 2, 3] 
    def cast(self, val): # Cast value to the canonical format
        return int(val)

class year(CategoricalSemanticType):
    def __init__(self):
        self.description: str = ""Year string representation""
        self.valid_values: str = ""The year string must be of the form '12PT713', '13PT713', '12PT743'""
        self.format: str = ""Year string should be in the format '12PT713', '13PT713', '12PT743'""
        self.examples: list = ['12PT713', '13PT713', '12PT743'] 
    def cast(self, val): # Cast value to the canonical format
        return str(val)

class studentid(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Numeric representation of student id""
        self.valid_range: list = [1, 43] # values are between 1 and 43
        self.dtype: object = int # integer data-type
        self.format: str = ""Student id should be an integer""
        self.examples: list = [1, 10, 20, 29, 43]
    def cast(self, val): # Cast value to the canonical format
        return int(val)

class questionnaireanswer(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Numeric representation of a questionnaire answer""
        self.valid_range: list = [-2, 2] # values are between -2 and 2
        self.dtype: object = int # integer data-type
        self.format: str = ""Questionnaire answer should be an integer""
        self.examples: list = [-2, 0, 1, 2]
    def cast(self, val): # Cast value to the canonical format
        return int(val)

MAPPING = {
    'yrid': yearid,
    'yr': year,
    'id': studentid,
    'q1': questionnaireanswer,
    'q2': questionnaireanswer,
    'q3': questionnaireanswer,
    'q4': questionnaireanswer,
    'q5': questionnaireanswer,
    'q6': questionnaireanswer,
    'q7': questionnaireanswer,
    'q8': questionnaireanswer,
    'q9': questionnaireanswer,
    'q10': questionnaireanswer,
    'q11': questionnaireanswer,
    'q12': questionnaireanswer,
    'q13': questionnaireanswer,
    'q14': questionnaireanswer,
    'q15': questionnaireanswer
}"
"class citation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A citation of a scientific paper""
        self.valid_values = ""Citations should be strings in the format 'Author et al (Year)'""
        self.format = ""The first author's last name should come first, followed by 'et al', then the year of publication in parentheses""
        self.examples = ['Webb E. A. et al (2012)', 'Chan, J. et al (2014)', 'Watson, P. et al (2016)', 'Isaak, R. et al (2018)', 'Johnson, M. et al (2013)']
    def cast(self, val):
        if isinstance(val, str):
            match_obj = re.match(r'(\w+ \w\. A\. et al \(\d{4}\))', val)
            if match_obj:
                return match_obj.group()
            else:
                return 'Citation format is invalid'
        else:
            return float('nan')

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country names should be strings that match the official country names or common names as per the pycountry library""
        self.format = ""Each word in the country name should start with a capital letter""
        self.examples = ['United Kingdom', 'Canada', 'Northern Ireland', 'United States of America', 'Australia']
    def cast(self, val):
        if isinstance(val, str):
            try:
                return pycountry.countries.lookup(val).name
            except:
                return 'Country name is invalid'
        else:
            return float('nan')
            
class participants(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of the participants of a study""
        self.valid_values = ""Descriptions should be strings containing the number and type of participants""
        self.format = ""The description should start with the number of participants, followed by a description of the participant type""
        self.examples = ['3522 paediatric trainees from 2006-2008', '30 third medical students', '955 final year Bachelor of Medicine students from 2010-2013', '41 anaesthesiology residents', '100 senior high school students']
    def cast(self, val):
        if isinstance(val, str):
            return val
        else:
            return float('nan')

MAPPING = {'supplement2characteristicsofkeyfindingsofincludedstudies': citation, 
           'b': countryname, 
           'c': participants}"
"class oritype(NumericSemanticType):
    def __init__(self):
        self.description = ""Original type of an entity""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Integer numbers between 1 and 3""
        self.examples = [1, 2, 3, 2, 1]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 3:
            raise ValueError(""Invalid oritype"")
        return num

class finalwt(NumericSemanticType):
    def __init__(self):
        self.description = ""Final weight of an entity""
        self.valid_range = [0.03836125, 9.612873]
        self.dtype = float
        self.format = ""Floating point numbers between 0.03836125 and 9.612873""
        self.examples = [0.76765555, 0.18841963, 0.14461339, 1.2024814, 0.20434117]
    def cast(self, val):
        num = float(val)
        if num < 0.03836125 or num > 9.612873:
            raise ValueError(""Invalid finalwt"")
        return num

class wuid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier of an entity""
        self.valid_range = [3127032011.0, 71315138011.0]
        self.dtype = float
        self.format = ""Floating point numbers between 3127032011.0 and 71315138011.0""
        self.examples = [54538201011.0, 47201224012.0, 56485007022.0, 23347440011.0, 23351315011.0]
    def cast(self, val):
        num = float(val)
        if num < 3127032011.0 or num > 71315138011.0:
            raise ValueError(""Invalid wuid"")
        return num

class lit(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        num = float(val)
        if num != 0.0 and num != 1.0:
            raise ValueError(""Invalid lit"")
        return num

class parity(NumericSemanticType):
    def __init__(self):
        self.description = ""Parity of an entity""
        self.valid_range = [0.0, 3.0]
        self.dtype = float
        self.format = ""Floating point numbers between 0.0 and 3.0""
        self.examples = [2.0, 3.0, 3.0, 0.0, 0.0]
    def cast(self, val):
        num = float(val)
        if num < 0.0 or num > 3.0:
            raise ValueError(""Invalid parity"")
        return num

MAPPING = {'oritype': oritype, 'finalwt': finalwt, 'wuid': wuid, 'lit': lit, 'parity': parity}"
"class avoidancebatscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Avoidance BAT Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Avoidance BAT score should be a floating point number.""
        self.examples = [44.664, 47.105, 43.963, 45.264, 48.859, 48.12]
    def cast(self, val):
        return round(float(val), 3)

class avoidancebatretestscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Avoidance BAT retest score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Avoidance BAT retest score should be a floating point number.""
        self.examples = [53.913, 51.02]
    def cast(self, val):
        if pd.isna(val): 
            return float('nan')
        return round(float(val), 3)

class avoidancersqscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Avoidance RSQ Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Avoidance RSQ score should be a floating point number.""
        self.examples = [41.786, 44.196, 43.277, 43.083]
    def cast(self, val):
        return round(float(val), 3)

class anxietybatscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Anxiety BAT Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Anxiety BAT score should be a floating point number.""
        self.examples = [49.334, 53.34, 54.886, 52.398, 53.913, 51.02]
    def cast(self, val):
        if pd.isna(val): 
            return float('nan')
        return round(float(val), 3)

class anxietyrsqscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Anxiety RSQ Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Anxiety RSQ score should be a floating point number.""
        self.examples = [49.571, 43.286, 39.091, 44.078]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {
    'avoidancebatfrench': avoidancebatscore,
    'avoidancersqfrench': avoidancersqscore,
    'avoidancebatamerican': avoidancebatscore,
    'avoidancersqamerican': avoidancersqscore,
    'avoidancebattunisian': avoidancebatscore,
    'avoidancersqtunisian': avoidancersqscore,
    'avoidancebatcomposite': avoidancebatscore,
    'avoidancersqcomposite': avoidancersqscore,
    'avoidancebatretestt1': avoidancebatretestscore,
    'avoidancebatretestt2': avoidancebatretestscore,
    'anxietybatfrench': anxietybatscore,
    'anxietyrsqfrench': anxietyrsqscore,
    'anxietybatamerican': anxietybatscore,
    'anxietyrsqamerican': anxietyrsqscore,
    'anxietybattunisian': anxietybatscore,
    'anxietyrsqtunisian': anxietyrsqscore,
    'anxietybatcomposite': anxietybatscore,
    'anxietyrsqcomposite': anxietyrsqscore,
    'anxietybatretestt1': anxietybatscore,
    'anxietybatretestt2': anxietybatscore
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country name should be a valid country name as per the pycountry library""
        self.format = ""Country name should be in capitalized format""
        self.examples = ['Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class month(NumericSemanticType):
    def __init__(self):
        self.description = ""Month of the Year""
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = ""Month should be represented as an integer between 1 and 12""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 1 and val <= 12:
            return val
        else:
            raise Exception('Invalid month')

class incidence(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Incidence of the disease""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Incidence should be represented as a float number""
        self.unit = ""Incidence per 100,000 population""
        self.examples = [1.51, 103.955, 410.265, 1638.12, 300.19]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid incidence value')

class booleanindex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        val = int(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean index')

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage of a certain variable""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be represented as a float number between 0 and 100""
        self.unit = ""Percentage (%)""
        self.examples = [0, 25.5, 46, 63.25, 79]
    def cast(self, val):
        val = float(val)
        if val >= 0 and val <= 100:
            return val
        else:
            raise Exception('Invalid percentage')

MAPPING = {'actori': countryname, 'targetj': countryname, 'month': month, 'incidencei': incidence, 'incidencej': incidence,
           'containmenthealthindex': percentage, 'trustgovpubadmin2020': percentage, 'diffincidenceji': incidence,
           'travelrestriction01': booleanindex, 'numberofpartytypes': NumericSemanticType, 'tourincgdp': NumericSemanticTypeWithUnits,
           'symmetricsample': booleanindex}"
"class municipality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of municipalities""
        self.valid_values = ""Names of municipalities in Brazil""
        self.format = ""First letter of each word capitalized, special characters allowed""
        self.examples = ['Acegué', 'Água Santa', 'Agudo', 'Ajuricaba', 'Alecrim']
    def cast(self, val):
        return str(val).title()

class ibgecode(NumericSemanticType):
    def __init__(self):
        self.description = ""IBGE code""
        self.valid_range = [4300034, 4323804]
        self.dtype = int
        self.format = ""7-digit integer number""
        self.examples = [4300034, 4300059, 4300109, 4300208, 4300307]
    def cast(self, val):
        return int(val)

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude""
        self.valid_range = [-33.68659999999, -27.16079999999]
        self.dtype = float
        self.format = ""Latitude in decimal degrees, negative values for Southern Hemisphere""
        self.examples = [-31.86075999999, -28.1672, -29.6447, -28.2342, -27.6579]
    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude""
        self.valid_range = [-57.5497, -49.7333]
        self.dtype = float
        self.format = ""Longitude in decimal degrees, negative values for Western Hemisphere""
        self.examples = [-54.16705999999, -52.03099999999, -53.2515, -53.7757, -54.76489999999]
    def cast(self, val):
        return float(val)

class healthindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Health Index""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Value between 0 and 1, representing the health index of a municipality, stored as float""
        self.examples = [0.797, 0.772, 0.766, 0.788, 0.810]
    def cast(self, val):
        return round(float(val.replace(',', '.')), 3)

MAPPING = {'município': municipality, 'ibge': ibgecode, 'latitude': latitude, 'longitude': longitude, 'idesesaude2013': healthindex}"
"class geneticsubtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Genetic Subtype""
        self.valid_values = ""Should be one of Epi1, Epi2, Epi3""
        self.format = ""The subtype should be a string""
        self.examples = ['Epi1', 'Epi2', 'Epi3']
    def cast(self, val):
        return str(val).strip()
        
class patientid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Patient ID""
        self.valid_values = ""Should be a string""
        self.format = ""The ID should be a string""
        self.examples = ['PM 009A', 'PM 089A', 'PM 162A', 'PM 126A', 'PM 153A']
    def cast(self, val):
        return str(val).strip()

class patientsex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Male', 'Female']
    def cast(self, val):
        if val == 'Male':
            return 'Male'
        elif val == 'Female':
            return 'Female'
        else:
            raise Exception('Invalid sex')

class patientage(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Age of the patient""
        self.valid_range: list = [0, 100]
        self.dtype: object = int
        self.format: str = ""Age should be an integer""
        self.examples: list = [30, 45, 60, 75, 90]
    def cast(self, val):
        return int(val)
        
class patienttumorthickness(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Thickness of the tumor in the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Thickness should be a floating point number""
        self.unit = ""In mm""
        self.examples = [1.7, 4.4, 0.74, 1.63, 0.7]
    def cast(self, val):
        return round(float(val), 2)

class tumorulceration(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        if val == 'Yes':
            return 'Yes'
        elif val == 'No':
            return 'No'
        else:
            raise Exception('Invalid value for ulceration')

MAPPING = {'subtype': geneticsubtype, 
           'id': patientid, 
           'sex': patientsex, 
           'age': patientage, 
           'thick': patienttumorthickness, 
           'ulcer': tumorulceration}"
"class patientnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Patient Number in a Clinical Study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Patient number should be a positive whole number and stored as a float""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or math.modf(num)[0] != 0.0:
            raise Exception('Invalid patient number')
        return num

class clinicalscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Clinical Score of a Patient in a Clinical Study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Clinical score should be a positive whole number and stored as a float""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 0 or math.modf(num)[0] != 0.0:
            raise Exception('Invalid clinical score')
        return num

class clinicalfactor(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid clinical factor value')
        return val

MAPPING = {'no': patientnumber, 'chf': clinicalfactor, 'hypertension': clinicalfactor, 'dm': clinicalfactor, 'copd': clinicalfactor, 'esrd': clinicalfactor, 'cancer': clinicalfactor, 'cva': clinicalfactor, 'cad': clinicalfactor, 'aorticaneurysm': clinicalfactor, 'saps': clinicalscore, 'apache': clinicalscore, 'mods': clinicalscore, 'c1': clinicalfactor, 'c2': clinicalfactor, 'c3': clinicalfactor, 'c4': clinicalfactor, 'c5': clinicalfactor, 'c6': clinicalfactor, 'co1': clinicalfactor, 'co8': clinicalfactor, 'weanfromecmo': clinicalfactor}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be represented as an integer""
        self.examples = [36, 38, 60, 53, 37]
    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be represented as a floating point number""
        self.unit = ""Height is measured in centimeters""
        self.examples = [155, 156, 158, 157, 158]
    def cast(self, val):
        return float(val)

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be represented as a floating point number""
        self.unit = ""Weight is measured in kilograms""
        self.examples = [72, 60, 72, 64, 70]
    def cast(self, val):
        return float(val)

class wc(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Waist circumference""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Waist circumference should be represented as a floating point number""
        self.unit = ""Waist circumference is measured in centimeters""
        self.examples = [97, 107, 120, 111, 89]
    def cast(self, val):
        return float(val)

class duration(NumericSemanticType):
    def __init__(self):
        self.description = ""Duration of an event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Duration should be represented as an integer""
        self.examples = [4, 9, 12, 15, 2]
    def cast(self, val):
        return int(val)

class diabetes(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date should be in the format YYYY-MM-DD""
        self.format = ""Date should be represented as a string""
        self.examples = ['2014-06-02', '2015-03-10', '2014-04-10', '2014-05-12', '2014-04-16']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class group(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class bloodpressure(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Blood pressure""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Blood pressure should be represented as a floating point number""
        self.unit = ""Blood pressure is measured in mmHg""
        self.examples = [210, 180, 220, 205, 170]
    def cast(self, val):
        return float(val)

class status(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1]
    def cast(self, val):
        return int(val)

class bloodpressurediff(NumericSemanticType):
    def __init__(self):
        self.description = ""Difference in blood pressure""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Blood pressure difference should be represented as a floating point number""
        self.examples = [20, -5, 10, 35, 20]
    def cast(self, val):
        return float(val)

class bmi(NumericSemanticType):
    def __init__(self):
        self.description = ""Body Mass Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""BMI should be represented as a floating point number""
        self.examples = [29.9687825182102, 24.65483234714004, 28.841531805800354, 25.96454217209623, 28.040378144528123]
    def cast(self, val):
        return float(val)

class sideff(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'age': age, 'gender': gender, 'height': height, 'weight': weight, 'wc': wc, 'duration': duration, 'diabetes': diabetes, 'date': date, 'group': group, 'sysbp0': bloodpressure, 'diabp0': bloodpressure, 'sysbp1': bloodpressure, 'diabp1': bloodpressure, 'sysbp2': bloodpressure, 'sysctrl': status, 'diabp2': bloodpressure, 'diactrl': status, 'se': status, 'status': status, 'sysdiff': bloodpressurediff, 'diadiff': bloodpressurediff, 'bmi': bmi, 'sideff': sideff}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender should be either 'male' or 'female'. Other variations like 'M', 'm', 'F', 'f' are also acceptable but should be cast to 'male' or 'female' respectively""
        self.format = ""Gender should be stored as strings 'male' or 'female'""
        self.examples = ['male', 'female', 'male', 'female', 'male']
    def cast(self, val):
        val = str(val).lower()
        if val == 'm' or val == 'male':
            return 'male'
        elif val == 'f' or val == 'female':
            return 'female'
        else:
            return 'unknown'

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be represented as a whole number""
        self.examples = [23, 45, 67, 89, 30]
    def cast(self, val):
        return int(val)
        
class residence(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Place of residence""
        self.valid_values = ""Residence should be a string representing a place""
        self.format = ""Residence names should be stored as strings, with the first letter of each word capitalized""
        self.examples = ['Alhag Yosef', 'Ombada', 'Omdorman', 'Alsawra', 'Khartoum']
    def cast(self, val):
        return str(val).title()

class clinicalremarks(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Clinical remarks""
        self.valid_values = ""Clinical remarks should be a string describing a medical condition or observation""
        self.format = ""Clinical remarks should be stored as strings, with the first letter of each word capitalized""
        self.examples = ['Thyroid Swelling', 'Neck Swelling', 'Right Thyroid Swelling']
    def cast(self, val):
        return str(val).title()

class macroscopic(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Macroscopic measurement of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Measurements should be a floating point number (in cm units)""
        self.unit = 'In cm' 
        self.examples: list[str] = [4.0, 6.0, 2.0, 3.0, 2.0]
    def cast(self, val):
        val = re.findall(r""\d+\.?\d*"", str(val))
        if len(val) > 0:
            return float(val[0])
        else:
            return float('nan')

class diagnosis(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Medical diagnosis""
        self.valid_values = ""Diagnosis should be a string describing a medical condition""
        self.format = ""Diagnosis should be stored as strings, with the first letter of each word capitalized""
        self.examples = ['Benigin', 'Malignant', 'Follicular Neoplasm']
    def cast(self, val):
        return str(val).title()

class type(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of a medical condition""
        self.valid_values = ""Type should be a string describing a specific medical condition""
        self.format = ""Type should be stored as strings, with the first letter of each word capitalized""
        self.examples = ['Colloid Goiter', 'Hemorrhagic Cyst', 'Colloid Goiter With Cystic Changes']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of an event""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be represented as a whole number""
        self.examples = [2020, 2021, 2019, 2018, 2017]
    def cast(self, val):
        val = int(val)
        if val > datetime.now().year:
            return float('nan')
        return val

MAPPING = {'sex': gender, 'age': age, 'residence': residence, 'clinicalremarks': clinicalremarks, 'macroscopic': macroscopic, 'diagosis': diagnosis, 'type': type, 'year': year}"
"class diagnosis(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Diagnosis of a patient""
        self.valid_values = ""Valid diagnoses include 'PD' for Parkinson's Disease and 'DX' for Diagnosis""
        self.format = ""Diagnosis should be represented as a string""
        self.examples = ['PD', 'DX']
    def cast(self, val):
        return str(val).upper()

class targetlocation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Location of the target in the brain""
        self.valid_values = ""Valid locations include 'STN' and 'Target'""
        self.format = ""Location should be represented as a string""
        self.examples = ['STN', 'Target']
    def cast(self, val):
        return str(val).upper()

class onstate(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""ON state of the patient""
        self.valid_values = ""Valid ON states include 'offon', 'onoff', 'ON first'""
        self.format = ""ON state should be represented as a string""
        self.examples = ['offon', 'onoff', 'ON first']
    def cast(self, val):
        return str(val).lower()

class accuracy(NumericSemanticType):
    def __init__(self):
        self.description = ""Accuracy of a measurement""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Accuracy should be represented as a float""
        self.examples = [0.7, 0.6, 0.8667, 0.5, 0.9]
    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')
        
MAPPING = {
    'a': diagnosis,
    'b': targetlocation,
    'c': onstate,
    'd': accuracy,
    'onon': accuracy,
    'f': accuracy,
    'g': accuracy,
    'h': accuracy,
    'offoff': accuracy,
    'j': accuracy,
    'k': accuracy
}"
"class sequence(NumericSemanticType):
    def __init__(self):
        self.description = ""A sequence of numbers""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Sequence should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class worksheetname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Worksheet names in a spreadsheet""
        self.valid_values = ""Worksheet names should be a string representing the name of the worksheet""
        self.format = ""Worksheet names should be formatted as strings with only the first letter of each word capitalized""
        self.examples = ['Table Of Contents', 'Degs Day 9 Pgsn Vs Vehicle', 'Full Mouse Drivermap Gene List', 'D9 Degs For Enrichment Anlysi', 'Panthergobioprocdownreg Pgsn D9']
    def cast(self, val):
        return str(val).title()

MAPPING = {'a': sequence, 'worksheetnameintab': worksheetname}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [45, 48, 37, 41, 39]
    def cast(self, val):
        return abs(int(val))

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Height should be a positive integer""
        self.unit = ""In cm""
        self.examples = [145, 148, 151, 151, 150]
    def cast(self, val):
        return abs(int(val))

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Weight should be a positive integer""
        self.unit = ""In kg""
        self.examples = [49, 65, 72, 50, 60]
    def cast(self, val):
        return abs(int(val))

class workingperiod(NumericSemanticType):
    def __init__(self):
        self.description = ""Working period of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Working period should be a positive integer""
        self.examples = [15, 10, 20, 25, 30]
    def cast(self, val):
        return abs(int(val))

class leveleducation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of Education""
        self.valid_values = ""Values should be integers""
        self.format = ""Level of education in integer format""
        self.examples = ['2', '1', '3', '4']
    def cast(self, val):
        return int(val)

class workingtimeperday(NumericSemanticType):
    def __init__(self):
        self.description = ""Working hours per day""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Working time should be a positive integer""
        self.examples = [6, 8, 10, 12, 14]
    def cast(self, val):
        return abs(int(val))

MAPPING = {'b': age, 'c': height, 'd': weight, 'e': workingperiod, 'f': leveleducation, 'g': workingtimeperday}"
"class sportactivity(NumericSemanticType):
    def __init__(self):
        self.description = ""Sport Activity Levels""
        self.valid_range = [1, 15]
        self.dtype = int
        self.format = ""Sport Activity Levels should be an integer between 1 and 15""
        self.examples = [1, 3, 7, 12, 15]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 15:
            raise Exception('Invalid sport activity level')
        return num

class activeinactive(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid activity level')
        return num

class gendercode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid gender code')
        return num

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age in Years""
        self.valid_range = [16, 47]
        self.dtype = int
        self.format = ""Age should be an integer between 16 and 47""
        self.examples = [16, 18, 23, 35, 47]
    def cast(self, val):
        num = int(val)
        if num < 16 or num > 47:
            raise Exception('Invalid age')
        return num

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height in Centimeters""
        self.valid_range = [153, 201]
        self.dtype = int
        self.format = ""Height should be an integer between 153 and 201""
        self.unit = 'In cm'
        self.examples = [153, 160, 170, 180, 201]
    def cast(self, val):
        num = int(val)
        if num < 153 or num > 201:
            raise Exception('Invalid height')
        return num

MAPPING = {'sport': sportactivity, 'active': activeinactive, 'sexcode': gendercode, 'age': age, 'height': height}"
"class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country code of a country""
        self.valid_values = ""Country codes must be two-letter country abbreviations according to ISO 3166""
        self.format = ""Country codes must be upper case""
        self.examples = ['US', 'GB', 'CN', 'IN', 'BR']
    def cast(self, val):
        val = str(val).strip().upper()
        if pycountry.countries.get(alpha_2=val) is not None:
            return val
        else:
            raise Exception('Invalid country code')

class region(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Region of the world""
        self.valid_values = ""Regions can be any string representing a geographical region""
        self.format = ""The first letter of each word in the region name should be capitalized""
        self.examples = ['Europe & Central Asia', 'Sub-Saharan Africa', 'Latin America & Caribbean', 'East Asia & Pacific', 'Middle East & North Africa']
    def cast(self, val):
        return str(val).title()

class incomegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Income group of a country""
        self.valid_values = ""The income group can be one of four values: 'High income', 'Upper middle income', 'Lower middle income', 'Low income'""
        self.format = ""The first letter of each word in the income group name should be capitalized""
        self.examples = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']
    def cast(self, val):
        val = str(val).title()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid income group')

class consumption(NumericSemanticType):
    def __init__(self):
        self.description = ""Consumption of a product or resource""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Consumption should be a positive floating point number""
        self.examples = [0.0, 1.23, 4.56, 7.89, 10.0]
    def cast(self, val):
        val = float(val)
        if val < 0:
            raise Exception('Invalid consumption value')
        return val

MAPPING = {
    'id': None,
    'economy': None,
    'code': countrycode,
    'region': region,
    'incomegroup': incomegroup,
    'humangpcapitapyearraw': consumption,
    'humangpdayraw': consumption,
    'humangpcapitapyear': consumption,
    'humangpday': consumption,
    'beefgpweekraw': consumption,
    'piggpweekraw': consumption,
    'poultrygpweekraw': consumption,
    'sheepgpweekraw': consumption,
    'beefgpweek': consumption,
    'piggpweek': consumption,
    'poultrygpweek': consumption,
    'sheepgpweek': consumption,
    'totalgpweek': consumption,
    'mgppcuraw': consumption,
    'mgppcu': consumption,
    'beefmgppcu': consumption,
    'pigmgppcu': consumption,
    'poultrymgppcu': consumption,
    'sheepmgppcu': consumption,
    'fishmgppcu': consumption,
    'animalgpcapitapyear': consumption,
    'totalgpcapitapyr': consumption
}"
"class postbootcamp(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else float('nan')
        
class av(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')
        
class sticks(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of sticks used during a medical procedure.""
        self.valid_range = [1.0, 4.0]
        self.dtype = float
        self.format = ""Should be a single digit floating point number.""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        return round(val) if val >= 1.0 and val <= 4.0 else float('nan')

class trackneedle(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class ttf(NumericSemanticType):
    def __init__(self):
        self.description = ""Time to finish a medical procedure.""
        self.valid_range = [8.0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [8.0, 34.0, 53.0, 158.0, 190.0]
    def cast(self, val):
        return round(val, 2) if val >= 8.0 else float('nan')

class preicu(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

class av1(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class sticks1(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of sticks used during a medical procedure.""
        self.valid_range = [1.0, 10.0]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [1.0, 2.0, 5.0, 10.0]
    def cast(self, val):
        return round(val) if val >= 1.0 and val <= 10.0 else float('nan')

class trackneedle1(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class ttf1(NumericSemanticType):
    def __init__(self):
        self.description = ""Time to finish a medical procedure.""
        self.valid_range = [7.0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [7.0, 37.0, 106.75, 454.0]
    def cast(self, val):
        return round(val, 2) if val >= 7.0 else float('nan')

class posticu(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

class av2(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

class sticks2(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of sticks used during a medical procedure.""
        self.valid_range = [1.0, 2.0]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [1.0, 2.0]
    def cast(self, val):
        return round(val) if val >= 1.0 and val <= 2.0 else float('nan')

class trackneedle2(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class ttf2(NumericSemanticType):
    def __init__(self):
        self.description = ""Time to finish a medical procedure.""
        self.valid_range = [1.0, 48.0]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [1.0, 15.5, 23.0, 48.0]
    def cast(self, val):
        return round(val, 2) if val >= 1.0 and val <= 48.0 else float('nan')

class endofyear(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else float('nan')

class av3(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class trackneedle3(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0 if val == 0.0 else float('nan')

class ttf3(NumericSemanticType):
    def __init__(self):
        self.description = ""Time to finish a medical procedure.""
        self.valid_range = [7.1, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number.""
        self.examples = [7.1, 22.5, 36.25, 164.0]
    def cast(self, val):
        return round(val, 2) if val >= 7.1 else float('nan')

MAPPING = {
    'postbootcamp': postbootcamp,
    'av': av,
    'sticks': sticks,
    'trackneedle': trackneedle,
    'ttf': ttf,
    'preicu': preicu,
    'av1': av1,
    'sticks1': sticks1,
    'trackneedle1': trackneedle1,
    'ttf1': ttf1,
    'posticu': posticu,
    'av2': av2,
    'sticks2': sticks2,
    'trackneedle2': trackneedle2,
    'ttf2': ttf2,
    'endofyear': endofyear,
    'av3': av3,
    'trackneedle3': trackneedle3,
    'ttf3': ttf3
}"
"class ordinalnumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Ordinal number""
        self.valid_values = ""Ordinal numbers are a sequence of segment, part or position in a series or ordering""
        self.format = ""Ordinal numbers should be represented as integers""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        return str(int(val))

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of an event""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1992, 2000, 2010, 2020, 2025]
    def cast(self, val):
        year = int(val)
        if year >= self.valid_range[0] and year <= self.valid_range[1]:
            return year
        else:
            raise Exception('Invalid year')

class month(NumericSemanticType):
    def __init__(self):
        self.description = ""Month of an event""
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = ""Month should be an integer from 1 (January) to 12 (December)""
        self.examples = [1, 3, 6, 9, 12]
    def cast(self, val):
        month = int(val)
        if month >= self.valid_range[0] and month <= self.valid_range[1]:
            return month
        else:
            raise Exception('Invalid month')

class pagenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Page number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Page number should be an integer greater than or equal to 1""
        self.examples = [1, 10, 31, 59, 225]
    def cast(self, val):
        return int(val)

class booleanmarker(NumericSemanticType):
    def __init__(self):
        self.description = ""Boolean marker""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Boolean marker should be either 0 (False) or 1 (True)""
        self.examples = [0, 1, 0, 1, 0]
    def cast(self, val):
        return int(val)

class citationcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Citation count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Citation count should be an integer greater than or equal to 0""
        self.examples = [1, 3, 7, 10, 176]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {
    'a': ordinalnumber,
    'year': year,
    'month': month,
    'yearofpublication': year,
    'monthofpublication': month,
    'page': pagenumber,
    '0absent1present2removed3hyperlinkerror4crossmarkonly': booleanmarker,
    'pdffinalmark': booleanmarker,
    '0absent1present2nocorrespondingscreen3removalofarticle4hyperliniktokkoreamed5etc': booleanmarker,
    'htmlfinalmark': booleanmarker,
    'htmlandorpdf1single2both': booleanmarker,
    'scopustotal': citationcount,
    'exceptnoticescopus': citationcount,
    'postretractioncitationscopus': citationcount,
    'citationscopusexceptnoticeyesno': booleanmarker,
    'postretractionicitationscopusyesno': booleanmarker
}"
"class objecttype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Object types used in the experiment""
        self.valid_values = ""Object types should be a string that describes the object and its color""
        self.format = ""Object types should be stored as strings with proper capitalization""
        self.examples = ['Small red block', 'Small tan block', 'Small red egg', 'Small tan egg', 'Large red block']
    def cast(self, val):
        return str(val).title()

class replicatenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Replicate number in the experiment""
        self.valid_range = [1, 20]
        self.dtype = int
        self.format = ""Replicate numbers should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        return num if 1 <= num <= 20 else None

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location of the experiment""
        self.valid_values = ""Location should be a string that describes the place of the experiment""
        self.format = ""Location should be stored as strings with proper capitalization""
        self.examples = ['SE Coast', 'SW Coast (WB 2)', 'SW Coast', 'West Beach (S)', 'West Beach (N)']
    def cast(self, val):
        return str(val).title()

class acceptedorrejectedafter24hr(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Accepted', 'Rejected']
    def cast(self, val):
        val = str(val)
        return val if val in self.valid_values else None

MAPPING = {'objecttype': objecttype, 'replicatenumber': replicatenumber, 'location': location, 'acceptedorrejectedafter24hr': acceptedorrejectedafter24hr}"
"class nestid(NumericSemanticType):
    def __init__(self):
        self.description = ""The unique identifier for a nest""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""NestID should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""General location of the nest""
        self.valid_values = ""Location should be a string representing the area of the nest""
        self.format = ""Should be capitalized and contain no special characters""
        self.examples = ['West Beach South', 'Basin North (Spit)', 'Basin North', 'Basin North Entrance', 'Between West Beach and Basin']
    def cast(self, val):
        return str(val).title()

class treatmenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of treatment applied to the nest""
        self.valid_values = ""Treatment should be one of the following: 'Egg only', 'Egg + wood', 'Egg + Wood'""
        self.format = ""Should be capitalized and contain no special characters""
        self.examples = ['Egg Only', 'Egg + Wood']
    def cast(self, val):
        string = str(val).title()
        if string in self.examples:
            return string
        else:
            raise Exception('Invalid treatment type')

class redwoodacceptance(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Accepted', 'Rejected']
    def cast(self, val):
        string = str(val).title()
        if string in self.valid_values:
            return string
        else:
            raise Exception('Invalid redwood acceptance value')

class redeggacceptance(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Accepted', 'Rejected']
    def cast(self, val):
        string = str(val).title()
        if string in self.valid_values:
            return string
        else:
            raise Exception('Invalid red egg acceptance value')

class birdpresence(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        string = str(val).lower()
        if string in self.valid_values:
            return string
        else:
            raise Exception('Invalid bird presence value')

class eggcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of natural eggs in the nest during placement of objects""
        self.valid_range = [2, 3]
        self.dtype = int
        self.format = ""Egg count should be an integer between 2 and 3 inclusive""
        self.examples = [2, 3]
    def cast(self, val):
        num = int(val)
        if num in self.valid_range:
            return num
        else:
            raise Exception('Invalid egg count')

MAPPING = {'nest': nestid, 'generallocation': location, 'treatment': treatmenttype, 'redwoodacceptedorrejectedafter24hr': redwoodacceptance, 'redeggacceptedorrejectedafter24hr': redeggacceptance, 'birdsremainedatnestduringplacementofobjects': birdpresence, 'naturaleggsinnestduringplacementofobjects': eggcount}"
"class surveyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey ID""
        self.valid_range = [1, 22]
        self.dtype = float
        self.format = ""Survey ID should be a positive integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return int(val)

class major(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Major of the survey respondent""
        self.valid_values = ""Major should be a string representing the respondent's major""
        self.format = ""Major should be capitalized string""
        self.examples = ['MD', 'PHD', 'Nursing', 'PH']
    def cast(self, val):
        return str(val).upper()

class position(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Position of the survey respondent""
        self.valid_values = ""Position should be '1' for student or '2' for faculty""
        self.format = ""Position should be a single digit string ('1' or '2')""
        self.examples = ['1', '2']
    def cast(self, val):
        if str(val) in ['1', '2']:
            return str(val)
        else:
            raise ValueError('Invalid position')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the survey respondent""
        self.valid_values = ""Gender should be '1' for male or '2' for female""
        self.format = ""Gender should be a single digit string ('1' or '2')""
        self.examples = ['1', '2']
    def cast(self, val):
        if str(val) in ['1', '2']:
            return str(val)
        else:
            raise ValueError('Invalid gender')

class surveyresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey response""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Survey response should be a float between 1 and 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        val = float(val)
        if val >= 1 and val <= 5:
            return round(val, 1)
        else:
            raise ValueError('Invalid survey response')

MAPPING = {'number': surveyid, 'major': major, 'position': position, 'gender': gender, 'preq1': surveyresponse, 'preq2': surveyresponse, 'preq3': surveyresponse, 'preq4': surveyresponse, 'preq5first': surveyresponse, 'preq5second': surveyresponse, 'postq1': surveyresponse, 'postq2': surveyresponse, 'postq3': surveyresponse, 'postq4': surveyresponse, 'postq5first': surveyresponse, 'postq5second': surveyresponse}"
"class patientnumber(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Sequential patient number'
        self.valid_range: list = [1, float('inf')]
        self.dtype: object = float
        self.format: str = 'Patient number should be a positive integer represented as a float'
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num > 0 and num.is_integer():
            return num
        else:
            raise Exception('Invalid patient number')

class patientagegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = 'Patient age group'
        self.valid_values: str = 'Age group should be 1.0 or 2.0 represented as a float'
        self.format: str = 'Age group should be a float value of 1.0 or 2.0'
        self.examples: list = [1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num in [1.0, 2.0]:
            return num
        else:
            raise Exception('Invalid age group')

class freshcycleindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list = [1.0]
    def cast(self, val):
        num = float(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid fresh cycle indicator')

class dayofembryos(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = 'Day of embryos'
        self.valid_values: str = 'Day of embryos should be 1.0 or 2.0 represented as a float'
        self.format: str = 'Day of embryos should be a float value of 1.0 or 2.0'
        self.examples: list = [1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num in [1.0, 2.0]:
            return num
        else:
            raise Exception('Invalid day of embryos')

class numberofet(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Number of embryo transfers'
        self.valid_range: list = [1, float('inf')]
        self.dtype: object = float
        self.format: str = 'Number of embryo transfers should be a positive integer represented as a float'
        self.examples: list = [1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num > 0 and num.is_integer():
            return num
        else:
            raise Exception('Invalid number of embryo transfers')

class ivficsi(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = 'IVF or ICSI treatment'
        self.valid_values: str = 'Treatment should be 1.0 or 2.0 represented as a float'
        self.format: str = 'Treatment should be a float value of 1.0 or 2.0'
        self.examples: list = [1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num in [1.0, 2.0]:
            return num
        else:
            raise Exception('Invalid treatment')

class cpindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list = ['是']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid CP indicator')

MAPPING = {
    'number': patientnumber,
    'age': patientagegroup,
    'freshcycle': freshcycleindicator,
    'dayofembryos': dayofembryos,
    'numberofet': numberofet,
    'ivficsi': ivficsi,
    'cp': cpindicator
}"
"class siteid(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifies the site of the study""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Site ID should be an integer value""
        self.examples = [1, 2, 3, 4, 5, 6]
    def cast(self, val):
        return int(val)

class screeningid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Identifies the screening session""
        self.valid_values = ""Screening ID should be a string of the format 'XX-XXX'""
        self.format = ""Screening ID should be a string of the format 'XX-XXX'""
        self.examples = ['01-001', '01-010', '01-016', '01-015', '01-014']
    def cast(self, val):
        match_obj = re.match('[0-9]{2}-[0-9]{3}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Screening ID')

class informedconsentobtained(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        if val.lower() in ['yes', 'no']:
            return val.lower()
        else:
            raise Exception('Invalid value')

class dateofinformedconsentobtained(NumericSemanticType):
    def __init__(self):
        self.description = ""Date when the informed consent was obtained""
        self.valid_range = [42622.0, 42758.0]
        self.dtype = float
        self.format = ""Date should be a float value representing the number of days from the Excel base date (January 0, 1900)""
        self.examples = [42689.0, 42700.0, 42727.0, 42653.0, 42655.0]
    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid date')

MAPPING = {
    'siteid': siteid,
    'screeningid': screeningid,
    'informedconsentobtained': informedconsentobtained,
    'dateofinformedconsentobtained': dateofinformedconsentobtained
}"
"class patientid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Patient Identifier""
        self.valid_values = ""Patient ID should be a string that is of the form 'Pat X' where X is a number""
        self.format = ""The string 'Pat' followed by a space and then a number""
        self.examples = ['Pat 1', 'Pat 2', 'Pat 3', 'Pat 4', 'Pat 5']
    def cast(self, val):
        return str(val)

class pao2fio2ratio(NumericSemanticType):
    def __init__(self):
        self.description = ""Ratio of PaO2 to FiO2, which is a measure of lung function""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Ratio should be formatted as a floating point number""
        self.examples: list = [0, 61.90, 80.47, 52.38, 37.61]
    def cast(self, val):
        num = float(val)
        return round(num, 2)
        
class pfrecovery(NumericSemanticType):
    def __init__(self):
        self.description = ""PaO2/FiO2 recovery value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Recovery should be formatted as a floating point number""
        self.examples: list = [77.61, 57.61, 81.42, 41.42]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'a': patientid, 'pao2fio2ratio': pao2fio2ratio, 'c': pao2fio2ratio, 'd': pao2fio2ratio, 'e': pao2fio2ratio, 'f': pao2fio2ratio, 'g': pfrecovery}"
"class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a person""
        self.valid_values = ""An integer representing the gender of the person: 1 for Male and 2 for Female""
        self.format = ""Stored as integer: 1 for Male and 2 for Female""
        self.examples = ['1', '2']
    def cast(self, val):
        if val == 1.0:
            return '1'
        elif val == 2.0:
            return '2'
        else:
            return float('nan')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0.0, 122.0]  # 122 is the maximum recorded age
        self.dtype = float
        self.format = ""Age should be stored as a floating point number""
        self.examples = [14.0, 53.0, 30.0, 50.0, 25.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date in yyyy-mm-dd format""
        self.valid_values = ""Date should follow the yyyy-mm-dd format""
        self.format = ""Date should be stored as a string in yyyy-mm-dd format""
        self.examples = ['2015-04-27', '2015-05-07', '2015-05-03', '2015-05-22']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class boolean(NumericSemanticType):
    def __init__(self):
        self.description = ""Boolean value""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Boolean values should be stored as integers, with 0 representing False and 1 representing True""
        self.examples = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            return float('nan')

MAPPING = {'sex': sex, 'agec': age, 'agecat': age, 'adm': date, 'disch': date,
           'mechanism': NumericSemanticType, 'icd10': CategoricalSemanticType,
           'bodyregion': NumericSemanticType, 'fracture': boolean, 'compound': boolean,
           'surgery': boolean, 'surgtype': NumericSemanticType, 'surggrade': NumericSemanticType,
           'amputation': boolean, 'death': boolean}"
"class patientid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Patient ID""
        self.valid_values = ""Patient ID should be a alphanumeric string""
        self.format = ""Patient ID should be 4 characters long""
        self.examples = ['AAAA', 'AAAK', 'AAAP', 'AAAQ', 'AAAR']
    def cast(self, val):
        return str(val)

class homelessnessstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Homelessness Status""
        self.valid_values = ""Values should be in range 1-5""
        self.format = ""Homelessness status should be a numerical integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the Patient""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [20, 35, 50, 70, 85]
    def cast(self, val):
        return int(val)

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class insurance(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class over3comorbidities(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class hcpa(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Health Care Proxy Available""
        self.valid_values = ""Values should be in range 1-4""
        self.format = ""HCPA status should be a numerical integer or '#NULL!'""
        self.examples = [1, 2, 3, 4, '#NULL!']
    def cast(self, val):
        if val == '#NULL!':
            return 'nan'
        else:
            return int(val)

class raceethnicity(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race/Ethnicity""
        self.valid_values = ""Values should be in range 1-7""
        self.format = ""Race/Ethnicity should be a numerical integer""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        return int(val)

class numvisitspcp(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Visits to Primary Care Physician""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of visits should be an integer""
        self.examples = [5, 10, 15, 20, 25]
    def cast(self, val):
        return int(val)
    
MAPPING = {'patient': patientid, 
           'homelessstatus': homelessnessstatus, 
           'age': age, 
           'sex': sex, 
           'raceethnicity': raceethnicity, 
           'hxmentalillness': BooleanSemanticType, 
           'hxdementia': BooleanSemanticType, 
           'hxsubstanceabuse': BooleanSemanticType, 
           'ifhptmo': NumericSemanticType, 
           'b4epic': BooleanSemanticType, 
           'endstagedx': BooleanSemanticType, 
           'death': BooleanSemanticType, 
           'numvisitspcp': numvisitspcp, 
           'insurance': insurance, 
           'over3comorbidities': over3comorbidities, 
           'hcpa': hcpa, 
           'codestatus': CategoricalEnumSemanticType, 
           'irreversiblebraindamage': CategoricalEnumSemanticType, 
           'careofbody': CategoricalEnumSemanticType, 
           'organdonation': CategoricalEnumSemanticType, 
           'counseledby': CategoricalEnumSemanticType, 
           'codestatusterminalsevere': CategoricalEnumSemanticType, 
           'surrogateless': BooleanSemanticType, 
           'newraceeth': raceethnicity, 
           'over70': BooleanSemanticType, 
           'newhousing': CategoricalEnumSemanticType}"
"class binaryresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary response""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Binary responses should be integers and can only be 1 or 2""
        self.examples = [1, 2, 1, 2, 1]
    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid binary response')

class trinaryresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Trinary response""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Trinary responses should be integers and can be 1, 2, or 3""
        self.examples = [1, 2, 3, 1, 2]
    def cast(self, val):
        if val in [1, 2, 3]:
            return int(val)
        else:
            raise Exception('Invalid trinary response')

class binaryresponsewithnan(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary response with NaN values""
        self.valid_range = [1, 2, float('nan')]
        self.dtype = float
        self.format = ""Binary responses with NaN values should be floating-point numbers and can be 1, 2, or NaN""
        self.examples = [1, 2, float('nan'), 1, 2]
    def cast(self, val):
        if val in [1, 2, float('nan')]:
            return float(val)
        else:
            raise Exception('Invalid binary response with NaN values')

class trinaryresponsewithnan(NumericSemanticType):
    def __init__(self):
        self.description = ""Trinary response with NaN values""
        self.valid_range = [1, 3, float('nan')]
        self.dtype = float
        self.format = ""Trinary responses with NaN values should be floating-point numbers and can be 1, 2, 3, or NaN""
        self.examples = [1, 2, 3, float('nan'), 1]
    def cast(self, val):
        if val in [1, 2, 3, float('nan')]:
            return float(val)
        else:
            raise Exception('Invalid trinary response with NaN values')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be an integer between 0 and 120""
        self.examples = [18, 33, 42, 46, 57]
    def cast(self, val):
        if 0 <= val <= 120:
            return int(val)
        else:
            raise Exception('Invalid age')

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a person""
        self.valid_values = ""Sex can only be 'm' or 'f'""
        self.format = ""Sex should be a string and can only be 'm' or 'f'""
        self.examples = ['f', 'm', 'f', 'm', 'f']
    def cast(self, val):
        if val in ['f', 'm']:
            return str(val)
        else:
            raise Exception('Invalid sex')

MAPPING = {'anyinfection': binaryresponse, 
           'mostcoughs': trinaryresponse, 
           'noteffective': trinaryresponse, 
           'goodbacteria': trinaryresponse, 
           'amonganimals': binaryresponse, 
           'leftover': binaryresponse, 
           'fromrelatives': binaryresponse, 
           'drugstore': binaryresponse, 
           'injury': binaryresponse, 
           'feelbetter': binaryresponse, 
           'skinreaction': binaryresponse, 
           'mydisease': binaryresponse, 
           'childdiscussamr': binaryresponse, 
           'age': age, 
           'sex': sex, 
           'secondanyinfection': binaryresponsewithnan, 
           'secondmostcoughs': binaryresponsewithnan, 
           'secondnoteffective': trinaryresponsewithnan, 
           'secondgoodbacteria': binaryresponsewithnan, 
           'secondamonganimals': binaryresponsewithnan, 
           'secondleftover': binaryresponsewithnan, 
           'secondfromrelatives': binaryresponsewithnan, 
           'seconddrugstore': binaryresponsewithnan, 
           'secondinjury': binaryresponsewithnan, 
           'secondfeelbetter': binaryresponsewithnan, 
           'secondskinreaction': binaryresponsewithnan, 
           'secondmydisease': binaryresponsewithnan, 
           'secondchilddiscussamr': binaryresponsewithnan}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be formatted as an integer""
        self.examples = [20, 30, 40, 50, 60]
    def cast(self, val):
        return int(val)

class agecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Age category of a person""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Age category should be formatted as an integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class occupation(NumericSemanticType):
    def __init__(self):
        self.description = ""Occupation of a person""
        self.valid_range = [2, 18]
        self.dtype = int
        self.format = ""Occupation should be formatted as an integer""
        self.examples = [2, 9, 13, 18]
    def cast(self, val):
        return int(val)

class residence(NumericSemanticType):
    def __init__(self):
        self.description = ""Residence of a person""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Residence should be formatted as an integer""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)

class hbv(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class exposure(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class workduration(NumericSemanticType):
    def __init__(self):
        self.description = ""Duration of work""
        self.valid_range = [1, 40]
        self.dtype = int
        self.format = ""Duration of work should be formatted as an integer""
        self.examples = [1, 14, 20, 25, 40]
    def cast(self, val):
        return int(val)

MAPPING = {'ser': NumericSemanticType, 'age': age, 'agecatg': agecategory, 'occupation': occupation, 'residence': residence, 'hbv': hbv, 'exposure': exposure, 'durationwork': workduration}"
"class forestsite(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Forest site location""
        self.valid_values = ""The site location should be one of the following: 'SL', 'PNM'""
        self.format = ""The site location should be a string of uppercase letters""
        self.examples = ['SL', 'PNM']
    def cast(self, val):
        return str(val).upper() if pd.notna(val) else float('nan')

class lifeformtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Life form of the plant""
        self.valid_values = ""The life form should be one of the following: 'Liana', 'Tree'""
        self.format = ""The life form should be a string starting with a capital letter""
        self.examples = ['Liana', 'Tree']
    def cast(self, val):
        return str(val).capitalize() if pd.notna(val) else float('nan')

class plantfamily(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Family of the plant""
        self.valid_values = ""The family should be a valid plant family name""
        self.format = ""The family should be a string with the first letter capitalized""
        self.examples = ['Bignoniaceae', 'Apocynaceae', 'Convolvulaceae', 'Papilionoideae', 'Moraceae']
    def cast(self, val):
        return str(val).capitalize() if pd.notna(val) else float('nan')

class plantspecies(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Species of the plant""
        self.valid_values = ""The species should be a valid plant species name""
        self.format = ""The species should be a string with the first letter of each word capitalized""
        self.examples = ['Stigmaphyllon Hypargyreum', 'Aspidosperma Cruenta', 'Dioclea Wilsonii', 'Odontadenia Puncticulosa', 'Arrabidaea Candidans']
    def cast(self, val):
        return str(val).title() if pd.notna(val) else float('nan')

class anatomicalmetric(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Anatomical metric of the plant""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Anatomical metric should be a floating point number with two decimal places""
        self.unit = 'In micrometer squared (µm2)'
        self.examples = [6349.88, 6382.72, 6020.95]
    def cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

class thickness(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Thickness of the plant leaf""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Thickness should be a floating point number with two decimal places""
        self.unit = 'In micrometer (µm)'
        self.examples = [19.62, 18.34, 16.7]
    def cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

class cellsize(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Size of the cell in the plant leaf""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cell size should be a floating point number with two decimal places""
        self.unit = 'In micrometer squared (µm2)'
        self.examples = [250, 200, 230.77]
    def cast(self, val):
        try:
            num = float(val)
            return round(num, 2)
        except ValueError:
            return float('nan')

MAPPING = {
    'site': forestsite,
    'lifeform': lifeformtype,
    'family': plantfamily,
    'species': plantspecies,
    'anatomicalmetrics': anatomicalmetric,
    'l': thickness,
    'q': cellsize
}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a Patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""ID should be formatted as a floating point number""
        self.examples = [7709001001.0, 7709001002.0, 8005070201.0, 8005070202.0, 8005070203.0]
    def cast(self, val):
        return float(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a Person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be formatted as a floating point number""
        self.examples = [65.0, 60.0, 87.0, 82.0, 55.0]
    def cast(self, val):
        return float(val)

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Female', 'Male']
    def cast(self, val):
        return str(val)

class education(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Education level of a person""
        self.valid_values = ""Education level should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['primary', 'secondary', 'higher']
    def cast(self, val):
        return str(val).lower()

class maritalstatus(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Marital status of a person""
        self.valid_values = ""Marital status should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['married', 'widowed', 'divorced', 'single']
    def cast(self, val):
        return str(val).lower()

class occupation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Occupation of a person""
        self.valid_values = ""Occupation should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['not working', 'self-employed', 'casual worker', 'private worker', 'government worker']
    def cast(self, val):
        return str(val).lower()

class sbpavg(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Average Systolic Blood Pressure of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""SBP should be formatted as a floating point number""
        self.unit = ""In mm Hg""
        self.examples = [140.5, 156.0, 153.5, 152.0, 179.0]
    def cast(self, val):
        return float(val)

class dbpavg(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Average Diastolic Blood Pressure of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""DBP should be formatted as a floating point number""
        self.unit = ""In mm Hg""
        self.examples = [78.5, 108.5, 77.0, 76.0, 94.0]
    def cast(self, val):
        return float(val)

class bgmgdl(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Blood glucose level of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Blood glucose level should be formatted as a floating point number""
        self.unit = ""In mg/dL""
        self.examples = [156.0, 113.0, 91.0, 114.0, 130.0]
    def cast(self, val):
        return float(val)

class bmi(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Body Mass Index of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""BMI should be formatted as a floating point number""
        self.unit = ""kg/m^2""
        self.examples = [18.90204, 25.47666, 23.89138, 29.4887]
    def cast(self, val):
        return float(val)

class smoking(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Smoking status of a person""
        self.valid_values = ""Smoking status should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['nonsmoker', 'smoker', 'pastsmoker']
    def cast(self, val):
        return str(val).lower()

class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a village""
        self.valid_values = ""Name should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['majangtengah', 'kepanjen', 'sepanjang', 'kendalpayak', 'sidorahayu']
    def cast(self, val):
        return str(val).lower()

class areas(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographical area of a person""
        self.valid_values = ""Area should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['urban', 'rural', 'semiurban']
    def cast(self, val):
        return str(val).lower()

class cvdrisk(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Cardiovascular disease risk of a person""
        self.valid_values = ""CVD risk should be a string""
        self.format = ""All letters should be in lower case""
        self.examples = ['<10%', 'clinicall high risk', '10-20%', 'past history of CVD', '20-30%']
    def cast(self, val):
        return str(val).lower()

class highrisk(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['No', 'Yes']
    def cast(self, val):
        return str(val)

class bplt(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['No', 'Yes']
    def cast(self, val):
        return str(val)

class lltt(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['No', 'Yes']
    def cast(self, val):
        return str(val)

class aptt(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['No', 'Yes']
    def cast(self, val):
        return str(val)

MAPPING = {'patientid': patientid, 'age': age, 'sex': sex, 'education': education, 'maritalstatus': maritalstatus, 
           'occupation': occupation, 'sbpavg': sbpavg, 'dbpavg': dbpavg, 'bgmgdl': bgmgdl, 'bmi': bmi, 'smoking': smoking, 
           'village': village, 'areas': areas, 'cvdrisk': cvdrisk, 'highrisk': highrisk, 'bplt': bplt, 'lltt': lltt, 'aptt': aptt}"
"class subjectid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier of the subject""
        self.valid_range = [1, 35]
        self.dtype = int
        self.format = ""Subject ID should be an integer between 1 and 35""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the subject""
        self.valid_values = ""Should be one of ['Male', 'Female']""
        self.format = ""Should be a string indicating the gender""
        self.examples = ['Male', 'Male', 'Female', 'Male', 'Male']
    def cast(self, val):
        return str(val).strip()

class lengthmillimeter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Length of the subject in millimeters""
        self.valid_range = [83.3, 381.0]
        self.dtype = float
        self.format = ""Length should be a float value in millimeters""
        self.units = 'In millimeters'
        self.examples = [270.0, 275.0, 290.0, 188.0, 221.0]
    def cast(self, val):
        return round(float(val), 2)

class sideofmeasurement(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Side of the measurement taken""
        self.valid_values = ""Should be one of ['Right', 'Left']""
        self.format = ""Should be a string indicating the side of measurement""
        self.examples = ['Right', 'Left', 'Right', 'Left', 'Right']
    def cast(self, val):
        return str(val).strip()

class dimensionmillimeter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Dimension of the subject in millimeters""
        self.valid_range = [0.21, 3.95]
        self.dtype = float
        self.format = ""Dimension should be a float value in millimeters""
        self.units = 'In millimeters'
        self.examples = [2.57, 1.54, 1.4, 1.21, 1.44]
    def cast(self, val):
        return round(float(val), 2)

class numberofspines(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of spines of the subject""
        self.valid_range = [6, 288]
        self.dtype = int
        self.format = ""Number of spines should be an integer between 6 and 288""
        self.examples = [16, 97, 33, 11, 13]
    def cast(self, val):
        return int(val)

MAPPING = {
    'subject': subjectid, 
    'sex': gender, 
    'totallengthmm': lengthmillimeter, 
    'sideofmeasurment': sideofmeasurement, 
    'lengthof7mm': dimensionmillimeter, 
    'widthof7mm': dimensionmillimeter, 
    'lengthof5mm': dimensionmillimeter, 
    'widthof5mm': dimensionmillimeter, 
    'lengthof8mm': dimensionmillimeter, 
    'widthof8mm': dimensionmillimeter, 
    'numberofspines': numberofspines
}"
"class pubmedid(NumericSemanticType):
    def __init__(self):
        self.description = ""PubMed ID is a unique identifier for articles, includes the year and the number of the article""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""PubMed ID should be a large integer""
        self.examples = [19709046, 18713226, 19538570, 19538573, 19397771]
    def cast(self, val):
        return int(val)

class reportyear(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Year of the Report""
        self.valid_values = ""Year must be one of the following formats: '2008_09', '2018_19'""
        self.format = ""Year should be a string representing a time period""
        self.examples = ['2008_09', '2018_19']
    def cast(self, val):
        return str(val)

class item(NumericSemanticType):
    def __init__(self):
        self.description = ""Item Score, a score given to an item in a report""
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = ""Item Score should be a float value between 0 and 2, inclusive""
        self.examples = [1.0, 2.0, 0.0, 1.0, np.nan]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

MAPPING = {'pubmedid': pubmedid, 'year': reportyear, 'item1randomization': item, 'item2samplesizeestimation': item, 'item3blinding': item, 'item4asampleanimalexclusions': item, 'item4bdefiningexclusioncriteria': item, 'item4cpreestablishingexclusioncriteria': item, 'item5inclusioncriteria': item, 'item6dataavailability': item}"
"class medicalabbreviations(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Common abbreviations used in medical reports""
        self.valid_values = ""Abbreviations should be one of the most common ones found in medical reports (e.g., LV EDV, LV ESV, LV SV, LV Mass, LV EF)""
        self.format = ""Abbreviations should be a string with each word separated by a space""
        self.examples = ['LV EDV', 'LV ESV', 'LV SV', 'LV Mass', 'LV EF']
    def cast(self, val):
        return str(val).upper().strip()

class medicalunits(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Units used in medical measurements""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Units should be one of the most common ones found in medical reports (e.g., ml, %, g)""
        self.unit = 'ml, %, g'
        self.examples = ['ml', '%', 'g']
    def cast(self, val):
        val = str(val).lower().strip()
        if val in ['ml', '%', 'g']:
            return val
        else:
            raise Exception('Invalid unit')

MAPPING = {'abbreviation': medicalabbreviations, 'unit': medicalunits}"
"class imagefilename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Image File Name""
        self.valid_values = ""File name should be a string starting with 'Image' followed by a number and ending with '.tif'""
        self.format = ""File names should be of the form 'Image#.tif' where # is a number""
        self.examples = ['Image1.tif', 'Image10.tif', 'Image2.tif', 'Image3.tif', 'Image4.tif']
    def cast(self, val):
        match_obj = re.match('Image[0-9]+\.tif', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid image file name')

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""A count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be a non-negative integer""
        self.examples = [215, 126, 153, 92, 757]
    def cast(self, val):
        return int(val)

class areapercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Area Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Area percentage should be a float between 0 and 100""
        self.examples = [2.363, 0.707, 1.776, 0.551, 7.423]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid area percentage')

class ph(NumericSemanticType):
    def __init__(self):
        self.description = ""pH value""
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = ""pH value should be a float between 0 and 14""
        self.examples = [6.07, 6.07, 6.07, 6.07, 6.07]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 14:
            return num
        else:
            raise Exception('Invalid pH value')

MAPPING = {
    'ph603003': imagefilename, 
    'count': count,
    'areapercent': areapercentage,
    'ph': ph,
    'averageph': ph,
    'ph810009': imagefilename,
    'count1': count,
    'areapercent1': areapercentage,
    'ph1': ph,
    'averageph1': ph,
    'ph1013009': imagefilename,
    'count2': count,
    'areapercent2': areapercentage,
    'ph2': ph,
    'averageph2': ph
}"
"class group(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Group categories""
        self.valid_values = ""Group should take one of two values: 1 or 2""
        self.format = ""Group should be an integer value""
        self.examples = ['1', '2']
    def cast(self, val):
        return int(val)

class participant(NumericSemanticType):
    def __init__(self):
        self.description = ""Participant ID""
        self.valid_range = [101, 228]
        self.dtype = int
        self.format = ""Participant ID should be an integer""
        self.examples = [116, 117, 112, 124, 113]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the participant""
        self.valid_range = [20, 60]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [35, 31, 23, 30, 24]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the participant""
        self.valid_values = ""Gender should take one of two values: 1 or 2""
        self.format = ""Gender should be an integer value""
        self.examples = ['1', '2']
    def cast(self, val):
        return int(val)

class yearsofeducation(NumericSemanticType):
    def __init__(self):
        self.description = ""Years of education of the participant""
        self.valid_range = [6.0, 21.0]
        self.dtype = float
        self.format = ""Years of education should be a floating point number""
        self.examples = [21.0, 13.0, 18.0, 18.0, 19.0]
    def cast(self, val):
        return float(val)

class preferredhand(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Preferred hand of the participant""
        self.valid_values = ""Preferred hand should take one of three values: 1, 2 or 3""
        self.format = ""Preferred hand should be an integer value""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return int(val)

class howlongmeditatedyears(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of years the participant has meditated""
        self.valid_range = [0.0, 32.0]
        self.dtype = float
        self.format = ""Number of years should be a floating point number""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        return float(val)

class frequencyofmeditationtimesperweek(NumericSemanticType):
    def __init__(self):
        self.description = ""Frequency of meditation times per week""
        self.valid_range = [0, 14]
        self.dtype = int
        self.format = ""Frequency of meditation times should be an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class lengthofmeditationminutes(NumericSemanticType):
    def __init__(self):
        self.description = ""Length of meditation in minutes""
        self.valid_range = [0, 90]
        self.dtype = int
        self.format = ""Length of meditation should be an integer""
        self.examples = [0, 15, 30, 45, 60]
    def cast(self, val):
        return int(val)

class minutesperweek(NumericSemanticType):
    def __init__(self):
        self.description = ""Minutes of meditation per week""
        self.valid_range = [0, 840]
        self.dtype = int
        self.format = ""Minutes of meditation per week should be an integer""
        self.examples = [0, 210, 420, 630, 840]
    def cast(self, val):
        return int(val)

class bai(NumericSemanticType):
    def __init__(self):
        self.description = ""Beck Anxiety Inventory score""
        self.valid_range = [0, 21]
        self.dtype = int
        self.format = ""BAI score should be an integer""
        self.examples = [13, 13, 12, 11, 11]
    def cast(self, val):
        return int(val)

class bdi(NumericSemanticType):
    def __init__(self):
        self.description = ""Beck Depression Inventory score""
        self.valid_range = [0, 17]
        self.dtype = int
        self.format = ""BDI score should be an integer""
        self.examples = [17, 2, 11, 12, 11]
    def cast(self, val):
        return int(val)

class ffmq(NumericSemanticType):
    def __init__(self):
        self.description = ""Five Facet Mindfulness Questionnaire score""
        self.valid_range = [103, 171]
        self.dtype = int
        self.format = ""FFMQ score should be an integer""
        self.examples = [125, 145, 127, 103, 144]
    def cast(self, val):
        return int(val)

class percentagecorrectblock(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of correct oddballs in a block""
        self.valid_range = [20, 100]
        self.dtype = int
        self.format = ""Percentage should be an integer""
        self.examples = [88, 100, 88, 92, 100]
    def cast(self, val):
        return int(val)

class meanreactiontime(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Mean reaction time""
        self.valid_range = [389.47, 631.26]
        self.dtype = float
        self.format = ""Mean reaction time should be a floating point number""
        self.unit = ""In milliseconds"" 
        self.examples = [437.024, 423.34, 558.49, 540.266, 529.06]
    def cast(self, val):
        return float(val)

class sdofrt(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Standard Deviation of Reaction Time""
        self.valid_range = [32.0, 192.716529901916]
        self.dtype = float
        self.format = ""Standard deviation of reaction time should be a floating point number""
        self.unit = ""In milliseconds"" 
        self.examples = [115.249145374352, 140.177843441774, 95.1905829274822, 131.974541158092, 121.105613168315]
    def cast(self, val):
        return float(val)

class dprime(NumericSemanticType):
    def __init__(self):
        self.description = ""d' (discrimination index)""
        self.valid_range = [-0.943681124, 4.902177178]
        self.dtype = float
        self.format = ""d' should be a floating point number""
        self.examples = [2.516333139, 4.077033945, 4.038833427, 2.763946063, 3.071510682]
    def cast(self, val):
        return float(val)

class hitrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Hit rate""
        self.valid_range = [-0.358458793, 2.326347874]
        self.dtype = float
        self.format = ""Hit rate should be a floating point number""
        self.examples = [1.644853627, 0.495850347, 1.475791028, 0.358458793, 1.644853627]
    def cast(self, val):
        return float(val)

class falsepositive(NumericSemanticType):
    def __init__(self):
        self.description = ""False positive rate""
        self.valid_range = [-1.439531471, 2.935199469]
        self.dtype = float
        self.format = ""False positive rate should be a floating point number""
        self.examples = [2.020482792, 1.750686071, 2.3939798, 2.089456312, 2.713051888]
    def cast(self, val):
        return float(val)

class lifetimemedhours(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Lifetime meditation hours""
        self.valid_range = [528.6666667, 18928.0]
        self.dtype = float
        self.format = ""Lifetime meditation hours should be a floating point number""
        self.unit = ""In hours"" 
        self.examples = [1149.417, 2184.0, 4111.25, 18928.0, 528.6666667]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return float(val)

MAPPING = {'group': group, 'participant': participant, 'age': age, 'gender': gender, 'yearsofeducation': yearsofeducation, 
           'preferredhand': preferredhand, 'howlongmeditatedyears': howlongmeditatedyears, 'frequencyofmeditationtimesperweek': frequencyofmeditationtimesperweek, 
           'lengthofmeditationminutes': lengthofmeditationminutes, 'minutesperweek': minutesperweek, 'bai': bai, 'bdi': bdi, 
           'ffmq': ffmq, 'percentagecorrectblock1': percentagecorrectblock, 'percentagecorrectblock2': percentagecorrectblock, 
           'percentagecorrectblock3': percentagecorrectblock, 'percentagecorrectblock4': percentagecorrectblock, 
           'totalpercentageofcorrectoddballs': percentagecorrectblock, 'meanreactiontime': meanreactiontime, 
           'sdofrt': sdofrt, 'dprime': dprime, 'hitrate': hitrate, 'falsepositive': falsepositive, 'lifetimemedhours': lifetimemedhours}"
"class medicalfacility(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Medical Facility""
        self.valid_values = ""Medical facility names must be strings""
        self.format = ""Medical facility names should be capitalized""
        self.examples = ['Batoka', 'Railway', 'Maamba', 'Manungu', 'Mawaya']
    def cast(self, val):
        return str(val).title()
    
class monthOfYear(NumericSemanticType):
    def __init__(self):
        self.description = ""Month of the year""
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = ""Month should be an integer between 1 and 12""
        self.examples = [1,2,3,4,5]
    def cast(self, val):
        val = int(val)
        if 1 <= val <= 12:
            return val
        else:
            raise Exception('Invalid month')
            
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1000, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer between 1000 and current year""
        self.examples = [2013, 2014, 2015, 2016, 2017]
    def cast(self, val):
        val = int(val)
        if 1000 <= val <= datetime.now().year:
            return val
        else:
            raise Exception('Invalid year')
            
class populationCount(NumericSemanticType):
    def __init__(self):
        self.description = ""Population count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Population count should be a non-negative integer""
        self.examples = [3046, 7457, 12873, 14915, 16813]
    def cast(self, val):
        val = int(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid population count')

class binaryIndicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        val = int(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary indicator')

MAPPING = {
    'facility': medicalfacility,
    'facid': None,
    'month': monthOfYear,
    'year': year,
    'mcconstructed': None,
    'total': None,
    'sfhmonthly': None,
    'mcwels': None,
    'campaign': binaryIndicator,
    'rainy': binaryIndicator,
    'catchment': populationCount,
    'didt': binaryIndicator,
    'didpost': binaryIndicator,
    'didinteraction': binaryIndicator,
    't': binaryIndicator,
    'post': binaryIndicator,
    'interaction': binaryIndicator,
    'time': None,
    'numtimes': None,
    'new': binaryIndicator,
    'road': binaryIndicator,
    'cidrzfacility': binaryIndicator,
    'active': binaryIndicator,
    'passive': binaryIndicator
}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a Patient""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Patient IDs must be positive integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class dropoutstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class yearofdiagnosis(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of Diagnosis""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year of diagnosis should be between 1900 and current year""
        self.examples = [2003, 1985, 2010, 2004, 1996]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender should be either 'male' or 'female'""
        self.format = ""Gender should be all lower-case""
        self.examples = ['female', 'male']
    def cast(self, val):
        return str(val).lower()

class yearsinschool(NumericSemanticType):
    def __init__(self):
        self.description = ""Years of Schooling""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Years of schooling should be a non-negative integer""
        self.examples = [0, 2, 4, 6, 8]
    def cast(self, val):
        return int(val)

class language(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Language of a person""
        self.valid_values = ""Language should be a string""
        self.format = ""Language should be all lower-case""
        self.examples = ['kaqchikel', 'español', 'english']
    def cast(self, val):
        return str(val).lower()

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a non-negative floating point number""
        self.unit = ""In kilograms""
        self.examples = [60, 70, 80, 90, 100]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be a non-negative floating point number""
        self.unit = ""In centimeters""
        self.examples = [150, 160, 170, 180, 190]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

class clinicvisits(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of clinic visits""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of clinic visits should be a non-negative integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class homevisits(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of home visits""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of home visits should be a non-negative integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class insulinuse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class a1clevel(NumericSemanticType):
    def __init__(self):
        self.description = ""A1C Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""A1C Level should be a non-negative floating point number""
        self.examples = [5, 6, 7, 8, 9]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

MAPPING = {'id': patientid, 'dropout': dropoutstatus, 'yrsschooling': yearsinschool, 'language': language, 
           'yrdiagnosisdiabetes': yearofdiagnosis, 'gender': gender, 'resultlastweight': weight, 
           'resultlastheight': height, 'baselineclinicvisits': clinicvisits, 'yr1clinicvisits': clinicvisits, 
           'yr2clinicvisits': clinicvisits, 'baselinehomevisits': homevisits, 'yr1homevisits': homevisits, 
           'yr2homevisits': homevisits, 'baselineinsulin': insulinuse, 'yr1insulin': insulinuse, 'yr2insulin': insulinuse, 
           'initiala1c': a1clevel, 'lastbeforeqi': a1clevel, 'a1cqi1yr': a1clevel, 'a1cqi2yr': a1clevel}"
"class rat(NumericSemanticType):
    def __init__(self):
        self.description = ""Rat number""
        self.valid_range = [1, 128]
        self.dtype = int
        self.format = ""Rat numbers should be integer values ranging from 1 to 128""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class housing(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Housing condition""
        self.valid_values = ""'PSI' or 'SR'""
        self.format = ""Housing condition should be either 'PSI' or 'SR'""
        self.examples = ['PSI', 'SR']
    def cast(self, val):
        return str(val).upper()

class condition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Condition""
        self.valid_values = ""'Paired', 'Social Only', or 'Footshock Only'""
        self.format = ""Condition should be either 'Paired', 'Social Only', or 'Footshock Only'""
        self.examples = ['Paired', 'Social Only', 'Footshock Only']
    def cast(self, val):
        return str(val)

class socialstimulus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['social stimulus', 'no social stimulus']
    def cast(self, val):
        return str(val)

class footshock(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['footshock only', 'no footshock']
    def cast(self, val):
        return str(val)

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex""
        self.valid_values = ""'male' or 'female'""
        self.format = ""Sex should be either 'male' or 'female'""
        self.examples = ['male', 'female']
    def cast(self, val):
        return str(val).lower()

class runningincirclesbout(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of running in circles bouts""
        self.valid_range = [0, 40]
        self.dtype = int
        self.format = ""Number of running in circles bouts should be an integer between 0 and 40""
        self.examples = [0, 2, 4, 23, 40]
    def cast(self, val):
        return int(val)

class runningawaybout(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of running away bouts""
        self.valid_range = [0, 50]
        self.dtype = int
        self.format = ""Number of running away bouts should be an integer between 0 and 50""
        self.examples = [0, 3, 9, 18, 50]
    def cast(self, val):
        return int(val)

class totalsocialinteractionsec(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Total duration of social interactions""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total duration of social interactions should be a floating-point number in seconds""
        self.unit = ""seconds""
        self.examples = [19.8, 124.732, 170.121, 245.186, 343.88]
    def cast(self, val):
        return round(float(val), 3)

class totalaggressivegroomingsec(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Total duration of aggressive grooming""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total duration of aggressive grooming should be a floating-point number in seconds""
        self.unit = ""seconds""
        self.examples = [0.0, 3.714, 11.992, 23.276, 76.791]
    def cast(self, val):
        return round(float(val), 3)

class nonaggressivesocialbehaviorsec(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Total duration of non-aggressive social behaviors""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total duration of non-aggressive social behaviors should be a floating-point number in seconds""
        self.unit = ""seconds""
        self.examples = [2.006, 118.852, 157.764, 228.482, 326.29]
    def cast(self, val):
        return round(float(val), 3)

class vohpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of VOH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of VOH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [185.16666666666663, 358.417, 441.833, 512.875, 720.5]
    def cast(self, val):
        return round(float(val), 6)

class plhpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of PLH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of PLH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [132.0, 1174.25, 1575.75, 1742.125, 2541.0]
    def cast(self, val):
        return round(float(val), 3)

class ilhpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of ILH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of ILH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [194.3337, 1019.333, 1370.0, 1583.083, 2558.6]
    def cast(self, val):
        return round(float(val), 4)

class blahpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of BLAH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of BLAH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [33.0, 121.0, 161.333, 194.333, 295.16666666666663]
    def cast(self, val):
        return round(float(val), 3)

class ceahpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of CEAH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of CEAH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [99.0, 352.825, 436.333, 497.2, 723.8]
    def cast(self, val):
        return round(float(val), 3)

class mevhpermm2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Volume of MEVH per square millimeter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume of MEVH per square millimeter should be a floating-point number""
        self.unit = ""cubic millimeters""
        self.examples = [0.0, 72.6, 99.917, 144.925, 245.66666666666663]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'rat': rat, 'housing': housing, 'condition': condition, 'socialstimulus': socialstimulus, 'footshock': footshock,
           'sex': sex, 'runningincirclesbout': runningincirclesbout, 'runningawaybout': runningawaybout, 
           'totalsocialinteractionsec': totalsocialinteractionsec, 'totalaggressivegroomingsec': totalaggressivegroomingsec, 
           'nonaggressivesocialbehaviorsec': nonaggressivesocialbehaviorsec, 'vohpermm2': vohpermm2, 'plhpermm2': plhpermm2, 
           'ilhpermm2': ilhpermm2, 'blahpermm2': blahpermm2, 'ceahpermm2': ceahpermm2, 'mevhpermm2': mevhpermm2}"
"class schoolcode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Code of a school""
        self.valid_values = ""The code of a school should take the form 'SX', where X is a number""
        self.format = ""The school code is a two-character string in the form 'SX'""
        self.examples = ['S01', 'S02', 'S03', 'S04', 'S05']
    def cast(self, val):
        return str(val).upper()

class gradecode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Code of a grade""
        self.valid_values = ""The code of a grade should take the form 'PX', where X is a number""
        self.format = ""The grade code is a two-character string in the form 'PX'""
        self.examples = ['P1', 'P2', 'P3', 'P4', 'P5']
    def cast(self, val):
        return str(val).upper()

class classcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Code of a class""
        self.valid_values = ""The code of a class should take the form 'AXYPZ', where A is a letter, X, Y, and Z are numbers, and P is a letter""
        self.format = ""The class code is a six-character string in the form 'AXYPZ'""
        self.examples = ['A01P61', 'A02P21', 'A03P21', 'A03M31', 'A04P61']
    def cast(self, val):
        return str(val).upper()

class participantid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ID of a participant""
        self.valid_values = ""The ID of a participant should take the form 'AXYPZM', where A is a letter, X, Y, Z, and M are numbers, and P is a letter""
        self.format = ""The participant ID is a eight-character string in the form 'AXYPZM'""
        self.examples = ['A01P6111', 'A02P2101', 'A03P2131', 'A03M3109', 'A04M3127']
    def cast(self, val):
        return str(val).upper()

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F']
    def cast(self, val):
        val = str(val).upper()
        if val not in self.valid_values:
            raise Exception('Invalid gender')
        return val

class seroconversion(NumericSemanticType):
    def __init__(self):
        self.description = ""Seroconversion value""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Seroconversion value should be either 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        val = int(val)
        if val not in self.valid_range:
            raise Exception('Invalid seroconversion value')
        return val

MAPPING = {'school': schoolcode, 'grade': gradecode, 'class': classcode, 'idparticipant': participantid, 'sex': gender, 'seroconversion': seroconversion}"
"class feedback(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Feedback or Suggestions""
        self.valid_values = ""Feedback can be any string of text.""
        self.format = ""Feedback should be a string of text with only the first letter capitalized.""
        self.examples = ['Improve slide formatting', 'If more than one', 'Examples of abstracts/case reports', 'More teaching/presentations', 'Slide formatting']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).capitalize()

MAPPING = {
    'question5': feedback, 
    'stage1': feedback, 
    'stage2': feedback, 
    'stage3': feedback, 
    'stage4': feedback, 
    'f': feedback
}"
"class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sample ID""
        self.valid_values = ""Sample ID is a string that starts with 'Serum' and is followed by numbers""
        self.format = ""Sample ID should be of the format 'SerumXX' where XX are numbers""
        self.examples = ['Serum01', 'Serum02', 'Serum03', 'Serum13', 'Serum14']
    def cast(self, val):
        match_obj = re.match('Serum[0-9]+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid sampleid')

class group(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Group""
        self.valid_values = ""Group can be either 1.0, 2.0, or 3.0""
        self.format = ""Group should be a single digit number""
        self.examples = [1.0, 2.0, 3.0]
    def cast(self, val):
        if val in [1.0, 2.0, 3.0]:
            return val
        else:
            raise Exception('Invalid group')

class age(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Age of the person'
        self.valid_range: list = [0, 120] # considering the maximum age to be 120
        self.dtype: object = float
        self.format: str = 'Age should be represented as a float'
        self.examples: list = [20.0, 38.0, 25.0, 26.0, 43.0]
    def cast(self, val):
        age = float(val)
        if 0 <= age <= 120:
            return age
        else:
            raise Exception('Invalid age')

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, 2.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid sex')

class bmi(NumericSemanticType):
    def __init__(self):
        self.description: str = 'BMI of the person'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'BMI should be represented as a float'
        self.examples: list = [24.6097337006428, 17.577068685776098, 19.003908350962742, 19.62826470116968, 19.227687870533565]
    def cast(self, val):
        bmi = float(val)
        if 0 <= bmi:
            return round(bmi, 3)
        else:
            raise Exception('Invalid BMI')

class htn(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid htn')

class dm(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid dm')

class other(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid other')

class hxtb(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid hxtb')

class bcgscar(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid bcgscar')

class safbsmear(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid safbsmear')

class safbsmearscore(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""SAF B Smear Score""
        self.valid_values = ""SAF B Smear Score can be either '0' or '1+'""
        self.format = ""SAF B Smear Score should be a string""
        self.examples = ['0', '1+']
    def cast(self, val):
        if val in ['0', '1+']:
            return val
        else:
            raise Exception('Invalid safbsmearscore')

class safbcultureresult(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid safbcultureresult')

class riskgroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Risk Group""
        self.valid_values = ""Risk Group can be either 1.0, 2.0, or 3.0""
        self.format = ""Risk Group should be a single digit number""
        self.examples = [1.0, 2.0, 3.0]
    def cast(self, val):
        if val in [1.0, 2.0, 3.0]:
            return val
        else:
            raise Exception('Invalid riskgroup')

class tstsize(NumericSemanticType):
    def __init__(self):
        self.description: str = 'TST Size'
        self.valid_range: list = [0, 25.0]
        self.dtype: object = float
        self.format: str = 'TST Size should be represented as a float'
        self.examples: list = [0.0, 2.0, 12.75, 25.0]
    def cast(self, val):
        tst_size = float(val)
        if 0 <= tst_size <= 25:
            return tst_size
        else:
            raise Exception('Invalid tstsize')

class qftresult(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid qftresult')

class extrapultb(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid extrapultb')

class extrapultbtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Extra Pul TB Type""
        self.valid_values = ""Extra Pul TB Type can be either 0.0, 1.0, or 2.0""
        self.format = ""Extra Pul TB Type should be a single digit number""
        self.examples = [0.0, 1.0, 2.0]
    def cast(self, val):
        if val in [0.0, 1.0, 2.0]:
            return val
        else:
            raise Exception('Invalid extrapultbtype')

MAPPING = {'sampleid': sampleid, 'group': group, 'age': age, 'sex': sex, 'bmi': bmi, 'htn': htn, 'dm': dm, 'other': other, 'hxtb': hxtb, 'bcgscar': bcgscar, 'safbsmear': safbsmear, 'safbsmearscore': safbsmearscore, 'safbcultureresult': safbcultureresult, 'riskgroup': riskgroup, 'tstsize': tstsize, 'qftresult': qftresult, 'extrapultb': extrapultb, 'extrapultbtype': extrapultbtype}"
"class identifieryearpmid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A unique identifier consisting of year and PubMed ID""
        self.valid_values = ""Identifier should be of the form 'year_pmid'""
        self.format = ""First 4 characters represent the year and the characters after underscore (_) represent the PubMed ID""
        self.examples = ['2005_16339345', '2005_16433627', '2005_16023640', '2005_16385084', '2005_16236447']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('(\d{4})_(\d+)', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid identifier')

class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country codes""
        self.valid_values = ""Country codes must be valid ISO 3166-1 numeric country codes""
        self.format = ""Country codes should be numeric values representing the ISO 3166-1 numeric country codes""
        self.examples = [840, 124, 826, 250, 356]
    def cast(self, val):
        num = int(val)
        if pycountry.countries.get(numeric=str(num)):
            return num
        else:
            raise Exception('Invalid country code')

class categoryvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Category values""
        self.valid_range = [1, 99]
        self.dtype = int
        self.format = ""Category values should be integers ranging from 1 to 99""
        self.examples = [1, 2, 3, 4, 99]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 99:
            return num
        else:
            raise Exception('Invalid category value')

MAPPING = {'identifieryearpmid': identifieryearpmid, 
           'country': country, 
           'a': categoryvalue, 
           'ratstrain': categoryvalue,
           'strokemodel': categoryvalue,
           'anaesthesiainduction': categoryvalue,
           'anaesthesiamaintenance': categoryvalue,
           'monitoring': categoryvalue,
           'o2': categoryvalue,
           'ventilation': categoryvalue,
           'temperature': categoryvalue,
           'ivaccess': categoryvalue,
           'iaaccess': categoryvalue,
           'fluids': categoryvalue,
           'analgesics': categoryvalue,
           'anaesthesiarecovery': categoryvalue}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Serial Number""
        self.valid_range = [2, 1365]
        self.dtype = int
        self.format = ""Serial numbers are integers between 2 and 1365""
        self.examples = [2, 3, 4, 5, 6]
    def cast(self, val):
        return int(val)

class fearlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Fear Level""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Fear levels are integers between 0 and 3""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        return int(val)

class depressionlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Depression Level""
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = ""Depression levels are integers between 0 and 5""
        self.examples = [0, 1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class anxietylevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Anxiety Level""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Anxiety levels are integers between 0 and 3""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        return int(val)

MAPPING = {
    'serialno': serialnumber,
    'fear1': fearlevel,
    'fear2': fearlevel,
    'fear3': fearlevel,
    'fear4': fearlevel,
    'fear5': fearlevel,
    'fear6': fearlevel,
    'fear7': fearlevel,
    'dep1': depressionlevel,
    'dep2': depressionlevel,
    'dep3': depressionlevel,
    'de4': depressionlevel,
    'de5': depressionlevel,
    'anx1': anxietylevel,
    'anx2': anxietylevel,
    'anx3': anxietylevel,
    'anx4': anxietylevel,
    'anx5': anxietylevel,
    'anx6': anxietylevel,
    'anx7': anxietylevel
}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be formatted as a floating point number""
        self.examples: list[str] = [24.0, 23.0, 24.0, 23.0, 23.0]
    def cast(self, val):
        num = float(val)
        return round(num, 1)
        
class binaryValue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val == 0.0:
            return 0.0
        elif val == 1.0:
            return 1.0
        else:
            raise Exception('Invalid binary value')

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating scale of 1-7""
        self.valid_range = [1, 7]
        self.dtype = float
        self.format = ""Rating should be formatted as a floating point number""
        self.examples: list[str] = [5.266, 5.25, 5.25, 5.086, 4.047]
    def cast(self, val):
        num = float(val)
        if num < 1 or num > 7:
            raise Exception('Invalid rating value')
        return round(num, 3)

class yearInProgram(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of years in a program""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Number of years should be formatted as a floating point number""
        self.examples: list[str] = [2.0, 2.0, 2.0, 2.0, 2.0]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

class likelihood(NumericSemanticType):
    def __init__(self):
        self.description = ""Likelihood scale of 1-6""
        self.valid_range = [1, 6]
        self.dtype = float
        self.format = ""Likelihood should be formatted as a floating point number""
        self.examples: list[str] = [3.0, 2.0, 3.0, 3.0, 1.0]
    def cast(self, val):
        num = float(val)
        if num < 1 or num > 6:
            raise Exception('Invalid likelihood value')
        return round(num, 1)

MAPPING = {'age': age, 'gender': binaryValue, 'race': binaryValue, 'yrinprogram': yearInProgram, 'likelihood': likelihood, 
           'othasrole': binaryValue, 'know': binaryValue, 'exposureot': binaryValue, 'ros1': rating, 'ros2': rating, 
           'ros3': rating, 'ros4': rating, 'ros5': rating, 'ros6': rating, 'ros7': rating, 'ros8': rating, 'ros9': rating, 'rosm': rating}"
"class studyoutcome(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Study outcome""
        self.valid_values = ""Outcomes of the study should be string types""
        self.format = ""In string format""
        self.examples = ['PT', 'shControl', '10', '0.02']
    def cast(self, val):
        return str(val) if pd.notna(val) else None

class studyoutcomebinary(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['shNR2F1', 'SUM']
    def cast(self, val):
        return str(val) if pd.notna(val) else None

class nummice(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of mice used in study""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be a positive integer""
        self.examples = [80, 120, 160, 2, 362]
    def cast(self, val):
        return int(val) if pd.notna(val) else None

MAPPING = {'b': studyoutcome, 'c': studyoutcome, 'experimentalmets': studyoutcome, 'e': studyoutcome, 'f': studyoutcome, 
           'g': studyoutcome, 'intratibial': studyoutcome, 'i': studyoutcome, 'j': studyoutcome, 'k': studyoutcome,
           'fatpad': studyoutcome, 'm': studyoutcomebinary, 'n': studyoutcome, 'o': studyoutcomebinary, 'q': studyoutcomebinary,
           'totalmice': nummice}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for each patient""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Patient ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class age(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Age of the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a floating point number""
        self.unit = ""In years""
        self.examples = [61.856262833675565, 68.870636550308, 67.7262149212868, 54.06707734428473, 71.2662559890486]
    def cast(self, val):
        return round(float(val), 3)
        
class psa(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Prostate-specific antigen levels""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""PSA levels should be a floating point number""
        self.unit = ""In ng/mL""
        self.examples = [4.37, 11.9, 6.19, 32.92, 28.82]
    def cast(self, val):
        return round(float(val), 2)

class tumorstage(NumericSemanticType):
    def __init__(self):
        self.description = ""Stage of the tumor in the patient""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Tumor stage should be an integer between 1 and 5""
        self.examples = [4, 4, 4, 5, 5]
    def cast(self, val):
        return int(val)

class gleasonscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Gleason score of the patient's prostate cancer""
        self.valid_range = [1, 100]
        self.dtype = int
        self.format = ""Gleason score should be an integer between 1 and 100""
        self.examples = [90, 80, 72, 90, 90]
    def cast(self, val):
        return int(val)

class nodalstage(NumericSemanticType):
    def __init__(self):
        self.description = ""Nodal stage of the cancer in the patient""
        self.valid_range = [-1, 1]
        self.dtype = int
        self.format = ""Nodal stage should be an integer between -1 and 1""
        self.examples = [0, 0, 0, 1, 0]
    def cast(self, val):
        return int(val)

class nodespositive(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of positive nodes in the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of positive nodes should be a non-negative integer""
        self.examples = [0, 0, 0, 5, 0]
    def cast(self, val):
        return int(val)

class nodesremoved(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of nodes removed from the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of nodes removed should be a non-negative integer""
        self.examples = [9, 25, 13, 34, 12]
    def cast(self, val):
        return int(val)

class perineuralinvasion(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class lymphovascularinvasion(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class resectionmarginstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class psanadir(NumericSemanticType):
    def __init__(self):
        self.description = ""PSA Nadir of the patient""
        self.valid_range = [-1, 1]
        self.dtype = int
        self.format = ""PSA Nadir should be an integer between -1 and 1""
        self.examples = [-1, -1, -1, 0, 0]
    def cast(self, val):
        return int(val)

class bcr(NumericSemanticType):
    def __init__(self):
        self.description = ""Biochemical recurrence of the cancer in the patient""
        self.valid_range = [-1, 1]
        self.dtype = int
        self.format = ""BCR should be an integer between -1 and 1""
        self.examples = [-1, -1, -1, -1, -1]
    def cast(self, val):
        return int(val)

class timetobcr(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Time to biochemical recurrence""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time to BCR should be a non-negative floating point number""
        self.unit = ""In days""
        self.examples = [215.0, 541.0, 751.0, 1446.0, 2569.0]
    def cast(self, val):
        return round(float(val), 1) if not math.isnan(val) else float('nan')

class timetolastfollowup(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Time to last follow-up with the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time to last follow-up should be a non-negative floating point number""
        self.unit = ""In days""
        self.examples = [4, 417.0, 1621.0, 2192.0, 2834]
    def cast(self, val):
        return round(float(val), 1)

class secondarytreatment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class timetosecondarytreatment(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Time to secondary treatment for the patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time to secondary treatment should be a non-negative floating point number""
        self.unit = ""In days""
        self.examples = [15.0, 167.0, 375.0, 829.5, 2715.0]
    def cast(self, val):
        return round(float(val), 1) if not math.isnan(val) else float('nan')

class csdeath(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class death(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'patientid': patientid, 'age': age, 'psa': psa, 'tumorstage': tumorstage, 'gleasonscore': gleasonscore, 
           'nodalstage': nodalstage, 'nodespositive': nodespositive, 'nodesremoved': nodesremoved, 
           'perineuralinvasion': perineuralinvasion, 'lymphovascularinvasion': lymphovascularinvasion, 
           'resectionmarginstatus': resectionmarginstatus, 'psanadir': psanadir, 'bcr': bcr, 'timetobcr': timetobcr, 
           'timetolastfollowup': timetolastfollowup, 'secondarytreatment': secondarytreatment, 
           'timetosecondarytreatment': timetosecondarytreatment, 'csdeath': csdeath, 'death': death}"
"class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a Person""
        self.valid_values = ""1 represents male and 2 represents female""
        self.format = ""The values should be either 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return val
        else:
            raise Exception('Invalid sex value')

class agegroup(NumericSemanticType):
    def __init__(self):
        self.description = ""Age Group""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Should be an integer between 0 and 3""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        if val in range(4):
            return val
        else:
            raise Exception('Invalid age group')

class educationlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Education Level""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""Should be an integer between 0 and 2""
        self.examples = [0, 1, 2]
    def cast(self, val):
        if val in range(3):
            return val
        else:
            raise Exception('Invalid education level')

class maritalstatus(NumericSemanticType):
    def __init__(self):
        self.description = ""Marital Status""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Should be an integer between 0 and 3""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        if val in range(4):
            return val
        else:
            raise Exception('Invalid marital status')

class infectionstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Infection Status""
        self.valid_values = ""1 represents not infected and 2 represents infected""
        self.format = ""The values should be either 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return val
        else:
            raise Exception('Invalid infection status')

MAPPING = {'sex': sex, 'agegp': agegroup, 'educationl': educationlevel, 'maritals': maritalstatus, 'currsyphilis': infectionstatus, 'passyphilis': infectionstatus, 'hepatitisb': infectionstatus}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Serial Number""
        self.valid_range = [1, 116]
        self.dtype = int
        self.format = ""Serial number is a unique integer identifier""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
        
class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [20, 30, 40, 50, 60]
    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        if val == 1:
            return 'Male'
        elif val == 2:
            return 'Female'
        else:
            raise Exception(""Invalid gender value"")

class phonenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Phone Number""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Phone Number should be a numerical value with no special characters""
        self.examples = [1234567890, 9876543210, 1029384756, 5678901234, 5432106789]
    def cast(self, val):
        return float(val)

class causeofesrd(NumericSemanticType):
    def __init__(self):
        self.description = ""Cause of ESRD""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Cause of ESRD should be represented as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class height(NumericSemanticType):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Height should be a floating point number""
        self.examples = [5.5, 6.1, 5.8, 6.0, 5.9]
    def cast(self, val):
        return float(val)

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number""
        self.examples = [55.0, 60.0, 65.5, 70.0, 75.0]
    def cast(self, val):
        return float(val)

class albumin(NumericSemanticType):
    def __init__(self):
        self.description = ""Albumin level in blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Albumin level should be a floating point number""
        self.examples = [34.0, 38.5, 42.0, 45.5, 49.0]
    def cast(self, val):
        return float(val)

class hemoglobin(NumericSemanticType):
    def __init__(self):
        self.description = ""Hemoglobin level in blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Hemoglobin level should be a floating point number""
        self.examples = [8.8, 10.0, 10.8, 11.6, 12.4]
    def cast(self, val):
        return float(val)

class calcium(NumericSemanticType):
    def __init__(self):
        self.description = ""Calcium level in blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Calcium level should be a floating point number""
        self.examples = [2.155, 2.365, 2.602, 2.839, 3.076]
    def cast(self, val):
        return float(val)

class phosphate(NumericSemanticType):
    def __init__(self):
        self.description = ""Phosphate level in blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Phosphate level should be a floating point number""
        self.examples = [0.378, 0.58, 0.945, 1.31, 1.675]
    def cast(self, val):
        return float(val)

class cnaq(NumericSemanticType):
    def __init__(self):
        self.description = ""CNAQ score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""CNAQ score should be a floating point number""
        self.examples = [23.0, 28.0, 31.0, 34.0, 37.0]
    def cast(self, val):
        return float(val)

class mnaasses(NumericSemanticType):
    def __init__(self):
        self.description = ""MNA Assessment Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""MNA Assessment Score should be a floating point number""
        self.examples = [8.0, 9.5, 12.0, 14.5, 17.0]
    def cast(self, val):
        return float(val)

class mnascreen(NumericSemanticType):
    def __init__(self):
        self.description = ""MNA Screening Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""MNA Screening Score should be a floating point number""
        self.examples = [8.0, 10.0, 12.0, 14.0, 16.0]
    def cast(self, val):
        return float(val)

class mna(NumericSemanticType):
    def __init__(self):
        self.description = ""MNA Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""MNA Score should be a floating point number""
        self.examples = [16.5, 19.5, 23.125, 26.75, 30.375]
    def cast(self, val):
        return float(val)

MAPPING = {'serial': serialnumber, 'age': age, 'gender': gender, 'tel': phonenumber, 'causeesrd': causeofesrd, 'height': height, 'weight': weight, 'albumin': albumin, 'hb': hemoglobin, 'ca': calcium, 'phosphate': phosphate, 'cnaq': cnaq, 'mnaasses': mnaasses, 'mnascreen': mnascreen, 'mna': mna}"
"class infectionknowledge(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value')

class sexknowledge(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of the individual""
        self.valid_values = ""This column should have either 'm' or 'f'""
        self.format = ""The sex should be represented as a single lower-case letter: 'm' or 'f'""
        self.examples = ['m', 'f', 'm', 'm', 'f']
    def cast(self, val):
        val = str(val).lower()
        if val in ['m', 'f']:
            return val
        else:
            raise Exception('Invalid sex')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""The age of an individual""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be represented as an integer""
        self.examples = [10, 25, 30, 45, 60]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid age')

MAPPING = {'anyinfection': infectionknowledge, 'mostcoughs': infectionknowledge, 'noteffective': infectionknowledge, 
           'goodbacteria': infectionknowledge, 'amonganimals': infectionknowledge, 'leftover': infectionknowledge, 
           'fromrelatives': infectionknowledge, 'drugstore': infectionknowledge, 'injury': infectionknowledge, 
           'feelbetter': infectionknowledge, 'skinreaction': infectionknowledge, 'mydisease': infectionknowledge, 
           'secondanyinfection': infectionknowledge, 'secondmostcoughs': infectionknowledge, 
           'secondnoteffective': infectionknowledge, 'secondgoodbacteria': infectionknowledge, 
           'secondamonganimals': infectionknowledge, 'secondleftover': infectionknowledge, 
           'secondfromrelatives': infectionknowledge, 'seconddrugstore': infectionknowledge, 
           'secondinjury': infectionknowledge, 'secondfeelbetter': infectionknowledge, 
           'secondskinreaction': infectionknowledge, 'secondmydisease': infectionknowledge, 'age': age, 'secondage': age, 
           'sex': sexknowledge, 'secondsex': sexknowledge, 'class': infectionknowledge, 'secondclass': infectionknowledge}"
"class infectionresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Responses to the questions related to infections and antibiotics, where responses are coded numerically""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Responses should be integer values between 1 and 3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val not in self.valid_range:
            raise Exception('Invalid response')
        return val

class ageresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the respondents""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Age should be an integer representing the number of years""
        self.examples = [20, 40, 60, 80, 100]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val not in self.valid_range:
            raise Exception('Invalid age')
        return val

class sexresponse(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of the respondents""
        self.valid_values = ['m', 'f']
        self.format = ""Sex should be a single character 'm' or 'f'""
        self.examples = ['m', 'f']
    def cast(self, val):
        val = str(val).lower()
        if val not in self.valid_values:
            raise Exception('Invalid sex response')
        return val

MAPPING = {'anyinfection': infectionresponse, 'mostcoughs': infectionresponse, 'noteffective': infectionresponse, 'goodbacteria': infectionresponse, 'amonganimals': infectionresponse, 'leftover': infectionresponse, 'fromrelatives': infectionresponse, 'drugstore': infectionresponse, 'injury': infectionresponse, 'feelbetter': infectionresponse, 'skinreaction': infectionresponse, 'mydisease': infectionresponse, 'childdiscussamr': infectionresponse, 'age': ageresponse, 'sex': sexresponse, 'secondanyinfection': infectionresponse, 'secondmostcoughs': infectionresponse, 'secondnoteffective': infectionresponse, 'secondgoodbacteria': infectionresponse, 'secondamonganimals': infectionresponse, 'secondleftover': infectionresponse, 'secondfromrelatives': infectionresponse, 'seconddrugstore': infectionresponse, 'secondinjury': infectionresponse, 'secondfeelbetter': infectionresponse, 'secondskinreaction': infectionresponse, 'secondmydisease': infectionresponse, 'secondchilddiscussamr': infectionresponse}"
"class weightingrams(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight in grams""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weights should be formatted as a floating point number (in grams) with one decimal place for milligrams""
        self.unit = 'In grams' 
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

class geneticvariant(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Genetic variant of a sample""
        self.valid_values = ""Genetic variants can either be 'KO' (Knock Out) or 'WT' (Wild Type)""
        self.format = ""Values must be either 'KO' or 'WT'""
        self.examples = ['KO', 'WT', 'KO', 'WT', 'KO']
    def cast(self, val):
        return str(val).upper()

class numbercount(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        return num

MAPPING = {'ms': numbercount, 
           'efna1genotype': geneticvariant, 
           'ofsurfacelungmets': numbercount, 
           'day32lungweightmg': weightingrams, 
           'day32recurrentprimaryweightmg': weightingrams}"
"class studyid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The unique identifier of a study""
        self.valid_values = ""StudyID must be a string that is unique to each study""
        self.format = ""StudyID must be a string""
        self.examples = ['CRC305C', 'CRC305D', 'CRC305E', 'CRC305F', 'CRC305G']
    def cast(self, val):
        return str(val).upper()

class domain(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The domain of the study""
        self.valid_values = ""Domain must be a string that is unique to each domain""
        self.format = ""Domain must be a string""
        self.examples = ['BS', 'CS', 'DS', 'ES', 'FS']
    def cast(self, val):
        return str(val).upper()

class usubjid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The unique identifier of a subject within a study""
        self.valid_values = ""USubJID must be a string that is unique to each subject within a study""
        self.format = ""USubJID must be a string""
        self.examples = ['CRC305C-9004-301', 'CRC305C-9060-337', 'CRC305C-9026-314', 'CRC305C-9018-309', 'CRC305C-9021-310']
    def cast(self, val):
        return str(val).upper()

class bsrefid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The unique identifier of a reference within a study""
        self.valid_values = ""BSRefID must be a string that is unique to each reference within a study""
        self.format = ""BSRefID must be a string""
        self.examples = ['CRC305C-9004-d0', 'CRC305C-9061-d1', 'CRC305C-9028-d0', 'CRC305C-9018-d3', 'CRC305C-9004-d3']
    def cast(self, val):
        return str(val).upper()

class bsdy(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of days since the start of a study""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""BSDY should be a non-negative integer""
        self.examples = [0, 1, 3, 5, 7]
    def cast(self, val):
        return max(int(val), 0)

class visitnum(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of visits by a subject to a study""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""VisitNum should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return max(int(val), 1)

class bsblfl(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Y', 'N']
    def cast(self, val):
        if str(val).upper() == 'Y':
            return 'Y'
        else:
            return 'N'

MAPPING = {
    'studyid': studyid,
    'domain': domain,
    'usubjid': usubjid,
    'bsrefid': bsrefid,
    'bsdy': bsdy,
    'visitnum': visitnum,
    'bsblfl': bsblfl
}"
"class lognumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Subject Log Number""
        self.valid_values = ""Subject Log Number should be a numeric string""
        self.format = ""Subject Log Number should be a numeric string""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        return str(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the participant""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [20, 30, 40, 50, 60]
    def cast(self, val):
        num = int(val)
        return num if num >= 0 and num <= 120 else float('nan')

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of the participant""
        self.valid_values = ""Sex should be either 'M' or 'F'""
        self.format = ""Sex should be either 'M' or 'F'""
        self.examples = ['M', 'F']
    def cast(self, val):
        return str(val) if val in ['M', 'F'] else float('nan')

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score of a participant""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Score should be a float between 0 and 100""
        self.examples = [10.5, 20.3, 30.2, 40.9, 50.1]
    def cast(self, val):
        num = float(val)
        return num if num >= 0 and num <= 100 else float('nan')

class pancescore(NumericSemanticType):
    def __init__(self):
        self.description = ""PANCE score of a participant""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""PANCE score should be a positive integer""
        self.examples = [453, 445, 561, 431, 500]
    def cast(self, val):
        num = int(val)
        return num if num >= 0 else float('nan')

MAPPING = {'demographics': lognumber, 'b': age, 'c': sex, 'grescores': score, 'e': score, 'f': score, 'g': score, 'hpgradessemi': score, 'i': score, 'j': score, 'k': score, 'l': score, 'hpgradessemii': score, 'n': score, 'o': score, 'p': score, 'q': score, 'hpgradessemiii': score, 's': score, 't': score, 'u': score, 'v': score, 'w': pancescore}"
"class diseasename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a disease""
        self.valid_values = ""Disease name should be a string""
        self.format = ""Only the first letter of each word in the disease name should be capitalized""
        self.examples = ['Rheumatoid Arthritis', 'Relapsing Remitting Multiple Sclerosis/ Clinically Isolated Syndrome Population', 'Obesity', 'Epilepsy', 'Type 1 Diabetes']
    def cast(self, val):
        return str(val).title()

class coreoutcome(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a core outcome""
        self.valid_values = ""Core outcome description should be a string""
        self.format = ""Only the first letter of each word in the core outcome description should be capitalized""
        self.examples = ['Overall Survival', 'Swollen Joints', 'Mortality', 'Mortality ', 'Seizure Severity']
    def cast(self, val):
        return str(val).title() if pd.notna(val) else float('nan')

MAPPING = {
    'diseasename': diseasename, 
    'coreoutcome1': coreoutcome,
    'coreoutcome2': coreoutcome,
    'coreoutcome3': coreoutcome,
    'coreoutcome4': coreoutcome,
    'coreoutcome5': coreoutcome,
    'coreoutcome6': coreoutcome,
    'coreoutcome7': coreoutcome,
    'coreoutcome8': coreoutcome,
    'coreoutcome9': coreoutcome,
    'coreoutcome10': coreoutcome,
    'coreoutcome11': coreoutcome,
    'coreoutcome12': coreoutcome,
    'coreoutcome13': coreoutcome,
    'coreoutcome14': coreoutcome,
    'coreoutcome15': coreoutcome,
    'coreoutcome16': coreoutcome,
    'coreoutcome17': coreoutcome,
    'coreoutcome18': coreoutcome,
    'coreoutcome19': coreoutcome,
    'coreoutcome20': coreoutcome,
    'coreoutcome21': coreoutcome,
    'coreoutcome22': coreoutcome,
    'coreoutcome23': coreoutcome,
    'coreoutcome24': coreoutcome,
    'coreoutcome25': coreoutcome,
    'coreoutcome26': coreoutcome,
}"
"class timeinminutes(NumericSemanticType):
    def __init__(self):
        self.description = ""Time in minutes""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be formatted as a floating point number with one decimal place""
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]
    def cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            return float('nan')

class celsiustemperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature in Celsius""
        self.valid_range = [-273.15, float('inf')] # absolute zero
        self.dtype = float
        self.format = ""Temperature should be formatted as a floating point number with one decimal place""
        self.unit = ""In Celsius""
        self.examples = [36.1, 36.2, 36.35, 37.675, 39.7]
    def cast(self, val):
        try:
            return round(float(val), 1)
        except ValueError:
            return float('nan')

MAPPING = {'a': timeinminutes, 
           'treatmentgroup': celsiustemperature, 
           'c': celsiustemperature, 
           'd': celsiustemperature, 
           'e': celsiustemperature, 
           'f': celsiustemperature, 
           'g': celsiustemperature, 
           'h': celsiustemperature, 
           'i': celsiustemperature, 
           'j': celsiustemperature, 
           'k': celsiustemperature, 
           'l': celsiustemperature, 
           'm': celsiustemperature, 
           'n': celsiustemperature, 
           'o': celsiustemperature, 
           'p': celsiustemperature, 
           'q': celsiustemperature}"
"class lizardid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique ID for each lizard""
        self.valid_values = ""ID should be a string in the format 'KMW_XXX'""
        self.format = ""ID should be a string in the format 'KMW_XXX'""
        self.examples = ['KMW_001', 'KMW_002', 'KMW_003', 'KMW_004', 'KMW_005']
    def cast(self, val):
        return str(val).upper()

class location(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Location site of the study""
        self.valid_values = ""The location site must be one of the following: 'Mayaguez', 'San Juan', 'Ponce'""
        self.format = ""The location should be a string representation of the location site""
        self.examples = ['Mayaguez', 'San Juan', 'Ponce']
    def cast(self, val):
        return str(val).capitalize()

class environment(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Context or environment of the study""
        self.valid_values = ""The context must be one of the following: 'natural', 'urban'""
        self.format = ""The context should be a string representation of the environment""
        self.examples = ['natural', 'urban']
    def cast(self, val):
        return str(val).lower()

class snoutventlength(NumericSemanticType):
    def __init__(self):
        self.description = ""Snout-vent length (SVL) of the lizard in mm""
        self.valid_range = [50.0, 75.0]
        self.dtype = float
        self.format = ""SVL should be a floating point number in mm""
        self.examples = [71.0, 67.0, 70.0, 66.0, 65.0]
    def cast(self, val):
        return round(float(val), 2)

class crestpresence(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['0', '1']
    def cast(self, val):
        return str(val)

class areaundercrest(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Area under the crest of the lizard""
        self.valid_range = [0.192533333333333, 1.03966666666667]
        self.dtype = float
        self.format = ""Area under crest should be a floating point number""
        self.unit = ""In square millimeters""
        self.examples = [0.5724, 0.4438, 0.510933333333333, 0.5696, 0.4697]
    def cast(self, val):
        return round(float(val), 6) if not pd.isna(val) else float('nan')

class tailheight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Maximum height of the tail of the lizard""
        self.valid_range = [0.1456, 0.6142]
        self.dtype = float
        self.format = ""Tail height should be a floating point number""
        self.unit = ""In millimeters""
        self.examples = [0.316066666666667, 0.311766666666667, 0.301533333333333, 0.362533333333333, 0.295233333333333]
    def cast(self, val):
        return round(float(val), 6)

class taildistance(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Distance from the base of the lizard to the end of the crest""
        self.valid_range = [1.2652, 2.43633333333333]
        self.dtype = float
        self.format = ""Distance should be a floating point number""
        self.unit = ""In millimeters""
        self.examples = [2.35553333333333, 1.9264, 2.24903333333333, 2.0261, 2.0804]
    def cast(self, val):
        return round(float(val), 6) if not pd.isna(val) else float('nan')

MAPPING = {'lizid': lizardid, 'site': location, 'context': environment, 'svlmm': snoutventlength, 'crestpres': crestpresence, 'areaundercrest': areaundercrest, 'maxtailheight': tailheight, 'basetocrestend': taildistance}"
"class timeseries(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Time series data for the experiment""
        self.valid_values = ""Time series data should be either 'BL' for baseline or a string representing the time in minutes""
        self.format = ""Data should be stored as a string""
        self.examples = ['BL', '5', '10', '15', '20']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 'BL':
            return 'BL'
        elif re.match(r'^\d+$', val):
            return val
        else:
            raise Exception('Invalid time series data')

class ratname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a rat""
        self.valid_values = ""Name should be a string of the form 'Rat X' where X is a number""
        self.format = ""Data should be stored as a string""
        self.examples = ['Rat 1', 'Rat 2', 'Rat 3', 'Rat 4', 'Rat 5']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif re.match(r'^Rat \d+$', val):
            return val
        else:
            raise Exception('Invalid rat name')

class sedationscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Sedation score of a rat""
        self.valid_range = [0, 19]
        self.dtype = int
        self.format = ""Score should be an integer value between 0 and 19""
        self.examples = [0, 4, 7, 10, 14]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val.isdigit() and 0 <= int(val) <= 19:
            return int(val)
        else:
            raise Exception('Invalid sedation score')

MAPPING = {'a': timeseries, 'totalsedationscoresscore019': sedationscore, 'c': ratname, 'd': sedationscore,
           'e': ratname, 'f': sedationscore, 'g': ratname, 'h': sedationscore, 'i': ratname, 'j': sedationscore,
           'k': ratname, 'l': sedationscore, 'm': ratname, 'n': sedationscore, 'o': ratname, 'p': sedationscore,
           'q': ratname, 'r': sedationscore, 's': ratname, 't': sedationscore, 'u': ratname, 'v': sedationscore,
           'w': ratname, 'x': sedationscore, 'y': ratname, 'z': sedationscore}"
"
class statingroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Two different statin groups""
        self.valid_values = ""Values can be 1 or 2, representing two different statin groups""
        self.format = ""Values should be integers 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return int(val)
        else:
            raise Exception('Invalid statin group')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [20, 30, 40, 50, 60]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Values can be 1 or 2, representing two different genders""
        self.format = ""Values should be integers 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return int(val)
        else:
            raise Exception('Invalid gender')

class edn(NumericSemanticType):
    def __init__(self):
        self.description = ""Endothelin level of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Endothelin level should be a floating point number""
        self.examples = [0.0, 1.0, 2.5, 3.0, 4.0]
    def cast(self, val):
        return float(val)

class htn(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Hypertension status of a person""
        self.valid_values = ""Values can be 1 or 2, representing two different hypertension statuses""
        self.format = ""Values should be integers 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return int(val)
        else:
            raise Exception('Invalid hypertension status')

class diabetes(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Diabetes status of a person""
        self.valid_values = ""Values can be 1 or 2, representing two different diabetes statuses""
        self.format = ""Values should be integers 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return int(val)
        else:
            raise Exception('Invalid diabetes status')

class height(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of a person""
        self.valid_range = [0, 300]
        self.dtype = int
        self.format = ""Height should be an integer""
        self.unit = 'In cm' 
        self.examples = [150, 160, 170, 180, 190]
    def cast(self, val):
        return int(val)

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of a person""
        self.valid_range = [0, 500]
        self.dtype = float
        self.format = ""Weight should be a floating point number""
        self.unit = 'In kg' 
        self.examples = [50.0, 60.0, 70.0, 80.0, 90.0]
    def cast(self, val):
        return float(val)

class bmi(NumericSemanticType):
    def __init__(self):
        self.description = ""Body Mass Index of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""BMI should be a floating point number""
        self.examples = [18.5, 24.9, 29.9, 34.9, 39.9]
    def cast(self, val):
        return float(val)

class wc(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Waist circumference of a person""
        self.valid_range = [0, 200]
        self.dtype = int
        self.format = ""Waist circumference should be an integer""
        self.unit = 'In cm' 
        self.examples = [70, 80, 90, 100, 110]
    def cast(self, val):
        return int(val)

class smoking(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in [0, 1]:
            return int(val)
        else:
            raise Exception('Invalid smoking status')

class sysbp1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Systolic blood pressure at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Systolic blood pressure should be a floating point number""
        self.unit = 'In mmHg' 
        self.examples = [90.0, 100.0, 110.0, 120.0, 130.0]
    def cast(self, val):
        return float(val)

class diabp1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Diastolic blood pressure at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Diastolic blood pressure should be a floating point number""
        self.unit = 'In mmHg' 
        self.examples = [60.0, 70.0, 80.0, 90.0, 100.0]
    def cast(self, val):
        return float(val)

class pgf1(NumericSemanticType):
    def __init__(self):
        self.description = ""Prostaglandin F1 level at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Prostaglandin F1 level should be a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class chol1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Cholesterol level at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cholesterol level should be a floating point number""
        self.unit = 'In mmol/L' 
        self.examples = [3.0, 4.0, 5.0, 6.0, 7.0]
    def cast(self, val):
        return float(val)

class tg1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Triglyceride level at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Triglyceride level should be a floating point number""
        self.unit = 'In mmol/L' 
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class hdl1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""HDL cholesterol level at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""HDL cholesterol level should be a floating point number""
        self.unit = 'In mmol/L' 
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

class ldl1(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""LDL cholesterol level at time 1""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""LDL cholesterol level should be a floating point number""
        self.unit = 'In mmol/L' 
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class comorbid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Comorbidity score of a person""
        self.valid_values = ""Values can be 1, 2, 3, 4 or 5, representing five different comorbidity scores""
        self.format = ""Values should be integers 1, 2, 3, 4 or 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if val in [1,2,3,4,5]:
            return int(val)
        else:
            raise Exception('Invalid comorbidity score')

class chol2(NumericSemanticTypeWithUnits):
    def __init__(self):
        self"
"class sequencecount(NumericSemanticType):
    def __init__(self):
        self.description = ""A sequence count of entities""
        self.valid_range = [1, 150]
        self.dtype = int
        self.format = ""Sequence count should be an integer""
        self.examples = [94, 97, 11, 15, 47]
    def cast(self, val):
        return int(val)

class binarytraining(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary representation of an entity undergoing training""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary representation should be an integer""
        self.examples = [0, 1, 0, 0, 1]
    def cast(self, val):
        return int(val)
        
class binarysex(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary representation of sex""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Binary sex representation should be an integer""
        self.examples = [1, 1, 1, 1, 1]
    def cast(self, val):
        return int(val)
        
class violencetotalcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Total count of violent incidents""
        self.valid_range = [0, 18]
        self.dtype = int
        self.format = ""Violence count should be an integer""
        self.examples = [0, 0, 0, 0, 0]
    def cast(self, val):
        return int(val)
        
class binaryviolence(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary representation of violence occurrence""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary violence representation should be an integer""
        self.examples = [0, 0, 0, 0, 0]
    def cast(self, val):
        return int(val)
        
class binaryworkduration(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary representation of work duration""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary work duration representation should be an integer""
        self.examples = [1, 1, 1, 1, 0]
    def cast(self, val):
        return int(val)
        
class binaryagegroup(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary representation of an age group""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary age group representation should be an integer""
        self.examples = [0, 0, 0, 0, 0]
    def cast(self, val):
        return int(val)
        
class violencenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Violence number representation""
        self.valid_range = [0, 112]
        self.dtype = float
        self.format = ""Violence number should be a float""
        self.examples = [0.0, 39.0, 18.0, 36.0, float('nan')]
    def cast(self, val):
        return float(val)

MAPPING = {'num': sequencecount, 'training': binarytraining, 'sex': binarysex, 'violencetotal': violencetotalcount, 
           'violence': binaryviolence, 'workdurat': binaryworkduration, 'agegp': binaryagegroup, 'violencenumber': violencenumber}"
"class daysobserved(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of days in which observations were made""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of days should be a positive floating point number.""
        self.examples = [533.0, 0.0, 100.0, 365.0, 1505.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class medicationpossessionratio(NumericSemanticType):
    def __init__(self):
        self.description = ""Ratio of the total days of medication supplied over the observation period""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Medication possession ratio should be a positive floating point number.""
        self.examples = [88.028, 8.219178, 101.762, 105.458, 133.33333]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class categorization(NumericSemanticType):
    def __init__(self):
        self.description = ""Categorization of data (1, 2, 3, 4)""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Categorization should be an integer between 1 and 4.""
        self.examples = [1, 2, 3, 4, 1]
    def cast(self, val):
        return int(val)

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class educationlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education level of the individual""
        self.valid_values = ""Education level should be one of the following: ['secondary', 'tertiary', 'primary', 'none']""
        self.format = ""Education level should be a string.""
        self.examples = ['secondary', 'tertiary', 'primary', 'none']
    def cast(self, val):
        return str(val).lower()

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the individual""
        self.valid_range = [14, 79]
        self.dtype = float
        self.format = ""Age should be a floating point number between 14 and 79.""
        self.examples = [22.0, 36.0, 34.0, 45.0, 20.0]
    def cast(self, val):
        return float(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1] # 0 for male, 1 for female
    def cast(self, val):
        return int(val)

class employmentstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1] # 0 for not employed, 1 for employed
    def cast(self, val):
        return int(val)

class datetimestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date of a certain event or observation""
        self.valid_values = ""Dates should be in the format 'YYYY-MM-DD'""
        self.format = ""Dates should be string type""
        self.examples = ['2013-01-31', '2013-03-01', '2013-08-13', '2013-04-16', '2013-08-01']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date()

class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each patient""
        self.valid_range = [10001, 12757]
        self.dtype = int
        self.format = ""Patient ID should be an integer between 10001 and 12757.""
        self.examples = [10001, 10002, 10003, 10004, 10005]
    def cast(self, val):
        return int(val)

MAPPING = {'obsdays': daysobserved, 'mpr': medicationpossessionratio, 'mprcat': categorization, 'missedcat': categorization,
           'mpr95': booleanindicator, 'mpr81': booleanindicator, 'missed95': booleanindicator, 'missed81': booleanindicator, 
           'cohort': booleanindicator, 'education': educationlevel, 'age': age, 'female': gender, 
           'employcat': booleanindicator, 'employed': booleanindicator, 'edcat': categorization, 'married': booleanindicator,
           'cd4date0': datetimestamp, 'cd4cat0': categorization, 'carecat': categorization, 'agecat': categorization,
           'cd4200': booleanindicator, 'cd4unknown': booleanindicator, 'highearner': booleanindicator, 'patientid': patientid}"
"class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Village name""
        self.valid_values = ""Village names should be valid strings and represent the name of a village in Sabah, Malaysian Borneo""
        self.format = ""Village names should be in capitalized form.""
        self.examples = ['Gondohon', 'Barankason', 'Suvil', 'Perpaduan', 'Kotud']
    def cast(self, val):
        return str(val).title()

class percent(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Percent values ranging from 0.0 to 1.0""
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = ""Percent values should be a floating point number with three decimal places""
        self.examples = [0.036, 0.056, 0.081, 0.084, 0.07]
    def cast(self, val):
        return round(float(val), 3)

class abundance(NumericSemanticType):
    def __init__(self):
        self.description = ""Abundance values""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Abundance values should be a floating point number with three decimal places""
        self.examples = [0.0, 0.083, 0.273, 0.917, 0.6]
    def cast(self, val):
        return round(float(val), 3)

class presenceabsence(NumericSemanticType):
    def __init__(self):
        self.description = ""Presence or Absence values""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Presence or Absence values should be a floating point number with three decimal places""
        self.examples = [0.0, 0.083, 0.286, 0.5, 0.42]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'village': village, 'percentseropositivity': percent, 'leucogpabundance': abundance, 'leucogpabundancelower': abundance,
           'leucogpabundanceupper': abundance, 'leucogppresenceabsence': presenceabsence, 'leucogppresenceabsencelower': presenceabsence,
           'leucogppresenceabsenceupper': presenceabsence, 'anbalabacensisabundance': abundance, 'anbalabacensispresenceabsence': presenceabsence}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for the patients""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Patient IDs are positive integer values""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return int(float(val))

class patientage(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the patient in years""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a positive number""
        self.examples = [44.0, 43.0, 62.0, 26.0, 47.0]
    def cast(self, val):
        return float(val)

class followupperiod(NumericSemanticType):
    def __init__(self):
        self.description = ""The follow up period of patients in months""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The follow up period should be a positive number""
        self.examples = [113.0, 52.0, 73.0, 6.0, 254.0]
    def cast(self, val):
        return float(val)

class hormonelevel(NumericSemanticType):
    def __init__(self):
        self.description = ""The level of hormones in the body""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Hormone level should be a positive number""
        self.examples = [5.4, 22.8, 5.2, 2.4, 20.8]
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class booleanmedicalhistory(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 0.0

class igccc(NumericSemanticType):
    def __init__(self):
        self.description = ""The IGCCC score of patients""
        self.valid_range = [0, 3]
        self.dtype = float
        self.format = ""IGCCC score should be a positive number between 0 and 3 inclusive""
        self.examples = [1.0, 0.0, 0.0, 0.0, 1.0]
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

MAPPING = {
    'id': patientid,
    'age': patientage,
    'followupperiodm': followupperiod,
    'shim1': hormonelevel,
    'shim2': hormonelevel,
    'shim3': hormonelevel,
    'shim4': hormonelevel,
    'shim5': hormonelevel,
    'shim': hormonelevel,
    'lh': hormonelevel,
    'fsh': hormonelevel,
    'tt': hormonelevel,
    'ft': hormonelevel,
    'histology0seminoma1nonseminoma': booleanmedicalhistory,
    'primarylesion0gonadal1extragonadal': booleanmedicalhistory,
    'historyoforchiectomy0yes1no': booleanmedicalhistory,
    'historyofchemotherapy0no1yes': booleanmedicalhistory,
    'nochemotherapycycles': hormonelevel,
    'historyofrplnd0no1yes': booleanmedicalhistory,
    'igccc': igccc
}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Serial Numbers""
        self.valid_range = [1.0, 607.0]
        self.dtype = float
        self.format = ""Serial number should be a positive integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return int(val)

class facility(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Facility""
        self.valid_values = ""Facility values must be between 1 and 4""
        self.format = ""Facility values should be strings""
        self.examples = ['2', ' ', '3', '1']
    def cast(self, val):
        return str(val)

class month(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Month""
        self.valid_values = ""Month values must be between 1 and 12""
        self.format = ""Month values should be strings""
        self.examples = [' ', '1', '3', '2']
    def cast(self, val):
        return str(val)

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['1', '2']
    def cast(self, val):
        if val == '1':
            return 'Male'
        elif val == '2':
            return 'Female'
        else:
            return 'Unknown'

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age""
        self.valid_range = [16.0, 78.0]
        self.dtype = float
        self.format = ""Age should be a positive integer""
        self.examples = [37.0, 35.0, 34.0, 22.0, 59.0]
    def cast(self, val):
        return int(val)

class maritalstatus(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Marital Status""
        self.valid_values = ""Marital status values must be between 1 and 5""
        self.format = ""Marital status values should be strings""
        self.examples = ['1', ' ', '2', '3', '4']
    def cast(self, val):
        return str(val)

class timefromtesttoartinitiation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Time from test to ART initiation""
        self.valid_values = ""Time from test to ART initiation values must be between 1 and 6""
        self.format = ""Time from test to ART initiation values should be strings""
        self.examples = ['1', ' ', '6', '4', '3']
    def cast(self, val):
        return str(val)

class entrypoint(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Entry Point""
        self.valid_values = ""Entry point values must be between 1 and 3""
        self.format = ""Entry point values should be strings""
        self.examples = ['1', ' ', '2', '3']
    def cast(self, val):
        return str(val)

class numberofcontacts(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Contacts""
        self.valid_range = [1.0, 4.0]
        self.dtype = float
        self.format = ""Number of contacts should be a positive integer""
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]
    def cast(self, val):
        return int(val)

class contactnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Contact Number""
        self.valid_range = [1.0, 4.0]
        self.dtype = float
        self.format = ""Contact number should be a positive integer""
        self.examples = [1.0, 1.0, 1.0, 1.0, 1.0]
    def cast(self, val):
        return int(val)

class csex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['1', '2']
    def cast(self, val):
        if val == '1':
            return 'Male'
        elif val == '2':
            return 'Female'
        else:
            return 'Unknown'

class cage(NumericSemanticType):
    def __init__(self):
        self.description = ""Cage""
        self.valid_range = [17, 80]
        self.dtype = float
        self.format = ""Cage should be a positive integer""
        self.examples = [41, 49, 42, 26, 54]
    def cast(self, val):
        return int(val)

class crelationship(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['1', '2']
    def cast(self, val):
        if val == '1':
            return 'Relationship Exists'
        elif val == '2':
            return 'No Relationship'
        else:
            return 'Unknown'

class cmaritalstatus(NumericSemanticType):
    def __init__(self):
        self.description = ""C Marital Status""
        self.valid_range = [1, 11]
        self.dtype = float
        self.format = ""C Marital status should be a positive integer""
        self.examples = [1, 1, 1, 2, 1]
    def cast(self, val):
        return int(val)

class ctestperiod(NumericSemanticType):
    def __init__(self):
        self.description = ""C Test Period""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""C Test period should be a positive integer""
        self.examples = [4, 5, 1, 5, 1]
    def cast(self, val):
        return int(val)

class chivstatus(NumericSemanticType):
    def __init__(self):
        self.description = ""C HIV Status""
        self.valid_range = [1, 4]
        self.dtype = float
        self.format = ""C HIV status should be a positive integer""
        self.examples = [1, 4, 1, 4, 1]
    def cast(self, val):
        return int(val)

class ctimefromtesttoart(CategoricalSemanticType):
    def __init__(self):
        self.description = ""C Time from test to ART""
        self.valid_values = ""C Time from test to ART values must be between 1 and 6""
        self.format = ""C Time from test to ART values should be strings""
        self.examples = ['5', '1', '6', '2', ' ']
    def cast(self, val):
        return str(val)

MAPPING = {'serialnumber': serialnumber, 'facility': facility, 'month': month, 'sex': sex, 'age': age, 'maritalstatus': maritalstatus, 'timefromtesttoartinitiation': timefromtesttoartinitiation, 'entrypoint': entrypoint, 'numberofcontacts': numberofcontacts, 'contactnumber': contactnumber, 'csex': csex, 'cage': cage, 'crelationship': crelationship, 'cmaritalstatus': cmaritalstatus, 'ctestperiod': ctestperiod, 'chivstatus': chivstatus, 'ctimefromtesttoart': ctimefromtesttoart}"
"class experimentalgroup(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Experimental group in a scientific study""
        self.valid_values = ""String with details about the experimental group""
        self.format = ""String may contain alphanumeric characters and special symbols""
        self.examples = ['yw/w; 1407/+ ', '3 an, 8 mfs', 'w/w ; UAS-Mito(119a) / +', '3 an, 7 mfs', 'yw/Y ; UAS-WT-Mito(119a)/ 1407-GAL4']
    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return str(val).strip()

class statisticalmeasure(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Statistical measure such as mean or SEM""
        self.valid_values = ""Only 'mean' or 'SEM' are valid values""
        self.format = ""String representing the statistical measure""
        self.examples = ['mean', 'SEM']
    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return str(val).strip()

class measurementvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Measurement value in a scientific study""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.examples = [0.69246660555060224, 6.9909408867304401E-2, 0.6407124011877533, 7.3946760646254217E-2, 1.75]
    def cast(self, val):
        if pd.isna(val):
            return val
        else:
            return float(val)

MAPPING = {'mf6': experimentalgroup, 'b': statisticalmeasure, 'c': measurementvalue, 'd': measurementvalue, 'e': measurementvalue, 
           'f': measurementvalue, 'mf12': experimentalgroup, 'i': statisticalmeasure, 'j': measurementvalue, 'k': measurementvalue, 
           'l': measurementvalue, 'm': measurementvalue}"
"class healthmeasure(NumericSemanticType):
    def __init__(self):
        self.description = ""Health measure related to a certain health aspect""
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = ""Health measure should be a floating point number ranging from 1 to 10""
        self.examples = [4.0, 5.0, 7.0, 6.0, 3.0]
    def cast(self, val):
        num = float(val)
        if 1 <= num <= 10:
            return num
        else:
            raise Exception('Invalid health measure')
            
class healthtype(NumericSemanticType):
    def __init__(self):
        self.description = ""Type related to a certain health aspect""
        self.valid_range = [15, 18]
        self.dtype = float
        self.format = ""Health type should be a floating point number ranging from 15 to 18""
        self.examples = [15.0, 15.5, 16.0, 16.5, 17.0]
    def cast(self, val):
        num = float(val)
        if 15 <= num <= 18:
            return num
        else:
            raise Exception('Invalid health type')
            
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a four digit integer ranging from 1900 to current year""
        self.examples = [1965, 1970, 1975, 1980, 1985]
    def cast(self, val):
        val = int(val)
        if 1900 <= val <= datetime.now().year:
            return val
        else:
            raise Exception('Invalid year')
            
class healthvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Value related to a certain health aspect""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Health value should be a floating point number ranging from 0 to 100""
        self.examples = [34.51, 32.54, 31.01, 29.53, 26.17]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid health value')

MAPPING = {'measure': healthmeasure, 'type': healthtype, 'year': year, 'value': healthvalue}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender should be a string that takes values either 'Male' or 'Female'""
        self.format = ""Either 'Male' or 'Female'""
        self.examples = ['Male', 'Female']
    def cast(self, val):
        return 'Male' if val == 1 else 'Female'

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score in a psychological test""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Score should be an integer number between 0 and 100""
        self.examples = [10, 23, 45, 67, 89]
    def cast(self, val):
        return min(max(0, int(val)), 100)

class logarithm(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithmic value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Logarithmic value should be a floating point number greater than or equal to 0""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        return max(0.0, float(val))

MAPPING = {'sex': gender, 'stai': score, 'cps': score, 'ewps': score, 'lnhf': logarithm, 'lnlfhf': logarithm, 'hfd': logarithm}"
"class caseid(NumericSemanticType):
    def __init__(self):
        self.description = ""Case ID number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Case ID should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the patient""
        self.valid_values = ""Can only be 1 or 2""
        self.format = ""Should be stored as integers""
        self.examples = [1, 1, 1, 1, 2]
    def cast(self, val):
        return int(val)
class ageinmonths(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of patient in months""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [6, 23, 19, 4, 3]
    def cast(self, val):
        return int(val)
class weightinkg(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weight of patient in kilograms""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number""
        self.unit = ""In kilograms""
        self.examples = [3.4, 15.2, 14.2, 3.0, 3.1]
    def cast(self, val):
        return float(val)
class ventricularseptaldefectdiameter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Diameter of ventricular septal defect""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Diameter should be a floating point number""
        self.unit = ""In centimeters""
        self.examples = [1.37, 0.75, 1.36, 1.0, 0.9]
    def cast(self, val):
        return float(val)
class pulmonaryhypertension(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Pulmonary hypertension of patient""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Pulmonary hypertension should be an integer""
        self.unit = ""In mmHg""
        self.examples = [23, 20, 19, 16, 17]
    def cast(self, val):
        return int(val)
class ejectionfraction(NumericSemanticType):
    def __init__(self):
        self.description = ""Ejection fraction of the heart""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Ejection fraction should be an integer""
        self.examples = [63, 65, 63, 63, 60]
    def cast(self, val):
        return int(val)
class whitebloodcellcount(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""White Blood Cell count of patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""WBC count should be a floating point number""
        self.unit = ""In units of 10^9/L""
        self.examples = [13.0, 9.7, 9.03, 15.0, 11.3]
    def cast(self, val):
        return float(val)
class redbloodcellcount(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Red Blood Cell count of patient""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RBC count should be a floating point number""
        self.unit = ""In units of 10^12/L""
        self.examples = [3.97, 4.0, 4.6, 3.67, 4.56]
    def cast(self, val):
        return float(val)
class hemoglobin(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Hemoglobin count in patient's blood""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Hemoglobin count should be an integer""
        self.unit = ""In g/L""
        self.examples = [105, 103, 143, 109, 129]
    def cast(self, val):
        return int(val)
class meanredcellvolume(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Mean Red Cell Volume in patient's blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""MCV should be a floating point number""
        self.unit = ""In femtoliters""
        self.examples = [78.8, 83.9, 81.2, 84.2, 78.7]
    def cast(self, val):
        return float(val)
class meanredcellhemoglobin(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Mean Red Cell Hemoglobin in patient's blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""MCH should be a floating point number""
        self.unit = ""In picograms""
        self.examples = [24.4, 27.8, 29.2, 29.7, 28.3]
    def cast(self, val):
        return float(val)
class lacticdehydrogenase(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Lactic Dehydrogenase level in patient's blood""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""LDH level should be a floating point number""
        self.unit = ""In IU/L""
        self.examples = [267.0, 277.0, 255.0, 304.8, 256.26]
    def cast(self, val):
        return float(val)

MAPPING = {
    'case': caseid,
    'm1f2': gender,
    'agemon': ageinmonths,
    'wtkg': weightinkg,
    'vsd': ventricularseptaldefectdiameter,
    'phmmhg': pulmonaryhypertension,
    'efpercent': ejectionfraction,
    'wbc': whitebloodcellcount,
    'rbc': redbloodcellcount,
    'hb': hemoglobin,
    'mcv': meanredcellvolume,
    'mch': meanredcellhemoglobin,
    'ldh': lacticdehydrogenase
}"
"class binaryoutcome(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception(""Invalid binary outcome value"")

class binaryinput(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception(""Invalid binary input value"")

MAPPING = {'i1': binaryinput, 'i2': binaryinput, 'i3': binaryinput, 'i4': binaryinput,
           'i5': binaryinput, 'i6': binaryinput, 'i7': binaryinput, 'i8': binaryinput,
           'i9': binaryinput, 'i10': binaryinput, 'i11': binaryinput, 'i12': binaryinput,
           'o1': binaryoutcome}"
"class deviceid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a device""
        self.valid_values = ""Device identifier should be a string that uniquely identifies a device""
        self.format = ""Device identifier should be a string of alphanumeric characters""
        self.examples = ['ref', 'C10', 'C11', 'C12', 'C13']
    def cast(self, val):
        return str(val)

class accelerometeraxis(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Axis of an accelerometer reading""
        self.valid_values = ""Axis should be one of ['x', 'y', 'z']""
        self.format = ""Axis should be a single lowercase character""
        self.examples = ['x', 'y', 'z']
    def cast(self, val):
        return str(val).lower()

class runid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a run""
        self.valid_range = [1.0, float('inf')]
        self.dtype = int
        self.format = ""Run identifier should be a positive integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return int(val)

class acceleration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Acceleration reading from an accelerometer""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Acceleration should be a positive floating point number""
        self.unit = 'In g' 
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return round(float(val), 2)

class frequency(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Frequency reading from an accelerometer""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Frequency should be a floating point number""
        self.unit = 'In Hz' 
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return round(float(val), 2)

class powerlevel(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Power level reading from an accelerometer""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Power level should be a positive floating point number""
        self.unit = 'In dBm' 
        self.examples = [10.0, 20.0, 30.0, 40.0, 50.0]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {'device': deviceid, 'axis': accelerometeraxis, 'run': runid, 'accelerationg': acceleration, 
           'fpeak': frequency, 'fvalley': frequency, 'speak': frequency, 'svalley': frequency, 
           'uppeak': frequency, 'upvalley': frequency, 'catapultpl': powerlevel, 'calculatedpl': powerlevel}"
"class vaccinatedcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of vaccinated individuals""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of vaccinated individuals should be a float""
        self.examples: list[float] = [2.68, 3.78, 3.58, 3.00, 2.81]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class citypoliocases(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of polio cases in a city""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of polio cases in a city should be a float""
        self.examples: list[float] = [10.41, 10.73, 10.92, 10.66, 9.91]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)
        
MAPPING = {
    'vaccinated': vaccinatedcount, 
    'rahat': citypoliocases,
    'beersheva': citypoliocases,
    'ramle': citypoliocases,
    'lod': citypoliocases,
    'kseife': citypoliocases,
    'jaljulia': citypoliocases,
    'telsheva': citypoliocases
}"
"class intersectionid(NumericSemanticType):
    def __init__(self):
        self.description = ""The id of an intersection""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Intersection id should be formatted as a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise ValueError('Intersection id must be a positive integer')
        return num
class streetaddress(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Street Address""
        self.valid_values = ""Street address should be a string""
        self.format = ""The string should not contain any special characters other than spaces and alphanumeric characters""
        self.examples = ['100th Ave †', '102nd Ave †', '100th Ave NE †', '102nd Ave NE †', 'Bellevue Wy NE †']
    def cast(self, val):
        address = str(val).replace('†', '').strip()
        if not re.match(""^[A-Za-z0-9 ]+$"", address):
            raise ValueError('Street address must only contain alphanumeric characters and spaces')
        return address
MAPPING = {'int': intersectionid, 'nsaddress': streetaddress, 'ewaddress': streetaddress}"
"class participantnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Participant's unique identification number""
        self.valid_range = [101, 152]
        self.dtype = int
        self.format = ""Participant number should be a whole number without any decimal places""
        self.examples = [101, 102, 103, 104, 106]
    def cast(self, val):
        return int(val)
    
class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of participant""
        self.valid_range = [18, 72]
        self.dtype = int
        self.format = ""Age should be a whole number without any decimal places""
        self.examples = [37, 38, 36, 69, 28]
    def cast(self, val):
        return int(val)

class eyewear(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of corrective eyewear used while driving""
        self.valid_values = ""Valid values are: 'None', 'Glasses or Contacts', 'Contacts'""
        self.format = ""Value should be a string representing one of the valid eyewear types""
        self.examples = ['None', 'Glasses or Contacts', 'Contacts']
    def cast(self, val):
        return str(val)
    
class biketrip(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of trips taken when riding a bicycle""
        self.valid_values = ""Value should be a string representing one or more trip types""
        self.format = ""Value should be a string of trip types separated by commas""
        self.examples = ['Exercise,Recreation,Commuting (i.e., traveling to/from work)', 'Recreation', 'Exercise,Recreation']
    def cast(self, val):
        return str(val)
    
class bikemiles(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Average miles ridden on bike per week""
        self.valid_values = ""Valid values are: '5-10 miles', '1-5 miles', '10-20 miles', 'Less than 1 mile', '20-50 miles', 'Never'""
        self.format = ""Value should be a string representing one of the valid mileage ranges""
        self.examples = ['5-10 miles', '1-5 miles', '10-20 miles']
    def cast(self, val):
        return str(val)
    
class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participant's gender""
        self.valid_values = ""Valid values are: 'Female', 'Male'""
        self.format = ""Value should be a string representing one of the valid genders""
        self.examples = ['Female', 'Male']
    def cast(self, val):
        return str(val)

class race(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participant's race""
        self.valid_values = ""Valid values are: 'White or Caucasian', 'Asian', 'Hispanic or Latino/a', 'Other', 'Black or African American'""
        self.format = ""Value should be a string representing one of the valid races""
        self.examples = ['White or Caucasian', 'Asian', 'Hispanic or Latino/a']
    def cast(self, val):
        return str(val)
    
class income(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participant's annual household income""
        self.valid_values = ""Valid values are: '$25,000 to less than $50,000', '$75,000 to less than $100,000', 'Less than $25,000', '$50,000 to less than $75,000', '$100,000 to less than $200,000'""
        self.format = ""Value should be a string representing one of the valid income ranges""
        self.examples = ['$25,000 to less than $50,000', '$75,000 to less than $100,000', 'Less than $25,000']
    def cast(self, val):
        return str(val)
    
class education(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participant's highest level of education completed""
        self.valid_values = ""Valid values are: 'Master's degree', 'Four Year degree', 'Some college', 'PhD Degree', 'High School diploma or GED'""
        self.format = ""Value should be a string representing one of the valid education levels""
        self.examples = [""Master's degree"", 'Four Year degree', 'Some college']
    def cast(self, val):
        return str(val)

class tracklayout(NumericSemanticType):
    def __init__(self):
        self.description = ""Track layout""
        self.valid_range = [12435, 54321]
        self.dtype = int
        self.format = ""Track layout should be a whole number without any decimal places""
        self.examples = [24531, 43521, 15423, 53142, 35124]
    def cast(self, val):
        return int(val)

class hasridden(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No', 'Unsure']
    def cast(self, val):
        return str(val)

class levelofauthenticity(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of authenticity in simulated environment (on a scale of 0-100)""
        self.valid_range = [33, 100]
        self.dtype = int
        self.format = ""Level of authenticity should be a whole number without any decimal places""
        self.examples = [69, 80, 75, 90, 45]
    def cast(self, val):
        return int(val)

class levelofcomfort(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of comfort when encountering certain scenarios (on a scale of 0-100)""
        self.valid_range = [5, 100]
        self.dtype = int
        self.format = ""Level of comfort should be a whole number without any decimal places""
        self.examples = [79, 25, 100, 76, 40]
    def cast(self, val):
        return int(val)

MAPPING = {'participantnumber': participantnumber, 'age': age, 'whatifanycorrectiveeyeweardoyouwearwhiledriving': eyewear,
           'whattypeoftripsdoyoutakewhenridingyourbicyclecheckallthatapply': biketrip, 'onaveragehowmanymilesdoyourideonyourbikeaweek': bikemiles,
           'whatbestdescribesyourgenderselectedchoice': gender, 'whatracedoyouconsideryourself': race, 'whatisyourannualhouseholdincome': income,
           'whatisthehighestlevelofeducationyouhavecompleted': education, 'tracklayout': tracklayout, 'haveyoueverrodeonaenvironmentsimilartotheoneintheexperiment': hasridden,
           'howsimilardidthisexperimentfeeltoridinginarealworldenvironmentlevelofauthenticity': levelofauthenticity, 'beforethisexperimenthaveyoueverrodeinabikelanebeforethathadcommercialvehicleconflictsinvolvedegdelivertrucksinthebikelanepresenceofdelivercouriers': hasridden,
           'howcomfortabledidyoufeelwhileridinginthebikelanewithcommercialvehicleconflictsoccurringlevelofcomfort': levelofcomfort, 'beforethisexperimenthaveyouevercomeuponanobstructionwhileridinginabikelanesomethingblockingthebikelanedoesnothavetobeacommercialvehicle': hasridden,
           'howcomfortabledidyoufeelavoidingobstructionsinthebikelanelevelofcomfort': levelofcomfort, 'basedonyourexperienceavoidingobstructionsinthebikelaneintherealworlddidyoumakeasimilaractiontoavoidthehazardinthesimulator': hasridden}"
"class topicid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for a Topic""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Topic IDs should be non-negative integers""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        if val < 0 or not isinstance(val, int):
            raise Exception('Invalid topic id')
        else:
            return int(val)

class topicdistribution(NumericSemanticType):
    def __init__(self):
        self.description = ""Distribution of a Topic""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Topic distributions should be floating point numbers between 0 and 1""
        self.examples = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        if val < 0 or val > 1 or not isinstance(val, float):
            raise Exception('Invalid topic distribution')
        else:
            return round(float(val), 3)

class wordincomputer(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Word in Computer Science Topic""
        self.valid_values = ""Words should be any string of characters excluding special characters""
        self.format = ""Words should be all lowercase""
        self.examples = ['data', 'inform', 'user', 'databas', 'use']
    def cast(self, val):
        return re.sub(r'\W+', '', str(val)).lower()

MAPPING = {'idtopic': topicid, 'distributiontopics': topicdistribution, 'word': wordincomputer}"
"class arrivalrate(NumericSemanticType):
    def __init__(self):
        self.description = ""The rate at which something occurs or is repeated over a particular period of time""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Arrival rate should be a non-negative floating point number""
        self.examples = [10.0, 20.5, 100.0, 200.5, 1000.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid arrival rate')
        return num

class congestion(NumericSemanticType):
    def __init__(self):
        self.description = ""The level of congestion in a given area""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Congestion level should be a floating point number between 0 and 1""
        self.examples = [0.0, 0.25, 0.5, 0.75, 1.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid congestion level')
        return num

class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be a non-negative integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid ID')
        return num

class replication(NumericSemanticType):
    def __init__(self):
        self.description = ""Replication number for a given simulation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Replication should be an integer""
        self.examples = [-10, -5, 0, 5, 10]
    def cast(self, val):
        return int(val)

class rercapacity(NumericSemanticType):
    def __init__(self):
        self.description = ""Capacity of RER (Réseau Express Régional), a hybrid suburban commuter/rapid transit system""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RER capacity should be a non-negative floating point number""
        self.examples = [10.0, 20.5, 100.0, 200.5, 1000.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid RER capacity')
        return num

class rerinterval(NumericSemanticType):
    def __init__(self):
        self.description = ""Interval between two RERs (Réseau Express Régional), a hybrid suburban commuter/rapid transit system""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RER interval should be a non-negative floating point number""
        self.examples = [6.0, 7.0, 8.0, 9.0, 10.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid RER interval')
        return num

class averagetraveltime(NumericSemanticType):
    def __init__(self):
        self.description = ""The average time taken to travel between two points""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Average travel time should be a non-negative floating point number""
        self.examples = [24.88, 25.97, 26.83, 27.38, 29.22]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid average travel time')
        return num

class averagewaitingusers(NumericSemanticType):
    def __init__(self):
        self.description = ""The average number of users waiting""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Average waiting users should be a non-negative floating point number""
        self.examples = [91.82, 160.08, 497.91, 2451.11, 10263.02]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid average waiting users')
        return num

class totalarrivedusers(NumericSemanticType):
    def __init__(self):
        self.description = ""The total number of users that have arrived""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total arrived users should be a non-negative floating point number""
        self.examples = [9846.0, 22920.0, 25757.0, 26204.25, 26883.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid total arrived users')
        return num

class totaldivertedusers(NumericSemanticType):
    def __init__(self):
        self.description = ""The total number of users that have been diverted""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total diverted users should be a non-negative floating point number""
        self.examples = [2375.0, 19445.25, 23266.5, 23804.0, 24324.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid total diverted users')
        return num

MAPPING = {
    'arrivalrate': arrivalrate, 
    'averagecongestion': congestion, 
    'averagecongestionother0': congestion, 
    'averagecongestionother1': congestion, 
    'averagecongestionother2': congestion, 
    'averagecongestionother3': congestion, 
    'averagecongestionother4': congestion, 
    'averagecongestionrer': congestion, 
    'averagemodeshareother0': congestion, 
    'averagemodeshareother1': congestion, 
    'averagemodeshareother2': congestion, 
    'averagemodeshareother3': congestion, 
    'averagemodeshareother4': congestion, 
    'averagemodesharerer': congestion, 
    'averagetraveltime': averagetraveltime, 
    'averagewaitingusers': averagewaitingusers, 
    'id': id, 
    'replication': replication, 
    'rercapacity': rercapacity, 
    'rerinterval': rerinterval, 
    'totalarrivedusers': totalarrivedusers, 
    'totaldivertedusers': totaldivertedusers
}"
"class batchnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Batch Number""
        self.valid_range = [1, 14]
        self.dtype = int
        self.format = ""Batch number should be an integer between 1 and 14""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 14:
            return num
        else:
            raise Exception('Invalid batch number')

class testnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Test Number""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Test number should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 4:
            return num
        else:
            raise Exception('Invalid test number')

class materialtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Material""
        self.valid_values = [""Weldox 1300 "", ""Domex 700 "", ""AISI 316L""]
        self.format = ""Material type should be a string representing the type of material""
        self.examples = [""Weldox 1300 "", ""Domex 700 "", ""AISI 316L""]
    def cast(self, val):
        string = str(val).strip()
        if string in self.valid_values:
            return string
        else:
            raise Exception('Invalid material type')

class thicknessmm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Thickness in Millimeters""
        self.valid_range = [3.98, 5.99]
        self.dtype = float
        self.format = ""Thickness should be a float representing the thickness in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [3.98, 4.03, 5.045, 5.99]
    def cast(self, val):
        num = float(val)
        if num >= 3.98 and num <= 5.99:
            return num
        else:
            raise Exception('Invalid thickness')

class punchmm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Punch in Millimeters""
        self.valid_range = [10, 40]
        self.dtype = float
        self.format = ""Punch should be a float representing the punch in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [10, 20, 40]
    def cast(self, val):
        num = float(val)
        if num >= 10 and num <= 40:
            return num
        else:
            raise Exception('Invalid punch')

class diemm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Die in Millimeters""
        self.valid_range = [40, 80]
        self.dtype = float
        self.format = ""Die should be a float representing the die in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [40, 60, 70, 80]
    def cast(self, val):
        num = float(val)
        if num >= 40 and num <= 80:
            return num
        else:
            raise Exception('Invalid die')

class contactpointsmm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Contact Points in Millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Contact points should be a float representing the contact points in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid contact points')

class slidingmm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Sliding in Millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Sliding should be a float representing the sliding in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid sliding')

class bamm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""BA in Millimeters""
        self.valid_range = [-21.85, 0.55]
        self.dtype = float
        self.format = ""BA should be a float representing the BA in millimeters""
        self.unit = ""In Millimeters"" 
        self.examples = [-21.85, -10, 0, 0.55]
    def cast(self, val):
        num = float(val)
        if num >= -21.85 and num <= 0.55:
            return num
        else:
            raise Exception('Invalid BA')

class angle(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Angle in Degrees""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Angle should be a float representing the angle in degrees""
        self.unit = ""In Degrees"" 
        self.examples = [0, 45, 90, 135, 180]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid angle')

class forceknm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Force in Kilo Newton Meters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Force should be a float representing the force in kilo newton meters""
        self.unit = ""In Kilo Newton Meters"" 
        self.examples = [0, 500, 1000, 1500, 2000]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid force')

MAPPING = {
    'batch': batchnumber,
    'test': testnumber,
    'material': materialtype,
    'thmm': thicknessmm,
    'punchmm': punchmm,
    'diemm': diemm,
    'contactpointsmm': contactpointsmm,
    'slidingmm': slidingmm,
    'ba': angle,
    'pa': angle,
    'sb': angle,
    'forceknm': forceknm,
    'bamm': bamm
}"
"class timeinseconds(NumericSemanticType):
    def __init__(self):
        self.description = ""Time in seconds""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be represented as a floating point number in seconds""
        self.examples = [60.04, 120.04, 180.04, 240.04, 300.04]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid time value')
        return num

class current(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Current in Amperes""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Current should be represented as a floating point number in Amperes""
        self.unit = 'In Amperes'
        self.examples = [0.0, 0.25286, 0.50076, 0.75088, 0.99971]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid current value')
        return num

class power(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Power in Watts""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Power should be represented as a floating point number in Watts""
        self.unit = 'In Watts'
        self.examples = [0.0, 0.18871, 0.35331, 0.50332, 0.63947]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid power value')
        return num

class voltage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Voltage in Volts""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Voltage should be represented as a floating point number in Volts""
        self.unit = 'In Volts'
        self.examples = [0.79715, 0.74628, 0.70555, 0.67031, 0.63965]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid voltage value')
        return num

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature in Celsius""
        self.valid_range = [-273.15, float('inf')] # Below absolute zero is impossible
        self.dtype = float
        self.format = ""Temperature should be represented as a floating point number in Celsius""
        self.unit = 'In Celsius'
        self.examples = [80.0, 40.0]
    def cast(self, val):
        num = float(val)
        if num < -273.15:
            raise Exception('Invalid temperature value')
        return num

class flowrate(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Flow rate in Litres per minute""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Flow rate should be represented as a floating point number in Litres per minute""
        self.unit = 'In Litres per minute'
        self.examples = [0.046985, 0.047651, 0.071626, 0.086969, 0.10166]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid flow rate value')
        return num

MAPPING = {'timesec': timeinseconds, 'ia': current, 'imacm²': current, 'pwatts': power, 'pmwcm²': power, 'voltagev': voltage, 'tcellc': temperature, 'tanodec': temperature, 'tcathodec': temperature, 'flowanodelmin': flowrate, 'flowcathodelmin': flowrate}"
"class intersectionid(NumericSemanticType):
    def __init__(self):
        self.description = ""Intersection ID""
        self.valid_range = [1, 35]
        self.dtype = int
        self.format = ""Intersection ID should be an integer between 1 and 35""
        self.examples: list = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class vehiclecount(NumericSemanticType):
    def __init__(self):
        self.description = ""Vehicle Count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Vehicle count should be a floating point number greater than or equal to 0""
        self.examples: list = [10.5, 1.3, 10000.0, 0.9, 1000000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)
MAPPING = {
    'int': intersectionid, 
    'nbl': vehiclecount,
    'nbt': vehiclecount,
    'nbr': vehiclecount,
    'sbl': vehiclecount,
    'sbt': vehiclecount,
    'sbr': vehiclecount,
    'ebl': vehiclecount,
    'ebt': vehiclecount,
    'ebr': vehiclecount,
    'wbl': vehiclecount,
    'wbt': vehiclecount,
    'wbr': vehiclecount,
}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""The only valid values are 'Male' and 'Female'""
        self.format = ""The gender should be represented as strings""
        self.examples = ['Male', 'Female']
    def cast(self, val):
        return str(val).title()

class agegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age group of a person""
        self.valid_values = ""Valid values include: 'Below 20', 'Between 21-25', 'Between 31-35', 'Between 36-40', 'Above 41'""
        self.format = ""The age group should be represented as strings""
        self.examples = ['Below 20', 'Between 21-25', 'Between 31-35', 'Between 36-40', 'Above 41']
    def cast(self, val):
        return str(val)

class language(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Language spoken by a person""
        self.valid_values = ""Language should be a valid language name""
        self.format = ""The language should be represented as a string""
        self.examples = ['Yoruba', 'English', 'Hausa']
    def cast(self, val):
        return str(val)

class fluency(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Fluency level in a language""
        self.valid_values = ""Fluency level should be 'Good', 'Poor', or 'Average'""
        self.format = ""The fluency level should be represented as strings""
        self.examples = ['Good', 'Poor', 'Average']
    def cast(self, val):
        return str(val)

class educationlevel(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Level of education of a person""
        self.valid_values = ""Education level should be 'Bachelor Degree', 'Master', 'Undergraduate', or 'PhD'""
        self.format = ""The education level should be represented as strings""
        self.examples = ['Bachelor Degree', 'Master', 'Undergraduate', 'PhD']
    def cast(self, val):
        return str(val)

class translationaccuracy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Correct', 'Wrong']
    def cast(self, val):
        return str(val)

class appratings(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating for different aspects of an app""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Rating should be a floating point number between 1 and 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < 1 or num > 5:
            raise Exception('Invalid rating')
        return round(num, 1)
        
MAPPING = {
    'gender': gender,
    'age': agegroup,
    'naïvelanguage': language,
    'fluencyofnativelanguage': fluency,
    'levelofeducation': educationlevel,
    'translation1': translationaccuracy,
    'translation2': translationaccuracy,
    'translation3': translationaccuracy,
    'translation4': translationaccuracy,
    'translation5': translationaccuracy,
    'translation6': translationaccuracy,
    'translation7': translationaccuracy,
    'translation8': translationaccuracy,
    'translation9': translationaccuracy,
    'translation10': translationaccuracy,
    'appinterfaceiscleanandintuitive': appratings,
    'theappiseasytouse': appratings,
    'interactiondesignisveryappealing': appratings,
    'thetranslationsareaccurate': appratings,
    'wordforwordtranslationisaccurate': appratings,
    'sentencesyntaxareaccurate': appratings,
    'appcanbeusedbyanonyorubaspeakertosendmessages': appratings,
    'appwouldincreaseinterestinthelanguage': appratings,
    'speechoftranslatedlanguageisveryuseful': appratings
}"
"class dialogueactlabel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Dialogue Act Label""
        self.valid_values = ""Dialogue Act Labels are a small set of classes that categorize a speaker's intention in communication. In this context, they must be one of the following: 'neutral_talk', 'negative_talk', 'reflection', 'command', 'behavior_description', 'labelled_praise'""
        self.format = ""Dialogue Act Labels should be a string, all lowercase, words separated by underscores""
        self.examples = ['neutral_talk', 'negative_talk', 'reflection', 'command', 'behavior_description', 'labelled_praise']
    def cast(self, val):
        return val.lower().replace("" "", ""_"")

class talk(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Talk""
        self.valid_values = ""Talk is a string that represents spoken language. It can be any string of words.""
        self.format = ""Talk should be a string, all lowercase, words separated by spaces""
        self.examples = ['yeah', 'no', 'there', 'okay', 'yes', 'i found the hat for potato head']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).lower()

MAPPING = {'label': dialogueactlabel, 'childtalk': talk, 'parenttalk': talk}"
"class journalname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Journal""
        self.valid_values = ""Name should be a string that is of the form 'journal name.  year'""
        self.format = ""Only the first letter of each word in the journal name should be capitalized, followed by year""
        self.examples = ['J Cataract Refract Surg.  2011', 'Patient Educ Couns.  2011', 'J Periodontol.  2011', 'J Oral Maxillofac Surg.  2011', 'Trials.  2011']
    def cast(self, val):
        return str(val).title()

class openaccessstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Open Access status of a Journal""
        self.valid_values = ""Should be either 'OA' for Open Access or 'NOA' for Not Open Access""
        self.format = ""Should be either 'OA' or 'NOA'""
        self.examples = ['OA', 'NOA', 'NOA', 'NOA', 'OA']
    def cast(self, val):
        if str(val) == 'OA' or str(val) == 'NOA':
            return str(val)
        else:
            raise Exception('Invalid Open Access status')
            
class binarystatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if int(val) == 0 or int(val) == 1:
            return int(val)
        else:
            raise Exception('Invalid binary status')

class impactfactor(NumericSemanticType):
    def __init__(self):
        self.description = ""The impact factor of a journal""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Impact factor should be formatted as a floating point number with three decimal places""
        self.examples = [2.264, 2.305, 2.602, 1.64, 2.496]
    def cast(self, val):
        num = float(val)
        return round(num, 3)
        
class citations(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of citations a journal has""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of citations should be a positive integer or zero""
        self.examples = [10, 31, 20, 10, 20]
    def cast(self, val):
        num = int(val)
        return num

MAPPING = {'journal': journalname, 'oanoa': openaccessstatus, 'oa1noa0': binarystatus, 'jif2011': impactfactor, 'ifwsc': impactfactor, 'numberofcitations': citations}"
"class idtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Unique identifier or type of location""
        self.valid_values = ""Includes unique ids and common location names like 'Bus', 'Home', 'Sidewalk'""
        self.format = ""Unique ids are usually strings prefixed with 'id', location names are capitalized""
        self.examples = ['id150', 'Bus', 'Home', 'Sidewalk', 'id200']
    def cast(self, val):
        if str(val).startswith('id'):
            return str(val)
        else:
            return str(val).capitalize()

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""A percentage value representing a quantity""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Represented as a floating point number, ranging from 0 to 100""
        self.examples = [10.0, 43.18880854028059, 60.32398911843382, 70.0, 80.0]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return round(num, 2)
        else:
            return float('nan')

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature reading""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Represented as a floating point number""
        self.unit = ""Degrees Celsius""
        self.examples = [40.0, 50.0, 60.0, 52.93362515336296, 47.1420358482049]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {'id': idtype, 'availabletime': percentage, 'computingcapabilities': percentage, 'distraction': percentage, 
           'emotionalstate': percentage, 'illuminance': percentage, 'internetspeed': percentage, 'mapuseexperience': percentage, 
           'rain': percentage, 'temperature': temperature}"
"class mpgindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [-1, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid mpgindicator value')

class cylinderscount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of cylinders in a car""
        self.valid_range = [3, 8]
        self.dtype = int
        self.format = ""Cylinder count should be an integer""
        self.examples = [3, 4, 6, 8]
    def cast(self, val):
        num = int(val)
        if num in range(self.valid_range[0], self.valid_range[1]+1):
            return num
        else:
            raise Exception('Invalid cylinders count')

class displacementvolume(NumericSemanticType):
    def __init__(self):
        self.description = ""Displacement volume of a car in cubic inches""
        self.valid_range = [68, 455]
        self.dtype = float
        self.format = ""Displacement volume should be a floating point number""
        self.examples = [68.0, 100.0, 200.0, 300.0, 455.0]
    def cast(self, val):
        num = float(val)
        if num in np.arange(self.valid_range[0], self.valid_range[1]+1, 0.1):
            return num
        else:
            raise Exception('Invalid displacement volume')

class horsepower(NumericSemanticType):
    def __init__(self):
        self.description = ""Horsepower of a car""
        self.valid_range = [46, 230]
        self.dtype = int
        self.format = ""Horsepower should be an integer""
        self.examples = [46, 75, 100, 150, 230]
    def cast(self, val):
        num = int(val)
        if num in range(self.valid_range[0], self.valid_range[1]+1):
            return num
        else:
            raise Exception('Invalid horsepower')

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight of a car in pounds""
        self.valid_range = [1613, 5140]
        self.dtype = int
        self.format = ""Weight should be an integer""
        self.examples = [1613, 2000, 3000, 4000, 5140]
    def cast(self, val):
        num = int(val)
        if num in range(self.valid_range[0], self.valid_range[1]+1):
            return num
        else:
            raise Exception('Invalid weight')

class acceleration(NumericSemanticType):
    def __init__(self):
        self.description = ""Acceleration of a car""
        self.valid_range = [8.0, 24.8]
        self.dtype = float
        self.format = ""Acceleration should be a floating point number""
        self.examples = [8.0, 10.0, 15.0, 20.0, 24.8]
    def cast(self, val):
        num = float(val)
        if num in np.arange(self.valid_range[0], self.valid_range[1]+1, 0.1):
            return num
        else:
            raise Exception('Invalid acceleration')

class modelyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of car model""
        self.valid_range = [70, 82]
        self.dtype = int
        self.format = ""Model year should be an integer""
        self.examples = [70, 72, 75, 78, 82]
    def cast(self, val):
        num = int(val)
        if num in range(self.valid_range[0], self.valid_range[1]+1):
            return num
        else:
            raise Exception('Invalid model year')

class originjapanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid originjapanindicator value')

MAPPING = {'mpggtr28': mpgindicator, 'cylinders': cylinderscount, 'displacement': displacementvolume, 'horsepower': horsepower, 'weight': weight, 'acceleration': acceleration, 'modelyear': modelyear, 'originjapan': originjapanindicator}"
"class webdomain(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Web domain name""
        self.valid_values = ""Domain names must be strings, usually of the form 'subdomain.domain.tld'""
        self.format = ""Domain names are typically lower-case, may include numbers and hyphens, and are separated by periods""
        self.examples = ['bitly.com', 'youtube.com', 'instagram.com', 'facebook.com', 'ow.ly']
    def cast(self, val):
        return str(val).lower()

class biascore(NumericSemanticType):
    def __init__(self):
        self.description = ""Bias score""
        self.valid_range = [-1.0, 1.0] 
        self.dtype = float
        self.format = ""Bias score should be a floating point number between -1.0 (extreme left bias) to 1.0 (extreme right bias)""
        self.examples = [-0.351, -0.022, 0.22, 0.9838, -1.0]
    def cast(self, val):
        num = float(val)
        if self.valid_range[0] <= num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid bias score')

MAPPING = {
    'domain': webdomain, 
    'score': biascore, 
    'fbscore': biascore, 
    'mturkscore': biascore, 
    'budakscore': biascore, 
    'allsidesscore': biascore, 
    'allsidesscorecommunity': biascore, 
    'pewscore': biascore
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Name should be a string that is a valid country name""
        self.format = ""Country name should be the full name, capitalized""
        self.examples = ['United States', 'United Kingdom', 'Canada', 'India', 'Australia']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

MAPPING = {'loyola2014': countryname, 'loyola2015': countryname, 'depaul': countryname, 'iwu': countryname, 'butler': countryname, 'marquette': countryname, 'sunybrockport': countryname, 'universityofmontanamissoula': countryname, 'universityofnebraska': countryname, 'washingtonuniversity': countryname}"
"class studentgender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F']
    def cast(self, val):
        return str(val).upper()

class studentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Student age in years""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [15, 17, 19, 21, 25]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid age')
        return num

class examgrades(NumericSemanticType):
    def __init__(self):
        self.description = ""Exam grades""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Grade should be a float within 0-100 range""
        self.examples = [50.0, 70.0, 80.0, 90.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid grade')
        return round(num, 2)

class educationlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education level""
        self.valid_values = ""Should be one of ['No Education', 'High School', 'Diploma', 'Degree', 'Masters']""
        self.format = ""Education level should be a string""
        self.examples = ['No Education', 'High School', 'Diploma', 'Degree', 'Masters']
    def cast(self, val):
        val = str(val)
        if val not in self.examples:
            raise Exception('Invalid education level')
        return val.title()

class incomelevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Income level""
        self.valid_values = ""Should be one of ['Less Than 5000', '5000-10000', '10000-20000', 'More Than 20000']""
        self.format = ""Income level should be a string""
        self.examples = ['Less Than 5000', '5000-10000', '10000-20000', 'More Than 20000']
    def cast(self, val):
        val = str(val)
        if val not in self.examples:
            raise Exception('Invalid income level')
        return val

class performancecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Performance Category""
        self.valid_values = ""Should be one of ['Good', 'Very Good', 'Excellent', 'Satisfactory']""
        self.format = ""Performance category should be a string""
        self.examples = ['Good', 'Very Good', 'Excellent', 'Satisfactory']
    def cast(self, val):
        val = str(val)
        if val not in self.examples:
            raise Exception('Invalid performance category')
        return val.title()

MAPPING = {'sex': studentgender, 'age': studentage, 'eng1': examgrades, 'math1': examgrades, 'phy1': examgrades, 'chem1': examgrades, 'bio1': examgrades, 'eng2': examgrades, 'math2': examgrades, 'phy2': examgrades, 'chem2': examgrades, 'bio2': examgrades, 'q1': performancecategory, 'q3': incomelevel, 'q4': educationlevel, 'eng3': examgrades, 'math3': examgrades, 'phy3': examgrades, 'chem3': examgrades, 'bio3': examgrades}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A calendar year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a full 4-digit integer (e.g., 1980, 2021)""
        self.examples = [2000, 2010, 2020, 2030, 2040]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class month(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A calendar month""
        self.valid_values = ""A string representation of an integer between 1 and 12 (inclusive)""
        self.format = ""Month should be formatted as a 1 or 2-digit integer (e.g., '1', '12')""
        self.examples = ['1', '2', '3', '4', '12']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

class journalcount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of journals deposited""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val.strip())

class articlecount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of articles deposited""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [100, 200, 300, 400, 500]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class visitorcount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of visitors""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [100, 200, 300, 400, 500]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class countrycount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of different countries of the visitors""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [50, 100, 150, 200, 250]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class pageviewcount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of page views""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [1000, 2000, 3000, 4000, 5000]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {'year': year, 'month': month, 'numberofdepositedjournals': journalcount, 'numberofdepositedarticles': articlecount,
           'numberofvisitors': visitorcount, 'numberofcountriesofvisitors': countrycount, 'numberofpageview': pageviewcount}"
"class malignancy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [-1, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid malignancy value')

class cellfeature(NumericSemanticType):
    def __init__(self):
        self.description = ""Cell feature in cancer diagnostic""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Cell feature should be an integer between 1 and 10""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid cell feature value')
        return val

MAPPING = {'malig': malignancy, 
           'clumpthick': cellfeature, 
           'uniformcellsize': cellfeature, 
           'uniformcellshape': cellfeature, 
           'marginaladhes': cellfeature, 
           'epitsize': cellfeature, 
           'barenuclei': cellfeature, 
           'blandchrom': cellfeature, 
           'normnucleoli': cellfeature, 
           'mitoses': cellfeature}"
"class sequence(NumericSemanticType):
    def __init__(self):
        self.description = ""A sequence of unique integers""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Sequence should be formatted as an integer with no decimal places""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)
    
class placeid(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifier for a place""
        self.valid_range = [100, 815]
        self.dtype = int
        self.format = ""Place ID should be formatted as an integer with no decimal places""
        self.examples = [256, 431, 700, 671, 166]
    def cast(self, val):
        return int(val)

class legid(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifier for a leg of the journey""
        self.valid_range = [1, 14661]
        self.dtype = int
        self.format = ""Leg ID should be formatted as an integer with no decimal places""
        self.examples = [5182, 6523, 5878, 1275, 8117]
    def cast(self, val):
        return int(val)

class distance(NumericSemanticType):
    def __init__(self):
        self.description = ""Distance traveled""
        self.valid_range = [5, float('inf')]
        self.dtype = int
        self.format = ""Distance should be formatted as an integer with no decimal places""
        self.examples = [199, 844, 4380, 759, 1597]
    def cast(self, val):
        return int(val)

class time(NumericSemanticType):
    def __init__(self):
        self.description = ""Time taken""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Time should be formatted as an integer with no decimal places""
        self.examples = [215, 297, 280, 777, 241]
    def cast(self, val):
        return int(val)

class numhops(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of hops""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Number of hops should be formatted as an integer with no decimal places""
        self.examples = [1, 1, 1, 2, 2]
    def cast(self, val):
        return int(val)

class numlegs(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of legs""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Number of legs should be formatted as an integer with no decimal places""
        self.examples = [2, 2, 1, 1, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'nr': sequence, 'i1legid': legid, 'i1rcsp': distance, 'i1rcse': distance, 'i1dep1p': time, 'i1dep1e': time, 'i1dep1place': placeid, 'i1rcf1p': time, 'i1rcf1e': time, 'i1rcf1place': placeid, 'i1dlvp': time, 'i1dlve': time, 'i1hops': numhops, 'olegid': legid, 'orcsp': distance, 'orcse': distance, 'odep1p': time, 'odep1e': time, 'odep1place': placeid, 'orcf1p': time, 'orcf1e': time, 'orcf1place': placeid, 'odlvp': time, 'odlve': time, 'ohops': numhops, 'legs': numlegs}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender values can be 'M' for male or 'F' for female""
        self.format = ""Gender should be represented as a single character string, 'M' or 'F'""
        self.examples = ['M', 'F', 'M', 'F', 'M']
    def cast(self, val):
        return str(val).upper()

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class replies(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of replies""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class nonreplies(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of non-replies""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class replied(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        return str(val).capitalize()

MAPPING = {'gender': gender, 'count': count, 'replies': replies, 'nonreplies': nonreplies, 'replied': replied}"
"class acceptabilityscore(NumericSemanticType):
    def __init__(self):
        self.description = ""A score representing the acceptability of a car""
        self.valid_range = [-1, 1]
        self.dtype = int
        self.format = ""The score should be -1, 0 or 1""
        self.examples = [-1, 0, 1, 1, -1]
    def cast(self, val):
        val = int(val)
        if val in [-1, 0, 1]:
            return val
        else:
            raise Exception('Invalid acceptability score')
            
class pricecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""A category representing the price of a car""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""The category should be one of 0, 1, 2, or 3""
        self.examples = [0, 1, 2, 3, 0]
    def cast(self, val):
        val = int(val)
        if val in [0, 1, 2, 3]:
            return val
        else:
            raise Exception('Invalid price category')
            
class maintenancecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""A category representing the maintenance cost of a car""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""The category should be one of 0, 1, 2, or 3""
        self.examples = [0, 1, 2, 3, 0]
    def cast(self, val):
        val = int(val)
        if val in [0, 1, 2, 3]:
            return val
        else:
            raise Exception('Invalid maintenance category')

class doorsnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of doors in a car""
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = ""The number should be one of 2, 3, 4, or 5""
        self.examples = [2, 3, 4, 5, 2]
    def cast(self, val):
        val = int(val)
        if val in [2, 3, 4, 5]:
            return val
        else:
            raise Exception('Invalid number of doors')

class personsnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""The maximum number of persons that can be seated in a car""
        self.valid_range = [2, 6]
        self.dtype = int
        self.format = ""The number should be one of 2, 4, or 6""
        self.examples = [2, 4, 6, 4, 2]
    def cast(self, val):
        val = int(val)
        if val in [2, 4, 6]:
            return val
        else:
            raise Exception('Invalid number of persons')

class luggagecapacity(NumericSemanticType):
    def __init__(self):
        self.description = ""The luggage capacity of a car""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""The capacity should be one of 0, 1, or 2""
        self.examples = [0, 1, 2, 0, 1]
    def cast(self, val):
        val = int(val)
        if val in [0, 1, 2]:
            return val
        else:
            raise Exception('Invalid luggage capacity')

class safetyrating(NumericSemanticType):
    def __init__(self):
        self.description = ""The safety rating of a car""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""The rating should be one of 0, 1, or 2""
        self.examples = [0, 1, 2, 0, 1]
    def cast(self, val):
        val = int(val)
        if val in [0, 1, 2]:
            return val
        else:
            raise Exception('Invalid safety rating')

MAPPING = {'accept': acceptabilityscore, 'price': pricecategory, 'maint': maintenancecategory, 'doors': doorsnumber, 'persons': personsnumber, 'luggage': luggagecapacity, 'safety': safetyrating}"
"class variable(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Variable categories in the dataset""
        self.valid_values = ""Variable should be one of the following: ['Rain', 'Available time', 'Internet speed', 'Temperature', 'Distraction']""
        self.format = ""Variable should be a string and capitalized""
        self.examples = ['Rain', 'Available time', 'Internet speed', 'Temperature', 'Distraction']
    def cast(self, val):
        return str(val).capitalize()

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage representation of a variable""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be a floating point number ranging from 0 to 100""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return num
        else:
            raise Exception('Invalid percentage value')

class id(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an entity""
        self.valid_values = ""ID should be a positive integer""
        self.format = ""ID should be a string representation of a positive integer""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        try:
            num = int(val)
            if num > 0:
                return str(num)
            else:
                raise Exception('Invalid ID value')
        except ValueError:
            raise Exception('Invalid ID value')

MAPPING = {'variable': variable, 'value': percentage, 'id': id}"
"class plantspecies(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Plant Species""
        self.valid_values = ""Species must be one of the known species""
        self.format = ""Species name should be a string with only the first letter capitalized""
        self.examples = ['Crotal�ria', 'Feij�o de porco', 'Feij�o guand�', 'Lablab', 'Mucuna cinza']
    def cast(self, val):
        return str(val).title()

class length(NumericSemanticType):
    def __init__(self):
        self.description = ""Length in cm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Length should be represented as a float""
        self.examples = [10.50, 1.30, 100.00, 0.90, 21.00]
    def cast(self, val):
        return round(float(val), 3)

class width(NumericSemanticType):
    def __init__(self):
        self.description = ""Width in cm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Width should be represented as a float""
        self.examples = [10.50, 1.30, 100.00, 0.90, 21.00]
    def cast(self, val):
        return round(float(val), 3)

class area(NumericSemanticType):
    def __init__(self):
        self.description = ""Area in sq. cm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Area should be represented as a float""
        self.examples = [30.536, 22.394, 31.956, 34.031, 21.473]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'especie': plantspecies, 'comprimento': length, 'largura': width, 'area': area}"
"class topic(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Topic of the debate or election""
        self.valid_values = ""The valid values are 'election_debate' and float('nan')""
        self.format = ""The values should be 'election_debate' or float('nan')""
        self.examples = ['election_debate', float('nan')]
    def cast(self, val):
        if val == 'election_debate':
            return 'election_debate'
        elif math.isnan(val):
            return float('nan')
        else:
            raise Exception('Invalid topic value')

class displayuniversalbotscores(NumericSemanticType):
    def __init__(self):
        self.description = ""Universal bot scores displayed""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""The values should be a float between 0 and 1""
        self.examples = [0.3, 0.4, 0.2, 0.6, 0.5]
    def cast(self, val):
        return float(val)

class bothuman(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Human', 'Bot']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid bothuman value')

class authentic(NumericSemanticType):
    def __init__(self):
        self.description = ""Authenticity score""
        self.valid_range = [1, 99]
        self.dtype = float
        self.format = ""The values should be a float between 1 and 99""
        self.examples = [1, 43.37, 13.15, 99, 1.06]
    def cast(self, val):
        return float(val)

class truthiness(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['deceit', 'honest']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid truthiness value')

class emotionaltone(NumericSemanticType):
    def __init__(self):
        self.description = ""Emotional tone score""
        self.valid_range = [1, 99]
        self.dtype = float
        self.format = ""The values should be a float between 1 and 99""
        self.examples = [1, 99, 25.77, 72.854, 37.278]
    def cast(self, val):
        return float(val)

class sentiment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['positive', 'negative']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid sentiment value')

class totalcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Total count""
        self.valid_range = [1, 14]
        self.dtype = int
        self.format = ""The values should be an integer between 1 and 14""
        self.examples = [1, 2, 14, 1, 1]
    def cast(self, val):
        return int(val)

class participationcode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participation code""
        self.valid_values = ""The valid values are 'passive', 'active', 'junkie' and float('nan')""
        self.format = ""The values should be 'passive', 'active', 'junkie' or float('nan')""
        self.examples = ['passive', 'active', 'junkie', float('nan')]
    def cast(self, val):
        if val in ['passive', 'active', 'junkie']:
            return val
        elif math.isnan(val):
            return float('nan')
        else:
            raise Exception('Invalid participationcode value')

MAPPING = {'topic': topic, 'displayuniversalbotscores': displayuniversalbotscores, 'bothuman': bothuman, 'authentic': authentic, 'truthiness': truthiness, 'emotionaltone': emotionaltone, 'sentiment': sentiment, 'totalcount': totalcount, 'participationcode': participationcode}"
"class tweetid(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Unique identifier for Tweets""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = ""Tweet ID should be a positive integer""
        self.examples: list = [1210000000000000000, 1210000000000000001, 1210000000000000002, 1210000000000000003, 1210000000000000004]
    def cast(self, val): 
        return int(val)

class userid(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Unique identifier for Twitter users""
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = ""User ID should be a positive integer""
        self.examples: list = [21948091, 1130000000000000000, 140822144, 202980899, 19012891]
    def cast(self, val): 
        return int(val)

class postdate(CategoricalSemanticType):
    def __init__(self):
        self.description: str = ""Date and time when the tweet was posted""
        self.valid_values: str = ""Date and time should be in the format 'm/d/yyyy H:M'""
        self.format: str = ""Date and time in the format 'm/d/yyyy H:M'""
        self.examples: list = ['1/1/2020 1:54', '1/1/2020 3:52', '1/1/2020 4:09', '1/1/2020 4:21', '1/1/2020 16:14']
    def cast(self, val): 
        return datetime.strptime(val, '%m/%d/%Y %H:%M')

class geotype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = ""Type of geographical data provided in the tweet""
        self.valid_values: str = ""Either 'Place' or 'LatLon'""
        self.format: str = ""String 'Place' or 'LatLon'""
        self.examples: list = ['Place', 'LatLon', 'Place', 'Place', 'LatLon']
    def cast(self, val): 
        return str(val)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Geographical longitude where the tweet was posted""
        self.valid_range: list = [-180, 180]
        self.dtype: object = float
        self.format: str = ""Longitude should be a float between -180 and 180""
        self.examples: list = [145.0531311, 145.0531311, 150.9319763, 138.6111603, 144.8826447]
    def cast(self, val): 
        if -180 <= float(val) <= 180:
            return float(val)
        else:
            raise ValueError('Invalid longitude')

class latitude(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Geographical latitude where the tweet was posted""
        self.valid_range: list = [-90, 90]
        self.dtype: object = float
        self.format: str = ""Latitude should be a float between -90 and 90""
        self.examples: list = [-37.9725647, -37.9725647, -33.84824371, -35.00076675, -37.73941803]
    def cast(self, val): 
        if -90 <= float(val) <= 90:
            return float(val)
        else:
            raise ValueError('Invalid latitude')

class place(CategoricalSemanticType):
    def __init__(self):
        self.description: str = ""Place where the tweet was posted""
        self.valid_values: str = ""Place should be a string in the format 'City; State'""
        self.format: str = ""String 'City; State'""
        self.examples: list = ['Melbourne; Victoria', 'Sydney; New South Wales', 'Adelaide; South Australia', 'Brisbane; Queensland', 'Perth; Western Australia']
    def cast(self, val): 
        return str(val)

class placetype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = ""Type of place where the tweet was posted""
        self.valid_values: str = ""Either 'city', 'admin', 'neighborhood', or 'poi'""
        self.format: str = ""String 'city', 'admin', 'neighborhood', or 'poi'""
        self.examples: list = ['city', 'admin', 'neighborhood', 'poi', 'city']
    def cast(self, val): 
        return str(val)

class source(CategoricalSemanticType):
    def __init__(self):
        self.description: str = ""Source of the tweet""
        self.valid_values: str = ""Source should be a string representing the device or application used to post the tweet""
        self.format: str = ""String representing the source of the tweet""
        self.examples: list = ['Twitter for iPhone', 'Twitter for Android', 'Twitter for iPad', 'Twitter Web Client', 'Tweetbot for i??S']
    def cast(self, val): 
        return str(val)
MAPPING = {'tweetid': tweetid, 'userid': userid, 'postdate': postdate, 'geotype': geotype, 'longitude': longitude, 'latitude': latitude, 'place': place, 'placetype': placetype, 'source': source}"
"class experimentdate(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2] # Assuming 1 & 2 represents the two different dates of experiment

    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise ValueError(""Invalid experiment date"")

class conditiontype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of condition for the experiment""
        self.valid_values = ""Values from 1 to 4 representing different conditions""
        self.format = ""Integer from 1 to 4""
        self.examples = [1, 2, 3, 4]
    
    def cast(self, val):
        if val in range(1,5):
            return val
        else:
            raise ValueError(""Invalid condition type"")

class interviewerrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Interviewer rating for the experiment""
        self.valid_range = [1, 13] 
        self.dtype = int 
        self.format = ""Integer from 1 to 13""
        self.examples = [1, 2, 3, 4, 13]
    
    def cast(self, val):
        if val in range(1,14):
            return val
        else:
            raise ValueError(""Invalid interviewer rating"")

class affectrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating of affect for LGBT""
        self.valid_range = [0, 100] 
        self.dtype = float 
        self.format = ""Float from 0 to 100""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    
    def cast(self, val):
        if 0 <= val <= 100:
            return val
        else:
            raise ValueError(""Invalid affect rating"")

class birthyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of birth of the participant""
        self.valid_range = [1927, 1998] 
        self.dtype = int 
        self.format = ""Integer from 1927 to 1998""
        self.examples = [1927, 1950, 1975, 1985, 1998]
    
    def cast(self, val):
        if 1927 <= val <= 1998:
            return val
        else:
            raise ValueError(""Invalid birth year"")

class sexualorientation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sexual orientation of the participant""
        self.valid_values = ""Values from 1 to 4 representing different sexual orientations""
        self.format = ""Integer from 1 to 4""
        self.examples = [1, 2, 3, 4]
    
    def cast(self, val):
        if val in range(1,5):
            return val
        else:
            raise ValueError(""Invalid sexual orientation"")

MAPPING = {
    'date': experimentdate,
    'condition': conditiontype,
    'interviewer': interviewerrating,
    'lgbtaffect': affectrating,
    'yearborn': birthyear,
    'sexualorientation': sexualorientation,
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country names should be valid names in the English language""
        self.format = ""Country names should be capitalized and not have any extraneous characters""
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']
    def cast(self, val):
        val = str(val).strip()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class booleanrepresentation(NumericSemanticType):
    def __init__(self):
        self.description = ""A boolean value represented as a float""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Boolean values should be represented as 0.0 for False and 1.0 for True""
        self.examples = [0.0, 1.0, 1.0, 0.0, 0.0]
    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        elif val == 1.0:
            return 1.0
        else:
            raise Exception('Invalid boolean representation')

MAPPING = {'country': countryname, 'anywiki': booleanrepresentation, 'natassoc': booleanrepresentation, 'natjournal': booleanrepresentation}"
"class casenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Case Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Case Numbers should be formatted as an integer""
        self.examples = [412304976, 412719110, 414161579, 414188842, 414239456]
    def cast(self, val):
        return int(val)

class gendercode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender Code""
        self.valid_values = ""Gender codes can only take the values 1 (male) or 2 (female)""
        self.format = ""Gender codes should be stored as integers""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1,2]:
            return int(val)
        else:
            raise Exception('Invalid gender code')

class pid3code(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""PID3 Code""
        self.valid_values = ""PID3 codes can only take integer values between 1 and 5 (inclusive)""
        self.format = ""PID3 codes should be stored as integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if val in range(1,6):
            return int(val)
        else:
            raise Exception('Invalid PID3 code')

class mia_treatment(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""MIA Treatment""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""MIA Treatment should be formatted as an integer""
        self.unit = 'Numbered Treatment' 
        self.examples: list = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num in range(1,5):
            return num
        else:
            raise Exception('Invalid MIA Treatment')

class mia_evaluation(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""MIA Evaluation""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""MIA Evaluation should be formatted as an integer""
        self.unit = 'Numbered Evaluation' 
        self.examples: list = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num in range(1,6):
            return num
        else:
            raise Exception('Invalid MIA Evaluation')

MAPPING = {'caseid': casenumber, 'gender': gendercode, 'pid3': pid3code, 
           'mia320treat': mia_treatment, 'mia321treat': mia_treatment,
           'mia322treat': mia_treatment, 'mia323treat': mia_treatment,
           'mia324treat': mia_treatment, 'mia325treat': mia_treatment,
           'mia326treat': mia_treatment, 'mia327treat': mia_treatment,
           'mia328treat': mia_treatment, 'mia320': mia_evaluation, 
           'mia321': mia_evaluation, 'mia322': mia_evaluation, 
           'mia323': mia_evaluation, 'mia324': mia_evaluation, 
           'mia325': mia_evaluation, 'mia326': mia_evaluation, 
           'mia327': mia_evaluation, 'mia328': mia_evaluation, 
           'mia405treat': mia_treatment, 'mia407treat': mia_treatment, 
           'mia408treat': mia_treatment, 'mia405': mia_evaluation, 
           'mia407': mia_evaluation, 'mia408': mia_evaluation}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""The numeric country codes""
        self.valid_range = [0, 1000]
        self.dtype = int
        self.format = ""Country code should be a integer ranging from 0 to 1000""
        self.examples = [2, 200, 520, 666, 935]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year of an event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [1994, 1995, 1997, 1999, 1971]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)
            
class binaryindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of an event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be a non-negative integer""
        self.examples = [1, 2, 97, 0, 80]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

MAPPING = {'ccode1': countrycode, 
           'ccode2': countrycode, 
           'year': year,
           'transnatlloc': binaryindicator, 
           'transnatlnat': binaryindicator, 
           'attacks': count, 
           'attacksloc': count,
           'attacksnat': count,
           'nmattacks': count,
           'nmattacksloc': count,
           'nmattacksnat': count,
           'fatalities': count,
           'fatalitiesloc': count,
           'fatalitiesnat': count,
           'nmfatalities': count,
           'nmfatalitiesloc': count,
           'nmfatalitesnat': count}"
"class surveydata(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey data collected from individuals, represented as numerical categories""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Survey data is commonly represented as integers, with each integer representing a different category or response""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 10:
            raise Exception('Invalid survey response')
        return num

class surveydatawithnan(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey data collected from individuals, represented as numerical categories. This data may contain missing values""
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = ""Survey data is commonly represented as integers, with each integer representing a different category or response. Missing values are represented as NaN""
        self.examples = [1, 2, 3, 4, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < 1 or num > 10:
            raise Exception('Invalid survey response')
        return num

class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region of origin""
        self.valid_values = ""Regions are represented by integers, with each integer mapping to a different region""
        self.format = ""Regions are represented as integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class binarysurveydata(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'v4018': surveydata, 'v3040': surveydata, 'v4022': surveydata, 'v301': surveydata, 'v307': surveydata, 
           'v408': surveydatawithnan, 'v409': surveydatawithnan, 'v4010': surveydatawithnan, 'v4012': surveydatawithnan, 
           'v4016': surveydatawithnan, 'v3025': surveydatawithnan, 'v401': surveydatawithnan, 'v5024': surveydatawithnan, 
           'region': region, 'income': surveydatawithnan, 'age': surveydatawithnan, 'rus': binarysurveydata, 
           'urban': binarysurveydata, 'male': binarysurveydata, 'violence': NumericSemanticType, 'avsalary0000': NumericSemanticType}"
"class militaryescalationindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class regionindicator(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region indicator""
        self.valid_values = ""The region indicator should be an integer between 1 and 3""
        self.format = ""Integer numbers (1, 2, or 3)""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return int(val)

class politicaleventindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class politicalstatusindicator(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Political status indicator""
        self.valid_values = ""The political status indicator should be an integer between 1 and 3""
        self.format = ""Integer numbers (1, 2, or 3)""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return int(val)

MAPPING = {'mid': militaryescalationindicator, 
           'rp': regionindicator, 
           'all': politicaleventindicator, 
           'pss': politicaleventindicator, 
           'pol1': politicalstatusindicator, 
           'pol2': politicalstatusindicator, 
           'rv': regionindicator}"
"class smokingstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Smoking Status. Expected 0.0 or 1.0, got {val}')
        return val

class jobdifficultylevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job Difficulty Level""
        self.valid_values = ""Job Difficulty Level should be a float representing an ordinal category from 1.0 to 4.0""
        self.format = ""Job Difficulty Level should be a float""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.examples:
            raise ValueError(f'Invalid value for Job Difficulty Level. Expected a value from 1.0 to 4.0, got {val}')
        return val

class performanceevaluation(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Performance Evaluation Score'
        self.valid_range: list = [0.0, 10.0]
        self.dtype: object = float
        self.format: str = 'Score should be a float ranging from 0.0 to 10.0'
        self.examples: list = [5.0, 7.0, 9.0, 8.0, 10.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 0.0 or val > 10.0:
            raise ValueError(f'Invalid Performance Evaluation Score. Expected a value from 0.0 to 10.0, got {val}')
        return val

class careself(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Self-care status""
        self.valid_values = ""Self-care status should be a float representing a binary category 0.0 or 1.0""
        self.format = ""Self-care status should be a float""
        self.examples = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.examples:
            raise ValueError(f'Invalid value for Self-care status. Expected 0.0 or 1.0, got {val}')
        return val

class worrylevel(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Worry Level'
        self.valid_range: list = [0.0, 10.0]
        self.dtype: object = float
        self.format: str = 'Worry Level should be a float ranging from 0.0 to 10.0'
        self.examples: list = [0.0, 2.0, 5.0, 7.0, 10.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 0.0 or val > 10.0:
            raise ValueError(f'Invalid Worry Level. Expected a value from 0.0 to 10.0, got {val}')
        return val

class engagementlevel(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Engagement Level'
        self.valid_range: list = [0.0, 6.0]
        self.dtype: object = float
        self.format: str = 'Engagement Level should be a float ranging from 0.0 to 6.0'
        self.examples: list = [1.0, 2.5, 3.2, 4.7, 6.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val < 0.0 or val > 6.0:
            raise ValueError(f'Invalid Engagement Level. Expected a value from 0.0 to 6.0, got {val}')
        return round(val,3)

class gendercategory(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Gender Category. Expected 0.0 or 1.0, got {val}')
        return val

class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_values = ""Age Category should be a float representing an ordinal category from 1.0 to 4.0""
        self.format = ""Age Category should be a float""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        if val not in self.examples:
            raise ValueError(f'Invalid value for Age Category. Expected a value from 1.0 to 4.0, got {val}')
        return val

class educationlevel(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Education Level. Expected 0.0 or 1.0, got {val}')
        return val

class maritalstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Marital Status. Expected 0.0 or 1.0, got {val}')
        return val

class childstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Child Status. Expected 0.0 or 1.0, got {val}')
        return val

class sexualharassmentstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Sexual Harassment Status. Expected 0.0 or 1.0, got {val}')
        return val

class jobtenurestatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job Tenure Status""
        self.valid_values = ""Job Tenure Status should be a float representing an ordinal category from 1.0 to 2.0""
        self.format = ""Job Tenure Status should be a float""
        self.examples = [1.0, 2.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.examples:
            raise ValueError(f'Invalid value for Job Tenure Status. Expected a value from 1.0 to 2.0, got {val}')
        return val

class abusestatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Abuse Status. Expected 0.0 or 1.0, got {val}')
        return val

class factoryidentifier(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Factory Identifier'
        self.valid_range: list = [9.0, 9.0]
        self.dtype: object = float
        self.format: str = 'Factory Identifier should be the float number 9.0'
        self.examples: list = [9.0]
    def cast(self, val):
        if val != 9.0:
            raise ValueError(f'Invalid Factory Identifier. Expected 9.0, got {val}')
        return val

class disabilitystatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Disability Status. Expected 0.0 or 1.0, got {val}')
        return val

class planquityes(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if val not in self.valid_values:
            raise ValueError(f'Invalid value for Planquityes. Expected 0.0 or 1.0, got {val}')
        return val

class verbalabusestatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
       "
"class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating on a scale""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Rating should be an integer from 1 to 10""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 10:
            raise Exception('Invalid rating')
        return num

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        num = float(val)
        if num not in self.valid_values:
            raise Exception('Invalid boolean indicator value')
        return num

class opinion(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Opinion value""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Opinion should be a floating point number from 0 to 100""
        self.unit = 'Percentage' 
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid opinion value')
        return num

class internalmeasure(NumericSemanticType):
    def __init__(self):
        self.description = ""Internal measure""
        self.valid_range = [-3.0, 3.0]
        self.dtype = float
        self.format = ""Internal measure should be a floating point number from -3 to 3""
        self.examples = [-3.0, -2.0, -1.0, 1.0, 3.0]
    def cast(self, val):
        num = float(val)
        if num < -3 or num > 3:
            raise Exception('Invalid internal measure value')
        return num

MAPPING = {'v4': rating, 'v5': rating, 'conditieinfo': booleanindicator, 'ownopinion': rating, 'attention': rating, 'internal': internalmeasure, 'vote': rating, 'realisticness': rating, 'voteropinion': opinion, 'partyposition': rating, 'q7': rating}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Name should be a string that matches a country name from the pycountry database""
        self.format = ""Country name should be properly spelled and capitalized""
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola']
    def cast(self, val):
        if pycountry.countries.get(name=str(val)):
            return str(val)
        else:
            raise Exception('Invalid country name')

class giniindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Gini Index""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Gini Index should be a floating point number (in percentage points) ranging from 0 (perfect equality) to 100 (perfect inequality)""
        self.examples = [22.28, 28.57, 32.99, 41.289, 51.8]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid Gini Index')

class unemploymentrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Unemployment Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Unemployment Rate should be a floating point number (in percentage points) ranging from 0 (no unemployment) to 100 (complete unemployment)""
        self.examples = [0.5, 15.1, 26.0, 39.4, 81.6]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid Unemployment Rate')
        
class humandevelopmentindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Human Development Index (HDI)""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""HDI should be a floating point number ranging from 0 (low human development) to 1 (high human development)""
        self.examples = [0.118, 0.485, 0.674, 0.787, 313.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if 0 <= num <= 1:
            return round(num, 3)
        else:
            raise Exception('Invalid Human Development Index')

class homicidenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Homicides""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of Homicides should be a positive integer""
        self.examples = [4, 94, 229, 1418, 40974]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Number of Homicides')

class homiciderate(NumericSemanticType):
    def __init__(self):
        self.description = ""Homicide Rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Homicide Rate should be a positive floating point number""
        self.examples = [0.2, 1.3, 3.1, 11.3, 82.1]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num >= 0:
            return round(num, 1)
        else:
            raise Exception('Invalid Homicide Rate')

class ageofcriminalresponsibility(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of Criminal Responsibility""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age of Criminal Responsibility should be a positive integer""
        self.examples = [0, 9, 13, 14, 18]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid Age of Criminal Responsibility')

MAPPING = {
    'cname': countryname, 
    'ginetsolt': giniindex, 
    'ginmarsolt': giniindex, 
    'desempregolongo': unemploymentrate, 
    'idh': humandevelopmentindex, 
    'hominumber': homicidenumber, 
    'hominumberunodc': homicidenumber, 
    'homirate': homiciderate, 
    'homirateunodc': homiciderate, 
    'acrhazel': ageofcriminalresponsibility, 
    'acrcipriani': ageofcriminalresponsibility, 
    'acmhazel': ageofcriminalresponsibility, 
    'acmgv': ageofcriminalresponsibility
}"
"class studentrestorativescore(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Student score for understanding benefits of restorative justice mechanisms""
        self.valid_values = ""A student's score is a string that must take on one of the following values: ['0', '1', '2', '3']""
        self.format = ""Score should be a string, representing an integer value between 0 and 3""
        self.examples = ['0', '1', '2', '3']
    def cast(self, val):
        if val in ['0', '1', '2', '3']:
            return val
        else:
            raise Exception('Invalid score')

class presimulationreflection(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Pre-simulation reflection scores""
        self.valid_values = ""Reflection scores should be a string that can be cast to an integer""
        self.format = ""Scores are strings that can be cast to integers, ranging from 1 to 10""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        if str(val).isdigit():
            return val
        else:
            raise Exception('Invalid score')

class postsimulationreflection(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Post-simulation reflection scores""
        self.valid_values = ""Reflection scores should be a string that can be cast to an integer""
        self.format = ""Scores are strings that can be cast to integers, ranging from 1 to 10""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        if str(val).isdigit():
            return val
        else:
            raise Exception('Invalid score')

class finalexamscore(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Final exam scores""
        self.valid_values = ""Exam scores should be a string that can be cast to an integer""
        self.format = ""Scores are strings that can be cast to integers, ranging from 1 to 10""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        if str(val).isdigit():
            return val
        else:
            raise Exception('Invalid score')

MAPPING = {'understandbenefitsofrestorativejusticemechanismsnumberofstudentswitheachscore': studentrestorativescore,
           'b': presimulationreflection,
           'c': postsimulationreflection,
           'd': finalexamscore}"
"class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Country names should match the official names of countries according to the pycountry library""
        self.format = ""Country names should be capitalized and should not contain any special characters or numbers""
        self.examples = ['Australia', 'Britain', 'Finland', 'France', 'Germany']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class trustscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Trust score""
        self.valid_range = [-1, 1]
        self.dtype = float
        self.format = ""Trust score should be a floating point number ranging from -1 to 1""
        self.examples = [0.021508, 0.153861, 0.255209, 0.443431, -0.353892]
    def cast(self, val):
        if -1 <= float(val) <= 1:
            return float(val)
        else:
            raise Exception('Invalid trust score')

MAPPING = {'countryname': countryname, 'ingroup': trustscore, 'outgroup': trustscore}"
"class sessionid(NumericSemanticType):
    def __init__(self):
        self.description = ""Session ID""
        self.valid_range = [102, 182]
        self.dtype = int
        self.format = ""Session ID must be a positive integer""
        self.examples = [102, 103, 105, 116, 135]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)
    
class partid(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)
    
class cond3dummy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
    
class status(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
    
class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of participant""
        self.valid_range = [18, 33]
        self.dtype = int
        self.format = ""Age must be a positive integer""
        self.examples = [22, 19, 30, 22, 18]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)
    
class race(NumericSemanticType):
    def __init__(self):
        self.description = ""Race of the participant""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Race must be an integer between 1 and 6""
        self.examples = [4, 1, 1, 4, 2]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)
    
class racedummy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
    
class acad(NumericSemanticType):
    def __init__(self):
        self.description = ""Academic Level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Academic Level must be an integer between 1 and 5""
        self.examples = [5, 1, 3, 4, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)
    
class gtfresh(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
    
class female(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class aar(NumericSemanticType):
    def __init__(self):
        self.description = ""AAR Value""
        self.valid_range = [-0.173, 0.951]
        self.dtype = float
        self.format = ""AAR value must be a floating point number""
        self.examples = [0.319333333, 0.929666667, 0.901333333, 0.481666667, 0.511333333]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)
    
class peakfreq(NumericSemanticType):
    def __init__(self):
        self.description = ""Peak Frequency""
        self.valid_range = [0.13081, 5.55959]
        self.dtype = float
        self.format = ""Peak Frequency must be a floating point number""
        self.examples = [5.24346, 4.57849, 4.59651, 5.54869, 2.45276]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 5)

class speakingtime(NumericSemanticType):
    def __init__(self):
        self.description = ""Speaking Time""
        self.valid_range = [0.61, 6.17]
        self.dtype = float
        self.format = ""Speaking Time must be a floating point number""
        self.examples = [3.28, 3.56, 2.27, 1.47, 2.56]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)
    
class zwa(NumericSemanticType):
    def __init__(self):
        self.description = ""ZWA Value""
        self.valid_range = [3.666666667, 9.0]
        self.dtype = float
        self.format = ""ZWA value must be a floating point number""
        self.examples = [7.666666667, 5.666666667, 7.0, 7.0, 6.333333333]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)

class zwb(NumericSemanticType):
    def __init__(self):
        self.description = ""ZWB Value""
        self.valid_range = [5.333333333, 9.0]
        self.dtype = float
        self.format = ""ZWB value must be a floating point number""
        self.examples = [7.666666667, 7.333333333, 7.666666667, 8.333333333, 8.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)

class prestigea(NumericSemanticType):
    def __init__(self):
        self.description = ""Prestige A""
        self.valid_range = [2.333333333, 6.833333333]
        self.dtype = float
        self.format = ""Prestige A value must be a floating point number""
        self.examples = [6.583333333, 4.0, 5.083333333, 5.333333333, 5.583333333]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)

class prestigeb(NumericSemanticType):
    def __init__(self):
        self.description = ""Prestige B""
        self.valid_range = [4.25, 7.0]
        self.dtype = float
        self.format = ""Prestige B value must be a floating point number""
        self.examples = [5.5, 5.666666667, 5.833333333, 4.666666667, 6.416666667]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 9)

class dominancea(NumericSemanticType):
    def __init__(self):
        self.description = ""Dominance A""
        self.valid_range = [1.0, 6.1]
        self.dtype = float
        self.format = ""Dominance A value must be a floating point number""
        self.examples = [3.2, 2.5, 4.3, 3.5, 2.9]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 1)

class dominanceb(NumericSemanticType):
    def __init__(self):
        self.description = ""Dominance B""
        self.valid_range = [1.0, 6.4]
        self.dtype = float
        self.format = ""Dominance B value must be a floating point number""
        self.examples = [2.7, 4.6, 4.2, 6.4, 3.5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 1)

class abilitya(NumericSemanticType):
    def __init__(self):
        self.description = ""Ability A""
        self.valid_range = [3, 9]
        self.dtype = int
        self.format = ""Ability A must be an integer between 3 and 9""
        self.examples = [9, 4, 6, 7, 7]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class abilityb(NumericSemanticType):
    def __init__(self):
        self.description = ""Ability B""
        self.valid_range = [5, 9]
        self.dtype = int
        self.format = ""Ability B must be an integer between 5 and 9""
        self.examples = [7, 8, 9, 6, 8]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class statusselfsubj(NumericSemanticType):
    def __init__(self):
        self.description = ""Subjective Status Self""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Subjective Status Self must be an integer between 1 and 7""
        self.examples = [3, 6, 4, 6, 4]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class statuspartsubj(NumericSemanticType):
    def __init__(self):
        self.description = ""Subjective Status Part""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Subjective Status Part must be an integer between 1 and 7""
        self.examples = [5, 4, 5, 5, 7]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class statussubjdiff(NumericSemanticType):
    def __init__(self):
        self.description = ""Subjective Status Difference""
        self.valid_range = [-6, 5]
        self.dtype = int
        self.format = ""Subjective Status Difference must be an integer between -6 and 5""
        self.examples = [-2, 2, -1, 1, -3]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {
    'sessionid': sessionid, 
    'partid': partid, 
    'cond3dummy': cond3dummy, 
    'status': status, 
    'age': age, 
    'race': race, 
    'racedummy': racedummy, 
    'acad': acad, 
    'gtfresh': gtfresh, 
    'female': female, 
    'aar': aar, 
    'peakfreq': peakfreq, 
    'speakingtime': speakingtime, 
    'zwa': zwa, 
    'zwb': zwb, 
    'prestigea': prestigea, 
    'prestigeb': prestigeb, 
    'dominancea': dominancea, 
    'dominanceb': dominanceb, 
    'abilitya': abilitya, 
    'abilityb': abilityb, 
    'statusselfsubj': statusselfsubj, 
    'statuspartsubj': statuspartsubj, 
    'statussubjdiff': statussubjdiff, 
}"
"class politicalparty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political Party""
        self.valid_values = ""Political Parties should have their official names""
        self.format = ""Should be a string representing the official name of the political party""
        self.examples = ['Greens', 'Green', 'FPO', 'SPD', 'SPO']
    def cast(self, val):
        return str(val).title()

class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Country Names should be valid and recognized globally""
        self.format = ""Should be a string representing the official name of the country""
        self.examples = ['Belgium', 'Netherlands', 'Austria', 'Germany', 'Luxembourg']
    def cast(self, val):
        country_info = pycountry.countries.get(name=val)
        if country_info is None:
            raise Exception('Invalid country name')
        else:
            return country_info.name

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Should be a 4-digit integer representing a year""
        self.examples = [2004, 2005, 2006, 2010, 2017]
    def cast(self, val):
        year = int(val)
        if year < 0 or year > datetime.now().year:
            raise Exception('Invalid year')
        else:
            return year

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid boolean value')

class percentagechange(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage Change""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number representing a percentage change""
        self.examples = [1.549, 1.359, 0.301, 0.344, 0.799, 1.132]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'party': politicalparty, 'country': countryname, 'year': year, 'gcmajor': binaryvalue, 'gcminor': binaryvalue, 'gcvmin': binaryvalue, 'prevelec': percentagechange, 'follelec': percentagechange, 'gcmem': binaryvalue, 'new': binaryvalue, 'norun': binaryvalue, 'mainstream': binaryvalue, 'pmparty': binaryvalue, 'fm': binaryvalue, 'gdpgrowth': percentagechange, 'gdpgrate': percentagechange, 'unemployment': percentagechange, 'changeunemploy': percentagechange, 'changeyunemploy': percentagechange, 'changeyurate': percentagechange}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dates""
        self.valid_values = ""Dates must fit the following format: 'yyyy-mm-dd'""
        self.format = ""Dates should be stored as strings in the form 'yyyy-mm-dd'""
        self.examples = ['2008-01-12', '2008-06-26', '2008-01-18', '2008-02-01', '2008-02-02']
    def cast(self, val):
        datetime_obj = datetime.strptime(val, '%Y-%m-%d')
        return datetime_obj.strftime('%Y-%m-%d')

class prevalence(NumericSemanticType):
    def __init__(self):
        self.description = ""The prevalence of a condition or characteristic in a population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Prevalence should be a floating point number""
        self.examples = [0.0001890582330549, 0.0172926432196818, 0.0100469366832702, 0.0021224456280992, 0.0061713334201581]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

MAPPING = {'date': date, 'dailyprevalence': prevalence, 'rollingprevelance': prevalence}"
"class programtitle(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Title of a Program""
        self.valid_values = ""Title should be a string""
        self.format = ""Title should be formatted with each word capitalized and without any trailing spaces""
        self.examples = ['Agriculture, General', 'Agricultural Business And Management, General', 'Agribusiness/Agricultural Business Operations', 'Agricultural Economics', 'Farm/Farm And Ranch Management Or Agricultureal Studies']
    def cast(self, val):
        return str(val).strip().title()

class cipcode(NumericSemanticType):
    def __init__(self):
        self.description = ""Classification of Instructional Programs (CIP) Code""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""CIP code should be a numerical value""
        self.examples = [1.0, 10101.0, 10102.0, 10103.0, 1.0104]
    def cast(self, val):
        return float(val)

class indicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'nationaltitle': programtitle, 'cip': cipcode, 'cip6digit': cipcode, 'nationalsciencefoundation': indicator, 'iowaboardofregents': indicator, 'iowacommunitycolleges': indicator, 'stemequitypipeline': indicator, 'iowaworkforcedevelopment': indicator, 'nationalcenterforeducationstatistics': indicator, 'minnesotadepartmentofeducation': indicator, 'universityofwisconsinsystem': indicator, 'missouridepartmentofeducation': indicator, 'minnesotastatecollegesanduniversities': indicator, 'iowacommunitycollegeintegrativestem': indicator}"
"class name(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names""
        self.valid_values = ""Names can be any string""
        self.format = ""Names should be stored as strings""
        self.examples = ['Maria', 'Evan', 'German', 'English', 'Greek']
    def cast(self, val):
        return str(val)

class language(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of Languages""
        self.valid_values = ""Language names can be any string""
        self.format = ""Language names should be stored as strings""
        self.examples = ['English', 'German', 'Greek', 'Sibling Language', 'Other']
    def cast(self, val):
        return str(val)

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of entities""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as an integer""
        self.examples = [1, 13, 243, 258, 155]
    def cast(self, val):
        return int(val)

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage values""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number between 0 and 1""
        self.units = 'In ratio' 
        self.examples = [0.94186046511627908, 0.18217054263565891, 0.75980392156862742, 0.13725490196078433, 0.22549019607843138]
    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 1 else float('nan')

MAPPING = {
    'mariaevan': name, 
    'b': language, 
    'c': language, 
    'd': language, 
    'e': language, 
    'f': count, 
    'g': count, 
    'h': name, 
    'i': language, 
    'j': language, 
    'k': language, 
    'l': language, 
    'm': count, 
    'n': count
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Names should be a string that represents a country""
        self.format = ""Country names should be capitalized and whitespace should be removed from the ends""
        self.examples = ['Gambia', 'Belgium', 'Belize', 'Belarus', 'Bahamas']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().title()

class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Codes""
        self.valid_values = ""Country codes should be a string that represents a country""
        self.format = ""Country codes should be in uppercase and whitespace should be removed from the ends""
        self.examples = ['JOR', 'BHR', 'BRB', 'BRA', 'BOL']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().upper()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Years should be formatted as integers""
        self.examples = [1997, 2004, 2008, 2010, 2011]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class group(NumericSemanticType):
    def __init__(self):
        self.description = ""Group Identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Group identifiers should be formatted as integers""
        self.examples = [2, 39, 76, 113, 149]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class ifdi(NumericSemanticType):
    def __init__(self):
        self.description = ""Inward Foreign Direct Investment""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""IFDI should be formatted as a floating point number""
        self.examples = [-0.06, 4.58, 6.325, 8.905, 13.37]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class bitstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif val == 1:
            return 1
        else:
            return 0

class treatyprovisionlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of Treaty Provision""
        self.valid_values = ""Values should be 1, 2 or 3""
        self.format = ""Treaty provision levels should be formatted as integers""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class gdpratio(NumericSemanticType):
    def __init__(self):
        self.description = ""Ratio of GDP""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP ratio should be formatted as a floating point number""
        self.examples = [0.110144585, 11.912, 62.726, 237.04, 26105.924]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class growthratio(NumericSemanticType):
    def __init__(self):
        self.description = ""Growth Ratio""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Growth ratio should be formatted as a floating point number""
        self.examples = [-1129.0985, 1.286, 1.961, 3.099, 896.714]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class economy(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Economy""
        self.valid_values = ""Economy should be a string that represents a country""
        self.format = ""Economy names should be capitalized and whitespace should be removed from the ends""
        self.examples = ['Afghanistan', 'Bangladesh', 'Bolivia', 'Belize', 'Belarus']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().title()

class region(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Region""
        self.valid_values = ""Region should be a string that represents a geographical region""
        self.format = ""Region names should be capitalized and whitespace should be removed from the ends""
        self.examples = ['Europe & Central Asia', 'Latin America & Caribbean', 'Sub-Saharan Africa', 'East Asia & Pacific', 'Middle East & North Africa']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().title()

MAPPING = {'country': countryname, 'ccode': countrycode, 'year': year, 'year1': year, 'group': group, 'ifdi': ifdi, 
           'bitsigned': bitstatus, 'bitenforced': bitstatus, 'absolute': treatyprovisionlevel, 'relative': treatyprovisionlevel, 
           'ds': treatyprovisionlevel, 'gdpratio': gdpratio, 'growthratio': growthratio, 'gdppcratio': gdpratio, 
           'tradegdpratio': gdpratio, 'rta': bitstatus, 'comlangoff': bitstatus, 'distcap': gdpratio, 'logdistcap': gdpratio, 
           'enrsecondary': gdpratio, 'gsecondary': gdpratio, 'railway': gdpratio, 'highway': gdpratio, 'laborcostratio': gdpratio, 
           'economy': economy, 'region': region, 'merge': treatyprovisionlevel}"
"class participantid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a participant""
        self.valid_values = ""Participant ID should be a unique alphanumeric string""
        self.format = ""Participant ID should be an alphanumeric string, and can contain lowercase letters, numbers and special characters""
        self.examples = ['5e53ea85', '5d6a5f4c', '5d266713', '5a8c6386', '5bddd64b']
    def cast(self, val):
        return str(val)

class frequency(NumericSemanticType):
    def __init__(self):
        self.description = ""Frequency of an event or action""
        self.valid_range = [1.1, 6.0]
        self.dtype = float
        self.format = ""Frequency should be represented as a floating point number""
        self.examples = [3.1, 3.2, 4.4, 2.4, 2.4]
    def cast(self, val):
        return float(val)

class complexity(NumericSemanticType):
    def __init__(self):
        self.description = ""Complexity level""
        self.valid_range = [2.6, 6.0]
        self.dtype = float
        self.format = ""Complexity level should be represented as a floating point number""
        self.examples = [4.2, 5.0, 3.0, 6.0, 4.8]
    def cast(self, val):
        return float(val)

class emotionvalence(NumericSemanticType):
    def __init__(self):
        self.description = ""Emotion valence""
        self.valid_range = [1.4, 6.0]
        self.dtype = float
        self.format = ""Emotion valence should be represented as a floating point number""
        self.examples = [5.3, 4.3, 1.4, 4.9, 5.7]
    def cast(self, val):
        return float(val)

class directedness(NumericSemanticType):
    def __init__(self):
        self.description = ""Directedness level""
        self.valid_range = [2.0, 5.6]
        self.dtype = float
        self.format = ""Directedness level should be represented as a floating point number""
        self.examples = [3.8, 3.2, 3.0, 5.0, 4.6]
    def cast(self, val):
        return float(val)

class anxiety(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of anxiety""
        self.valid_range = [1.0, 4.0]
        self.dtype = float
        self.format = ""Anxiety level should be represented as a floating point number""
        self.examples = [1.8, 1.0, 4.0, 2.5, 2.8]
    def cast(self, val):
        return float(val)

class diagnosedcovid19(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, 2.0]
    def cast(self, val):
        return float(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a participant""
        self.valid_range = [15.0, 72.0]
        self.dtype = float
        self.format = ""Age should be represented as a floating point number""
        self.examples = [43.0, 36.0, 31.0, 39.0, 41.0]
    def cast(self, val):
        return float(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a participant""
        self.valid_values = ""Gender should be represented as a numeric value, with 1 representing Male, 2 representing Female, and 3 representing Other""
        self.format = ""Gender should be represented as a numeric value""
        self.examples = [2.0, 1.0, 2.0, 1.0, 2.0]
    def cast(self, val):
        return float(val)

class race(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race of a participant""
        self.valid_values = ""Race should be represented as a numeric value, with values ranging from 1-8, each representing a different race""
        self.format = ""Race should be represented as a numeric value""
        self.examples = [3.0, 7.0, 7.0, 3.0, 7.0]
    def cast(self, val):
        return float(val)

class psychcondition(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, 2.0]
    def cast(self, val):
        return float(val)

MAPPING = {'pid': participantid, 
           'ffisfrequency': frequency, 
           'ffiscomplexity': complexity, 
           'ffisemovalence': emotionvalence, 
           'ffisdirectedness': directedness, 
           'promisanxietypastweek': anxiety, 
           'diagnosedcovid19': diagnosedcovid19, 
           'age': age,
           'gender': gender,
           'race': race,
           'psychcondition': psychcondition}"
"
from datetime import datetime

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of an event""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1650, 1700, 1750, 1800, 1850]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid year')
        return val

class numslaves(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of slaves""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of slaves should be formatted as an integer""
        self.examples = [1000, 5000, 10000, 20000, 30000]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0]:
            raise Exception('Invalid number of slaves')
        return val

class deathrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Death Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Death rate should be formatted as a floating point number""
        self.examples = [5, 10, 15, 20, 25]
    def cast(self, val):
        val = float(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid death rate')
        return round(val, 2)

MAPPING = {'Year': year, 'To Africa': numslaves, 'To Americas': numslaves, 'Death Rate': deathrate}
"
"class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Buitrago Rubira, Beatriz', 'Navarro Bonilla, Diego', 'López Guillamón, Ignacio', 'Agustí Ruiz, Lluis', 'Acal Díaz, Inmaculada']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A specific year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a four digit integer""
        self.examples = [1992, 2013, 2016, 2019, 2015]
    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

MAPPING = {'authorautordelatesis': personname, 'yearañodelectura': year}"
"class swisspostalcode(NumericSemanticType):
    def __init__(self):
        self.description = ""Swiss Postal Codes""
        self.valid_range = [1000, 9999] 
        self.dtype = int 
        self.format = ""Swiss Postal Codes must be 4-digit numbers""
        self.examples = [5000, 5001, 5004, 5017, 5018]
    def cast(self, val):
        return int(val)

class placename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Place names in Switzerland""
        self.valid_values = ""Name of places in Switzerland""
        self.format = ""Each word in the place name should be capitalized""
        self.examples = ['Aarau', 'Barmelweid', 'Erlinsbach', 'Zürich', 'Basel']
    def cast(self, val):
        return str(val).title()

class cantonname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Canton names in Switzerland""
        self.valid_values = ""Name of cantons in Switzerland""
        self.format = ""Each word in the canton name should be capitalized""
        self.examples = ['Kanton Aargau', 'Kanton Bern', 'Canton de Vaud', 'Kanton Zürich', 'Kanton Graubünden']
    def cast(self, val):
        return str(val).title()

class cantonabbreviation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Canton abbreviations in Switzerland""
        self.valid_values = ""Abbreviations of cantons in Switzerland""
        self.format = ""Abbreviations should be 2 uppercase letters""
        self.examples = ['AG', 'BE', 'VD', 'ZH', 'GR']
    def cast(self, val):
        return str(val).upper()

class countyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""County names in Switzerland""
        self.valid_values = ""Name of counties in Switzerland""
        self.format = ""Each word in the county name should be capitalized""
        self.examples = ['Bezirk Aarau', 'Distretto di Lugano', 'District du Jura-Nord vaudois', 'Genève', 'Bezirk Zürich']
    def cast(self, val):
        return str(val).title()

class cityname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City names in Switzerland""
        self.valid_values = ""Name of cities in Switzerland""
        self.format = ""Each word in the city name should be capitalized""
        self.examples = ['Aarau', 'Erlinsbach (AG)', 'Zürich', 'Basel', 'Bern']
    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude coordinate""
        self.valid_range = [-90, 90] 
        self.dtype = float
        self.format = ""Latitude should be a floating point number""
        self.examples = [47.389, 47.3922, 47.4005, 47.4216, 47.4126]
    def cast(self, val):
        num = float(val)
        if not self.valid_range[0] <= num <= self.valid_range[1]:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude coordinate""
        self.valid_range = [-180, 180] 
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.examples = [8.0487, 8.0497, 8.0606, 7.97, 8.0089]
    def cast(self, val):
        num = float(val)
        if not self.valid_range[0] <= num <= self.valid_range[1]:
            raise Exception('Invalid longitude')
        return num

MAPPING = {'postalcode': swisspostalcode, 'placename': placename, 'state': cantonname, 'stateabbreviation': cantonabbreviation, 'county': countyname, 'city': cityname, 'latitude': latitude, 'longitude': longitude}"
"class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Jose Luis Varela', 'Javier Filemon Tejeira', 'Hector Aleman', 'Carlos Santana', 'Alcibiades Vasquez']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1900, datetime.now().year] 
        self.dtype = int
        self.format = ""Year should be a 4-digit number""
        self.examples = [2004, 2005, 2006, 2007, 2008]
    def cast(self, val):
        val_int = int(val)
        if val_int >= 1900 and val_int <= datetime.now().year:
            return val_int
        else:
            raise ValueError(""Invalid year"")
            
class politicalparty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political Party""
        self.valid_values = ""Name of a political party""
        self.format = ""All letters should be uppercase""
        self.examples = ['PRD', 'PPAN', 'PSOL', 'PDC', 'MOLIRENA']
    def cast(self, val):
        return str(val).upper()

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return val
        else:
            raise ValueError(""Invalid binary value"")

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = ""Age should be a floating point number""
        self.examples = [42.0, 40.0, 48.73908996582031, 47.31058120727539, 42.0]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 120:
            return round(num, 2)
        else:
            raise ValueError(""Invalid age"")

class unemploymentrate(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Unemployment rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Unemployment rate should be a floating point number""
        self.unit = ""Percentage""
        self.examples = [7.0, 9.199999809265137, 13.899999618530272, 8.300000190734863, 13.899999618530272]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise ValueError(""Invalid unemployment rate"")

MAPPING = {'nname': personname, 'year': year, 'elpty': politicalparty, 'mptyoppel': binaryvalue, 'lowtransppa': binaryvalue, 'senior': binaryvalue, 'year04': binaryvalue, 'iage': age, 'un0409': unemploymentrate}"
"class politicalparty(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Political Parties""
        self.valid_values = ""Political Parties should be valid, registered parties in the corresponding country""
        self.format = ""Political Parties should be stored as capitalized strings""
        self.examples = ['FIDESZ', 'MSZP', 'MIÉP', 'KDNP', 'MDF']
    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four-digit integer""
        self.examples = [2002, 2006, 2010, 2014]
    def cast(self, val):
        return int(val)

class populationcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Population Count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Population count should be a non-negative integer""
        self.examples = [6600, 8016, 5238, 4426, 2633]
    def cast(self, val):
        return int(val)

MAPPING = {'party': politicalparty, 'year': year, 'number': populationcount}"
"class countryid(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""CountryID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country name should be a string that matches with a valid country name in English""
        self.format = ""Country name should be in title case""
        self.examples = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class iso3166(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ISO 3166 Country Code""
        self.valid_values = ""ISO 3166 Country Code should be a string that matches with a valid alpha-3 country code""
        self.format = ""ISO 3166 Country Code should be in uppercase""
        self.examples = ['AFG', 'ALB', 'DZA', 'AGO', 'ARG']
    def cast(self, val):
        code = pycountry.countries.get(alpha_3=val)
        if code:
            return code.alpha_3
        else:
            raise Exception('Invalid ISO 3166 code')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a positive integer""
        self.examples = [2010, 1995, 1992, 2006, 2017]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

class prevunit(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(float(val)):
            return float('nan')
        else:
            return int(val)

MAPPING = {'countryid': countryid, 'countryname': countryname, 'iso3166': iso3166, 'firstlaw': year, 'yearadopt': year, 'yearoperate': year, 'prevunit': prevunit}"
"class electionnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Election Number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Election Number must be positive integers""
        self.examples: list[int] = [28, 29, 30, 31, 32]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid election number')
        return num

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of the Election""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Year must be a positive integer in YYYY format""
        self.examples: list[int] = [1958, 1963, 1967, 1972, 1976]
    def cast(self, val):
        num = int(val)
        if num < 1 or len(str(num)) != 4:
            raise Exception('Invalid year')
        return num

class districtcode(NumericSemanticType):
    def __init__(self):
        self.description = ""District Code""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""District Code must be positive integers""
        self.examples: list[int] = [101, 102, 103, 104, 105]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid district code')
        return num

class population(NumericSemanticType):
    def __init__(self):
        self.description = ""Population Size""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Population size must be positive integers""
        self.examples: list[int] = [1088040, 834576, 587946, 1336204, 1139403]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid population size')
        return num

class occupation(NumericSemanticType):
    def __init__(self):
        self.description = ""Occupation Size""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Occupation size must be positive integers""
        self.examples: list[int] = [108612, 195316, 104150, 187649, 248746]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid occupation size')
        return num

MAPPING = {
    'elecnum': electionnumber, 
    'year': year, 
    'distcode': districtcode, 
    'poptotal': population, 
    'popmale': population, 
    'popfemale': population, 
    'popunder15': population, 
    'popover65': population, 
    'popdid': population, 
    'work1st': occupation, 
    'work2nd': occupation, 
    'work3rd': occupation
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Name should be a valid country name as defined by pycountry module""
        self.format = ""Country names should be capitalized""
        self.examples = ['Mozambique', 'El Salvador', 'Democratic Republic of Congo', 'Myanmar', 'Rwanda']
    def cast(self, val):
        if pycountry.countries.get(name=str(val)):
            return str(val).title()
        else:
            raise Exception('Invalid Country Name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Years should be formatted as 4-digit numbers""
        self.examples = [1990, 1991, 1992, 1993, 1994]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        year = int(val)
        if year >= 0 and year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid Year')

class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region of the World""
        self.valid_values = ""Region should be one of the following: ['Europe', 'Asia', 'Africa', 'Americas', 'Oceania']""
        self.format = ""Region names should be capitalized""
        self.examples = ['Europe', 'Asia', 'Africa', 'Americas', 'Oceania']
    def cast(self, val):
        if str(val).title() in ['Europe', 'Asia', 'Africa', 'Americas', 'Oceania']:
            return str(val).title()
        else:
            raise Exception('Invalid Region')

class highincome1990(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['yes', 'no']
    def cast(self, val):
        if str(val).lower() in self.valid_values:
            return str(val).lower()
        else:
            raise Exception('Invalid Value')

class isocode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ISO 3166-1 alpha-3 codes of a Country""
        self.valid_values = ""Code should be a valid ISO 3166-1 alpha-3 code""
        self.format = ""Codes should be all upper case""
        self.examples = ['MOZ', 'SLV', 'COD', 'MMR', 'RWA']
    def cast(self, val):
        if pycountry.countries.get(alpha_3=str(val)):
            return str(val).upper()
        else:
            raise Exception('Invalid ISO Code')

MAPPING = {
    'country': countryname,
    'year': year,
    'region': region,
    'hi1990': highincome1990,
    'isocode': isocode,
}"
"class participantid(NumericSemanticType):
    def __init__(self):
        self.description = ""Participant's Unique Identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Participant ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class gamblercondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gambler's Initial Condition""
        self.valid_values = ""The initial condition can be either 'initial-winning' or 'initial-losing'""
        self.format = ""Condition should be either 'initial-winning' or 'initial-losing'""
        self.examples = ['initial-winning', 'initial-losing']
    def cast(self, val):
        return str(val)

class perceivedwinningrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Perceived Winning Rate of a Gambler""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Perceived winning rate should be a float between 0 and 100""
        self.examples = [60.0, 50.0, 70.0, 80.0, 80.0]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return num
        else:
            raise Exception('Invalid perceived winning rate')

class ecw(NumericSemanticType):
    def __init__(self):
        self.description = ""Expected Continuing Winnings of a Gambler""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Expected continuing winnings should be a positive float""
        self.examples = [6.40, 60.08, 40.88, 1108.72, 172.72]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid expected continuing winnings')

class ecl(NumericSemanticType):
    def __init__(self):
        self.description = ""Expected Continuing Losses of a Gambler""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Expected continuing losses should be a positive float""
        self.examples = [138.04, 44.6, 35.8, 1012.04, 610.52]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid expected continuing losses')

class numberoftrialsinsecondsession(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Trials in Second Session""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of trials should be a positive integer""
        self.examples = [12, 21, 30, 30, 30]
    def cast(self, val):
        return int(val)

MAPPING = {'participantid': participantid, 'condition': gamblercondition, 'perceivedwinningrate': perceivedwinningrate, 'ecw': ecw, 'ecl': ecl, 'numberoftrialsinsecondsession': numberoftrialsinsecondsession}"
"class moneybolivian(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Money in Bolivian currency""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Money should be formatted as a floating point number with two decimal places for cents""
        self.unit = 'In BOB (Bolivian Boliviano)' 
        self.examples = [14462.14, 552909.228, 8335498.52, 23828152.3, 1698194056.21]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        num = float(val)
        return round(num, 2)

MAPPING = {'1º': moneybolivian, '2º': moneybolivian, '3º': moneybolivian, '4º': moneybolivian, '1º1': moneybolivian, '2º1': moneybolivian, '3º1': moneybolivian, '4º1': moneybolivian, '1º2': moneybolivian, '2º2': moneybolivian, '3º2': moneybolivian, '4º2': moneybolivian, '1º3': moneybolivian, '2º3': moneybolivian, '3º3': moneybolivian, '4º3': moneybolivian}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Standardized Country Name""
        self.valid_values = ""Names should be a valid country name as per the pycountry library""
        self.format = ""Country name should be capitalized and in English""
        self.examples = ['Canada', 'United States', 'Germany', 'Australia', 'France']
    def cast(self, val):
        val = str(val).title()
        try:
            country = pycountry.countries.get(name=val)
            if country is None:
                raise Exception('Invalid country name')
            else:
                return country.name
        except Exception as e:
            print(f'Error: {e}')
            
class year(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_values = ""Year should be a valid year between 1800 and current year""
        self.format = ""Year should be a 4 digit number""
        self.examples = ['1999', '2005', '2010', '2015', '2020']
    def cast(self, val):
        val = str(val)
        if len(val) == 4 and val.isdigit():
            if int(val) >= 1800 and int(val) <= datetime.now().year:
                return val
            else:
                raise Exception('Invalid year')
        else:
            raise Exception('Invalid format for year')
            
class datatype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Data Type""
        self.valid_values = ""Type should be one of the following: 'numeric', 'factor', 'cs_id', 'ts_id'""
        self.format = ""Type should be a lowercase string""
        self.examples = ['numeric', 'factor', 'cs_id', 'ts_id']
    def cast(self, val):
        val = str(val).lower()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid data type')

MAPPING = {'varname': countryname, 'vardef': year, 'type': datatype}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year when the event occurred""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [2018, 2019, 2020, 2021, 2022]
    def cast(self, val):
        return int(val)

class newspapername(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The name of the newspaper""
        self.valid_values = ""The name of the newspaper should be a string and should be one of the valid newspaper names""
        self.format = ""The first letter of each word should be capitalized""
        self.examples = ['Punch', 'Vanguard', 'Guardian']
    def cast(self, val):
        return str(val).title()

class dateofreport(NumericSemanticType):
    def __init__(self):
        self.description = ""The date when the report was made""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Date should be formatted as an integer representing the number of days since the epoch (1970-01-01)""
        self.examples = [43793, 43788, 43781, 43780, 43779]
    def cast(self, val):
        try:
            return int(val)
        except ValueError:
            date_obj = datetime.strptime(val, '%B %d, %Y')
            epoch = datetime(1970, 1, 1)
            return (date_obj - epoch).days

class dateofincident(NumericSemanticType):
    def __init__(self):
        self.description = ""The date when the incident occurred""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Date should be formatted as an integer representing the number of days since the epoch (1970-01-01)""
        self.examples = [43792, 43787, float('nan'), float('nan'), float('nan')]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        try:
            return int(val)
        except ValueError:
            date_obj = datetime.strptime(val, '%B %d, %Y')
            epoch = datetime(1970, 1, 1)
            return (date_obj - epoch).days

MAPPING = {'year': year, 'paper': newspapername, 'dateofreport': dateofreport, 'dateofincident': dateofincident}"
"class idnum(NumericSemanticType):
    def __init__(self):
        self.description = ""Id number of a record""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise ValueError(""Invalid id number"")
        return num

class binaryindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid binary indicator value"")
        return int(val)

class educationlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Education Level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Education level is a number between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise ValueError(""Invalid education level"")
        return num

class incomelevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Income Level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Income level is a number between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise ValueError(""Invalid income level"")
        return num

class taxamount(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Amount of yearly taxes""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Tax amount should be a positive floating point number""
        self.unit = ""In USD""
        self.examples = [10.00, 100.00, 1000.00, 10000.00, 100000.00]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError(""Invalid tax amount"")
        return round(num, 2)

MAPPING = {'id': idnum, 'control': binaryindicator, 'flooding': binaryindicator, 'floodmap': binaryindicator,
           'floodpoliticiz': binaryindicator, 'floodmappoliticiz': binaryindicator, 'droughts': binaryindicator,
           'droughtsmap': binaryindicator, 'droughtspoliticiz': binaryindicator, 'droughtmappoliticiz': binaryindicator,
           'rep': binaryindicator, 'ind': binaryindicator, 'dem': binaryindicator, 'ed': educationlevel, 'female': binaryindicator,
           'income': incomelevel, 'white': binaryindicator, 'happening': binaryindicator, 'scaledimpact': binaryindicator, 
           'important': binaryindicator, 'affectingweather': binaryindicator, 'learnmore': binaryindicator, 'yearlytaxes1': taxamount}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_range = [1, 195]
        self.dtype = int
        self.format = ""Country code is a numeric representation of a country. It should be an integer.""
        self.examples = [1, 49, 98, 146, 195]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Country names should be valid names of countries in the world""
        self.format = ""Country names should start with a capital letter and the rest of the letters should be in lowercase""
        self.examples = ['Afghanistan', 'Azerbaijan', 'Brunei Darussalam', 'Brazil', 'Algeria']
    def cast(self, val):
        if not pycountry.countries.get(name=val):
            raise Exception('Invalid country name')
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1970, 2016]
        self.dtype = int
        self.format = ""Year should be an integer.""
        self.examples = [1970, 1981, 1993, 2005, 2016]
    def cast(self, val):
        return int(val)

class gdppercapita(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product per capita""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP per capita should be a floating point number""
        self.unit = 'In USD' 
        self.examples = [161.73, 1241.65, 3582.86, 12979.03, 194188.19]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class gdp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP should be a floating point number""
        self.unit = 'In USD' 
        self.examples = [0.0, 1.23, 1.93, 3.23, 117.35]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class neworg(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of new organizations""
        self.valid_range = [0, 11]
        self.dtype = int
        self.format = ""Number of new organizations should be an integer.""
        self.examples = [0, 1, 2, 3, 11]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class competorg(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of competing organizations""
        self.valid_range = [0, 67]
        self.dtype = int
        self.format = ""Number of competing organizations should be an integer.""
        self.examples = [0, 1, 2, 3, 67]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class warintra(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of intra wars""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Number of intra wars should be an integer.""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class polity(NumericSemanticType):
    def __init__(self):
        self.description = ""Polity Score""
        self.valid_range = [-10, 10]
        self.dtype = int
        self.format = ""Polity score should be an integer.""
        self.examples = [-10, -7, 4, 9, 10]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class lnpop(NumericSemanticType):
    def __init__(self):
        self.description = ""Natural logarithm of population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Natural logarithm of population should be a floating point number""
        self.examples = [8.65, 14.05, 15.50, 16.64, 21.04]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class politysq(NumericSemanticType):
    def __init__(self):
        self.description = ""Squared Polity Score""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Squared polity score should be an integer.""
        self.examples = [0, 36, 49, 81, 100]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class lngdppc(NumericSemanticType):
    def __init__(self):
        self.description = ""Natural logarithm of GDP per capita""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Natural logarithm of GDP per capita should be a floating point number""
        self.examples = [5.09, 7.12, 8.18, 9.47, 12.18]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class lngdppc2(NumericSemanticType):
    def __init__(self):
        self.description = ""Squared Natural logarithm of GDP per capita""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Squared natural logarithm of GDP per capita should be a floating point number""
        self.examples = [25.87, 50.75, 66.98, 89.70, 148.27]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

class sf(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {'ccode': countrycode, 'country': countryname, 'year': year, 'gdppc': gdppercapita, 'megdp': gdp, 'neworg': neworg,
           'competorg': competorg, 'warintra': warintra, 'polity2': polity, 'lnpop': lnpop, 'politysq': politysq, 
           'lngdppc': lngdppc, 'lngdppc2': lngdppc2, 'sf': sf}"
"class selfperceivedability(NumericSemanticType):
    def __init__(self):
        self.description: str = ""This represents a student's self-perceived ability in a certain academic category""
        self.valid_range: list = [1.0, 5.0] 
        self.dtype: object = float
        self.format: str = ""This should be a floating point number from 1.0 to 5.0, where higher values indicate greater self-perceived ability""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val): 
        num = float(val)
        if self.valid_range[0] <= num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid self-perceived ability')

class stereotype(NumericSemanticType):
    def __init__(self):
        self.description: str = ""This represents a student's stereotype in a certain academic category""
        self.valid_range: list = [1.0, 5.0] 
        self.dtype: object = float
        self.format: str = ""This should be a floating point number from 1.0 to 5.0, where higher values indicate greater stereotyping""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val): 
        num = float(val)
        if self.valid_range[0] <= num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid stereotype value')

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list = [0, 1]
    def cast(self, val): 
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid binary value')

MAPPING = {'acselfc1re': selfperceivedability, 'acselfc2re': selfperceivedability, 'acselfc3re': selfperceivedability, 
           'acselfc4re': selfperceivedability, 'acselfc5re': selfperceivedability, 'acselfc6re': selfperceivedability,
           'acselfc7': selfperceivedability, 'acselfc8': selfperceivedability, 'acselfc9': selfperceivedability,
           'acselfc12': selfperceivedability, 'stereotype1re': stereotype, 'stereotype4re': stereotype, 
           'stereotype5re': stereotype, 'stereotype6re': stereotype, 'stereotype7re': stereotype, 
           'stereotype8re': stereotype, 'stereotype9re': stereotype, 'stereotype10re': stereotype, 
           'y': selfperceivedability, 'm': selfperceivedability, 'z': binaryvalue, 'c': selfperceivedability, 
           'wn': binaryvalue, 'x': binaryvalue, 'xw': binaryvalue, 'xz': binaryvalue, 'wz': binaryvalue, 
           'xwz': binaryvalue, 'nomiss': binaryvalue}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric Country Code""
        self.valid_range = [0, 297]
        self.dtype = int
        self.format = ""Country codes should be integers ranging from 0 to 297""
        self.examples = [3, 4, 18, 22, 23]
    def cast(self, val):
        val = int(val)
        if val < 0 or val > 297:
            raise Exception('Invalid country code')
        return val

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Country names should be strings and must exist in the pycountry module""
        self.format = ""Country names should be the official short name in English, title cased, without special characters at the start""
        self.examples = ['Benin', 'Botswana', 'Ghana', 'Kenya', 'Lesotho']
    def cast(self, val):
        val = str(val).strip('�')
        if not pycountry.countries.get(name=val):
            raise Exception('Invalid country name')
        return val.title()

class proportion(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Proportion""
        self.valid_values = ""Proportions should be floating point numbers between 0 and 1""
        self.format = ""Proportions are represented as decimal values between 0 and 1""
        self.examples = [0.0, 0.6, 0.33333334, 1.0]
    def cast(self, val):
        val = float(val)
        if val < 0 or val > 1:
            raise Exception('Invalid proportion value')
        return round(val, 6)

class booleanvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        val = float(val)
        if val not in self.valid_values:
            raise Exception('Invalid boolean value')
        return bool(val)

MAPPING = {'countryn': countrycode, 'ncountry': countryname, 'lag7propideo': proportion, 'lag7fptp': booleanvalue, 'lag7olpr': booleanvalue, 'lag7ol': booleanvalue, 'prespwr': booleanvalue, 'mep': booleanvalue, 'clap': booleanvalue, 'asiap': booleanvalue, 'africap': booleanvalue, 'fsup': booleanvalue}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country name should be a string and must be a valid country name as defined by pycountry""
        self.format = ""Country name should be capitalized""
        self.examples = ['Albania', 'Czech Republic', 'Austria', 'Belgium', 'Bolivia']
    def cast(self, val):
        if pycountry.countries.get(name=val):
            return str(val).title()
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year must be an integer""
        self.examples = [2000, 2001, 2002, 2003, 2004]
    def cast(self, val):
        return int(val)

class ccode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_range = [1, 999]
        self.dtype = int
        self.format = ""Country code must be an integer""
        self.examples = [8, 32, 36, 40, 56]
    def cast(self, val):
        return int(val)

class ccodealp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Code in Alpha""
        self.valid_values = ""Country code in Alpha should be a string and must be a valid alpha-3 country code as defined by pycountry""
        self.format = ""Country code in Alpha should be in capital letters""
        self.examples = ['ALB', 'BGR', 'HRV', 'CRI', 'COL']
    def cast(self, val):
        if pycountry.countries.get(alpha_3=val):
            return str(val).upper()
        else:
            raise Exception('Invalid alpha-3 country code')

class ethnicity(NumericSemanticType):
    def __init__(self):
        self.description = ""Ethnic Diversity Measure""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Ethnic diversity measure should be a floating point number between 0 and 1""
        self.examples = [0.18399203, 0.51039594, 0.28984898, 0.23807323, 0.832352]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid ethnic diversity measure')

class region(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid region value')

class clientelism(NumericSemanticType):
    def __init__(self):
        self.description = ""Clientelism Measure""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Clientelism measure should be a floating point number""
        self.examples = [0.6845706, 1.1185348, -1.3364308, -0.85565805, -0.6077854]
    def cast(self, val):
        return float(val)

class partysize(NumericSemanticType):
    def __init__(self):
        self.description = ""Political Party Size Measure""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Political party size measure should be a floating point number between 0 and 1""
        self.examples = [0.4045, 0.38796154, 0.405, 0.32299998, 0.1375]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return num
        else:
            raise Exception('Invalid political party size measure')

class hiring(NumericSemanticType):
    def __init__(self):
        self.description = ""Hiring Measure""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Hiring measure should be a floating point number""
        self.examples = [0.27216476, -1.1299663, 1.4312645, 0.25973514, 1.519164]
    def cast(self, val):
        return float(val)

class gdp(NumericSemanticType):
    def __init__(self):
        self.description = ""GDP Measure""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""GDP measure should be a floating point number""
        self.examples = [8.741795, 9.211966, 10.395374, 10.437441, 10.376478]
    def cast(self, val):
        return float(val)

class prmean(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid PR Mean value')

MAPPING = {
    'country': country,
    'year': year,
    'ccode': ccode,
    'epethnic': ethnicity,
    'ceneurope': region,
    'latinam': region,
    'mideast': region,
    'africa': region,
    'neoeur': region,
    'easia': region,
    'sasia': region,
    'ccodealp': ccodealp,
    'clientelism1': clientelism,
    'clientelism2': clientelism,
    'firstsize': partysize,
    'secondsize': partysize,
    'firstclient1': clientelism,
    'secondclient1': clientelism,
    'firstclient2': clientelism,
    'secondclient2': clientelism,
    'hiring': hiring,
    'prmean': prmean,
    'gdpmean': gdp,
    'presmean': prmean,
    'pvpmean': prmean
}"
"class consent(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return 1.0
        
class smoking(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0
        
class satisfaction(NumericSemanticType):
    def __init__(self):
        self.description = ""Satisfaction Level""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Satisfaction level should be a floating point number between 0 and 10""
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]
    def cast(self, val):
        return min(max(float(val), 0), 10)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0

class children(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0

class care(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0
        
class worry(NumericSemanticType):
    def __init__(self):
        self.description = ""Worry Level""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Worry level should be a floating point number between 0 and 10""
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]
    def cast(self, val):
        return min(max(float(val), 0), 10)

class agecat4(NumericSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Age category should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return min(max(int(val), 1), 4)

class educ3(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0

class married(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 0.0:
            return 0.0
        else:
            return 1.0

class abuse(NumericSemanticType):
    def __init__(self):
        self.description = ""Abuse Level""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Abuse level should be a floating point number between 0 and 1""
        self.examples = [0.0, 0.5, 1.0]
    def cast(self, val):
        return min(max(float(val), 0), 1)

class jobtenure3(NumericSemanticType):
    def __init__(self):
        self.description = ""Job Tenure Category""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Job Tenure category should be an integer between 1 and 3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return min(max(int(val), 1), 3)

class engagement(NumericSemanticType):
    def __init__(self):
        self.description = ""Engagement Level""
        self.valid_range = [0, 6]
        self.dtype = float
        self.format = ""Engagement level should be a floating point number between 0 and 6""
        self.examples = [0.0, 1.5, 3.0, 4.5, 6.0]
    def cast(self, val):
        return min(max(float(val), 0), 6)

class factoryf(NumericSemanticType):
    def __init__(self):
        self.description = ""Factory Category""
        self.valid_range = [6, 8]
        self.dtype = int
        self.format = ""Factory category should be an integer between 6 and 8""
        self.examples = [6, 7, 8]
    def cast(self, val):
        return min(max(int(val), 6), 8)

MAPPING = {'consent': consent, 'smoking': smoking, 'jdsay': satisfaction, 'jdtoomch': satisfaction, 'coworkperf': satisfaction, 
           'jobsatis': satisfaction, 'gender': gender, 'children': children, 'care': care, 'worryexpens': worry, 
           'worrysafe': worry, 'agecat4': agecat4, 'educ3': educ3, 'married': married, 'sexharassyouyes': abuse,
           'sexharassfactyes': abuse, 'jobtenure3': jobtenure3, 'engagement': engagement, 'emotabuseh01': abuse,
           'sexabuseh01': abuse, 'physabuseh01': abuse, 'verbalabuse01': abuse, 'disabilitydaysyes': abuse,
           'planquityes': abuse, 'factoryf': factoryf}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1986, 1990, 1998, 2006, 2014]
    def cast(self, val):
        return int(val)

class politicalposition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Political Position""
        self.valid_values = ""Political Position should be one of 'DeputadoFederal' or 'Governador'""
        self.format = ""Political Position should be a string""
        self.examples = ['DeputadoFederal', 'Governador']
    def cast(self, val):
        return str(val)

class politicalparty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political Party""
        self.valid_values = ""Political Party should be a string""
        self.format = ""Political Party should be a string""
        self.examples = ['PSB', 'PCdoB', 'PCB', 'PTB', 'PDT']
    def cast(self, val):
        return str(val)

class numericcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric Count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Count should be formatted as a floating point number""
        self.examples = [26.0, 30.0, 1.0, 9.0, 6.0]
    def cast(self, val):
        return float(val)

class politicalaffiliation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political Affiliation""
        self.valid_values = ""Political Affiliation should be a string""
        self.format = ""Political Affiliation should be a string""
        self.examples = ['1986/PASART', '1990/PSDB', '1986/PMDB', '1986/PCdoB', '1986/PCN']
    def cast(self, val):
        return str(val)
        
MAPPING = {'ano': year, 
           'cargo': politicalposition, 
           'partido': politicalparty, 
           'nufnopais': numericcount, 
           'npartnopais': numericcount,
           'cabecacolig': numericcount, 
           'membrocolig': numericcount, 
           'coligado': numericcount, 
           'solo': numericcount, 
           'entroutotal': numericcount, 
           'naoentroutotal': numericcount, 
           'direto': numericcount, 
           'indireto': numericcount, 
           'label': politicalaffiliation}"
"class countycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""County Codes""
        self.valid_values = ""County Codes must be a six-digit number stored as a string""
        self.format = ""County codes must be 6-digit numbers stored as strings""
        self.examples = ['110100', '110112', '110113', '110221', '110224']
    def cast(self, val):
        return str(int(val)) # cast to int to remove any decimal points, then to string

class frequency(NumericSemanticType):
    def __init__(self):
        self.description = ""Frequency of occurrence""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Frequency should be a floating point number between 0 and 1""
        self.examples = [0.14, 0.297, 0.377, 0.6526946, 0.047904193]
    def cast(self, val):
        return round(float(val), 6) # rounding to 6 decimal places

MAPPING = {'countycode': countycode, 'flood': frequency, 'drought': frequency, 'disaster': frequency}"
"class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Codes""
        self.valid_values = ""Country codes must be a 3-letter string that are valid ISO 3166-1 alpha-3 codes""
        self.format = ""Country codes should be 3-letter uppercase strings""
        self.examples = ['AFG', 'BWA', 'BIH', 'DZA', 'AGO']
    def cast(self, val):
        val = str(val).strip()
        if len(val) != 3 or not val.isupper():
            raise ValueError(""Invalid country code"")
        return val

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names must be a valid country name string recognized by the pycountry library""
        self.format = ""Country names should be capitalized strings""
        self.examples = ['Afghanistan', 'Botswana', 'Bosnia and Herzegovina', 'Algeria', 'Angola']
    def cast(self, val):
        val = str(val).strip()
        if not pycountry.countries.get(name=val):
            raise ValueError(""Invalid country name"")
        return val.title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1900, datetime.now().year] # assuming valid years start from 1900
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [1965, 1975, 1985, 1996, 2006]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise ValueError(""Invalid year"")
        return val

class kaopen(NumericSemanticType):
    def __init__(self):
        self.description = ""kaopen""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""kaopen should be a floating point number""
        self.examples = [-1.8, -1.13, -0.76, 1.27, 2.54]
    def cast(self, val):
        if math.isnan(val):
            return val
        val = float(val)
        return val

class ckaopen(NumericSemanticType):
    def __init__(self):
        self.description = ""ckaopen""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""ckaopen should be a floating point number""
        self.examples = [-1.757101, -1.081, -0.707, 1.252, 2.532269]
    def cast(self, val):
        if math.isnan(val):
            return val
        val = float(val)
        return val

MAPPING = {'cn': NumericSemanticType, 'ccode': countrycode, 'countryname': countryname, 'year': year, 'kaopen': kaopen, 'ckaopen': ckaopen}"
"class constituency(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Constituency of a country""
        self.valid_values = ""It should be valid constituency names of a country""
        self.format = ""Names should be capitalized""
        self.examples = ['BIBIANI-ANHWIASO-BEKWAI', 'PRESTEA HUNI-VALLEY', 'JOMORO', 'HO CENTRAL', 'AGONA WEST']
    def cast(self, val):
        return str(val).upper()

class pollingstationcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Code for each polling station""
        self.valid_values = ""It should be valid polling station codes""
        self.format = ""Alpha numeric string""
        self.examples = ['A010102', 'A133203', 'A012002', 'A010403', 'A010201']
    def cast(self, val):
        return str(val)

class binaryscore(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, 2.0]
    def cast(self, val):
        return float(val) if float(val) in self.valid_values else float('nan')

class countofvotes(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of votes""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Integer number""
        self.examples = [270, 442, 582, 4, 1814]
    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

MAPPING = {
    'const': constituency,
    'pscode': pollingstationcode,
    'observer': binaryscore,
    'sat': binaryscore,
    'eovharass1': binaryscore,
    'eovharass2': binaryscore,
    'competition': binaryscore,
    'stationdensity': binaryscore,
    'validvotes1': countofvotes,
    'validvotes2': countofvotes,
    'rejectballot1': countofvotes,
    'rejectballot2': countofvotes
}"
"class publishinghouse(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The publishing house that published the book""
        self.valid_values = ""Must be a valid name of a publishing house""
        self.format = ""Must be a string representing the name of the publishing house""
        self.examples = ['Routledge', 'Springer', 'Cambridge', 'Chatham House', 'Rowman & Littlefield']
    def cast(self, val):
        return str(val).title()

class yearpublished(NumericSemanticType):
    def __init__(self):
        self.description = ""The year a book was published""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [2006, 2012, 2009, 2008, 2011]
    def cast(self, val):
        return int(val)

class numberofauthors(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of authors of a book""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Number of authors should be an integer""
        self.examples = [1, 2, 1, 1, 1]
    def cast(self, val):
        return int(val)

class numberofwomen(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of female authors of a book""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of female authors should be an integer""
        self.examples = [0, 1, 0, 0, 0]
    def cast(self, val):
        return int(val)

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class googlecitations(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of times a book was cited on Google Scholar""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of citations should be an integer""
        self.examples = [8, 15, 6, 47, 1]
    def cast(self, val):
        return int(val)

class academicrank(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The academic rank of the author(s) of a book""
        self.valid_values = ""Must be a valid academic rank""
        self.format = ""Must be a string representing the academic rank""
        self.examples = ['Unknown', 'Full', 'Reprint', 'Assistant', 'Associate']
    def cast(self, val):
        return str(val)

MAPPING = {'press': publishinghouse, 'year': yearpublished, 'noauthors': numberofauthors, 
           'nwoman': numberofwomen, 'unipress': booleanindicator, 'subfield': booleanindicator, 
           'allmale': booleanindicator, 'manonly': booleanindicator, 'womanonly': booleanindicator, 
           'allwomen': booleanindicator, 'didrank': booleanindicator, 'didcitation': booleanindicator,
           'googlecite6yr': googlecitations, 'googleciteall': googlecitations, 
           'googleoutfor10': googlecitations, 'coed': booleanindicator, 'anywoman': booleanindicator, 
           'paperback': booleanindicator, 'firstwoman': booleanindicator, 'academic': booleanindicator, 
           'polisciacademic': booleanindicator, 'rank': academicrank}"
"class yearmonth(NumericSemanticType):
    def __init__(self):
        self.description = ""Year and Month""
        self.valid_range = [190001, float('inf')]
        self.dtype = int
        self.format = ""Year and month should be represented as a 6-digit number YYYYMM""
        self.examples = [199001, 199002, 199003, 199004, 199005]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be represented as an integer""
        self.examples = [1, 0, 2, 3, 4]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)
        
class binary(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Binary variable""
        self.valid_values = ""This variable should take values in {0, 1}""
        self.format = ""Binary variable represented as 0 or 1""
        self.examples = [0, 1, 0, 1, 0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class visibility(NumericSemanticType):
    def __init__(self):
        self.description = ""Visibility""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Visibility should be represented as a floating point number""
        self.examples = [-0.35404775, -0.35404775, -0.35404775, 1.1776638, -0.35404775]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage should be represented as a floating point number""
        self.unit = ""Percentage is represented as a fraction of 1""
        self.examples = [0.032032296, 0.021496868, 0.01675179, 0.017916573, 0.01675179]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class relativechange(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Relative Change""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Relative change should be represented as a floating point number""
        self.unit = ""Relative change is represented as the difference from a base value, typically measured in percentage points""
        self.examples = [-115.67, 15.9, 8.07, -52.1, 0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

MAPPING = {'ym': yearmonth, 'countausvio': count, 'lrepression': count, 'lposdecision': count, 'lnegdecision': count, 'ldebate': count, 
           'lpublaus': count, 'lvisibausvio': visibility, 'poll3': percentage, 'dummysup': binary, 'dummyop': binary, 'ldasylum100': relativechange, 
           'ldunem100': relativechange, 'lethcomp100': relativechange}"
"class identifier(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifier of the ad""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Identifier should be a float number""
        self.examples = [6101955515440.0, 2.3842897661400708e+16, 6109751306711.0, 6103952957789.0, 2.384295197646026e+16]
    def cast(self, val):
        return float(val)

class organizationname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the organization""
        self.valid_values = ""Name should be a string""
        self.format = ""Name should be in proper case""
        self.examples = ['Nya Moderaterna', 'Socialdemokraterna i Stockholm', 'Centerpartiet', 'Socialdemokraterna', 'Moderaterna i Stockholms stad och län']
    def cast(self, val):
        return str(val).title()

class creationdatetime(NumericSemanticType):
    def __init__(self):
        self.description = ""Date and Time""
        self.valid_range = [0, float('inf')]
        self.dtype = datetime
        self.format = ""Date and Time should be in ISO format""
        self.examples = ['2018-08-17T13:46:49.939Z', '2018-08-22T19:29:39.234065Z', '2018-08-22T18:55:37.910885Z', '2018-08-22T17:40:45.200288Z', '2018-08-22T15:54:17.574866Z']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%dT%H:%M:%S.%fZ')

class probability(NumericSemanticType):
    def __init__(self):
        self.description = ""Probability of political ad""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Probability should be a float number between 0 and 1""
        self.examples = [0.0990357064994881, 0.8128642136960172, 0.9058867575623988, 0.9128300949012592, 0.9932264181091732]
    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 1 else float('nan')

class agegroup(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age group targeted by the ad""
        self.valid_values = ""Age group should be a string""
        self.format = ""Age group should be in the form 'Age to Age'""
        self.examples = ['18 and older', '18 to 50']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).lower().replace('och uppåt', 'and older')

class minimumage(NumericSemanticType):
    def __init__(self):
        self.description = ""Minimum age targeted by the ad""
        self.valid_range = [13, 120]
        self.dtype = int
        self.format = ""Minimum age should be an integer""
        self.examples = [13, 18, 20, 25, 30]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            num = int(val)
            return num if 13 <= num <= 120 else float('nan')

MAPPING = {'id': identifier, 'advertiser': organizationname, 'title': organizationname, 'createdat': creationdatetime, 'politicalprobability': probability, 'age': agegroup, 'minage': minimumage}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Country code'
        self.valid_range: list = [0, 1000] 
        self.dtype: object = int
        self.format: str = 'Country code should be an integer'
        self.examples: list = [700, 339, 615, 540, 160]
    def cast(self, val):
        return int(val)
    
class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description: str = 'Name of a country'
        self.valid_values: str = 'Country name should be a string'
        self.format: str = 'Country name should start with an uppercase letter'
        self.examples: list = ['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina']
    def cast(self, val):
        return str(val).title()

class countryabbreviation(CategoricalSemanticType):
    def __init__(self):
        self.description: str = 'Abbreviation of a country'
        self.valid_values: str = 'Country abbreviation should be a 3-char string'
        self.format: str = 'Country abbreviation should be an uppercase string'
        self.examples: list = ['AFG', 'ALB', 'ALG', 'ANG', 'ARG']
    def cast(self, val):
        return str(val).upper()
    
class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list = [0,1]
    def cast(self, val):
        return int(val)

class logvalue(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Log value'
        self.valid_range: list = [0, float('inf')] 
        self.dtype: object = float
        self.format: str = 'Log value should be a float'
        self.examples: list = []
    def cast(self, val):
        return round(float(val), 3)
        
MAPPING = {'ccode': countrycode, 
           'statenme': countryname,
           'stateabb': countryabbreviation,
           'osfcoop': binaryvalue,
           'hrsim9100': logvalue,
           'allsim9100': logvalue,
           'centrendcorrlog': logvalue,
           'alliance': binaryvalue,
           'regime': logvalue,
           'terr9100log': logvalue,
           'ustradelog': logvalue,
           'usaidlog': logvalue,
           'poplog': logvalue,
           'partyideo': binaryvalue,
           'treatment': binaryvalue,
           'lat': logvalue,
           'long': logvalue,
           'coophost': binaryvalue,
           'cooparrdetint': binaryvalue,
           'coopintel': binaryvalue,
           'coopair': binaryvalue,
           'edsim9100': logvalue}"
"class condition(NumericSemanticType):
    def __init__(self):
        self.description = ""A numeric condition""
        self.valid_range = [9.0, 15.0]
        self.dtype = float
        self.format = ""Condition should be a numeric value""
        self.examples = [10.0, 14.75, 9.0, 11.5, 13.2]
    def cast(self, val):
        val = float(val)
        if self.valid_range[0] <= val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid condition value')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [18.0, 69.0]
        self.dtype = float
        self.format = ""Age should be a numeric value""
        self.examples = [30.0, 24.0, 46.0, 25.0, 58.0]
    def cast(self, val):
        val = float(val)
        if self.valid_range[0] <= val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid age value')

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        val = float(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid gender value')

class state(CategoricalSemanticType):
    def __init__(self):
        self.description = ""State in the US""
        self.valid_values = ""State should be a string abbreviation of a US state (e.g., 'CA' for California)""
        self.format = ""State should be a string abbreviation""
        self.examples = ['CA', 'GA', 'PA', 'MO', 'CO']
    def cast(self, val):
        val = str(val)
        if val in [state.abbreviation for state in pycountry.subdivisions.get(country_code='US')]:
            return val
        else:
            raise Exception('Invalid state value')

class difference(NumericSemanticType):
    def __init__(self):
        self.description = ""Difference between two numeric values""
        self.valid_range = [-100.0, 100.0]
        self.dtype = float
        self.format = ""Difference should be a numeric value""
        self.examples = [0.0, -12.5, 20.83, 0.0, 0.0]
    def cast(self, val):
        val = float(val)
        if self.valid_range[0] <= val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid difference value')

MAPPING = {
    'condition2': condition, 
    'd002': age, 
    'd003': gender, 
    'd009': state, 
    'pp1aacangd': difference, 
    'p1p2aacangd': difference, 
    'pp2aacangd': difference, 
    'pp1aacanxd': difference, 
    'p1p2aacanxd': difference, 
    'pp2aacanxd': difference
}"
"class elevationmeter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The elevation in meters of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Elevation should be formatted as a floating point number (in meters)""
        self.unit = 'In meters' 
        self.examples: list = [1134.951, 742.314, 30.02, 336.742, 1350.71]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class countofneighboringvillages(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of neighboring villages""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""The count should be an integer""
        self.examples: list = [4, 20, 3, 20, 4]
    def cast(self, val):
        return int(val)

class booleanvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value')

class uniqueid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an entity""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""The ID should be an integer""
        self.examples: list = [45, 98, 9, 73, 15]
    def cast(self, val):
        return int(val)

class percent(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage values""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""The percentage should be a floating point number""
        self.examples: list = [0, 50, 25, 75, 100]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'meanelev1': elevationmeter, 'numsurrwholevills': countofneighboringvillages, 
           'villagecollaction': booleanvalue, 'hvcode': uniqueid, 'forestid': uniqueid, 
           'treat': booleanvalue, 'pscore4': percent}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country names""
        self.valid_values = ""Country names should be in the form of strings and should be recognized by the pycountry library""
        self.format = ""Country names should be capitalized properly""
        self.examples = ['Argentina', 'Australia', 'Austria', 'Belgium', 'Benin']
    def cast(self, val):
        country_name = str(val).title()
        try:
            if pycountry.countries.get(name=country_name) is not None:
                return country_name
            else:
                raise Exception('Invalid country name')
        except AttributeError:
            raise Exception('Invalid country name')

class percentrepresentation(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage representation""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage representation should be stored as a float""
        self.examples = [11.1, 22.65, 33.3, 0, 57.1]
    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid percentage representation')

class binaryrepresentation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid binary representation')

class indexrepresentation(NumericSemanticType):
    def __init__(self):
        self.description = ""Index representation""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Index representation should be stored as an integer""
        self.examples = [2, 4, 5, 3, 1]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0]:
            return num
        else:
            raise Exception('Invalid index representation')

MAPPING = {'country': country, 'womencourt': percentrepresentation, 'strongcourt': binaryrepresentation, 
           'strongcourtindex': indexrepresentation, 'strongcourtmelbinary': binaryrepresentation, 
           'auto': binaryrepresentation, 'semiauto': binaryrepresentation, 'multiselect': binaryrepresentation, 
           'divideappt': binaryrepresentation, 'womenleg': percentrepresentation, 'womenlawyer': percentrepresentation, 
           'literacyratio': percentrepresentation, 'gendergapindex': percentrepresentation, 
           'yrssincesuff': indexrepresentation, 'indselect': binaryrepresentation, 
           'meritselect': binaryrepresentation, 'judgeselect': binaryrepresentation, 
           'constitcourt': binaryrepresentation, 'courtsize': indexrepresentation, 
           'gdppercapita': NumericSemanticType, 'christianpercent': percentrepresentation, 
           'muslimpercent': percentrepresentation, 'catholicpercent': percentrepresentation, 
           'nonreligiouspercent': percentrepresentation}"
"class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name' or 'single name'""
        self.format = ""Only the first letter of each word in the name should be capitalized""
        self.examples = ['Suthdara', 'Jason', 'Alaysha', 'Chanthakath', 'Tanya']
    def cast(self, val):
        return str(val).title()

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class assessment(NumericSemanticType):
    def __init__(self):
        self.description = ""Assessment score""
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = ""Assessment score should be an integer value between 0 and 10""
        self.examples = [0, 2, 4, 6, 8, 10]
    def cast(self, val):
        return int(val)

class totalscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Total assessment score""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Total score should be an integer value greater than or equal to 0""
        self.examples = [6, 15, 20, 23, 34]
    def cast(self, val):
        return int(val)

MAPPING = {'candidate': personname, 'committeemember': personname, 'female': gender, 'fit': assessment, 'pubsgrants': assessment, 'agenda': assessment, 'climate': assessment, 'rowtotal': totalscore}"
"class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Name should be a string that matches a valid country name""
        self.format = ""Country names should be properly capitalized and spelled correctly""
        self.examples = ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is None:
            raise ValueError(f'Invalid country name: {val}')
        return country.name

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [2005, 2000, 2010, 2015, 1995]
    def cast(self, val):
        year = int(val)
        if year < 0 or year > datetime.now().year:
            raise ValueError(f'Invalid year: {year}')
        return year

class corruptionindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Corruption index of a country""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Corruption index should be a floating point number between 0 and 10""
        self.examples = [3.485, 1.763, 0.4, 2.3, 9.4]
    def cast(self, val):
        index = float(val)
        if index < 0 or index > 10:
            raise ValueError(f'Invalid corruption index: {index}')
        return index

class giniindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Gini index of a country""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Gini index should be a floating point number between 0 and 100""
        self.examples = [35.217, 6.339, 16.23, 30.765, 62.68]
    def cast(self, val):
        index = float(val)
        if index < 0 or index > 100:
            raise ValueError(f'Invalid Gini index: {index}')
        return index

MAPPING = {
    'country': countryname,
    'year': year,
    'corr': corruptionindex,
    'gini': giniindex
}"
"class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid value for gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age in years""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [12, 15, 17, 19, 22]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid age')
        return val

class decisionmaking(NumericSemanticType):
    def __init__(self):
        self.description = ""Decision making factor""
        self.valid_range = [1, 7]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        val = float(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid decision making factor')
        return val

MAPPING = {'gender': gender, 'age': age, 
           'cfc1': decisionmaking, 'cfc2': decisionmaking, 'cfc3': decisionmaking, 
           'cf4': decisionmaking, 'cf5': decisionmaking, 'cfc6': decisionmaking, 
           'cfc7': decisionmaking, 'cfc8': decisionmaking, 'cfc9': decisionmaking, 
           'cfc10': decisionmaking, 'cfc11': decisionmaking, 'cfc12': decisionmaking, 
           'cfc13': decisionmaking, 'cfc14': decisionmaking}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country names""
        self.valid_values = ""The names of the countries in the world""
        self.format = ""Country names should be capitalized and stored as strings""
        self.examples = ['India', 'Albania', 'Germany']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            val = str(val).strip()
            if pycountry.countries.get(name=val):
                return val
            elif val.lower() == ""total"":
                return ""Total""
            else:
                raise Exception('Invalid country name')

class numericvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric values, can be any real number""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Numeric values should be formatted as floating point numbers""
        self.examples = [1.2, 3.4, 5.6, 7.8, 9.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            val = str(val).strip()
            if val.lower() == ""total"":
                return ""Total""
            elif val.isnumeric():
                return float(val)
            else:
                raise Exception('Invalid numeric value')

MAPPING = {'evrsserie19982016ine': country,
           'b': numericvalue, 
           'c': numericvalue,
           'd': numericvalue,
           'e': numericvalue,
           'f': numericvalue,
           'g': numericvalue,
           'h': numericvalue,
           'i': numericvalue,
           'j': numericvalue,
           'k': numericvalue,
           'l': numericvalue,
           'm': numericvalue,
           'n': numericvalue,
           'o': numericvalue,
           'p': numericvalue,
           'q': numericvalue,
           'r': numericvalue,
           's': numericvalue,
           't': numericvalue}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [2010, 2000, 1990, 1980, 1970]
    def cast(self, val):
        return int(val)

class officeposition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Office Position""
        self.valid_values = ""Position can be either 'ESTATE DEPUTY' or 'FEDERAL DEPUTY'""
        self.format = ""Position should be stored as a string""
        self.examples = ['ESTATE DEPUTY', 'FEDERAL DEPUTY']
    def cast(self, val):
        return str(val).upper()

class brazilianstate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Brazilian State""
        self.valid_values = ""Brazilian states abbreviations""
        self.format = ""State should be stored as a string""
        self.examples = ['SP', 'RJ', 'MG', 'DF', 'BA']
    def cast(self, val):
        return str(val).upper()

class brazilianparty(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Brazilian Political Party""
        self.valid_values = ""Brazilian political party abbreviations""
        self.format = ""Party should be stored as a string""
        self.examples = ['PT', 'PV', 'PMDB', 'PSB', 'PSDB']
    def cast(self, val):
        return str(val).upper()

class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Jose Carlos da Silva', 'Francisco de Assis da Silva', 'Antonio Ferreira da Silva', 'Luiz Rogerio da Silva', 'Jose Luiz de Souza']
    def cast(self, val):
        return str(val).title()

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be a floating point number between 0 and 100""
        self.unit = ""Percentage""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return num
        else:
            raise Exception('Invalid percentage')

MAPPING = {'year': year, 
           'office': officeposition, 
           'state': brazilianstate, 
           'party': brazilianparty, 
           'nameofcandidate': personname, 
           'mostvotedcandidates': booleanindicator, 
           'elected': booleanindicator, 
           'woman': booleanindicator,
           'incumbent': booleanindicator, 
           'pctcampaignfund': percentage}"
"class partyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Political Party""
        self.valid_values = ""Name should be a string that represents the name of a political party""
        self.format = ""Name should be a properly capitalized string""
        self.examples = ['The Democratic Party', 'Civic Party', 'Youngspiration', 'Labour Party', 'League of Social Democrats']
    def cast(self, val):
        return str(val).title()

class establishmentdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of establishment of a political party""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Date should be in the format 'MM/DD/YYYY'""
        self.examples = [datetime(1994,10,2), datetime(2006,3,19), datetime(2015,2,7), datetime(2011,12,18), datetime(2006,10,1)]
    def cast(self, val):
        return pd.to_datetime(val, format='%m/%d/%Y', errors='coerce')

class disbandmentdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of disbandment of a political party""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Date should be in the format 'MM/DD/YYYY' or '.' indicating that the party has not been disbanded""
        self.examples = [""."", datetime(2020,6,30), datetime(2021,9,3), datetime(2021,5,20), datetime(2021,9,11)]
    def cast(self, val):
        return pd.to_datetime(val, format='%m/%d/%Y', errors='coerce') if val != '.' else np.nan

class politicalseat(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {
    'partynameeng': partyname,
    'partynamechi': partyname,
    'dateestablishment': establishmentdate,
    'datedisbandment': disbandmentdate,
    'gcseat': politicalseat,
    'fcseat': politicalseat,
    'dcseat': politicalseat
}"
"class countryiso(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""ISO country codes""
        self.valid_values = ""ISO 3166-1 alpha-3 codes""
        self.format = ""Three uppercase letters""
        self.examples = ['DZA', 'ARG', 'AZE', 'BHR', 'BLR']
    def cast(self, val):
        val = str(val)
        if val.isalpha() and len(val) == 3 and val.isupper():
            return val
        else:
            raise ValueError('Invalid ISO country code')

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of countries""
        self.valid_values = ""Names of recognized sovereign states""
        self.format = ""Title case strings""
        self.examples = ['Algeria', 'Argentina', 'Azerbaijan', 'Bahrain', 'Belarus']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise ValueError('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Years""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""4-digit integers""
        self.examples = [2008, 2010, 2012, 2014, 2016]
    def cast(self, val):
        val = int(val)
        if len(str(abs(val))) == 4:
            return val
        else:
            raise ValueError('Invalid year')

class binary(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary values""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        val = int(val)
        if val == 0 or val == 1:
            return val
        else:
            raise ValueError('Invalid binary value')

class index(NumericSemanticType):
    def __init__(self):
        self.description = ""Index values""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Positive integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val > 0:
            return val
        else:
            raise ValueError('Invalid index value')

class gdp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Floating point numbers""
        self.unit = ""In USD""
        self.examples = [4068219355.95, 132624401057.828, 11380444692237.1]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return val
        else:
            raise ValueError('Invalid GDP value')

class logvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Natural logarithm of a value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Floating point numbers""
        self.examples = [0.314810739840034, 2.19722457733622, 30.0629176205098]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return val
        else:
            raise ValueError('Invalid log value')

MAPPING = {'iso': countryiso, 'country': countryname, 'year': year, 'offrel': binary, 'formrelat': index, 'gni': gdp, 'dogint': index, 'groupvalue': index, 'offrellog': binary, 'dogintlog': logvalue, 'gnilog': logvalue}"
"class playname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of a Play""
        self.valid_values = ""Play name must be a string and should be one of the known plays in the Shakespearean oeuvre""
        self.format = ""The string should be in title case""
        self.examples = ['King Lear', 'Richard III', 'Romeo and Juliet', 'Othello', ""A Midsummer Night's Dream""]
    def cast(self, val):
        return str(val).title()

class convosize(NumericSemanticType):
    def __init__(self):
        self.description = ""Size of the Conversation""
        self.valid_range = [1, 21]
        self.dtype = int
        self.format = ""Conversation size should be an integer""
        self.examples = [1, 2, 4, 3, 1]
    def cast(self, val):
        return int(val)

class talk(NumericSemanticType):
    def __init__(self):
        self.description = ""Talk""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Talk should be an integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

MAPPING = {'playname': playname, 'convosize': convosize, 'talk': talk}"
"class municipalitycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Municipality code""
        self.valid_values = ""Municipality codes should be unique identifiers for municipalities""
        self.format = ""Municipality codes should be alphanumeric strings""
        self.examples = ['1234', 'A1B2', 'XYZ9', '78JK', 'LMN0']
    def cast(self, val):
        return str(val)

class description(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description""
        self.valid_values = ""Descriptions can be any string""
        self.format = ""Descriptions should be strings""
        self.examples = ['This is a description', 'Another description', 'Yet another description', 'One more description', 'And a final description']
    def cast(self, val):
        return str(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [1999, 2000, 2001, 2002, 2003]
    def cast(self, val):
        return int(val)

class cnae(NumericSemanticType):
    def __init__(self):
        self.description = ""CNAE code""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""CNAE codes should be integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class iswhite(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class establishmentsize(NumericSemanticType):
    def __init__(self):
        self.description = ""Establishment size""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Establishment size should be a floating point number""
        self.examples = [1.0, 2.5, 3.7, 4.2, 5.9]
    def cast(self, val):
        return float(val)

MAPPING = {
    'basededadosdaraispararegiõesdobrasilfocoemmercadodetrabalho': municipalitycode, 
    'b': description
}"
"class youtubevideoid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""YouTube Video ID""
        self.valid_values = ""YouTube video ID should be a string of length 11""
        self.format = ""YouTube video ID is a combination of alphanumeric characters""
        self.examples = ['UUuSDDrGOQA', 'ibNCZM2bMaI', 'rPNk74BqW2I', 'TSF1gFMJXJY', 'fxZiWWYcaeo']
    def cast(self, val):
        return str(val)

class uploadtimestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Upload Timestamp""
        self.valid_values = ""Upload timestamp should follow the datetime format 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Timestamps are in UTC""
        self.examples = ['2017-07-03 00:59:26', '2017-03-11 23:16:01', '2018-04-17 03:20:31', '2017-09-07 09:43:08', '2018-05-22 00:42:51']
    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class videoduration(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Video Duration""
        self.valid_values = ""Video duration should follow the format 'HH:MM:SS'""
        self.format = ""Video duration is in hours, minutes, and seconds""
        self.examples = ['0:00:55', '0:01:23', '0:03:45', '0:00:54', '0:02:06']
    def cast(self, val):
        return str(val)

class youtubelikes(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of YouTube Likes""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Likes should be integers""
        self.examples = [15, 1712, 7, 5, 1]
    def cast(self, val):
        return int(val)

class youtubedislikes(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of YouTube Dislikes""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Dislikes should be integers""
        self.examples = [7, 78, 0, 0, 0]
    def cast(self, val):
        return int(val)

class youtubeviews(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of YouTube Views""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Views should be floating point numbers""
        self.examples = [2439.0, 104026.0, 808.0, 22.0, 83.0]
    def cast(self, val):
        return float(val)

MAPPING = {'youtubevideoid': youtubevideoid, 'uploadts': uploadtimestamp, 'duration': videoduration, 'likes': youtubelikes, 'dislikes': youtubedislikes, 'views': youtubeviews}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_range = [0, 1000]
        self.dtype = int
        self.format = ""Country code should be an integer""
        self.examples = [540, 700, 516, 517, 625]
    def cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError('Invalid country code')

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Any valid country name""
        self.format = ""Country name should be a string, with the first letter of each word capitalized""
        self.examples = ['Sudan', 'Angola', 'Indonesia', 'Iraq', 'Uganda']
    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val.title()
        else:
            raise ValueError('Invalid country name')

class binarysemantictype(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise ValueError('Invalid binary value')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1975, 1978, 1988, 1963, 1983]
    def cast(self, val):
        try:
            return int(val)
        except:
            raise ValueError('Invalid year')

class populationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of Population""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Population percentage should be a float between 0 and 1""
        self.examples = [0.62, 0.119, 0.85, 0.15, 0.85]
    def cast(self, val):
        try:
            if 0 <= float(val) <= 1:
                return float(val)
            else:
                raise ValueError('Invalid population percentage')
        except:
            raise ValueError('Invalid population percentage')

MAPPING = {'ccode': countrycode, 'country': countryname, 'year': year, 'legalwing': binarysemantictype, 'stop': binarysemantictype, 
           'mixpoliticide': binarysemantictype, 'ncpoliticide': binarysemantictype, 'cpoliticide': binarysemantictype, 
           'politicide': binarysemantictype, 'guerrilla': binarysemantictype, 'assassination': binarysemantictype, 
           'coup': binarysemantictype, 'neutralintervention': binarysemantictype, 'protargetintervention': binarysemantictype, 
           'democracy': binarysemantictype, 'excludedpopulation': populationpercentage, 'mixedkilling': binarysemantictype, 
           'comsup': binarysemantictype}"
"class disciplinecategory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Discipline category under the Web of Science classification""
        self.valid_values = ""String representing the discipline category""
        self.format = ""Each word in the category should be capitalized""
        self.examples = ['Acoustics', 'Cell Biology', 'Agricultural Engineering', 'Art', 'Agriculture Dairy Animal Science']
    def cast(self, val):
        return str(val).title()

class broaderdisciplinecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Broader discipline category classification""
        self.valid_values = ""Should be one of the following values: 'Life Sciences & Biomedicine', 'Technology', 'Social Sciences', 'Physical Sciences', 'Arts & Humanities'""
        self.format = ""Exact match to one of the valid values""
        self.examples = ['Life Sciences & Biomedicine', 'Technology', 'Social Sciences', 'Physical Sciences', 'Arts & Humanities']
    def cast(self, val):
        return str(val)

class numberofpapers(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of scientific papers produced in selected cities""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be a non-negative integer""
        self.examples = [14995, 2449, 8230, 15048, 13379]
    def cast(self, val):
        return int(val)

class numberofcities(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of cities with papers in a specific category""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be a non-negative integer""
        self.examples = [245, 201, 237, 232, 242]
    def cast(self, val):
        return int(val)

class ratioofpapers(NumericSemanticType):
    def __init__(self):
        self.description = ""Ratio of papers produced in a specific discipline category""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a non-negative floating point number""
        self.examples = [0.139, 0.022, 0.076, 0.139, 0.124]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'disciplinewoscategory': disciplinecategory, 
           'broaderdisciplinecategory': broaderdisciplinecategory, 
           'numberofpapersproducedinselectedcities': numberofpapers, 
           'numberofcitieswithpapersinthatcategory': numberofcities,
           'ratioofpapers': ratioofpapers}"
"class usstate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""US State""
        self.valid_values = ""State should be a string that is the full name of the U.S. state""
        self.format = ""Only the first letter should be capitalized""
        self.examples = ['Texas', 'Georgia', 'Virginia', 'Kentucky', 'Missouri']
    def cast(self, val):
        return str(val).title()

class countyid(NumericSemanticType):
    def __init__(self):
        self.description = ""US County ID""
        self.valid_range = [1001, 56045]
        self.dtype = int
        self.format = ""County ID should be a whole number""
        self.examples = [1001, 1003, 1005, 1007, 1009]
    def cast(self, val):
        return int(val)

class obesityrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Obesity Rate""
        self.valid_range = [11.8, 47.9]
        self.dtype = float
        self.format = ""Obesity rate should be a floating point number""
        self.examples = [33.8, 27.2, 44.7, 40.3, 34.9]
    def cast(self, val):
        return float(val)

class incomeusd(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Income in USD""
        self.valid_range = [20061, 109437]
        self.dtype = float
        self.unit = 'In USD'
        self.format = ""Income should be a floating point number in USD units""
        self.examples = [48235, 44209, 28811, 36995, 41283]
    def cast(self, val):
        return float(val)

class leisuretime(NumericSemanticType):
    def __init__(self):
        self.description = ""Leisure Time""
        self.valid_range = [8.1, 41.4]
        self.dtype = float
        self.format = ""Leisure time should be a floating point number""
        self.examples = [28.6, 22.3, 31.8, 33.9, 28.0]
    def cast(self, val):
        return float(val)

class diabetesrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Diabetes Rate""
        self.valid_range = [3.8, 20.8]
        self.dtype = float
        self.format = ""Diabetes rate should be a floating point number""
        self.examples = [11.9, 8.8, 16.9, 13.8, 12.3]
    def cast(self, val):
        return float(val)

class logincome(NumericSemanticType):
    def __init__(self):
        self.description = ""Log of Income""
        self.valid_range = [9.9065, 11.6031]
        self.dtype = float
        self.format = ""Log of income should be a floating point number""
        self.examples = [10.7838, 10.6967, 10.2685, 10.5185, 10.6282]
    def cast(self, val):
        return float(val)

class usregion(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""US Region""
        self.valid_values = ""Region should be a string that is one of the following: ['S', 'MW', 'W', 'NE']""
        self.format = ""Region should be one or two capitalized letters""
        self.examples = ['S', 'MW', 'W', 'NE']
    def cast(self, val):
        return str(val).upper()

MAPPING = {'state': usstate, 'county': countyid, 'obesity': obesityrate, 'income': incomeusd, 'leisure': leisuretime, 'diabetes': diabetesrate, 'lnincome': logincome, 'usregion': usregion}"
"class yearofbirth(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of Birth""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year of Birth should be a 4-digit number.""
        self.examples = [1963, 1954, 1955, 1945, 1927]
    def cast(self, val):
        if isinstance(val, str):
            if val.isnumeric() and 1900 <= int(val) <= datetime.now().year:
                return int(val)
            else:
                raise Exception('Invalid Year of Birth')
        elif isinstance(val, int):
            if 1900 <= val <= datetime.now().year:
                return val
            else:
                raise Exception('Invalid Year of Birth')
        else:
            raise Exception('Invalid Year of Birth')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender can be either 1 (Male) or 2 (Female)""
        self.format = ""Gender should be stored as integers, where 1 is Male and 2 is Female""
        self.examples = [1, 2]
    def cast(self, val):
        if isinstance(val, str):
            if val == '1':
                return 1
            elif val == '2':
                return 2
            else:
                raise Exception('Invalid Gender')
        elif isinstance(val, int):
            if val == 1 or val == 2:
                return val
            else:
                raise Exception('Invalid Gender')
        else:
            raise Exception('Invalid Gender')

class codeable(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if isinstance(val, str):
            if val == '0':
                return 0
            elif val == '1':
                return 1
            else:
                raise Exception('Invalid Value')
        elif isinstance(val, int):
            if val == 0 or val == 1:
                return val
            else:
                raise Exception('Invalid Value')
        else:
            raise Exception('Invalid Value')

MAPPING = {'birthyr': yearofbirth, 'gender': gender, 'codeable': codeable, 'michelleobama': codeable, 'military': codeable, 'scientists': codeable}"
"class weight(NumericSemanticType):
    def __init__(self):
        self.description = 'A weight factor for a statistical sample'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'A positive floating point number'
        self.examples = [0.20, 0.68, 0.82, 1.05, 7.00]
    def cast(self, val):
        num = float(val)
        return round(num, 3)

class age(NumericSemanticType):
    def __init__(self):
        self.description = 'Age of a person in years'
        self.valid_range = [1, 150]
        self.dtype = int
        self.format = 'An integer from 1 to 150'
        self.examples = [36, 74, 37, 46, 63]
    def cast(self, val):
        return int(val)
        
class binaryresponse(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'A binary response to a question'
        self.valid_values = '1 or 2'
        self.format = 'An integer, either 1 or 2'
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)
        
class yearofbirth(NumericSemanticType):
    def __init__(self):
        self.description = 'Year of birth'
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = 'A four digit integer'
        self.examples = [1994, 1970, 1956, 1956, 1977]
    def cast(self, val):
        return int(val)

class usstate(CategoricalSemanticType):
    def __init__(self):
        self.description = 'U.S. state'
        self.valid_values = '1 through 56'
        self.format = 'An integer from 1 to 56'
        self.examples = [13, 20, 42, 39, 34]
    def cast(self, val):
        return int(val)

class pid3(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Political identification'
        self.valid_values = '1 through 5'
        self.format = 'An integer from 1 to 5'
        self.examples = [1, 2, 1, 1, 1]
    def cast(self, val):
        return int(val)

class pid7(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Political identification'
        self.valid_values = '1 through 8'
        self.format = 'An integer from 1 to 8'
        self.examples = [1, 7, 1, 1, 2]
    def cast(self, val):
        return int(val)

class ideo5(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Ideological identification'
        self.valid_values = '1 through 6'
        self.format = 'An integer from 1 to 6'
        self.examples = [1, 6, 2, 2, 3]
    def cast(self, val):
        return int(val)

class newsint(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Interest in news'
        self.valid_values = '1 through 2'
        self.format = 'An integer, either 1 or 2'
        self.examples = [2, 7, 1, 1, 4]
    def cast(self, val):
        if val == 32766:
            return float('nan')
        return int(val)

class pewreligimp(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Importance of religion'
        self.valid_values = '1 through 4'
        self.format = 'An integer from 1 to 4'
        self.examples = [4, 1, 1, 1, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'weight': weight, 'followup1': age, 'followup2': age, 'followup3': age, 'followup4': binaryresponse, 'birthyr': yearofbirth, 'gender': binaryresponse, 'race': binaryresponse, 'educ': binaryresponse, 'famincnew': binaryresponse, 'inputstate': usstate, 'pid3': pid3, 'pid7': pid7, 'ideo5': ideo5, 'newsint': newsint, 'pewreligimp': pewreligimp}"
"class timestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Timestamp""
        self.valid_values = ""Timestamps must fit the following format: 'YYYY-MM-DD HH:MM:SS'""
        self.format = ""Timestamps must be strings formatted as 'YYYY-MM-DD HH:MM:SS'""
        self.examples = ['2020-04-30 14:54:17', '2020-04-30 13:04:18', '2020-04-30 09:41:01', '2020-04-30 09:04:12', '2020-04-30 07:17:18']
    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d %H:%M:%S')

class binary_boolean(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val == 1.0 or val == 0.0:
            return val
        elif str(val).lower() in ['true', 'yes']:
            return 1.0
        else:
            return 0.0

class equipment_quality(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Quality of Equipment""
        self.valid_values = ""Quality levels are ['Boa', 'Má', 'Péssima', 'Muito boa', 'Excelente']""
        self.format = ""Quality is a string that must be one of the valid values""
        self.examples = ['Boa', 'Má', 'Péssima', 'Muito boa', 'Excelente']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            return 'Unknown'

class work_experience(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Work Experience""
        self.valid_values = ""Work experience is described as ['Entre 10 e 20 anos', 'Entre 5 a 10 anos', 'Menos de 5 anos', 'Mais de 20 anos']""
        self.format = ""Work experience is a string that must be one of the valid values""
        self.examples = ['Entre 10 e 20 anos', 'Entre 5 a 10 anos', 'Menos de 5 anos', 'Mais de 20 anos']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            return 'Unknown'

class brazilian_state(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Brazilian State""
        self.valid_values = ""Brazilian state should be in the format 'StateName (StateInitials)'""
        self.format = ""Brazilian state is a string that must match the valid values format""
        self.examples = ['São Paulo (SP)', 'Distrito Federal (DF)', 'Espírito Santo (ES)', 'Ceará (CE)', 'Paraná (PR)']
    def cast(self, val):
        if re.match(r'[A-Za-z\s]+\s\([A-Z]{2}\)', str(val)):
            return str(val)
        else:
            return 'Unknown'

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender is described as ['Masculino', 'Feminino', 'Prefiro não dizer']""
        self.format = ""Gender is a string that must be one of the valid values""
        self.examples = ['Masculino', 'Feminino', 'Prefiro não dizer']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            return 'Unknown'

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a non-negative integer""
        self.examples = [24, 35, 39, 45, 64]
    def cast(self, val):
        return math.floor(float(val))

MAPPING = {'data': timestamp, 'medo': binary_boolean, 'preparo': binary_boolean, 'equip': binary_boolean, 
           'equipquali': equipment_quality, 'treinamento': binary_boolean, 'dintrab': binary_boolean, 
           'dincid': binary_boolean, 'compcovid': binary_boolean, 'govest': binary_boolean, 
           'chefia': binary_boolean, 'superiores': binary_boolean, 'tempotrab': work_experience, 
           'uf': brazilian_state, 'temporeg': work_experience, 'vinculosreg': work_experience, 
           'sex': gender, 'idade': age}"
"class surveyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each survey response""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Survey ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class surveyrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating provided in the survey response""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Rating should be a float within the range 0 to 10""
        self.examples = [0, 2.5, 5, 7.5, 10]
    def cast(self, val):
        rating = float(val)
        if 0 <= rating <= 10:
            return round(rating, 2)
        else:
            raise Exception('Invalid survey rating')

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class maritalstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Marital status of the survey respondent""
        self.valid_values = ""Marital status should be an integer between 1 and 6""
        self.format = ""Each marital status is represented by a unique integer""
        self.examples = [1, 2, 3, 4, 5, 6]
    def cast(self, val):
        status = int(val)
        if status in range(1, 7):
            return status
        else:
            raise Exception('Invalid marital status')

class jobdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Job description of the survey respondent""
        self.valid_values = ""Job description should be a string""
        self.format = ""Job description should be in uppercase""
        self.examples = ['PROFESSIONALS', 'ADMIN SUPPORT WORKERS', '1ST/MID LEVEL OFFICIALS &', 'OPERATIVES (SEMI-SKILLED)', 'TECHNICIANS']
    def cast(self, val):
        return str(val).upper()

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight associated with each survey response""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a positive float""
        self.examples = [0.5972582697868347, 0.75, 0.896, 1.041, 7.19623327255249]
    def cast(self, val):
        return float(val)

MAPPING = {
    'no': surveyid, 
    'promotegood': surveyrating,
    'uncomposition': binaryresponse,
    'visualpriv': binaryresponse, 
    'audpriv': binaryresponse,
    'jobsatis': surveyrating,
    'jddecision': binaryresponse,
    'jdcohelp': binaryresponse,
    'jdtoomch': binaryresponse,
    'wkfamconflict': binaryresponse,
    'martstatus': maritalstatus,
    'children': binaryresponse,
    'eeocodedesc': jobdescription,
    'genderm': binaryresponse,
    'agecat4': surveyrating,
    'jobtenure3': surveyrating,
    'wgt': weight,
    'educ3': binaryresponse,
    'wunemplyes': binaryresponse,
    'operations': binaryresponse,
    'wfairnessyes': binaryresponse,
    'prodloss': surveyrating,
    'lifsathappy': surveyrating,
    'worthpurp': surveyrating,
    'relationd': surveyrating,
    'finwb': surveyrating,
    'engagement': surveyrating
}"
"class timeindecimal(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Time in decimal""
        self.valid_values = ""Time in decimal should be a string that represents a decimal number""
        self.format = ""Only digit characters and decimal point are allowed""
        self.examples = ['-239.167.824.074.074', '-240.625', '-23.625', '-23.909.837.962.963', '145.694.444.444.444']
    def cast(self, val):
        return str(val).replace('.', '')

class trustlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of Trust in an entity""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Trust level should be a floating point number from 0 to 10""
        self.examples = [0.0, 3.0, 5.0, 7.0, 10.0]
    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            return float('nan')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a Person""
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = ""First letter should be capitalized""
        self.examples = ['Male', 'Female']
    def cast(self, val):
        return str(val).title()

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a Person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be a whole number""
        self.examples = [20, 40, 53, 59, 65]
    def cast(self, val):
        return int(val)

class employmentstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Employment status of a Person""
        self.valid_values = ""Employment status should be either 'Unemployed' or 'Other'""
        self.format = ""First letter should be capitalized""
        self.examples = ['Unemployed', 'Other']
    def cast(self, val):
        return str(val).title()

class unemploymentduration(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unemployment duration of a Person""
        self.valid_values = ""Unemployment duration should be a string that represents a range of weeks""
        self.format = ""The format should be 'X-Y weeks'""
        self.examples = ['21 weeks or more', '11-15 weeks', '0-5 weeks', '6-10 weeks', '16-20 weeks']
    def cast(self, val):
        return str(val)

class unemploymentperiods(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of unemployment periods of a Person""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Unemployment periods should be a whole number from 1 to 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class children(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Number of children a Person has""
        self.valid_values = ""Number of children should be a string that represents the quantity of children""
        self.format = ""The format should be 'None', 'One child', 'Two children', 'More than two children'""
        self.examples = ['None', 'One child', 'Two children', 'More than two children']
    def cast(self, val):
        return str(val)

class education(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education level of a Person""
        self.valid_values = ""Education level should be a string that represents the level of education""
        self.format = ""The format should be 'Primary School', 'Vocational school', 'University', 'Highschool'""
        self.examples = ['Primary School', 'Vocational school', 'University', 'Highschool']
    def cast(self, val):
        return str(val)

class pressurelevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of Pressure a Person has""
        self.valid_range = [0, 4]
        self.dtype = float
        self.format = ""Pressure level should be a floating point number from 0 to 4""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            return float('nan')

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)


MAPPING = {'numerictime': timeindecimal, 'trustingovernment': trustlevel, 'trustinparliament': trustlevel,
           'trustincourts': trustlevel, 'trustinthepublicsector': trustlevel, 'trustinthemedia': trustlevel,
           'gender': gender, 'age': age, 'employmentstatus': employmentstatus, 'unemploymentduration': unemploymentduration,
           'unemploymentperiods': unemploymentperiods, 'children': children, 'education': education,
           'toomanyactivities': pressurelevel, 'toomanydemands': pressurelevel, 'toolittlecontrol': pressurelevel,
           'expectation': binaryresponse}"
"class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        num = float(val)
        if num == 0.0 or num == 1.0:
            return num
        else:
            raise Exception('Invalid binary value')

class satisfactionlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Levels of satisfaction""
        self.valid_range = [1.0, 5.0]
        self.dtype = float
        self.format = ""Should be a discrete number between 1 to 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num >= 1.0 and num <= 5.0:
            return round(num)
        else:
            raise Exception('Invalid satisfaction level')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a natural number""
        self.examples = [22.0, 38.0, 46.0, 33.0, 53.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return round(num)
        else:
            raise Exception('Invalid age')

class incomelevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Income levels""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a positive number""
        self.examples = [217500.0, 116200.0, 72000.0, 194000.0, 168900.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid income level')

MAPPING = {'y': binaryvalue, 't1': binaryvalue, 'x1': binaryvalue, 'x2': satisfactionlevel, 'x3': binaryvalue, 'x4': age, 'x5': age, 'x6': age, 'x7': age, 'x8': satisfactionlevel, 'x9': incomelevel, 'x10': incomelevel, 'x11': incomelevel, 'x12': binaryvalue, 'x13': binaryvalue, 'x14': binaryvalue, 'x15': binaryvalue, 'x16': binaryvalue, 'x17': satisfactionlevel}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""1 and 2, where 1 refers to Male and 2 refers to Female""
        self.format = ""Gender must be represented as 1 or 2""
        self.examples = ['1', '2', '1', '2', '2']
    def cast(self, val):
        return str(int(val))

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person in years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [27, 22, 26, 27, 24]
    def cast(self, val):
        return int(val)

class cfc(NumericSemanticType):
    def __init__(self):
        self.description = ""Consideration of future consequences (cfc) score""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""CFC score should be a floating point number in the range 1-5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if math.isnan(num):
            return num
        if num < 1.0 or num > 5.0:
            raise Exception('Invalid cfc score')
        return round(num, 1)

MAPPING = {'gender': gender, 'age': age, 
           'cfc1': cfc, 'cfc2': cfc, 'cfc3': cfc, 'cfc4': cfc, 'cfc5': cfc, 'cfc6': cfc, 'cfc7': cfc, 'cfc8': cfc, 
           'cfc9': cfc, 'cfc10': cfc, 'cfc11': cfc, 'cfc12': cfc, 'cfc3r': cfc, 'cfc4r': cfc, 'cfc5r': cfc, 
           'cfc9r': cfc, 'cfc10r': cfc, 'cfc11r': cfc, 'cfc12r': cfc}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an individual in years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [26, 47, 51, 27, 63]
    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid age')
        return val

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of an individual""
        self.valid_values = ""1, 2 and 3 where 1 represents male, 2 represents female and 3 represents other""
        self.format = ""Sex is represented by an integer (1, 2 or 3)""
        self.examples = [1, 2, 3, 2, 1]
    def cast(self, val):
        val = int(val)
        if val not in [1, 2, 3]:
            raise Exception('Invalid sex')
        return val

class nationality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality of an individual""
        self.valid_values = ""Any valid nationality""
        self.format = ""Nationality should be a string""
        self.examples = ['Irish', 'British', 'Polish', 'English', 'German']
    def cast(self, val):
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid nationality')
        return val

class education(NumericSemanticType):
    def __init__(self):
        self.description = ""Education level of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Education level should be a positive integer""
        self.examples = [5, 5, 7, 7, 7]
    def cast(self, val):
        val = int(val)
        if val < 0:
            raise Exception('Invalid education level')
        return val

class currentlystudent(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        val = int(val)
        if val not in self.valid_values:
            raise Exception('Invalid student status')
        return val

class cfc(NumericSemanticType):
    def __init__(self):
        self.description = ""CFC scale value""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""CFC scale value should be an integer between 1 and 7""
        self.examples = [7, 4, 6, 2, 5]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 7:
            raise Exception('Invalid CFC scale value')
        return val

MAPPING = {
    'age': age,
    'sex': sex,
    'nationality': nationality,
    'education': education,
    'currentlystudent': currentlystudent,
    'cfc1': cfc,
    'cfc2': cfc,
    'cfc3': cfc,
    'cfc4': cfc,
    'cfc5': cfc,
    'cfc6': cfc,
    'cfc7': cfc,
    'cfc8': cfc,
    'cfc9': cfc,
    'cfc10': cfc,
    'cfc11': cfc,
    'cfc12': cfc,
    'cfc13': cfc,
    'cfc14': cfc
}"
"class coloniaselection(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Selections of the Colonias""
        self.valid_values = ""Only numeric values or 'COLONIAS SELECCIONADAS' are valid""
        self.format = ""Either a string ('COLONIAS SELECCIONADAS') or a numeric value""
        self.examples = ['COLONIAS SELECCIONADAS', '1', '2', '3', '4']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val == 'COLONIAS SELECCIONADAS':
            return val
        else:
            return str(int(val))

class colonianame(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of the Colonias""
        self.valid_values = ""Names should be a string""
        self.format = ""Names should be capitalized""
        self.examples = ['Altares', 'Cerro de la Campana', 'La Matanza', 'Las Pilas', 'Bella Vista']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

class verification(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Verification status of the Colonias""
        self.valid_values = ""Either 'VERIFICADO 100%' or a numeric percentage""
        self.format = ""Either a string ('VERIFICADO 100%') or a numeric value""
        self.examples = ['VERIFICADO 100%', '30']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        if val == 'VERIFICADO 100%':
            return val
        else:
            return str(int(val)) + '%'
            
class totalhouses(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of houses""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Housing numbers should be integers""
        self.examples = [160, 0, 749, 307, 258]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)
            
MAPPING = {'c': coloniaselection, 'd': colonianame, 'e': verification, 'g': totalhouses}"
"class idtype(NumericSemanticType):
    def __init__(self):
        self.description = ""An identification number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""The ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        id_num = int(val)
        if id_num > 0:
            return id_num
        else:
            raise Exception('Invalid ID number')

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date should be in 'DD/MM/YYYY' format""
        self.format = ""Day and month should be two digit numbers, and year should be four digit number""
        self.examples = ['15/02/2012', '04/10/2012', '12/10/2012', '19/10/2012', '02/10/2012']
    def cast(self, val):
        try:
            datetime.strptime(val, '%d/%m/%Y')
            return val
        except ValueError:
            raise Exception('Invalid date format')

class category(NumericSemanticType):
    def __init__(self):
        self.description = ""A categorical representation""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""The category should be a positive integer (1, 2, or 3)""
        self.examples = [1, 2, 3]
    def cast(self, val):
        cat = int(val)
        if cat in self.valid_range:
            return cat
        else:
            raise Exception('Invalid category')

class outlier(NumericSemanticType):
    def __init__(self):
        self.description = ""Possibly contains outliers""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The value should be a positive integer""
        self.examples = [1, 8, 21, 16]
    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid number')

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The rating should be a positive floating point number""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        rate = float(val)
        if rate >= 0:
            return rate
        else:
            raise Exception('Invalid rating')

MAPPING = {'v01': idtype, 'date': date, 'v03': category, 'v05': outlier, 'v06': outlier, 'v07': outlier, 'v08': outlier, 'v09': rating, 'v010': rating, 'v011': outlier, 'v012': outlier, 'v013': outlier, 'v014': outlier, 'v015': outlier, 'v0161': rating, 'v0162': rating, 'v0163': rating, 'v0164': rating, 'v0165': rating, 'v0166': rating, 'v017': outlier, 'v018': outlier, 'v019': outlier, 'v020': outlier, 'v021': outlier, 'v022': outlier, 'v023': outlier}"
"class phonenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Phone number is a sequence of digits dialed to connect a call.""
        self.valid_range = [1000000000, 9999999999]
        self.dtype = int
        self.format = ""Phone number should be a 10-digit integer""
        self.examples = [4046345507, 6785195206, 4046274855, 4048766408, 4048926128]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid phone number')
        return num

class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string""
        self.format = ""Only the first letter of the name should be capitalized""
        self.examples = ['Ercell', 'Erica', 'William', 'Elbert', 'Edward']
    def cast(self, val):
        return str(val).title()

class binary(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num not in self.valid_values:
            raise ValueError('Invalid binary value')
        return num

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 130]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [22, 24, 54, 68, 44]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError('Invalid age')
        return num

MAPPING = {'phone': phonenumber, 'first': personname, 'sex': binary, 'script': binary, 'support': binary, 'caller': personname, 'callsex': binary, 'callage': age, 'calllgbt': binary, 'black': binary, 'interact': binary}"
"class jobdifficultyrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating of job difficulty""
        self.valid_range = [1, 6]
        self.dtype = float
        self.format = ""Job difficulty should be a floating point number ranging from 1 (least difficult) to 6 (most difficult)""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if 1 <= num <= 6:
            return round(num, 1)
        else:
            return float('nan')

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return float('nan')

class agecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Age category of a person""
        self.valid_range = [1, 4]
        self.dtype = float
        self.format = ""Age category should be a floating point number ranging from 1 (youngest) to 4 (oldest)""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        num = float(val)
        if 1 <= num <= 4:
            return round(num, 1)
        else:
            return float('nan')

class booleanexperience(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return float('nan')

class workexperience(NumericSemanticType):
    def __init__(self):
        self.description = ""Work experience category""
        self.valid_range = [1, 3]
        self.dtype = float
        self.format = ""Work experience category should be a floating point number ranging from 1 (least experienced) to 3 (most experienced)""
        self.examples = [1.0, 2.0, 3.0]
    def cast(self, val):
        num = float(val)
        if 1 <= num <= 3:
            return round(num, 1)
        else:
            return float('nan')

class satisfactionwithlife(NumericSemanticType):
    def __init__(self):
        self.description = ""Satisfaction with life rating""
        self.valid_range = [0, 9.99]
        self.dtype = float
        self.format = ""Satisfaction with life should be a floating point number ranging from 0 (least satisfied) to 9.99 (most satisfied)""
        self.examples = [0.0, 2.22, 4.44, 6.66, 9.99]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 9.99:
            return round(num, 2)
        else:
            return float('nan')

class factory(NumericSemanticType):
    def __init__(self):
        self.description = ""Factory identifier""
        self.valid_range = [1, 2]
        self.dtype = float
        self.format = ""Factory identifier should be a floating point number either 1 or 2""
        self.examples = [1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num in [1,2]:
            return round(num, 1)
        else:
            return float('nan')

MAPPING = {
    'jdtoomch': jobdifficultyrating, 
    'jdsay': jobdifficultyrating, 
    'gender': gender, 
    'agecat4': agecategory, 
    'smoking': booleanexperience, 
    'wexpens': workexperience, 
    'wsaffoodhous': satisfactionwithlife, 
    'yessexharassfactory': booleanexperience, 
    'jobtenure3': workexperience, 
    'educ3': booleanexperience, 
    'married': booleanexperience, 
    'threatenyes': booleanexperience, 
    'sexharassyouyes': booleanexperience, 
    'leaving01': booleanexperience, 
    'emotabuseh01': booleanexperience, 
    'sexabuseh01': booleanexperience, 
    'physabuseh01': booleanexperience, 
    'factoryf': factory, 
    'verbalabuse01': booleanexperience
}"
"class jobtenurelevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job Tenure Level""
        self.valid_values = ""Job Tenure Level should be 1.0 (Low), 2.0 (Medium), or 3.0 (High)""
        self.format = ""The values should be either 1.0, 2.0 or 3.0""
        self.examples = [1.0, 2.0, 3.0]
    def cast(self, val):
        if val in [1.0, 2.0, 3.0]:
            return val
        else:
            raise Exception('Invalid job tenure level')

class smokingstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid smoking status')

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid gender')

class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_values = ""Age Category should be 1.0 (Young), 2.0 (Adult), 3.0 (Senior), or 4.0 (Old)""
        self.format = ""The values should be either 1.0, 2.0, 3.0 or 4.0""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        if val in [1.0, 2.0, 3.0, 4.0]:
            return val
        else:
            raise Exception('Invalid age category')

class educationlevel(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid education level')

class maritalstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid marital status')

class abuseexperienced(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid abuse experienced status')

class disabilitydays(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in [0.0, 1.0]:
            return val
        else:
            raise Exception('Invalid disability days status')

MAPPING = {'jobtenure3': jobtenurelevel, 'smoking': smokingstatus, 'gender': gender, 'agecat4': agecategory, 
           'educ3': educationlevel, 'married': maritalstatus, 'emotabuseh01': abuseexperienced, 
           'sexabuseh01': abuseexperienced, 'physabuseh01': abuseexperienced, 'sexharassfactyes': abuseexperienced, 
           'verbalabuse01': abuseexperienced, 'disabilitydaysyes': disabilitydays}"
"class raceofcaller(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race of the caller""
        self.valid_values = ""Race of the caller can be either 'black' or 'non-black'""
        self.format = ""Race of the caller should be stored as strings""
        self.examples = ['non-black', 'black', 'non-black', 'black', 'non-black']
    def cast(self, val):
        val = str(val).lower()
        if val in ['black', 'non-black']:
            return val
        else:
            raise ValueError('Invalid race')

class supportyn(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be formatted as an integer""
        self.examples = [2364, 5275, 3603, 6189, 2490]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class group(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

class volrace(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

class age(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age group""
        self.valid_values = ""Age group can be a string representing the age range""
        self.format = ""Age group should be stored as strings""
        self.examples = ['25-34', '55-64', '65-74', '35-44', '45-54']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val)

class agecat(NumericSemanticType):
    def __init__(self):
        self.description = ""Categorical representation of age""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Age category should be an integer between 1 and 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val in range(1, 8):
            return val
        else:
            raise ValueError('Invalid age category')

class income(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Estimated income range""
        self.valid_values = ""Income can be a string representing the income range""
        self.format = ""Income should be stored as strings""
        self.examples = ['Under $10,000', '$10,000 - $14,999', '$15,000 - $19,999', '$20,000 - $24,999', '$30,000 - $34,999']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val)

class inccat(NumericSemanticType):
    def __init__(self):
        self.description = ""Categorical representation of income""
        self.valid_range = [1, 15]
        self.dtype = int
        self.format = ""Income category should be an integer between 1 and 15""
        self.examples = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = int(val)
        if val in range(1, 16):
            return val
        else:
            raise ValueError('Invalid income category')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender can be either 'M' or 'F'""
        self.format = ""Gender should be stored as strings""
        self.examples = ['M', 'F', 'M', 'F', 'M']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = str(val).upper()
        if val in ['M', 'F']:
            return val
        else:
            raise ValueError('Invalid gender')

class married(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif val in [0, 1]:
            return val
        else:
            raise ValueError('Invalid value')

class presenceofchildren(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Y', 'N']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = str(val).upper()
        if val in ['Y', 'N']:
            return val
        else:
            raise ValueError('Invalid value')

class homeowner(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Home ownership status""
        self.valid_values = ""Status can be either 'OWNER' or 'RENTER'""
        self.format = ""Status should be stored as strings""
        self.examples = ['OWNER', 'RENTER', 'OWNER', 'RENTER', 'OWNER']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        val = str(val).upper()
        if val in ['OWNER', 'RENTER']:
            return val
        else:
            raise ValueError('Invalid home ownership status')

class yearsinschool(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Median years in school""
        self.valid_values = ""Years in school can be a string representing the number of years""
        self.format = ""Years in school should be stored as strings""
        self.examples = ['Less Than 12', '12', '13-15', '16', 'Over 16']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val)

class educ(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        elif val in [1, 2]:
            return val
        else:
            raise ValueError('Invalid value')

MAPPING = {'raceofcaller': raceofcaller, 'supportyn': supportyn, 'caseid': id, 'caseidfirst': id, 'group': group,
           'volrace': volrace, 'age': age, 'agecat': agecat, 'estincome': income, 'inccat': inccat, 'gender': gender,
           'married': married, 'presenceofchildren': presenceofchildren, 'homeowner': homeowner, 
           'medianyearsinschool': yearsinschool, 'educ': educ}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [2001, 1990, 2020, 1985, 2015]
    def cast(self, val):
        return int(val)

class casename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a legal case""
        self.valid_values = ""Name should be a string""
        self.format = ""Case names should be in Title Case, with the format 'Applicant v. Respondent'""
        self.examples = ['Eweida and Others v. the United Kingdom (48420/10)', 'Bayatyan v. Armenia [GC]', 'Bukhartyan v. Armenia', 'Knights of the Golden Lotus v. France (50615/07)', 'Pyramid Temple v. France (50471/07)']
    def cast(self, val):
        return str(val).title()

class judge(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a judge""
        self.valid_values = ""Name should be a string""
        self.format = ""Judges' names should be in Title Case""
        self.examples = ['Vajic', 'Rozakis', 'Spielmann', 'Hajiyev', 'Kovler']
    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Name should be a string""
        self.format = ""Country names should be in Title Case and correspond to a valid country name as per the ISO standard""
        self.examples = ['Greece', 'Norway', 'Denmark', 'Croatia', 'Turkey']
    def cast(self, val):
        return pycountry.countries.lookup(str(val).title()).name

class yesno(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        if val == 1 or val == 0:
            return val
        else:
            raise Exception('Invalid input')

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Score should be a floating point number""
        self.examples = [1.2, 2.2, 3.4, 0.1, 6.4]
    def cast(self, val):
        return float(val)

MAPPING = {'year':year, 'year1976':year, 'case':casename, 'judge':judge, 'jcountry':country, 'jscore':score, 'jcommonlaw':yesno, 'vote':yesno, 'decision':yesno, 'unanimous':yesno, 'defendant':country, 'dcscore':score, 'ownstate':yesno, 'immigration':yesno, 'eu':yesno, 'wenarrow':yesno, 'we':yesno, 'muslim':yesno, 'expression':yesno, 'atheistagnostic':yesno, 'christian':yesno, 'cjw':yesno, 'plaintiff':yesno}"
"class timestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Timestamp in format 'MM/DD/YYYY HH:MM:SS'""
        self.valid_values = ""Timestamps must fit the following format: 'MM/DD/YYYY HH:MM:SS'""
        self.format = ""Timestamps must be stored as strings""
        self.examples = ['5/9/2021 1:58:14', '5/9/2021 3:23:53', '5/8/2021 12:45:22']
    def cast(self, val):
        try:
            return datetime.strptime(str(val), '%m/%d/%Y %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')
        except ValueError:
            raise Exception('Invalid timestamp')

class binarycategorical(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Binary Categorical Variable""
        self.valid_values = ""This variable should only take two distinct values""
        self.format = ""These values are represented as strings""
        self.examples = ['������������������������', '���������������� ������ ����������������������']
    def cast(self, val):
        return str(val)

class ternarycategorical(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Ternary Categorical Variable""
        self.valid_values = ""This variable should only take three distinct values""
        self.format = ""These values are represented as strings""
        self.examples = ['���������������� ���� ��������', '���� ���� ��������', '�������� ����']
    def cast(self, val):
        return str(val)

class multivaluecategorical(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Multi-value Categorical Variable""
        self.valid_values = ""This variable can take multiple distinct values""
        self.format = ""These values are represented as strings""
        self.examples = ['��������', '��������, ������ ���������� ����������, �������������� ���� ����', '��������, ������ ���������� ����������']
    def cast(self, val):
        return str(val)

MAPPING = {'var1': timestamp, 'var3': binarycategorical, 'var4': binarycategorical, 'var5': binarycategorical, 'var6': binarycategorical, 'var7': binarycategorical, 'var8': ternarycategorical, 'var9': ternarycategorical, 'var10': ternarycategorical, 'var11': ternarycategorical, 'var12': ternarycategorical, 'var13': ternarycategorical, 'var15': multivaluecategorical}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dates in the format YYYY/MM""
        self.valid_values = ""Dates should be formatted as YYYY/MM""
        self.format = ""Dates should be in the format YYYY/MM""
        self.examples = [""'2005/01"", ""'2005/02"", ""'2005/03"", ""'2005/04"", ""'2005/05""]
    def cast(self, val):
        return datetime.strptime(val, ""'%Y/%m"")
        
class quantity(NumericSemanticType):
    def __init__(self):
        self.description = ""Quantity of a commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Quantity should be an integer value""
        self.examples = [10, 50, 75, 100, 200]
    def cast(self, val):
        return int(val)
        
class value(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Value of a commodity in USD""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.unit = 'In USD'
        self.examples = [10.0, 50.0, 75.0, 100.0, 200.0]
    def cast(self, val):
        return float(val)
        
class hhi(NumericSemanticType):
    def __init__(self):
        self.description = ""Herfindahl-Hirschman Index""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""HHI should be a floating point number between 0 and 1""
        self.examples = [0.1, 0.2, 0.5, 0.7, 1.0]
    def cast(self, val):
        return float(val)
        
class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of a commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer value""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
        
class ban(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
        
class quota(NumericSemanticType):
    def __init__(self):
        self.description = ""Quota of a commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Quota should be an integer value""
        self.examples = [10, 50, 75, 100, 200]
    def cast(self, val):
        return int(val)
        
class production(NumericSemanticType):
    def __init__(self):
        self.description = ""Production of a commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Production should be an integer value""
        self.examples = [10, 50, 75, 100, 200]
    def cast(self, val):
        return int(val)
        
class demand(NumericSemanticType):
    def __init__(self):
        self.description = ""Demand of a commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Demand should be an integer value""
        self.examples = [10, 50, 75, 100, 200]
    def cast(self, val):
        return int(val)
        
class googletrend(NumericSemanticType):
    def __init__(self):
        self.description = ""Google Trend data""
        self.valid_range = [0, 100]
        self.dtype = int
        self.format = ""Google Trend data should be an integer value between 0 and 100""
        self.examples = [10, 20, 30, 40, 50]
    def cast(self, val):
        return int(val)

MAPPING = {'date': date, 'japanchinaq': quantity, 'japanchinav': value, 'japanhhi': hhi, 'japancount': count, 'japanhhinormal': hhi, 'japanchinaytdq': quantity, 'japanworldq': quantity, 'japanworldv': value, 'uschinaq': quantity, 'uschinaqytd': quantity, 'usworldq': quantity, 'usworldv': value, 'uschinav': value, 'ushhi': hhi, 'uscount': count, 'ushhinormal': hhi, 'exportban': ban, 'shortban': ban, 'shortban2': ban, 'nationalization': ban, 'quota': quota, 'halfquota': quota, 'chinaproduction': production, 'chinademand': demand, 'googletrend': googletrend}"
"class studentlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Student Level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Student level should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class condition(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class yearborn(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of Birth""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year of birth should be an integer less than or equal to current year""
        self.examples = [1992, 1985, 1963, 1978, 1991]
    def cast(self, val):
        if val > datetime.now().year:
            return np.nan
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender should be either 1 or 2""
        self.format = ""Gender should be represented as an integer, where 1 represents Male and 2 represents Female""
        self.examples = [1, 2]
    def cast(self, val):
        if val not in [1, 2]:
            return np.nan
        return int(val)

MAPPING = {
    'student': studentlevel,
    'condition': condition,
    'yearborn': yearborn,
    'gender': gender
}"
"class uniqueid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for the row""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Unique Identifiers should be integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class vignum(NumericSemanticType):
    def __init__(self):
        self.description = ""The vignette number""
        self.valid_range = [1, 8]
        self.dtype = int
        self.format = ""Vignette number should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class uniquevigid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for the vignette""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Unique Vignette Identifiers should be integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class practiceid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for the practice""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Practice Identifiers should be integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class knowledgecode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A code representing the knowledge of the veterinarian""
        self.valid_values = ""The valid values are ['preventpneumonia', 'suspectswaterymouth', 'suspectspneumonia', 'preventwaterymouth']""
        self.format = ""Knowledge codes are strings""
        self.examples = ['preventpneumonia', 'suspectswaterymouth', 'suspectspneumonia', 'preventwaterymouth']
    def cast(self, val):
        return str(val)
class farmercode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A code representing the farmer""
        self.valid_values = ""The valid values are ['10yrsrare', 'newclient', '10yrsreg']""
        self.format = ""Farmer codes are strings""
        self.examples = ['10yrsrare', 'newclient', '10yrsreg']
    def cast(self, val):
        return str(val)
class vetcode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['noothervet', 'othervets']
    def cast(self, val):
        return str(val)
class timecode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['runninglate', 'notrunninglate']
    def cast(self, val):
        return str(val)
class habitcode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['neverused', 'sametimeeveryyear']
    def cast(self, val):
        return str(val)
class easecode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['happytopay', 'notwanttopay']
    def cast(self, val):
        return str(val)
class confidencecode(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['confident', 'notconfident']
    def cast(self, val):
        return str(val)
class outcomea(NumericSemanticType):
    def __init__(self):
        self.description = ""Outcome a""
        self.valid_range = [1, 11]
        self.dtype = int
        self.format = ""Outcome a should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class outcomeb(NumericSemanticType):
    def __init__(self):
        self.description = ""Outcome b""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Outcome b should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
class agebin(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age group of the veterinarian""
        self.valid_values = ""The valid values are ['>31', '<=30']""
        self.format = ""Age group is a string""
        self.examples = ['>31', '<=30']
    def cast(self, val):
        return str(val)
class practicesa(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['yesSA', 'noSA']
    def cast(self, val):
        return str(val)
class region(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Region of the veterinarian""
        self.valid_values = ""Region is a string""
        self.format = ""Region is a string""
        self.examples = ['WalesCNESWEng', 'ScotNWEng', 'SEEng', 'NIreland']
    def cast(self, val):
        return str(val)
class agreeableness(NumericSemanticType):
    def __init__(self):
        self.description = ""Agreeableness score of the veterinarian""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Agreeableness score should be an integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)
MAPPING = {'uniqueid': uniqueid, 'vignum': vignum, 'uniquevigid': uniquevigid, 'practiceid': practiceid, 'knowledgecode': knowledgecode, 'farmercode': farmercode, 'vetcode': vetcode, 'timecode': timecode, 'habitcode': habitcode, 'easecode': easecode, 'confidencecode': confidencecode, 'outcomea': outcomea, 'outcomeb': outcomeb, 'agebin': agebin, 'practicesa': practicesa, 'region': region, 'agreeableness': agreeableness}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dates""
        self.valid_values = ""Dates must be in the form MM/DD/YYYY""
        self.format = ""Dates must be in the form MM/DD/YYYY""
        self.examples = ['4/11/2019', '3/6/2019', '6/15/2018', '11/3/2016', '2/4/2019']
    def cast(self, val):
        try:
            return datetime.strptime(val, '%m/%d/%Y').strftime('%m/%d/%Y')
        except ValueError:
            raise ValueError(""Incorrect data format, should be MM/DD/YYYY"")

class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City Names""
        self.valid_values = ""City names should be capitalized strings""
        self.format = ""City names should be capitalized strings""
        self.examples = ['Los Angeles', 'Edwardsville', 'Philadelphia', 'Little Rock', 'Denton']
    def cast(self, val):
        return str(val).title()

class state(CategoricalSemanticType):
    def __init__(self):
        self.description = ""US State Abbreviations""
        self.valid_values = ""State abbreviations should be capitalized and two letters long""
        self.format = ""State abbreviations should be capitalized and two letters long""
        self.examples = ['CA', 'PA', 'TX', 'FL', 'IN']
    def cast(self, val):
        if re.match(r'^[A-Z]{2}$', val):
            return val
        else:
            raise ValueError(""Incorrect format, should be two letters long"")

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names should be capitalized and valid country names""
        self.format = ""Country names should be capitalized and valid country names""
        self.examples = ['United States', 'Canada', 'Hong Kong']
    def cast(self, val):
        if CountryInfo(val):
            return val
        else:
            raise ValueError(""Invalid country name"")

class companyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Company Names""
        self.valid_values = ""Company names should be capitalized strings""
        self.format = ""Company names should be capitalized strings""
        self.examples = ['Rutgers University Libraries', 'SIU Edwardsville', 'University of California, Berkeley', 'University of Arkansas at Little Rock', 'George Mason University']
    def cast(self, val):
        return str(val).title()

class industry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Industry Names""
        self.valid_values = ""Industry names should be strings""
        self.format = ""Industry names should be strings""
        self.examples = ['Academic/Research (College/University)']
    def cast(self, val):
        return str(val)

class jobfunction(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Job Functions""
        self.valid_values = ""Job functions should be strings""
        self.format = ""Job functions should be strings""
        self.examples = ['Other', 'Scholarly Communication/Copyright', 'Administration/Management', 'Other / Not listed', 'Reference']
    def cast(self, val):
        return str(val)

class jobtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job Types""
        self.valid_values = ""Job types should be either 'Full-time' or 'Part-time'""
        self.format = ""Job types should be either 'Full-time' or 'Part-time'""
        self.examples = ['Full-time', 'Part-time']
    def cast(self, val):
        if val in ['Full-time', 'Part-time']:
            return val
        else:
            raise ValueError(""Invalid job type, should be either 'Full-time' or 'Part-time'"")

class jobduration(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job Durations""
        self.valid_values = ""Job durations should be either 'Indefinite', '6-12 Months', or '1-2 Years'""
        self.format = ""Job durations should be either 'Indefinite', '6-12 Months', or '1-2 Years'""
        self.examples = ['Indefinite', '6-12 Months', '1-2 Years']
    def cast(self, val):
        if val in ['Indefinite', '6-12 Months', '1-2 Years']:
            return val
        else:
            raise ValueError(""Invalid job duration, should be either 'Indefinite', '6-12 Months', or '1-2 Years'"")

class mineducation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Minimum Education Requirements""
        self.valid_values = ""Minimum education requirements should be either 'Master's Degree' or 'BA/BS/Undergraduate'""
        self.format = ""Minimum education requirements should be either 'Master's Degree' or 'BA/BS/Undergraduate'""
        self.examples = [""Master's Degree"", 'BA/BS/Undergraduate']
    def cast(self, val):
        if val in [""Master's Degree"", 'BA/BS/Undergraduate']:
            return val
        else:
            raise ValueError(""Invalid minimum education requirement, should be either 'Master's Degree' or 'BA/BS/Undergraduate'"")

class minexperience(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Minimum Experience Requirements""
        self.valid_values = ""Minimum experience requirements should be one of '3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years'""
        self.format = ""Minimum experience requirements should be one of '3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years'""
        self.examples = ['3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years']
    def cast(self, val):
        if val in ['3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years']:
            return val
        else:
            raise ValueError(""Invalid minimum experience requirement, should be one of '3-5 Years', '2-3 Years', '1-2 Years', '0-1 Year', '5-7 Years'"")

class salary(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Salaries in USD""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Salaries should be floats""
        self.unit = 'USD'
        self.examples = [42000.0, 50000.0, 55000.0, 62868.0, 95000.0]
    def cast(self, val):
        return float(val)

MAPPING = {'start': date, 'expire': date, 'city': city, 'state': state, 'country': country, 'companyname': companyname,
           'industry': industry, 'jobfunction': jobfunction, 'jobtype': jobtype, 'jobduration': jobduration,
           'mineducation': mineducation, 'minexperience': minexperience, 'salary': salary, 'salaryhigh': salary}"
"class facilitycode(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for a medical facility""
        self.valid_range = [10101, 90201]
        self.dtype = int
        self.format = ""Facility codes should be integers ranging from 10101 to 90201""
        self.examples = [10101, 10105, 10118, 10124, 10130]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class hospital(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class pnurse(NumericSemanticType):
    def __init__(self):
        self.description = ""The proportion of nurses in a medical facility""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""pnurse should be a float between 0 and 1, representing a proportion""
        self.examples = [0.6923077, 0.33333334, 0.33333334, 0.6666667, 0.6666667]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class hivprev14(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The prevalence of HIV in 2014""
        self.valid_range = [0, 37.333332]
        self.dtype = float
        self.format = ""hivprev14 should be a float between 0 and 37.333332, representing a percentage""
        self.unit = ""Percentage""
        self.examples = [18.0, 18.181818, 14.634146, 10.0, 11.627908]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class mtct14(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The rate of mother to child transmission of HIV in 2014""
        self.valid_range = [0, 50]
        self.dtype = float
        self.format = ""mtct14 should be a float between 0 and 50, representing a percentage""
        self.unit = ""Percentage""
        self.examples = [0.0, 14.285715, 0.0, 0.0, 0.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class survival14(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The survival rate in 2014""
        self.valid_range = [50, 100]
        self.dtype = float
        self.format = ""survival14 should be a float between 50 and 100, representing a percentage""
        self.unit = ""Percentage""
        self.examples = [100.0, 85.71429, 100.0, 100.0, 100.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class hivtest14(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The rate of HIV testing in 2014""
        self.valid_range = [54.761906, 100]
        self.dtype = float
        self.format = ""hivtest14 should be a float between 54.761906 and 100, representing a percentage""
        self.unit = ""Percentage""
        self.examples = [98.18182, 78.723404, 93.333336, 85.71429, 72.093025]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lntested(NumericSemanticType):
    def __init__(self):
        self.description = ""The natural logarithm of the number of people tested""
        self.valid_range = [1.7917595, 9.031812]
        self.dtype = float
        self.format = ""lntested should be a float between 1.7917595 and 9.031812""
        self.examples = [6.1696105, 4.0943446, 4.5217886, float('nan'), 5.1817837]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lnart(NumericSemanticType):
    def __init__(self):
        self.description = ""The natural logarithm of the number of people receiving antiretroviral therapy""
        self.valid_range = [0, 5.765191]
        self.dtype = float
        self.format = ""lnart should be a float between 0 and 5.765191""
        self.examples = [3.9702919, 0.6931472, 1.9459101, float('nan'), 1.7917595]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lncosttested(NumericSemanticType):
    def __init__(self):
        self.description = ""The natural logarithm of the cost of testing""
        self.valid_range = [2.449549, 6.2694573]
        self.dtype = float
        self.format = ""lncosttested should be a float between 2.449549 and 6.2694573""
        self.examples = [3.729312, 4.8842654, 4.1110787, float('nan'), 4.1271315]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class lncostart(NumericSemanticType):
    def __init__(self):
        self.description = ""The natural logarithm of the cost of antiretroviral therapy""
        self.valid_range = [4.469213, 8.520749]
        self.dtype = float
        self.format = ""lncostart should be a float between 4.469213 and 8.520749""
        self.examples = [5.928631, 8.285463, 6.686957, float('nan'), 7.517155]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class urban(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class provincecode(NumericSemanticType):
    def __init__(self):
        self.description = ""A code representing a province""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Province codes should be integers ranging from 1 to 6""
        self.examples = [2, 2, 2, 2, 2]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class contra(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A score representing the level of contraception use""
        self.valid_values = ""Contraception scores should be integers ranging from 0 to 4""
        self.format = ""Contraception scores should be integers""
        self.examples = [4, 4, 4, 4, 4]
    def cast(self, val):
        return int(val)

class prophylaxis(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A score representing the level of prophylaxis use""
        self.valid_values = ""Prophylaxis scores should be integers ranging from 0 to 6""
        self.format = ""Prophylaxis scores should be integers""
        self.examples = [6, 6, 6, 6, 5]
    def cast(self, val):
        return int(val)

class antenatal(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A score representing the level of antenatal care""
        self.valid_values = ""Antenatal scores should be integers ranging from 0 to 12""
        self.format = ""Antenatal scores should be integers""
        self.examples = [11, 10, 11, 11, 10]
    def cast(self, val):
        return int(val)

MAPPING = {'facilitycode': facilitycode, 'hospital': hospital, 'pnurse': pnurse, 'hivprev14': hivprev14, 
           'mtct14': mtct14, 'survival14': survival14, 'hivtest14': hivtest14, 'lntested': lntested, 
           'lnart': lnart, 'lncosttested': lncosttested, 'lncostart': lncostart, 'urban': urban, 
           'provincecode': provincecode, 'contra': contra, 'prophylaxis': prophylaxis, 'antenatal': antenatal}"
"class province(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Provinces in a Country""
        self.valid_values = ""Province should be a string that is a valid province name""
        self.format = ""Province names should be capitalized""
        self.examples = ['Total Country', 'East Azerbaijan', 'West Azerbaijan', 'Ardabil', 'Esfahan']
    def cast(self, val):
        return str(val).title()

class population(NumericSemanticType):
    def __init__(self):
        self.description = ""Population count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Population should be a non-negative integer""
        self.examples = [37905669, 1882031, 1555127, 631972, 2476021]
    def cast(self, val):
        return abs(int(val))

MAPPING = {'province': province, 'male': population, 'female': population, 'total': population}"
"class donationamount(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The donation amount in USD""
        self.valid_range = [0, 1000]
        self.dtype = int
        self.format = ""Donation amount should be formatted as an integer""
        self.unit = 'In USD' 
        self.examples = [500, 0, 200, 1000, 750]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class numericid(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric ID""
        self.valid_range = [100, 800]
        self.dtype = int
        self.format = ""Numeric ID should be an integer""
        self.examples = [100, 200, 300, 400, 500]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class dayofweek(NumericSemanticType):
    def __init__(self):
        self.description = ""Day of the week""
        self.valid_range = [1, 8]
        self.dtype = int
        self.format = ""Day of the week should be an integer between 1 and 8""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        return int(val)

class treatmentgroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Treatment group""
        self.valid_values = ""Treatment group can only be one of the following: ['france', 'un', 'control']""
        self.format = ""Treatment group should be a string""
        self.examples = ['france', 'un', 'control']
    def cast(self, val):
        return str(val).lower()

MAPPING = {'donation': donationamount, 'fra': booleanindicator, 'un': booleanindicator, 'enumid': numericid, 'day': dayofweek, 
           'cluster': numericid, 'untreat': booleanindicator, 'fratreat': booleanindicator, 'adultsmix': booleanindicator, 
           'tuatrust1': booleanindicator, 'tuatrust2': booleanindicator, 'bamako': booleanindicator, 'children': numericid, 
           'untrust': numericid, 'tuafriend': booleanindicator, 'educ': numericid, 'female': booleanindicator, 
           'neighborhoodmakeup': numericid, 'govtrust': numericid, 'untalk': numericid, 'unsee': numericid, 
           'treatment': treatmentgroup, 'age': numericid, 'bambara': booleanindicator, 'rebelviolany': booleanindicator, 
           'violopinion': numericid, 'biasopinion': numericid, 'natgovtrust': numericid, 'locgovtrust': numericid, 
           'uncontact': numericid}"
"class entityid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique entity identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Entity ID should be a non-negative integer""
        self.examples = [1, 3, 4, 5, 6]
    def cast(self, val):
        val = int(val)
        if val < 1:
            raise ValueError('Entity ID must be a non-negative integer')
        return val

class binaryflag(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        val = int(val)
        if val not in self.valid_values:
            raise ValueError(f'Value must be one of {self.valid_values}')
        return val

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a four digit integer""
        self.examples = [2006, 1984, 1986, 1985, 1988]
    def cast(self, val):
        val = int(val)
        if val < 0 or val > datetime.now().year:
            raise ValueError('Year must be a four digit integer and not in the future')
        return val

class specificityindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Specificity Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Specificity Index should be a non-negative floating point number""
        self.examples = [np.nan, 4.0, 6.0, 1.0, 7.0]
    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        if val < 0:
            raise ValueError('Specificity Index must be a non-negative number')
        return val

MAPPING = {'id': entityid, 'retrenchment': binaryflag, 'specific': specificityindex, 'specificd': binaryflag, 'rwgov': binaryflag, 'year': year}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Years as integers""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [1955, 1968, 1982, 1995, 2009]
    def cast(self, val):
        return int(val)

class mood(NumericSemanticType):
    def __init__(self):
        self.description = ""Mood as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Mood should be a floating point number""
        self.examples = [55.562, 59.417, 60.488, 64.195, 64.699]
    def cast(self, val):
        return float(val)

class caselaw(NumericSemanticType):
    def __init__(self):
        self.description = ""Case Law as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Case Law should be a floating point number""
        self.examples = [-1.421054, 1.771928, 12.96491, 19.157892, 16.350874]
    def cast(self, val):
        return float(val)

class policy(NumericSemanticType):
    def __init__(self):
        self.description = ""Policy as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Policy should be a floating point number""
        self.examples = [-2.368422, -3.157896, -3.94737, -3.736844, -5.526318]
    def cast(self, val):
        return float(val)

class unemployment(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Unemployment rate as a percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Unemployment rate should be a floating point number""
        self.unit = ""Percentage""
        self.examples = [5.5, 4.4, 4.1, 4.3, 6.8]
    def cast(self, val):
        return round(float(val), 1)

class inflation(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Inflation rate as a percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Inflation rate should be a floating point number""
        self.unit = ""Percentage""
        self.examples = [0.4, 3.0, 2.9, 1.8, 1.7]
    def cast(self, val):
        return round(float(val), 1)

class segalmedmeancum(NumericSemanticType):
    def __init__(self):
        self.description = ""SegalMedMeanCum as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""SegalMedMeanCum should be a floating point number""
        self.examples = [1.2288889, 1.67, 2.086111, 2.5744445, 3.0627778]
    def cast(self, val):
        return float(val)

class partygdp(NumericSemanticType):
    def __init__(self):
        self.description = ""PartyGDP as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""PartyGDP should be a floating point number""
        self.examples = [-7.1986003, -1.9757589, -2.0159292, 0.9034639, -7.1733356]
    def cast(self, val):
        return float(val)

class caselawnonsal(NumericSemanticType):
    def __init__(self):
        self.description = ""CaseLawNonSal as a numeric representation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""CaseLawNonSal should be a floating point number""
        self.examples = [24.89475, 58.193, 94.49125, 121.7895, 145.08775]
    def cast(self, val):
        return float(val)

MAPPING = {'year': year, 'mood': mood, 'caselaw': caselaw, 'policy': policy, 'unemployment': unemployment, 
           'inflation': inflation, 'segalmedmeancum': segalmedmeancum, 'partygdp': partygdp, 'caselawnonsal': caselawnonsal}"
"class cityid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID for cities""
        self.valid_range = [1001, 23169]
        self.dtype = int
        self.format = ""City ID should be a 4-digit integer""
        self.examples = [1001, 8119, 14064, 20024, 23169]
    def cast(self, val):
        return int(val)

class timepoint(NumericSemanticType):
    def __init__(self):
        self.description = ""Year when the conflict happened""
        self.valid_range = [233, 1849]
        self.dtype = int
        self.format = ""Time point should be a 4-digit year""
        self.examples = [1453, 1552, 1632, 1688, 1849]
    def cast(self, val):
        return int(val)

class typeconflict(NumericSemanticType):
    def __init__(self):
        self.description = ""Conflict Type""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Conflict type should be an integer ranging from 1-3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class typedetail(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Detailed description of conflict type""
        self.valid_values = ""Details of conflict type should be represented by a combination of letters and numbers""
        self.format = ""Conflict details should be represented as a string with a combination of letters and numbers""
        self.examples = ['cd1', 'b3', 'a1', 'e2', 'f1']
    def cast(self, val):
        return str(val)

class warlabel(NumericSemanticType):
    def __init__(self):
        self.description = ""Label for wars""
        self.valid_range = [0, 30]
        self.dtype = int
        self.format = ""War label should be an integer ranging from 0-30""
        self.examples = [0, 2, 30]
    def cast(self, val):
        return int(val)

class overreported(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return int(val)

class uncertainty(NumericSemanticType):
    def __init__(self):
        self.description = ""Uncertainty in the conflict report""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""Uncertainty should be an integer ranging from 0-2""
        self.examples = [0, 1, 2]
    def cast(self, val):
        return int(val)

class range(NumericSemanticType):
    def __init__(self):
        self.description = ""Range of conflict""
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = ""Range should be an integer ranging from 0-5""
        self.examples = [0, 2, 5]
    def cast(self, val):
        return int(val)

class thirtyywleader(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Leader during the Thirty Years' War""
        self.valid_values = ""Leader should be represented by a combination of letters and numbers""
        self.format = ""Leader should be represented as a string with a combination of letters and numbers""
        self.examples = ['0', '28', '5', 'm', '36']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class thirtyywconflictparty(NumericSemanticType):
    def __init__(self):
        self.description = ""Party involved in the conflict during the Thirty Years' War""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""Conflict party should be represented as an integer ranging from 0-2""
        self.examples = [0, 1, 2]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class thirtyywterritory(NumericSemanticType):
    def __init__(self):
        self.description = ""Territory during the Thirty Years' War""
        self.valid_range = [0, 30]
        self.dtype = float
        self.format = ""Territory should be represented as a float ranging from 0-30""
        self.examples = [0.0, 18.5, 21.0, 30.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class thirtyywcountry(NumericSemanticType):
    def __init__(self):
        self.description = ""Country during the Thirty Years' War""
        self.valid_range = [0, 8]
        self.dtype = int
        self.format = ""Country should be represented as an integer ranging from 0-8""
        self.examples = [0, 3, 7, 8]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class source(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Source of the conflict report""
        self.valid_values = ""Source should be represented by a combination of letters and numbers""
        self.format = ""Source should be represented as a string with a combination of letters and numbers""
        self.examples = ['10b', '10', '11', '10a']
    def cast(self, val):
        return str(val)

MAPPING = {'cityid': cityid, 'timepoint': timepoint, 'typeconflict': typeconflict, 'typedetail': typedetail, 'warlabel': warlabel, 'overreported': overreported, 'uncertainty': uncertainty, 'range': range, 'thirtyywleader': thirtyywleader, 'thirtyywconflictparty': thirtyywconflictparty, 'thirtyywterritory': thirtyywterritory, 'thirtyywcountry': thirtyywcountry, 'source': source}"
"class askedheavenhell(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class beliefheavenhell(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Belief in heaven and hell""
        self.valid_values = ""0.0 for no belief, 1.0 for belief in either heaven or hell, 2.0 for belief in both heaven and hell""
        self.format = ""Stored as float""
        self.examples = ['0.0', '1.0', '2.0']
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class donationprice(NumericSemanticType):
    def __init__(self):
        self.description = ""Donation price in local currency""
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = ""Stored as float""
        self.examples = [0.0, 1.0, 2.0]
    def cast(self, val):
        return float(val)

class donationyes(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class femaler(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if not math.isnan(val) else float('nan')

class agebracketr(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age bracket of the respondent""
        self.valid_values = ""0.0 for 18-25 years, 1.0 for 26-35 years, 2.0 for 36-45 years, 3.0 for 46+ years""
        self.format = ""Stored as float""
        self.examples = ['0.0', '1.0', '2.0', '3.0']
    def cast(self, val):
        return float(val)

class educationr(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education level of the respondent""
        self.valid_values = ""0.0 for no education, 1.0 for primary education, 2.0 for secondary education and above""
        self.format = ""Stored as float""
        self.examples = ['0.0', '1.0', '2.0']
    def cast(self, val):
        return float(val)

class economicr(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Economic status of the respondent""
        self.valid_values = ""0.0 for very poor, 1.0 for poor, 2.0 for average, 3.0 for rich""
        self.format = ""Stored as float""
        self.examples = ['0.0', '1.0', '2.0', '3.0']
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class politicr(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Political affiliation of the respondent""
        self.valid_values = ""0.0 for no affiliation, 1.0 for affiliation with a local party, 2.0 for affiliation with a national party""
        self.format = ""Stored as float""
        self.examples = ['0.0', '1.0', '2.0']
    def cast(self, val):
        return float(val) if not math.isnan(val) else float('nan')

class christian(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class country(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'askedheavenhell': askedheavenhell, 'beliefheavenhell': beliefheavenhell, 'donationprice': donationprice, 'donationyes': donationyes, 'femaler': femaler, 'agebracketr': agebracketr, 'educationr': educationr, 'economicr': economicr, 'politicr': politicr, 'christian': christian, 'country': country}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of an event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples: list[int] = [1988, 1996, 2000, 2005, 2012]
    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= datetime.now().year:
            return num
        else:
            raise Exception('Invalid year')

class adins(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ADINs initiated""
        self.valid_values = ""ADINs should be integers represented as strings""
        self.format = ""ADINs should be positive numbers""
        self.examples: list[str] = ['207', '64', '336', '182', '52']
    def cast(self, val):
        num = int(val)
        if num > 0:
            return str(num)
        else:
            raise Exception('Invalid ADINs value')

MAPPING = {
    'governorsadins': adins, 
    'b': year, 
    'c': year, 
    'd': year, 
    'e': year, 
    'f': year, 
    'g': year, 
    'h': year, 
    'i': adins, 
    'j': year, 
    'k': year, 
    'l': year, 
    'm': year, 
    'n': year, 
    'o': year, 
    'p': year, 
    'q': year, 
    'r': year, 
    's': year, 
    't': year, 
    'u': year, 
    'v': year, 
    'w': year, 
    'x': year, 
    'y': year, 
    'z': year
}"
"class binaryflag(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        elif val is None or pd.isna(val):
            return float('nan')
        else:
            raise Exception('Invalid value')

class reviewerank(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Rank of the reviewer""
        self.valid_values = ""Rank should be between 1 and 4""
        self.format = ""Rank should be an integer value""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        if val in range(1, 5):
            return val
        elif val is None or pd.isna(val):
            return float('nan')
        else:
            raise Exception('Invalid rank')

MAPPING = {
    'revfem': binaryflag,
    'revselfcite': binaryflag,
    'revfemcites': binaryflag,
    'numfemcites': NumericSemanticType,
    'treated': binaryflag,
    'nummalecites': NumericSemanticType,
    'rankofreviewer': reviewerank,
    'grad': binaryflag,
    'asst': binaryflag,
    'assoc': binaryflag,
    'full': binaryflag
}"
"class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]  # 0 for male, 1 for female
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120] # assuming 120 as maximum age
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [23, 53, 24, 16, 23]
    def cast(self, val):
        return int(val)

class educationlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education level""
        self.valid_values = ""['Degree', 'HighschoolDiploma', 'MiddleSchool']""
        self.format = ""Education level should be one of ['Degree', 'HighschoolDiploma', 'MiddleSchool']""
        self.examples = ['HighschoolDiploma', 'HighschoolDiploma', 'HighschoolDiploma', 'MiddleSchool', 'HighschoolDiploma']
    def cast(self, val):
        if str(val) not in ['Degree', 'HighschoolDiploma', 'MiddleSchool']:
            raise Exception('Invalid education level')
        return str(val)

class nationality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality of a person""
        self.valid_values = ""Nationality should be a valid country name.""
        self.format = ""Nationality should be a string""
        self.examples = ['Italian', 'Italian', 'Italian', 'Italian', 'Italian']
    def cast(self, val):
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid nationality')
        return str(val)

class likertscale(NumericSemanticType):
    def __init__(self):
        self.description = ""Likert scale from 1 to 5""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Likert scale should be an integer from 1 to 5""
        self.examples = [4, 3, 5, 2, 2]
    def cast(self, val):
        if int(val) not in range(1, 6):
            raise Exception('Invalid Likert scale value')
        return int(val)

MAPPING = {'gender': gender, 
           'age': age, 
           'education': educationlevel, 
           'nationality': nationality, 
           'cfc1': likertscale, 
           'cfc2': likertscale, 
           'cfc3r': likertscale, 
           'cfc4r': likertscale, 
           'cfc5r': likertscale, 
           'cfc6': likertscale, 
           'cfc7': likertscale, 
           'cfc8': likertscale, 
           'cfc9r': likertscale, 
           'cfc10r': likertscale, 
           'cfc11r': likertscale, 
           'cfc12r': likertscale}"
"class ranking(NumericSemanticType):
    def __init__(self):
        self.description = ""Ranking of an entity""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Ranking should be formatted as a whole number""
        self.examples: list[int] = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country names should be valid names recognized by pycountry""
        self.format = ""Country name should be capitalized""
        self.examples = ['Sweden', 'United States', 'France', 'Australia', 'New Zealand']
    def cast(self, val):
        country_name = str(val).strip()
        if pycountry.countries.get(name=country_name) is not None:
            return country_name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a whole number""
        self.examples: list[int] = [1766, 1966, 1978, 1982, 1982]
    def cast(self, val):
        year = int(val)
        if year < 0 or year > datetime.now().year:
            raise Exception('Invalid year')
        return year

MAPPING = {'ranking': ranking, 'países': country, 'ano': year}"
"class cfc_score(NumericSemanticType):
    def __init__(self):
        self.description = ""CFC (Consideration of Future Consequences) score in a survey""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""CFC score should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise Exception('Invalid CFC score')
        return num

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of an individual""
        self.valid_values = ""Gender is a categorical value: 1 for Male, 2 for Female""
        self.format = ""Gender should be stored as an integer, 1 for Male, 2 for Female""
        self.examples = [1, 2]
    def cast(self, val):
        num = int(val)
        if num == 1:
            return 'Male'
        elif num == 2:
            return 'Female'
        else:
            raise Exception('Invalid gender value')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be stored as an integer""
        self.examples = [20, 23, 24, 25, 23]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid age')
        return num

MAPPING = {'cfc1': cfc_score, 'cfc2': cfc_score, 'cf3r': cfc_score, 'cf4r': cfc_score, 'cf5r': cfc_score, 'cfc6': cfc_score, 'cfc7': cfc_score, 'cfc8': cfc_score, 'cf9r': cfc_score, 'cf10r': cfc_score, 'cf11r': cfc_score, 'cf12r': cfc_score, 'sexe': gender, 'age': age}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Codes""
        self.valid_range = [0, 990]
        self.dtype = int
        self.format = ""Country Codes must be integers""
        self.examples = [2, 235, 451, 663, 990]
    def cast(self, val):
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Years""
        self.valid_range = [1960, 2000]
        self.dtype = int
        self.format = ""Years must be integers""
        self.examples = [1960, 1972, 1982, 1992, 2000]
    def cast(self, val):
        return int(val)

class binary(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary Variables""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary variables must be integers""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class logtransformed(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithmically Transformed Variables""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Logarithmically transformed variables must be floats""
        self.examples = [-4.985991, -4.284, -4.141, -3.893, -2.565392]
    def cast(self, val):
        return float(val)

class gdp(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithmically Transformed GDP""
        self.valid_range = [5.1390576, 11.34342]
        self.dtype = float
        self.format = ""GDP must be floats""
        self.examples = [5.1390576, 7.236, 8.225, 9.139, 11.34342]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class courtage(NumericSemanticType):
    def __init__(self):
        self.description = ""Court Age""
        self.valid_range = [0, 40]
        self.dtype = int
        self.format = ""Court age must be integers""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class coalition(NumericSemanticType):
    def __init__(self):
        self.description = ""Winning Coalition""
        self.valid_range = [0, 1.0014246]
        self.dtype = float
        self.format = ""Winning Coalition must be floats""
        self.examples = [0, 0.326, 0.501, 0.751, 1.0014246]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class competition(NumericSemanticType):
    def __init__(self):
        self.description = ""Political Competition""
        self.valid_range = [0, 49]
        self.dtype = float
        self.format = ""Political Competition must be floats""
        self.examples = [0, 3.7, 19.1, 23.4, 49]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class independence(NumericSemanticType):
    def __init__(self):
        self.description = ""Judicial Independence""
        self.valid_range = [0.0164, 0.9886]
        self.dtype = float
        self.format = ""Judicial Independence must be floats""
        self.examples = [0.0164, 0.179, 0.313, 0.684, 0.9886]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)

class polity(NumericSemanticType):
    def __init__(self):
        self.description = ""Polity""
        self.valid_range = [-10, 10]
        self.dtype = int
        self.format = ""Polity must be integers""
        self.examples = [-10, -7, -4, 8, 10]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class unrest(NumericSemanticType):
    def __init__(self):
        self.description = ""Civil Unrest""
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = ""Civil Unrest must be integers""
        self.examples = [0, 0, 0, 0, 10]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return int(val)

class ethnicfractionalization(NumericSemanticType):
    def __init__(self):
        self.description = ""Ethnic Fractionalization""
        self.valid_range = [0.0009999871, 0.88]
        self.dtype = float
        self.format = ""Ethnic Fractionalization must be floats""
        self.examples = [0.0009999871, 0.125, 0.34, 0.57, 0.88]
    def cast(self, val):
        if math.isnan(val):
            return val
        else:
            return float(val)


MAPPING = {'ccode': countrycode, 'year': year, 'territorialrivalry': binary, 'militarizeneighbor': logtransformed, 'gdpnl': gdp, 'courtage': courtage, 'bdmwinningcoalition': coalition, 'politicalcompetition': competition, 'judicialindependence': independence, 'polity': polity, 'civilunrest': unrest, 'ethnicfractionalization': ethnicfractionalization}"
"class projectyear(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Year of the project""
        self.valid_values = ""Project year must be of the form 'MPVdddd/dd'""
        self.format = ""Year must be in 4-digit form, and the project code in 2-digit form, separated by /""
        self.examples = ['MPV0443/08', 'MPV0445/08', 'MPV0447/08', 'MPV0451/08', 'MPV0457/09']
    def cast(self, val):
        return str(val)

class numsen(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Senate bill number""
        self.valid_values = ""Senate bill number must be of the form 'MPVdddd/dd' or 'PLCdddd/dd'""
        self.format = ""Bill number must be in 4-digit form, and the project code in 2-digit form, separated by /""
        self.examples = ['MPV0443/08', 'PLC0027/97', 'MPV0466/09', 'MPV0447/08', 'MPV0451/08']
    def cast(self, val):
        return str(val)

class lawtype(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of law""
        self.valid_range = [1,5]
        self.dtype = float
        self.format = ""Law type should be a floating point number between 1 and 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num >= 1 and num <= 5:
            return num
        else:
            raise Exception('Invalid law type')

class lastaction(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Last action taken""
        self.valid_values = ""Last action must be either 'TNJR' or 'VETT'""
        self.format = ""Last action must be either 'TNJR' or 'VETT'""
        self.examples = ['TNJR', 'VETT']
    def cast(self, val):
        if val == 'TNJR' or val == 'VETT':
            return val
        else:
            raise Exception('Invalid last action')

class totaldevicesfinal(NumericSemanticType):
    def __init__(self):
        self.description = ""Total final devices""
        self.valid_range = [0,float('inf')]
        self.dtype = float
        self.format = ""Total final devices should be a non-negative floating point number""
        self.examples = [0.0, 25.5, 53.0, 135.5, 2189.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid total final devices')

MAPPING = {'projano': projectyear, 'numsen': numsen, 'tipolei': lawtype, 'ultacao': lastaction, 'totaldispositivosfinal': totaldevicesfinal}"
"class protestid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique protest ID""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Protest ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class protestdate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date of protest""
        self.valid_values = ""Date should be in the format 'YYYY-MM-DD'""
        self.format = ""Date should be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2013-01-10', '2013-01-11', '2013-01-15', '2013-01-15', '2013-01-18']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').date().isoformat()
    
class protestact(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Act of protest""
        self.valid_values = ""Act should be a string describing the protest""
        self.format = ""Act should be a string""
        self.examples = ['Trabajadores y trabajadoras públicas', 'ANEP', 'Sindicatos', 'Docentes', 'SINTRAJAP']
    def cast(self, val):
        return str(val).strip()

class protestenti(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Entity involved in the protest""
        self.valid_values = ""Entity should be a string describing the entity involved""
        self.format = ""Entity should be a string""
        self.examples = ['Administración Alvarado Quesada', 'CCSS', 'MEP', 'Administración Solís Rivera', 'Asamblea Legislativa de la Administraci��n Solís Rivera']
    def cast(self, val):
        return str(val).strip()

class protestdem(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of demand associated with the protest""
        self.valid_range = [1, 14]
        self.dtype = int
        self.format = ""Type of demand should be an integer between 1 and 14""
        self.examples = [1, 5, 2, 3, 4]
    def cast(self, val):
        return int(val)

MAPPING = {'id': protestid, 'date': protestdate, 'act': protestact, 'enti': protestenti, 'tipdem': protestdem}"
"class landercode(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents codes associated with a particular region or state. The codes are integers from 1 to 16.""
        self.valid_range = [1, 16]
        self.dtype = int
        self.format = ""Lander codes are positive integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val < 1 or val > 16:
            raise Exception('Invalid lander code')
        return val

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents a year in the Gregorian calendar""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a four digit number""
        self.examples = [1955, 1960, 1970, 1980, 1990]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val < 1900 or val > datetime.now().year:
            raise Exception('Invalid year')
        return val

class turnout(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents voter turnout percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Turnout percentage should be a floating point number""
        self.examples = [44.4, 60.5, 70.8, 80.45, 91.3]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = float(val)
        if val < 0 or val > 100:
            raise Exception('Invalid turnout percentage')
        return round(val, 2)

class treatment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        val = int(val)
        if val not in self.valid_values:
            raise Exception('Invalid boolean value')
        return val

MAPPING = {
    'lander': landercode, 
    'year': year, 
    'turnout': turnout, 
    'turnoutbt': turnout, 
    'invalid': turnout, 
    'west': treatment, 
    'electionyear': treatment,
    'electionyearbt': treatment,
    'treated': treatment,
    'post': treatment,
    'bremen': treatment,
    'hamburg': treatment,
    'schhols': treatment,
    'brandenburg': treatment,
    'age16': treatment
}"
"class condition(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class privacy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class race(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class politicalaffiliation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class politicaldistance(NumericSemanticType):
    def __init__(self):
        self.description = ""A measure of the political distance between entities""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Political distance should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 4:
            raise Exception('Invalid political distance')
        return num

class feeling(NumericSemanticType):
    def __init__(self):
        self.description = ""A measure of feeling or emotion""
        self.valid_range = [1.5, 5.0]
        self.dtype = float
        self.format = ""Feeling should be a floating point number between 1.5 and 5.0""
        self.examples = [1.5, 2.5, 3.5, 4.5, 5.0]
    def cast(self, val):
        num = float(val)
        if num < 1.5 or num > 5.0:
            raise Exception('Invalid feeling value')
        return num

class created(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class politicalaccuracy(NumericSemanticType):
    def __init__(self):
        self.description = ""A measure of the accuracy of political beliefs""
        self.valid_range = [1.0, 7.0]
        self.dtype = float
        self.format = ""Political accuracy should be a floating point number between 1.0 and 7.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
    def cast(self, val):
        num = float(val)
        if num < 1.0 or num > 7.0:
            raise Exception('Invalid political accuracy value')
        return num

class scientificaccuracy(NumericSemanticType):
    def __init__(self):
        self.description = ""A measure of the accuracy of scientific beliefs""
        self.valid_range = [1.0, 7.0]
        self.dtype = float
        self.format = ""Scientific accuracy should be a floating point number between 1.0 and 7.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        if num < 1.0 or num > 7.0:
            raise Exception('Invalid scientific accuracy value')
        return num

MAPPING = {'cond': condition, 'private': privacy, 'white': race, 'demd': politicalaffiliation, 
           'polidst': politicaldistance, 'feel': feeling, 'crtd': created, 'polacc': politicalaccuracy,
           'sciacc': scientificaccuracy}"
"class journalrank(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The rank of a journal in the ASEAN Citation Index""
        self.valid_values = ""Rankings should be integers, with 'No' representing a journal not indexed""
        self.format = ""Rankings should be strings, with 'No' representing a journal not indexed""
        self.examples = ['No', '1', '2', '3', '4']
    def cast(self, val):
        return str(val)

class journaltitle(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The English title of a journal""
        self.valid_values = ""Title should be a string""
        self.format = ""Title should be a string""
        self.examples = ['Journal of Asian Business and Economic Studies', 'Journal of Economics and Development', 'Biomedical Research and Therapy', 'Dalat University Journal of Science']
    def cast(self, val):
        return str(val)
        
class journalpissn(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The P-ISSN of a journal""
        self.valid_values = ""P-ISSN should be a string of numbers""
        self.format = ""P-ISSN should be a string of numbers""
        self.examples = ['2615-9112', '1859-0020', '2198-4093', '0866-787X']
    def cast(self, val):
        return str(val)

class journalessn(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The E-ISSN of a journal, with '-' representing no E-ISSN""
        self.valid_values = ""E-ISSN should be a string of numbers, with '-' representing no E-ISSN""
        self.format = ""E-ISSN should be a string of numbers, with '-' representing no E-ISSN""
        self.examples = ['-', '2515-964X', '2475-1847', '0866-7136']
    def cast(self, val):
        return str(val)

class journalurl(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The URL of a journal""
        self.valid_values = ""URL should be a string""
        self.format = ""URL should be a string""
        self.examples = ['http://jabes.ueh.edu.vn/', 'http://jed.neu.edu.vn/', 'http://www.bmrat.org/', 'http://tckh.dlu.edu.vn/']
    def cast(self, val):
        return str(val)

class journalindexyear(NumericSemanticType):
    def __init__(self):
        self.description = ""The year a journal was indexed""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = ['2015', '2016', '2017', '2018', '2019']
    def cast(self, val):
        return int(val)

MAPPING = {'listof12vietnamesescholarlyjournalsindexedintheaseancitationindexasofjune2019acisteeringcommitteelistofacijournals2019cited2019june30availablefromhttpwwwaseancitesorgindexphprcontentspercent2f/indexid9': journalrank, 
           'b': journaltitle, 
           'c': journalpissn, 
           'd': journalessn, 
           'e': journalurl,
           'f': journalindexyear}"
"class identifier(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifier""
        self.valid_range = [1, 35]
        self.dtype = int
        self.format = ""Should be an integer within valid_range""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid identifier')
        return val

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [2001, 2019]
        self.dtype = int
        self.format = ""Should be an integer within valid_range""
        self.examples = [2001, 2005, 2010, 2015, 2019]
    def cast(self, val):
        val = int(val)
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid year')
        return val

class gdp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product""
        self.valid_range = [271679.0, float('inf')]
        self.dtype = float
        self.format = ""Should be a float within valid_range""
        self.unit = ""In USD""
        self.examples = [271679.0, 652205.5, 1075366.0, 2273335.75, 22998402.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            val = float(val)
            if val < self.valid_range[0]:
                raise Exception('Invalid GDP')
            return val

class binary(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        val = int(val)
        if val not in self.valid_values:
            raise Exception('Invalid binary value')
        return val

MAPPING = {'id': identifier, 'year': year, 'grdp': gdp, '9': binary, '10': binary}"
"class ipaddress(CategoricalSemanticType):
    def __init__(self):
        self.description = ""IP Address""
        self.valid_values = ""IP addresses in the form X.X.X.X where X is a number between 0 and 255""
        self.format = ""IP addresses must be stored as strings""
        self.examples = ['100.0.4.242', '100.18.23.4', '100.19.117.40', '100.1.3.9', '100.10.44.134']
    def cast(self, val):
        if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', str(val)):
            return val
        else:
            raise Exception('Invalid IP address')
class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary value')
class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age Category""
        self.valid_values = ""Age categories: 'over 60', '46-60', '31-45', '18-30'""
        self.format = ""Age categories must be stored as strings""
        self.examples = ['over 60', '46-60', '31-45', '18-30']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid age category')
class educationcategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Education Category""
        self.valid_values = ""Education categories: \""bachelor's degree\"", 'some college', 'high school or less', 'post-graduate'""
        self.format = ""Education categories must be stored as strings""
        self.examples = [""bachelor's degree"", 'some college', 'high school or less', 'post-graduate']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid education category')
class regioncategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Geographic Region Category""
        self.valid_values = ""Geographic regions: 'South', 'West', 'Northeast', 'Midwest'""
        self.format = ""Geographic regions must be stored as strings""
        self.examples = ['South', 'West', 'Northeast', 'Midwest']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid geographic region category')

MAPPING = {'ipaddress': ipaddress, 'issue1': binaryvalue, 'votegovbinary': binaryvalue, 'agecat': agecategory, 'educat': educationcategory, 'georegion': regioncategory}"
"class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names must be recognized by pycountry library""
        self.format = ""Country names should be capitalized and stored as strings""
        self.examples = ['Brazil', 'United States', 'India', 'China', 'Australia']
    def cast(self, val):
        string = str(val)
        if pycountry.countries.get(name=string):
            return string
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1986, 1994, 2002, 2010, 2014]
    def cast(self, val):
        year = int(val)
        if year >= self.valid_range[0] and year <= self.valid_range[1]:
            return year
        else:
            raise Exception('Invalid year')

class constituencyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Constituency Names""
        self.valid_values = ""Constituency names should be strings""
        self.format = ""Constituency names should be capitalized and stored as strings""
        self.examples = ['Acre', 'Alagoas', 'Amapá', 'Amazonas', 'Bahia']
    def cast(self, val):
        return str(val).title()

class partyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Party Names""
        self.valid_values = ""Party names should be strings""
        self.format = ""Party names should be capitalized and stored as strings""
        self.examples = ['Partido do Movimiento Democrático Brasileiro', 'Partido dos Trabalhadores', 'PFL-DEM', 'Partido da Social Democracia Brasileira', 'Partido Progressista']
    def cast(self, val):
        return str(val).title()

class vote(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Vote Count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Votes should be formatted as an integer""
        self.unit = ""In number of votes"" 
        self.examples = [43805, 728049, 1460644, 3376535, 21967444]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0]:
            return num
        else:
            raise Exception('Invalid vote count')

class voteshare(NumericSemanticType):
    def __init__(self):
        self.description = ""Vote Share""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Vote share should be formatted as a floating point number with up to three decimal places""
        self.examples = [0.0, 5.154, 9.833, 17.499, 68.364]
    def cast(self, val):
        num = round(float(val), 3)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid vote share')

MAPPING = {'country': country, 'year': year, 'constituencyname': constituencyname, 'partyname': partyname, 
           'validvote': vote, 'partyvote': vote, 'partyvoteshare': voteshare, 'w1': vote, 'w2': vote}"
"class respondentid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of the Respondent""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Respondent ID should be an integer with no decimal point""
        self.examples = [1, 2, 3, 4, 7]
    def cast(self, val):
        return int(val)

class treatmenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of treatment""
        self.valid_values = ""The column represents the treatment type, which can be one of the following: 'msndem', 'apdem', 'foxrep', 'aprep', 'foxdem'""
        self.format = ""Treatment type should be a string""
        self.examples = ['msndem', 'apdem', 'foxrep', 'aprep', 'foxdem']
    def cast(self, val):
        return str(val).lower()

class copartytreatmenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Co-party treatment""
        self.valid_values = ""The column represents the co-party treatment type, which can be one of the following: 'si.pi', 'co.pi', 'so.po', 'co.po', 'si.po'""
        self.format = ""Co-party treatment type should be a string""
        self.examples = ['si.pi', 'co.pi', 'so.po', 'co.po', 'si.po']
    def cast(self, val):
        return str(val).lower()

class punditrank(NumericSemanticType):
    def __init__(self):
        self.description = ""Rank of the pundit""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Pundit rank should be an integer with no decimal point""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class punditideology(NumericSemanticType):
    def __init__(self):
        self.description = ""Ideology of the pundit""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Pundit ideology should be a float between 0 and 1""
        self.examples = [0.7142857142857143, 0.5714285714285714, 0.5714285714285714, 0.4285714285714285, 1.0]
    def cast(self, val):
        return round(float(val), 2)

class biaslevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of bias""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Bias level should be a float between 0 and 1""
        self.examples = [0.6, 0.4, 0.8, 0.8, 1.0]
    def cast(self, val):
        return round(float(val), 2)

class interestlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of interest""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Interest level should be a float between 0 and 1""
        self.examples = [0.6, 0.4, 0.7, 0.8, 0.2]
    def cast(self, val):
        return round(float(val), 2)

class partyidentification(NumericSemanticType):
    def __init__(self):
        self.description = ""Party identification""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Party identification should be an integer between 1 and 7""
        self.examples = [6, 5, 5, 1, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'respid': respondentid, 'treatment': treatmenttype, 'copartytreatment': copartytreatmenttype, 'pundit': punditrank, 'punideo': punditideology, 'bias': biaslevel, 'interest': interestlevel, 'pid7': partyidentification}"
"class region(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Region in China""
        self.valid_values = ""Region name should be a string""
        self.format = ""Region name should be capitalized and trimmed""
        self.examples = ['Beijing', 'Tianjin', 'Hebei', 'Shanxi', 'Inner Mongolia']
    def cast(self, val):
        return str(val).strip().title()
class carbonemission(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The amount of carbon emission""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Carbon emission should be formatted as a floating point number""
        self.units = 'In kilotons' 
        self.examples = [2719.2862144, 2600.1003029799995, 9822.71762634, 12229.36756726, 4318.80543426]
    def cast(self, val):
        num = float(val)
        return round(num, 6)
MAPPING = {
    'region': region, 
    '2002': carbonemission, 
    '2003': carbonemission, 
    '2004': carbonemission, 
    '2005': carbonemission, 
    '2006': carbonemission, 
    '2007': carbonemission, 
    '2008': carbonemission, 
    '2009': carbonemission, 
    '2010': carbonemission, 
    '2011': carbonemission, 
    '2012': carbonemission, 
    '2013': carbonemission
}"
"class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Name of the country. It should be a valid name of a country according to the ISO 3166 standard.""
        self.format = ""Names should be capitalized, spelled correctly and not contain any extra spaces""
        self.examples = ['Belgium', 'Czechia', 'Denmark', 'Germany', 'Estonia']
    def cast(self, val):
        return str(val).strip().title()
        
class povertyrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Poverty Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Poverty rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [17.2, 14.7, 15.4, 6.2, 5.8]
    def cast(self, val):
        return round(float(val), 1)
        
class socialmobilitydifference(NumericSemanticType):
    def __init__(self):
        self.description = ""Social Mobility Difference""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Social Mobility Difference should be formatted as a floating point number with one decimal place.""
        self.examples = [6.2, 5.8, 4.1, 16.0, 15.4]
    def cast(self, val):
        return round(float(val), 1)
        
class meanincome(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Mean Income""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Mean income should be formatted as a floating point number with no decimal places.""
        self.unit = ""The unit is in local currency of the country.""
        self.examples = [16175.4, 18151.9, 15276.9]
    def cast(self, val):
        return round(float(val))
        
class shareofincome(NumericSemanticType):
    def __init__(self):
        self.description = ""Share of Income""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Share of income should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [4.7, 8.6, 10.1, 16.0, 15.4]
    def cast(self, val):
        return round(float(val), 1)
        
class healthcareoutcomes(NumericSemanticType):
    def __init__(self):
        self.description = ""Health Care Outcomes""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Health Care Outcomes should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [8.6, 10.1, 9.7]
    def cast(self, val):
        return round(float(val), 1)
        
class meanhealthcare(NumericSemanticType):
    def __init__(self):
        self.description = ""Mean Health Care""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Mean Health Care should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [16.0, 15.5, 17.0]
    def cast(self, val):
        return round(float(val), 1)
        
class unemployeerate(NumericSemanticType):
    def __init__(self):
        self.description = ""Unemployement Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Unemployement Rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [25.0, 7.0, 0.9, 2.5, 3.8]
    def cast(self, val):
        return round(float(val), 1)
        
class educationrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Education Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Education Rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [8.7, 37.5, 23.5]
    def cast(self, val):
        return round(float(val), 1)
        
class undernutrition(NumericSemanticType):
    def __init__(self):
        self.description = ""Undernutrition Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Undernutrition Rate should be formatted as a floating point number with one decimal place. The range is between 0 and 100.""
        self.examples = [0.9, 2.5, 3.8]
    def cast(self, val):
        return round(float(val), 1)

MAPPING = {'country': countryname, 'pr18': povertyrate, 'pr1864': povertyrate, 'pr65': povertyrate, 'smd18': socialmobilitydifference, 'smd1864': socialmobilitydifference, 'smd65': socialmobilitydifference, 'mi18': meanincome, 'mi1864': meanincome, 'mi65': meanincome, 's80s2065': shareofincome, 'hco18': healthcareoutcomes, 'hco1864': healthcareoutcomes, 'hco65': healthcareoutcomes, 'mhc18': meanhealthcare, 'mhc1864': meanhealthcare, 'mhc65': meanhealthcare, 'or18': unemployeerate, 'or1864': unemployeerate, 'or65': unemployeerate, 'unemp1519': unemployeerate, 'unemp2064': unemployeerate, 'edu581524': educationrate, 'edu582554': educationrate, 'edu585574': educationrate, 'umn1619': undernutrition, 'umn1844': undernutrition, 'umn4564': undernutrition, 'umn65': undernutrition}"
"class binaryoutcome(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Country names should be valid names that are recognized globally""
        self.format = ""Country names should be capitalized and spelled correctly""
        self.examples = ['Argentina', 'Venezuela', 'Colombia', 'Ecuador', 'Peru']
    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class countryid(NumericSemanticType):
    def __init__(self):
        self.description = ""Country ID""
        self.valid_range = [1, 189]
        self.dtype = int
        self.format = ""Country ID should be a numerical value""
        self.examples = [1, 37, 78, 189]
    def cast(self, val):
        return int(val)

class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country code""
        self.valid_values = ""Country codes should be valid codes that are recognized globally""
        self.format = ""Country codes should be capitalized and in 3-letter ISO format""
        self.examples = ['VEN', 'DOM', 'COL', 'ECU', 'PER']
    def cast(self, val):
        if pycountry.countries.get(alpha_3=val):
            return val
        else:
            raise Exception('Invalid country code')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of the data""
        self.valid_range = [1979, 2017]
        self.dtype = int
        self.format = ""Year should be a numerical value""
        self.examples = [1984, 1993, 2001, 2009, 2017]
    def cast(self, val):
        return int(val)

class presidentid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of the president""
        self.valid_range = [1, 916]
        self.dtype = int
        self.format = ""President ID should be a numerical value""
        self.examples = [1, 37, 82, 114, 916]
    def cast(self, val):
        return int(val)

class surname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Surname of the person""
        self.valid_values = ""Surname should be a string""
        self.format = ""Surname should be capitalized""
        self.examples = ['Barrios', 'Zedillo', 'Alfonsin', 'Lagos', 'Calderon']
    def cast(self, val):
        return str(val).title()

class name(CategoricalSemanticType):
    def __init__(self):
        self.description = ""First name of the person""
        self.valid_values = ""First name should be a string""
        self.format = ""First name should be capitalized""
        self.examples = ['Rafael', 'Carlos', 'Luis', 'Fernando ', 'Hugo']
    def cast(self, val):
        return str(val).title()

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date should be a string of the format YYYY-MM-DD""
        self.format = ""Dates should be in 'YYYY-MM-DD' format""
        self.examples = ['1992-01-01', '2008-01-01', '2016-01-01', '2011-01-01', '2013-01-01']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class economicgrowth(NumericSemanticType):
    def __init__(self):
        self.description = ""Economic growth""
        self.valid_range = [-12.312041447129602, 18.28660668912445]
        self.dtype = float
        self.format = ""Economic growth should be a numerical value""
        self.examples = [2.2117735037724344, -7.586677184135311, 7.875779830414856, 2.90999313057101, -2.5569048769462484]
    def cast(self, val):
        return float(val)

class majority(NumericSemanticType):
    def __init__(self):
        self.description = ""Majority""
        self.valid_range = [6.96203, 100.0]
        self.dtype = float
        self.format = ""Majority should be a numerical value""
        self.examples = [50.98814, 51.1811, 50.9804, 48.34711, 46.06299]
    def cast(self, val):
        return float(val)

class antigovernment(NumericSemanticType):
    def __init__(self):
        self.description = ""Antigovernment""
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = ""Antigovernment should be a numerical value""
        self.examples = [0, 2, 10]
    def cast(self, val):
        return int(val)

class scandals(NumericSemanticType):
    def __init__(self):
        self.description = ""Scandals""
        self.valid_range = [0.0, 21.0]
        self.dtype = int
        self.format = ""Scandals should be a numerical value""
        self.examples = [0, 21]
    def cast(self, val):
        return int(val)

class hyperinflation(NumericSemanticType):
    def __init__(self):
        self.description = ""Hyperinflation""
        self.valid_range = [0.0, 1.0]
        self.dtype = int
        self.format = ""Hyperinflation should be a numerical value""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class partyinstitutionalization(NumericSemanticType):
    def __init__(self):
        self.description = ""Party Institutionalization""
        self.valid_range = [14.924614, 71.97012]
        self.dtype = float
        self.format = ""Party Institutionalization should be a numerical value""
        self.examples = [55.341496, 51.74145, 34.718, 39.322, 46.164]
    def cast(self, val):
        return float(val)

MAPPING = {
    'event': binaryoutcome,
    'country': countryname,
    'countryid': countryid,
    'countrycode': countrycode,
    'yeardata': year,
    'adm': presidentid,
    'presid': presidentid,
    'surname': surname,
    'name': name,
    'datein': date,
    'dateout': date,
    'ecogrowth': economicgrowth,
    'maj': majority,
    'antigov': antigovernment,
    'scandals': scandals,
    'hyperinflation': hyperinflation,
    'partyins': partyinstitutionalization
}"
"class experimentcondition(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            return None

class userid(NumericSemanticType):
    def __init__(self):
        self.description = ""User ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""User ID should be an integer""
        self.examples = [1800329304, 2122101492, 1875256514, 1802052592, 1387447816]
    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class timestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Timestamp""
        self.valid_values = ""Timestamps should fit the following format: 'YYYY-MM-DD HH:MM:SS.000'""
        self.format = ""Timestamps should be strings""
        self.examples = ['2014-02-24 18:33:00.000', '2014-02-24 18:33:00.000', '2014-02-24 18:33:00.000', '2014-02-24 18:33:00.000', '2014-02-24 18:33:00.000']
    def cast(self, val):
        try:
            return datetime.strptime(val, '%Y-%m-%d %H:%M:%S.%f').strftime('%Y-%m-%d %H:%M:%S.%f')
        except ValueError:
            return None

class publishercategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Publisher Category""
        self.valid_values = ""Publisher Categories should be one of the following: 'News', 'Arts & Entertainment', 'Mobile', 'Other', 'Reference'""
        self.format = ""Publisher Categories should be strings""
        self.examples = ['News', 'Arts & Entertainment', 'Mobile', 'Other', 'Reference']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            return None

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender""
        self.valid_values = ""Gender should be one of the following: 'Male', 'Female', 'Unknown'""
        self.format = ""Gender should be a string""
        self.examples = ['Male', 'Female', 'Unknown']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            return None

class age(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age Range""
        self.valid_values = ""Age should be a string representing a range""
        self.format = ""Age should be a string of the format 'X-Y'""
        self.examples = ['Unknown', '55-64', '25-34', '45-54', '18-24']
    def cast(self, val):
        if '-' in val:
            return val
        else:
            return None

class geography(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographical Location""
        self.valid_values = ""Geographical location should be a string representing a region""
        self.format = ""Geography should be a string of the format 'Country-Region-City'""
        self.examples = ['US-MIDWEST-NE-Lincoln', 'US-NORTHEAST-NY-New-York', 'US-MIDWEST-IL-Chicago', 'US-MIDWEST-KS-Lawrence', 'US-NORTHEAST-PA-Erie']
    def cast(self, val):
        if '-' in val:
            return val
        else:
            return None

class urbandensity(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Urban Density""
        self.valid_values = ""Urban density should be one of the following: 'Suburban', 'Urban', 'Rural', 'Unknown'""
        self.format = ""Urban density should be a string""
        self.examples = ['Suburban', 'Urban', 'Rural', 'Unknown']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            return None

class income(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Income Range""
        self.valid_values = ""Income should be a string representing a range""
        self.format = ""Income should be a string of the format 'X-Y'""
        self.examples = ['$25,000-$49,999', '$50,000-$74,999', '$0-$24,999', '$75,000-$99,999', '$100,000-$149,999']
    def cast(self, val):
        if '-' in val:
            return val
        else:
            return None

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number""
        self.examples = [0.9758315, float('nan'), 0.9758315, 0.8054373, 0.7458749]
    def cast(self, val):
        if math.isnan(val):
            return None
        return float(val)

class screeneranswer(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Screener Answer""
        self.valid_values = ""Screener answer should be a string representing the level of interest""
        self.format = ""Screener answer should be a string""
        self.examples = ['not interested at all', 'extremely interested', 'very interested']
    def cast(self, val):
        return str(val)

class answer(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Answer""
        self.valid_values = ""Answer should be a string representing the stance on same sex marriage""
        self.format = ""Answer should be a string""
        self.examples = ['Yes, I support same sex marriage', 'No, I oppose same sex marriage', 'No, but I support civil unions']
    def cast(self, val):
        return str(val)

MAPPING = {'condition': experimentcondition, 'userid': userid, 'timeutc': timestamp, 'publishercategory': publishercategory, 'gender': gender, 'age': age, 'geography': geography, 'urbandensity': urbandensity, 'income': income, 'weight': weight, 'screeneranswer': screeneranswer, 'answer': answer}"
"class federalreserveeconomicdata(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Federal Reserve Economic Data""
        self.valid_values = ""The data should be a string of numbers""
        self.format = ""The data should be a string of numbers without any characters""
        self.examples = ['32112', '29221', '29526', '29252', '29281']
    def cast(self, val):
        match_obj = re.match('^[0-9]*$', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Federal Reserve Economic Data')

class inflationrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Inflation Rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Inflation rate should be formatted as a floating point number""
        self.examples = [12.92, 13.37, 13.65, 13.94, 0.0]
    def cast(self, val):
        return float(val)

class countrycode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_values = ""ISO 3166-1 alpha-2 Country Code""
        self.format = ""Country code should be a string of two uppercase letters""
        self.examples = ['FR', 'GE', 'US', 'JP']
    def cast(self, val):
        if pycountry.countries.get(alpha_2=val):
            return val
        else:
            raise Exception('Invalid Country Code')

MAPPING = {'sourcefredeconomicdatastlouisfed': federalreserveeconomicdata, 'b': inflationrate, 'c': countrycode}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of an individual""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID should be a positive integer""
        self.examples = [1, 3, 5, 6, 7]
    def cast(self, val):
        return int(val)

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating of an individual on a scale of 1-7""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Rating should be an integer between 1 and 7""
        self.examples = [1, 3, 5, 6, 7]
    def cast(self, val):
        if 1 <= val <= 7:
            return int(val)
        else:
            raise Exception('Invalid rating')

class agecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Age category of an individual""
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = ""Age category should be an integer between 1 and 9""
        self.examples = [1, 3, 4, 6, 9]
    def cast(self, val):
        if 1 <= val <= 9:
            return int(val)
        else:
            raise Exception('Invalid age category')

class binary(NumericSemanticType):
    def __init__(self):
        self.description = ""A binary variable""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary variable can be either 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid binary value')

class racecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Race category of an individual""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Race category should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if 1 <= val <= 5:
            return int(val)
        else:
            raise Exception('Invalid race category')

class educationlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Education level of an individual""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Education level should be an integer between 1 and 7""
        self.examples = [1, 3, 5, 6, 7]
    def cast(self, val):
        if 1 <= val <= 7:
            return int(val)
        else:
            raise Exception('Invalid education level')

class incomecategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Income category of an individual""
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = ""Income category should be an integer between 1 and 9""
        self.examples = [1, 3, 5, 6, 9]
    def cast(self, val):
        if 1 <= val <= 9:
            return int(val)
        else:
            raise Exception('Invalid income category')

class conditioncategory(NumericSemanticType):
    def __init__(self):
        self.description = ""Condition category of an individual""
        self.valid_range = [2, 7]
        self.dtype = int
        self.format = ""Condition category should be an integer between 2 and 7""
        self.examples = [2, 3, 5, 6, 7]
    def cast(self, val):
        if 2 <= val <= 7:
            return int(val)
        else:
            raise Exception('Invalid condition category')

MAPPING = {'id': id, 
           'trustsci': rating, 
           'votefor': rating, 
           'personal': rating, 
           'faster': rating, 
           'age': agecategory, 
           'female': binary, 
           'race': racecategory, 
           'ed': educationlevel, 
           'income': incomecategory, 
           'condition': conditioncategory, 
           'ns': binary, 
           'nsindint': binary, 
           'nspolint': binary, 
           'cs': binary, 
           'csindint': binary, 
           'cspolint': binary, 
           'rep': binary, 
           'ind': binary, 
           'dem': binary, 
           'conservative': binary, 
           'moderate': binary, 
           'liberal': binary}"
"class author(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of an Author""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Nwosu K.C., Wahl W.P., Cassim H., Okwuduba E.N., Nnaemeka G.U.', 'Shoura H.M.A., Ahmad A.C.', 'Diana, Sunardi, Gunarhadi, Yusuf M.', 'Rante S.V.N., Helaluddin, Wijaya H., Tulak H., Umrati', 'Nguyen T.P.L., Nguyen T.H., Tran T.K.']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1999, 2014, 2018, 2020]
    def cast(self, val):
        return int(val)

class volume(NumericSemanticType):
    def __init__(self):
        self.description = ""Volume""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume should be formatted as a floating point number""
        self.examples = [2.0, 12.0, 19.5, 34.75, 2215.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class issue(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Issue""
        self.valid_values = ""Issue should be a string that is numeric""
        self.format = ""Only the digits should be included, no extra characters""
        self.examples = ['3', '1', '2', '4', '10']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(int(val))

class artno(NumericSemanticType):
    def __init__(self):
        self.description = ""Article Number""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Article Number should be formatted as a floating point number""
        self.examples = [29.0, 1060.0, 12057.0, 70824.5, 9060971.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class pagestart(NumericSemanticType):
    def __init__(self):
        self.description = ""Start Page""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Start Page should be formatted as a floating point number""
        self.examples = [1.0, 93.5, 238.5, 730.5, 78779.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class pageend(NumericSemanticType):
    def __init__(self):
        self.description = ""End Page""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""End Page should be formatted as a floating point number""
        self.examples = [9.0, 113.5, 247.5, 741.0, 78807.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class pagecount(NumericSemanticType):
    def __init__(self):
        self.description = ""Page Count""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Page Count should be formatted as a floating point number""
        self.examples = [11.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class citedby(NumericSemanticType):
    def __init__(self):
        self.description = ""Cited By""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cited By should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 6.0, 12.25, 71.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return float(val)

class doi(CategoricalSemanticType):
    def __init__(self):
        self.description = ""DOI""
        self.valid_values = ""DOI should be a string that is of the form '10.xxxxxx/xxxxxx'""
        self.format = ""DOI should be a string""
        self.examples = ['10.26803/ijlter.19.12.5', '10.15700/saje.v40ns2a1841', '10.18844/CJES.V15I6.5321', '10.13189/ujer.2020.082273', '10.3390/su12218865']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class documenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Document Type""
        self.valid_values = ""Document Type should be one of the following: 'Article', 'Review', 'Conference Paper', 'Book Chapter', 'Editorial'""
        self.format = ""Document Type should be a string""
        self.examples = ['Article', 'Review', 'Conference Paper', 'Book Chapter', 'Editorial']
    def cast(self, val):
        return str(val)

class publicationstage(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Publication Stage""
        self.valid_values = ""Publication Stage should be one of the following: 'Final', 'Article in Press'""
        self.format = ""Publication Stage should be a string""
        self.examples = ['Final', 'Article in Press']
    def cast(self, val):
        return str(val)

class source(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Source""
        self.valid_values = ""Source should be one of the following: 'Scopus'""
        self.format = ""Source should be a string""
        self.examples = ['Scopus']
    def cast(self, val):
        return str(val)

class eid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""EID""
        self.valid_values = ""EID should be a string that is of the form '2-s2.0-xxxxxxxxxx'""
        self.format = ""EID should be a string""
        self.examples = ['2-s2.0-85101103356', '2-s2.0-85099596130', '2-s2.0-85099475092', '2-s2.0-85096214188', '2-s2.0-85094166618']
    def cast(self, val):
        return str(val)

MAPPING = {'authors': author, 'year': year, 'volume': volume, 'issue': issue, 'artno': artno, 'pagestart': pagestart, 'pageend': pageend, 'pagecount': pagecount, 'citedby': citedby, 'doi': doi, 'documenttype': documenttype, 'publicationstage': publicationstage, 'source': source, 'eid': eid}"
"
# The dataset does not provide any columns, therefore no SemanticType can be defined or mapped. Please provide valid column information.
# There is no Python code to be fixed here. This seems to be a comment or a note rather than a Python code.
"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [1881, 1882, 1883, 1884, 1885]
    def cast(self, val):
        return int(val)

class month(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Month""
        self.valid_values = ""Month should be one of the 12 months in a year""
        self.format = ""Month should be capitalized and spelled out completely""
        self.examples = ['January', 'February', 'March', 'April', 'May']
    def cast(self, val):
        month = str(val).title()
        if month in self.examples:
            return month
        else:
            raise Exception('Invalid month')

class routedate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Route Date""
        self.valid_values = ""Route Date should be a string that includes the day and location""
        self.format = ""Route Date should be in the format 'day location'""
        self.examples = ['22 Harrisburg,Pa.', '23 Lancaster,Pa.', '2 Scranton,Pa.', '4 Reading,Pa.', '5 Newark,N.J.']
    def cast(self, val):
        route_date = str(val)
        day, location = route_date.split(' ', 1)
        if day.isdigit():
            return route_date
        else:
            raise Exception('Invalid route date')

MAPPING = {'year': year, 'month': month, 'routedate': routedate}"
"class groupid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of the group""
        self.valid_range = [1, 648]
        self.dtype = int
        self.format = ""Group ID should be an integer""
        self.examples: list = [1, 65, 166, 323, 648]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 648:
            raise Exception('Invalid groupid')
        else:
            return num

class ccode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country code""
        self.valid_range = [2, 900]
        self.dtype = int
        self.format = ""Country code should be an integer""
        self.examples: list = [2, 200, 620, 740, 900]
    def cast(self, val):
        num = int(val)
        if num < 2 or num > 900:
            raise Exception('Invalid ccode')
        else:
            return num

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1970, 2006]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples: list = [1970, 1983, 1992, 2000, 2006]
    def cast(self, val):
        num = int(val)
        if num < 1970 or num > 2006:
            raise Exception('Invalid year')
        else:
            return num

class name(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the organization""
        self.valid_values = ""Name should be a string""
        self.format = ""Name should be formatted as a string with the first letter of each word capitalized""
        self.examples = ['Ku Klux Klan (KKK)', 'Popular Front for the Liberation of Palestine - General Command', 'Sandinistas', 'Popular Front for the Liberation of Palestine (PFLP)', 'Basque Fatherland and Freedom (ETA)']
    def cast(self, val):
        return str(val).title()

class attacks(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of attacks""
        self.valid_range = [0, 509]
        self.dtype = float
        self.format = ""Number of attacks should be a float""
        self.examples: list = [0.0, 2.0, 5.0, 75.0, 509.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 509:
            raise Exception('Invalid attacks')
        else:
            return num

class lagfto(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid lagfto')

class usalliance(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid usalliance')

class fbioffice(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid fbioffice')

class ucdp(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid ucdp')

class size(NumericSemanticType):
    def __init__(self):
        self.description = ""Size of the group""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Size of the group should be an integer""
        self.examples: list = [0, 1, 2, 3]
    def cast(self, val):
        num = int(val)
        if num < 0 or num > 3:
            raise Exception('Invalid size')
        else:
            return num

class religious(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid religious')

class territory(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid territory')

class statesponsored(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num in self.valid_values:
            return num
        else:
            raise Exception('Invalid statesponsored')

MAPPING = {'groupid': groupid, 'ccode': ccode, 'year': year, 'name': name, 'attacks': attacks, 'lagfto': lagfto, 'usalliance': usalliance, 'fbioffice': fbioffice, 'ucdp': ucdp, 'size': size, 'religious': religious, 'territory': territory, 'statesponsored': statesponsored}"
"class studentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Student Identifier""
        self.valid_range = [1, 797]
        self.dtype = int
        self.format = ""Student IDs are integers ranging from 1 to 797""
        self.examples = [184, 341, 424, 176, 447]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 24]
        self.dtype = int
        self.format = ""Age should be an integer ranging from 0 to 24""
        self.examples = [20, 21, 21, 21, 21]
    def cast(self, val):
        if val == -999:
            return float('nan')
        else:
            return int(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1.0, 2.0]
    def cast(self, val):
        if val == 1.0:
            return 'Male'
        elif val == 2.0:
            return 'Female'
        else:
            return float('nan')

class questionnaireanswer(NumericSemanticType):
    def __init__(self):
        self.description = ""Questionnaire answer""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Answers to questionnaire are integers ranging from 1 to 4""
        self.examples = [2, 2, 3, 2, 2]
    def cast(self, val):
        if val == -999:
            return float('nan')
        else:
            return int(val)

class bmi(NumericSemanticType):
    def __init__(self):
        self.description = ""Body Mass Index""
        self.valid_range = [10, 36.88]
        self.dtype = float
        self.format = ""BMI should be a floating point number ranging from 10 to 36.88""
        self.examples = [18.59, 14.29, 20.06, 19.05, 17.70]
    def cast(self, val):
        if val == -999:
            return float('nan')
        else:
            return round(float(val), 2)

class questionnaireanswerstr(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Questionnaire answer""
        self.valid_values = ""Answers to questionnaire are strings ranging from '1' to '4' or '#NULL!'""
        self.format = ""Answers to questionnaire are strings ranging from '1' to '4' or '#NULL!'""
        self.examples = ['4', '4', '1', '3', '3']
    def cast(self, val):
        if val == '#NULL!':
            return float('nan')
        else:
            return str(val)


MAPPING = {
    'a': studentid, 
    'b': age, 
    'c': gender, 
    'd': questionnaireanswer, 
    'e': bmi, 
    'f': questionnaireanswer, 
    'g': questionnaireanswer, 
    'h': questionnaireanswer, 
    'i': questionnaireanswer, 
    'j': questionnaireanswer, 
    'k': questionnaireanswer, 
    'l': questionnaireanswer, 
    'm': questionnaireanswerstr, 
    'n': questionnaireanswer, 
    'o': questionnaireanswer, 
    'p': age, 
    'q': questionnaireanswerstr, 
    'r': questionnaireanswerstr, 
    's': questionnaireanswerstr, 
    't': questionnaireanswerstr
}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year must be an integer""
        self.examples = [2000, 1990, 1980, 1970, 1960]
    def cast(self, val):
        return int(val)

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Name should be a string that represents a valid country name in English""
        self.format = ""Country names should be capitalized""
        self.examples = ['United States', 'India', 'Canada', 'France', 'Germany']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            raise Exception('Invalid country name')

class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country code""
        self.valid_values = ""Country code should be a string that represents a valid country alpha-3 code""
        self.format = ""Country codes should be uppercased""
        self.examples = ['USA', 'CAN', 'FRA', 'DEU', 'IND']
    def cast(self, val):
        country = pycountry.countries.get(alpha_3=val)
        if country:
            return country.alpha_3
        else:
            raise Exception('Invalid country code')

class assetclass(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Asset class""
        self.valid_values = ""Name should be a string that represents a valid asset class""
        self.format = ""Asset class names should be capitalized""
        self.examples = ['Bonds', 'Equity', 'Real Estate', 'Commodities', 'Cash']
    def cast(self, val):
        return str(val).title()

class assetclasscode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Asset class code""
        self.valid_values = ""Code should be a string that represents a valid asset class code""
        self.format = ""Asset class codes should be uppercased""
        self.examples = ['B', 'E', 'R', 'C', 'S']
    def cast(self, val):
        return str(val).upper()

class position(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The position in USD of an entity""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Position should be formatted as a floating point number (in USD units) with two decimal places for cents""
        self.units = 'In USD' 
        self.examples = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        return round(num, 2)

MAPPING = {'year': year, 
           'investorname': countryname, 
           'investor': countrycode, 
           'assetclass': assetclass, 
           'assetclasscode': assetclasscode, 
           'issuername': countryname, 
           'issuer': countrycode, 
           'positionresidency': position, 
           'positionnationalitythonly': position, 
           'positionnationalityfull': position, 
           'estimatedcommonequity': position}"
"class countrycode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country codes in the form of 3-letter string representation""
        self.valid_values = ""Country codes should be a 3-letter string representation as defined by ISO 3166-1 alpha-3 standard""
        self.format = ""Country codes should be all upper case""
        self.examples = ['ARG', 'BOL', 'BRA', 'CHL', 'COL']
    def cast(self, val):
        country_info = pycountry.countries.get(alpha_3=val)
        if country_info:
            return country_info.alpha_3
        else:
            raise Exception('Invalid country code')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [1925, 1926, 1927, 1928, 1929]
    def cast(self, val):
        return int(val)

class presidentname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a President""
        self.valid_values = ""Name should be a string""
        self.format = ""Only the first letter of each word should be capitalized""
        self.examples = ['Máximo Marcelo Torcuato de Alvear Pacheco', 'Juan Hipólito del Sagrado Corazón de Jesús Yrigoyen Alem']
    def cast(self, val):
        return str(val).title()
        
class entrydate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Entry date of the president""
        self.valid_values = ""Dates in the form of 'YYYY-MM-DD'""
        self.format = ""Dates should be in the format 'YYYY-MM-DD'""
        self.examples = ['1922-10-12', '1928-10-12']
    def cast(self, val):
        return datetime.strptime(val, '%Y-%m-%d').strftime('%Y-%m-%d')

class booleanvariable(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value for boolean variable')

class percent(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage data""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number""
        self.unit = ""In percentage"" 
        self.examples = [33.76, 40.0, 50.0]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid percentage')

class demonstrationcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of demonstrations""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Demonstration count should be formatted as an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class polity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Polity score""
        self.valid_range = [-10, 10]
        self.dtype = float
        self.format = ""Polity score should be formatted as a floating point number""
        self.unit = ""In polity score"" 
        self.examples = [-1.62, -2.158, -4.632]
    def cast(self, val):
        num = float(val)
        if -10 <= num <= 10:
            return num
        else:
            raise Exception('Invalid polity score')

MAPPING = {
    'ccode': countrycode, 
    'year': year, 
    'president': presidentname, 
    'entry': entrydate, 
    'break': booleanvariable, 
    'caso': booleanvariable, 
    'cpres': percent, 
    'ccoal': percent, 
    'enph': percent, 
    'region': percent, 
    'pgdp': percent, 
    'g1': percent, 
    'legpower': percent, 
    'jpres': percent, 
    'jparty': percent, 
    'demonst': demonstrationcount, 
    'polity2': polity, 
    'coup': booleanvariable, 
    'takeover': booleanvariable, 
    'effective': percent
}"
"class score(NumericSemanticType):
    def __init__(self):
        self.description = ""The score in a game""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Score should be formatted as a floating point number""
        self.examples = [1.0, -3.0, 0.0, 2.0, 1.0]
    def cast(self, val):
        return float(val)

class binaryoutcome(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary outcome, where 1 indicates success and 0 indicates failure""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Outcome should be formatted as an integer (either 0 or 1)""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class distance(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""A distance value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'Unspecified units'
        self.format = ""Distance should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""A temperature value""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.unit = 'Unspecified units'
        self.format = ""Temperature should be formatted as a floating point number""
        self.examples = [6.0, 1.0, -10.0, 3.0, 8.0]
    def cast(self, val):
        return float(val)

class population(NumericSemanticType):
    def __init__(self):
        self.description = ""The population of an area""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Population should be formatted as a floating point number""
        self.examples = [213904.0, 34834.0, 254355.0, 0.46384, 320969.0]
    def cast(self, val):
        return float(val)

class gdp(NumericSemanticType):
    def __init__(self):
        self.description = ""The GDP of a region""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""GDP should be formatted as a floating point number""
        self.examples = [-1532413.0, 3835547.0, -1170423.0, -113271.0, 2702837.0]
    def cast(self, val):
        return float(val)

class homeadvantage(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'zweds': distance, 'ysald': score, 'ygewo': binaryoutcome, 'ypunt': score, 
           'dthui': binaryoutcome, 'xtoes': distance, 'xdder': binaryoutcome, 
           'xafst': population, 'xdhoo': score, 'xdtem': temperature, 'xdnee': score, 
           'xcult': gdp, 'xdgdp': gdp, 'xdbal': binaryoutcome, 'xdnor': binaryoutcome, 
           'xdham': score, 'xdcoe': gdp, 'xdhooa': score, 'xdtema': temperature, 
           'xdneea': score, 'xdgdpa': gdp, 'seige': binaryoutcome, 'szond': binaryoutcome, 
           'spoul': homeadvantage}"
"class denomination(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Denomination of the church""
        self.valid_values = ""Must be a string representing a valid church denomination""
        self.format = ""First letter of each word should be capitalized, rest in lower case""
        self.examples = ['Roman Catholic', 'Orthodox Church In America', 'Congregational Churches', 'American Baptist Church In The Usa', 'Methodist Episcopal Church']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1634, 1792, 1852, 1814, 1784]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class missionboard(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1, 2]
    def cast(self, val):
        return int(val)

MAPPING = {'denom': denomination, 'fembdfound': year, 'fembd': missionboard, 'found': year, 'bdfound': year}"
"class articlechanges(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of changes in articles""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be an integer""
        self.examples: list[int] = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class expire(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class cabinet(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Cabinet names""
        self.valid_values = ""Any string representing a cabinet name""
        self.format = ""Should be a string""
        self.examples = ['Rasmussen N I', 'Verhofstadt I', 'Verhofstadt II', 'Kok II', 'Kok I']
    def cast(self, val):
        return str(val)

class seats(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of seats in percentage""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class jm(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class jmfocal(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class chair(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class ministerchair(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class partnerchair(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class minority(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class cabparties(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of parties in the cabinet""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

class daysinreview(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of days in review""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class articles(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of articles""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

class catcountry(NumericSemanticType):
    def __init__(self):
        self.description = ""Category of country""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Should be an integer from 0 to 3""
        self.examples: list[int] = [0, 1, 2, 3]
    def cast(self, val):
        return int(val)

class ministerdistance(NumericSemanticType):
    def __init__(self):
        self.description = ""Minister distance in the cabinet""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

class popdivcab(NumericSemanticType):
    def __init__(self):
        self.description = ""Political diversity in the cabinet""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.5, 1.0, 1.5, 2.0, 2.5]
    def cast(self, val):
        return float(val)

class cmpdivcab(NumericSemanticType):
    def __init__(self):
        self.description = ""CMP diversity in the cabinet""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

class oppositionchair(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class marker(NumericSemanticType):
    def __init__(self):
        self.description = ""Marker for the cabinet""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be an integer""
        self.examples: list[int] = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class estsimple(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class simplepred(NumericSemanticType):
    def __init__(self):
        self.description = ""Simple prediction value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

class simpledev(NumericSemanticType):
    def __init__(self):
        self.description = ""Simple deviation value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

class estfull(BooleanSemanticType):
    def __init__(self):
        self.valid_values: list[bool] = [0, 1]
    def cast(self, val):
        return bool(val)

class fullpred(NumericSemanticType):
    def __init__(self):
        self.description = ""Full prediction value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

class fulldev(NumericSemanticType):
    def __init__(self):
        self.description = ""Full deviation value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples: list[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    def cast(self, val):
        return float(val)

MAPPING = {
    'artchanges': articlechanges,
    'expire': expire,
    'cabinet': cabinet,
    'seats': seats,
    'jm': jm,
    'jmfocal': jmfocal,
    'chair': chair,
    'ministerchair': ministerchair,
    'partnerchair': partnerchair,
    'minority': minority,
    'cabparties': cabparties,
    'daysinreview': daysinreview,
    'articles': articles,
    'catcountry': catcountry,
    'ministerdistance': ministerdistance,
    'popdivcab': popdivcab,
    'cmpdivcab': cmpdivcab,
    'oppositionchair': oppositionchair,
    'marker': marker,
    'estsimple': estsimple,
    'simplepred': simplepred,
    'simpledev': simpledev,
    'estfull': estfull,
    'fullpred': fullpred,
    'fulldev': fulldev
}"
"class typefpselect(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Family Planning Selected""
        self.valid_values = ""Values must be 0, 1, 2, or 3""
        self.format = ""Type of Family Planning Selected should be an integer (0, 1, 2, or 3)""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        return int(val)

class yesno(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class qualscorefpcounsel(NumericSemanticType):
    def __init__(self):
        self.description = ""Quality Score of Family Planning Counseling""
        self.valid_range = [0.0, 100.0]
        self.dtype = float
        self.format = ""Quality Score of Family Planning Counseling should be a float between 0.0 and 100.0""
        self.examples = [58.819702, 58.909313, 66.88544, 51.69061, 39.67081]
    def cast(self, val):
        return round(float(val), 6)

class caste(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Caste Category""
        self.valid_values = ""Values must be 1, 2, or 3""
        self.format = ""Caste Category should be an integer (1, 2, or 3)""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class religion(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class agewoman(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of Woman""
        self.valid_range = [19.0, 42.0]
        self.dtype = float
        self.format = ""Age of Woman should be an integer between 19 and 42""
        self.examples = [26.0, 22.0, 25.0, 25.0, 24.0]
    def cast(self, val):
        return int(val)

class numlivingchild(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Living Children""
        self.valid_range = [1.0, 3.0]
        self.dtype = float
        self.format = ""Number of Living Children should be an integer (1, 2, or 3)""
        self.examples = [3.0, 2.0, 1.0, 3.0, 2.0]
    def cast(self, val):
        return int(val)

class malechild(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class primeduwoman(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class ageprovider(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of Provider""
        self.valid_range = [21.0, 59.0]
        self.dtype = float
        self.format = ""Age of Provider should be an integer between 21 and 59""
        self.examples = [25.0, 38.0, 38.0, 40.0, 25.0]
    def cast(self, val):
        return int(val)

class providerdesig(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        return int(val)

class providertrainedcounsel(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'typefpselect': typefpselect, 'askfertilitygoal': yesno, 'askprobmethod': yesno, 'askmethodpref': yesno, 'askmethodusedearly': yesno, 'tolddiffmethod': yesno, 'toldmethoduse': yesno, 'toldmethodside': yesno, 'toldexpprob': yesno, 'askquestion': yesno, 'sufficienttime': yesno, 'treatfriendly': yesno, 'treatrespectful': yesno, 'nopressure': yesno, 'qualscorefpcounsel': qualscorefpcounsel, 'caste': caste, 'religion': religion, 'agewoman': agewoman, 'numlivingchild': numlivingchild, 'malechild': malechild, 'primeduwoman': primeduwoman, 'ageprovider': ageprovider, 'providerdesig': providerdesig, 'providertrainedcounsel': providertrainedcounsel}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of an individual""
        self.valid_values = ""Gender should be either 'Male' or 'Female'""
        self.format = ""Gender is stored as a string""
        self.examples = ['Male', 'Female', 'Female', 'Male', 'Female']
    def cast(self, val):
        return str(val).capitalize()

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an individual""
        self.valid_range = [0, 150] # It's unlikely for a person to live past 150 years
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [20, 24, 25, 25, 25]
    def cast(self, val):
        return int(val)

class nationality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality of an individual""
        self.valid_values = ""Nationality should be a valid country name""
        self.format = ""Nationality is stored as a string""
        self.examples = ['Pakistani', 'Pakistani', 'Pakistani', 'Pakistani', 'Pakistani']
    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val
        else:
            raise ValueError(""Invalid nationality"")

class likertscale(NumericSemanticType):
    def __init__(self):
        self.description = ""Likert scale responses""
        self.valid_range = [1, 7] # Typical Likert scale range
        self.dtype = int
        self.format = ""Responses should be an integer between 1 and 7""
        self.examples = [5, 5, 4, 5, 7]
    def cast(self, val):
        if 1 <= val <= 7:
            return int(val)
        else:
            raise ValueError(""Invalid Likert scale response"")

class total(NumericSemanticType):
    def __init__(self):
        self.description = ""Total score of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Total should be an integer""
        self.examples = [53, 69, 56, 67, 49]
    def cast(self, val):
        return int(val)

MAPPING = {
    'gender': gender,
    'age': age,
    'nationality': nationality,
    'q1': likertscale,
    'q2': likertscale,
    'q3': likertscale,
    'q3recoded': likertscale,
    'q4': likertscale,
    'q4recoded': likertscale,
    'q5': likertscale,
    'q5recoded': likertscale,
    'q6': likertscale,
    'q7': likertscale,
    'q8': likertscale,
    'q9': likertscale,
    'q9recoded': likertscale,
    'q10': likertscale,
    'q10recoded': likertscale,
    'q11': likertscale,
    'q11recoded': likertscale,
    'q12': likertscale,
    'q12recoded': likertscale,
    'q13': likertscale,
    'q14': likertscale,
    'total': total
}"
"class ibgecode(NumericSemanticType):
    def __init__(self):
        self.description = ""The IBGE (Brazilian Institute of Geography and Statistics) code""
        self.valid_range = [110001, 530010]
        self.dtype = int
        self.format = ""IBGE code should be a 6-digit integer number""
        self.examples = [110001, 251209, 314622, 411911, 530010]
    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid IBGE code')
        if 110001 <= val <= 530010:
            return val
        else:
            raise Exception('Invalid IBGE code')
            
class stateabbreviation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The abbreviation of a Brazilian state""
        self.valid_values = ""The abbreviation must be a 2-letter string, which is in the list of Brazilian state abbreviations""
        self.format = ""The abbreviation must be a 2-letter string, all upper case""
        self.examples = ['RO', 'MG', 'SP', 'RS', 'BA', 'PR']
    def cast(self, val):
        val = str(val).upper()
        if len(val) != 2 or not val.isalpha():
            raise Exception('Invalid Brazilian state abbreviation')
        return val

class regioncode(NumericSemanticType):
    def __init__(self):
        self.description = ""The code of a region in Brazil""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Region code should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        try:
            val = int(val)
        except ValueError:
            raise Exception('Invalid region code')
        if 1 <= val <= 5:
            return val
        else:
            raise Exception('Invalid region code')

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        val = float(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean indicator')

class idhmscore(NumericSemanticType):
    def __init__(self):
        self.description = ""The IDHM (Municipal Human Development Index) score""
        self.valid_range = [0, 1000]
        self.dtype = float
        self.format = ""IDHM score should be a floating point number between 0 and 1000""
        self.examples = [5.0, 579.0, 651.0, 712.0, 862.0]
    def cast(self, val):
        try:
            val = float(val)
        except ValueError:
            raise Exception('Invalid IDHM score')
        if 0 <= val <= 1000:
            return val
        else:
            raise Exception('Invalid IDHM score')

MAPPING = {'cdibge6': ibgecode, 'cdibge7': ibgecode, 'cduf': ibgecode, 'siglauf': stateabbreviation, 
           'regiao': regioncode, 'portemean': ibgecode, 'idhm': idhmscore, 'proprural': booleanindicator, 
           'primeiradama': booleanindicator, 'escolaridadesecretario': ibgecode, 'templanoassistencia': booleanindicator, 
           'propentrevistperm20132014': booleanindicator, 'cadastroequipesservicos': booleanindicator, 
           'proppostocras': booleanindicator, 'veiculoproprio': booleanindicator, 'utilizacaodefinicaopublicoalvo': booleanindicator, 
           'utilizacaodiagnostico': booleanindicator, 'utilizacaotrabalhoinfantil': booleanindicator, 
           'utilizacaosituacaorua': booleanindicator, 'utilizacaodeficiencia': booleanindicator, 
           'utilizacaogpte': booleanindicator, 'utilizacaooutros': booleanindicator, 'proppbf': booleanindicator, 
           'tacmaio2014': booleanindicator}"
"class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid gender value')
            
class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 130] 
        self.dtype = int 
        self.format = ""Age should be a positive integer""
        self.examples = [33, 30, 47, 43, 44]
    def cast(self, val):
        val = int(val)
        if val >= self.valid_range[0] and val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid age')

class education(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Education level of a person""
        self.valid_values = ""Education level can take values such as 'Degree', 'HighschoolDiploma', 'MiddleSchool'""
        self.format = ""Education level should be a string""
        self.examples = ['HighschoolDiploma', 'Degree', 'Degree', 'Degree', 'HighschoolDiploma']
    def cast(self, val):
        return str(val)

class cfc(NumericSemanticType):
    def __init__(self):
        self.description = ""Consideration of Future Consequences score""
        self.valid_range = [1, 5]
        self.dtype = int 
        self.format = ""CFC score should be an integer between 1 and 5""
        self.examples = [4, 3, 5, 2, 4]
    def cast(self, val):
        val = int(val)
        if val >= self.valid_range[0] and val <= self.valid_range[1]:
            return val
        else:
            raise Exception('Invalid CFC score')

MAPPING = {
    'gender': gender, 
    'age': age, 
    'education': education, 
    'cfc1': cfc,
    'cfc2': cfc,
    'cfc3r': cfc,
    'cfc4r': cfc,
    'cfc5r': cfc,
    'cfc6': cfc,
    'cfc7': cfc,
    'cfc8': cfc,
    'cfc9r': cfc,
    'cfc10r': cfc,
    'cfc11r': cfc,
    'cfc12r': cfc,
}"
"class isregistered(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val > 0.5 else 0.0

class agestudent(NumericSemanticType):
    def __init__(self):
        self.description = ""The age of the student""
        self.valid_range = [18, 30]
        self.dtype = int
        self.format = ""The age should be a whole number""
        self.examples = [18, 19, 20, 21, 22]
    def cast(self, val):
        return int(val)

class uniquesectionid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique ID for the section""
        self.valid_range = [1, 140]
        self.dtype = int
        self.format = ""The ID should be a whole number""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class uniqueroomid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique ID for the room""
        self.valid_range = [1, 4198]
        self.dtype = int
        self.format = ""The ID should be a whole number""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class roommatescount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of roommates""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""The count should be a whole number""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class isethnicity(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val > 0.5 else 0.0

MAPPING = {'wra': isregistered, 'treatassign': isregistered, 'treatsuc': isregistered, 'infoassign': isregistered, 'infosuc': isregistered, 
           'pledgeassign': isregistered, 'pledgesuc': isregistered, 'age': agestudent, 'uniquesection': uniquesectionid, 
           'uniquerm': uniqueroomid, 'nrmmates': roommatescount, 'voted': isregistered, 'regpresept9': isregistered, 
           'regpostsept9preoct9': isregistered, 'crsa': isregistered, 'crsb': isregistered, 'afam': isethnicity, 
           'asian': isethnicity, 'latino': isethnicity, 'female': isregistered}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Represents gender""
        self.valid_values = ""0.0 representing Male, 1.0 representing Female""
        self.format = ""Stored as a float where 0.0 is male and 1.0 is female""
        self.examples = [0.0, 1.0]
    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid value for gender')
        return val

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents age""
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = ""Age should be a non-negative floating point number""
        self.examples = [16.0, 18.0, 17.0, 19.0, 20.0]
    def cast(self, val):
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid value for age')
        return float(val)

class cfc(NumericSemanticType):
    def __init__(self):
        self.description = ""CFC score measure""
        self.valid_range = [0, 7]
        self.dtype = float
        self.format = ""CFC score should be a floating point number between 0 and 7""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise Exception('Invalid value for CFC score')
        return float(val)

MAPPING = {
    'gender': gender,
    'age': age,
    'cfc1': cfc,
    'cfc2': cfc,
    'cfc3': cfc,
    'cf4': cfc,
    'cf5': cfc,
    'cfc6': cfc,
    'cfc7': cfc,
    'cfc8': cfc,
    'cfc9': cfc,
    'cfc10': cfc,
    'cfc11': cfc,
    'cfc12': cfc,
    'cfc13': cfc,
    'cfc14': cfc,
}"
"class presidentname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Brazilian President""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Dilma I', 'FHC II', 'Lula I', 'Lula II', 'Dilma I']
    def cast(self, val):
        return str(val).title()

class projectid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Project ID""
        self.valid_values = ""Project ID should be a string that is of the form 'AAA####/##'""
        self.format = ""AAA####/##""
        self.examples = ['MPV0666/14', 'MPV0658/14', 'PLN0020/14', 'PLN0022/14', 'MPV0665/14']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid project ID')

class senatenum(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Senate Number""
        self.valid_values = ""Senate Number should be a string that is of the form 'AAA####/##'""
        self.format = ""AAA####/##""
        self.examples = ['PLC0046/96', 'PLN0029/06', 'PLN0006/14', 'PLN0018/14', '-1']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{3}[0-9]{4}/[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        elif val == '-1':
            return val
        else:
            raise Exception('Invalid senate number')

class legislativeorg(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Legislative Org""
        self.valid_values = ""Legislative Org should be a string that is of the form 'AA'""
        self.format = ""AA""
        self.examples = ['EF']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid legislative org')

class lawtype(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Law Type'
        self.valid_range: list = [1, 3]
        self.dtype: object = int
        self.format: str = 'integer number in the range 1-3'
        self.examples: list = [1, 2, 3]
    def cast(self, val): 
        val = int(val)
        if val >= 1 and val <= 3:
            return val
        else:
            raise Exception('Invalid law type')

class legislatureaction(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Legislature Action""
        self.valid_values = ""Legislature Action should be a string that is of the form 'AAAA'""
        self.format = ""AAAA""
        self.examples = ['TNJR', 'PRJD', 'TCOM', 'RTPA', 'SEFI']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('[A-Z]{4}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid legislature action')

class honeymoon(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        val = int(val)
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid honeymoon value')

MAPPING = {
    'presidente': presidentname,
    'projano': projectid,
    'numsen': senatenum,
    'orgao': legislativeorg,
    'tipolei': lawtype,
    'ultacao': legislatureaction,
    'honeymoon': honeymoon
}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names should be valid and exist in the world""
        self.format = ""Country names should be capitalized strings""
        self.examples = ['US', 'Australia', 'Canada', 'Country', 'Italy']
    def cast(self, val):
        if pd.isna(val):
            return val
        country = pycountry.countries.get(name=val.title())
        if country is not None:
            return country.name
        else:
            raise Exception('Invalid country name')

class electiontype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of Election""
        self.valid_values = ""Election type should be a valid type""
        self.format = ""Election type should be capitalized strings""
        self.examples = ['President', 'Federal', 'General', 'Election', 'Various']
    def cast(self, val):
        if pd.isna(val):
            return val
        return str(val).title()

class dependentvariable(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dependent Variable""
        self.valid_values = ""Dependent variable should be a valid type""
        self.format = ""Dependent variable should be capitalized strings""
        self.examples = ['Incumbent vote', 'Liberal vote', 'Dependent variable', 'Incumbent government vote', 'LDP (percent seats)']
    def cast(self, val):
        if pd.isna(val):
            return val
        return str(val).title()

class modelfit(NumericSemanticType):
    def __init__(self):
        self.description = ""Model Fit""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Model fit should be a floating point number between 0 and 1""
        self.examples = [0.732, 0.782, 0.897, 0.937, 0.194]
    def cast(self, val):
        if math.isnan(val):
            return val
        if 0 <= val <= 1:
            return float(val)
        else:
            raise Exception('Invalid model fit value')

class noofelections(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Elections""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of elections should be an integer greater than or equal to 0""
        self.examples = [9, 13, 16, 19, 40]
    def cast(self, val):
        if math.isnan(val):
            return val
        if val >= 0:
            return int(val)
        else:
            raise Exception('Invalid number of elections')

class noofvariables(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Variables""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of variables should be an integer greater than or equal to 0""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return val
        if val.isdigit():
            return int(val)
        else:
            raise Exception('Invalid number of variables')

class h(NumericSemanticType):
    def __init__(self):
        self.description = ""H value""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""H value should be an integer greater than or equal to 0""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        if pd.isna(val):
            return val
        if val.isdigit():
            return int(val)
        else:
            raise Exception('Invalid H value')

class i(NumericSemanticType):
    def __init__(self):
        self.description = ""I value""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""I value should be an integer greater than or equal to 0""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if pd.isna(val):
            return val
        if str(val).isdigit():
            return int(val)
        else:
            raise Exception('Invalid I value')

MAPPING = {'a': countryname, 'b': electiontype, 'c': electiontype, 'd': dependentvariable, 'modelfit': modelfit, 'noofelections': noofelections, 'noofvariables': noofvariables, 'h': h, 'i': i}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents a year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1969, 1981, 1992, 2003, 2013]
    def cast(self, val):
        if math.isnan(val):
            return None
        return int(val)

class phdstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Represents the status of a PhD""
        self.valid_values = ""Valid values should be in the range 0-6. 'PhD' represents a PhD status, and the numbers represent the count""
        self.format = ""Values should be string representations of integers or 'PhD'""
        self.examples = ['PhD', '0', '1', '2', '3']
    def cast(self, val):
        if val == 'PhD':
            return val
        else:
            return str(int(val))

class mastatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Represents the status of a MA""
        self.valid_values = ""Valid values should be in the range 0-38. 'MA' represents a MA status, and the numbers represent the count""
        self.format = ""Values should be string representations of integers or 'MA'""
        self.examples = ['MA', '2', '5', '10', '38']
    def cast(self, val):
        if val == 'MA':
            return val
        else:
            return str(int(val))

MAPPING = {
    'theexpansionofpoliticalsciencesphdsprogrammesinbrazil': year,
    'b': phdstatus,
    'c': mastatus
}"
"class timestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Timestamps""
        self.valid_values = ""Timestamps should be of the form 'MM/DD/YYYY hh:mm:ss'""
        self.format = ""Timestamps should be stored as strings in the form 'MM/DD/YYYY hh:mm:ss'""
        self.examples = ['8/4/2021 11:12:05', '8/4/2021 11:27:22', '8/4/2021 13:53:45', '8/4/2021 20:56:59', '8/5/2021 1:51:12']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return datetime.strptime(str(val), '%m/%d/%Y %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')

class schoolgrade(NumericSemanticType):
    def __init__(self):
        self.description = ""School Grade""
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = ""Grades should be represented as integers""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class zipcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Zip Codes""
        self.valid_values = ""Zip Codes must must fit the following regex: '[0-9]{5}(?:-[0-9]{4})?'""
        self.format = ""Zip Codes must be 5-digit numbers stored as strings""
        self.examples = ['85286', '85248', '10003', '30309', '30308']
    def cast(self, val):
        string = str(int(val))
        match_obj = re.match('[0-9]{5}(?:-[0-9]{4})?', string)
        if match_obj:
            return match_obj.group()
        else:
            return float('nan')

class booleananswer(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class lunchspending(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Lunch Spending""
        self.valid_values = ""Amount spent on lunch over the course of the year should be in the format '< $50', '$50-150' or '> $150'""
        self.format = ""Amount spent on lunch over the course of the year should be stored as strings""
        self.examples = ['< $50', '$50-150', '> $150']
    def cast(self, val):
        return str(val).strip()

MAPPING = {'timestamp': timestamp, 
           'whatgradeareyouin': schoolgrade, 
           'whatisyourzipcode': zipcode, 
           'doyouhaveadietaryrestrictionifsowhatisit': booleananswer, 
           'doyoueatschoolfoodonaregularbasis': booleananswer, 
           'haveyoubeenunabletohavecertainfoodsatschoolbecauseofanydietaryrestrictionssuchaskosherhalalorvegetarian': booleananswer, 
           'haveyoueverskippedlunchduetodietaryrestrictions': booleananswer, 
           'isitcostlyorinconvenienttomakeorbuylunch': booleananswer, 
           'doyouwishitwaslawtomakefoodoptionsmoreaccessibleforallgroupsincludingthosewithdietaryrestrictions': booleananswer, 
           'wouldyoueatschoollunchiftherewasmorevarietylikesaladbarsorhalalkosherburgers': booleananswer, 
           'basedonthepreviousquestionwouldyoufeelmoreincludedorcomfortableatschoolifthathappened': booleananswer, 
           'howmuchdoyouspendonbuyinglunchoutsideofschooltoeatduringschoollunchoverthecourseoftheyear': lunchspending, 
           'wouldthatcostbereducediftheschoolfoodavailablewasbettersuitedtothefoodsthatyoucouldeat': booleananswer, 
           'howfavorableisyourschoollunchvarietyinyouropinion': booleananswer, 
           'zipcode': zipcode}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 150] # assuming that no one lives beyond 150 years
        self.dtype = int
        self.format = ""Age should be a whole number""
        self.examples = [41, 30, 57, 19, 51]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid age')

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid binary response')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender is encoded as 1 for male, 2 for female, and other numbers for other gender identities""
        self.format = ""Gender should be a whole number""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 4:
            return num
        else:
            raise Exception('Invalid gender')
            
class income(NumericSemanticType):
    def __init__(self):
        self.description = ""Income level of a person""
        self.valid_range = [1, 7] # assuming that income is encoded on a scale of 1-7
        self.dtype = int
        self.format = ""Income should be a whole number between 1 and 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid income level')

class ideol(NumericSemanticType):
    def __init__(self):
        self.description = ""Ideological level of a person""
        self.valid_range = [1, 7] # assuming that ideological level is encoded on a scale of 1-7
        self.dtype = int
        self.format = ""Ideological level should be a whole number between 1 and 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        num = int(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return num
        else:
            raise Exception('Invalid ideological level')

MAPPING = {'age': age, 'white': binaryresponse, 'gender': gender, 'income': income, 'ideol': ideol, 'livenearwf': binaryresponse, 'seenwf': binaryresponse, 'supportwind': binaryresponse, 'windenv': binaryresponse, 'windecon': binaryresponse, 'pid': binaryresponse, 'condition2': binaryresponse, 'south': binaryresponse, 'northeast': binaryresponse, 'midwest': binaryresponse, 'west': binaryresponse, 'female': binaryresponse, 'ed': binaryresponse, 'condenv': binaryresponse, 'condecon': binaryresponse, 'windeconprime': binaryresponse, 'windenvprime': binaryresponse}"
"class projectid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a project""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Project ID should be a positive integer""
        self.examples = [1, 5, 10, 15, 20]
    def cast(self, val):
        return int(val)

class concession(NumericSemanticType):
    def __init__(self):
        self.description = ""Concession period of a project in years""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Concession period should be a positive integer""
        self.examples = [1, 20, 34, 52, 72]
    def cast(self, val):
        return int(val)

class projectname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the project""
        self.valid_values = ""Project name should be a string""
        self.format = ""The project name should be stored as a string""
        self.examples = ['Puente del Ebro S.A.', 'Cedinsa Eix del Llobregat Concesionaria de la Generalitat de Catalunya S.A.', 'Madrid 404 Sociedad Concesionaria S.A.', 'Carretera Palma-Manacor sociedad concesionaria del Consell Insular de Mallorca, S.A.', 'Autovía de los Viñedos, S.A.']
    def cast(self, val):
        return str(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of the project""
        self.valid_range = [2009, 2013]
        self.dtype = int
        self.format = ""Year should be an integer between 2009 and 2013""
        self.examples = [2009, 2010, 2011, 2012, 2013]
    def cast(self, val):
        return int(val)

class rate(NumericSemanticType):
    def __init__(self):
        self.description = ""Rate for the project""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Rate should be a float number greater than or equal to 0""
        self.examples = [0, 0.064, 0.197, 0.099, 1.4743]
    def cast(self, val):
        return float(val)

class typeofva(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of VA""
        self.valid_values = ""Type of VA must be either 'interurbana' or 'urbana'""
        self.format = ""Type of VA should be stored as a string""
        self.examples = ['interurbana', 'urbana']
    def cast(self, val):
        if val not in ['interurbana', 'urbana']:
            raise ValueError(""Invalid Type of VA"")
        return val

class situation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Project situation""
        self.valid_values = ""Project situation must be either 'interior' or 'costa'""
        self.format = ""Project situation should be stored as a string""
        self.examples = ['interior', 'costa']
    def cast(self, val):
        if val not in ['interior', 'costa']:
            raise ValueError(""Invalid Project situation"")
        return val

class financing(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Si', 'No']
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid Financing"")
        return val

class typeofppp(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of PPP""
        self.valid_values = ""Type of PPP must be either 'Peaje Sombra' or 'Peaje Exlícito al usuario'""
        self.format = ""Type of PPP should be stored as a string""
        self.examples = ['Peaje Sombra', 'Peaje Exlícito al usuario']
    def cast(self, val):
        if val not in ['Peaje Sombra', 'Peaje Exlícito al usuario']:
            raise ValueError(""Invalid Type of PPP"")
        return val

class typeofproject(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Project""
        self.valid_values = ""Type of Project must be either 'Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf'""
        self.format = ""Type of Project should be stored as a string""
        self.examples = ['Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf']
    def cast(self, val):
        if val not in ['Greenfield', 'Desdoblamiento', 'Brownfield', ' Greenf + Brownf']:
            raise ValueError(""Invalid Type of Project"")
        return val

class grantor(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Grantor of the project""
        self.valid_values = ""Grantor must be either 'Gobierno autonómico', ' Admon Central', 'Admon Central'""
        self.format = ""Grantor should be stored as a string""
        self.examples = ['Gobierno autonómico', ' Admon Central', 'Admon Central']
    def cast(self, val):
        if val not in ['Gobierno autonómico', ' Admon Central', 'Admon Central']:
            raise ValueError(""Invalid Grantor"")
        return val

class economicprofitability(NumericSemanticType):
    def __init__(self):
        self.description = ""Economic profitability of a project""
        self.valid_range = [-0.423204, 0.247718]
        self.dtype = float
        self.format = ""Economic profitability should be a float number between -0.423204 and 0.247718""
        self.examples = [-0.020882, -0.021644, -0.016891, -0.018089, -0.017189]
    def cast(self, val):
        return float(val)

class concessionyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Concession year of a project""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Concession year should be a positive integer""
        self.examples = [1, 5, 8, 14, 47]
    def cast(self, val):
        return int(val)

class lightvehicles(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of light vehicles""
        self.valid_range = [2007.0, float('inf')]
        self.dtype = float
        self.format = ""Number of light vehicles should be a float number greater than or equal to 2007.0""
        self.examples = [2344.0, 2007.0, 2110.0, 2131.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class heavyvehicles(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of heavy vehicles""
        self.valid_range = [145.0, float('inf')]
        self.dtype = float
        self.format = ""Number of heavy vehicles should be a float number greater than or equal to 145.0""
        self.examples = [1192.0, 894.0, 883.0, 865.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class totalvehicles(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of vehicles""
        self.valid_range = [2737.0, float('inf')]
        self.dtype = float
        self.format = ""Total number of vehicles should be a float number greater than or equal to 2737.0""
        self.examples = [3536.0, 2901.0, 2993.0, 2996.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)


MAPPING = {'id': projectid, 'concesion': concession, 'nombreconcesion': projectname, 'year': year, 'tarifa': rate, 'tipodeva': typeofva, 'situacin': situation, 'financiacion': financing, 'tipodeppp': typeofppp, 'tipodeproyecto': typeofproject, 'admconcedente': grantor, 'rentabilidadeconomica': economicprofitability, 'anoconc': concessionyear, 'imdligeros': lightvehicles, 'imdpesados': heavyvehicles, 'imdtotal': totalvehicles}"
"class newspapername(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Newspaper""
        self.valid_values = ""Name should be a string and must be a valid newspaper name""
        self.format = ""The name of the newspaper should be in title case""
        self.examples = ['The Irish Times', 'Irish Independent', 'Irish Examiner', 'National Post (f/k/a The Financial Post) (Canada)', 'The Toronto Star']
    def cast(self, val):
        return str(val).title()

class dateinexcel(NumericSemanticType):
    def __init__(self):
        self.description = ""Date in Excel""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Date should be a floating point number in Excel format""
        self.examples: list = [41638.0, 41637.0, 41636.0, 41635.0, 41634.0]
    def cast(self, val):
        try:
            return pd.to_datetime(val, unit='D', origin='1899-12-30')
        except:
            return float('nan')

class speakerid(NumericSemanticType):
    def __init__(self):
        self.description = ""Speaker ID""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Speaker ID should be a floating point number""
        self.examples: list = [402.0, 403.0, 404.0, 405.0, 406.0]
    def cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')

class stancecategoryid(NumericSemanticType):
    def __init__(self):
        self.description = ""Stance Category ID""
        self.valid_range = [0, 2]
        self.dtype = float
        self.format = ""Stance Category ID should be a floating point number, either 0, 1 or 2""
        self.examples: list = [0.0, 1.0, 2.0, 0.0, 1.0]
    def cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')

class frameid(NumericSemanticType):
    def __init__(self):
        self.description = ""Frame ID""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Frame ID should be a floating point number""
        self.examples: list = [605.0, 738.0, 801.0, 803.0, 803.0]
    def cast(self, val):
        try:
            return float(val)
        except:
            return float('nan')

MAPPING = {'id': speakerid, 'date': dateinexcel, 'source': newspapername, 'speaker': speakerid, 'stance': stancecategoryid, 'frame': frameid}"
"class idtitulares(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for the senators""
        self.valid_range = [1, 851]
        self.dtype = int
        self.format = ""Unique ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class tipodetrajetória(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of career trajectory""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Career type should be a positive integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class totaldecargospréviosaosenado(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of previous positions to the senate""
        self.valid_range = [0, 19]
        self.dtype = int
        self.format = ""Number of positions should be a positive integer between 0 and 19""
        self.examples = [0, 3, 5, 7, 19]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class tempodecarreira(NumericSemanticType):
    def __init__(self):
        self.description = ""Career duration in years""
        self.valid_range = [0, 99]
        self.dtype = int
        self.format = ""Career duration should be a positive integer between 0 and 99""
        self.examples = [0, 7, 19, 35, 99]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class agregaçãodaseleiçõesparecerista3(NumericSemanticType):
    def __init__(self):
        self.description = ""Aggregation of the election rapporteur""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Aggregation should be a positive integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class níveisexperiênciapolítica(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of political experience""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Level of experience should be a positive integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class níveisexperdummy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class ufsprojetolove(NumericSemanticType):
    def __init__(self):
        self.description = ""Project Love UFS""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""UFS Project Love should be a positive integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {'idtitulares': idtitulares, 'tipodetrajetória': tipodetrajetória, 'totaldecargospréviosaosenado': totaldecargospréviosaosenado, 'tempodecarreira': tempodecarreira, 'agregaçãodaseleiçõesparecerista3': agregaçãodaseleiçõesparecerista3, 'níveisexperiênciapolítica': níveisexperiênciapolítica, 'níveisexperdummy': níveisexperdummy, 'ufsprojetolove': ufsprojetolove}"
"class surveyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a survey""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Survey ID should be stored as an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class employmentstatuscode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code representing employment status""
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = ""Employment status code should be an integer between 1 and 9""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class familymembers(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of children in a household""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of children should be stored as an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class gendercode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code representing gender""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Gender code should be an integer 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the individual""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be stored as an integer""
        self.examples = [19, 35, 41, 49, 56]
    def cast(self, val):
        return int(val)

class incomelevelcode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code representing annual income level""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Income level code should be an integer between 1 and 6""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class birthplacecode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code representing birth location""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Birthplace code should be an integer between 1 and 3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class surveytypecode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code representing type of survey""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Survey type code should be an integer 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)

class contribution(NumericSemanticType):
    def __init__(self):
        self.description = ""Contribution amount""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Contribution should be stored as a floating point number""
        self.examples = [0.0, 200.0, 400.0, 600.0, 1000.0]
    def cast(self, val):
        return float(val)

class asc(NumericSemanticType):
    def __init__(self):
        self.description = ""Binary value""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""ASC should be stored as an integer 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {
    'choiceset': surveyid, 'surveynumber': surveyid, 'questionnumber': surveyid, 'originalset': surveyid, 
    'recordid': surveyid, 'employmentstatus': employmentstatuscode, 'childrenhh': familymembers, 
    'gender': gendercode, 'age': age, 'annualincome': incomelevelcode, 'birthlocation': birthplacecode, 
    'surveytype': surveytypecode, 'recordiidd': surveyid, 'cid': surveyid, 'contribution': contribution, 
    'asc': asc
}"
"class outlier(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class experimentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Experiment ID""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Experiment ID should be an integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class participantid(NumericSemanticType):
    def __init__(self):
        self.description = ""Participant ID""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Participant ID should be an integer""
        self.examples = [1, 40, 121, 503, 240001]
    def cast(self, val):
        return int(val)

class experimentdate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Experiment Date""
        self.valid_values = ""Experiment Date should be in format of 'YYYY-MM-DD'""
        self.format = ""Experiment Date should be in format of 'YYYY-MM-DD'""
        self.examples = ['2011-02-11', '2012-12-29', '2012-12-24', '2013-02-07', '2013-01-05']
    def cast(self, val):
        return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

class sessionid(NumericSemanticType):
    def __init__(self):
        self.description = ""Session ID""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Session ID should be an integer""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        return int(val) if pd.notnull(val) else float('nan')

class trialnum(NumericSemanticType):
    def __init__(self):
        self.description = ""Trial Number""
        self.valid_range = [1, 180]
        self.dtype = int
        self.format = ""Trial Number should be an integer""
        self.examples = [1, 32, 63, 110, 180]
    def cast(self, val):
        return int(val)

class participantspecies(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class stimuluspecies(NumericSemanticType):
    def __init__(self):
        self.description = ""Stimulus Species""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""Stimulus Species should be an integer""
        self.examples = [0, 1, 2]
    def cast(self, val):
        return int(val)

class stimulusbodypart(NumericSemanticType):
    def __init__(self):
        self.description = ""Stimulus Body Part""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Stimulus Body Part should be an integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class stimulusorientation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class error(NumericSemanticType):
    def __init__(self):
        self.description = ""Error""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Error should be an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val) if pd.notnull(val) else float('nan')

class persmeanreactiontime(NumericSemanticType):
    def __init__(self):
        self.description = ""Personal Mean Reaction Time""
        self.valid_range = [522, float('inf')]
        self.dtype = int
        self.format = ""Personal Mean Reaction Time should be an integer""
        self.examples = [522, 667, 749, 899, 30003]
    def cast(self, val):
        return int(val)

class persstdreactiontime(NumericSemanticType):
    def __init__(self):
        self.description = ""Personal Standard Deviation of Reaction Time""
        self.valid_range = [126, float('inf')]
        self.dtype = int
        self.format = ""Personal Standard Deviation of Reaction Time should be an integer""
        self.examples = [126, 212, 257, 376, 30003]
    def cast(self, val):
        return int(val)

class cutofffilter2sd(NumericSemanticType):
    def __init__(self):
        self.description = ""Cutoff Filter 2 Standard Deviations""
        self.valid_range = [820, float('inf')]
        self.dtype = int
        self.format = ""Cutoff Filter 2 Standard Deviations should be an integer""
        self.examples = [820, 1091, 1267, 1709, 90009]
    def cast(self, val):
        return int(val)

class choicereactiontime(NumericSemanticType):
    def __init__(self):
        self.description = ""Choice Reaction Time""
        self.valid_range = [6, float('inf')]
        self.dtype = int
        self.format = ""Choice Reaction Time should be an integer""
        self.examples = [6, 569, 719, 945, 60000]
    def cast(self, val):
        return int(val)

class choicereactiontimefiltered2sd(NumericSemanticType):
    def __init__(self):
        self.description = ""Choice Reaction Time Filtered 2 Standard Deviations""
        self.valid_range = [6, float('inf')]
        self.dtype = int
        self.format = ""Choice Reaction Time Filtered 2 Standard Deviations should be an integer""
        self.examples = [6, 562, 699, 890, 2768]
    def cast(self, val):
        return int(val) if pd.notnull(val) else float('nan')

MAPPING = {'outlier': outlier, 'experiment': experimentid, 'partid': participantid, 'expdate': experimentdate,
           'session': sessionid, 'trial': trialnum, 'partspecies': participantspecies, 'stimspecies': stimuluspecies,
           'stimbodypart': stimulusbodypart, 'stimorientation': stimulusorientation, 'error': error,
           'persmeanrt': persmeanreactiontime, 'persstdrt': persstdreactiontime, 'cutofffilter2sd': cutofffilter2sd,
           'choicert': choicereactiontime, 'choicertfiltered2sd': choicereactiontimefiltered2sd}"
"[['class repetition(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Represents repeated occurrence of an event""\n        self.valid_range = [1, float(\'inf\')]\n        self.dtype = int\n        self.format = ""An integer >= 1""\n        self.examples = [1, 2, 3, 4, 5]\n    def cast(self, val):\n        num = int(val)\n        if num < 1:\n            raise Exception(\'Invalid repetition\')\n        return num\n\nclass personname(CategoricalSemanticType):\n    def __init__(self):\n        self.description = ""Name of a Person""\n        self.valid_values = ""Name should be a string that is of the form \'first name last name\'""\n        self.format = ""Only the first letter of the first and last name should be capitalized""\n        self.examples = [\'Foida E.Ndambo\', \'Stanley Kiyeyeu\', \'Paulo Nsemwa\', \'Nelly Chando\', \'Magdalena Nyomlela\']\n    def cast(self, val):\n        return str(val).title() if pd.notnull(val) else val\n\nclass geographiclocation(CategoricalSemanticType):\n    def __init__(self):\n        self.description = ""Geographic location""\n        self.valid_values = ""Name of a city or town""\n        self.format = ""Each word should start with a capital letter""\n        self.examples = [\'Iringa\', \'Mbozi\', \'Mbeya\', \'Songea\', \'Njombe\']\n    def cast(self, val):\n        return str(val).title()\n\nclass latitude(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Latitude of a location""\n        self.valid_range = [-90, 90]\n        self.dtype = float\n        self.format = ""A float between -90 (inclusive) and 90 (inclusive)""\n        self.examples = [-90, -45.0, 0, 45.0, 90]\n    def cast(self, val):\n        num = float(val)\n        if num < -90 or num > 90:\n            raise Exception(\'Invalid latitude\')\n        return num\n\nclass longitude(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Longitude of a location""\n        self.valid_range = [-180, 180]\n        self.dtype = float\n        self.format = ""A float between -180 (inclusive) and 180 (inclusive)""\n        self.examples = [-180, -90.0, 0, 90.0, 180]\n    def cast(self, val):\n        num = float(val)\n        if num < -180 or num > 180:\n            raise Exception(\'Invalid longitude\')\n        return num\n\nclass idlocationtreatment(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Unique identifier for each location treatment""\n        self.valid_range = [101, 7076]\n        self.dtype = int\n        self.format = ""An integer between 101 and 7076""\n        self.examples = [101, 102, 104, 105, 106]\n    def cast(self, val):\n        num = int(val)\n        if num < 101 or num > 7076:\n            raise Exception(\'Invalid idlocationtreatment\')\n        return num\n\nclass plotnumber(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Number assigned to each plot""\n        self.valid_range = [1, 12]\n        self.dtype = int\n        self.format = ""An integer between 1 and 12""\n        self.examples = [1, 2, 3, 4, 5]\n    def cast(self, val):\n        num = int(val)\n        if num < 1 or num > 12:\n            raise Exception(\'Invalid plotnumber\')\n        return num\n\nclass treatment(CategoricalSemanticType):\n    def __init__(self):\n        self.description = ""Type of treatment applied""\n        self.valid_values = ""Should be one of [\'Control\', \'Apron Star\', \'Fertilizer\', \'Apron and Fert\']""\n        self.format = ""Should be a string""\n        self.examples = [\'Control\', \'Apron Star\', \'Fertilizer\', \'Apron and Fert\']\n    def cast(self, val):\n        return str(val)\n\nclass variety(CategoricalSemanticType):\n    def __init__(self):\n        self.description = ""Type of variety""\n        self.valid_values = ""Should be one of [\'Njano Uyole\', \'Uyole 96\', \'Farmer variety\']""\n        self.format = ""Should be a string""\n        self.examples = [\'Njano Uyole\', \'Uyole 96\', \'Farmer variety\']\n    def cast(self, val):\n        return str(val)\n\nclass plantarrangement(BooleanSemanticType):\n    def __init__(self):\n        self.valid_values = [\'R\', \'0\']\n    def cast(self, val):\n        if val not in self.valid_values:\n            raise Exception(\'Invalid plantarrangement\')\n        return val\n\nclass average_row_spacing(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Average row spacing""\n        self.valid_range = [0, 1]\n        self.dtype = float\n        self.format = ""A float between 0 and 1""\n        self.examples = [0, 0.25, 0.5, 0.75, 1]\n    def cast(self, val):\n        num = float(val)\n        if num < 0 or num > 1:\n            raise Exception(\'Invalid average_row_spacing\')\n        return num\n\nclass plantcount(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Number of plants per plot""\n        self.valid_range = [0, 16]\n        self.dtype = int\n        self.format = ""An integer between 0 and 16""\n        self.examples = [0, 4, 6, 9, 16]\n    def cast(self, val):\n        num = int(val)\n        if num < 0 or num > 16:\n            raise Exception(\'Invalid plantcount\')\n        return num\n\nclass totalpods(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Total number of pods""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 30, 55, 90, 342]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid totalpods\')\n        return num\n\nclass totalbeans(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Total number of beans""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 15, 35, 63, 170]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid totalbeans\')\n        return num\n\nclass beansfreshweight(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Fresh weight of beans""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 10, 200, 200, 200]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid beansfreshweight\')\n        return num\n\nclass beansdryweight(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Dry weight of beans""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 9.118, 160, 185, 240]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid beansdryweight\')\n        return num\n\nclass yieldperplot(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Yield per plot""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 14.25, 30.812, 59.125, 88]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid yieldperplot\')\n        return num\n\nclass yieldperhactare(NumericSemanticType):\n    def __init__(self):\n        self.description = ""Yield per hactare""\n        self.valid_range = [0, float(\'inf\')]\n        self.dtype = float\n        self.format = ""A float >= 0""\n        self.examples = [0, 570, 1232.5, 2365, 3520]\n    def cast(self, val):\n        num = float(val)\n        if num < 0:\n            raise Exception(\'Invalid yieldperhactare\')\n        return num\n\nMAPPING = {\n    \'rep\': repetition, \n    \'vbaa\': personname, \n    \'district\': geographiclocation, \n    \'latitude\': latitude, \n    \'longitude\': longitude, \n    \'idlocationtreatmentputthisidonsamplebags\': idlocationtreatment, \n    \'plotnumberseemap\': plotnumber, \n    \'treatment\': treatment, \n    \'variety\': variety, \n    \'plantarrangementroworbroadcast\': pla', 'unexpected EOF while parsing (<string>, line 224)']]"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [10, 20, 30, 40, 50]
    def cast(self, val):
        return int(val)

class educationlevel(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Education level of a person""
        self.valid_values = ""Education level must be a string describing the highest level of education achieved""
        self.format = ""Education level should be a string""
        self.examples = [""Bachelor's Degree Final Year"", ""Master's Degree"", ""PhD"", ""High School Diploma"", ""Associate's Degree""]
    def cast(self, val):
        return str(val)

class nationality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality of a person""
        self.valid_values = ""Nationality must be a string describing the nationality of a person""
        self.format = ""Nationality should be a string""
        self.examples = [""Indian"", ""American"", ""British"", ""Chinese"", ""Brazilian""]
    def cast(self, val):
        return str(val)

class cfc(NumericSemanticType):
    def __init__(self):
        self.description = ""Consideration of Future Consequences (CFC) score""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""CFC score should be a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if 1 <= num <= 5:
            return num
        else:
            raise Exception('Invalid CFC score')

MAPPING = {'age': age, 'educationlevel': educationlevel, 'nationality': nationality, 'cfc1': cfc, 'cfc2': cfc, 'cfc3': cfc, 'cfc4': cfc, 'cfc5': cfc, 'cfc6': cfc, 'cfc7': cfc, 'cfc8': cfc, 'cfc9': cfc, 'cfc10': cfc, 'cfc11': cfc, 'cfc12': cfc}"
"class uniqueid(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Unique ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class surveydate(NumericSemanticType):
    def __init__(self):
        self.description = ""A representation of the date in days since 1899-12-30""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Date should be represented as a floating point number, representing the number of days since 1899-12-30""
        self.examples = [42675.0, 42852.0, 42976.0]
    def cast(self, val):
        num = float(val)
        return num

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['F', 'M']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid gender')

class speciesname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Latin name of a species""
        self.valid_values = ""The name should be a valid Latin species name""
        self.format = ""Species names should be capitalised and in the format 'Genus species'""
        self.examples = ['Katsuwonus pelamis', 'Thunnus albacares', 'Lutjanus gibbus', 'Elagatis bipinnulata', 'Hipposcarus longiceps']
    def cast(self, val):
        return str(val).title()

class familyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Family name of a species""
        self.valid_values = ""The name should be a valid family name""
        self.format = ""Family names should be capitalised""
        self.examples = ['Scombridae', 'Scaridae', 'Lutjanidae', 'Lethrinidae', 'Siganidae']
    def cast(self, val):
        return str(val).title()

class fishprice(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The price per piece of fish in SBD (Solomon Islands Dollar)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Price should be a non-negative number, representing the price in SBD""
        self.units = 'In SBD'
        self.examples = [1.0, 5.0, 15.0, 40.0, 800.0]
    def cast(self, val):
        num = float(val)
        return num

class fishlength(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The length of the fish in cm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Length should be a non-negative number, representing the length in cm""
        self.units = 'In cm'
        self.examples = [7.0, 24.0, 31.0, 50.0, 225.0]
    def cast(self, val):
        num = float(val)
        return num

class fishweight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The weight of the fish in kg""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a non-negative number, representing the weight in kg""
        self.units = 'In kg'
        self.examples = [0.1, 0.35, 0.75, 2.7, 15.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            num = float(val)
            return num

class fishingsite(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a fishing site""
        self.valid_values = ""The name should be a string representing a fishing site""
        self.format = ""Names should be capitalised and in the English language""
        self.examples = ['Alite Reef', 'Ramos Island', 'Lau Lagoon', ""East Kwara'ae and Kwaio"", 'Langalanga Lagoon']
    def cast(self, val):
        return str(val).title()

class priceinsbd(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The price in SBD (Solomon Islands Dollar)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Price should be a non-negative number, representing the price in SBD""
        self.units = 'In SBD'
        self.examples = [0.0, 20.0, 70.0, 240.0, 7200.0]
    def cast(self, val):
        num = float(val)
        return num

class habitat(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of habitat""
        self.valid_values = ""The type should be a string representing a type of habitat""
        self.format = ""Types should be capitalised and in the English language""
        self.examples = ['Reef', 'Pelagic', 'Deep water']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A representation of the year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be a positive integer""
        self.examples = [2016, 2017]
    def cast(self, val):
        return int(val)

MAPPING = {
    'id': uniqueid,
    'date': surveydate,
    'vendorsampleid': uniqueid,
    'vendorgender': gender,
    'latinname': speciesname,
    'family': familyname,
    'frequency': NumericSemanticType,
    'priceperpiece': fishprice,
    'lengthcm': fishlength,
    'weightg': fishweight,
    'kg': fishweight,
    'fishingsite': fishingsite,
    'valuesbd': priceinsbd,
    'habitat': habitat,
    'totalkg': fishweight,
    'year': year
}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class party(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political party""
        self.valid_values = ""Party should be a string representing a valid political party""
        self.format = ""Party names should be capitalized""
        self.examples = ['SPD', 'CDU', 'FDP', 'Greens', 'Left']
    def cast(self, val):
        return str(val).title()

class state(CategoricalSemanticType):
    def __init__(self):
        self.description = ""State""
        self.valid_values = ""State should be a string representing a valid state""
        self.format = ""State names should be capitalized""
        self.examples = ['NI', 'HE', 'MV', 'TH', 'BW']
    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [2009, 2017]
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [2009, 2010, 2011, 2012, 2013]
    def cast(self, val):
        return int(val)

class level(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Level of governance""
        self.valid_values = ""Level should be a string representing a valid level of governance""
        self.format = ""Level names should be lowercase""
        self.examples = ['local', 'branch', 'sublocal', 'federal']
    def cast(self, val):
        return str(val).lower()

class sublevel(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sublevel of governance""
        self.valid_values = ""Sublevel should be a string representing a valid sublevel of governance""
        self.format = ""Sublevel names should be capitalized""
        self.examples = ['Braunschweig', 'Hannover', 'Oldenburg', 'Hessen-Nord', 'Hessen-Süd']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).title()

class money(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The amount in Euros""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Amount should be formatted as a floating point number (in Euro units) with two decimal places for cents""
        self.unit = 'In Euro' 
        self.examples: list = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'id': id, 
           'party': party, 
           'state': state, 
           'year': year, 
           'level': level, 
           'sublevel': sublevel, 
           'ifees': money,
           'iman': money,
           'idonind': money,
           'idoncor': money,
           'ibus': money,
           'iinv': money,
           'iothass': money,
           'ipubrel': money,
           'isub': money,
           'ioth': money,
           'isd': money,
           'estaff': money,
           'emat': money,
           'epollab': money,
           'ecamp': money}"
"class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Geographical Regions""
        self.valid_values = ""Valid regions include names like 'Western Europe', 'Northern America', 'Asia', 'Eastern Europe', 'Middle East', etc.""
        self.format = ""Region names should be capitalized strings""
        self.examples = ['Western Europe', 'Northern America', 'Asia', 'Eastern Europe', 'Middle East']
    def cast(self, val):
        return str(val).title()
      
class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Valid countries include names like 'United States of America', 'China', 'Germany', 'United Kingdom', 'Japan', etc.""
        self.format = ""Country names should be capitalized strings""
        self.examples = ['United States of America', 'China', 'Germany', 'United Kingdom', 'Japan']
    def cast(self, val):
        return pycountry.countries.get(name=val).name
      
class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City Names""
        self.valid_values = ""Valid cities include names like 'Buenos Aires', 'Amsterdam', 'Brisbane, QLD', 'Canberra, ACT', 'Melbourne, VIC', etc.""
        self.format = ""City names should be capitalized strings""
        self.examples = ['Buenos Aires', 'Amsterdam', 'Brisbane, QLD', 'Canberra, ACT', 'Melbourne, VIC']
    def cast(self, val):
        return str(val).title()

class geographiccoordinates(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographical coordinates""
        self.valid_values = ""Valid coordinates are a string of the form 'latitude, longitude'""
        self.format = ""Coordinates should be floating point numbers stored as strings""
        self.examples = ['-34.603684, -58.381559', '52.370216, 4.895168', '-27.469771, 153.025124', '-35.280937, 149.130009', '-37.813628, 144.963058']
    def cast(self, val):
        lat, lon = map(float, val.split(','))
        return f'{lat:.6f}, {lon:.6f}'

class publicationoutput(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of publications output in a specific time period""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Publication output should be an integer""
        self.examples = [22030, 20974, 29123, 15008, 45093]
    def cast(self, val):
        return int(val)

MAPPING = {
    'region': region, 
    'country': country, 
    'city': city, 
    'geographiccoordinates': geographiccoordinates, 
    'publicationoutput20142016': publicationoutput,
    'publicationoutputhcps20142016': publicationoutput,
    'publicationoutput20042006': publicationoutput,
    'publicationoutput19941996': publicationoutput
}"
"
class tsmoname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Transnational Social Movement Organization name""
        self.valid_values = ""A string representing the name of a Transnational Social Movement Organization.""
        self.format = ""Name should be a string with the first letter of each word capitalized""
        self.examples = ['Greenpeace', 'Amnesty International', 'World Wildlife Fund', 'International Red Cross', 'United Nations']
    def cast(self, val):
        return str(val).title()

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country of operation""
        self.valid_values = ""A string representing a country name. The country name should be recognized by the pycountry library.""
        self.format = ""Country names should be capitalized, and can be of varying lengths""
        self.examples = ['United States', 'United Kingdom', 'Germany', 'France', 'Canada']
    def cast(self, val):
        country = pycountry.countries.get(name=str(val).title())
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class operationyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of operation""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [1980, 1990, 2000, 2010, 2020]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        if str(val).isdigit() and len(str(val)) == 4:
            return int(val)
        else:
            raise Exception('Invalid year format')

class activeorganization(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [""Yes"", ""No""]
    def cast(self, val):
        if str(val).lower() in [""yes"", ""no""]:
            return str(val).title()
        else:
            raise Exception('Invalid boolean value')

MAPPING = {'TSMO': tsmoname, 'Country': country, 'Year': operationyear, 'Active': activeorganization}
"
"class identifier(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for an entity""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Identifiers must be positive integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        if math.isnan(val):
            return np.nan
        return int(val)

class organizationname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of an Organization""
        self.valid_values = ""Name should be a string that is of the form 'First Word Second Word'""
        self.format = ""Only the first letter of each word should be capitalized""
        self.examples = ['WWF Verdensnaturfonden', 'Dansk Røde Kors', 'Red Barnet', 'Folkekirkens Nødhjælp', 'CARE Danmark']
    def cast(self, val):
        return str(val).title()

class annualgrant(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Annual state grant in mio""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Annual grant should be an integer value (in mio units)""
        self.unit = 'In mio' 
        self.examples = [15, 193, 156, 115, 139]
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        elif isinstance(val, str) and val.strip().endswith('mio'):
            return int(val.strip().split(' ')[0])
        else:
            raise Exception('Invalid annual grant')

class donationtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of donation""
        self.valid_values = ""Donation type can only be one of the following: ['Transactional/CRM/BA', 'Transformative', 'Donation', 'Transactional/transformative', 'Transactional/CRM/BA/transformative']""
        self.format = ""Donation type should be one of the valid values""
        self.examples = ['Transactional/CRM/BA', 'Transformative', 'Donation', 'Transactional/transformative', 'Transactional/CRM/BA/transformative']
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        val = str(val)
        if val not in self.valid_values:
            raise Exception('Invalid donation type')
        return val

MAPPING = {'idnr': identifier, 'organization': organizationname, 'annualstategrant': annualgrant, 'categorydonationtransactionalcrmbaortransformative': donationtype}"
"
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year in which an event occurred""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [1651, 1652, 1653, 1654, 1655]
    def cast(self, val):
        return int(val)

class region(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographical Region""
        self.valid_values = ""Region should be a string representing a geographical area""
        self.format = ""The first letter of each word in the region should be capitalized""
        self.examples = ['Senegambia And Offshore Atlantic', 'Windward Coast', 'Gold Coast', 'Bight Of Benin', 'Bight Of Biafra And Gulf Of Guinea Islands']
    def cast(self, val):
        return str(val).title()

class slavesembarked(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of slaves embarked for the Americas""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number should be formatted as an integer""
        self.examples = [34, 26, 25, 0, 0]
    def cast(self, val):
        return int(val)

MAPPING = {'Year': year, 'Region': region, 'Embarked': slavesembarked}
"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1945, 2050] #This range is selected as it is the most common range for most of the datasets
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [1950, 2000, 2010, 2020, 2030]
    def cast(self, val):
        return int(val)
        
class income(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Income""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Income should be formatted as a floating point number""
        self.unit = 'In USD'
        self.examples = [10000.00, 50000.00, 75000.00, 100000.00, 150000.00]
    def cast(self, val):
        return round(float(val), 2)
        
class participationrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Annual Labor Participation Rate""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Participation rate should be formatted as a floating point number and should be within the range 0 to 100""
        self.examples = [58.65, 59.45, 63.65, 66.1, 67.10]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 100:
            return round(num, 2)
        else:
            raise Exception('Invalid participation rate')
        
class politicalparty(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1] #0: Democratic, 1: Republican
    def cast(self, val):
        if val in self.valid_values:
            return int(val)
        else:
            raise Exception('Invalid political party')
        
class capitalgain(NumericSemanticType):
    def __init__(self):
        self.description = ""Capital Gain""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Capital gain should be formatted as a floating point number""
        self.examples = [10.12, 11.64, 15.59, 23.50, 19.30]
    def cast(self, val):
        return round(float(val), 2)
        
class logvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithmic Value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Logarithmic value should be formatted as a floating point number""
        self.examples = [0.61021835, 1.089, 2.682, 3.257, 4.6008358]
    def cast(self, val):
        num = float(val)
        if num > 0:
            return round(num, 9)
        else:
            raise Exception('Invalid logarithmic value')
        
MAPPING = {'year': year, 'martinquinn': income, 'twentieth': income, 'fourtieth': income, 'sixtieth': income, 'eightieth': income, 'ninetyfifth': income, 'annuallaborparticipation': participationrate, 'presparty': politicalparty, 'top1cg': capitalgain, 'top0point5cg': capitalgain, 'top0point1cg': capitalgain, 'oilpricelog': logvalue, 'gdplog': logvalue, 'quadterm': NumericSemanticType, 'govwin': NumericSemanticType, 'bigbusinesswin': NumericSemanticType, 'policyliberalism': NumericSemanticType, 'top0point01cg': capitalgain}"
"
class uniqueid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Unique ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string""
        self.format = ""Names should be in title case""
        self.examples = ['Abraham Lincoln', 'Aristotle', 'Ayn Rand', 'Andre Agassi', 'Aldous Huxley']
    def cast(self, val):
        return str(val).title()

class numlanguages(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of languages""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of languages should be a positive integer""
        self.examples = [26, 29, 35, 46, 214]
    def cast(self, val):
        return int(val)

class cityname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City Name""
        self.valid_values = ""City name should be a string""
        self.format = ""Names should be in title case""
        self.examples = ['Hodgenville', 'Stageira', 'Saint Petersburg', 'Las Vegas', 'Godalming']
    def cast(self, val):
        return str(val).title()

class statecode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""State Code""
        self.valid_values = ""State code should be a string of two uppercase letters""
        self.format = ""State codes should be in uppercase""
        self.examples = ['KY', 'NV', 'CA', 'NY', 'MA']
    def cast(self, val):
        return str(val).upper()

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Country name should be a string""
        self.format = ""Country names should be in uppercase""
        self.examples = ['UNITED STATES', 'Greece', 'Russia', 'UNITED KINGDOM', 'Germany']
    def cast(self, val):
        return str(val).upper()

class twodigitcountrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Two Digit Country Code""
        self.valid_values = ""Country code should be a string of two uppercase letters""
        self.format = ""Country codes should be in uppercase""
        self.examples = ['US', 'GR', 'RU', 'GB', 'FR']
    def cast(self, val):
        return str(val).upper()

class threedigitcountrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Three Digit Country Code""
        self.valid_values = ""Country code should be a string of three uppercase letters""
        self.format = ""Country codes should be in uppercase""
        self.examples = ['USA', 'GRC', 'RUS', 'GBR', 'FRA']
    def cast(self, val):
        return str(val).upper()

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number""
        self.examples = [-85.738611, 40.333333, 59.95, 36.121514, 51.185]
    def cast(self, val):
        num = float(val)
        return round(num, 6)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.examples = [-175.200556, 23.5, 30.3, -115.173851, -0.61]
    def cast(self, val):
        num = float(val)
        return round(num, 6)

class continentname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Continent Name""
        self.valid_values = ""Continent name should be a string""
        self.format = ""Continent names should be in title case""
        self.examples = ['North America', 'Europe', 'Asia', 'Africa', 'Oceania']
    def cast(self, val):
        return str(val).title()

class birthyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Birth Year""
        self.valid_range = [-3000, datetime.now().year]
        self.dtype = int
        self.format = ""Birth year should be an integer""
        self.examples = [1809, -384, 1905, 1970, 1894]
    def cast(self, val):
        return int(val)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Male', 'Female']
    def cast(self, val):
        return str(val).capitalize()

class occupation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Occupation""
        self.valid_values = ""Occupation should be a string""
        self.format = ""Occupations should be in uppercase""
        self.examples = ['POLITICIAN', 'PHILOSOPHER', 'WRITER', 'TENNIS PLAYER', 'ACTOR']
    def cast(self, val):
        return str(val).upper()

class industry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Industry""
        self.valid_values = ""Industry should be a string""
        self.format = ""Industries should be in uppercase""
        self.examples = ['GOVERNMENT', 'PHILOSOPHY', 'LANGUAGE', 'INDIVIDUAL SPORTS', 'FILM AND THEATRE']
    def cast(self, val):
        return str(val).upper()

class domain(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Domain""
        self.valid_values = ""Domain should be a string""
        self.format = ""Domains should be in uppercase""
        self.examples = ['INSTITUTIONS', 'HUMANITIES', 'SPORTS', 'SCIENCE & TECHNOLOGY', 'ARTS']
    def cast(self, val):
        return str(val).upper()

class totalpageviews(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Page Views""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Total Page Views should be a positive integer""
        self.examples = [1965, 628642, 1602331, 4484694, 145250649]
    def cast(self, val):
        return int(val)

class lstar(NumericSemanticType):
    def __init__(self):
        self.description = ""Lstar""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Lstar should be a positive floating point number""
        self.examples = [1.084485517, 4.893, 7.149, 9.811, 122.7434626]
    def cast(self, val):
        return float(val)

class stddevpageviews(NumericSemanticType):
    def __init__(self):
        self.description = ""Standard Deviation of Page Views""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Standard Deviation of Page Views should be a positive floating point number""
        self.examples = [34.88968229, 3254.515, 9654.709, 29852.994, 3368345.812]
    def cast(self, val):
        return float(val)

class pageviewsenglish(NumericSemanticType):
    def __init__(self):
        self.description = ""Page Views in English""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Page Views in English should be a positive integer""
        self.examples = [48, 180014, 585862, 2236220, 72672000]
    def cast(self, val):
        return int(val)

class pageviewsnonenglish(NumericSemanticType):
    def __init__(self):
        self.description = ""Page Views in Non-English""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Page Views in Non-English should be a positive integer""
        self.examples = [370, 360118, 865793, 2153157, 78034040]
    def cast(self, val):
        return int(val)

class averageviews(NumericSemanticType):
    def __init__(self):
        self.description = ""Average Views""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Average Views should be a positive floating point number""
        self.examples = [49.125, 18419.622, 43843.593, 107228.429, 1515231.932]
    def cast(self, val):
        return float(val)

class hpi(NumericSemanticType):
    def __init__(self):
        self.description = ""HPI""
        self.valid"
"class quarter(NumericSemanticType):
    def __init__(self):
        self.description = ""Quarter of a year""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Represented as an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        int_val = int(val)
        if int_val >= 1 and int_val <= 4:
            return int_val
        else:
            raise Exception('Invalid quarter')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Represented as a four digit integer""
        self.examples = [1950, 1980, 2000, 2020]
    def cast(self, val):
        return int(val)

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Represented as a floating point number between 0 and 100""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        float_val = float(val)
        if float_val >= 0 and float_val <= 100:
            return round(float_val, 2)
        else:
            raise Exception('Invalid percentage')

class sample_size(NumericSemanticType):
    def __init__(self):
        self.description = ""Sample size""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Represented as a positive integer""
        self.examples = [10, 100, 1000, 10000]
    def cast(self, val):
        int_val = int(val)
        if int_val > 0:
            return int_val
        else:
            raise Exception('Invalid sample size')

MAPPING = {'quarter': quarter, 'year': year, 'mdmp3party': percentage, 'wdmp3party': percentage, 'sspendinggdp': percentage, 'workforceparticipation': percentage, 'southernrealingment': percentage, 'partydifference': percentage, 'approve': percentage, 'consumersentiment': percentage, 'samplesize': sample_size}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date of data entry""
        self.valid_values = ""Date must be a valid date formatted as 'YYYY-MM-DD'""
        self.format = ""Date must be a string in the format 'YYYY-MM-DD'""
        self.examples = ['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04', '2018-01-05']

    def cast(self, val):
        try:
            return pd.to_datetime(str(val), format='%Y%m%d').strftime('%Y-%m-%d')
        except ValueError:
            raise Exception('Invalid date')

class outputgap(NumericSemanticType):
    def __init__(self):
        self.description = ""Output gap of the economy""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Output gap must be a float""
        self.examples = [-0.37186000000000002, -2.77494, 3.8354599999999999, 3.6451699999999998, 2.4408300000000001]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid output gap')

class fedfunds(NumericSemanticType):
    def __init__(self):
        self.description = ""Federal funds rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Federal funds rate must be a float""
        self.examples = [0.085, 0.0975, 6.0625, 5.515, 7.18]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid federal funds rate')

class cpi(NumericSemanticType):
    def __init__(self):
        self.description = ""Consumer Price Index""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Consumer Price Index must be a float""
        self.examples = [5.8631900000000003, 2.2737799999999999, -0.23499999999999999, 0.37303999999999998, 0.24975]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Consumer Price Index')

class pce(NumericSemanticType):
    def __init__(self):
        self.description = ""Personal Consumption Expenditures""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Personal Consumption Expenditures must be a float""
        self.examples = [4.6269099999999996, 1.9935400000000001, 0.73529999999999995, 1.1082700000000001, 1.18621]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Personal Consumption Expenditures')

class ipd(NumericSemanticType):
    def __init__(self):
        self.description = ""Implicit Price Deflator""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Implicit Price Deflator must be a float""
        self.examples = [5.4605899999999998, 2.0270999999999999, 1.8776900000000001, 2.5736500000000002, 3.09741]

    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            raise Exception('Invalid Implicit Price Deflator')

MAPPING = {'a': date, 'figure1panela': outputgap, 'c': fedfunds, 'figure1panelb': cpi, 
           'e': pce, 'f': ipd, 'figure1panelc': cpi, 'h': pce, 'i': ipd}"
"class depressionindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Depression index representing the level of depression""
        self.valid_range = [2, 22]
        self.dtype = int
        self.format = ""Depression index should be an integer""
        self.examples = [13, 12, 7, 21, 21]
    def cast(self, val):
        num = int(val)
        if num < 2 or num > 22:
            raise Exception('Depression index out of valid range')
        return num

class gratitudeindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Gratitude index representing the level of gratitude""
        self.valid_range = [9, 42]
        self.dtype = int
        self.format = ""Gratitude index should be an integer""
        self.examples = [19, 27, 29, 29, 17]
    def cast(self, val):
        num = int(val)
        if num < 9 or num > 42:
            raise Exception('Gratitude index out of valid range')
        return num

class lonelinessindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Loneliness index representing the level of loneliness""
        self.valid_range = [6, 22]
        self.dtype = int
        self.format = ""Loneliness index should be an integer""
        self.examples = [22, 20, 20, 19, 19]
    def cast(self, val):
        num = int(val)
        if num < 6 or num > 22:
            raise Exception('Loneliness index out of valid range')
        return num

class sleephours(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of sleep hours""
        self.valid_range = [0, 20]
        self.dtype = int
        self.format = ""Sleep hours should be an integer""
        self.examples = [14, 12, 8, 11, 7]
    def cast(self, val):
        num = int(val)
        if num < 0 or num > 20:
            raise Exception('Sleep hours out of valid range')
        return num

MAPPING = {'depression': depressionindex, 'gratitude': gratitudeindex, 'loneliness': lonelinessindex, 'sleep': sleephours}"
"class surveyaccesslevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The level of access to the survey""
        self.valid_values = ""The access level must be an integer between 1 and 4""
        self.format = ""Stored as integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class writingattitudelevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The level of student's attitude towards writing""
        self.valid_values = ""The attitude level must be an integer between 1 and 3""
        self.format = ""Stored as integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class studenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The type of student""
        self.valid_values = ""The student type must be an integer either 1 or 2""
        self.format = ""Stored as integer""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)

class studyyears(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of years a student has studied""
        self.valid_range = [1, 7]
        self.dtype = float
        self.format = ""Stored as a float number""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return float(val)

class ratingscore(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating scores of different student attributes""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Stored as a float number""
        self.examples = [20.0, 45.0, 76.0, 100.0, 35.0]
    def cast(self, val):
        return float(val)

class agegroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The age group of students""
        self.valid_values = ""The age group must be an integer between 1 and 6""
        self.format = ""Stored as integer""
        self.examples = [1, 2, 3, 4, 5, 6]
    def cast(self, val):
        return int(val)

class gendertype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The gender of students""
        self.valid_values = ""The gender type must be an integer between 1 and 3""
        self.format = ""Stored as integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class englishproficiency(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The level of English proficiency""
        self.valid_values = ""The proficiency level must be an integer between 1 and 4""
        self.format = ""Stored as integer""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

MAPPING = {'surveyaccess': surveyaccesslevel, 'writingattitude': writingattitudelevel, 
           'typestudent': studenttype, 'ugyears': studyyears, 'gryears': studyyears, 
           'overcome': ratingscore, 'words': ratingscore, 'synthesize': ratingscore, 
           'creativity': ratingscore, 'meaning': ratingscore, 'improve': ratingscore, 
           'reflect': ratingscore, 'spark': ratingscore, 'ideas': ratingscore, 
           'overall': ratingscore, 'voice': ratingscore, 'original': ratingscore, 
           'discipline': ratingscore, 'wander': ratingscore, 'adapt': ratingscore, 
           'feedback': ratingscore, 'age': agegroup, 'gender': gendertype, 
           'writeenglish': englishproficiency, 'totalsawses': ratingscore, 
           'essentials': ratingscore, 'ci': ratingscore, 'rr': ratingscore, 
           'speakenglish': englishproficiency}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names should be valid and recognized worldwide""
        self.format = ""Country names should be capitalized and properly spelled""
        self.examples = ['Albania', 'Argentina', 'Armenia', 'Austria', 'Belarus']
    def cast(self, val):
        if pycountry.countries.get(name=val):
            return val.title()
        else:
            raise Exception('Invalid country name')
class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean value')
class powerindicator(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Indicator of power, ranges from 0 to 4""
        self.valid_range: list = [0,4]
        self.dtype: object = float
        self.format: str = ""Power value should be a float within the range 0 to 4""
        self.examples: list = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val): 
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid power value')
        else:
            return num
class totalindicator(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Total power indicator, ranges from 0 to 24""
        self.valid_range: list = [0, 24]
        self.dtype: object = float
        self.format: str = ""Total power value should be a float within the range 0 to 24""
        self.examples: list = [0.0, 6.0, 12.0, 18.0, 24.0]
    def cast(self, val): 
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid total power value')
        else:
            return num
MAPPING = {'country': country, 'duplicates': booleanindicator, 'democracy': booleanindicator, 'paveto': powerindicator, 'plveto': powerindicator, 'decree': powerindicator, 'exintro': powerindicator, 'budget': powerindicator, 'referenda': powerindicator, 'totalleg': powerindicator, 'cabinet': powerindicator, 'cabinet2': powerindicator, 'censure': powerindicator, 'diss': powerindicator, 'totalexe': totalindicator, 'total': totalindicator, 'scdata': booleanindicator, 'frye': booleanindicator}"
"class respondentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier of each respondent""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""RespondentID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class profileid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each profile""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""ProfileID should be a positive floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class countryid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Identifier for each country""
        self.valid_values = ""CountryID should be a integer and ranges from 1 to 3""
        self.format = ""CountryID should be a positive integer""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        return str(int(val))

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the person""
        self.valid_range = [15, 25]
        self.dtype = float
        self.format = ""Age should be a floating point number ranging from 15 to 25""
        self.examples = [15.0, 20.0, 25.0, 18.5, 22.0]
    def cast(self, val):
        num = float(val)
        if num < 15:
            return 15.0
        elif num > 25:
            return 25.0
        else:
            return num

class binarychoice(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return 1.0 if val else 0.0

MAPPING = {
    'respid': respondentid, 
    'profilenum': profileid, 
    'country': countryid, 
    'age': age, 
    'parity': binarychoice, 
    'declcounsel': binarychoice,
    'denymm': binarychoice,
    'inappropinj': binarychoice,
    'hesmmcounsel': binarychoice,
    'inapproplarc': binarychoice,
    'inappropalllarc': binarychoice,
    'status': binarychoice,
    'altage': age,
    'altparity': binarychoice,
    'altstatus': binarychoice
}"
"class serialnumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Serial Numbers""
        self.valid_values = ""Serial Numbers must be positive integers stored as strings""
        self.format = ""Serial Numbers must be formatted as strings""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        return str(val)

class repositoryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Repository""
        self.valid_values = ""Repository names can be any string""
        self.format = ""Repository names are stored as strings""
        self.examples = ['Indian Academy of Sciences: Publications of Fellows', 'KrishiKosh', 'ShodhGanga: A reservoir of Indian theses', 'Archives of Indian Labour', 'Name 5']
    def cast(self, val):
        return str(val)

class numrecs(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Records""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of Records should be formatted as an integer""
        self.examples = [2091, 51326, 50014, 42845, 12345]
    def cast(self, val):
        return int(val)

class publicationstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['*', '']
    def cast(self, val):
        if val == '*':
            return True
        else:
            return False

class softwareused(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Software used for the repository""
        self.valid_values = ""Software names can be any string""
        self.format = ""Software names are stored as strings""
        self.examples = ['DSpace', 'EPrints', 'Software', 'HTML', 'CALIBRE']
    def cast(self, val):
        return str(val)

MAPPING = {'a': serialnumber, 'directoryofopenaccessrepositoriesinindia': repositoryname, 'c': numrecs, 'd': publicationstatus, 'e': publicationstatus, 'f': publicationstatus, 'g': publicationstatus, 'h': publicationstatus, 'i': publicationstatus, 'j': softwareused}"
"class farmercode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Code assigned to farmers""
        self.valid_values = ""The code should follow a pattern of an alphabet followed by a number""
        self.format = ""The code is a string which starts with an alphabet (uppercase) and followed by a number""
        self.examples = ['A1', 'A2', 'A3', 'B1', 'B2']
    def cast(self, val):
        if re.match(r'[A-Z]\d', val):
            return val
        else:
            raise Exception('Invalid farmer code')

class farmingtechnique(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Farming techniques""
        self.valid_values = ""The techniques should be one of the following: 'Extensive' or 'Intensive'""
        self.format = ""The technique is a string which represents a type of farming technique""
        self.examples = ['Extensive', 'Intensive']
    def cast(self, val):
        if val in ['Extensive', 'Intensive']:
            return val
        else:
            raise Exception('Invalid farming technique')

class membershipstatus(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Membership status in AAC""
        self.valid_values = ""The status should be one of the following: 'AAC member' or 'Non-AAC member'""
        self.format = ""The status is a string which represents membership status in AAC""
        self.examples = ['AAC member', 'Non-AAC member']
    def cast(self, val):
        if val in ['AAC member', 'Non-AAC member']:
            return val
        else:
            raise Exception('Invalid membership status')

MAPPING = {'farmercode': farmercode, 'technique': farmingtechnique, 'd': membershipstatus}"
"class articlecode(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique code for each article""
        self.valid_range = [200602010401.0, 200602270102.0]
        self.dtype = float
        self.format = ""Article codes are numerical float values""
        self.examples = [200602010401.0, 200602010401.0, 200602010401.0, 200602010401.0, 200602010401.0]
    def cast(self, val):
        return float(val)

class section(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Section of the newspaper where the article appears""
        self.valid_values = ""The valid values are 'opinion' and 'front page'""
        self.format = ""Section names are stored as strings""
        self.examples = ['opinion', 'opinion', 'opinion', 'opinion', 'front page']
    def cast(self, val):
        return str(val)

class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Publication date of the article""
        self.valid_range = [20060201.0, 20060227.0]
        self.dtype = float
        self.format = ""Dates are stored as floats""
        self.examples = [20060201.0, 20060201.0, 20060201.0, 20060201.0, 20060201.0]
    def cast(self, val):
        return datetime.strptime(str(int(val)), ""%Y%m%d"")

class frame(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique code for each frame""
        self.valid_range = [101000.0, 512000.0]
        self.dtype = float
        self.format = ""Frame codes are numerical float values""
        self.examples = [308000.0, 101000.0, 102000.0, 109000.0, 102010.0]
    def cast(self, val):
        return float(val)

class framegroup(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique code for each frame group""
        self.valid_range = [1.0, 5.0]
        self.dtype = float
        self.format = ""Frame group codes are numerical float values""
        self.examples = [3.0, 1.0, 1.0, 1.0, 1.0]
    def cast(self, val):
        return float(val)

class source(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Source of the article""
        self.valid_values = ""Source names are stored as strings""
        self.format = ""Source names should be properly capitalized""
        self.examples = ['Stephen Pollard (senior fellow at the Centre for the New Europe, in Brussels)', 'MCB', 'MCB', 'Stephen Pollard (senior fellow at the Centre for the New Europe, in Brussels)', 'Stephen Pollard (senior fellow at the Centre for the New Europe, in Brussels)']
    def cast(self, val):
        return str(val).title()

class muslim(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['yes', 'no']
    def cast(self, val):
        return str(val).lower()

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location where the article is published""
        self.valid_values = ""Location names are stored as strings""
        self.format = ""Location names should be properly capitalized""
        self.examples = ['Belgium', 'Britain', 'Britain', 'Belgium', 'Belgium']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        return ""Invalid country""

class transnatl(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['yes', 'no']
    def cast(self, val):
        return str(val).lower()

class freespeech(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['yes', 'no']
    def cast(self, val):
        return str(val).lower()

class newspaper(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of the newspaper""
        self.valid_values = ""The valid values are 'Guardian' and 'Telegraph'""
        self.format = ""Newspaper names are stored as strings""
        self.examples = ['Telegraph', 'Telegraph', 'Telegraph', 'Telegraph', 'Guardian']
    def cast(self, val):
        return str(val)

MAPPING = {'articlecode': articlecode, 'section': section, 'date': date, 'frame': frame, 'framegroup': framegroup, 'source': source, 'muslim': muslim, 'location': location, 'transnatl': transnatl, 'freespeech': freespeech, 'newspaper': newspaper}"
"class electiondistrict(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Election District Codes""
        self.valid_values = ""Should be a string of alphanumeric characters""
        self.format = ""Election district codes are alphanumeric and usually start with a letter followed by numbers""
        self.examples = ['a0101', 'a0102', 'a0207', 'a0103', 'a0104']
    def cast(self, val):
        return str(val)

class booleanvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return val
        else:
            raise Exception('Invalid boolean value')

class countcandidates(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Candidates""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of candidates must be a non-negative integer""
        self.examples = [2, 1, 0, 4, 7]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid candidate count')
        return num

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage Value""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage value must be a floating point number between 0 and 1""
        self.examples = [0.0, 0.5, 1.0, 0.75, 0.33]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage value')
        return round(num, 2)
      
MAPPING = {'ed': electiondistrict, 'incumbran': booleanvalue, 'totfemcand': countcandidates, 'totcand': countcandidates, 'majreserved': booleanvalue, 'femwon': booleanvalue, 'incumbwon': booleanvalue, 'pctreserved': percentage}"
"class provincename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Province""
        self.valid_values = ""Name of a province, which should be a string and first letter capitalized""
        self.format = ""The first letter of each word should be capitalized and the rest in lower case""
        self.examples = ['East Azerbaijan', 'West Azerbaijan', 'Ardabil', 'Esfahan', 'Alborz']
    def cast(self, val):
        return str(val).title()

class populationcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Population count of a specific area""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Population count should be formatted as a floating point number with no decimal places""
        self.examples = [660634, 743915, 1118523, 931222, 1227259]
    def cast(self, val):
        return round(float(val))

MAPPING = {
    'provincename': provincename, 
    'urbanpop1355census1976': populationcount, 
    'ruralpop1355census1976': populationcount,
    'urbanpop1365census1986': populationcount,
    'ruralpop1365census1986': populationcount,
    'urbanpop1375census1996': populationcount,
    'ruralpop1375census1996': populationcount,
    'urbanpop1385census2006': populationcount,
    'ruralpop1385census2006': populationcount,
    'urbanpop1390census2011': populationcount,
    'province': populationcount
}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country names should be a string that corresponds to a real-world country.""
        self.format = ""Country names should be capitalized and spelled correctly""
        self.examples = ['Norway', 'Sweden', 'Netherlands', 'Germany', 'Denmark']
    def cast(self, val):
        country_name = str(val).title()
        if pycountry.countries.get(name=country_name):
            return country_name
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1996, 2004, 2007, 1996, 2004]
    def cast(self, val):
        year = int(val)
        if 0 <= year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid year')

class party(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Political Party""
        self.valid_values = ""Party names should be a string""
        self.format = ""Party names should be capitalized and spelled correctly""
        self.examples = ['Australian Greens', 'Australian Greens', 'Australian Greens', 'Australian Labor Party', 'Australian Labor Party']
    def cast(self, val):
        return str(val).title()

class isinoffice(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean value')

MAPPING = {
    'country': country,
    'year': year,
    'party': party,
    'pm': isinoffice,
    'govt': isinoffice,
    'govtfullterm': isinoffice
}"
"class surveyresponse(NumericSemanticType):
    def __init__(self):
        self.description = ""Survey responses are numerical values representing the response of a person to a survey question""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Survey responses should be integers between 1 and 4 inclusive""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 4:
            raise Exception('Invalid survey response')
        return num

class personid(NumericSemanticType):
    def __init__(self):
        self.description = ""PersonId is a unique identifier assigned to each person participating in a survey or study""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""PersonId should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid PersonId')
        return num

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid gender value')
        return num

class agegroup(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid age group value')
        return num

class employmentstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid employment status value')
        return num

MAPPING = {'q711': surveyresponse, 'personid': personid, 'male': gender, 'female': gender, 'y39': agegroup, 'y45': agegroup, 'y51': agegroup, 'fulltime': employmentstatus, 'partime': employmentstatus}"
"class countynumber(NumericSemanticType):
    def __init__(self):
        self.description = ""County Number""
        self.valid_range = [1.0, 254.0]
        self.dtype = float
        self.format = ""County Number should be a float and ranges from 1 to 254""
        self.examples = [1.0, 60.0, 101.0, 180.25, 254.0]
    def cast(self, val):
        val = float(val)
        if 1.0 <= val <= 254.0:
            return val
        else:
            raise Exception('Invalid county number')

class county(CategoricalSemanticType):
    def __init__(self):
        self.description = ""County Name""
        self.valid_values = ""County Name should be a string""
        self.format = ""Only the first letter of the county name should be capitalized""
        self.examples = ['Harris', 'Dallas', 'Bexar', 'Tarrant', 'El Paso']
    def cast(self, val):
        return str(val).title()

class locationofpostoffice(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location of Post Office""
        self.valid_values = ""Location of Post Office should be a string""
        self.format = ""Only the first letter of the location name should be capitalized""
        self.examples = ['Houston', 'San Antonio', 'Dallas', 'Austin', 'El Paso']
    def cast(self, val):
        return str(val).title()

class zipcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Zip Codes""
        self.valid_values = ""Zip Codes must fit the following regex: '[0-9]{5}'""
        self.format = ""Zip Codes must be 5-digit numbers stored as strings""
        self.examples = ['73301', '76147', '77421', '78582', '79997']
    def cast(self, val):
        string = str(int(val))
        match_obj = re.match('[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class totalcases(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Cases""
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = ""Total Cases should be a float and greater than or equal to 1""
        self.examples = [63.0, 853.0, 19.0, 42.0, 285.0]
    def cast(self, val):
        val = float(val)
        if val >= 1.0:
            return val
        else:
            raise Exception('Invalid total cases')

class totalrecipients(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Recipients""
        self.valid_range = [1.0, float('inf')]
        self.dtype = float
        self.format = ""Total Recipients should be a float and greater than or equal to 1""
        self.examples = [155.0, 2059.0, 36.0, 80.0, 636.0]
    def cast(self, val):
        val = float(val)
        if val >= 1.0:
            return val
        else:
            raise Exception('Invalid total recipients')

class averagebenefit(NumericSemanticType):
    def __init__(self):
        self.description = ""Average Benefit""
        self.valid_range = [8.0, float('inf')]
        self.dtype = float
        self.format = ""Average Benefit should be a float and greater than or equal to 8""
        self.examples = [253.47619047619048, 263.4689331770223, 195.42105263157896, 182.3095238095238, 248.34035087719292]
    def cast(self, val):
        val = float(val)
        if val >= 8.0:
            return round(val, 2)
        else:
            raise Exception('Invalid average benefit')

class totalbenefits(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Benefits""
        self.valid_range = [8.0, float('inf')]
        self.dtype = float
        self.format = ""Total Benefits should be a float and greater than or equal to 8""
        self.examples = [15969.0, 224739.0, 3713.0, 7657.0, 70777.0]
    def cast(self, val):
        val = float(val)
        if val >= 8.0:
            return val
        else:
            raise Exception('Invalid total benefits')

class totalincomeeligibleindividuals(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Income Eligible Individuals""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Total Income Eligible Individuals should be a float and greater than or equal to 0""
        self.examples = [402.0, 4682.0, 30.0, 387.0, 1585.0]
    def cast(self, val):
        val = float(val)
        if val >= 0.0:
            return val
        else:
            raise Exception('Invalid total income eligible individuals')

class totalincomeeligiblebutnotreceivingindividuals(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Income Eligible But Not Receiving Individuals""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Total Income Eligible But Not Receiving Individuals should be a float and greater than or equal to 0""
        self.examples = [247.0, 2623.0, 0.0, 307.0, 949.0]
    def cast(self, val):
        val = float(val)
        if val >= 0.0:
            return val
        else:
            raise Exception('Invalid total income eligible but not receiving individuals')

MAPPING = {'countynumber': countynumber, 'county': county, 'locationofpostoffice': locationofpostoffice, 'zip': zipcode, 'totalcases': totalcases, 'totalrecipients': totalrecipients, 'averagebenefit': averagebenefit, 'totalbenefits': totalbenefits, 'totalincomeeligibleindividuals': totalincomeeligibleindividuals, 'totalincomeeligiblebutnotreceivingindividuals': totalincomeeligiblebutnotreceivingindividuals}"
"class senatorid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each senator""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Identifier should be an integer greater than zero""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num <= 0:
            raise Exception('Invalid senator id')
        return num

class trajectorytype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of trajectory of a senator""
        self.valid_values = ""Trajectory type should be an integer between 1 and 4""
        self.format = ""Trajectory types are 1, 2, 3, and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num not in self.examples:
            raise Exception('Invalid trajectory type')
        return num

class totalpreviousroles(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of previous roles held by a senator""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of roles should be an integer greater than or equal to zero""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid number of roles')
        return num

class careerduration(NumericSemanticType):
    def __init__(self):
        self.description = ""Duration of a senator's career in years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Career duration should be an integer greater than or equal to zero""
        self.examples = [0, 10, 20, 30, 40]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid career duration')
        return num

class aggregation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of aggregation for a senator""
        self.valid_values = ""Aggregation type should be an integer between 1 and 5""
        self.format = ""Aggregation types are 1, 2, 3, 4, and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num not in self.examples:
            raise Exception('Invalid aggregation type')
        return num

class level(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Level of a senator""
        self.valid_values = ""Level should be an integer between 1 and 4""
        self.format = ""Levels are 1, 2, 3, and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num not in self.examples:
            raise Exception('Invalid level')
        return num

class experiencedummy(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid experience dummy')
        return num

class ufsprojetolove(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of UFS project love for a senator""
        self.valid_values = ""UFS project love type should be an integer between 1 and 5""
        self.format = ""UFS project love types are 1, 2, 3, 4, and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num not in self.examples:
            raise Exception('Invalid UFS project love type')
        return num

MAPPING = {
    'idtitulares': senatorid,
    'tipodetrajetria': trajectorytype,
    'totaldecargosprviosaosenado': totalpreviousroles,
    'tempodecarreira': careerduration,
    'agregaçã': aggregation,
    'níveise': level,
    'níveisexperdummy': experiencedummy,
    'ufsprojetolove': ufsprojetolove
}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be a non-negative integer""
        self.examples = [18, 19, 20, 21, 22]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid age')
        return num

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2] # 1 for Male, 2 for Female
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid sex')
        return num

class handedness(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1, 2] # 1 for Right-handed, 2 for Left-handed
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid handedness')
        return num

class major(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Major of a student""
        self.valid_values = ""Major should be a string that represents a specific discipline""
        self.format = ""Each word in major should be capitalized""
        self.examples = ['Psychology', 'Educational Sciences', 'Languages', 'Sports']
    def cast(self, val):
        return str(val).title()

class cfc12(NumericSemanticType):
    def __init__(self):
        self.description = ""CFC-12 level""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""CFC-12 level should be a non-negative integer""
        self.examples = [22, 49, 54, 58, 74]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid CFC-12 level')
        return num

MAPPING = {'age': age, 'sex': sex, 'handedness': handedness, 'major': major, 'cfc12': cfc12}"
"class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Alpha-3 country codes as per ISO 3166-1""
        self.valid_values = ""Country codes should be 3-letter codes as per ISO 3166-1""
        self.format = ""Country codes should be uppercase strings""
        self.examples = ['USA', 'IND', 'GBR', 'AUS', 'CAN']
    def cast(self, val):
        return str(val).upper()

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of countries""
        self.valid_values = ""Names should be as recognized by the United Nations""
        self.format = ""Country names should be titlecase strings""
        self.examples = ['United States', 'India', 'United Kingdom', 'Australia', 'Canada']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year as a numeric value""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a 4-digit number""
        self.examples = [2000, 1995, 2010, 2020, 1980]
    def cast(self, val):
        year = int(val)
        if 0 <= year <= datetime.now().year:
            return year
        else:
            raise ValueError('Invalid Year')

class favoritismindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Index measuring favoritism (arbitrary units)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Favoritism index should be a floating point number""
        self.examples = [1.2, 3.45, 2.78, 0.95, 1.0]
    def cast(self, val):
        return float(val)

class jobpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Job percentages""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Job percentages should be floating point numbers""
        self.examples = [10.5, 20.3, 30.7, 40.8, 50.9]
    def cast(self, val):
        job_percentage = float(val)
        if 0 <= job_percentage <= 100:
            return job_percentage
        else:
            raise ValueError('Invalid Job Percentage')

class gdp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product (GDP) in USD""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP should be a floating point number""
        self.unit = ""In USD""
        self.examples = [10000.0, 500000.0, 1000000.0, 2000000.0, 3000000.0]
    def cast(self, val):
        return float(val)

class booleanindex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {
    'id': NumericSemanticType, 
    'code': countrycode, 
    'country': countryname, 
    'year': year, 
    'favoritismwef': favoritismindex, 
    'favoritismreversed': favoritismindex, 
    'highskilljobs': jobpercentage, 
    'lowskilljobs': jobpercentage, 
    'gdp': gdp, 
    'gdplog': NumericSemanticType, 
    'unemployment': jobpercentage, 
    'oilrents': jobpercentage, 
    'totalresourerents': jobpercentage, 
    'oilwealth': gdp, 
    'education': NumericSemanticType, 
    'individualismcollectivism': NumericSemanticType, 
    'socsupport': NumericSemanticType, 
    'regulatoryquality': NumericSemanticType, 
    'ruleoflaw': NumericSemanticType, 
    'governmentefffectiveness': NumericSemanticType, 
    'factionalization': NumericSemanticType, 
    'politicalstab': NumericSemanticType, 
    'democracy': NumericSemanticType, 
    'mediafreedom': NumericSemanticType, 
    'corruption': NumericSemanticType, 
    'postsoviet': booleanindex, 
    'estrandom': booleanindex, 
    'estfixed': booleanindex
}"
"class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age in years""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [18, 20, 25, 30, 35]
    def cast(self, val):
        if isinstance(val, int) and val >= 0:
            return val
        else:
            raise Exception('Invalid age')

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating on a scale of 1 to 7""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Rating should be an integer between 1 and 7""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if isinstance(val, int) and 1 <= val <= 7:
            return val
        else:
            raise Exception('Invalid rating')

MAPPING = {
    'gender': gender,
    'age': age,
    'cfc1': rating,
    'cfc2': rating,
    'cfc3': rating,
    'cf4': rating,
    'cf5': rating,
    'cfc6': rating,
    'cfc7': rating,
    'cfc8': rating,
    'cfc9': rating,
    'cfc10': rating,
    'cfc11': rating,
    'cfc12': rating,
    'cfc13': rating,
    'cfc14': rating
}"
"class authorname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the author(s)""
        self.valid_values = ""Name should be a string that is of the form 'last name, first name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Abdulai, Hickey', 'Aguilar and Alis', 'Aidt, Jensen', 'Albertus', 'Allen']
    def cast(self, val):
        return str(val).title()

class academicjournal(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the academic journal""
        self.valid_values = ""Name should be a string that is of the form 'Journal Name'""
        self.format = ""The journal name should be fully spelled out and capitalized""
        self.examples = ['Comparative Political Studies', 'American Journal of Political Science', 'Cambridge University Press', 'Electoral Studies', 'Comparative Politics']
    def cast(self, val):
        return str(val).title()

class publicationyear(NumericSemanticType):
    def __init__(self):
        self.description = ""The year of publication""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer number""
        self.examples = [2008, 2013, 2015, 2017, 2019]
    def cast(self, val):
        year = int(val)
        if year < self.valid_range[0] or year > self.valid_range[1]:
            raise ValueError('Invalid year')
        return year

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country of the study""
        self.valid_values = ""Name should be a valid country recognized by the United Nations""
        self.format = ""The country name should be fully spelled out and capitalized""
        self.examples = ['Argentina', 'Ghana', 'India', 'Mexico', 'Philippines']
    def cast(self, val):
        country_name = str(val).title()
        try:
            country = pycountry.countries.lookup(country_name)
            return country.name
        except:
            raise ValueError('Invalid country name')

class studytype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of the study""
        self.valid_values = ""The study type should be one of the following: 'quant', 'mixed', 'qual', 'theory'""
        self.format = ""The study type should be a lowercase string""
        self.examples = ['quant', 'mixed', 'qual', 'theory']
    def cast(self, val):
        return str(val).lower() if val in self.valid_values else ValueError('Invalid study type')

class booleanvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Yes', 'No']
    def cast(self, val):
        return str(val).capitalize() if val in self.valid_values else ValueError('Invalid boolean value')

MAPPING = {'name': authorname, 'journal': academicjournal, 'year': publicationyear, 'cases': country, 'studytype': studytype, 'assumesmonitoring': booleanvalue, 'persuasionvmobilization': booleanvalue, 'levelofmainexchanges': booleanvalue, 'evidencemonitoringtypes': booleanvalue, 'evidenceenfrocementtypes': booleanvalue, 'spotiterated': booleanvalue}"
"class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Country""
        self.valid_values = ""0 or 1""
        self.format = ""0 for Argentina and 1 for Brazil""
        self.examples = ['0', '1']
    def cast(self, val):
        if val == '0':
            return 'Argentina'
        elif val == '1':
            return 'Brazil'
        else:
            raise ValueError('Invalid country code')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1980, datetime.now().year]
        self.dtype = int
        self.format = ""4-digit year""
        self.examples = [1984, 1985, 1986, 1987, 1988]
    def cast(self, val):
        return int(val)

class president(CategoricalSemanticType):
    def __init__(self):
        self.description = ""President""
        self.valid_values = ""Should be a string representing the name of the president""
        self.format = ""All caps""
        self.examples = ['MENEM', 'FHC', 'LULA', 'ALFONSIN', 'SARNEY']
    def cast(self, val):
        return str(val).upper()

class typeofgovernment(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Government""
        self.valid_values = ""unipartidario or coalizão""
        self.format = ""Should be either 'unipartidario' or 'coalizão'""
        self.examples = ['unipartidario', 'coalizão']
    def cast(self, val):
        if val not in ['unipartidario', 'coalizão']:
            raise ValueError('Invalid type of government')
        return val

class popularity(NumericSemanticType):
    def __init__(self):
        self.description = ""Popularity""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Should be a decimal number between 0 and 100""
        self.examples = [51.7, 72.0, 62.67, 58.67, 35.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise ValueError('Invalid popularity value')
        return num

class resignation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return bool(val)
        
MAPPING = {'country': country, 'years': year, 'president': president, 'typeofgovernment': typeofgovernment, 'popularity': popularity, 'resignation': resignation}"
"class satisfactionrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Satisfaction rating""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Satisfaction rating should be a floating point number between 0 and 10""
        self.examples = [5.0, 10.0, 8.0, 9.0, 9.0]
    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 10 else float('nan')

class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val) if val in self.valid_values else float('nan')

class jobstresslevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Job stress level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Job stress level should be a floating point number, with higher values indicating higher stress""
        self.examples = [4.07, 5.0, 1.0, 3.0, 6.0]
    def cast(self, val):
        num = float(val)
        return num if num >= 0 else float('nan')

class jobperformance(NumericSemanticType):
    def __init__(self):
        self.description = ""Job performance level""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Job performance level should be a floating point number between 0 and 10""
        self.examples = [5.0, 10.0, 10.0, 10.0, 9.0]
    def cast(self, val):
        num = float(val)
        return num if 0 <= num <= 10 else float('nan')

class factoryid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Factory ID""
        self.valid_values = ""Valid values for factory ID are 1 and 2""
        self.format = ""Factory ID should be represented as a floating point number: 1.0 or 2.0""
        self.examples = [1.0, 2.0, 1.0, 2.0, 2.0]
    def cast(self, val):
        return float(val) if val in [1.0, 2.0] else float('nan')

class jobtenurelevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job tenure level""
        self.valid_values = ""Valid values for job tenure level are 1, 2, and 3""
        self.format = ""Job tenure level should be represented as a floating point number: 1.0, 2.0, or 3.0""
        self.examples = [1.0, 2.0, 3.0, 1.0, 3.0]
    def cast(self, val):
        return float(val) if val in [1.0, 2.0, 3.0] else float('nan')

MAPPING = {'coworkperf2018': satisfactionrating, 'jobsatis2018': satisfactionrating, 'sexharassyouyes2018': binaryresponse,
           'sexharassfactyes2018': binaryresponse, 'engagement22018': jobstresslevel, 'sickdays2017': NumericSemanticType,
           'jdtoomch2017': jobstresslevel, 'jdsay2017': jobstresslevel, 'coworkperf2017': jobperformance, 
           'jobsatis2017': satisfactionrating, 'gender2017': binaryresponse, 'agecat42017': NumericSemanticType, 
           'smoking2017': binaryresponse, 'engagement22017': jobstresslevel, 'wexpens102017': NumericSemanticType, 
           'wsaffoodhous2017': NumericSemanticType, 'educ32017': binaryresponse, 'verbalabuse201801': binaryresponse, 
           'emotabuseh201801': binaryresponse, 'sexabuseh201801': binaryresponse, 'physabuse201801': binaryresponse, 
           'disabilitydaysyes2018': binaryresponse, 'married2017': binaryresponse, 'factoryf': factoryid, 
           'jobtenure32017': jobtenurelevel, 'planquit2018yes': binaryresponse}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""A numerical representation of a country""
        self.valid_range = [0, 990]
        self.dtype = int
        self.format = ""Country codes are represented as integers""
        self.examples = [20, 520, 935, 316, 570]
    def cast(self, val):
        return int(val)
        
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1945, 2014]
        self.dtype = int
        self.format = ""Years are represented as four digit integers""
        self.examples = [1945, 1980, 1997, 2014]
    def cast(self, val):
        return int(val)
        
class isethnofed(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        return bool(val)
        
class ethnoterrcivilwar01(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        return bool(val)
        
class ethnoterrcivilwarcount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of ethnic territorial civil wars in a country""
        self.valid_range = [0, 6]
        self.dtype = int
        self.format = ""The count should be an integer""
        self.examples = [0, 1, 2, 3, 6]
    def cast(self, val):
        return int(val)

class population(NumericSemanticType):
    def __init__(self):
        self.description = ""The population of a country or region""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Population should be a floating point number""
        self.examples = [14011.422, 2437.932, 52.0, 8925.122, 726.182]
    def cast(self, val):
        return float(val)
        
class countriesstatesystem(NumericSemanticType):
    def __init__(self):
        self.description = ""Country state system""
        self.valid_range = [71, 173]
        self.dtype = int
        self.format = ""Country state system is represented as an integer""
        self.examples = [71, 121, 149, 170, 173]
    def cast(self, val):
        return int(val)
        
MAPPING = {'cowcode': countrycode, 'year': year, 'isethnofed': isethnofed, 'ethnoterrcivilwar01': ethnoterrcivilwar01, 'ethnoterrcivilwarcount': ethnoterrcivilwarcount, 'popcountry': population, 'popallcountries': population, 'countriesstatesystem': countriesstatesystem}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [25, 21, 51, 55, 18]
    def cast(self, val):
        return int(val)

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of a person""
        self.valid_values = ""Sex can be either 1 (representing male) or 2 (representing female)""
        self.format = ""Sex is represented as 1 or 2""
        self.examples = [1, 2]
    def cast(self, val):
        return 1 if val == 1 else 2 if val == 2 else None

class nationality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality of a person""
        self.valid_values = ""Nationality should be a recognized country name""
        self.format = ""Nationality should be represented as the English name of a country""
        self.examples = ['Irish', 'American', 'British', 'Canadian', 'French']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country:
            return country.name
        else:
            return None

class educationcompleted(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of education completed by a person""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Education level should be an integer between 1 and 7""
        self.examples = [1, 2, 4, 5, 7]
    def cast(self, val):
        return min(max(int(val), 1), 7)

MAPPING = {
    'age': age,
    'sex': sex,
    'nationality': nationality,
    'educationcompleted': educationcompleted,
}"
"class daycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of days""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""A floating point number""
        self.examples = [54.0, 31.0, 45.0, 0.0, 58.0]
    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        else:
            return val

class report(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val)

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country name""
        self.valid_values = ""A string of a valid country name""
        self.format = ""Country name should be capitalized""
        self.examples = ['Afghanistan', 'China', 'Uganda', 'Sudan', 'Guinea']
    def cast(self, val):
        val = val.title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid Country Name')

class logarithm(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithm of a quantity""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""A floating point number""
        self.examples = [1.588, -0.71, 4.061, 2.891, 1.758, -0.73, 1.573, 6.737]
    def cast(self, val):
        val = float(val)
        if math.isnan(val):
            return float('nan')
        else:
            return val

class binary(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""A integer number""
        self.examples = [1998, 1999, 2000, 2002, 2003]
    def cast(self, val):
        return int(val)

class regionname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region name""
        self.valid_values = ""A string of a valid region name""
        self.format = ""Region name should be capitalized""
        self.examples = ['Africa', 'Eastern Mediterranean', 'Western Pacific', 'Americas', 'Europe']
    def cast(self, val):
        val = val.title()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid Region Name')

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date should be in the format 'YYYY-MM-DD'""
        self.format = ""Date format should be 'YYYY-MM-DD'""
        self.examples = ['1999-09-01', '1996-01-01', '1997-01-01', '2004-10-01', '2006-01-01']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return datetime.strptime(str(val), '%Y-%m-%d').strftime('%Y-%m-%d')

MAPPING = {'startreportdays1': daycount, 'report': report, 'country': countryname, 'loghealth': logarithm, 'loginter': logarithm, 'logtrade': logarithm, 'domesticopp': binary, 'ihrinforce': binary, 'year': year, 'logagri': logarithm, 'logtravtourgdp': logarithm, 'rolwb': logarithm, 'polity2': logarithm, 'loggdppc': logarithm, 'ihrinforce1': binary, 'rolwb1': logarithm, 'region': regionname, 'direct': binary, 'outbreakdum': binary, 'hdi': logarithm, 'outbreakstart1': date, 'missing': binary}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country name should be a valid country name as per ISO 3166-1.""
        self.format = ""Country name can be full or common name and must be capitalized properly.""
        self.examples = ['USA', 'Moldova', 'Sri Lanka', 'Guinea', 'Azerbaijan']
    def cast(self, val):
        if pycountry.countries.get(name=val) or pycountry.countries.get(common_name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer (YYYY).""
        self.examples = [2015, 2016, 2013, 2012, 2009]
    def cast(self, val):
        if isinstance(val, str) and val.isdigit():
            return int(val)
        else:
            raise Exception('Invalid year')

class diplomaticaction(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Description of Diplomatic Action""
        self.valid_values = ""Action description must be one of the following: 'Policy', 'Transition', 'Ambassador behavior', 'Transition of Leadership', 'Insult'.""
        self.format = ""Diplomatic action should be formatted as a string.""
        self.examples = ['Policy', 'Transition', 'Ambassador behavior', 'Transition of Leadership', 'Insult']
    def cast(self, val):
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid diplomatic action')

class diplomaticduration(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Duration of Diplomatic Action""
        self.valid_values = ""Duration must be a description of the time period of the diplomatic action.""
        self.format = ""Duration should be formatted as a string.""
        self.examples = ['Immediately replaced', 'Reinstated all 8 months later', 'Reappointed within the year', '4 months; https://www.kyivpost.com/article/content/world/after-4-month-recall-russian-ambassador-to-return-25886.html', 'Reestablished in 2016']
    def cast(self, val):
        if isinstance(val, str):
            return val
        elif math.isnan(val):
            return float('nan')
        else:
            raise Exception('Invalid duration')

MAPPING = {'sendingstate': countryname, 'receivingstate': countryname, 'year': year, 'notes': diplomaticaction, 'howlong': diplomaticduration}"
"class subjectid(NumericSemanticType):
    def __init__(self):
        self.description = ""Subject Identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Subject Identifier should be a positive integer""
        self.examples = [1, 3, 4, 6, 7]
    def cast(self, val):
        val = int(val)
        if val > 0:
            return val
        else:
            raise Exception('Invalid subject ID')

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""A score or measurement""
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = ""Score should be a float ranging from 0 to 1""
        self.examples = [0.35, 0.421, 0.483, 0.5, 0.566666666666667]
    def cast(self, val):
        val = float(val)
        if 0.0 <= val <= 1.0:
            return round(val, 3)
        else:
            raise Exception('Invalid score')

class percentile(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentile""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Percentile should be a positive float""
        self.examples = [450.8, 535.5, 565.671, 590.862, 734.9]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return round(val, 3)
        else:
            raise Exception('Invalid percentile')

class median(NumericSemanticType):
    def __init__(self):
        self.description = ""Median""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Median should be a positive float""
        self.examples = [90.0, 270.0, 310.0, 370.0, 470.0]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return round(val, 3)
        else:
            raise Exception('Invalid median')

class ssrt(NumericSemanticType):
    def __init__(self):
        self.description = ""Stop-Signal Reaction Time (SSRT)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""SSRT should be a positive float""
        self.examples = [155.175438596491, 224.304, 252.783, 290.013, 386.0]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return round(val, 3)
        else:
            raise Exception('Invalid SSRT')

class accuracy(NumericSemanticType):
    def __init__(self):
        self.description = ""Accuracy""
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = ""Accuracy should be a float ranging from 0 to 1""
        self.examples = [0.8, 0.94, 0.964, 0.988, 1.0]
    def cast(self, val):
        val = float(val)
        if 0.0 <= val <= 1.0:
            return round(val, 3)
        else:
            raise Exception('Invalid accuracy')

class reactiontime(NumericSemanticType):
    def __init__(self):
        self.description = ""Reaction Time (RT)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RT should be a positive float""
        self.examples = [443.386503067485, 556.424, 597.091, 624.032, 796.245714285714]
    def cast(self, val):
        val = float(val)
        if val > 0:
            return round(val, 3)
        else:
            raise Exception('Invalid RT')

MAPPING = {'s': subjectid, 'widesubjectnr': subjectid, 'prswidegreenlight': score, 'prswidegreylight': score, 'prswideredlight': score, 'prsgeneral': score, 'precentilewidegreenlight': percentile, 'precentilewidegreylight': percentile, 'precentilewideredlight': percentile, 'medwidegreenlight': median, 'medwidegreylight': median, 'medwideredlight': median, 'ssrtwidegreenlight': ssrt, 'ssrtwidegreylight': ssrt, 'ssrtwideredlight': ssrt, 'accwidegreenlight': accuracy, 'accwidegreylight': accuracy, 'accwideredlight': accuracy, 'accgeneral': accuracy, 'rtwidegreenlight': reactiontime, 'rtwidegreylight': reactiontime, 'rtwideredlight': reactiontime}"
"class direction(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Direction of policy entrepreneurship""
        self.valid_values = ""Values should be integers from 1 to 3""
        self.format = ""Values should be integers""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class dirtopbot(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Direction from top to bottom""
        self.valid_values = ""Values should be integers from 1 to 4""
        self.format = ""Values should be integers""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class butd(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Boundary to boundary direction""
        self.valid_values = ""Values should be integers from 1 to 3""
        self.format = ""Values should be integers""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class function(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Function of policy entrepreneurship""
        self.valid_values = ""Values should be integers from 1 to 3""
        self.format = ""Values should be integers""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class strategy(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Strategy of policy entrepreneurship""
        self.valid_values = ""Values should be integers from 1 to 5""
        self.format = ""Values should be integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class author(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Author of the policy entrepreneurship""
        self.valid_values = ""Names should be lowercased strings""
        self.format = ""Names should be lowercased strings""
        self.examples = ['ackrill', 'arieli', 'black', 'blavoukos', 'boekhorst']
    def cast(self, val):
        return str(val).lower()

class dhori(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class dverti(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class ddia(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class fintegrate(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class fexpand(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class fshift(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

class sprom(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class sfram(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class scoal(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class sinst(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class slead(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'direction': direction, 'dirtopbot': dirtopbot, 'butd': butd, 'function': function, 'strategy': strategy, 'author': author, 'dhori': dhori, 'dverti': dverti, 'ddia': ddia, 'fintegrate': fintegrate, 'fexpand': fexpand, 'fshift': fshift, 'sprom': sprom, 'sfram': sfram, 'scoal': scoal, 'sinst': sinst, 'slead': slead}"
"class commune(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Commune""
        self.valid_values = ""A commune should be a string representing a small administrative division in some countries""
        self.format = ""All letters should be in uppercase""
        self.examples = ['LA SERENA', 'COQUIMBO', 'ANDACOLLO', 'LA HIGUERA', 'PAIHUANO']
    def cast(self, val):
        return str(val).upper()

class id(NumericSemanticType):
    def __init__(self):
        self.description = ""ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be a positive integer""
        self.examples = [4101, 4102, 4103, 4104, 4105]
    def cast(self, val):
        return int(val)

class booleanindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        elif val == 1.0:
            return 1.0
        elif val == 0.0:
            return 0.0
        else:
            raise Exception('Invalid boolean value')

MAPPING = {'commune': commune, 'id': id, 'forms': booleanindicator, 'news': booleanindicator, 'search': booleanindicator, 'webmap': booleanindicator, 'streetmap': booleanindicator, 'transport': booleanindicator, 'socialmedia': booleanindicator, 'email': booleanindicator, 'phone': booleanindicator, 'mobile': booleanindicator, 'transac': booleanindicator, 'followup': booleanindicator, 'citizen': booleanindicator, 'payments': booleanindicator, 'personal': booleanindicator, 'part': booleanindicator}"
"class condition(NumericSemanticType):
    def __init__(self):
        self.description = ""Condition""
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = ""Condition should be represented as an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError(""Value out of valid range for Condition"")
        return num

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [18, float('inf')]
        self.dtype = float
        self.format = ""Age should be represented as a floating point number""
        self.examples = [18.0, 20.0, 25.0, 30.0, 35.0]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError(""Value out of valid range for Age"")
        return num

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise ValueError(""Invalid value for BinaryValue"")
        return num

class relationship(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Relationship of a person""
        self.valid_values = ""Relationship should be a string representing a relationship status""
        self.format = ""Relationship should be represented as a string""
        self.examples = ['sister', 'husband', 'aunt', 'uncle', 'brother']
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return str(val).lower()

class ethnicity(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Ethnicity of a person""
        self.valid_values = ""Ethnicity should be a string representing a ethnicity""
        self.format = ""Ethnicity should be represented as a string""
        self.examples = ['East Indian', 'South Asian', 'South African', 'Indian', 'Caucasian']
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        else:
            return str(val).lower()

class anxietyindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Anxiety Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Anxiety Index should be represented as a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise ValueError(""Value out of valid range for Anxiety Index"")
        return num

MAPPING = {'condition1': condition, 'd002': age, 'd003': binaryvalue, 'd004p': binaryvalue, 'd004b': binaryvalue, 
           'd004a': binaryvalue, 'd004n': binaryvalue, 'd004other': relationship, 'd005': binaryvalue, 
           'd005other': ethnicity, 'preaacang': anxietyindex, 'preaacanx': anxietyindex, 'post1aacang': anxietyindex, 
           'post1aacanx': anxietyindex, 'post2aacang': anxietyindex, 'post2aacanx': anxietyindex, 'pp1aacangd': anxietyindex, 
           'p1p2aacangd': anxietyindex, 'pp2aacangd': anxietyindex, 'pp1aacanxd': anxietyindex, 'p1p2aacanxd': anxietyindex, 
           'pp2aacanxd': anxietyindex}"
"class cost(NumericSemanticType):
    def __init__(self):
        self.description = ""The cost of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cost should be formatted as a floating point number""
        self.examples = [0.0, 2.0, 10.0, 4.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class mechanism(NumericSemanticType):
    def __init__(self):
        self.description = ""The mechanism type""
        self.valid_range = [1, 4]
        self.dtype = float
        self.format = ""Mechanism should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class yearofbirth(NumericSemanticType):
    def __init__(self):
        self.description = ""The year of birth""
        self.valid_range = [2, 72]
        self.dtype = float
        self.format = ""Year of birth should be formatted as a floating point number""
        self.examples = [2.0, 17.0, 25.0, 72.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class citizenshipstatus(NumericSemanticType):
    def __init__(self):
        self.description = ""The citizenship status""
        self.valid_range = [1, 2]
        self.dtype = float
        self.format = ""Citizenship status should be formatted as a floating point number""
        self.examples = [1.0, 2.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class fulfillmentstatus(NumericSemanticType):
    def __init__(self):
        self.description = ""The fulfillment status""
        self.valid_range = [1, 3]
        self.dtype = float
        self.format = ""Fulfillment status should be formatted as a floating point number""
        self.examples = [1.0, 2.0, 3.0, float('nan')]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class endstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

MAPPING = {
    'cost': cost, 
    'mech': mechanism, 
    'yob': yearofbirth, 
    'citizen': citizenshipstatus, 
    'fulfil': fulfillmentstatus, 
    'end': endstatus
}"
"class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid gender value"")
        return val

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = ""Age should be represented as a float""
        self.examples = [16.0, 19.0, 17.0, 18.0, 17.0]
    def cast(self, val):
        if val < self.valid_range[0] or val > self.valid_range[1]:
            raise ValueError(""Invalid age value"")
        return float(val)

class considerationfuture(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Consideration of Future Consequences (CFC) scale""
        self.valid_values = ""CFC scale values should be integers from 1 to 7""
        self.format = ""CFC scale values should be represented as floats""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
    def cast(self, val):
        if val < 1 or val > 7:
            raise ValueError(""Invalid CFC scale value"")
        return float(val)

MAPPING = {
    ""gender"": gender,
    ""age"": age,
    ""cfc1"": considerationfuture,
    ""cfc2"": considerationfuture,
    ""cfc3"": considerationfuture,
    ""cf4"": considerationfuture,
    ""cf5"": considerationfuture,
    ""cfc6"": considerationfuture,
    ""cfc7"": considerationfuture,
    ""cfc8"": considerationfuture,
    ""cfc9"": considerationfuture,
    ""cfc10"": considerationfuture,
    ""cfc11"": considerationfuture,
    ""cfc12"": considerationfuture,
    ""cfc13"": considerationfuture,
    ""cfc14"": considerationfuture,
}"
"class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country codes""
        self.valid_values = ""ISO Alpha-3 country codes""
        self.format = ""Country codes must be a string of three uppercase letters""
        self.examples = ['USA', 'FRA', 'GBR', 'CHN', 'IND']
    def cast(self, val):
        return str(val).upper() if pycountry.countries.get(alpha_3=val) else None

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country names""
        self.valid_values = ""Country names""
        self.format = ""Country name starts with uppercase letter and the rest are lowercase""
        self.examples = ['United States', 'France', 'United Kingdom', 'China', 'India']
    def cast(self, val):
        country = pycountry.countries.get(name=str(val).title())
        return str(val).title() if country else None

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1980, 1990, 2000, 2010, 2020]
    def cast(self, val):
        try:
            return int(val) if datetime.strptime(str(int(val)), '%Y') else None
        except ValueError:
            return None

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val) if int(val) in self.valid_values else None

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score""
        self.valid_range = [0, 10]
        self.dtype = float
        self.format = ""Score should be a floating point number between 0 and 10""
        self.examples = [0.0, 2.5, 5.0, 7.5, 10.0]
    def cast(self, val):
        return round(float(val), 2) if 0 <= float(val) <= 10 else None

MAPPING = {
    'cowid': None, 
    'wbabb': countrycode, 
    'country': countryname, 
    'year': year, 
    'catrat': binaryvalue, 
    'lji10': score, 
    'treatiesincor': binaryvalue, 
    'trsupeq': binaryvalue, 
    'polity2': score, 
    'pol2sq': None, 
    'hrtpropcat': score, 
    'fed': None, 
    'checks': None, 
    'civwar3': binaryvalue, 
    'ciritort3': None, 
    'globrate': score
}"
"class huntinggrounds(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of location""
        self.valid_values = ""Must be 'Hunting Grounds'""
        self.format = ""All characters should be capitalized""
        self.examples = ['Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds', 'Hunting Grounds']
    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical latitude""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number between -90 and 90""
        self.examples = [-45.0, 0.0, 45.0, -90.0, 90.0]
    def cast(self, val):
        num = float(val)
        if num >= -90 and num <= 90:
            return num
        else:
            raise Exception('Invalid latitude')

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical longitude""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number between -180 and 180""
        self.examples = [-90.0, 0.0, 90.0, -180.0, 180.0]
    def cast(self, val):
        num = float(val)
        if num >= -180 and num <= 180:
            return num
        else:
            raise Exception('Invalid longitude')

class chineseera(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Chinese historical era""
        self.valid_values = ""Should be a valid era in Chinese history""
        self.format = ""Era names should be capitalized""
        self.examples = ['Tang', 'Liao', 'Wei', 'Beishi', 'Jin']
    def cast(self, val):
        return str(val).title()

class colorlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Color level""
        self.valid_range = [1, 8]
        self.dtype = int
        self.format = ""Color level should be an integer between 1 and 8""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 8:
            return num
        else:
            raise Exception('Invalid color level')

MAPPING = {'type': huntinggrounds, 'lat': latitude, 'long': longitude, 'era': chineseera, 'color': colorlevel}"
"class area_code(NumericSemanticType):
    def __init__(self):
        self.description = ""The area code of a given location""
        self.valid_range = [1001, 32058]
        self.dtype = int
        self.format = ""Area code should be a positive integer""
        self.examples = [1001, 14083, 20230, 24030, 32058]
    def cast(self, val):
        return int(val)

class population_count(NumericSemanticType):
    def __init__(self):
        self.description = ""The population count of a given location""
        self.valid_range = [102, float('inf')]
        self.dtype = int
        self.format = ""Population count should be a positive integer""
        self.examples = [102, 4065, 11696, 28042, 1842819]
    def cast(self, val):
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year a given event occurred""
        self.valid_range = [1990, 2006]
        self.dtype = int
        self.format = ""Year should be an integer, in the range from 1990 to 2006""
        self.examples = [1990, 1994, 1998, 2002, 2006]
    def cast(self, val):
        return int(val)

class economic_indicator(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The economic indicator of a given location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Economic indicator should be a positive float""
        self.unit = 'In USD'
        self.examples = [0.0, 0.062, 0.103, 0.152, 0.7270398]
    def cast(self, val):
        return float(val)

class border_presence(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return bool(val)

class political_indicator(NumericSemanticType):
    def __init__(self):
        self.description = ""The political indicator of a given location""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Political indicator should be a positive float""
        self.examples = [0.0, 0.062, 0.103, 0.152, 0.7270398]
    def cast(self, val):
        return float(val)

class government_budget(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total government budget of a given location""
        self.valid_range = [3864, float('inf')]
        self.dtype = float
        self.format = ""Government budget should be a positive float""
        self.unit = 'In USD'
        self.examples = [3864.0, 1410828.0, 4491056.0, 18381049.0, 3941318990.0]
    def cast(self, val):
        return float(val)

class geographic_location(NumericSemanticType):
    def __init__(self):
        self.description = ""The geographic location code of a given location""
        self.valid_range = [1, 570]
        self.dtype = int
        self.format = ""Geographic location code should be a positive integer""
        self.examples = [1, 23, 56, 129, 570]
    def cast(self, val):
        return int(val)

MAPPING = {
    'code': area_code, 
    'population': population_count, 
    'year': year, 
    'homicide': economic_indicator, 
    'strikethreats': economic_indicator, 
    'strikes': economic_indicator, 
    'illiteracy': economic_indicator, 
    'unemployment': economic_indicator, 
    'gini': economic_indicator, 
    'maquilaemploy': economic_indicator, 
    'border': border_presence, 
    'pristrike': political_indicator, 
    'nonpristrike': political_indicator, 
    'prithreat': political_indicator, 
    'nonprithreat': political_indicator, 
    'privoteshare': political_indicator, 
    'pricoalitionvoteshare': political_indicator, 
    'budgettotal': government_budget, 
    'prosperahouseholds': economic_indicator, 
    'state': geographic_location, 
    'municipality': geographic_location
}"
"class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = ""Age should be a non-negative floating point number""
        self.examples = [20.5, 35.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 120:
            raise Exception('Invalid age')
        return round(num, 1)

class educationyears(NumericSemanticType):
    def __init__(self):
        self.description = ""Years of Education of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Years of Education should be a non-negative floating point number""
        self.examples = [5.0, 10.0, 12.0, 16.0, 20.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid years of education')
        return round(num, 1)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender is represented by 1.0 for Male and 2.0 for Female""
        self.format = ""Gender should be represented by 1.0 for Male and 2.0 for Female""
        self.examples = [1.0, 2.0, 2.0, 1.0, 2.0]
    def cast(self, val):
        num = float(val)
        if num not in [1.0, 2.0]:
            raise Exception('Invalid gender')
        return num

MAPPING = {'age': age, 'edu': educationyears, 'gender': gender}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Country names should be a string and must be a valid country name recognized by the pycountry package""
        self.format = ""Country names should be capitalized and without any numbers or special characters""
        self.examples = ['Afghanistan', 'Brazil', 'Botswana', 'Algeria', 'Andorra']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class booleansemantic(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class numericalindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Numerical index""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Numerical indexes should be represented as an integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class numericalindexwithunits(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Numerical index with specific units""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Numerical indexes with units should be represented as a floating point number""
        self.unit = ""The units used for this index are specific to the column""
        self.examples = [0.0, 1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        return float(val)

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage value""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentages should be represented as a floating point number""
        self.unit = ""The unit is percentage (%)""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        return float(val)

class financialvalue(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Financial value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Financial values should be represented as a floating point number""
        self.unit = ""The units used for this financial value are in thousand USD""
        self.examples = [0.0, 1000.0, 2000.0, 3000.0, 4000.0]
    def cast(self, val):
        return float(val)

MAPPING = {'country': countryname, 'covax': booleansemantic, 'developing': booleansemantic, 'covaxexpanded': booleansemantic, 
           'cnvac': booleansemantic, 'cnvacgift': booleansemantic, 'vaccine': numericalindex, 'produce': numericalindex, 
           'twally': numericalindex, 'briper': financialvalue, 'unga': numericalindexwithunits, 'bribery': numericalindexwithunits, 
           'totalcasespermillion': numericalindexwithunits, 'totaldeathspermillion': numericalindexwithunits, 
           'totalvaccinationsperhundred': percentage, 'gdppercapitathous': financialvalue, 'debtgdp': percentage, 
           'growth2020': percentage, 'humandevelopmentindex': percentage, 'totalcasesperperson': percentage, 
           'totaldeathsperthousand': percentage, 'totalvaccinationsperperson': percentage, 'thousbriper': financialvalue, 
           'unga1': numericalindexwithunits, 'bribery1': numericalindexwithunits}"
"class taskdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a task or activity""
        self.valid_values = ""A task description should be a string describing an activity""
        self.format = ""A task description should start with a capital letter and end with a period""
        self.examples = ['Training and competency records for all staff.', 'Identify Quality Assurance Manager (Tzn candidate).', 'Lab coat rack - PAMVERC coats, lab coats only.']
    def cast(self, val):
        clean_val = str(val).strip()
        # ensure first letter is capitalized
        clean_val = clean_val[0].upper() + clean_val[1:]
        # ensure description ends with period
        if not clean_val.endswith('.'):
            clean_val = clean_val + '.'
        return clean_val

MAPPING = {
    '1testfacilityorganisationandpersonnel': taskdescription,
    '2qualityassuranceprogramme': taskdescription,
    '3facilities': taskdescription,
    '5testsystems': taskdescription,
    '7standardoperatingprocedures': taskdescription,
    '8performanceofthestudy': taskdescription,
    'uncategorised': taskdescription
}"
"
class biologicalsex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Biological sex of an individual""
        self.valid_values = ""Values must be either 'm' for male or 'f' for female""
        self.format = ""Values should be stored as a lower case string""
        self.examples = ['m', 'f', 'm', 'f', 'm']
    def cast(self, val):
        lower_val = str(val).lower()
        if lower_val in ['m', 'f']:
            return lower_val
        else:
            raise Exception('Invalid biological sex')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of an individual""
        self.valid_range = [0, 120]
        self.dtype = float
        self.format = ""Age should be represented as a floating point number""
        self.examples = [10.7, 11.6, 13.7, 8.4, 14.9]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 120:
            return num
        else:
            raise Exception('Invalid age')

class diagnosis(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Diagnosis of an individual""
        self.valid_values = ""Values can be any string representing a valid medical diagnosis""
        self.format = ""Diagnosis should be represented as a string""
        self.examples = ['ADHD', 'none', 'APD', 'TBI', 'dyslexia']
    def cast(self, val):
        return str(val)

class responder(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Responder of the survey""
        self.valid_values = ""Values can be any string representing a valid responder type""
        self.format = ""Responder type should be represented as a string""
        self.examples = ['self', 'student', 'trainer', 'parent']
    def cast(self, val):
        return str(val)

MAPPING = {'biologicalsex': biologicalsex, 'age': age, 'diagnosis': diagnosis, 'responder': responder}
"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""1 for Male, 2 for Female""
        self.format = ""Gender must be represented as integers (1 or 2)""
        self.examples = [1, 2]
    def cast(self, val):
        if val == 1:
            return ""Male""
        elif val == 2:
            return ""Female""
        else:
            raise Exception('Invalid gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age should be represented as integers""
        self.examples = [18, 33, 49, 64, 88]
    def cast(self, val):
        return int(val)

class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region of a person""
        self.valid_values = ""1 to 5 for different regions""
        self.format = ""Region must be represented as integers (1 to 5)""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class education(NumericSemanticType):
    def __init__(self):
        self.description = ""Education level of a person""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Education level should be represented as integers (1 to 10)""
        self.examples = [1, 2, 4, 6, 8]
    def cast(self, val):
        return int(val)

class question(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Response to a question""
        self.valid_values = ""0 to 11 for different responses""
        self.format = ""Response must be represented as integers (0 to 11)""
        self.examples = [0, 2, 5, 7, 11]
    def cast(self, val):
        return int(val)

MAPPING = {'pbgender': gender, 'pbage': age, 'pbregion': region, 'pbhighereducation': education, 
           'q1': question, 'q2': question, 'dqselect': question, 
           'q31sq1': question, 'q31sq2': question, 'q31sq3': question, 'q31sq4': question,
           'q32sq1': question, 'q32sq2': question, 'q32sq3': question, 'q32sq4': question,
           'q4': question, 'q5': question}"
"
class decade(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A decade represented as a string in the format 'YYYYs'""
        self.valid_values = ""Strings that match the regex pattern [1-2][0-9]{3}s""
        self.format = ""A four digit year followed by 's' to represent a decade""
        self.examples = ['1650s', '1660s', '1670s', '1680s', '1690s']
    def cast(self, val):
        match_obj = re.match('[1-2][0-9]{3}s', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid Decade')

class slavetradeestimate(NumericSemanticType):
    def __init__(self):
        self.description = ""Estimate of the number of slaves transported in the Atlantic Slave Trade""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Estimates should be formatted as a floating point number with no decimal places""
        self.examples = [24500.0, 69000.0, 158500.0, 230000.0, 285000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 0)

MAPPING = {'Period': decade, 'Eltis-Moreno estimate': slavetradeestimate, 'Inikori estimate': slavetradeestimate, 'Klein estimate': slavetradeestimate}
"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [2008, 2012, 2015, 2018, 2020]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""The age of a person""
        self.valid_range = [0, 122] # 122 is the oldest recorded age
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [10, 20, 30, 40, 50]
    def cast(self, val):
        return int(val)

class canadianriding(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Canadian electoral district""
        self.valid_values = ""Name should be a string representing the electoral district""
        self.format = ""Each word in the district name should be capitalized""
        self.examples = ['Avalon', 'Bonavista--Gander--Grand Falls--Windsor', 'Repentigny', 'Manicouagan', 'Drummond']
    def cast(self, val):
        return str(val).title()

class incumbentstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Incumbent', 'Non-incumbent']
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid incumbent status')
        return val

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Should be one of the following: ['Male', 'Female', 'Non-binary/Other']""
        self.format = ""The first letter should be capitalized""
        self.examples = ['Male', 'Female', 'Non-binary/Other']
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid gender')
        return val

class race(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race of a person""
        self.valid_values = ""Should be one of the following: ['White', 'Racialized', 'Indigenous', 'Not known']""
        self.format = ""The first letter should be capitalized""
        self.examples = ['White', 'Racialized', 'Indigenous', 'Not known']
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid race')
        return val

class profession(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Profession of a person""
        self.valid_values = ""Should be a string representing the profession""
        self.format = ""Each word in the profession should be capitalized""
        self.examples = ['Other', 'Business', 'Education', 'Law', 'Government & politics']
    def cast(self, val):
        return str(val).title()

class politicalparty(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Political party""
        self.valid_values = ""Should be one of the following: ['NDP', 'Conservative', 'Liberal', 'Green', 'Bloc']""
        self.format = ""Each word in the party name should be capitalized""
        self.examples = ['NDP', 'Conservative', 'Liberal', 'Green', 'Bloc']
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid political party')
        return val

class birthyear(NumericSemanticType):
    def __init__(self):
        self.description = ""The birth year of a person""
        self.valid_range = [1, datetime.now().year]
        self.dtype = int
        self.format = ""Birth year should be an integer""
        self.examples = [1980, 1990, 2000, 2010, 2020]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class electstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Elected', 'Defeated']
    def cast(self, val):
        if val not in self.valid_values:
            raise Exception('Invalid election status')
        return val

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""A percentage value""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number between 0 and 1""
        self.unit = 'In proportion' 
        self.examples = [0.0, 0.25, 0.50, 0.75, 1.0]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid percentage')
        return num

MAPPING = {'2008': year, '10': age, '10001': age, 'avalon': canadianriding, 'nonincumbent': incumbentstatus, 'male': gender, 
           'white': race, 'other': profession, 'previouslyelectedprovinciallymunicipally': incumbentstatus, 'liberal': politicalparty, 
           '1974': birthyear, 'elected': electstatus, '0': percentage}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer number""
        self.examples = [2002, 2003, 2004, 2005, 2006]
    def cast(self, val):
        num = int(val)
        if num < 0 or num > datetime.now().year:
            raise Exception('Invalid year')
        return num

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Country name should be a string that matches a country in the pycountry library""
        self.format = ""Country name should be the official name of the country, with the first letter of each word capitalized""
        self.examples = ['Algeria', 'Bahrain', 'Egypt', 'Jordan', 'Kuwait']
    def cast(self, val):
        country = pycountry.countries.get(name=str(val).strip())
        if country is None:
            raise Exception('Invalid country name')
        return country.name

class tradeindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Trade Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Trade Index should be formatted as a floating point number""
        self.examples = [4.1130714, 4.129145, 4.18512, 4.2665963, 4.2588696]
    def cast(self, val):
        num = float(val)
        return round(num, 6)

class democracyfactor(NumericSemanticType):
    def __init__(self):
        self.description = ""Democracy Factor""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Democracy Factor should be formatted as a floating point number between 0 and 1""
        self.examples = [0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667]
    def cast(self, val):
        num = round(float(val), 8)
        if num < 0 or num > 1:
            raise Exception('Invalid democracy factor')
        return num

class growthrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Growth Rate""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Growth Rate should be formatted as a floating point number""
        self.examples = [4.279382, 5.8614464, 2.9577184, 4.4654303, 0.2492289]
    def cast(self, val):
        return round(float(val), 7)

class inflationrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Inflation Rate""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Inflation Rate should be formatted as a floating point number""
        self.examples = [1.3204322, 8.330729, 12.247624, 16.125362, 10.546696]
    def cast(self, val):
        return round(float(val), 7)

class debtindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Debt Index""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Debt Index should be formatted as a floating point number""
        self.examples = [4.0842957, 3.9248939, 3.6722622, 3.351741, 3.1905997]
    def cast(self, val):
        return round(float(val), 7)

class unemploymentrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Unemployment Rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Unemployment Rate should be formatted as a floating point number""
        self.examples = [3.8155122, 3.749504, 3.708682, 3.421, 3.1738784]
    def cast(self, val):
        num = round(float(val), 7)
        if num < 0:
            raise Exception('Invalid unemployment rate')
        return num

class budgetvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Budget Value""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Budget Value should be formatted as a floating point number""
        self.examples = [1.164, 4.876, 5.259, 13.629, 13.945]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {
    't': year,
    'i': NumericSemanticType,
    'country': countryname,
    'trade': tradeindex,
    'demf': democracyfactor,
    'demp': democracyfactor,
    'growth': growthrate,
    'inflation': inflationrate,
    'debt': debtindex,
    'unemp': unemploymentrate,
    'budget': budgetvalue
}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique identifier for each record""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be a non-negative integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class label(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [True, False]
    def cast(self, val):
        return bool(val)

MAPPING = {'id': id, 'label': label}"
"class interviewid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for an Interview""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Interview ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)
        
class interviewcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique Code for an Interview""
        self.valid_values = ""Interview code should consist of alphanumeric characters""
        self.format = ""Interview code should be stored as strings""
        self.examples = ['QV1', 'QV2', 'QC3', 'QC4', 'PM5']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

class communityid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for a Community""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Community ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class districtid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for a District""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""District ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class regiondepartmentid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for a Region Department""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Region Department ID should be a positive integer""
        self.examples = [1, 2, 3]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class interviewdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of the Interview""
        self.valid_range = [0, float('inf')]
        self.dtype = object
        self.format = ""Interview Date should be formatted as a datetime object""
        self.examples = ['2016-07-01', '2016-07-02', '2016-07-03', '2016-07-04', '2016-07-05']
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(val) - 2)

class interviewername(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the Interviewer""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Daniela Yepez']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val).title()

MAPPING = {'interviewno': interviewid, 'interviewcode': interviewcode, 'community': communityid, 'district': districtid, 'regiondepartment': regiondepartmentid, 'interviewdate': interviewdate, 'interviewer': interviewername}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Serial Number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Serial numbers should be integer values starting from 1""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class scale(NumericSemanticType):
    def __init__(self):
        self.description = ""Scale Value""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Scale values should be floating point numbers within the range of 1 to 5""
        self.examples = [1.0, 1.5, 2.0, 2.5, 3.0]
    def cast(self, val):
        return round(float(val), 2)

class employmentsituation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class wage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The wage in USD""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Wage should be formatted as a floating point number (in USD units) with two decimal places for cents""
        self.unit = 'In USD'
        self.examples = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class tradeeffect(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Perceived Effect of Trade on US""
        self.valid_values = ""['1Not', '2ALittle', '3Somewhat', '4Very']""
        self.format = ""Trade effect values should be one of the following: '1Not', '2ALittle', '3Somewhat', '4Very'""
        self.examples = ['1Not', '2ALittle', '3Somewhat', '4Very']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value for trade effect')

class tradefears(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Prospective Trade Fears""
        self.valid_values = ""['2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd']""
        self.format = ""Trade fear values should be one of the following: '2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd'""
        self.examples = ['2HurtLtl', '4HelpLtl', '1HurtLot', '5HelpLot', '3NotAfctd']
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value for trade fears')

class tradeinvolvement(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class homeownership(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class unionmembership(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)


MAPPING = {
    'serial': serialnumber,
    'tradescale': scale,
    'personalunemp': employmentsituation,
    'wave': BooleanSemanticType,
    'importcompetitionwave1bywave': BooleanSemanticType,
    'exportorientationwave1bywave': BooleanSemanticType,
    'occupationalwage07bytime': wage,
    'activeinvolvementworldaffairs': scale,
    'ethnocentrism': scale,
    'perceivedeffecttradeus': tradeeffect,
    'prospectivetradefears': tradefears,
    'importcompetitionwave1': BooleanSemanticType,
    'exportcompetitionwave1': BooleanSemanticType,
    'export': BooleanSemanticType,
    'import': BooleanSemanticType,
    'homeown': homeownership,
    'unemprate': NumericSemanticType,
    'perchomevacancieszip': NumericSemanticType,
    'stateunemp': NumericSemanticType,
    'manufacturing': NumericSemanticType,
    'infoindust': NumericSemanticType,
    'wagebywave': wage,
    'union': unionmembership
}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1989, 1991, 1994, 1995, 1991]
    def cast(self, val):
        return int(val)

class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_range = [0, 999]
        self.dtype = int
        self.format = ""Country code should be a three digit integer""
        self.examples = [41, 41, 70, 90, 92]
    def cast(self, val):
        return int(val)

class conflictid(NumericSemanticType):
    def __init__(self):
        self.description = ""Conflict ID""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Conflict ID should be formatted as an integer""
        self.examples = [186, 186, 205, 36, 120]
    def cast(self, val):
        return int(val)

class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Name""
        self.valid_values = ""Country name should be a string and a valid country name""
        self.format = ""Country name should be capitalized and of type string""
        self.examples = ['Haiti', 'Haiti', 'Mexico', 'Guatemala', 'El Salvador']
    def cast(self, val):
        return str(val).title()

class conflictoutcome(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Conflict Outcome""
        self.valid_values = ""Conflict Outcome should be one of the following: ['2: Draw', '3: Government success', '1: Rebel success']""
        self.format = ""Conflict outcome should be of type string""
        self.examples = ['3: Government success', '1: Rebel success', '2: Draw', '2: Draw', '2: Draw']
    def cast(self, val):
        return str(val)

MAPPING = {'year': year, 'ccode': countrycode, 'conflictid': conflictid, 'sidea': country, 'outcome': conflictoutcome}"
"class rownumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Row Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Row numbers should be formatted as integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class iranianregion(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Iranian Region Name""
        self.valid_values = ""Iranian region name is a string representing the name of a region in Iran""
        self.format = ""Iranian region names should be formatted as strings""
        self.examples = ['کرج', 'تهران', 'تبریز', 'اصفهان', 'مشهد']
    def cast(self, val):
        return str(val)

class regionnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Region Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Region numbers should be formatted as integers""
        self.examples = [1, 51, 46, 16, 151]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        else:
            return int(val)

class population(NumericSemanticType):
    def __init__(self):
        self.description = ""Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Population should be formatted as integers""
        self.examples = [161594, 1797429, 575779, 621205, 528303]
    def cast(self, val):
        return int(val)

class femalepopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Female Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Female Population should be formatted as integers""
        self.examples = [77540, 846262, 283056, 303173, 258377]
    def cast(self, val):
        return int(val)

class urbanpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Urban Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Urban Population should be formatted as integers""
        self.examples = [14526, 1512082, 289998, 254708, 241989]
    def cast(self, val):
        return int(val)

class economicallyactivepopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Economically Active Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Economically Active Population should be formatted as integers""
        self.examples = [37567, 516498, 147845, 156146, 140426]
    def cast(self, val):
        return int(val)

class literatepopulationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Literate Population Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Literate Population Percentage should be formatted as floats""
        self.examples = [35.4, 42.9, 18.1, 18.1, 17.2]
    def cast(self, val):
        return float(val)

class muslimpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Muslim Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Muslim Population should be formatted as integers""
        self.examples = [np.nan, 1666434, 568080, 608287, 524513]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        else:
            return int(val)

class economicallyactivepopulationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Economically Active Population Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Economically Active Population Percentage should be formatted as floats""
        self.examples = [45.0, 46.5, 46.3, 46.5, 45.6]
    def cast(self, val):
        return float(val)

class totalworkingpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Total Working Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Total Working Population should be formatted as integers""
        self.examples = [48002, 581262, 181017, 195063, 165504]
    def cast(self, val):
        return int(val)

class farmingpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Farming Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Farming Population should be formatted as integers""
        self.examples = [31756, 44646, 64231, 85165, 73117]
    def cast(self, val):
        return int(val)

class miningpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Mining Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Mining Population should be formatted as integers""
        self.examples = [1357, 2246, 58, 166, 235]
    def cast(self, val):
        return int(val)

class industrialpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Industrial Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Industrial Population should be formatted as integers""
        self.examples = [2793, 126336, 50109, 48588, 29263]
    def cast(self, val):
        return int(val)

class industrialpopulationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Industrial Population Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Industrial Population Percentage should be formatted as floats""
        self.examples = [0.058185075621849, 0.2173477708847301, 0.2768193042642404, 0.2490887559403884, 0.1768114365815932]
    def cast(self, val):
        return float(val)

class farmingpopulationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Farming Population Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Farming Population Percentage should be formatted as floats""
        self.examples = [0.6615557685096455, 0.0768087368518843, 0.3548340763574691, 0.4366025335404459, 0.4417838843774168]
    def cast(self, val):
        return float(val)

class miningpopulationpercentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Mining Population Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Mining Population Percentage should be formatted as floats""
        self.examples = [0.0282696554310237, 0.0038640062484731, 0.0003204118950153, 0.0008510071105232, 0.0014199052590873]
    def cast(self, val):
        return float(val)

MAPPING = {'شمارهردیف': rownumber, 'نامحوزه': iranianregion, 'شمارهحوزه': regionnumber, 'جمعیتکل': population,
           'جمعیتزنان': femalepopulation, 'جمعیتشهری': urbanpopulation, 'تعدادنفوسواجدحقرای': economicallyactivepopulation,
           'درصدجمعیتباسوادبالای10سال': literatepopulationpercentage, 'جمعیتمسلمان': muslimpopulation,
           'درصدفعالاقتصادیبالایدهسال': economicallyactivepopulationpercentage, 'کلجمعیتشاغلبالای10سال': totalworkingpopulation,
           'جمعیتکشاورز': farmingpopulation, 'جمعیتفعالدرمعادن': miningpopulation, 'جمعیتفعالدرصنعت': industrialpopulation,
           'درصدفعالدرصنعت': industrialpopulationpercentage, 'درصدفعالدرکشاورزی': farmingpopulationpercentage,
           'درصدفعالدرمعادن': miningpopulationpercentage}"
"class schoolname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a School""
        self.valid_values = ""Name should be a string, capitalized""
        self.format = ""Names should be in uppercase""
        self.examples = [""TRINITY LUTHERAN SCHOOL"", ""ST PAUL LUTHERAN SCHOOL"", ""ST JOHN LUTHERAN SCHOOL"", ""ST JOSEPH SCHOOL"", ""ST JOHN'S LUTHERAN SCHOOL""]
    def cast(self, val):
        return str(val).upper()

class schooladdress(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Address of a School""
        self.valid_values = ""String representing the address of the school""
        self.format = ""Address should be in uppercase""
        self.examples = ['PO BOX 129', '206 W 8TH ST', 'PO BOX 549', '7022 W 1300 N', 'PO BOX 250']
    def cast(self, val):
        return str(val).upper()
        
class schoolcity(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City where the School is located""
        self.valid_values = ""Name should be a string, capitalized""
        self.format = ""City names should be in uppercase""
        self.examples = ['MILWAUKEE', 'CINCINNATI', 'INDIANAPOLIS', 'COLUMBUS', 'WASHINGTON']
    def cast(self, val):
        return str(val).upper()

class usstate(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""US States""
        self.valid_values = ""Two-letter abbreviations for US states""
        self.format = ""Two-letter abbreviations, all uppercase""
        self.examples = ['OH', 'WI', 'IN', 'NC', 'LA']
    def cast(self, val):
        return str(val).upper()

class schooltype(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of the School""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Integer values ranging from 1 to 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        return int(val)

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage values""
        self.valid_range = [0.0, 100.0]
        self.dtype = float
        self.format = ""Decimal values ranging from 0.0 to 100.0""
        self.unit = ""In percentage""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        return round(float(val), 2)

class schoolenrollment(NumericSemanticType):
    def __init__(self):
        self.description = ""School Enrollment""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Integer values representing the number of enrollments""
        self.examples = [1, 50, 100, 150, 200]
    def cast(self, val):
        return int(val)

class binaryvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'name': schoolname, 'address': schooladdress, 'city': schoolcity, 'state': usstate, 'type': schooltype, 
           'whitepercent': percentage, 'enrollment': schoolenrollment, 'voucherparticipantupdate': binaryvalue,
           'religiousbin': binaryvalue, 'homeschoolbin': binaryvalue, 'coedbin': binaryvalue, 'regular': binaryvalue,
           'specialized': binaryvalue, 'alternative': binaryvalue, 'ohio': binaryvalue, 'milwaukee': binaryvalue,
           'wisconsin': binaryvalue, 'indiana': binaryvalue, 'louisiana': binaryvalue, 'dc': binaryvalue, 
           'northcarolina': binaryvalue, 'montessori': binaryvalue, 'sped': binaryvalue, 'cte': binaryvalue, 
           'earlychildhood': binaryvalue, 'notregular': binaryvalue, 'noncoed': binaryvalue}"
"class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country code represented as a number""
        self.valid_range = [1, 300]
        self.dtype = int
        self.format = ""Country codes should be integers between 1 and 300""
        self.examples = [1, 10, 50, 100, 150]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 300:
            raise Exception('Invalid country code')
        return val

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a country""
        self.valid_values = ""Should be a valid country name""
        self.format = ""Country names should be capitalized and match a valid country name in English""
        self.examples = ['Bolivia', 'Peru', 'Paraguay', 'Chile', 'Uruguay']
    def cast(self, val):
        val = val.strip()
        if pycountry.countries.get(name=val) is None:
            raise Exception('Invalid country name')
        return val.title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [2002, 2003, 2004, 2005, 2006]
    def cast(self, val):
        val = int(val)
        if val < 0 or val > datetime.now().year:
            raise Exception('Invalid year')
        return val

class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating""
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = ""Ratings should be floating point numbers between 1 and 10""
        self.examples = [1.0, 5.0, 7.5, 9.0, 10.0]
    def cast(self, val):
        val = float(val)
        if val < 1 or val > 10:
            raise Exception('Invalid rating')
        return round(val, 2)

class countryyear(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country and year combined""
        self.valid_values = ""Should be of the form 'country_year'""
        self.format = ""Country should be the country code and year should be a 4 digit number""
        self.examples = ['10_2002', '10_2003', '10_2004', '10_2005', '10_2006']
    def cast(self, val):
        country, year = val.split('_')
        return str(countrycode().cast(country)) + '_' + str(year().cast(year))

MAPPING = {'pais': countrycode, 'country': countryname, 'year': year, 'dempolity': rating, 'countryyear': countryyear}"
"class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Names of countries that are recognized by the United Nations""
        self.format = ""Country names should be capitalized and spelled correctly""
        self.examples = ['Mexico', 'Argentina', 'Brazil', 'Chile', 'Uruguay']
    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of the Event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [2002, 1997, 2003, 2009, 2018]
    def cast(self, val):
        year = int(val)
        if datetime.now().year >= year >= 0:
            return year
        else:
            raise Exception('Invalid year')

class constituencyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Constituency Name""
        self.valid_values = ""Names of the constituencies""
        self.format = ""Constituency names should be capitalized and spelled correctly""
        self.examples = ['Río Negro', 'Misiones', 'Mendoza', 'Catamarca', 'La Rioja']
    def cast(self, val):
        return str(val).title()

class constituency(NumericSemanticType):
    def __init__(self):
        self.description = ""Constituency Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Constituency number should be an integer""
        self.examples = [1, 11, 23, 110, 300]
    def cast(self, val):
        return int(val)

class partyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of Political Party""
        self.valid_values = ""Names of political parties""
        self.format = ""Names should be capitalized and spelled correctly""
        self.examples = ['Partido Revolucionario Institucional', 'Partido Acción Nacional', 'Partido Verde Ecologista de México', 'Partido de la Revolución Demócratica', 'Partido del Trabajo']
    def cast(self, val):
        return str(val).title()

class party(NumericSemanticType):
    def __init__(self):
        self.description = ""Party Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Party number should be an integer""
        self.examples = [1, 10, 22, 168, 5011]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class validvote(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Valid Votes""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of valid votes should be an integer""
        self.examples = [625881, 1795876, 2019, 85792, 129510]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class partyvote(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Votes for a Party""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of party votes should be an integer""
        self.examples = [48740, 168952, 0, 3585, 15313]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class voteshare(NumericSemanticType):
    def __init__(self):
        self.description = ""Share of Votes for a Party""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Vote share should be a float between 0 and 100, inclusive""
        self.examples = [14.1, 16.6, 0, 0.07, 5.72]
    def cast(self, val):
        share = float(val)
        if 0 <= share <= 100:
            return share
        else:
            raise Exception('Invalid vote share')

class validvotefirst(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Valid Votes at the First Count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of valid votes at the first count should be an integer""
        self.examples = [403342, 1046181, 2019, 78842, 109706]
    def cast(self, val):
        return int(val)

class validvotelast(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Valid Votes at the Last Count""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of valid votes at the last count should be an integer""
        self.examples = [843380, 2258043, 3526, 131047, 166252]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return int(val)

class timea(NumericSemanticType):
    def __init__(self):
        self.description = ""Time Measure A""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Time measure should be an integer""
        self.examples = [10, 7, 0, 4, 10]
    def cast(self, val):
        return int(val)

class timeb(NumericSemanticType):
    def __init__(self):
        self.description = ""Time Measure B""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Time measure should be an integer""
        self.examples = [9, 7, 0, 3, 9]
    def cast(self, val):
        return int(val)

MAPPING = {'country': countryname, 'year': year, 'constituencyname': constituencyname, 'constituency': constituency,
           'partyname': partyname, 'party': party, 'validvote': validvote, 'partyvote': partyvote, 'voteshare': voteshare,
           'validvotefirst': validvotefirst, 'validvotelast': validvotelast, 'timea': timea, 'timeb': timeb}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Year should be formatted as a floating point number""
        self.examples = [1828.0, 1832.0, 1836.0, 1840.0, 1844.0]
    def cast(self, val):
        return float(val)
        
class electionvotes(NumericSemanticType):
    def __init__(self):
        self.description = ""Election Votes""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Election votes should be formatted as a floating point number""
        self.examples = [366.91187, 411.96503, 311.08844, 109.79592, 332.58182]
    def cast(self, val):
        return float(val)

class binaryindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [-1.0, 0.0]
    def cast(self, val):
        val = float(val)
        if val in self.valid_values:
            return val
        else:
            raise ValueError(f""Invalid value. Expected one of {self.valid_values}"")

class primarysupport(NumericSemanticType):
    def __init__(self):
        self.description = ""Primary Support""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Primary support should be formatted as a floating point number""
        self.examples = [-7.1, -0.925, 7.1, 22.9]
    def cast(self, val):
        return float(val)

class adjustedvotes(NumericSemanticType):
    def __init__(self):
        self.description = ""Adjusted Votes""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Adjusted votes should be formatted as a floating point number""
        self.examples = [96.911865, 141.96503, 41.08844, -160.20407, 62.581818]
    def cast(self, val):
        return float(val)

MAPPING = {'year': year, 'evdem538': electionvotes, 'pre1932': binaryindicator, 'incumprimarysupp': primarysupport, 'opposprimarysupp': primarysupport, 'evdemadj': adjustedvotes}"
"class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Name should be a string that represents the full name of a country""
        self.format = ""Name should be capitalized and should not contain any special characters""
        self.examples = ['Afghanistan', 'Brazil', 'Armenia', 'Austria', 'Azerbaijan']
    def cast(self, val):
        country = pycountry.countries.get(name=val)
        if country is not None:
            return val.title()
        else:
            raise Exception('Invalid country name')

class countrycode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Code""
        self.valid_values = ""Country code should be a string that represents the 3-letter ISO code of a country""
        self.format = ""Country code should be all uppercase and should not contain any special characters""
        self.examples = ['AFG', 'BRA', 'ARM', 'AUT', 'AZE']
    def cast(self, val):
        country = pycountry.countries.get(alpha_3=val)
        if country is not None:
            return val.upper()
        else:
            raise Exception('Invalid country code')

class funeralcost(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The cost of a funeral in a specific country""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Cost should be formatted as a floating point number""
        self.unit = 'In USD' 
        self.examples = [3000.00, 3311.00, 2334.00, 5888.00, 10879.00]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class booleancategory(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0,1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid boolean value')

class governmentreaction(NumericSemanticType):
    def __init__(self):
        self.description = ""The reaction of the government to funeral costs""
        self.valid_range = [0, 3]
        self.dtype = int
        self.format = ""Value should be an integer""
        self.examples = [0, 1, 2, 3]
    def cast(self, val):
        num = int(val)
        if num in self.examples:
            return num
        else:
            raise Exception('Invalid government reaction value')

class superstitionscore(NumericSemanticType):
    def __init__(self):
        self.description = ""The superstition score of a country""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Score should be a floating point number""
        self.examples = [7.57, 36.33, 49.74, 63.11, 95.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'country': countryname, 'countrycodes': countrycode, 'funeralcosts': funeralcost,
           'deathcostescalation': booleancategory, 'governmentreaction': governmentreaction, 
           'superstition': superstitionscore}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1990, 1991, 1992, 1993, 1994]
    def cast(self, val):
        return int(val)

class gdp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP should be formatted as a floating point number""
        self.unit = 'In current local currency' 
        self.examples = [9312432040.848455, 9802873832.604143, 9964277849.567902, 10389682135.642508, 10874596698.20806]
    def cast(self, val):
        return float(val)

class gdp_growth_rate(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Gross Domestic Product Growth Rate""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""GDP growth rate should be formatted as a floating point number""
        self.unit = 'In percentage' 
        self.examples = [7.2300000190734899, 7.1599998474121103, 7.5, 7.6300001144409197]
    def cast(self, val):
        try: 
            return float(val)
        except ValueError: 
            return float('nan')

MAPPING = {'year': year, 'boly': gdp, 'bolyur': gdp_growth_rate, 'criy': gdp, 'criyur': gdp_growth_rate, 'domy': gdp, 'domyur': gdp_growth_rate, 'ecuy': gdp, 'ecuyur': gdp_growth_rate, 'slvy': gdp, 'slvyur': gdp_growth_rate, 'gtmy': gdp, 'gtmyur': gdp_growth_rate, 'hndy': gdp, 'hndyur': gdp_growth_rate, 'jamy': gdp, 'jamyur': gdp_growth_rate, 'nicy': gdp, 'nicyur': gdp_growth_rate, 'pryy': gdp, 'pryyur': gdp_growth_rate}"
"class scientistname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Scientist""
        self.valid_values = ""Name should be a string that is of the form 'last name, first name'""
        self.format = ""The first letter of the first and last name should be capitalized, and the names should be separated by a comma""
        self.examples = [""Van'T Hoff, Jacobus Henricus"", 'Fischer, Hermann Emil', 'Arrhenius, Svante August', 'Ramsay, Sir William', 'Von Baeyer, Johann']
    def cast(self, val):
        return str(val).title()

class scientificfield(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Field of Scientific Study""
        self.valid_values = ""Can only be one of the following: 'Medicine', 'Physics', 'Chemistry'""
        self.format = ""The field should be represented as a string, with the first letter capitalized""
        self.examples = ['Medicine', 'Physics', 'Chemistry']
    def cast(self, val):
        return str(val).capitalize()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year Representation""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1999, 2000, 2010, 2020, 2021]
    def cast(self, val):
        return int(val)

class booleanflag(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age Representation""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be represented as an integer""
        self.examples = [10, 20, 30, 40, 50]
    def cast(self, val):
        return int(val)

MAPPING = {
    'name': scientistname, 
    'field': scientificfield, 
    'yearbirth': year, 
    'yearprize': year, 
    'yearresearchmid': year, 
    'yeardeath': year, 
    'theoryortheoryandempirical': booleanflag, 
    'agehighdegree': age
}"
"class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The name of a country""
        self.valid_values = ""The name of a country should be spelled correctly and exist in the list of ISO recognized country names""
        self.format = ""The name of the country should be in title case""
        self.examples = ['Argentina', 'Bolivia', 'Chile', 'Colombia', 'Ecuador']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Year of data point'
        self.valid_range: list = [1900, datetime.now().year]
        self.dtype: object = int
        self.format: str = 'Year should be a four digit integer'
        self.examples: list = [2008, 2009, 2010, 2011, 2012]
    def cast(self, val):
        val = int(val)
        if val >= 1900 and val <= datetime.now().year:
            return val
        else:
            raise Exception('Invalid year')

class exportvalue(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = 'The value of exports in USD'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Export value should be a floating point number'
        self.unit = 'In USD' 
        self.examples: list = [0.0011104329129437, 0.391, 648919000.0, 6174327000.0, 70017569000.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid export value')

MAPPING = {'totalexports': country, 'b': exportvalue, 'c': exportvalue, 'd': exportvalue, 
           'e': exportvalue, 'f': exportvalue, 'g': exportvalue, 'h': exportvalue, 
           'i': exportvalue, 'j': exportvalue, 'k': exportvalue}"
"class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of a Country""
        self.valid_values = ""Names should be valid country names recognized by pycountry library""
        self.format = ""Only the first letter of each word should be capitalized""
        self.examples = ['Albania', 'Argentina', 'Australia', 'Austria', 'Belgium']
    def cast(self, val):
        string = str(val).title()
        if pycountry.countries.get(name=string):
            return string
        else:
            raise Exception('Invalid country name')
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples: list[int] = [2015, 2015, 2015, 2015, 2015]
    def cast(self, val):
        num = int(val)
        return num
class polity(NumericSemanticType):
    def __init__(self):
        self.description = ""Polity score""
        self.valid_range = [0, 10]
        self.dtype = int
        self.format = ""Polity score should be an integer between 0 and 10""
        self.examples: list[int] = [9, 9, 10, 10, 8]
    def cast(self, val):
        num = int(val)
        if num >= 0 and num <= 10:
            return num
        else:
            raise Exception('Invalid polity score')
class gdpppp(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""GDP per capita, PPP (constant 2011 international $)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""GDP per capita should be a floating point number""
        self.unit = 'In constant 2011 international $'
        self.examples: list[float] = [11900.0, 20200.0, 48800.0, 47900.0, 44900.0]
    def cast(self, val):
        num = float(val)
        return num
MAPPING = {'countryname': countryname, 'year': year, 'polity': polity, 'gdpppp': gdpppp}"
"class braincondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The condition of the brain""
        self.valid_values = ""Condition must be one of the following strings: 'Normal Hs', 'Down Syndrome', 'LB1'""
        self.format = ""Condition name with capitalized first letter""
        self.examples = ['Normal Hs', 'Down Syndrome', 'LB1']
    def cast(self, val):
        return str(val).strip()
class length(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The length of a particular object""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Length should be formatted as a floating point number (in cm units) with one decimal place""
        self.units = 'In cm'
        self.examples: list[str] = [164.1, 152.2, 158.7, 144.0, 156.5]
    def cast(self, val):
        num = float(val)
        return round(num, 1)
class width(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The width of a particular object""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Width should be formatted as a floating point number (in cm units) with two decimal places""
        self.units = 'In cm'
        self.examples: list[str] = [123.49, 128.12, 131.7, 114.7, 126.7]
    def cast(self, val):
        num = float(val)
        return round(num, 2)
class volume(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The volume of a particular object""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Volume should be formatted as a floating point number (in cc units) with no decimal place""
        self.units = 'In cc'
        self.examples: list[str] = [1271.0, 1195.0, 1276.0, 918.0, 1169.0]
    def cast(self, val):
        num = float(val)
        return round(num, 0)

MAPPING = {'a': braincondition, 'lengthfpop': length, 'cerebralwidth': width, 'cerebellarwidth': width, 'frontbreadth': width, 'volumecc': volume}"
"class rating(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating on a scale of 1-7""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Rating should be an integer between 1 and 7""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if 1 <= num <= 7:
            return num
        else:
            raise Exception('Invalid rating')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a positive integer""
        self.examples = [18, 19, 20, 21, 22]
    def cast(self, val):
        num = int(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid age')

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Valid values are 1.0 for Male and 2.0 for Female""
        self.format = ""Gender should be represented as 1.0 for Male and 2.0 for Female""
        self.examples = [1.0, 2.0]
    def cast(self, val):
        if val == 1.0:
            return 'Male'
        elif val == 2.0:
            return 'Female'
        else:
            raise Exception('Invalid gender')

class race(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Race of a person""
        self.valid_values = ""Valid values are between 1.0 and 6.0""
        self.format = ""Race should be represented as a number between 1.0 and 6.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if 1.0 <= val <= 6.0:
            return str(val)
        else:
            raise Exception('Invalid race')

class job(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Job type of a person""
        self.valid_values = ""Valid values are between 1.0 and 10.0""
        self.format = ""Job type should be represented as a number between 1.0 and 10.0""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if 1.0 <= val <= 10.0:
            return str(val)
        else:
            raise Exception('Invalid job type')

MAPPING = {'cfc1': rating, 'cfc2': rating, 'cfc3': rating, 'cfc4': rating, 'cfc5': rating, 'cfc6': rating, 'cfc7': rating, 'cfc8': rating, 'cfc9': rating, 'cfc10': rating, 'cfc11': rating, 'cfc12': rating, 'age': age, 'gender': gender, 'race': race, 'job': job}"
"class cowcode(NumericSemanticType):
    def __init__(self):
        self.description = ""The Correlates of War numerical code for a country""
        self.valid_range = [0, 1000]
        self.dtype = int
        self.format = ""The cowcode should be a three digit number""
        self.examples = [700, 365, 452, 645, 817]
    def cast(self, val):
        return int(val)
        
class countryname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The name of a country""
        self.valid_values = ""The name should be from the list of recognized countries by the United Nations""
        self.format = ""The first letter should be capitalized""
        self.examples = ['Soviet Union', 'China', 'Mozambique', 'Iraq', 'Germany']
    def cast(self, val):
        return str(val).title() if pycountry.countries.get(name=str(val).title()) else None

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dates""
        self.valid_values = ""Dates should be in the format '%Y-%m-%d'""
        self.format = ""Dates should be stored as datetime objects""
        self.examples = ['1922-12-30', '1949-01-22', '1975-06-25', '1968-07-17', '1933-01-30']
    def cast(self, val):
        try:
            return datetime.strptime(str(val).strip(), '%Y-%m-%d')
        except ValueError:
            return None

class fullname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Full name of a person""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Deng Xiaoping', ""Shcherbitsky, Vladimir Vasil'evich"", 'Ali, Aires Bolif��cio Baptista', ""Kuznetsov, Vasiliy Vasil'evich"", 'Salom��o, Tom��z']
    def cast(self, val):
        return str(val).title()

class binary(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {'cowcode': cowcode, 'state': countryname, 'start': date, 'end': date, 'fullname': fullname, 
           'firstgen': binary, 'milsec': binary, 'female': binary, 'exitpostcoupfirstgen': binary, 
           'exitpostcoup': binary, 'military': binary, 'monarchy': binary, 'party': binary, 
           'personal': binary, 'logitpurge': binary, 'mlpurge': binary}"
"class monthcollected(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Month when sample was collected""
        self.valid_values = ""Name of the month""
        self.format = ""Month name should be spelled out and the first letter capitalized""
        self.examples = ['January', 'February', 'March', 'April', 'May']
    def cast(self, val):
        return str(val).title()

class seasondescription(BooleanSemanticType):
    def __init__(self):
        self.description = ""Whether the season was “wet” or “dry”""
        self.valid_values = ['Wet', 'Dry']
    def cast(self, val):
        return str(val).title()

class sampleid(NumericSemanticType):
    def __init__(self):
        self.description = ""Tracking identifier""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Identifier should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class vegetabletype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nominal name of vegetable type sampled""
        self.valid_values = ""Name of the vegetable""
        self.format = ""Vegetable name should be spelled out and the first letter capitalized""
        self.examples = ['Tomato', 'Cucumber', 'Lettuce', 'Carrot', 'Potato']
    def cast(self, val):
        return str(val).title()

class enterobacterprevalence(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Enterobacter prevalence (LOG CFU/g)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Prevalence should be a floating point number""
        self.unit = ""In LOG CFU/g"" 
        self.examples = [1.1, 2.2, 3.3, 4.4, 5.5]
    def cast(self, val):
        return round(float(val), 1)

MAPPING = {'variable': monthcollected, 'meaning': seasondescription, 'variable': sampleid, 'meaning': vegetabletype, 'variable': enterobacterprevalence}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date of a specific event""
        self.valid_values = ""Date should be a string in the format 'dd/mm/yy'""
        self.format = ""String of the form 'dd/mm/yy'""
        self.examples = ['4/11/15', '5/11/15', '6/11/15', '7/11/15', '8/11/15']
    def cast(self, val):
        datetime_obj = datetime.strptime(val, '%d/%m/%y')
        return datetime_obj.strftime('%d/%m/%y')

class animalnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an animal""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""A unique integer identifier""
        self.examples = [1010, 1050, 1200, 1500, 2000]
    def cast(self, val):
        return int(val)

class feedconsumed(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Amount of feed consumed by an animal""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""A floating point number representing the amount of feed consumed""
        self.unit = ""In kg""
        self.examples = [0.48, 5.39, 7.03, 5.06, 11.69]
    def cast(self, val):
        return round(float(val), 2)

class milkyield(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Amount of milk produced by an animal""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""A floating point number representing the amount of milk produced""
        self.unit = ""In kg""
        self.examples = [9.36, 30.06, 27.01, 24.1, 36.41]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {'date': date, 'animalnum': animalnumber, 'consumed': feedconsumed, 'yield': milkyield}"
"class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date in Excel format""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Dates are represented as the number of days since 1900-01-01""
        self.examples = [43208.0, 43208.0, 43208.0, 43208.0, 43208.0]
    def cast(self, val):
        return pd.to_datetime(val, unit='D', origin='1900-01-01')

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographic location name""
        self.valid_values = ""Location names should be official names recognized globally""
        self.format = ""Location names should be capitalized and spelled correctly""
        self.examples = ['Anlong Tamey', 'Cheu Teal', 'Banan', 'Battambang', 'Cambodia']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val):
            return val
        else:
            raise Exception('Invalid location')

class agriculturepractice(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['CA', 'CT']
    def cast(self, val):
        if str(val) in self.valid_values:
            return val
        else:
            raise Exception('Invalid agriculture practice')

class samplecode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each sample""
        self.valid_values = ""Unique sample codes""
        self.format = ""Sample codes are alphanumeric strings""
        self.examples = ['CAF1A', 'CAF1B', 'CAF1C', 'CAF2A', 'CAF2B']
    def cast(self, val):
        return str(val)

class soilrespiration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Soil respiration at specific depths""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Soil respiration should be a floating point number""
        self.unit = ""µg CO2-C g-1 h-1""
        self.examples = [0.961, 0.74, 0.5309999999999999, 0.9, 0.977]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid soil respiration value')

class poxc(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Peroxidase oxidizable carbon at specific depths""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""POXC should be a floating point number""
        self.unit = ""mg kg-1""
        self.examples = [720.536, 720.754, 432.4751999999999, 569.84, 703.728]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid POXC value')

class soilbulkdensity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Soil bulk density at specific depths""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Soil bulk density should be a floating point number""
        self.unit = ""g cm-3""
        self.examples = [1.512, 1.508, 0.9886369426751592, 1.44, 1.539]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid soil bulk density value')

class soilmoisture(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Soil moisture at specific depths""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Soil moisture should be a floating point number""
        self.unit = ""%""
        self.examples = [20.766, 21.294, 5.769230769230783, 16.478, 19.89]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid soil moisture value')

class litterindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Litter Index (LI)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Litter index should be a floating point number""
        self.examples = [15.648, 18.108, 0.0, 2.6, 9.35]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid litter index value')

class wateragregatesstability(NumericSemanticType):
    def __init__(self):
        self.description = ""Water aggregate stability at specific depths""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Water aggregate stability should be a floating point number""
        self.examples = [3.876, 3.803, 1.1111111111111112, 1.944, 3.889]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid water aggregate stability value')

class beerkan(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Beerkan infiltration rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Beerkan infiltration rate should be a floating point number""
        self.unit = ""mm h-1""
        self.examples = [356.878, 482.019, 0.1752107790381014, 71.649, 121.176]
    def cast(self, val):
        if isinstance(val, (float, int)):
            return float(val)
        else:
            raise Exception('Invalid Beerkan infiltration rate value')

MAPPING = {'samplingdate': date, 'village': location, 'commune': location, 'district': location, 
           'province': location, 'country': location, 'agriculturepractice': agriculturepractice, 
           'samplecode': samplecode, 'soilrespiration05cm': soilrespiration, 
           'soilrespiration510cm': soilrespiration, 'poxc05cm': poxc, 'poxc510cm': poxc, 
           'litterindex': litterindex, 'soilmoisture05cm': soilmoisture, 
           'soilmoisture510cm': soilmoisture, 'soilbulkdensity05cm': soilbulkdensity, 
           'soilbulkdensity510cm': soilbulkdensity, 'soilbulkdensity1020cm': soilbulkdensity, 
           'wateragregatesstability05cm': wateragregatesstability, 
           'wateragregatesstability510cm': wateragregatesstability, 'beerkan': beerkan}"
"class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Village name""
        self.valid_values = ""Village name should be a string""
        self.format = ""Village name should be capitalized""
        self.examples = ['Daurawa', 'Rouga', 'Zongok', 'Doutche', 'Baboul']
    def cast(self, val):
        return str(val).title()

class booleanvalue(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return bool(val)

class integercount(NumericSemanticType):
    def __init__(self):
        self.description = ""Countable entities""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be an integer""
        self.examples: list = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

MAPPING = {'village': village, 'infestation': booleanvalue, 'parasitisme': booleanvalue, 'nbreofmineswithhhebetorcocoonspike': integercount, 'totallenghtofmineswithcocoon': integercount, 'nbreofmineswithouthhebetorcocoonspike': integercount, 'totallenghtofmineswithoutcocoon': integercount, 'numberofdeadlarvaparasitizedbyhhebetor': integercount, 'numberofdeadlarvakilledbyotherscauses': integercount, 'total': integercount, 'combined': integercount}"
"class eggtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of egg""
        self.valid_values = ""Egg types are limited to a specific set of options""
        self.format = ""Egg types should be strings""
        self.examples = ['CC', 'Coniesta', 'MEM']
    def cast(self, val):
        return str(val).strip()

class eggcode(NumericSemanticType):
    def __init__(self):
        self.description = ""Code assigned to the egg type""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Egg codes should be integers from 1 to 3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class parasitismrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Rate of parasitism in percent""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Parasitism rates should be floating point numbers from 0 to 100""
        self.examples = [0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        return round(float(val), 6)

class emergenceRate(NumericSemanticType):
    def __init__(self):
        self.description = ""Emergence rate in percent""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Emergence rates should be floating point numbers from 0 to 100""
        self.examples = [0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        return round(float(val), 6)

class numberoftrichogramma(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Trichogramma""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Trichogramma numbers should be floating point numbers""
        self.examples = [0, 20.0, 40.0, 60.0, 80.0]
    def cast(self, val):
        return round(float(val), 6)

MAPPING = {
    'typoeuf': eggtype,
    'oeufcod': eggcode,
    'tauxparasitism': parasitismrate,
    'tauxemerg': emergenceRate,
    'calculoeufnoirs': numberoftrichogramma,
    'calculnumbretricho': numberoftrichogramma,
    'oeufsnoirs': numberoftrichogramma,
    'nombretricho': numberoftrichogramma
}"
"class marketid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""ID of a market""
        self.valid_values = ""Market IDs are strings in the form 'Mx' where x is a number""
        self.format = ""Format is 'Mx'""
        self.examples = ['M1', 'M2', 'M3', 'M4', 'M5']
    def cast(self, val):
        if isinstance(val, str) and re.match('^M\d+$', val):
            return val
        else:
            raise ValueError(""Invalid Market ID"")

class locationtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of location""
        self.valid_values = ""Location types are either 'Out.' for outside or 'Ins.' for inside""
        self.format = ""Format is either 'Out.' or 'Ins.'""
        self.examples = ['Out.', 'Ins.']
    def cast(self, val):
        if val == 'Out.' or val == 'Ins.':
            return val
        else:
            raise ValueError(""Invalid Location Type"")

class vendorid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a vendor""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Vendor IDs are integers""
        self.examples = [1, 5, 10, 15, 20]
    def cast(self, val):
        return int(val)

class sampledescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a sample""
        self.valid_values = ""Sample descriptions are strings""
        self.format = ""Format is a string""
        self.examples = ['Floor', 'Basket', 'Mat', 'Wall', 'Scale']
    def cast(self, val):
        return str(val)

class status(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Status of a sample""
        self.valid_values = ""Sample status is either 'Negative' or 'Positive'""
        self.format = ""Format is either 'Negative' or 'Positive'""
        self.examples = ['Negative', 'Positive']
    def cast(self, val):
        if val == 'Negative' or val == 'Positive':
            return val
        else:
            raise ValueError(""Invalid Status"")

class surfacetype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of surface""
        self.valid_values = ""Surface types are either 'FCS' for Food Contact Surface or 'NFCS' for Non-Food Contact Surface""
        self.format = ""Format is either 'FCS' or 'NFCS'""
        self.examples = ['FCS', 'NFCS']
    def cast(self, val):
        if val == 'FCS' or val == 'NFCS':
            return val
        else:
            raise ValueError(""Invalid Surface Type"")

class sampleid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID of a sample""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Sample IDs are integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class seasontype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of season""
        self.valid_values = ""Season types are either 'Dry' or 'Rainy'""
        self.format = ""Format is either 'Dry' or 'Rainy'""
        self.examples = ['Dry', 'Rainy']
    def cast(self, val):
        if val == 'Dry' or val == 'Rainy':
            return val
        else:
            raise ValueError(""Invalid Season Type"")

MAPPING = {'market': marketid, 'location': locationtype, 'vendor': vendorid, 'sampledescription': sampledescription, 'status': status, 'surface': surfacetype, 'sample': sampleid, 'season': seasontype}"
"class genotype(NumericSemanticType):
    def __init__(self):
        self.description = ""Genotype of an organism""
        self.valid_range = [142462, 143936]
        self.dtype = int
        self.format = ""Genotype should be an integer""
        self.examples = [143934, 143936, 142490, 142492, 142496]
    def cast(self, val):
        return int(val)
        
class length(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Length of an organism or its part in millimeters""
        self.valid_range = [54.3789609031676, 379.592733333333]
        self.dtype = float
        self.unit = 'In millimeters'
        self.format = ""Length should be a floating point number""
        self.examples = [190.157031053696, 241.25542, 185.474837720362, 150.27502846919, 160.054068046025]
    def cast(self, val):
        return round(float(val), 6)
        
class maxwidth(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Maximum width of an organism or its part in millimeters""
        self.valid_range = [13.1976, 65.6101444444444]
        self.dtype = float
        self.unit = 'In millimeters'
        self.format = ""Maximum width should be a floating point number""
        self.examples = [17.3709680623291, 30.98948, 51.8543013956624, 53.0088258351807, 47.6985526248535]
    def cast(self, val):
        return round(float(val), 6)
        
class rootfill(NumericSemanticType):
    def __init__(self):
        self.description = ""Root fill of an organism""
        self.valid_range = [-6.43719266977053, 8.08544317554964]
        self.dtype = float
        self.format = ""Root fill should be a floating point number""
        self.examples = [0.0641180651543091, -1.56546807406818, 0.137902375396615, -2.40579777913367, -3.88044476831367]
    def cast(self, val):
        return round(float(val), 6)
        
class lengthwidthratio(NumericSemanticType):
    def __init__(self):
        self.description = ""Ratio of length to width of an organism or its part""
        self.valid_range = [1.0891586162257, 23.3214285714286]
        self.dtype = float
        self.format = ""Length-width ratio should be a floating point number""
        self.examples = [10.8859310270428, 7.825, 3.61926436037616, 2.90779937101168, 3.47594088032242]
    def cast(self, val):
        return round(float(val), 6)

MAPPING = {'genotype': genotype, 'length': length, 'maxwidth': maxwidth, 'rootfill': rootfill, 'lengthwidthratio': lengthwidthratio}"
"class datasetname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the Dataset""
        self.valid_values = ""Dataset names must be strings and can contain any characters""
        self.format = ""Dataset names should be meaningful and descriptive""
        self.examples = ['Description', 'Period data were collected', 'Metadata', 'Primary contributor', 'Contact']
    def cast(self, val):
        return str(val).strip()
    
class datasource(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Source of the Data""
        self.valid_values = ""Data sources must be strings and can contain any characters""
        self.format = ""Data sources should be meaningful and descriptive""
        self.examples = ['Formulated by authors', 'FAOStat(http://www.fao.org/faostat/en/#data/QC)', 'Source', 'FAO EcoCrop (http://ecocrop.fao.org/ecocrop/srv/en/home)', 'Original data from FAOStat(http://www.fao.org/faostat/en/#data/QC)']
    def cast(self, val):
        if pd.isna(val):
            return np.nan
        return str(val).strip()

MAPPING = {'datasetname': datasetname, 'c': datasource}"
"class group(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Group of the cattle in the trial""
        self.valid_values = ""Group should be a string that represents Group A, Group B, or Treatment""
        self.format = ""Group should be in the format 'Group A', 'Group B', or 'Treatment'""
        self.examples = ['Group A', 'Group B', 'Treatment']
    def cast(self, val):
        if val in ['Group A', 'Group B', 'Treatment']:
            return val
        else:
            raise Exception('Invalid group')

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['M', 'F']
    def cast(self, val):
        if val in ['M', 'F']:
            return val
        else:
            raise Exception('Invalid sex')

class weight(NumericSemanticType):
    def __init__(self):
        self.description = ""Weight of the cattle""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number with one decimal place""
        self.examples = [92.8, 123.9, 127.6, 93.3, 124.4]
    def cast(self, val):
        if isinstance(val, str) and val.replace('.','',1).isdigit():
            return round(float(val), 1)
        else:
            raise Exception('Invalid weight')

class weight_change(NumericSemanticType):
    def __init__(self):
        self.description = ""Change in weight of the cattle from beginning to end""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Weight change should be a floating point number with one decimal place""
        self.examples = [-0.2, -9.6, 6, 13.2]
    def cast(self, val):
        if isinstance(val, str) and all(x.replace('.','',1).isdigit() or x == '-' for x in val.split()):
            return round(float(val), 1)
        else:
            raise Exception('Invalid weight change')

class photo(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Photo of the cattle""
        self.valid_values = ""Photo should be a string that represents 'Intial photo side ', 'Initial photo rear', 'End photo side', or 'End photo rear'""
        self.format = ""Photo should be in the format 'Intial photo side ', 'Initial photo rear', 'End photo side', or 'End photo rear'""
        self.examples = ['Intial photo side ', 'Initial photo rear', 'End photo side', 'End photo rear']
    def cast(self, val):
        if val in ['Intial photo side ', 'Initial photo rear', 'End photo side', 'End photo rear']:
            return val
        else:
            raise Exception('Invalid photo')

MAPPING = {'b': group, 'd': sex, 'weights': weight, 'f': weight, 'g': weight, 'h': weight, 'i': weight, 'j': weight, 'k': weight, 'l': weight, 'm': weight_change, 'photosofcow': photo, 'r': photo, 's': photo, 't': photo}"
"class herbicidetreatment(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Herbicide treatments represented by numbers""
        self.valid_values = ""Herbicide treatments are represented by numbers in string format. Valid values are '1', '2', '3', '4', '5'""
        self.format = ""Herbicide treatments should be stored as strings""
        self.examples = ['1', '2', '3', '4', '5']
    def cast(self, val):
        return str(val)

class herbicidename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of the herbicide""
        self.valid_values = ""Names of herbicides are represented as strings""
        self.format = ""Herbicide names should be stored as strings""
        self.examples = ['Testemunha capinada', 'Testemunha absoluta', 'Glifosato*', 'Glifosato + 2,4-D*', 'Glifosato + Saflufenacil*']
    def cast(self, val):
        return str(val)

class herbiciderate(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The rate of herbicide in grams per hectare""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Herbicide rates should be formatted as floating point numbers (in grams per hectare)""
        self.unit = 'grams per hectare'
        self.examples = [1440, 1005, 35, 60]
    def cast(self, val):
        # If the value is '-', replace it with '0'
        if val == '-':
            val = '0'
        # If the value contains '+', split it and return the sum of the parts
        elif '+' in val:
            parts = val.split('+')
            return sum(float(part) for part in parts)
        return float(val)

MAPPING = {'tratamentosherbicidas': herbicidetreatment, 'b': herbicidename, 'gramasdeiaha': herbiciderate}"
"class samplecollectionday(NumericSemanticType):
    def __init__(self):
        self.description = ""The day when the sample was collected""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Day should be an integer between 1 and 6""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 6:
            raise Exception('Invalid day')
        return num

class season(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Season when the sample was collected""
        self.valid_values = ""Season should be either 'dry' or 'wet'""
        self.format = ""Season should be a lowercase string""
        self.examples = ['dry', 'wet']
    def cast(self, val):
        str_val = str(val).lower()
        if str_val not in ['dry', 'wet']:
            raise Exception('Invalid season')
        return str_val

class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""ID of the sample""
        self.valid_values = ""Sample ID should be a string starting with 'T – ' followed by an integer""
        self.format = ""Sample ID should be a string""
        self.examples = ['T – 1', 'T – 2', 'T – 3', 'T – 4', 'T – 5']
    def cast(self, val):
        match_obj = re.match(r'T – \d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid sample ID')

class vegetabletype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of the vegetable""
        self.valid_values = ""Vegetable type should be either 'T', 'C', or 'L'""
        self.format = ""Vegetable type should be a single uppercase character""
        self.examples = ['T', 'C', 'L']
    def cast(self, val):
        str_val = str(val).upper()
        if str_val not in ['T', 'C', 'L']:
            raise Exception('Invalid vegetable type')
        return str_val

class prevalence(NumericSemanticType):
    def __init__(self):
        self.description = ""Prevalence of a bacterium in the sample""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Prevalence should be a floating point number""
        self.examples = [0.95, 3.9, 2.88, 3.48, 0.95]
    def cast(self, val):
        if val == '.':
            return float('nan')
        num = float(val)
        if num < 0:
            raise Exception('Invalid prevalence')
        return num

MAPPING = {
    'samplecollected': samplecollectionday,
    'season': season,
    'sampleid': sampleid,
    'vegetabletype': vegetabletype,
    'ebprevalence': prevalence,
    'cfprevalence': prevalence,
    'ecprevalence': prevalence
}"
"class treatmenttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of treatment applied to the pig""
        self.valid_values = ""Treatment types must be one of the following: ['A', 'B', 'C', 'D']""
        self.format = ""Treatment types should be a single uppercase character""
        self.examples = ['A', 'B', 'C', 'D']
    def cast(self, val):
        val = str(val).upper()
        if val in ['A', 'B', 'C', 'D']:
            return val
        else:
            raise Exception('Invalid treatment type')

class penid(NumericSemanticType):
    def __init__(self):
        self.description = ""ID number of the pen""
        self.valid_range = [1, 15]
        self.dtype = int
        self.format = ""Pen ID should be an integer between 1 and 15""
        self.examples = [1, 6, 7, 12, 13]
    def cast(self, val):
        val = int(val)
        if 1 <= val <= 15:
            return val
        else:
            raise Exception('Invalid pen ID')

class intake(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The food intake of the pig, in the given period""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Food intake should be a non-negative float""
        self.unit = ""In grams""
        self.examples = [86.94, 135.29, 90.66, 139.76]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid food intake')

class gain(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The weight gain of the pig, in the given period""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight gain should be a non-negative float""
        self.unit = ""In grams""
        self.examples = [54.59, 71.91, 649.83, 856.06]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid weight gain')

class days(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of days in the given period""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be a non-negative integer""
        self.examples = [84]
    def cast(self, val):
        val = int(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid number of days')

class feedefficiency(NumericSemanticType):
    def __init__(self):
        self.description = ""The feed efficiency of the pig, in the given period""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Feed efficiency should be a non-negative float""
        self.examples = [1.66, 1.94, 1.82]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid feed efficiency')

MAPPING = {'treatment': treatmenttype, 'pen': penid, 'intake021': intake, 'intake2142': intake, 'gain021': gain, 'gain2142': gain, 'days021': days, 'days2142': days, 'fg021': feedefficiency, 'fg2142': feedefficiency}"
"class replication(NumericSemanticType):
    def __init__(self):
        self.description = ""Replication number""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Replication number should be an integer between 1 and 3 inclusive""
        self.examples = [1, 2, 3]
    def cast(self, val):
        int_val = int(val)
        if 1 <= int_val <= 3:
            return int_val
        else:
            raise Exception('Invalid replication number')

class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Village name""
        self.valid_values = ""Village name should be a string""
        self.format = ""Village name should be capitalized""
        self.examples = ['Kozga', 'Tadada', 'Gmalan', 'Tchiro', 'Kjaddawa']
    def cast(self, val):
        return str(val).capitalize()

class treatment(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Treatment stage""
        self.valid_values = ""Treatment stage should be one of the following: 'flowering stage', 'filling stage', 'spike emergence', 'control'""
        self.format = ""Treatment stage should be a string""
        self.examples = ['flowering stage', 'filling stage', 'spike emergence', 'control']
    def cast(self, val):
        val = str(val).strip()
        if val in self.examples:
            return val
        else:
            raise Exception('Invalid treatment stage')

class infestation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        int_val = int(val)
        if int_val in self.valid_values:
            return int_val
        else:
            raise Exception('Invalid infestation value')

class parasitization(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        int_val = int(val)
        if int_val in self.valid_values:
            return int_val
        else:
            raise Exception('Invalid parasitization value')

MAPPING = {
    'replication': replication, 
    'village': village,
    'treatment': treatment,
    'infestation': infestation,
    'parasitization': parasitization
}"
"class replication(NumericSemanticType):
    def __init__(self):
        self.description = ""Replication of an experiment""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Replication should be represented as an integer""
        self.examples = [1, 2, 3, 1, 1]
    def cast(self, val):
        return int(val)

class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a village""
        self.valid_values = ""Village names should be strings""
        self.format = ""The first letter of each word should be capitalized""
        self.examples = ['Tabalalia', 'Dandaji', 'Beidi', 'Dangawanke', 'Zongonigdess']
    def cast(self, val):
        return str(val).title()

class treatmentduration(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Duration of treatment""
        self.valid_values = ""Possible values are '4 weeks', '6 weeks', 'control'""
        self.format = ""Treatment duration should be formatted as a string""
        self.examples = ['4 weeks', '6 weeks', 'control', '4 weeks', '6 weeks']
    def cast(self, val):
        if val not in ['4 weeks', '6 weeks', 'control']:
            raise Exception('Invalid treatment duration')
        return val

class treatmentnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Numerical representation of treatment duration""
        self.valid_range = [0, 6]
        self.dtype = float
        self.format = ""Treatment number should be represented as a floating point number""
        self.examples = [4.0, 0.0, 6.0, 4.0, 6.0]
    def cast(self, val):
        return float(val)

class infestation(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val)

class parasitization(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val)

class mineswithcocoon(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of mines with cocoon""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of mines with cocoon should be represented as a floating point number""
        self.examples = [0.0, 6.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val)

class mineslengthwithcocoon(NumericSemanticType):
    def __init__(self):
        self.description = ""Total length of mines with cocoon""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total length of mines with cocoon should be represented as a floating point number""
        self.examples = [0.0, 41.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val)

class mineswithoutcocoon(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of mines without cocoon""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of mines without cocoon should be represented as a floating point number""
        self.examples = [0.0, 36.0, 0.0, 0.0, 1.0]
    def cast(self, val):
        return float(val)

class mineslengthwithoutcocoon(NumericSemanticType):
    def __init__(self):
        self.description = ""Total length of mines without cocoon""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total length of mines without cocoon should be represented as a floating point number""
        self.examples = [0.0, 101.0, 0.0, 0.0, 4.0]
    def cast(self, val):
        return float(val)

class deadlarvae(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of dead larvae""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of dead larvae should be represented as a floating point number""
        self.examples = [0.0, 8.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val) if not pd.isna(val) else float('nan')

class othercauses(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of larvae killed by other causes""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of larvae killed by other causes should be represented as a floating point number""
        self.examples = [0.0, 4.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val) if not pd.isna(val) else float('nan')

class totalmines(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of mines""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total number of mines should be represented as a floating point number""
        self.examples = [0.0, 36.0, 0.0, 0.0, 1.0]
    def cast(self, val):
        return float(val)

class combine(NumericSemanticType):
    def __init__(self):
        self.description = ""Combined measure""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Combined measure should be represented as a floating point number""
        self.examples = [0.0, 11.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        return float(val)


MAPPING = {
    'replication': replication,
    'village': village,
    'traitement': treatmentduration,
    'traitement1': treatmentnumber,
    'infestation': infestation,
    'parasitization': parasitization,
    'nbreofmineswithhhebetorcocoonspike': mineswithcocoon,
    'totallenghtofmineswithcocoon': mineslengthwithcocoon,
    'nbreofmineswithouthhebetorcocoonspike': mineswithoutcocoon,
    'totallenghtofmineswithoutcocoon': mineslengthwithoutcocoon,
    'numberofdeadlarvaparasitizedbyhhebetor': deadlarvae,
    'numberofdeadlarvakilledbyotherscauses': othercauses,
    'totalmine': totalmines,
    'combine': combine
}"
"class identifier(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A unique identifier string for a scientific experiment or observation""
        self.valid_values = ""Identifier strings should be alphanumeric and may contain special characters""
        self.format = ""The identifier strings are typically formatted in the pattern: 'WORD-WORD-NUMBER-NUMBER'""
        self.examples = ['PAHAL-dsPAHAL-1-1', 'PAHAL-dsPAHAL-1-2', 'PAHAL-dsPAHAL-2-1', 'PAHAL-dsPAHAL-2-2', 'PAHAL-dsPAHAL-3-1']
    def cast(self, val):
        return str(val)

class scientificvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A scientific value, typically a result from an experiment or observation""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Scientific values should be stored as floating point numbers""
        self.examples = [20.45, 20.76, 20.9, 20.93, 19.73]
    def cast(self, val):
        return float(val)

class normalizedvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A normalized scientific value, typically a result from an experiment or observation""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Normalized values should be stored as floating point numbers within the range [0,1]""
        self.examples = [0.2573655641069742, 0.364, 0.7, 1.0, 1.0]
    def cast(self, val):
        val = float(val)
        if 0 <= val <= 1:
            return val
        else:
            raise ValueError(""Normalized value should be within the range [0,1]"")

MAPPING = {
    'a': identifier, 
    'cpvalue': scientificvalue, 
    'meansofcp': scientificvalue, 
    'rp49target': scientificvalue, 
    '2rp49target': scientificvalue, 
    'f': scientificvalue, 
    'cpvalue1': scientificvalue,
    'meansofcp1': scientificvalue,
    'rp49target1': scientificvalue,
    '2rp49target1': scientificvalue,
    'o': scientificvalue,
    'nomalizedbysigfp': normalizedvalue
}"
"class experimentnumber(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The number of the experiment""
        self.valid_values = ""Roman numerals from I to V""
        self.format = ""Roman numerals""
        self.examples = ['I', 'II', 'III', 'IV', 'V']
    def cast(self, val):
        return str(val)

class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric identifier for the entity""
        self.valid_range = [1, 125]
        self.dtype = int
        self.format = ""Integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class accessionnumber(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Accession number of the banana cultivar""
        self.valid_values = ""A string starting with 'ITC' followed by 4 digits""
        self.format = ""ITCXXXX""
        self.examples = ['ITC0643', 'ITC0123', 'ITC1483', 'ITC1122', 'ITC0767']
    def cast(self, val):
        return str(val)

class accessionname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The name of the banana cultivar""
        self.valid_values = ""A string representing the name""
        self.format = ""String""
        self.examples = ['Cachaco', 'Simili Radjah', 'Monthan', 'Gros Michel', 'Dole']
    def cast(self, val):
        return str(val)

class treatment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['control', 'stress']
    def cast(self, val):
        return str(val)

class rootfreshmassmeasgco3250000907(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The root fresh mass measurement""
        self.valid_range = [0.809236499, 32.89092667]
        self.dtype = float
        self.format = ""Floating point number""
        self.unit = 'g CO3 25000 0907'
        self.examples = [12.51527402, 12.60126126, 9.313506796, 19.52970107, 14.94755625]
    def cast(self, val):
        return float(val)

MAPPING = {
    'experimentnumber': experimentnumber, 
    'id': id, 
    'accessionnumber': accessionnumber, 
    'accessionname': accessionname, 
    'treatment': treatment, 
    'rootfreshmassmeasgco3250000907': rootfreshmassmeasgco3250000907
}"
"class dateofinfestation(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of infestation represented as a floating-point number""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Dates should be in the Excel date format, which is the number of days since January 1, 1900""
        self.examples = [42965.685, 42962.0, 42968.0, 42972.0, 42963.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return pd.to_datetime(val, origin='1900-01-01', unit='D')
        
class choiceornotchoice(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Choix', 'Nn choix']
    def cast(self, val):
        return 'Choix' if val == 'Choix' else 'Nn choix'

class traitcode(NumericSemanticType):
    def __init__(self):
        self.description = ""Trait code represented as a floating-point number""
        self.valid_range = [1, 2]
        self.dtype = float
        self.format = ""Trait codes should be either 1.0 or 2.0""
        self.examples = [1.0, 2.0]
    def cast(self, val):
        return 1.0 if val == 1.0 else 2.0

class typeofeggs(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of eggs""
        self.valid_values = ""The type of eggs should be one of the following: 'MEM', 'Coniesta', 'Harmigera', 'Corcyra'""
        self.format = ""Egg types should be one of the following: 'MEM', 'Coniesta', 'Harmigera', 'Corcyra'""
        self.examples = ['MEM', 'Coniesta', 'Harmigera', 'Corcyra']
    def cast(self, val):
        return str(val)

class typeeggscode(NumericSemanticType):
    def __init__(self):
        self.description = ""Type of eggs code represented as a floating-point number""
        self.valid_range = [1, 4]
        self.dtype = float
        self.format = ""Type of eggs code should be one of the following: 1.0, 2.0, 3.0, 4.0""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        return val if val in [1.0, 2.0, 3.0, 4.0] else float('nan')

class eggs(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of eggs""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Number of eggs should be represented as a floating-point number""
        self.examples = [0.0, 5.0, 10.0, 15.0, 20.0]
    def cast(self, val):
        return float(val)

class totalofeggs(NumericSemanticType):
    def __init__(self):
        self.description = ""Total number of eggs""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total number of eggs should be represented as a floating-point number""
        self.examples = [7.0, 27.0, 30.0, 50.0, 103.0]
    def cast(self, val):
        return float(val)

class parasitismrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Parasitism rate represented as a floating-point number""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Parasitism rate should be represented as a percentage (0.0 to 100.0)""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        return round(float(val), 2) if 0 <= val <= 100 else float('nan')

MAPPING = {'datedinfestation': dateofinfestation, 
           'traitchoixnonchoix': choiceornotchoice, 
           'traitcod': traitcode, 
           'typedoeufs': typeofeggs, 
           'typeœufscode': typeeggscode, 
           'œufnoirt': eggs, 
           'œufnoirnt': eggs, 
           'œufblanct': eggs, 
           'œufblancnt': eggs, 
           'totalœufs': totalofeggs, 
           'tauxparastime': parasitismrate}"
"class serialnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Serial Number""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Serial Number should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class variable(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Variable""
        self.valid_values = ""Variable is a string that could take any value""
        self.format = ""Variables are capitalized, stripped from leading/trailing whitespaces and stored as strings""
        self.examples = ['State', 'District', 'District_Code', 'Mandal', 'Village_Code']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val).strip().capitalize()
        
MAPPING = {'slno': serialnumber, 'variables': variable}"
"class planttaxon(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Taxonomic classification of a plant""
        self.valid_values = ""Plant taxon should be a string that represents the scientific name of the plant species""
        self.format = ""Scientific name of the plant species, typically in Latin, in the form 'Genus_species'""
        self.examples = ['Cucurbita_palmata', 'Cucurbita_digitata', 'Cucurbita_cordata']
    def cast(self, val):
        return str(val)

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical latitude""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number between -90 (South Pole) and +90 (North Pole)""
        self.examples = [0, -45.0, 45.0, 90, -90]
    def cast(self, val):
        num = float(val)
        if -90 <= num <= 90:
            return num
        else:
            raise Exception('Invalid Latitude')

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical longitude""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number between -180 (West) and +180 (East)""
        self.examples = [0, -90.0, 90.0, 180, -180]
    def cast(self, val):
        num = float(val)
        if -180 <= num <= 180:
            return num
        else:
            raise Exception('Invalid Longitude')

class planttype(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['H', 'G']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid Plant Type')

MAPPING = {'taxon': planttaxon, 'latitude': latitude, 'longitude': longitude, 'type': planttype}"
"class replicate(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Replicate identifier""
        self.valid_values = ""The replicate values must be one of the following: ['R1', 'R2', 'R3', 'R4']""
        self.format = ""Replicate must be a string""
        self.examples = ['R1', 'R2', 'R3', 'R4']
    def cast(self, val):
        return str(val)

class rootstock(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Rootstock type""
        self.valid_values = ""The rootstock type must be a string""
        self.format = ""The rootstock type must be in a certain form""
        self.examples = ['Non-grafted', 'EG59EW', 'EG190', 'Local EG']
    def cast(self, val):
        return str(val)

class rootstockvariety(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Rootstock variety""
        self.valid_values = ""The rootstock variety must be a string""
        self.format = ""The rootstock variety must be in a certain form""
        self.examples = ['No rootstock', 'Eggplant 59 F1 East West Seed', 'Eggplant 190', 'Local eggplant']
    def cast(self, val):
        return str(val)

class tomatovariety(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Tomato variety""
        self.valid_values = ""The tomato variety must be a string""
        self.format = ""The tomato variety must be in a certain form""
        self.examples = ['Yolanum lycopersicum']
    def cast(self, val):
        return str(val)

class height(NumericSemanticType):
    def __init__(self):
        self.description = ""The height of a plant""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The height should be a floating point number""
        self.examples = [33.5, 19.0, 50.0, 29.0, 37.75]
    def cast(self, val):
        return float(val)

class branchnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""The number of branches of a plant""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of branches should be an integer number""
        self.examples = [8, 0, 15, 6, 10]
    def cast(self, val):
        return int(val)

class yieldweight(NumericSemanticType):
    def __init__(self):
        self.description = ""The yield weight of a plant""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The yield weight should be a floating point number""
        self.examples = [422.0, 0.0, 1444.0, 35.25, 652.0]
    def cast(self, val):
        return float(val)

class plantstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Alive', 'Dead']
    def cast(self, val):
        return str(val)
        
MAPPING = {'replicate': replicate, 'rootstocks': rootstock, 'rootstockvarietes': rootstockvariety, 'tomatovariety': tomatovariety, 
           'maxplantheightcm': height, 'maxbranchnumbers': branchnumber, 'firstharvestgplant': yieldweight,
           'secondharvestgplant': yieldweight, 'thirdharvestgplant': yieldweight, 'fourthharvestgplant': yieldweight, 
           'totalyieldgplant': yieldweight, 'plantresistance': plantstatus}"
"class recordnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Record Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Record Number should be a positive integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid record number')
        return num

class datestamp(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date should be in the form 'yymmdd'""
        self.format = ""Date should be in the form 'yymmdd'""
        self.examples = ['42990', '42991', '42992', '42993', '42994']
    def cast(self, val):
        return str(val)

class timestamp(NumericSemanticType):
    def __init__(self):
        self.description = ""Time""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be a floating point number""
        self.examples = [0.3576388888888889, 0.35833333333333334, 0.35902777777777778, 0.35972222222222222, 0.36041666666666666]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid time')
        return num

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Temperature should be a floating point number (in Celsius units)""
        self.units = 'In Celsius' 
        self.examples: list = [27.6, 27.5, 27.4, 27.3, 27.2]
    def cast(self, val):
        num = float(val)
        return num

class humidity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Relative Humidity""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Relative Humidity should be a floating point number (in % units)""
        self.units = 'In %' 
        self.examples: list = [75, 74.1, 75.8, 74.7, 77.5]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 100:
            raise Exception('Invalid relative humidity')
        return num

class electricalcurrent(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Electrical Current""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Electrical Current should be a floating point number (in Ampere units)""
        self.units = 'In Ampere' 
        self.examples: list = [0.19, 0.18, 0.2, 3.06, 3.09]
    def cast(self, val):
        num = float(val)
        return num

class doorstate(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Door State""
        self.valid_values = ""Door state should be either 'OPEN' or 'CLOSE'""
        self.format = ""Door state should be either 'OPEN' or 'CLOSE'""
        self.examples = ['OPEN', 'CLOSE', 'CLOSE', 'CLOSE', 'CLOSE']
    def cast(self, val):
        if val not in ['OPEN', 'CLOSE']:
            raise Exception('Invalid door state')
        return val

MAPPING = {'recnum': recordnumber, 'date': datestamp, 'time': timestamp, 'tempin': temperature, 'tempout': temperature, 'rhin': humidity, 'rhout': humidity, 'current': electricalcurrent, 'doorstate': doorstate}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year in Gregorian calendar""
        self.valid_range = [1, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1990, 2000, 2010, 2020, 2021]
    def cast(self, val):
        return int(round(val))

class village(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a village""
        self.valid_values = ""Name should be a string that represents a village name""
        self.format = ""Only the first letter of the village name should be capitalized""
        self.examples = ['Doutchi', 'Kweygorou', 'Margou (Birni)', 'Tera (Champ de xction)', 'LourgouBengou (Tera)']
    def cast(self, val):
        return str(val).title()

class eggscollected(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of eggs collected""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of eggs should be formatted as an integer""
        self.examples = [350, 545, 740, 416, 145]
    def cast(self, val):
        return int(round(val))

class trichoemerged(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Tricho emerged""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of Tricho emerged should be formatted as an integer""
        self.examples = [15, 20, 35, 15, 17]
    def cast(self, val):
        return int(round(val))

class eggsparasitized(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of eggs parasitized""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of eggs parasitized should be formatted as an integer""
        self.examples = [62, 106, 151, 74, 26]
    def cast(self, val):
        return int(round(val))

class episobserved(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Epi observed""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of Epi observed should be formatted as an integer""
        self.examples = [100, 100, 100, 125, 125]
    def cast(self, val):
        return int(round(val))

class infestationrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Rate of infestation""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Infestation rate should be formatted as a floating point number with two decimal places for percentage""
        self.examples = [28.0, 30.0, 31.0, 40.0, 28.0]
    def cast(self, val):
        return round(float(val), 2)

class parasitismrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Rate of parasitism""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Parasitism rate should be formatted as a floating point number with two decimal places for percentage""
        self.examples = [17.71, 19.45, 20.41, 17.79, 17.93]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 2)

MAPPING = {'années': year, 'villages': village, 'nombredesoeufscollectés': eggscollected, 'nbretrichoemergés': trichoemerged, 'nombredesoeufsparasités': eggsparasitized, 'nbreépiobservés': episobserved, 'tauxdinfestationmemdesepis': infestationrate, 'tauxparsitsm': parasitismrate}"
"class recordnumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Record Number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Record Number should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class datetimeutc(NumericSemanticType):
    def __init__(self):
        self.description = ""Date and Time in UTC""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Date and Time should be in UTC stored as float""
        self.examples = [43450.81400462963, 43450.90672453704, 43450.90743055556, 43450.908101851855, 43450.90880787037]
    def cast(self, val):
        return float(val)

class sitesinglevalue(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Site Name""
        self.valid_values = ""The site name should be a single unique value""
        self.format = ""Site name should be a string""
        self.examples = ['THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU', 'THBKK_HORT_KU']
    def cast(self, val):
        return str(val)

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature in Celsius""
        self.valid_range = [-273.15, float('inf')] # considering absolute zero
        self.dtype = float
        self.format = ""Temperature should be in Celsius and stored as float""
        self.unit = ""Celsius""
        self.examples = [26.5, 27.4, 28.31, 29.5, 27.81]
    def cast(self, val):
        return round(float(val), 2)

class humidity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Humidity in Percent""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Humidity should be in percent and stored as float""
        self.unit = ""Percent""
        self.examples = [61.2, 64.4, 59.1, 57.4, 62.6]
    def cast(self, val):
        return round(float(val), 2)

class current(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Current in Amperes""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Current should be in Amperes and stored as float""
        self.unit = ""Amperes""
        self.examples = [0.03575, 0.09038, -0.01184, -0.01037, -0.01033]
    def cast(self, val):
        return round(float(val), 5)

class voltage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Voltage in Volts""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Voltage should be in Volts and stored as float""
        self.unit = ""Volts""
        self.examples = [220.0, 220.0, 220.0, 220.0, 220.0]
    def cast(self, val):
        return float(val)

MAPPING = {'recno': recordnumber, 
           'datetimeutc': datetimeutc, 
           'sitename': sitesinglevalue,
           'tin1c': temperature,
           'tin2c': temperature,
           'tin3c': temperature,
           'tin4c': temperature,
           'toutc': temperature,
           'toutc1': temperature,
           'rhinpercent': humidity,
           'rhoutpercent': humidity,
           'currenta': current,
           'voltagev': voltage}"
"class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name last name'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Greg Murphy', 'Peter Creak', 'Group Duty Officers', 'Stewart Kreltszheim', 'Peter Hayes']
    def cast(self, val):
        return str(val).title()

class binarylink(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value for Binary Link')

class datetimestring(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date values""
        self.valid_values = ""Date values should be in the format 'dd-mm-yyyy' or 'before dd-mm'""
        self.format = ""Dates should be stored as strings in the format 'dd-mm-yyyy' or 'before dd-mm'""
        self.examples = ['40579', '40580', '40581', '2, 5, 6-Feb', 'before 7 Feb']
    def cast(self, val):
        if re.match('^before', val):
            val = val.split(' ')[1]
            val = datetime.strptime(val, '%d-%b').strftime('%d-%m')
            return 'before ' + val
        elif re.match('^[0-9]{5}$', val):
            return pd.to_datetime(val, format='%Y%j').strftime('%d-%m-%Y')
        elif re.match('^([0-9]{1,2},\s*)+[0-9]{1,2}-[A-Za-z]{3}$', val):
            dates = val.split(', ')
            dates = [datetime.strptime(date, '%d-%b').strftime('%d-%m') for date in dates]
            return ', '.join(dates)
        else:
            raise Exception('Invalid date format')

MAPPING = {'who': personname, 'whom': personname, 'link': binarylink, 'when': datetimestring}"
"class weekday(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid value for weekday"")
        return int(val)
        
class loyal(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid value for loyal"")
        return int(val)

class grossincome(NumericSemanticType):
    def __init__(self):
        self.description = ""Gross income of an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Income should be formatted as a floating point number""
        self.examples = [44.092438, 69.65735, 44.730003, 63.10961, 44.092438]
    def cast(self, val):
        return float(val)

class traderank(NumericSemanticType):
    def __init__(self):
        self.description = ""Rank of a trader""
        self.valid_range = [1, 26]
        self.dtype = float
        self.format = ""Rank should be a whole number""
        self.examples = [8.0, 13.0, 13.0, 15.0, 7.0]
    def cast(self, val):
        return int(val)

class newrank(NumericSemanticType):
    def __init__(self):
        self.description = ""Rank of a new commodity""
        self.valid_range = [1, 25]
        self.dtype = float
        self.format = ""Rank should be a whole number""
        self.examples = [17.0, 21.0, 13.0, 16.0, 13.0]
    def cast(self, val):
        return int(val)

class newusedalt(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid value for newusedalt"")
        return int(val)

class paymenttype1(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid value for paymenttype1"")
        return int(val)

class newused1xloyal(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val not in self.valid_values:
            raise ValueError(""Invalid value for newused1xloyal"")
        return int(val)

class newpricelge(NumericSemanticType):
    def __init__(self):
        self.description = ""Price of a new commodity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Price should be formatted as a floating point number""
        self.examples = [27.0, 44.96, 32.0, 32.5, 13.495]
    def cast(self, val):
        return float(val)

class tradepaymentlge(NumericSemanticType):
    def __init__(self):
        self.description = ""Trade payment""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Payment should be formatted as a floating point number""
        self.examples = [5.15, 6.15, 13.75, 5.35, 2.0]
    def cast(self, val):
        return float(val)

MAPPING = {'weekday': weekday, 'loyal': loyal, 'grossincome': grossincome, 'traderank': traderank, 'newrank': newrank, 'newusedalt': newusedalt, 'paymenttype1': paymenttype1, 'newused1xloyal': newused1xloyal, 'newpricelge': newpricelge, 'tradepaymentlge': tradepaymentlge}"
"class paperid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a paper""
        self.valid_values = ""ID should be a string of alphanumeric characters""
        self.format = ""ID should be of the form 'rayyan-#######'""
        self.examples = ['rayyan-72425496', 'rayyan-72425497', 'rayyan-72425499', 'rayyan-72425500', 'rayyan-72425501']
    def cast(self, val):
        return str(val)

class publicationyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of publication of the paper""
        self.valid_range = [1500, datetime.now().year] # assuming papers could be from 1500 onwards till current year
        self.dtype = int
        self.format = ""Year should be a 4-digit integer""
        self.examples = [2020, 2019, 2018, 2017, 2016]
    def cast(self, val):
        return int(val)

class issn(CategoricalSemanticType):
    def __init__(self):
        self.description = ""International Standard Serial Number (ISSN) of the journal where the paper was published""
        self.valid_values = ""ISSN should be a 8-digit number divided by a hyphen into two four-digit numbers""
        self.format = ""ISSN should be of the form '####-####'""
        self.examples = ['0959-6526', '0020-7543', '0964-4733', '15329194', '2345-0282']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        val = str(val).replace('-', '')
        if len(val) != 8:
            return float('nan')
        return val[:4] + '-' + val[4:]

class volume(NumericSemanticType):
    def __init__(self):
        self.description = ""Volume number of the journal where the paper was published""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Volume number should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class issue(NumericSemanticType):
    def __init__(self):
        self.description = ""Issue number of the journal where the paper was published""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Issue number should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class publisher(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Publisher of the journal where the paper was published""
        self.valid_values = ""Publisher should be a string""
        self.format = ""Publisher should be a string""
        self.examples = ['MDPI AG', 'Springer Nature B.V.', 'Emerald Group Publishing Limited', 'Addleton Academic Publishers', 'Massachusetts Institute of Technology, Cambridge, MA']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return str(val)

MAPPING = {
    'key': paperid,
    'year': publicationyear,
    'issn': issn,
    'volume': volume,
    'issue': issue,
    'publisher': publisher
}"
"class booleanvariable(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid value for Boolean')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A particular year""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = float
        self.format = ""Year should be a four digit number""
        self.examples = [1990, 2000, 2010, 2020, 2030]
    def cast(self, val):
        if val >= self.valid_range[0] and val <= self.valid_range[1]:
            return float(val)
        else:
            raise Exception('Invalid year')

class logvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A value in logarithmic scale""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Value can be any real number""
        self.examples = [-3.0, 0.0, 1.0, 2.3, 4.5]
    def cast(self, val):
        return float(val)

class dealtype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of deal in a transaction""
        self.valid_values = ""Deal type can be a number between 1 and 10""
        self.format = ""Deal type should be a number""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class industrytype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of industry""
        self.valid_values = ""Industry type can be a number between 1 and 13""
        self.format = ""Industry type should be a number""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class industryyear(NumericSemanticType):
    def __init__(self):
        self.description = ""A particular year in an industry""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Year should be a number""
        self.examples = [1, 50, 100, 150, 200]
    def cast(self, val):
        return float(val)

MAPPING = {'acquirerbank': booleanvariable, 'completo': booleanvariable, 'yr': year, 'setorsic': booleanvariable, 'lnvalor': logvalue, 'formofthedeal': dealtype, 'lntempo': logvalue, 'allcash': booleanvariable, 'allstock': booleanvariable, 'yrannoun': year, 'public': booleanvariable, 'capitalestrangeiro': booleanvariable, 'industry': industrytype, 'lnata': logvalue, 'aberta': booleanvariable, 'toptierf': booleanvariable, 'lnexpsembanco': logvalue, 'lnexpgeral': logvalue, 'toptierbr': booleanvariable, 'toptierestrangeiro': booleanvariable, 'industryyear': industryyear}"
"class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Excel date format""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Dates should be in Excel date format (number of days since 1900-01-01)""
        self.examples: list = [43474, 43475, 43476, 43479, 43480]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class dayofweek(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Day of the week""
        self.valid_values = ""Valid values are ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']""
        self.format = ""The name of the day should be capitalized""
        self.examples = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    def cast(self, val):
        return str(val).capitalize()

class season(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Season of the year""
        self.valid_values = ""Valid values are ['Spring', 'Summer', 'Fall', 'Winter']""
        self.format = ""The name of the season should be capitalized""
        self.examples = ['Spring', 'Summer', 'Fall', 'Winter']
    def cast(self, val):
        return str(val).capitalize()

class binaryoption(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['No', 'Yes']
    def cast(self, val):
        if str(val).lower() in ['no', 'yes']:
            return str(val).capitalize()
        else:
            raise Exception('Invalid value')

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Temperature should be in Celsius""
        self.unit = ""Celsius""
        self.examples: list = [3.0, 9.0, 9.0, 6.0, 5.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class weathercondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Weather condition""
        self.valid_values = ""Valid values are ['Sunny', 'Rainy', 'Cloudy']""
        self.format = ""The name of the condition should be capitalized""
        self.examples = ['Sunny', 'Rainy', 'Cloudy']
    def cast(self, val):
        return str(val).capitalize()

class food(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of food""
        self.valid_values = ""Valid values are names of food""
        self.format = ""The name of the food should be capitalized""
        self.examples = ['Mercimek', 'Diger', 'Ezogelin', 'Sebze', 'Domates']
    def cast(self, val):
        return str(val).capitalize()

class foodtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of food""
        self.valid_values = ""Valid values are ['Meat', 'Chicken', 'Fish', 'None', 'Sandwich']""
        self.format = ""The name of the food type should be capitalized""
        self.examples = ['Meat', 'Chicken', 'Fish', 'None', 'Sandwich']
    def cast(self, val):
        return str(val).capitalize()

class foodconsumption(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of food consumption""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Values should be integers""
        self.examples: list = [3513, 3746, 3201, 3548, 4523]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {'date': date, 'day': dayofweek, 'season': season, 'ramazanday': binaryoption, 'finalexamday': binaryoption, 'makeupexamday': binaryoption, 'semesterholiday': binaryoption, 'summerholiday': binaryoption, 'weathertemp': temperature, 'weathercond': weathercondition, 'food1': food, 'food2': food, 'food2type': foodtype, 'food3': food, 'food4': food, 'numberoffoodconsumption': foodconsumption, 'thedaybefore': foodconsumption, 'samedaylastweek': foodconsumption}"
"class ratingscale(NumericSemanticType):
    def __init__(self):
        self.description = ""A rating scale that ranges from 1 to 5""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Ratings should be integer values ranging from 1 to 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise Exception('Invalid rating')
        else:
            return num

MAPPING = {'el1': ratingscale, 'el2': ratingscale, 'el3': ratingscale, 'el4': ratingscale, 'm1': ratingscale, 'm2': ratingscale, 'se1': ratingscale, 'se2': ratingscale, 'ap1': ratingscale, 'ap2': ratingscale, 'ap3': ratingscale, 'ap4': ratingscale}"
"class year(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_values = ""Year must be a 4-digit number stored as a string, in the format 'YYYY'""
        self.format = ""Year must be a 4-digit number stored as a string, in the format 'YYYY'""
        self.examples = ['2008', '2009', '2010', '2011', '2012']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val)

class foundation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Foundation""
        self.valid_values = ""Foundation must be a string, representing the name of a foundation""
        self.format = ""Foundation names should be capitalized""
        self.examples = [""Association pour la fondation pour l'Europe des Libertes et de la Democratie"", 'Centre for European Studies', 'Centre Maurits Coppieters', 'Christian Political Foundation for Europe', 'European Foundation for Freedom']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

class donationamount(NumericSemanticType):
    def __init__(self):
        self.description = ""The donation amount in EUR""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Donation amount should be formatted as a floating point number (in EUR units) with two decimal places for cents""
        self.examples = [0.00, 10.50, 1.30, 10000.00, 8998.00]
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            num = float(val)
            return round(num, 2)

MAPPING = {'donations': year, 
           'b': foundation, 'c': foundation, 'd': foundation, 'e': foundation, 
           'f': foundation, 'g': foundation, 'h': foundation, 'i': foundation, 
           'j': foundation, 'k': foundation, 'l': foundation, 'm': foundation, 
           'n': foundation, 'o': foundation, 'p': foundation, 'q': foundation, 
           'r': foundation, 's': foundation,
           't': donationamount}"
"class datasetid(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Dataset ID'
        self.valid_values = 'Dataset ID can only take the values 1, 2, and 3'
        self.format = 'Dataset ID should be represented as an integer'
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val)

class fbaccount(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)
        
class fbbid(NumericSemanticType):
    def __init__(self):
        self.description = 'Facebook bid amount'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Facebook bid amount should be formatted as a floating point number'
        self.examples = [10.0, 100.0, 500.0, 50000.0]
    def cast(self, val):
        return float(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'Gender'
        self.valid_values = 'Gender can only take the values 1 and 2'
        self.format = 'Gender should be represented as an integer'
        self.examples = [1, 2]
    def cast(self, val):
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = 'Year'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Year should be formatted as a floating point number'
        self.examples = [8.0, 55.0, 65.0, 71.0, 93.0]
    def cast(self, val):
        return float(val)

class noffbaccounts(NumericSemanticType):
    def __init__(self):
        self.description = 'Number of Facebook accounts'
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = 'Number of Facebook accounts should be formatted as a floating point number'
        self.examples = [1.0, 2.0, 13.0]
    def cast(self, val):
        return float(val)
        
MAPPING = {'datasetid': datasetid, 'fbaccount': fbaccount, 'fbbid': fbbid, 'gender': gender, 'year': year, 'noffbaccounts': noffbaccounts}"
"class binaryresponse(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0.0, 1.0]
    def cast(self, val):
        return float(val) if float(val) in self.valid_values else float('nan')

class countryname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country Names""
        self.valid_values = ""Country name should be one of the recognized country names as per the ISO 3166 standard.""
        self.format = ""Country names should be capitalized and in English.""
        self.examples = ['France', 'Austria', 'Germany', 'Czech Republic', 'United Kingdom']
    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val):
            return val
        else:
            return ""Unknown""

MAPPING = {'simpleresponse': binaryresponse, 
           'native': binaryresponse, 
           'country': countryname, 
           'foreigngroup1': binaryresponse,
           'foreigngroup2': binaryresponse,
           'foreigngroup3': binaryresponse}"
"class firmid(NumericSemanticType):
    def __init__(self):
        self.description = ""An unique identifier for a firm""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Firm ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class b3sector(NumericSemanticType):
    def __init__(self):
        self.description = ""A numerical representation of a sector in a 3-level business classification""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Sector should be an integer in the range 1-10""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class assets(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total value of all assets owned by a firm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Assets should be a floating point number""
        self.unit = ""In USD""
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]
    def cast(self, val):
        return round(float(val), 2)

class currentassets(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of all current assets (assets that can be converted to cash within one year) owned by a firm""

class cash(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total amount of cash owned by a firm""

class accountreceivables(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of money owed to a firm by its debtors""

class inventories(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of the inventory owned by a firm""

class properties(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of property owned by a firm""

class intangibleassets(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of non-physical assets (like patents, copyrights, etc.) owned by a firm""

class deferredassets(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of assets that are not yet realized by a firm""

class ppe(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of Property, Plant and Equipment owned by a firm""

class currentliabilities(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total value of all current liabilities (liabilities that are due within one year) of a firm""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Current liabilities should be a floating point number""
        self.unit = ""In USD""
        self.examples = [100000.0, 500000.0, 1000000.0, 5000000.0, 10000000.0]
    def cast(self, val):
        return round(float(val), 2)

class std(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The standard deviation of a set of values""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Standard deviation should be a floating point number""
        self.unit = ""In standard units""
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]
    def cast(self, val):
        return round(float(val), 2)

class noncurrentassets(assets):
    def __init__(self):
        super().__init__()
        self.description = ""The total value of non-current assets (assets that cannot be converted to cash within one year) owned by a firm""

class equity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total equity of a firm""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Equity should be a floating point number""
        self.unit = ""In USD""
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]
    def cast(self, val):
        return round(float(val), 2)

class revenue(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total revenue earned by a firm""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Revenue should be a floating point number""
        self.unit = ""In USD""
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]
    def cast(self, val):
        return round(float(val), 2)

class grossearnings(revenue):
    def __init__(self):
        super().__init__()
        self.description = ""The gross earnings of a firm""

class depreciation(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The total depreciation of a firm's assets""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Depreciation should be a floating point number""
        self.unit = ""In USD""
        self.examples = [100.0, 500.0, 1000.0, 5000.0, 10000.0]
    def cast(self, val):
        return round(float(val), 2)

class netincome(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The net income of a firm""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Net income should be a floating point number""
        self.unit = ""In USD""
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]
    def cast(self, val):
        return round(float(val), 2)

class cfo(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The cash flow from operations of a firm""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Cash flow from operations should be a floating point number""
        self.unit = ""In USD""
        self.examples = [-100000.0, -50000.0, 0.0, 50000.0, 100000.0]
    def cast(self, val):
        return round(float(val), 2)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year of a firm's financial reporting""
        self.valid_range = [2009, 2018]
        self.dtype = int
        self.format = ""Year should be an integer in the range 2009-2018""
        self.examples = [2009, 2010, 2011, 2012, 2013]
    def cast(self, val):
        return int(val)

MAPPING = {
    'firmid': firmid,
    'b3sector': b3sector,
    'assets': assets,
    'currentassets': currentassets,
    'cash': cash,
    'accountreicevables': accountreceivables,
    'inventories': inventories,
    'properties': properties,
    'intangibleassets': intangibleassets,
    'deferredassets': deferredassets,
    'ppe': ppe,
    'currentliabilities': currentliabilities,
    'std': std,
    'noncurrentassets': noncurrentassets,
    'equity': equity,
    'revenue': revenue,
    'grossearnings': grossearnings,
    'depreciation': depreciation,
    'netincome': netincome,
    'cfo': cfo,
    'year': year
}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [1987, 1990, 2000, 2010, 2020]
    def cast(self, val):
        return int(val)

class companyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Company Name""
        self.valid_values = ""Company name should be a string""
        self.format = ""Company name should be capitalized""
        self.examples = ['3M CO', '3M CO INC', 'ILLINOISTOOLWORKS', 'BERKSHIREHATHAWAY', 'EMERSONELECTRIC']
    def cast(self, val):
        return str(val).upper()

class companyid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique Company Identifier""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Company ID should be an integer""
        self.examples = [3, 3002, 6077, 8972, 12138]
    def cast(self, val):
        return int(val)

class fixedscore(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [1]
    def cast(self, val):
        if val == 1:
            return True
        else:
            return False

class gvkey(NumericSemanticType):
    def __init__(self):
        self.description = ""Global Company Key (GVKEY)""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""GVKEY should be an integer""
        self.examples = [1004, 5492, 10115, 25124, 315318]
    def cast(self, val):
        return int(val)

MAPPING = {'year': year, 
           'parentname': companyname, 
           'cmpy': companyname, 
           'newid': companyid, 
           'ucmpy': companyname, 
           'score': fixedscore, 
           'gvkey': gvkey}"
"class railwaycompanyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of Railway Company""
        self.valid_values = ""Name should be a string that is of the form 'company name'""
        self.format = ""The company name should be capitalized""
        self.examples = ['Vale', 'Rio Tinto ', 'Arcelor Mittal', 'BHP', 'FMG']
    def cast(self, val):
        return str(val).title()

class railwayname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of Railway""
        self.valid_values = ""Name should be a string that is of the form 'railway name'""
        self.format = ""The railway name should be capitalized""
        self.examples = ['EFVM', 'EFC', 'NEWM', 'RTRR', 'RTHA']
    def cast(self, val):
        return str(val).upper()

class distance(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The distance in kilometers""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Distance should be a floating point number in kilometers""
        self.units = 'In Kilometers' 
        self.examples: list = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Distance cannot be negative')
        return round(num, 3)

class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The weight in tons""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be a floating point number in tons""
        self.units = 'In Tons' 
        self.examples: list = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise ValueError('Weight cannot be negative')
        return round(num, 3)

MAPPING = {'empresa': railwaycompanyname, 'ferrovia': railwayname, 'ext': distance, 'bit': weight, 'vag': weight, 'loc': weight, 'ttp': distance, 'cge': weight, 'tar': weight, 'clt': weight, 'nut': weight, 'tku': weight}"
"class yearmonth(NumericSemanticType):
    def __init__(self):
        self.description = ""Year and month represented as a float""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Year and month should be represented as a 4 digit year followed by a '.' and a 2 digit month (e.g. 2012.03 for March 2012)""
        self.examples = [2012.03, 2012.04, 2012.05, 2012.06, 2012.07]
    def cast(self, val):
        year, month = divmod(float(val), 1)
        month = round(month * 100)
        if month < 1 or month > 12:
            raise ValueError(""Invalid month: {}"".format(month))
        return float('{}.{}'.format(int(year), int(month)))

class vehiclecount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of vehicles""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The number of vehicles should be an integer""
        self.examples = [300512.0, 257849.0, 287481.0, 353169.0, 364174.0]
    def cast(self, val):
        if float(val) < 0:
            raise ValueError(""Number of vehicles cannot be negative"")
        return float(int(val))

class usdollar(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""US dollar exchange rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Exchange rate should be represented as a float""
        self.unit = ""USD""
        self.examples = [1.8215, 1.8912, 2.0217, 2.0207, 2.0494]
    def cast(self, val):
        if float(val) < 0:
            raise ValueError(""Exchange rate cannot be negative"")
        return float(val)

class indexvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""Index value""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Index value should be represented as a float""
        self.examples = [164.42, 164.99, 163.05, 162.35, 160.56]
    def cast(self, val):
        if float(val) < 0:
            raise ValueError(""Index value cannot be negative"")
        return float(val)

class timeperiod(NumericSemanticType):
    def __init__(self):
        self.description = ""Time period""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time period should be an integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if float(val) < 0:
            raise ValueError(""Time period cannot be negative"")
        return float(int(val))

MAPPING = {
    'data': yearmonth,
    'veic': vehiclecount,
    'pgas': usdollar,
    'usd': usdollar,
    'rme': vehiclecount,
    'po': vehiclecount,
    'icc': indexvalue,
    'icea': indexvalue,
    'iec': indexvalue,
    'rel': vehiclecount,
    'cpf': vehiclecount,
    't': timeperiod
}"
"class groups(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Groups""
        self.valid_values = ""Groups can take values from 1 to 3""
        self.format = ""Groups are integers ranging from 1 to 3""
        self.examples = ['1', '2', '3']
    def cast(self, val):
        int_val = int(val)
        if int_val in [1, 2, 3]:
            return int_val
        else:
            raise Exception('Invalid group value')

class sentiment(NumericSemanticType):
    def __init__(self):
        self.description = ""Sentiment score""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Sentiment score should be a float between 1 and 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        float_val = float(val)
        if float_val >= 1 and float_val <= 5:
            return round(float_val, 1)
        else:
            raise Exception('Invalid sentiment score')

class network(NumericSemanticType):
    def __init__(self):
        self.description = ""Networking score""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Networking score should be a float between 1 and 5""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        float_val = float(val)
        if float_val >= 1 and float_val <= 5:
            return round(float_val, 1)
        else:
            raise Exception('Invalid networking score')

class sum_score(NumericSemanticType):
    def __init__(self):
        self.description = ""Sum of scores""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Sum of scores should be a float""
        self.examples = [9.0, 12.0, 16.0, 8.0, 10.0]
    def cast(self, val):
        float_val = float(val)
        if float_val >= 0:
            return round(float_val, 1)
        else:
            raise Exception('Invalid sum of scores')

MAPPING = {'groups': groups, 
           'sent1': sentiment, 
           'sent2': sentiment, 
           'sent3': sentiment, 
           'netw1': network, 
           'netw2': network, 
           'netw3': network, 
           'netw4': network, 
           'netw5': network, 
           'mo1': sentiment, 
           'mo2': sentiment, 
           'mo3': sentiment, 
           'mo4': sentiment, 
           'seff1': sentiment, 
           'seff2': sentiment, 
           'seff3': sentiment, 
           'emp1': sentiment, 
           'emp2': sentiment, 
           'emp3': sentiment, 
           'pss1': sentiment, 
           'pss2': sentiment, 
           'pss3': sentiment, 
           'sumsent': sum_score, 
           'sumnetw': sum_score, 
           'sumpss': sum_score, 
           'summo': sum_score, 
           'sumemp': sum_score}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each row""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""ID should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class declined(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class valueclient(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Value that the client brings to the business""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [16800.0, 10584.0, 15456.0, 5000.0, 30000.0]
    def cast(self, val):
        return round(float(val), 2)

class extracost(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Extra costs incurred""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [0.0, 50.0, 100.0, 200.0, 500.0]
    def cast(self, val):
        return round(float(val), 2)

class valueresources(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Value of resources used""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [5000.0, 7896.0, 10080.0, 20000.0, 50000.0]
    def cast(self, val):
        return round(float(val), 2)

class net(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Net value""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Value should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [0.0, 715.008, 2096.174, -34755.84, 25669.728]
    def cast(self, val):
        return round(float(val), 2)

class processduration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Duration of the process""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Duration should be an integer""
        self.unit = ""In days""
        self.examples = [0, 6, 21, 100, 405]
    def cast(self, val):
        return int(val)

class daysoncontact(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on contact""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 5, 10, 15, 11]
    def cast(self, val):
        return int(val)

class daysoninterview(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on interview""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 2, 4, 6, 8]
    def cast(self, val):
        return int(val)

class daysonsendcv(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on sending CV""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 5, 10, 15, 19]
    def cast(self, val):
        return int(val)

class daysonreturn(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on return""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 15, 30, 45, 75]
    def cast(self, val):
        return int(val)

class daysoncschedule(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on schedule""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 10, 20, 30, 71]
    def cast(self, val):
        return int(val)

class daysoncrealized(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on realization""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 10, 20, 30, 74]
    def cast(self, val):
        return int(val)

class daysonapproved(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on approval""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 100, 200, 300, 1617]
    def cast(self, val):
        return int(val)

class daysonclosed(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Number of days on closure""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of days should be an integer""
        self.unit = ""In days""
        self.examples = [0, 100, 200, 300, 1659]
    def cast(self, val):
        return int(val)
        
MAPPING = {
    'id': id,
    'declined': declined,
    'valueclient': valueclient,
    'extracost': extracost,
    'valueresources': valueresources,
    'net': net,
    'processduration': processduration,
    'daysoncontact': daysoncontact,
    'daysoninterview': daysoninterview,
    'daysonsendcv': daysonsendcv,
    'daysonreturn': daysonreturn,
    'daysoncschedule': daysoncschedule,
    'daysoncrealized': daysoncrealized,
    'daysonapproved': daysonapproved,
    'daysonclosed': daysonclosed
}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender must be represented as 1 for Male, and 2 for Female""
        self.format = ""Gender must be stored as integers""
        self.examples = [1, 2]
    def cast(self, val):
        val = int(val)
        if val not in [1, 2]:
            raise ValueError('Invalid gender value')
        return val

class firmsizeemp(NumericSemanticType):
    def __init__(self):
        self.description = ""Size of the firm by employee count""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Firm size should be an integer value in the range [1, 3]""
        self.examples = [1, 2, 3]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 3:
            raise ValueError('Invalid firm size')
        return val

class literacy(NumericSemanticType):
    def __init__(self):
        self.description = ""Literacy level""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Literacy level should be an integer value in the range [1, 4]""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 4:
            raise ValueError('Invalid literacy level')
        return val

class firmsizeprofit(NumericSemanticType):
    def __init__(self):
        self.description = ""Size of the firm by profit""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Firm size should be an integer value in the range [1, 5]""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 5:
            raise ValueError('Invalid firm size')
        return val

class firmage(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of the firm""
        self.valid_range = [2, 4]
        self.dtype = int
        self.format = ""Firm age should be an integer value in the range [2, 4]""
        self.examples = [2, 3, 4]
    def cast(self, val):
        val = int(val)
        if val < 2 or val > 4:
            raise ValueError('Invalid firm age')
        return val

class transaction(NumericSemanticType):
    def __init__(self):
        self.description = ""Transaction level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Transaction level should be an integer value in the range [1, 5]""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 5:
            raise ValueError('Invalid transaction level')
        return val

class eco(NumericSemanticType):
    def __init__(self):
        self.description = ""Economic level""
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = ""Economic level should be an integer value in the range [2, 5]""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < 2 or val > 5:
            raise ValueError('Invalid economic level')
        return val

class survival(NumericSemanticType):
    def __init__(self):
        self.description = ""Survival level""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Survival level should be an integer value in the range [1, 5]""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val < 1 or val > 5:
            raise ValueError('Invalid survival level')
        return val

class sumtransaction(NumericSemanticType):
    def __init__(self):
        self.description = ""Sum of transaction levels""
        self.valid_range = [8, 20]
        self.dtype = int
        self.format = ""Sum of transaction levels should be an integer value in the range [8, 20]""
        self.examples = [8, 10, 12, 15, 20]
    def cast(self, val):
        val = int(val)
        if val < 8 or val > 20:
            raise ValueError('Invalid sum of transaction levels')
        return val

class sumeco(NumericSemanticType):
    def __init__(self):
        self.description = ""Sum of economic levels""
        self.valid_range = [12, 20]
        self.dtype = int
        self.format = ""Sum of economic levels should be an integer value in the range [12, 20]""
        self.examples = [12, 14, 15, 18, 20]
    def cast(self, val):
        val = int(val)
        if val < 12 or val > 20:
            raise ValueError('Invalid sum of economic levels')
        return val

class sumsurv(NumericSemanticType):
    def __init__(self):
        self.description = ""Sum of survival levels""
        self.valid_range = [3, 15]
        self.dtype = int
        self.format = ""Sum of survival levels should be an integer value in the range [3, 15]""
        self.examples = [3, 5, 7, 10, 15]
    def cast(self, val):
        val = int(val)
        if val < 3 or val > 15:
            raise ValueError('Invalid sum of survival levels')
        return val


MAPPING = {
    'gender': gender,
    'firmsizeemp': firmsizeemp,
    'literacy': literacy,
    'firmsizeprofit': firmsizeprofit,
    'firmage': firmage,
    'transac1': transaction,
    'transac4': transaction,
    'transac5': transaction,
    'transac6': transaction,
    'transla2': transaction,
    'transla4': transaction,
    'transla5': transaction,
    'transla6': transaction,
    'eco1': eco,
    'eco2': eco,
    'eco4': eco,
    'eco5': eco,
    'surv1': survival,
    'surv2': survival,
    'surv3': survival,
    'sumtransac': sumtransaction,
    'sumtransla': sumtransaction,
    'sumeco': sumeco,
    'sumsurv': sumsurv
}"
"class businesscategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Business Category of a Firm""
        self.valid_values = ""Business Category should take two values only: 1 and 2""
        self.format = ""Business Category should be represented as integers""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val) if val in self.examples else float('nan')

class respondentgender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the respondent""
        self.valid_values = ""Gender should take two values only: 1 and 2""
        self.format = ""Gender should be represented as integers""
        self.examples = [1, 2]
    def cast(self, val):
        return int(val) if val in self.examples else float('nan')

class employeesize(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Size of the firm in terms of number of employees""
        self.valid_values = ""Employee size should take three values only: 1, 2 and 3""
        self.format = ""Employee size should be represented as integers""
        self.examples = [1, 2, 3]
    def cast(self, val):
        return int(val) if val in self.examples else float('nan')

class respondenteducation(NumericSemanticType):
    def __init__(self):
        self.description = ""Education level of the respondent""
        self.valid_range = [1.0, 4.0]
        self.dtype = float
        self.format = ""Education level should be represented as float""
        self.examples = [1.0, 2.0, 3.0, 4.0]
    def cast(self, val):
        num = float(val)
        return num if self.valid_range[0] <= num <= self.valid_range[1] else float('nan')

class profitlevel(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Profit level of the firm""
        self.valid_values = ""Profit level should take five values only: 1, 2, 3, 4 and 5""
        self.format = ""Profit level should be represented as integers""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val) if val in self.examples else float('nan')

class firmage(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Age of the firm""
        self.valid_values = ""Firm age should take three values only: 2, 3 and 4""
        self.format = ""Firm age should be represented as integers""
        self.examples = [2, 3, 4]
    def cast(self, val):
        return int(val) if val in self.examples else float('nan')

class hedgetc(NumericSemanticType):
    def __init__(self):
        self.description = ""Hedging level of the firm""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Hedging level should be represented as integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        return num if self.valid_range[0] <= num <= self.valid_range[1] else float('nan')

class hedgets(NumericSemanticType):
    def __init__(self):
        self.description = ""Hedging level of the firm""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Hedging level should be represented as integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        return num if self.valid_range[0] <= num <= self.valid_range[1] else float('nan')

class hedgee(NumericSemanticType):
    def __init__(self):
        self.description = ""Hedging level of the firm""
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = ""Hedging level should be represented as integer""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        return num if self.valid_range[0] <= num <= self.valid_range[1] else float('nan')

class firm(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of the firm""
        self.valid_range = [3, 15]
        self.dtype = int
        self.format = ""Firm level should be represented as integer""
        self.examples = [3, 4, 5, 6, 15]
    def cast(self, val):
        num = int(val)
        return num if self.valid_range[0] <= num <= self.valid_range[1] else float('nan')

MAPPING = {'catgfirm': businesscategory,
           'resgend': respondentgender,
           'emplsize': employeesize,
           'reseduc': respondenteducation,
           'profit': profitlevel,
           'agefirm': firmage,
           'hedgetc1': hedgetc, 'hedgetc2': hedgetc, 'hedgetc3': hedgetc, 'hedgetc4': hedgetc,
           'hedgets1': hedgets, 'hedgets2': hedgets, 'hedgets3': hedgets, 'hedgets4': hedgets,
           'hedgee1': hedgee, 'hedgee2': hedgee, 'hedgee3': hedgee, 'hedgee4': hedgee,
           'firm1': firm, 'firm2': firm, 'firm3': firm}"
"class responseid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each response""
        self.valid_values = ""Response ID should be a string""
        self.format = ""Response ID should be a string""
        self.examples = ['R_6W45lMJvb9leVWR', 'R_4Sj2AMAUcAJXmT3', 'R_0iY78w9Ae2yqXzL', 'R_aWTmKr3M6FMONeJ', 'R_8uGm24XgkXLStQV']
    def cast(self, val):
        return str(val)

class binaryoption(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class decision(NumericSemanticType):
    def __init__(self):
        self.description = ""The decision made by the individual""
        self.valid_range = [1, 666]
        self.dtype = int
        self.format = ""Decision values should be an integer""
        self.examples = [7, 2, 6, 6, 5]
    def cast(self, val):
        return int(val)

class stresslevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of stress experienced by the individual""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Stress level should be an integer between 1 and 7""
        self.examples = [5, 6, 7, 6, 7]
    def cast(self, val):
        return int(val)

class verbatim(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Verbatim response""
        self.valid_values = ""The response should be '1', '0' or '?'""
        self.format = ""The response should be a string""
        self.examples = ['1', '0', '?']
    def cast(self, val):
        return str(val)

class gist(NumericSemanticType):
    def __init__(self):
        self.description = ""The gist of the response""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Gist should be an integer, either 0 or 1""
        self.examples = [0, 1]
    def cast(self, val):
        return int(val)

class holism(NumericSemanticType):
    def __init__(self):
        self.description = ""Holism score of the individual""
        self.valid_range = [2.5, 6.9]
        self.dtype = float
        self.format = ""Holism score should be a float between 2.5 and 6.9""
        self.examples = [5.1, 5.8, 5.5, 5.4, 5.4]
    def cast(self, val):
        return float(val)

MAPPING = {'responseid': responseid, 'display': binaryoption, 'verbatimfirst': binaryoption, 'decision': decision,
           'scary': decision, 'scaryrv': decision, 'stress': stresslevel, 'stressrv': stresslevel, 'verbatim1': verbatim,
           'verbatim2': verbatim, 'verbatim3': verbatim, 'verbatim4': verbatim, 'verbtot': decision, 'gist1': gist,
           'gist2': gist, 'gist3': gist, 'gisttot': decision, 'holism1': decision, 'holism2': decision, 'holism3': stresslevel,
           'holism4': stresslevel, 'holism5': decision, 'holism6': decision, 'holism7': decision, 'holism8': stresslevel,
           'holism9': stresslevel, 'holism10': stresslevel, 'holtot': holism, 'strscry': stresslevel, 'strscyrv': stresslevel}"
"class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Id of an entity""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Id must be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid id')
        return num

class birthyear(NumericSemanticType):
    def __init__(self):
        self.description = ""Birth year of a person""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Birth year must be a four digit number""
        self.examples = [1961, 1963, 1949, 1954, 1953]
    def cast(self, val):
        num = int(val)
        if num < 1900 or num > datetime.now().year:
            raise Exception('Invalid birth year')
        return num

class assetsusd(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The value of assets in USD""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Asset value should be formatted as a floating point number (in USD units) with two decimal places for cents""
        self.unit = 'In USD' 
        self.examples = [15.0, 160.0, 600.0, 1900.0, 24400.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class gender(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        num = int(val)
        if num not in self.valid_values:
            raise Exception('Invalid gender value')
        return num

class countrycode(NumericSemanticType):
    def __init__(self):
        self.description = ""Country code according to ISO 3166-1 numeric""
        self.valid_range = [1, 999]
        self.dtype = int
        self.format = ""Country code must be a positive integer less than or equal to 999""
        self.examples = [4, 9, 11, 15, 1]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 999:
            raise Exception('Invalid country code')
        return num

class region(NumericSemanticType):
    def __init__(self):
        self.description = ""Region code""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Region code must be a positive integer from 1 to 5""
        self.examples = [3, 2, 1, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 5:
            raise Exception('Invalid region code')
        return num

class log10assets(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithm of asset value base 10""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Logarithm value must be a positive floating point number""
        self.examples = [1.1760912590556811, 2.204, 2.778, 3.279, 4.491361693834273]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid log10assets value')
        return num


MAPPING = {'id': id, 'age': birthyear, 'assetsvalue': assetsusd, 'gender': gender, 
           'countrycode': countrycode, 'region': region, 'log10assets': log10assets}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Represents gender of an individual""
        self.valid_values = ""Gender can only take the values 1 or 2""
        self.format = ""Gender should be represented as a integer, 1 for male and 2 for female""
        self.examples = [1, 2]
    def cast(self, val):
        if val in [1, 2]:
            return int(val)
        else:
            raise Exception('Invalid gender value')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents age of an individual""
        self.valid_range = [0, 150]
        self.dtype = int
        self.format = ""Age is represented as an integer""
        self.examples = [36, 28, 25, 32, 27]
    def cast(self, val):
        if 0 <= val <= 150:
            return int(val)
        else:
            raise Exception('Invalid age value')

class opinionleadership(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents the opinion leadership score for an individual""
        self.valid_range = [1, 7]
        self.dtype = int
        self.format = ""Opinion Leadership is represented as an integer ranging from 1 to 7""
        self.examples = [1, 2, 3, 4, 5, 6, 7]
    def cast(self, val):
        if 1 <= val <= 7:
            return int(val)
        else:
            raise Exception('Invalid Opinion Leadership value')
            
class quantitypurchased(NumericSemanticType):
    def __init__(self):
        self.description = ""Represents the quantity of a product purchased by an individual""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Quantity Purchased is represented as an integer""
        self.examples = [0, 1, 2, 3, 15]
    def cast(self, val):
        if 0 <= val:
            return int(val)
        else:
            raise Exception('Invalid Quantity Purchased value')

MAPPING = {'sex': gender, 'age': age, 'ol1': opinionleadership, 'ol2': opinionleadership, 'ol3': opinionleadership, 
           'ol4': opinionleadership, 'ol5': opinionleadership, 'ol6': opinionleadership, 'po1': opinionleadership,
           'po2': opinionleadership, 'po3': opinionleadership, 'po4': opinionleadership, 'po5': opinionleadership, 
           'po6': opinionleadership, 'pu1': opinionleadership, 'pu2': opinionleadership, 'pu3': opinionleadership,
           'pqun': quantitypurchased, 'pqual': opinionleadership, 'pi1': opinionleadership, 'pi2': opinionleadership,
           'pi3': opinionleadership, 'pi4': opinionleadership, 'pl1': opinionleadership, 'pl2': opinionleadership,
           'pl3': opinionleadership, 'pl4': opinionleadership, 'pbqun': quantitypurchased}"
"class companyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Company Name""
        self.valid_values = ""Company name should be a string""
        self.format = ""Company names should be capitalized""
        self.examples = ['AFRICAN MEDIA', 'HULAMIN', 'VERIMARK', 'ARGENT', 'ASPEN']
    def cast(self, val):
        return str(val).title()

class firmid(NumericSemanticType):
    def __init__(self):
        self.description = ""Firm ID Number""
        self.valid_range = [1, 50]
        self.dtype = int
        self.format = ""Firm ID should be an integer between 1 and 50""
        self.examples = [1, 13, 25, 38, 50]
    def cast(self, val):
        num = int(val)
        if num < 1 or num > 50:
            raise ValueError(""Invalid firm ID"")
        else:
            return num

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [2010, 2017]
        self.dtype = int
        self.format = ""Year should be an integer between 2010 and 2017""
        self.examples = [2010, 2011, 2012, 2013, 2014]
    def cast(self, val):
        num = int(val)
        if num < 2010 or num > 2017:
            raise ValueError(""Invalid year"")
        else:
            return num

class marketcapital(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Market Capital""
        self.valid_range = [18900000.0, float('inf')]
        self.dtype = float
        self.format = ""Market Capital should be a floating point number""
        self.unit = 'In USD'
        self.examples = [293352000.0, 409830000.0, 430976000.0, 578088000.0, 703545000.0]
    def cast(self, val):
        return float(val)

class shareprice(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Share Price""
        self.valid_range = [0.03, float('inf')]
        self.dtype = float
        self.format = ""Share Price should be a floating point number""
        self.unit = 'In USD'
        self.examples = [34.0, 47.5, 52.0, 69.75, 85.0]
    def cast(self, val):
        return float(val)

MAPPING = {
    'company': companyname,
    'firm': firmid,
    'year': year,
    'mktcap': marketcapital,
    'sharepr': shareprice
}"
"class studycode(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The unique code representing a study""
        self.valid_values = ""The study code should be a combination of two-letter country codes and two-letter abbreviations""
        self.format = ""Study codes should be uppercase strings""
        self.examples = ['NO_TO', 'UK_CA', 'US_BO', 'DE_FR', 'FR_PA']
    def cast(self, val):
        return str(val).upper()

class valuecount(NumericSemanticType):
    def __init__(self):
        self.description = ""The count of a value in a study""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value counts should be non-negative floating point numbers""
        self.examples = [22.0, 49.0, 146.0, 31.0, 57.0]
    def cast(self, val):
        return float(val) if val >= 0 else float('nan')

class studydetails(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Detailed description of a study""
        self.valid_values = ""The details should be a string containing the name of the study, the year, and the field""
        self.format = ""Study details should be strings with the format 'Name; Year; Field'""
        self.examples = ['Besada; 2013 and 2014; Rheumatology', 'Alberici; 2014; Rheumatology', 'Pendergraft; 2014; Clin J Am Soc Nephrol', 'Venhoff;2014; Autoimmunity', 'Calich; 2014; Autoimmunity']
    def cast(self, val):
        details = str(val).split("";"")
        if len(details) != 3:
            return float('nan')
        else:
            return "";"".join([details[0].strip(), details[1].strip(), details[2].strip()])

MAPPING = {'study': studycode, 'si': valuecount, 'nosi': valuecount, 'hypog': valuecount, 'nohypog': valuecount, 'details': studydetails}"
"class companyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a company""
        self.valid_values = ""Name should be a string representing the name of a company""
        self.format = ""Company name should be capitalized""
        self.examples = ['AFDIS', 'AFRICAN SUN', 'ARISTON', 'ART CORP', 'BORDER TIM. ']
    def cast(self, val):
        return str(val).upper()

class firmid(NumericSemanticType):
    def __init__(self):
        self.description = ""Identifier for a firm""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Firm id should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be represented as a 4-digit number""
        self.examples = [2010, 2011, 2012, 2013, 2014]
    def cast(self, val):
        return int(val)

class marketcapitalization(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Market Capitalization of a company""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Market Capitalization should be represented as a float""
        self.unit = ""In USD""
        self.examples = [13307539.0, 12852519.75, 18088731.5, 30465232.0, 37303933.04]
    def cast(self, val):
        return float(val)

class shareprice(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Price of a share""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Share price should be represented as a float""
        self.unit = ""In USD""
        self.examples = [0.14, 0.135, 0.19, 0.32, 0.335]
    def cast(self, val):
        return float(val)

class profitlossindicator(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

MAPPING = {
    'company': companyname, 
    'firm': firmid, 
    'year': year, 
    'mktcap': marketcapitalization, 
    'sharepr': shareprice, 
    'pl': profitlossindicator
}"
"
class group(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid group')
class frequency(NumericSemanticType):
    def __init__(self):
        self.description = ""Frequency""
        self.valid_range = [0, 5]
        self.dtype = int
        self.format = ""Frequency should be an integer between 0 and 5""
        self.examples = [0, 1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num in range(6):
            return num
        else:
            raise Exception('Invalid frequency')
class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val in self.valid_values:
            return val
        else:
            raise Exception('Invalid sex')
class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Age should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num in range(1, 5):
            return num
        else:
            raise Exception('Invalid age')
class income(NumericSemanticType):
    def __init__(self):
        self.description = ""Income""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Income should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num in range(1, 6):
            return num
        else:
            raise Exception('Invalid income')
class ccc(NumericSemanticType):
    def __init__(self):
        self.description = ""Ccc""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Ccc should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num in range(1, 6):
            return num
        else:
            raise Exception('Invalid ccc')
class position(NumericSemanticType):
    def __init__(self):
        self.description = ""Position""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Position should be an integer between 1 and 3""
        self.examples = [1, 2, 3]
    def cast(self, val):
        num = int(val)
        if num in range(1, 4):
            return num
        else:
            raise Exception('Invalid position')

MAPPING = {
    'grupos': group,
    'freq1': frequency,
    'freq2': frequency,
    'sex': sex,
    'idade': age,
    'renda': income,
    'ccc1': ccc,
    'ccc2': ccc,
    'ccc3': ccc,
    'ccc4': ccc,
    'ccc5': ccc,
    'ccc6': ccc,
    'ccc7': ccc,
    'ccc8': ccc,
    'ccc9': ccc,
    'pos': position
}
"
"class participantgroup(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Participant Group""
        self.valid_values = ""The valid values for Participant Group are 1.0 and 2.0""
        self.format = ""Participant Group can only be 1.0 or 2.0""
        self.examples = ['1.0', '2.0']
    def cast(self, val):
        if val == '1.0' or val == '2.0':
            return str(val)
        else:
            raise Exception('Invalid participantgroup')

class gender(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender can be masculine, feminine or not specified""
        self.format = ""Gender should be either 'masculino', 'feminino', or ' ' for not specified""
        self.examples = ['masculino', 'feminino', ' ']
    def cast(self, val):
        if val in ['masculino', 'feminino', ' ']:
            return str(val)
        else:
            raise Exception('Invalid gender')

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person in the year 2016""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Age should be a floating point number""
        self.examples: list = [18.0, 25.0, 28.0, 34.0, 50.0]
    def cast(self, val):
        try:
            num = float(val)
            if num < 0:
                raise Exception('Invalid age')
            return num
        except ValueError:
            raise Exception('Invalid age')

class cityofbirth(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City of Birth""
        self.valid_values = ""The city of birth should be a valid city name""
        self.format = ""The city of birth should be a string""
        self.examples = ['São Paulo', 'Santos', 'Curitiba', 'Rio de Janeiro', 'Sao Paulo']
    def cast(self, val):
        return str(val).title()

class stateofbirth(CategoricalSemanticType):
    def __init__(self):
        self.description = ""State of Birth""
        self.valid_values = ""The state of birth should be a valid state name""
        self.format = ""The state of birth should be a string""
        self.examples = ['São Paulo', 'Rio de Janeiro', 'Minas Gerais', 'Rio Grande do Sul', 'Paraná']
    def cast(self, val):
        return str(val).title()

class completededucationlevel(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Completed Education Level""
        self.valid_values = ""The completed education level should be a valid education level""
        self.format = ""The completed education level should be a string""
        self.examples = ['Universitário incompleto', 'Ensino Médio', 'Universitário Completo', 'Pós-graduação', 'Mestrado']
    def cast(self, val):
        return str(val).title()

class maritalstatus(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Marital Status""
        self.valid_values = ""The marital status should be a valid marital status""
        self.format = ""The marital status should be a string""
        self.examples = ['Solteiro(a)', 'Casado(a)', 'Separado(a)', 'Viúvo(a)', ' ']
    def cast(self, val):
        return str(val).title()

class sportpracticed(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sport Practiced""
        self.valid_values = ""The sport practiced should be a valid sport""
        self.format = ""The sport practiced should be a string""
        self.examples = ['Voleibol', ' ']
    def cast(self, val):
        return str(val).title()

class sportpracticestatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['sim', 'não']
    def cast(self, val):
        if val in ['sim', 'não']:
            return str(val)
        else:
            raise Exception('Invalid sportpracticestatus')

class professionalizedstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['sim', ' ']
    def cast(self, val):
        if val in ['sim', ' ']:
            return str(val)
        else:
            raise Exception('Invalid professionalizedstatus')

class stoppedcompetingstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['sim', 'não', ' ']
    def cast(self, val):
        if val in ['sim', 'não', ' ']:
            return str(val)
        else:
            raise Exception('Invalid stoppedcompetingstatus')

class firstforeignclubcountry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country of the first foreign club that the player played for""
        self.valid_values = ""The country should be a valid country""
        self.format = ""The country should be a string""
        self.examples = ['Portugal', 'Espanha', 'Suíça', 'libano', 'USA']
    def cast(self, val):
        return str(val).title()

class transferreason(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Reason for player transfer""
        self.valid_values = ""The reason for player transfer should be a valid reason""
        self.format = ""The reason for player transfer should be a string""
        self.examples = ['Estava sem clube e fui contratado', 'Comprado', 'Estudo', 'Empréstimo', 'Proposta interessante']
    def cast(self, val):
        return str(val).title()

class currentclubcountry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country of the current club that the player plays for""
        self.valid_values = ""The country should be a valid country""
        self.format = ""The country should be a string""
        self.examples = ['Portugal', 'Líbano', 'França', 'USA', 'Belgica']
    def cast(self, val):
        return str(val).title()

class transferfeeling(NumericSemanticType):
    def __init__(self):
        self.description = ""Feeling about transfer""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Feeling about transfer should be a floating point number between 1 and 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < 1 or num > 5:
            raise Exception('Invalid transferfeeling')
        return num

MAPPING = {'grupodoparticipante': participantgroup, 'sexo': gender, 'idadeem2016': age, 'cidadedenascimento': cityofbirth, 'estadodenascimento': stateofbirth, 
           'escolaridadecompleta': completededucationlevel, 'estadocivil': maritalstatus, 'esportequepraticaoupraticava': sportpracticed, 
           'treinaatualmenteesteesporte': sportpracticestatus, 'jseprofissionalizou': professionalizedstatus, 'paroudedisputarcampeonatos': stoppedcompetingstatus, 
           'dequalpasoprimeiroclubequedefendeuforadobrasil': firstforeignclubcountry, 'emsuaprimeiratransfernciavocfoiporqualmotivo': transferreason, 
           'esteclubedequalpas': currentclubcountry, '10sentimuitomedoemminhatransfernciaparaonovoclube': transferfeeling}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of an individual""
        self.valid_values = ""Acceptable values are 'Male' and 'Female'""
        self.format = ""Gender should be represented as a string with the first letter capitalized""
        self.examples = ['Male', 'Female']
    def cast(self, val):
        if val.lower() in ['male', 'female']:
            return val.capitalize()
        else:
            raise Exception('Invalid gender value')

class opinion(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Opinion related to a statement""
        self.valid_values = ""Acceptable values are 'Strongly Agree', 'Agree', 'No View', 'Disagree', 'Strongly Disagree'""
        self.format = ""Opinion should be represented as a string with the first letter of each word capitalized""
        self.examples = ['Strongly Agree', 'Agree', 'No View', 'Disagree', 'Strongly Disagree']
    def cast(self, val):
        if val.lower() in ['strongly agree', 'agree', 'no view', 'disagree', 'strongly disagree']:
            return val.title()
        else:
            raise Exception('Invalid opinion value')

MAPPING = {
    'gender': gender,
    'smesisbackboneofnigeriabusiness': opinion,
    'lockdownshocktosmesowner': opinion,
    'doyouofferonlineorder': opinion,
    'suspendbusinessasaresultofcovid19': opinion,
    'businessesarefacingchallenge': opinion,
    'supportforsmesincreaseasaresultofcovid19': opinion,
    'lockdownhadnegativeeffectonsmesbusiness': opinion,
    'covid19pandemicandlockdownincrease': opinion,
    'priceofgoodshavegoneupasaresultofcovid19': opinion,
    'businesshadchangeasaresultofcovid19': opinion,
    'financeschemeencouragecustomerpatronage': opinion,
    'covid19resultinhighcostofsales': opinion
}"
"
class binaryvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A binary value that can either be 1 or 2""
        self.valid_range = [1, 2]
        self.dtype = int
        self.format = ""Binary value should be an integer of either 1 or 2""
        self.examples = [1, 2, 1, 2, 1]
    def cast(self, val):
        if val in self.valid_range:
            return int(val)
        else:
            raise Exception('Invalid binary value')

class ordinalvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""An ordinal value that ranges from 2 to 4""
        self.valid_range = [2, 4]
        self.dtype = int
        self.format = ""Ordinal value should be an integer between 2 and 4""
        self.examples = [2, 3, 4, 3, 2]
    def cast(self, val):
        if val in self.valid_range:
            return int(val)
        else:
            raise Exception('Invalid ordinal value')
            
class floatingpointvalue(NumericSemanticType):
    def __init__(self):
        self.description = ""A floating point value""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Floating point values should be formatted as a floating point number with up to nine decimal places""
        self.examples = [0.697081298, 2.841257652, 1.217888679, 0.864633434, 0.684342433]
    def cast(self, val):
        num = float(val)
        if num >= self.valid_range[0] and num <= self.valid_range[1]:
            return round(num, 9)
        else:
            raise Exception('Invalid floating point value')

MAPPING = {'var1': binaryvalue, 'var2': ordinalvalue, 'var3': floatingpointvalue}
"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year in Gregorian calendar""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples = [1892, 1910, 1913, 1917, 1921]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class peoplecategory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Category of people""
        self.valid_values = ""Any string value describing the category of people""
        self.format = ""Should be a string""
        self.examples = ['Public charges from following causes existing prior to entry within 3yrs.', 'Likely to become a public charge', 'Entered without inspection', 'Prostitutes', '(1yr.) Returned within of landing']
    def cast(self, val):
        return str(val)

class nationalityracialcategory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Nationality and racial category""
        self.valid_values = ""Any string value describing the nationality or racial category""
        self.format = ""Should be a string""
        self.examples = ['English', 'Mexican', '(Southern) Italian', 'French', 'Irish']
    def cast(self, val):
        return str(val)

class countryisoalpha(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""ISO alpha country codes""
        self.valid_values = ""Valid 3-letter ISO 3166-1 alpha-3 codes""
        self.format = ""Should be a 3-letter string""
        self.examples = ['GBR', 'POL', 'ITA', 'MEX', 'FRA']
    def cast(self, val):
        if val in [country.alpha_3 for country in pycountry.countries]:
            return val
        else:
            return ""Invalid ISO alpha code""

class location(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude and Latitude""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Should be a decimal number""
        self.examples = [39.794, 5.239, 13.6916351, 40.645, 40.697]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return round(float(val), 6)
        
class numberofpeople(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of people""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be a positive integer""
        self.examples = [1, 3, 9, 14, 825]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

MAPPING = {'year': year, 'categoryofpeople': peoplecategory, 'nationalandracialcategories': nationalityracialcategory, 'natandracisoalpha': countryisoalpha, 'deportedfromlat': location, 'deportedfromlong': location, 'numberofpeople': numberofpeople}"
"class universityexperience(NumericSemanticType):
    def __init__(self):
        self.description = ""Years of experience in a university setting""
        self.valid_range = [1, 120]
        self.dtype = int
        self.format = ""Experience should be a whole number with no decimal places""
        self.examples = [1, 27, 53, 84, 120]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        if val < 1 or val > 120:
            raise Exception('Invalid experience value')
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""A gender must be either 1 (male) or 2 (female)""
        self.format = ""Gender should be represented as 1 for Male and 2 for Female""
        self.examples = [1, 2]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        if val != 1 and val != 2:
            raise Exception('Invalid gender value')
        return int(val)

class satisfactionlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of satisfaction on a scale from 1 to 5""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Satisfaction level should be an integer between 1 (least satisfied) and 5 (most satisfied)""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if np.isnan(val):
            return float('nan')
        if val < 1 or val > 5:
            raise Exception('Invalid satisfaction value')
        return int(val)

MAPPING = {
    'unibackexp': universityexperience, 
    'gender': gender, 
    'hsgs1': satisfactionlevel, 
    'hsgs2': satisfactionlevel, 
    'hsgs3': satisfactionlevel, 
    'hsgs4': satisfactionlevel, 
    'be1': satisfactionlevel, 
    'be3': satisfactionlevel, 
    'be4': satisfactionlevel, 
    'ccb2': satisfactionlevel, 
    'ccb3': satisfactionlevel, 
    'ccb4': satisfactionlevel, 
    'ccb7': satisfactionlevel, 
    'js2': satisfactionlevel, 
    'js3': satisfactionlevel, 
    'js4': satisfactionlevel, 
    'js9': satisfactionlevel, 
    'js10': satisfactionlevel
}"
"class group(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Groups related to written languaging and second language learning""
        self.valid_values = ""Values range from 1 to 2, where 1: +WL group and 2: -WL group""
        self.format = ""Single digit integers stored as strings""
        self.examples = ['1', '2']
    def cast(self, val):
        if val in ['1', '2']:
            return val
        else:
            raise Exception('Invalid group')

class id(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for an entry""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Positive integers""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num > 0 and num.is_integer():
            return num
        else:
            raise Exception('Invalid id')

class score(NumericSemanticType):
    def __init__(self):
        self.description = ""Score related to written languaging and second language learning""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Non-negative numbers""
        self.examples = [17.0, 14.0, 15.0, 18.0, 15.0]
    def cast(self, val):
        num = float(val)
        if num >= 0:
            return num
        else:
            raise Exception('Invalid score')
        
MAPPING = {'group': group, 'id': id, 'mlat': score, 'labj': score, 'llama': score, 'oc1': score, 'pc1': score, 'prd1': score, 'rcg1': score,
           'oc2': score, 'ocg1': score, 'pc2': score, 'pcg1': score, 'prd2': score, 'prdg1': score, 'rcg2': score, 'rcgg1': score, 'pc3': score,
           'pcg2': score, 'oc3': score, 'ocg2': score, 'prd3': score, 'prdg2': score, 'rcg3': score, 'rcgg2': score}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit number""
        self.examples = [2005, 2006, 2007, 2008, 2009]
    def cast(self, val):
        return int(val)

class fips(NumericSemanticType):
    def __init__(self):
        self.description = ""Federal Information Processing Standards code""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""FIPS should be formatted as a five digit number""
        self.examples = [51001, 51001, 51001, 51001, 51001]
    def cast(self, val):
        return int(val)

class nomrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Nominal Rate""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Nominal rate should be formatted as a floating point number""
        self.examples = [0.64, 0.69, 0.69, 0.34, 0.41]
    def cast(self, val):
        return float(val)

class stress(NumericSemanticType):
    def __init__(self):
        self.description = ""Stress Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Stress level should be formatted as a floating point number""
        self.examples = [100.11, 100.94, 100.37, 100.73, 100.19]
    def cast(self, val):
        return float(val)

class nosc2(NumericSemanticType):
    def __init__(self):
        self.description = ""NOSC2 Code""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""NOSC2 should be formatted as a floating point number""
        self.examples = [711.0, 683.0, 417.0, 326.0, 264.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class income(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Income Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Income should be formatted as a floating point number""
        self.unit = ""In USD"" 
        self.examples = [32.837, 37.235, 36.616, 37.564, 36.512]
    def cast(self, val):
        return float(val)

class ri2(NumericSemanticType):
    def __init__(self):
        self.description = ""RI2 Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RI2 should be formatted as a floating point number""
        self.examples = [106.0, 106.0, 101.0, 114.0, 113.0]
    def cast(self, val):
        return float(val)

class bizshare(NumericSemanticType):
    def __init__(self):
        self.description = ""Business Share Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Business share should be formatted as a floating point number""
        self.examples = [0.021012416, 0.03264095, 0.03255814, 0.024229076, 0.017902814]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class homogen(NumericSemanticType):
    def __init__(self):
        self.description = ""Homogeneity Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Homogeneity should be formatted as a floating point number""
        self.examples = [0.5555663, 0.55650103, 0.5563708, 0.5558739, 0.55955136]
    def cast(self, val):
        return float(val)

class share65(NumericSemanticType):
    def __init__(self):
        self.description = ""Share 65 Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Share 65 should be formatted as a floating point number""
        self.examples = [0.17371285, 0.1752671, 0.17926085, 0.18522225, 0.18886727]
    def cast(self, val):
        return float(val)

class pgrowth(NumericSemanticType):
    def __init__(self):
        self.description = ""Population Growth Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Population growth should be formatted as a floating point number""
        self.examples = [-0.013081796, -0.01794335, -0.018157536, -0.01687263, -0.016337946]
    def cast(self, val):
        return float(val)

class cmass(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class cmaint(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class cod2(NumericSemanticType):
    def __init__(self):
        self.description = ""COD2 Level""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""COD2 should be formatted as a floating point number""
        self.examples = [63.16, 55.8, 56.43, 33.12, 36.73]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

MAPPING = {'year': year, 'fips': fips, 'nomrate': nomrate, 'stress': stress, 
           'nosc2': nosc2, 'income': income, 'ri2': ri2, 'bizshare': bizshare, 
           'homogen': homogen, 'share65': share65, 'pgrowth': pgrowth, 
           'cmass': cmass, 'cmaint': cmaint, 'cod2': cod2}"
"# Since there is no column data provided, there is no way to create Semantic Types. Please provide the column data."
"class likertscale(NumericSemanticType):
    def __init__(self):
        self.description = ""Likert scale ratings""
        self.valid_range = [1, 5]
        self.dtype = float
        self.format = ""Likert scale ratings should be integers, ranging from 1 to 5""
        self.examples: list = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        num = float(val)
        if num < 1.0 or num > 5.0:
            raise Exception('Invalid Likert scale rating')
        return round(num)

MAPPING = {'lt1': likertscale, 'lt2': likertscale, 'lt5': likertscale, 'lt6': likertscale, 'selfo2': likertscale, 'selfo3': likertscale, 'selfo4': likertscale, 'uop1': likertscale, 'uop3': likertscale, 'uop4': likertscale}"
"class sheet(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sheet names in the dataset""
        self.valid_values = ""Valid sheet names include: 'System', 'Assemblages', 'Assemblage Groups', 'Bead Periods', 'All'""
        self.format = ""Sheet names are strings and capitalized""
        self.examples = ['System', 'Assemblages', 'Assemblage Groups', 'Bead Periods', 'All']
    def cast(self, val):
        return str(val).title()

class field(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Field names in the dataset""
        self.valid_values = ""Valid field names include: 'Variant', 'All', 'Color', 'Decoration', 'Description'""
        self.format = ""Field names are strings and capitalized""
        self.examples = ['Variant', 'All', 'Color', 'Decoration', 'Description']
    def cast(self, val):
        return str(val).title()

class entry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Entry values in the dataset""
        self.valid_values = ""Entry values can be numeric or alphanumeric""
        self.format = ""Entry values are strings""
        self.examples = ['All', '213', '501-951', '971-980', '978 (976)']
    def cast(self, val):
        return str(val)

MAPPING = {'sheet': sheet, 'field': field, 'entry': entry}"
"class agegroup(NumericSemanticType):
    def __init__(self):
        self.description = ""Age group""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Age group should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 1 and val <= 5:
            return val
        else:
            raise Exception('Invalid age group')

class tenure(NumericSemanticType):
    def __init__(self):
        self.description = ""Tenure""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Tenure should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        val = int(val)
        if val >= 1 and val <= 4:
            return val
        else:
            raise Exception('Invalid tenure')

class valuecreation(NumericSemanticType):
    def __init__(self):
        self.description = ""Value creation""
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = ""Value creation should be an integer between 2 and 5""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 2 and val <= 5:
            return val
        else:
            raise Exception('Invalid value creation')

class conceptualskills(NumericSemanticType):
    def __init__(self):
        self.description = ""Conceptual skills""
        self.valid_range = [2, 5]
        self.dtype = int
        self.format = ""Conceptual skills should be an integer between 2 and 5""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 2 and val <= 5:
            return val
        else:
            raise Exception('Invalid conceptual skills')

class jobsatisfaction(NumericSemanticType):
    def __init__(self):
        self.description = ""Job satisfaction""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Job satisfaction should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 1 and val <= 5:
            return val
        else:
            raise Exception('Invalid job satisfaction')

class workmotivation(NumericSemanticType):
    def __init__(self):
        self.description = ""Work motivation""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Work motivation should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        val = int(val)
        if val >= 1 and val <= 5:
            return val
        else:
            raise Exception('Invalid work motivation')

MAPPING = {
    'ageg': agegroup, 
    'ctenure': tenure, 
    'cvc1': valuecreation, 
    'cvc2': valuecreation, 
    'cvc3': valuecreation, 
    'cvc4': valuecreation, 
    'cs1': conceptualskills, 
    'cs2': conceptualskills, 
    'cs3': conceptualskills, 
    'cs4': conceptualskills, 
    'js2': jobsatisfaction, 
    'js4': jobsatisfaction, 
    'js6': jobsatisfaction, 
    'js8': jobsatisfaction, 
    'js10': jobsatisfaction, 
    'wm1': workmotivation, 
    'wm2': workmotivation, 
    'wm7': workmotivation, 
    'wm8': workmotivation
}"
"class pageorder(NumericSemanticType):
    def __init__(self):
        self.description = 'The order of pages in a book'
        self.valid_range = [1, 320]
        self.dtype = int
        self.format = 'Page order should be an integer'
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class bookside(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['L', 'R']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            raise ValueError('Value must be either L or R')
            
class pageheading(CategoricalSemanticType):
    def __init__(self):
        self.description = 'The heading of a page'
        self.valid_values = 'The heading of a page should be a string'
        self.format = 'Page headings are stored as strings'
        self.examples = ['Negroes sold Mr. Armfield', 'Rock Creek Farm', 'Negroes to be disposed of', 'Negroes to be kept', 'North-West Farm']
    def cast(self, val):
        return str(val)

class number(NumericSemanticType):
    def __init__(self):
        self.description = 'A numerical value'
        self.valid_range = [1, 165]
        self.dtype = float
        self.format = 'Numbers should be in decimal format'
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)
        
class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = 'The name of a person'
        self.valid_values = 'The name of a person should be a string'
        self.format = 'Names are stored as strings'
        self.examples = ['Henry', 'William', 'Christy', 'John', 'David']
    def cast(self, val):
        return str(val).title()

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'The gender of a person'
        self.valid_values = 'Gender can be Male (M), Female (F), or Unknown (U)'
        self.format = 'Gender is stored as a single character string'
        self.examples = ['M', 'F', 'U']
    def cast(self, val):
        if str(val) in ['M', 'F', 'U']:
            return str(val)
        else:
            raise ValueError('Value must be either M, F, or U')

class place(CategoricalSemanticType):
    def __init__(self):
        self.description = 'The name of a place'
        self.valid_values = 'The name of a place should be a string'
        self.format = 'Place names are stored as strings'
        self.examples = ['Seneca', 'Home place', 'Rock Creek', ""R. Williams' "", 'Cabin Branch']
    def cast(self, val):
        return str(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = 'The age of a person'
        self.valid_range = [0, 88]
        self.dtype = float
        self.format = 'Age should be a decimal number'
        self.examples = [65.0, 60.0, 51.0, 40.0, 30.0]
    def cast(self, val):
        return float(val)

class agecategory(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = 'The age category of a person'
        self.valid_values = 'Age category can be Child, Adult, Infant, or Older Person'
        self.format = 'Age categories are stored as strings'
        self.examples = ['Child', 'Adult', 'Infant', 'Older Person']
    def cast(self, val):
        if str(val) in ['Child', 'Adult', 'Infant', 'Older Person']:
            return str(val)
        else:
            raise ValueError('Value must be Child, Adult, Infant, or Older Person')

class price(NumericSemanticType):
    def __init__(self):
        self.description = 'The price of a good or service'
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = 'Price should be formatted as a floating point number with two decimal places for cents'
        self.examples = [250.0, 300.0, 700.0, 350.0, 150.0]
    def cast(self, val):
        num = float(str(val).replace('$', ''))
        return round(num, 2)

MAPPING = {'sortorder': pageorder, 'digitalpage': pageorder, 'booklr': bookside, 'pageheadings': pageheading, 'nº': number, 'names': personname, 'imputedgender': gender, 'namedplace': place, 'simplifiedage': age, 'agecategory': agecategory, 'pricevaluation': price, 'sale': price}"
"class townname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a town""
        self.valid_values = ""Name should be a string""
        self.format = ""The town name should start with a capital letter""
        self.examples = ['Acton', 'Arlington', 'Ashland', 'Bedford', 'Bellingham']
    def cast(self, val):
        return str(val).title()
        
class population(NumericSemanticType):
    def __init__(self):
        self.description = ""Population of a town""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Population should be a non-negative integer""
        self.examples = [312, 5531, 12758, 26109, 2369986]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')
        
class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage value""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be a floating point number between 0 and 100""
        self.examples = [0, 25, 50, 75, 100]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')
        
class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year value""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1870, 1900, 1940, 1980, 2010]
    def cast(self, val):
        return int(val) if pd.notna(val) else float('nan')

MAPPING = {
    'townname': townname, 
    'totalpopulation': population,
    'nativebornnumber': population,
    'foreignbornnumber': population,
    'nativebornpercent': percentage,
    'foreignbornpercent': percentage,
    'year': year
}"
"class tenurelevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Level of tenure, represented as a number""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Tenure level should be an integer between 1 and 4""
        self.examples = [1, 2, 3, 4]
    def cast(self, val):
        if isinstance(val, int) and 1 <= val <= 4:
            return val
        else:
            raise Exception('Invalid tenure level')

class ratinglevel(NumericSemanticType):
    def __init__(self):
        self.description = ""Rating level, represented as a number""
        self.valid_range = [1, 5]
        self.dtype = int
        self.format = ""Rating level should be an integer between 1 and 5""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if isinstance(val, int) and 1 <= val <= 5:
            return val
        else:
            raise Exception('Invalid rating level')

MAPPING = {'ctenure': tenurelevel, 
           'cs2': ratinglevel, 'cs3': ratinglevel, 'cs4': ratinglevel, 'be2': ratinglevel,
           'be3': ratinglevel, 'be4': ratinglevel, 'oc1': ratinglevel, 'oc2': ratinglevel,
           'oc3': ratinglevel, 'oc4': ratinglevel, 'oc5': ratinglevel, 'oc6': ratinglevel,
           'js2': ratinglevel, 'js3': ratinglevel, 'js4': ratinglevel, 'js8': ratinglevel,
           'js10': ratinglevel, 'wm1': ratinglevel, 'wm4': ratinglevel, 'wm5': ratinglevel,
           'wm6': ratinglevel, 'wm10': ratinglevel, 'wm11': ratinglevel}"
"class firearmsmanufacturer(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of Firearms Manufacturer""
        self.valid_values = ""Should be a string that represents the name of the firearms manufacturer""
        self.format = ""Each word's first letter should be capitalized""
        self.examples = ['Remington Arms Company LLC', 'Sturm, Ruger & Company, Inc', 'Strategic Armory Corps LLC', 'Palmetto State Armory LLC', 'Ghost Firearms LLC']
    def cast(self, val):
        return str(val).title()

class firearmsmanufactureraddress(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Address of Firearms Manufacturer""
        self.valid_values = ""Should be a string that represents the address of the firearms manufacturer""
        self.format = ""Each word's first letter should be capitalized""
        self.examples = ['69400 E Hwy 60', '291 E Ocotillo Rd Unit 27', '100 Burritt Street', '75 Cal Foster Dr', '15543 Birch Dr']
    def cast(self, val):
        return str(val).title()

class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City Name""
        self.valid_values = ""Should be a string that represents the name of a city""
        self.format = ""Each word's first letter should be capitalized""
        self.examples = ['Phoenix', 'Houston', 'Jacksonville', 'Tucson', 'Springfield']
    def cast(self, val):
        return str(val).title()

class state(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""US State""
        self.valid_values = ""Should be a string that represents the abbreviation of a US state""
        self.format = ""Should be a two-letter capitalized abbreviation""
        self.examples = ['TX', 'AZ', 'FL', 'OH', 'NC']
    def cast(self, val):
        return str(val).upper()

class firearmscount(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of firearms""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be formatted as an integer""
        self.examples = [10, 15, 100, 500, 1000]
    def cast(self, val):
        return int(val)

MAPPING = {'license': firearmsmanufacturer, 
           'street': firearmsmanufactureraddress, 
           'city': city, 
           'st': state, 
           'miscexp': firearmscount, 
           'pistolsexp': firearmscount,
           'revolversexp': firearmscount,
           'rifleexp': firearmscount,
           'shotgunexp': firearmscount,
           'misc': firearmscount,
           'pistol22': firearmscount,
           'pistol25': firearmscount,
           'pistol32': firearmscount,
           'pistol380': firearmscount,
           'pistol9mm': firearmscount,
           'pistol50': firearmscount,
           'pistoltotal': firearmscount,
           'rvlr22': firearmscount,
           'rvlr32': firearmscount,
           'rvlr357': firearmscount,
           'rvlr38': firearmscount,
           'rvlr44': firearmscount,
           'rvlr50': firearmscount,
           'rvlrtotl': firearmscount,
           'rifles': firearmscount,
           'shotguns': firearmscount,
           'mfgtotal': firearmscount,
           'exptotal': firearmscount}"
"class personid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Person ID""
        self.valid_values = ""Person ID should be a string that is of the form 'RJ-IGOP-PER-XXX'""
        self.format = ""Person ID starts with 'RJ-IGOP-PER-' followed by a three-digit number""
        self.examples = ['RJ-IGOP-PER-058', 'RJ-IGOP-PER-006', 'RJ-IGOP-PER-060', 'RJ-IGOP-PER-037', 'RJ-IGOP-PER-007']
    def cast(self, val):
        return str(val)

class personname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Person""
        self.valid_values = ""Name should be a string that is of the form 'first name'""
        self.format = ""Only the first letter of the first name should be capitalized""
        self.examples = ['Adelina', 'Affonso', 'Afra', 'Agapto', 'Agostinho']
    def cast(self, val):
        return str(val).title()

class personsex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Male', 'Female']
    def cast(self, val):
        return str(val)

class personlegalstatus(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Africano Livre', 'Escravo da Nação']
    def cast(self, val):
        return str(val)

class nation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Nation of a Person""
        self.valid_values = ""Nation should be a string representing the nation of a person""
        self.format = ""The nation should be capitalized""
        self.examples = ['Crioulo', 'Quilimane', 'Moçambique', 'Congo', 'Benguela']
    def cast(self, val):
        return str(val).title()

class workingat(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Where a Person is Working at""
        self.valid_values = ""Should be a string representing the place where a person is working at""
        self.format = ""The first letter of each word should be capitalized""
        self.examples = ['Repartição', 'Telegraphos', 'Menor de idade', 'Paineiras', 'Lavagem de roupas']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return str(val).title()

class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_range = [0, float('inf')]
        self.dtype = datetime
        self.format = ""Date should be formatted as YYYY-MM-DD""
        self.examples = ['1862-09-02', '1862-09-28', '1862-07-01', '1862-08-19', '1862-08-12']
    def cast(self, val):
        if pd.isnull(val):
            return float('nan')
        else:
            return datetime.strptime(val, ""%Y-%m-%d"")

class personcondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Person's Condition""
        self.valid_values = ""Condition should be one of ['none', 'underage', 'invalid', 'arrested']""
        self.format = ""The condition should be in lowercase""
        self.examples = ['none', 'underage', 'invalid', 'arrested']
    def cast(self, val):
        return str(val).lower()

class forestassignment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [False, True]
    def cast(self, val):
        return bool(val)

MAPPING = {'id': personid, 'name': personname, 'sex': personsex, 'legalstatus': personlegalstatus, 'nation': nation, 
           '1861workingat': workingat, '1862workingat': workingat, '1863workingat': workingat, 'dateofdeath': date, 
           'dateofmanumission': date, 'dateofescape': date, 'childrelation': personid, 
           'personcondition': personcondition, 'forestassignment': forestassignment}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of record""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [2000, 2005, 2010, 2015, 2020]
    def cast(self, val):
        year = int(val)
        if year < 1900 or year > datetime.now().year:
            raise Exception('Invalid year')
        return year

class licensename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Licensee name""
        self.valid_values = ""Names should be strings that represent licensee names""
        self.format = ""Names should be in uppercase""
        self.examples = ['STURM, RUGER & COMPANY, INC', 'REMINGTON ARMS COMPANY LLC', 'SMITH & WESSON CORP', 'KIMBER MFG INC', 'BARRETT FIREARMS MFG INC']
    def cast(self, val):
        return str(val).upper()

class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City of the licensee""
        self.valid_values = ""Names should be strings that represent city names""
        self.format = ""Names should be in uppercase""
        self.examples = ['PHOENIX', 'HOUSTON', 'TUCSON', 'LAS VEGAS', 'SPRINGFIELD']
    def cast(self, val):
        return str(val).upper()

class state(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""US State of the licensee""
        self.valid_values = ""Names should be strings that represent US state abbreviations""
        self.format = ""Abbreviations should be in uppercase""
        self.examples = ['TX', 'FL', 'AZ', 'OH', 'CA']
    def cast(self, val):
        state = str(val).upper()
        if state not in [state.abbreviation for state in pycountry.subdivisions.get(country_code='US')]:
            raise Exception('Invalid US state abbreviation')
        return state

class firearmcount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of firearms""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as a non-negative integer""
        self.examples = [0, 1, 10, 100, 1000]
    def cast(self, val):
        count = int(val)
        if count < 0:
            raise Exception('Invalid count')
        return count

MAPPING = {
    'year': year, 
    'licensename': licensename, 
    'city': city, 
    'st': state, 
    'miscfaexp': firearmcount, 
    'miscfamfg': firearmcount, 
    'pistolexp': firearmcount, 
    'pistol22': firearmcount, 
    'pistol25': firearmcount, 
    'pistol32': firearmcount, 
    'pistol380': firearmcount, 
    'pistol9mm': firearmcount, 
    'pistol50': firearmcount, 
    'pistoltotal': firearmcount, 
    'rifleexp': firearmcount, 
    'riflemfg': firearmcount, 
    'rvlrexp': firearmcount, 
    'rvlr22': firearmcount, 
    'rvlr32': firearmcount, 
    'rvlr357': firearmcount, 
    'rvlr38': firearmcount, 
    'rvlr44': firearmcount, 
    'rvlr50': firearmcount, 
    'rvlrtotl': firearmcount, 
    'shotgunexp': firearmcount, 
    'shotgunmfg': firearmcount, 
    'mfgtotal': firearmcount, 
    'exptotal': firearmcount
}"
"class country(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country names""
        self.valid_values = ""Valid values are the official names of countries as per the ISO 3166 standard""
        self.format = ""Country names should be title-cased strings""
        self.examples = ['Angola', 'Saudi Arabia', 'Libya', 'Zambia', 'Lao PDR']
    def cast(self, val):
        val = str(val).title()
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid country name')

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Years""
        self.valid_range = [1970, 2030]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [1979, 1980, 1981, 1982, 1983]
    def cast(self, val):
        val = int(val)
        if 1970 <= val <= 2030:
            return val
        else:
            raise Exception('Invalid year')

class imports(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The value of imports""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Import value should be formatted as a floating point number""
        self.units = 'In USD' 
        self.examples = [112336039.09090908, 141664750.9090909, 223468180.0, 76701698.18181817, 85019760.9090909]
    def cast(self, val):
        val = float(val)
        if val >= 0:
            return val
        else:
            raise Exception('Invalid import value')

MAPPING = {'country': country, 'year': year, 'lowimports': imports, 'meduimimports': imports, 'highimports': imports}"
"class workid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier of the work""
        self.valid_values = ""Work id should be a string starting with 'PG' followed by a 5 digit number""
        self.format = ""Work id should be a string of the format 'PGxxxxx'""
        self.examples = ['PG52204', 'PG37657', 'PG44860', 'PG35533', 'PG53581']
    def cast(self, val):
        string = str(val)
        match_obj = re.match('PG[0-9]{5}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid work id')

class biodiversityrichness(NumericSemanticType):
    def __init__(self):
        self.description = ""Biodiversity richness of the work""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Biodiversity richness should be a floating point number""
        self.examples = [26.5, 15.52, 14.1, 13.89, 12.62]
    def cast(self, val):
        num = float(val)
        return num

class lexicalrichness(NumericSemanticType):
    def __init__(self):
        self.description = ""Lexical richness of the work""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Lexical richness should be a floating point number""
        self.examples = [2483.93, 2245.41, 2290.33, 1888.27, 1989.59]
    def cast(self, val):
        num = float(val)
        return num

class agepublication(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of publication of the work""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age of publication should be an integer""
        self.examples = [36, 40, 36, 55, 37]
    def cast(self, val):
        num = int(val)
        return num

class yearpublication(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of publication of the work""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Year of publication should be an integer""
        self.examples = [1847, 1851, 1847, 1876, 1858]
    def cast(self, val):
        num = int(val)
        return num

class literatureform(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Literature form of the work""
        self.valid_values = ""Literature form should be a string representing one of the 8 possible forms""
        self.format = ""Literature form should be a string""
        self.examples = ['epic_art_novel', 'epic_art_shortstory', 'nonfiction', 'lyric_art', 'dramatic_art']
    def cast(self, val):
        return str(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the author""
        self.valid_values = ""Gender should be either 'gender_m' or 'gender_f'""
        self.format = ""Gender should be a string""
        self.examples = ['gender_m', 'gender_f']
    def cast(self, val):
        return str(val)

class parenthood(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Parenthood status of the author""
        self.valid_values = ""Parenthood status should be either 'has_children' or 'has_no_children'""
        self.format = ""Parenthood status should be a string""
        self.examples = ['has_children', 'has_no_children']
    def cast(self, val):
        return str(val)

class highesteducation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Highest education of the author""
        self.valid_values = ""Highest education should be one of 'university', 'school', 'academic'""
        self.format = ""Highest education should be a string""
        self.examples = ['university', 'school', 'academic']
    def cast(self, val):
        return str(val)

class biodiversitybackground(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Biodiversity inclination of the author""
        self.valid_values = ""Biodiversity inclination should be either 'no_bio_inclination' or 'has_bio_inclination'""
        self.format = ""Biodiversity inclination should be a string""
        self.examples = ['no_bio_inclination', 'has_bio_inclination']
    def cast(self, val):
        return str(val)

class mainregion(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Main region of the author""
        self.valid_values = ""Main region should be one of 'north_america', 'british_isles', 'europe', 'other'""
        self.format = ""Main region should be a string""
        self.examples = ['north_america', 'british_isles', 'europe', 'other']
    def cast(self, val):
        return str(val)

class migrating(NumericSemanticType):
    def __init__(self):
        self.description = ""Migration status of the author""
        self.valid_range = [1, 6]
        self.dtype = int
        self.format = ""Migration status should be an integer between 1 and 6""
        self.examples = [1, 2, 3, 4, 5, 6]
    def cast(self, val):
        num = int(val)
        return num

class mainresidence(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Main residence of the author""
        self.valid_values = ""Main residence should be one of 'city', 'town', 'village'""
        self.format = ""Main residence should be a string""
        self.examples = ['city', 'town', 'village']
    def cast(self, val):
        return str(val)

class genre(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [True, False]
    def cast(self, val):
        return bool(val)

MAPPING = {'workid': workid, 
           'biodiversityrichness': biodiversityrichness, 
           'lexicalrichness': lexicalrichness, 
           'agepublication': agepublication, 
           'yearpublication': yearpublication, 
           'literatureform': literatureform, 
           'gender': gender, 
           'parenthood': parenthood, 
           'highesteducation': highesteducation, 
           'biodiversitybackground': biodiversitybackground, 
           'mainregion': mainregion, 
           'migrating': migrating, 
           'mainresidence': mainresidence, 
           'genresatire': genre, 
           'genrehistorical': genre, 
           'genresocial': genre, 
           'genrechildren': genre, 
           'genreadventure': genre, 
           'genremystery': genre, 
           'genrecrime': genre, 
           'genresf': genre, 
           'genreromance': genre, 
           'genrefantasy': genre, 
           'genrebiography': genre, 
           'genretravellogue': genre}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dates""
        self.valid_values = ""Dates must be in 'YYYYMMDD' format""
        self.format = ""Dates must be 8-digit numbers stored as strings""
        self.examples = ['20201231', '20210101', '20210102', '20210103', '20210104']
        
    def cast(self, val):
        string = str(val)
        match_obj = re.match('^\d{8}$', string)
        if match_obj:
            return datetime.strptime(match_obj.group(), '%Y%m%d').date()
        else:
            raise Exception('Invalid date format')

MAPPING = {'date': date}"
"class sequence(NumericSemanticType):
    def __init__(self):
        self.description = ""A sequence of numbers""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Each number in the sequence should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class chineseextract(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Text extracted from Chinese literature""
        self.valid_values = ""Must be a string that consists of Chinese characters""
        self.format = ""Chinese characters in traditional form""
        self.examples = ['大鹿三十隻，獐子五十隻，麅子五十隻', '四隊各引戰船三百隻，前面各擺列火船二十隻', '北庭都護府貢陰牙角五隻\u3000速藿角十隻\u3000阿魏截根二十斤']
    def cast(self, val):
        return str(val)

class historicalperiod(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Historical period in Chinese history""
        self.valid_values = ""Must be one of the recognized periods in Chinese history""
        self.format = ""Name of the historical period""
        self.examples = ['Song-Ming', 'Qing', 'Sui-Tang', 'PreQin and Han', 'Wei, Jin, and North-South']
    def cast(self, val):
        return str(val)

class entityclassification(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Classification of an entity""
        self.valid_values = ""Must be a recognized entity type in the Chinese language""
        self.format = ""The entity classification""
        self.examples = ['船', '手', '雞', '戰船']
    def cast(self, val):
        return str(val)

class entitytype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of an entity""
        self.valid_values = ""Must be a recognized entity type in the Chinese language""
        self.format = ""The entity type""
        self.examples = ['boat', 'one of a pair', 'bird', 'shoe', 'container']
    def cast(self, val):
        return str(val)

class entityrole(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Role of an entity""
        self.valid_values = ""Must be a recognized role of an entity in the Chinese language""
        self.format = ""The entity role""
        self.examples = ['Classifier', 'Noun', 'Classifier in Chengyu', 'Adjective']
    def cast(self, val):
        return str(val)

class textnotes(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Notes on a text extract""
        self.valid_values = ""Must be a string that consists of notes regarding the text extract""
        self.format = ""Notes regarding the text extract""
        self.examples = ['ncn', 'zhi not included but meaning clear', 'Key character omitted', '舄 means a shoe but here possibly used metaphorically meaning a step indicating progress', 'metaphorical use but clear referent ']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

class commonphrases(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Common phrases or idioms""
        self.valid_values = ""Must be a string that consists of common phrases or idioms""
        self.format = ""Common phrases or idioms""
        self.examples = ['船隻', '斗酒隻雞', '隻身', '張弓隻箭', '雞、鴨、鵝']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return str(val)

MAPPING = {'number': sequence, 'textextract': chineseextract, 'timeperiod': historicalperiod, 'classifies': entityclassification, 'type': entitytype, 'role': entityrole, 'notes': textnotes, 'commonality': commonphrases}"
"class replication(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Replication instance""
        self.valid_values = ""Should be either 'R1' or 'R2'""
        self.format = ""Replication instance must be stored as a string""
        self.examples = ['R1', 'R2']
    def cast(self, val):
        return str(val).strip()

class species(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Species of Tsetse fly""
        self.valid_values = ""Should be a string representing a species, in this case 'Gff'""
        self.format = ""Species must be stored as a string""
        self.examples = ['Gff']
    def cast(self, val):
        return str(val).strip()

class treatment(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Control', 'Virus']
    def cast(self, val):
        return str(val).strip()

class time(NumericSemanticType):
    def __init__(self):
        self.description = ""Time in hours""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be formatted as a floating point number""
        self.examples = [0.0, 6.75, 13.5, 22.5, 36.0]
    def cast(self, val):
        return float(val)

class sex(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Male', 'Female']
    def cast(self, val):
        return str(val).strip()

class referencegene(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Reference gene""
        self.valid_values = ""Should be a string representing a reference gene""
        self.format = ""Reference gene must be stored as a string""
        self.examples = ['tubilin', 'Tubilin']
    def cast(self, val):
        return str(val).strip().lower()

class sample(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sample ID""
        self.valid_values = ""Should be a string representing a sample ID""
        self.format = ""Sample ID must be stored as a string""
        self.examples = ['10A', '10B', '12C', '10C', '9A']
    def cast(self, val):
        return str(val).strip()

class relativequantity(NumericSemanticType):
    def __init__(self):
        self.description = ""Relative quantity""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Relative quantity should be a floating point number between 0 and 1""
        self.examples = [0.00211, 0.337, 0.492, 0.664, 1.0]
    def cast(self, val):
        num = float(val)
        return round(num, 5) if 0 <= num <= 1 else float('nan')

class targetgene(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Target gene""
        self.valid_values = ""Should be a string representing a target gene""
        self.format = ""Target gene must be stored as a string""
        self.examples = ['Virus', 'virus']
    def cast(self, val):
        return str(val).strip().lower()

class normalizeddata(NumericSemanticType):
    def __init__(self):
        self.description = ""Normalized data""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Normalized data should be a floating point number""
        self.examples = [1e-05, 0.0, 0.245, 2.92226768]
    def cast(self, val):
        return round(float(val), 8)

class corrected(NumericSemanticType):
    def __init__(self):
        self.description = ""Corrected data""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Corrected data should be a floating point number""
        self.examples = [-0.81331661, -0.261, 0.206, 4.244, 5.483101667]
    def cast(self, val):
        return float(val)

class logcopy(NumericSemanticType):
    def __init__(self):
        self.description = ""Log copy of data""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Log copy data should be a floating point number""
        self.examples = [0.15370337, 0.548, 1.61, 17532.741, 304159.6969]
    def cast(self, val):
        return round(float(val), 9)

MAPPING = {
    'replication': replication, 
    'species': species, 
    'treatment': treatment, 
    'time': time, 
    'sex': sex, 
    'referencegene': referencegene, 
    'sample': sample, 
    'relativequantity': relativequantity, 
    'targetgene': targetgene, 
    'sample1': sample, 
    'relativequantity1': relativequantity,
    'normalizeddata': normalizeddata,
    'corrected': corrected,
    'logcopy': logcopy
}"
"class stateabbreviation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""State Abbreviations""
        self.valid_values = ""State abbreviations should be of the form 'XX', where X is an uppercase letter""
        self.format = ""State abbreviations should be two uppercase letters""
        self.examples = ['TX', 'GA', 'VA', 'KY', 'MO']
    def cast(self, val):
        return str(val).upper()

class countyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a County""
        self.valid_values = ""County name should be a string that is of the form 'county name county'""
        self.format = ""Only the first letter of the county name should be capitalized""
        self.examples = ['Autauga County', 'Baldwin County', 'Barbour County', 'Bibb County', 'Blount County']
    def cast(self, val):
        return str(val).title()

class fipscode(NumericSemanticType):
    def __init__(self):
        self.description = ""FIPS Code""
        self.valid_range = [1000, 60000]
        self.dtype = int
        self.format = ""FIPS code should be a five-digit number""
        self.examples = [1001, 1003, 1005, 1007, 1009]
    def cast(self, val):
        return int(val)

class smokerates(NumericSemanticType):
    def __init__(self):
        self.description = ""Smoking Rates in 2000""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Smoking rate should be a floating point number between 0 and 1, inclusive""
        self.examples = [0.26, 0.264, 0.284, 0.296, 0.302]
    def cast(self, val):
        num = float(val)
        return round(num, 3)

MAPPING = {'state': stateabbreviation, 'county': countyname, 'fips': fipscode, 'smokerate2000': smokerates}"
"class respondentid(NumericSemanticType):
    def __init__(self):
        self.description = ""A unique ID assigned to each respondent""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""The ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class questionnaireanswer(NumericSemanticType):
    def __init__(self):
        self.description = ""The answer to a specific question in the questionnaire. The value should be between 1 and 9""
        self.valid_range = [1, 9]
        self.dtype = int
        self.format = ""The answer should be an integer""
        self.examples = [1, 2, 4, 5, 9]
    def cast(self, val):
        return int(val)

class birthyear(NumericSemanticType):
    def __init__(self):
        self.description = ""The year of birth of the respondent""
        self.valid_range = [1917, 9999]
        self.dtype = int
        self.format = ""The birth year should be a 4-digit integer""
        self.examples = [1940, 1937, 1944, 1970, 1960]
    def cast(self, val):
        return int(val)

class booleananswer(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val == 1 or val == '1':
            return 1
        elif val == 0 or val == '0':
            return 0
        else:
            raise Exception('Invalid boolean value')

MAPPING = {'respondent': respondentid, 'q1': questionnaireanswer, 'q4': questionnaireanswer, 'q6a': questionnaireanswer, 'q6b': questionnaireanswer, 'q6c': questionnaireanswer, 'q10a': questionnaireanswer, 'q12': questionnaireanswer, 'q14b': questionnaireanswer, 'q15a': questionnaireanswer, 'q15b': questionnaireanswer, 'q15c': questionnaireanswer, 'q15d': questionnaireanswer, 'q16': questionnaireanswer, 'q17': questionnaireanswer, 'q20a': questionnaireanswer, 'q20f': questionnaireanswer, 'q21': questionnaireanswer, 'q22': birthyear, 'q23': questionnaireanswer, 'q24a': booleananswer, 'q24b': booleananswer, 'q24c': booleananswer, 'q24d': booleananswer, 'q24e': booleananswer, 'q25': questionnaireanswer}"
"class plantorigin(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Origin of the plant""
        self.valid_values = ""Plant origins should be a string of alphanumeric characters""
        self.format = ""Alphanumeric plant origin identifier""
        self.examples = ['AU4X', 'AU5X', 'C', 'CA5X', 'CH5X']
    def cast(self, val):
        return str(val).upper()

class allelopathicactivity(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Y', 'N']
    def cast(self, val):
        return str(val).upper()

class numericrepresentation(NumericSemanticType):
    def __init__(self):
        self.description = ""Numeric representation""
        self.valid_range = [1, 10]
        self.dtype = float
        self.format = ""Numeric representation should be a floating point number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class plantheight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Height of the plant""
        self.valid_range = [1.0, 4.8]
        self.dtype = float
        self.format = ""Plant height should be a floating point number""
        self.unit = ""In cm""
        self.examples = [3.9, 3.5, 2.1, 3.9, 3.0]
    def cast(self, val):
        return float(val)

class biomass(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Biomass of an entity of the plant""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Biomass should be a floating point number""
        self.unit = ""In g"" 
        self.examples = [0.1113, float('nan'), 0.0833, 0.0811, 0.0796]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class germination(NumericSemanticType):
    def __init__(self):
        self.description = ""Germination level of the plant""
        self.valid_range = [0.0, 5.0]
        self.dtype = float
        self.format = ""Germination level should be a floating point number""
        self.examples = [2.0, 0.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return float(val)

class deadseedlings(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of dead seedlings of the plant""
        self.valid_range = [0, 2]
        self.dtype = int
        self.format = ""Number of dead seedlings should be an integer""
        self.examples = [0, 0, 0, 1, 0]
    def cast(self, val):
        return int(val)

MAPPING = {
    'oxp': plantorigin,
    'ac': allelopathicactivity,
    'rep': numericrepresentation,
    'initialplantheight': plantheight,
    'stembiomass': biomass,
    'rootbiomass': biomass,
    'germination': germination,
    'deadseedlings': deadseedlings
}"
"class target(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Target organisms in a biological experiment""
        self.valid_values = ""The target organisms can be 'Sodalis' or 'sodalis'""
        self.format = ""Target should be a string starting with a capital letter""
        self.examples = ['Sodalis', 'Sodalis', 'Sodalis', 'Sodalis', 'Sodalis']
    def cast(self, val):
        return str(val).capitalize()

class species(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Species involved in a biological experiment""
        self.valid_values = ""The species can only be 'Gmm'""
        self.format = ""Species should be a string in uppercase""
        self.examples = ['Gmm', 'Gmm', 'Gmm', 'Gmm', 'Gmm']
    def cast(self, val):
        return str(val).upper()

class time(NumericSemanticType):
    def __init__(self):
        self.description = ""Time in hours""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be a non-negative floating point number""
        self.examples = [0.0, 0.0, 0.0, 0.0, 0.0]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid time')
        return num

class sex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of the organisms""
        self.valid_values = ""Sex can only be 'F' or 'M'""
        self.format = ""Sex should be represented as single uppercase character""
        self.examples = ['F', 'F', 'F', 'M', 'M']
    def cast(self, val):
        return str(val).upper()

class relativequantity(NumericSemanticType):
    def __init__(self):
        self.description = ""Relative quantity of a biological entity""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Relative quantity should be a floating point number between 0 and 1""
        self.examples = [0.08704, 0.08991, 0.09345, 0.04905, 0.0576]
    def cast(self, val):
        num = float(val)
        if num < 0 or num > 1:
            raise Exception('Invalid relative quantity')
        return num

class normalizeddata(NumericSemanticType):
    def __init__(self):
        self.description = ""Normalized data values from a biological experiment""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Normalized data should be a non-negative floating point number""
        self.examples = [0.290249433106576, 0.3251717902350813, 0.2717596766219792, 0.1896751740139211, 0.211936124806829]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid normalized data')
        return num

MAPPING = {'target': target, 'species': species, 'time': time, 'sex': sex, 'relativequantity': relativequantity, 'normalizeddata': normalizeddata}"
"class dateandtimeutc(NumericSemanticType):
    def __init__(self):
        self.description = ""Date and Time in UTC""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Date and Time should be in UTC format, represented as a float number""
        self.examples = [40663.14013888889, 40663.1421875, 40663.156909722224, 40663.46306712963, 40663.48835648148]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Dates should be of the format 'mm/dd/yyyy'""
        self.format = ""Dates should be strings of the format 'mm/dd/yyyy'""
        self.examples = ['10/19/2011', '10/18/2011', '10/20/2011', '10/17/2011', '10/15/2011']
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return datetime.strptime(str(val), '%m/%d/%Y').strftime('%m/%d/%Y')

class studyday(NumericSemanticType):
    def __init__(self):
        self.description = ""Study Day""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Study Day should be a positive integer""
        self.examples = [30.0, 31.0, 32.0, 33.0, 34.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class studyweek(NumericSemanticType):
    def __init__(self):
        self.description = ""Study Week""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Study Week should be a positive integer""
        self.examples = [5.0, 6.0, 7.0, 8.0, 9.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

class systemrkm(NumericSemanticType):
    def __init__(self):
        self.description = ""System RKM""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""System RKM should be a positive integer""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        else:
            return float(val)

MAPPING = {'dateandtimeutc': dateandtimeutc, 'date': date, 'studyday': studyday, 'studyweek': studyweek, 'systemrkm': systemrkm}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Year of data collection'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = int
        self.format: str = 'Year should be formatted as an integer'
        self.examples: list = [2016, 2017, 2018, 2019, 2020]
    def cast(self, val):
        return int(val)
    
class month(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Month of data collection'
        self.valid_range: list = [1, 12]
        self.dtype: object = int
        self.format: str = 'Month should be formatted as an integer between 1 and 12'
        self.examples: list = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
    
class day(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Day of data collection'
        self.valid_range: list = [1, 31]
        self.dtype: object = int
        self.format: str = 'Day should be formatted as an integer between 1 and 31'
        self.examples: list = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)
    
class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description: str = 'Temperature reading'
        self.valid_range: list = [float('-inf'), float('inf')]
        self.dtype: object = float
        self.format: str = 'Temperature should be formatted as a floating point number'
        self.unit: str = 'In Celsius' 
        self.examples: list = [-2.12, 33.60, 10.30, 8.75, 8.43]
    def cast(self, val):
        return round(float(val), 2)
    
class humidity(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Humidity reading'
        self.valid_range: list = [0, 100]
        self.dtype: object = float
        self.format: str = 'Humidity should be formatted as a floating point number between 0 and 100 representing percentage'
        self.examples: list = [25.49, 98.2, 62.12, 75.57, 51.01]
    def cast(self, val):
        val = float(val)
        if 0 <= val <= 100:
            return round(val, 2)
        else:
            raise ValueError('Invalid humidity value')

MAPPING = {
    'annee': year,
    'mois': month,
    'jour': day,
    'tempavg': temperature,
    'tempmax': temperature,
    'tempmin': temperature,
    'hygroavg': humidity,
    'hygromax': humidity,
    'hygromin': humidity
}"
"class earthquakeid(NumericSemanticType):
    def __init__(self):
        self.description = ""Earthquake event identifier""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Earthquake ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class earthquaketime(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Time of the earthquake event""
        self.valid_values = ""Time should be in the format 'YYYY/MM/DD HH:MM:SS.S'""
        self.format = ""Time should be a datetime object in Python""
        self.examples = ['2010/01/16 20:23:38.3', '2010/01/16 21:26:19.9', '2010/01/17 09:34:20.6', '2010/01/18 03:13:41.5', '2010/02/07 21:20:16.5']
    def cast(self, val):
        return datetime.strptime(val, '%Y/%m/%d %H:%M:%S.%f')

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude of the earthquake event""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number""
        self.examples = [32.428, 32.444, 32.471, 32.371, 27.816]
    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude of the earthquake event""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.examples = [48.303, 48.279, 48.301, 47.026, 54.194]
    def cast(self, val):
        return float(val)

class depth(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Depth of the earthquake event""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""In kilometers""
        self.format = ""Depth should be a floating point number""
        self.examples = [9.5, 15.0, 2.9, 11.2, 4.5]
    def cast(self, val):
        return float(val)

class magnitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Magnitude of the earthquake event""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Magnitude should be a floating point number""
        self.examples = [4.9, 4.1, 4.3, 4.0, 4.0]
    def cast(self, val):
        return float(val)

class magnitude_type(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of the magnitude""
        self.valid_values = ""Either 'MN' or 'Mw'""
        self.format = ""Magnitude type should be one of the valid values""
        self.examples = ['MN', 'Mw']
    def cast(self, val):
        if val in ['MN', 'Mw']:
            return val
        else:
            raise Exception('Invalid magnitude type')

class rms(NumericSemanticType):
    def __init__(self):
        self.description = ""Root Mean Square travel time residual""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""RMS should be a floating point number""
        self.examples = [0.4, 0.2, 0.4, 0.3, 0.4]
    def cast(self, val):
        return float(val)

class azimuthal_gap(NumericSemanticType):
    def __init__(self):
        self.description = ""Azimuthal Gap""
        self.valid_range = [0, 360]
        self.dtype = float
        self.format = ""Azimuthal Gap should be a floating point number""
        self.examples = [198.0, 198.0, 197.0, 229.0, 297.0]
    def cast(self, val):
        return float(val)

class download_file(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Downloadable file type""
        self.valid_values = ""Should be 'Wave file'""
        self.format = ""Should be a string 'Wave file'""
        self.examples = ['Wave file', 'Wave file', 'Wave file', 'Wave file', 'Wave file']
    def cast(self, val):
        if val == 'Wave file':
            return val
        else:
            raise Exception('Invalid downloadable file type')

MAPPING = {'no': earthquakeid, 'origintime': earthquaketime, 'lat': latitude, 'long': longitude, 'depthkm': depth, 'mag': magnitude, 'magtype': magnitude_type, 'rmssec': rms, 'azimuthalgapdeg': azimuthal_gap, 'download': download_file}"
"class fishid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a fish""
        self.valid_values = ""Fish ID should be a unique string identifier""
        self.format = ""Fish ID should be a capitalized string""
        self.examples = ['3ED01', '3ED02', '3ED03', '3ED04', '3ED05']
    def cast(self, val):
        return str(val).upper()

class parasitecount(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of a specific type of parasite in a fish""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Parasite count should be an integer""
        self.examples = [0, 12, 360, 746, 199]
    def cast(self, val):
        return int(val)

MAPPING = {
    'fishid': fishid,
    'dper': parasitecount,
    'fgib': parasitecount,
    'scep': parasitecount,
    'sasp': parasitecount,
    'scur': parasitecount,
    'hspl': parasitecount,
    'sspa': parasitecount,
    'lput': parasitecount,
    'lesp': parasitecount,
    'leco': parasitecount,
    'spap': parasitecount,
    'sdim': parasitecount,
    'smin': parasitecount,
    'nper': parasitecount,
    'cbio': parasitecount,
    'lmed': parasitecount,
    'lcep': parasitecount,
    'lcha': parasitecount,
    'smug': parasitecount
}"
"class watershedsid(NumericSemanticType):
    def __init__(self):
        self.description = ""Watershed ID""
        self.valid_range = [1, 65]
        self.dtype = int
        self.format = ""Watershed ID should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return int(val)

class countyname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of County""
        self.valid_values = ""Should be either 'Spartanburg' or 'Greenville'""
        self.format = ""The name should start with an uppercase letter and the rest in lowercase""
        self.examples = ['Spartanburg', 'Greenville']
    def cast(self, val):
        return str(val).title()

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be a floating point number""
        self.examples = [18.381, 16.754, 0.817907878, 6.976, 13.003]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 6)

class microgramsperliter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Amount of a Substance in Micrograms per Liter""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'Micrograms per Liter (ug/L)' 
        self.format = ""Should be a floating point number""
        self.examples = [9.045, 1.782, 5.236472, 8.065, 8.737]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 6)

MAPPING = {'wsid': watershedsid, 'county': countyname, 'x2001perdev': percentage, 'x2001mc': microgramsperliter, 'x2001mn': microgramsperliter, 'x2001mp': microgramsperliter, 'x2001msed': microgramsperliter, 'x2001mhab': microgramsperliter, 'x2006perdev': percentage, 'x2006mc': microgramsperliter, 'x2006mn': microgramsperliter, 'x2006mp': microgramsperliter, 'x2006msed': microgramsperliter, 'x2006mhab': microgramsperliter, 'x2011perdev': percentage, 'x2011mc': microgramsperliter, 'x2011mn': microgramsperliter, 'x2011mp': microgramsperliter, 'x2011msed': microgramsperliter, 'x2011mhab': microgramsperliter, 'x20012011pcdev': percentage, 'x20012011pcc': percentage, 'x20012011pcn': percentage, 'x20012011pcp': percentage, 'x20012011pcsed': percentage, 'x20012011pchab': percentage}"
"class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender should be one of 'Male', 'Female' or 'Other'""
        self.format = ""Gender should be a string where the first letter is capitalized""
        self.examples = ['Male', 'Female', 'Male', 'Female', 'Female']
    def cast(self, val):
        return str(val).capitalize()

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age of a person""
        self.valid_range = [0, 120]
        self.dtype = int
        self.format = ""Age should be an integer""
        self.examples = [13, 20, 25, 26, 31]
    def cast(self, val):
        return int(val)

class action(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Action performed by a person""
        self.valid_values = ""Action should be a string describing the action""
        self.format = ""Every word should start with a capital letter""
        self.examples = ['Studying', 'Doing housework', 'Working', 'Doing housework', 'Keeping shop']
    def cast(self, val):
        return str(val).title()

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location of a person""
        self.valid_values = ""Location should be a string describing the place""
        self.format = ""Every word should start with a capital letter""
        self.examples = ['In a classroom', 'At home', 'In a supermarket', 'At home', 'In an auto repair factory']
    def cast(self, val):
        return str(val).title()

class socialcontext(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Social context of a person""
        self.valid_values = ""Social context should be a string describing the social situation""
        self.format = ""Every word should start with a capital letter""
        self.examples = ['With classmates', 'With family', 'With colleagues', 'With family', 'Alone']
    def cast(self, val):
        return str(val).title()

class earthquakeintensity(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Earthquake intensity""
        self.valid_values = ""Intensity should be one of ['Ⅶ', 'Ⅷ', 'Ⅵ', 'Ⅴ', 'below Ⅴ']""
        self.format = ""Intensity should be a string in the form of a roman numeral""
        self.examples = ['Ⅴ', 'Ⅴ', 'Ⅴ', 'Ⅴ', 'Ⅴ']
    def cast(self, val):
        if val in ['Ⅶ', 'Ⅷ', 'Ⅵ', 'Ⅴ', 'below Ⅴ']:
            return val
        else:
            raise Exception('Invalid earthquake intensity')

class speed(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Speed of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Speed should be a floating point number""
        self.unit = 'm/s'
        self.examples = [1.269, 6.461, 1.295, 6.461, 3.255]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'gender': gender, 'age': age, 'action': action, 'location': location, 'socialcontext': socialcontext, 'earthquakeintensity': earthquakeintensity, 'maxspeed': speed, 'minspeed': speed, 'averagespeed': speed}"
"class fipscode(NumericSemanticType):
    def __init__(self):
        self.description = ""Federal Information Processing Standards code, unique code for US geographies""
        self.valid_range = [1001, float('inf')] 
        self.dtype = int 
        self.format = ""FIPS should be an integer number with no decimal places""
        self.examples = [1001, 1003, 1005, 1007, 1009]
    def cast(self, val):
        return int(val)

class geoid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Geographic identifier""
        self.valid_values = ""Geographic identifiers should be strings of the form '0500000USxxxxx' where xxxxx is a FIPS code""
        self.format = ""Geographic identifiers should start with '0500000US' followed by a 5-digit FIPS code""
        self.examples = ['0500000US01001', '0500000US01003', '0500000US01005', '0500000US01007', '0500000US01009']
    def cast(self, val):
        match_obj = re.match('0500000US[0-9]{5}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid geoid')

class countyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name and state of a county in the US""
        self.valid_values = ""County name should be a string of the form '<county> County, <state>'""
        self.format = ""County names and state names should start with a capital letter""
        self.examples = ['Autauga County, Alabama', 'Baldwin County, Alabama', 'Barbour County, Alabama', 'Bibb County, Alabama', 'Blount County, Alabama']
    def cast(self, val):
        return str(val).title()

class percentage(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage value""
        self.valid_range = [0, 1] 
        self.dtype = float 
        self.format = ""Percentage should be a floating point number between 0 and 1""
        self.unit = ""Ratio (0-1)"" 
        self.examples = [0.1, 0.5, 0.75, 0.9, 1]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid percentage')

MAPPING = {
    'fipsn': fipscode,
    'geoid': geoid,
    'countyname': countyname,
    'religion': percentage,
    'civic': percentage,
    'charitable': percentage,
    'fraternal': percentage,
    'union': percentage,
    'bridging': percentage,
    'voteage': percentage,
    'local': percentage,
    'state': percentage,
    'federal': percentage,
    'politicalacts': percentage,
    'linking': percentage,
    'ethnic': percentage,
    'ethnichpn': percentage,
    'education': percentage,
    'incomeequal': percentage,
    'employ': percentage,
    'genderincome': percentage,
    'language': percentage,
    'commu': percentage,
    'nonelder': percentage,
    'bonding': percentage,
    'socialcap': percentage
}"
"class birdspecies(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Bird Species""
        self.valid_values = ""The bird species must be one of the recognized bird species names""
        self.format = ""The name of the bird species should be written in full, with the first letter of each word capitalized""
        self.examples = ['Turdus Merula', 'C Caeruleus', 'G Glandarius', 'S Europaea', 'P Major']
    def cast(self, val):
        return str(val).title()

class birdpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Bird Population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The population of a bird species should be an integer""
        self.examples = [330, 270, 35, 75, 370]
    def cast(self, val):
        return int(val)

class discoverycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of Discoveries""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of discoveries should be an integer""
        self.examples = [15, 11, 5, 11, 28]
    def cast(self, val):
        return int(val)

class firstdiscoverycount(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of First Discoveries""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The number of first discoveries should be an integer""
        self.examples = [4, 1, 2, 5, 13]
    def cast(self, val):
        return int(val)

MAPPING = {'species': birdspecies, 'total': discoverycount, 'first': firstdiscoverycount, 'population': birdpopulation}"
"class speciesname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a species""
        self.valid_values = ""Name should be a string""
        self.format = ""Each word in the species name should start with a capital letter""
        self.examples = ['Atub', 'Slyco']
    def cast(self, val):
        return str(val).title()

class sitename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a site""
        self.valid_values = ""Name should be a string""
        self.format = ""The site name should be represented in uppercase""
        self.examples = ['RH', 'CA', 'QZ', 'JA']
    def cast(self, val):
        return str(val).upper()

class dispersionmechanism(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of dispersion mechanism""
        self.valid_values = ""Should be either 'Wind' or 'Insect'""
        self.format = ""The dispersion mechanism should start with a capital letter""
        self.examples = ['Wind', 'Insect']
    def cast(self, val):
        return str(val).title()

class sitetype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of site""
        self.valid_values = ""Should be either 'Ground' or 'Roof'""
        self.format = ""The site type should start with a capital letter""
        self.examples = ['Ground', 'Roof']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [2015, 2014]
    def cast(self, val):
        return int(val)

class numberofseedsfruits(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of seeds/fruits""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Number of seeds/fruits should be formatted as an integer""
        self.examples = [0, 4, 93, 5909]
    def cast(self, val):
        return int(val)

class distance(NumericSemanticType):
    def __init__(self):
        self.description = ""Distance in meters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Distance should be formatted as a floating point number""
        self.examples = [1.0, 13.43, 32.05, 135.57, 340.76]
    def cast(self, val):
        return float(val)

class percentvegetation(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of vegetation""
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number between 0.0 and 1.0""
        self.examples = [0.1586, 0.402, 0.458, 0.91, 0.9105]
    def cast(self, val):
        num = float(val)
        if num >= 0.0 and num <= 1.0:
            return num
        else:
            raise Exception('Invalid percentage')

class percentimpervioussurface(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of impervious surface""
        self.valid_range = [0.0, 1.0]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number between 0.0 and 1.0""
        self.examples = [0.0424, 0.042, 0.534, 0.596, 0.7415]
    def cast(self, val):
        num = float(val)
        if num >= 0.0 and num <= 1.0:
            return num
        else:
            raise Exception('Invalid percentage')

MAPPING = {'species': speciesname, 'site': sitename, 'dispmech': dispersionmechanism, 'sitetype': sitetype, 'year': year, 'numbseedsfruits': numberofseedsfruits, 'distance': distance, 'percentveg': percentvegetation, 'percentimpsurf': percentimpervioussurface}"
"class datetime(NumericSemanticType):
    def __init__(self):
        self.description = ""Datetime in days since 1900-01-01""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Datetime should be a floating point number representing the number of days since 1900-01-01""
        self.examples = [41548.833333333336, 41548.875, 41548.91666666666, 41548.958333333336, 41549.0]
    def cast(self, val):
        try:
            datetime_obj = datetime.fromordinal(int(val) + datetime(1900, 1, 1).toordinal() - 2)
            return datetime_obj.strftime('%Y-%m-%d %H:%M:%S')
        except Exception as e:
            print(f""Error occurred while casting value: {val}, Error: {str(e)}"")
            return None

class concentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of a chemical in the air""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = 'micrograms/m3'
        self.format = ""Concentration should be a floating point number""
        self.examples = [1.65, 1.39, 1.92, 1.49, 1.43]
    def cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            print(f""Error occurred while casting value: {val}, Error: {str(e)}"")
            return None

class weatherparameter(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Weather parameter""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.unit = 'Depends on the parameter'
        self.format = ""Weather parameter should be a floating point number""
        self.examples = [68.900000000000006, 68.900000000000006, 68.900000000000006, 68.900000000000006, 68.900000000000006]
    def cast(self, val):
        try:
            return round(float(val), 2)
        except Exception as e:
            print(f""Error occurred while casting value: {val}, Error: {str(e)}"")
            return None

MAPPING = {
    'datetime': datetime, 
    'date': datetime, 
    'time': datetime, 
    'nitrate': concentration, 
    'sulfate': concentration, 
    'sodium': concentration, 
    'ammoinium': concentration, 
    'potassium': concentration, 
    'magnesium': concentration, 
    'calcium': concentration, 
    'so2': concentration, 
    'no': concentration, 
    'no2': concentration, 
    'nox': concentration, 
    'co': concentration, 
    'o3': concentration, 
    'temp': weatherparameter, 
    'rh': weatherparameter, 
    'pressure': weatherparameter, 
    'wd': weatherparameter, 
    'ws': weatherparameter
}"
"class lossid(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for each loss event""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Loss IDs are integer values""
        self.examples: list = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class state(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""State where the loss event occurred""
        self.valid_values = ""Valid state names in the USA""
        self.format = ""State names should be capitalized and full strings""
        self.examples = ['California']
    def cast(self, val):
        return str(val).title()

class county(CategoricalSemanticType):
    def __init__(self):
        self.description = ""County where the loss event occurred""
        self.valid_values = ""Valid county names in the USA""
        self.format = ""County names should be capitalized and full strings""
        self.examples = ['Sonoma', 'Los Angeles', 'Sacramento', 'Marin', 'Lake']
    def cast(self, val):
        return str(val).title()

class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""City where the loss event occurred""
        self.valid_values = ""Valid city names in the USA""
        self.format = ""City names should be capitalized and full strings""
        self.examples = ['Guerneville', 'Malibu', 'Monte Rio', 'Forestville', 'Sacramento']
    def cast(self, val):
        return str(val).title()

class numberoflosses(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of losses occurred""
        self.valid_range = [2, 9]
        self.dtype = int
        self.format = ""Number of losses are integer values""
        self.examples: list = [2, 3, 2, 5, 2]
    def cast(self, val):
        return int(val)

class dateloss(NumericSemanticType):
    def __init__(self):
        self.description = ""Date when the loss event occurred""
        self.valid_range = [19780105, 20110401]
        self.dtype = int
        self.format = ""Dates should be in the format 'yyyymmdd'""
        self.examples: list = [19970101, 19980205, 20021215, 19980203, 20051231]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class zipcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Zip Code where the loss event occurred""
        self.valid_values = ""Valid 5-digit zip codes in the USA""
        self.format = ""Zip Codes should be 5-digit numbers stored as strings""
        self.examples: list = ['95963', '95963', '95963', '95963', '95482']
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        string = str(int(val))
        match_obj = re.match('[0-9]{5}', string)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid zipcode')

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude where the loss event occurred""
        self.valid_range = [32.548, 41.867]
        self.dtype = float
        self.format = ""Latitude should be a floating point number""
        self.examples: list = [39.739, 39.747, 39.763, 39.78, 39.133]
    def cast(self, val):
        return float(val)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude where the loss event occurred""
        self.valid_range = [-124.106, -114.656]
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.examples: list = [-122.187, -122.169, -122.215, -122.197, -123.175]
    def cast(self, val):
        return float(val)

class asofdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Date as of which the data is reported""
        self.valid_range = [20100430, 20100430]
        self.dtype = int
        self.format = ""Dates should be in the format 'yyyymmdd'""
        self.examples: list = [20100430, 20100430, 20100430, 20100430, 20100430]
    def cast(self, val):
        return int(val)

MAPPING = {'lossid': lossid, 'state': state, 'county': county, 'city': city, 
           'numberoflosses': numberoflosses, 'dateloss1': dateloss, 'dateloss2': dateloss, 
           'dateloss3': dateloss, 'dateloss4': dateloss, 'dateloss5': dateloss, 
           'dateloss6': dateloss, 'dateloss7': dateloss, 'dateloss8': dateloss, 
           'dateloss9': dateloss, 'zipcode': zipcode, 'latitude': latitude, 
           'longitude': longitude, 'asofdate': asofdate}"
"class load(NumericSemanticType):
    def __init__(self):
        self.description = ""The load of the willow chips""
        self.valid_range = [107, 403]
        self.dtype = int
        self.format = ""Load should be an integer""
        self.examples = [107, 108, 109, 110, 111]
    def cast(self, val):
        return int(val)

class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The date of the data collection""
        self.valid_values = ""Dates should be in the format 'd-MMM-yy'""
        self.format = ""Dates should be stored as strings""
        self.examples = ['5-Sep-17', '7-Sep-17', '6-Sep-17', '8-Sep-17', '5-Sep-17']
    def cast(self, val):
        return datetime.strptime(val, '%d-%b-%y').strftime('%d-%b-%y')

class field(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The field from which the data was collected""
        self.valid_values = ""Fields should be single letters""
        self.format = ""Field should be a single letter stored as a string""
        self.examples = ['F', 'G', 'D', 'C', 'A']
    def cast(self, val):
        if re.match(""[A-Z]"", val):
            return val
        else:
            raise Exception('Invalid field')

class htm(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The height of the willow chips""
        self.valid_range = [4.65, 7.01]
        self.dtype = float
        self.format = ""Height should be a floating point number""
        self.unit = ""In meters""
        self.examples = [5.0, 5.0, 5.0, 5.0, 5.0]
    def cast(self, val):
        return round(float(val), 2)

class htcat(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The height category of the willow chips""
        self.valid_values = ""Height category should be 'S' or 'L'""
        self.format = ""Height category should be a single letter stored as a string""
        self.examples = ['S', 'L', 'S', 'L', 'S']
    def cast(self, val):
        if val in ['S', 'L']:
            return val
        else:
            raise Exception('Invalid height category')

class mgperhaload(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The load of the willow chips in mg per ha""
        self.valid_values = ""Load should be a floating point number or '.' for missing values""
        self.format = ""Load should be stored as a string""
        self.examples = ['.', '38.494', '49.742', '41.338', '39.183']
    def cast(self, val):
        if val == '.':
            return float('nan')
        else:
            return float(val)

class mcpct(NumericSemanticType):
    def __init__(self):
        self.description = ""The moisture content of the willow chips""
        self.valid_range = [42.7063, 60.1673]
        self.dtype = float
        self.format = ""Moisture content should be a floating point number""
        self.examples = [52.404, 51.8512, 52.4969, 54.0465, 54.7282]
    def cast(self, val):
        return round(float(val), 4)

class tractor(NumericSemanticType):
    def __init__(self):
        self.description = ""The tractor used for the data collection""
        self.valid_range = [1, 3]
        self.dtype = int
        self.format = ""Tractor should be an integer""
        self.examples = [2, 3, 1, 2, 3]
    def cast(self, val):
        return int(val)

class type(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return bool(val)

class type3(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The type of the collection""
        self.valid_values = ""Type should be 'fixed', 'walking', or 'small'""
        self.format = ""Type should be a string""
        self.examples = ['fixed', 'small', 'walking', 'fixed', 'small']
    def cast(self, val):
        if val in ['fixed', 'small', 'walking']:
            return val
        else:
            raise Exception('Invalid type')

class loadkg(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The load of the willow chips in kg""
        self.valid_range = [2936, 9490]
        self.dtype = int
        self.format = ""Load should be an integer""
        self.unit = ""In kilograms""
        self.examples = [7172, 3482, 5770, 7282, 3348]
    def cast(self, val):
        return int(val)

class vol(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The volume of the willow chips""
        self.valid_range = [10.28, 29.45]
        self.dtype = float
        self.format = ""Volume should be a floating point number""
        self.unit = ""In cubic meters""
        self.examples = [28.06, 10.28, 29.45, 28.06, 10.28]
    def cast(self, val):
        return round(float(val), 2)

class effbd(NumericSemanticType):
    def __init__(self):
        self.description = ""The effective bulk density of the willow chips""
        self.valid_range = [139.97, 393.0]
        self.dtype = float
        self.format = ""Effective bulk density should be a floating point number""
        self.examples = [255.6, 338.72, 195.93, 259.52, 325.68]
    def cast(self, val):
        return round(float(val), 2)

class actbd(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The actual bulk density of the willow chips""
        self.valid_values = ""Actual bulk density should be a floating point number or '.' for missing values""
        self.format = ""Actual bulk density should be stored as a string""
        self.examples = ['.', '206.14', '332.47', '259.83', '221.28']
    def cast(self, val):
        if val == '.':
            return float('nan')
        else:
            return float(val)

class isobd(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The isotherm bulk density of the willow chips""
        self.valid_values = ""Isotherm bulk density should be a floating point number or '.' for missing values""
        self.format = ""Isotherm bulk density should be stored as a string""
        self.examples = ['278', '228.87', '254.04', '252.84', '261.23']
    def cast(self, val):
        if val == '.':
            return float('nan')
        else:
            return float(val)

MAPPING = {'load': load, 
           'date': date, 
           'field': field, 
           'htm': htm, 
           'htcat': htcat,
           'mgperhaload': mgperhaload,
           'mcpct': mcpct,
           'tractor': tractor,
           'type': type,
           'type3': type3,
           'loadkg': loadkg,
           'vol': vol,
           'effbd': effbd,
           'actbd': actbd,
           'isobd': isobd}"
"class variablename(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Variable name in a dataset""
        self.valid_values = ""Variable names should be strings, typically single words representing a concept or entity""
        self.format = ""Strings with no spaces, typically using underscores or CamelCase for multi-word names""
        self.examples = ['load', 'date', 'field', 'ht_m', 'Mgperha_Load']
    def cast(self, val):
        return str(val).strip()

class variabledescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a variable in a dataset""
        self.valid_values = ""Descriptions should be strings, typically sentences or phrases explaining the variable in more detail""
        self.format = ""Strings, which may contain spaces and punctuation""
        self.examples = ['Load Number', 'Date', 'Field Number', 'Tree Height', 'Standing Biomass Delivered']
    def cast(self, val):
        return str(val).strip()

class notesorunits(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Notes or units for a variable in a dataset""
        self.valid_range = [None, None] # no specific range, as this can contain both notes (text) and units (also text, or possibly numeric)
        self.dtype = str
        self.format = ""Strings, which may contain spaces and punctuation""
        self.unit = 'Not applicable'
        self.examples = [""serial numbner 100's day of harvest, 10's consecutive load number"", 'date of collection', 'character', 'm', 'Mg/ha: Standing biomass based on material weighted at landing (does not include dropped biomass)']
    def cast(self, val):
        return str(val).strip()

MAPPING = {'variablename': variablename, 'varibaledescription': variabledescription, 'notesorunits': notesorunits}"
"class stationid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Station ID""
        self.valid_values = ""Station ID must be a string of numbers""
        self.format = ""Station ID must be a string of numbers""
        self.examples = ['3324300', '3326500', '3349000', '3331500', '3308500']
    def cast(self, val):
        return str(val)

class precipitationmeasurement(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Precipitation measurement in millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Precipitation measurement should be formatted as a floating point number (in mm units)""
        self.unit = 'In millimeters' 
        self.examples: list[str] = [10.5, 1.3, 1000.0, 0.9, 10000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class potentialtranspirationmeasurement(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Potential Transpiration measurement in millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Potential Transpiration measurement should be formatted as a floating point number (in mm units)""
        self.unit = 'In millimeters' 
        self.examples: list[str] = [10.5, 1.3, 1000.0, 0.9, 10000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class runoffmeasurement(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Runoff measurement in millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Runoff measurement should be formatted as a floating point number (in mm units)""
        self.unit = 'In millimeters' 
        self.examples: list[str] = [10.5, 1.3, 1000.0, 0.9, 10000.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class slope(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Slope of the best fit line through the log-transformed flow duration curve'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'Slope should be formatted as a floating point number'
        self.examples: list = [2.83, 2.85, 2.57, 2.87, 2.49]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class precipitationtopotentialtranspirationratio(NumericSemanticType):
    def __init__(self):
        self.description: str = 'The ratio of precipitation to potential transpiration'
        self.valid_range: list = [0, float('inf')]
        self.dtype: object = float
        self.format: str = 'The ratio should be formatted as a floating point number'
        self.examples: list = [1.09, 1.12, 1.14, 1.07, 1.46]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'编号': stationid, '站点': stationid, '19481975': precipitationmeasurement, 'd': potentialtranspirationmeasurement,
           'e': runoffmeasurement, '19762003': precipitationmeasurement, 'g': potentialtranspirationmeasurement, 'h': runoffmeasurement,
           '194819751': slope, '197620031': slope, '19482003': slope, 'l': precipitationmeasurement, 'm': potentialtranspirationmeasurement,
           'n': runoffmeasurement, 'o': precipitationtopotentialtranspirationratio}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""A year in the Gregorian calendar""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Should be a 4-digit number representing a year""
        self.examples = [1966, 1967, 1968, 1969, 1970]
    def cast(self, val):
        if isinstance(val, int) and len(str(val)) == 4:
            return val
        else:
            raise Exception('Invalid year')

class floodduration(NumericSemanticType):
    def __init__(self):
        self.description = ""Duration of a flood event""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Should be a number representing the duration of a flood event in days""
        self.examples = [23, 2, 2, 5, 44]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid flood duration')
        return num

class flooddurationindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Index of a flood duration event""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Should be an integer greater than 0""
        self.examples = [1, 5, 5, 3, 2]
    def cast(self, val):
        num = int(val)
        if num < 1:
            raise Exception('Invalid flood duration index')
        return num

class qf1cei(NumericSemanticType):
    def __init__(self):
        self.description = ""Q-Factor 1 for the Compound Event Index""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a non-negative floating point number""
        self.examples = [0.732394366, 0.0, 0.021126761, 0.0, 0.401408451]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid Q-Factor 1')
        return num

class gphdim(NumericSemanticType):
    def __init__(self):
        self.description = ""GeoPotential Height Dimension""
        self.valid_range = [-float('inf'), float('inf')]
        self.dtype = float
        self.format = ""Should be a floating point number""
        self.examples = [-0.020750215, 0.066087202, 0.076635487, 0.006451178, 0.424409443]
    def cast(self, val):
        num = float(val)
        return num

class divwvgm(NumericSemanticType):
    def __init__(self):
        self.description = ""Divergence of the Westerly Wind Anomaly""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a non-negative floating point number""
        self.examples = [8.14e-06, 8.14e-06, 8.14e-06, 8.14e-06, 8.14e-06]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0:
            raise Exception('Invalid Divergence of the Westerly Wind Anomaly')
        return num

class viwvgm(NumericSemanticType):
    def __init__(self):
        self.description = ""Vorticity of the Westerly Wind Anomaly""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Should be a non-negative floating point number""
        self.examples = [5.263938638, 5.263938638, 5.263938638, 5.263938638, 5.263938638]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        num = float(val)
        if num < 0:
            raise Exception('Invalid Vorticity of the Westerly Wind Anomaly')
        return num

MAPPING = {'year': year, 
           'fd1': floodduration, 
           'fd2': floodduration,
           'fd3': floodduration,
           'fd4': floodduration,
           'fd5': floodduration,
           'fdmediansync': floodduration,
           'fdmediansyncindex': flooddurationindex,
           'qf1cei': qf1cei,
           'qf2cei': qf1cei,
           'qf3cei': qf1cei,
           'qf4cei': qf1cei,
           'qf5cei': qf1cei,
           'gphdim': gphdim,
           'divwvgm': divwvgm,
           'viwvgm': viwvgm}"
"class specimenid(NumericSemanticType):
    def __init__(self):
        self.description = ""The specimen ID of the shark""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Specimen ID should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class sharkspecies(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Species of the shark""
        self.valid_values = ""Names of the species""
        self.format = ""Species name should be a single word in lowercase""
        self.examples = ['mako', 'porbeagle', 'white', 'dusky', 'blue']
    def cast(self, val):
        return str(val).lower()

class sharklength(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The length of the shark in centimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Length should be a positive floating point number""
        self.unit = 'In centimeters'
        self.examples = [64.7, 151.6, 210.45, 229.0, 380.9]
    def cast(self, val):
        return round(float(val), 2)

class ontogenyenum(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Ontogeny of the shark""
        self.valid_values = ""Ontogeny should be one of the following: ['YOY', 'IMM', 'MAT']""
        self.format = ""Ontogeny should be a capitalized three-letter acronym""
        self.examples = ['YOY', 'IMM', 'MAT']
    def cast(self, val):
        return str(val).upper()

class samplelocation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sampling location of the shark specimen""
        self.valid_values = ""Location should be one of the following: ['A', 'C', 'D', 'E']""
        self.format = ""Location should be a single capital letter""
        self.examples = ['A', 'C', 'D', 'E']
    def cast(self, val):
        return str(val).upper()

class samplelocationregion(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['posterior', 'anterior']
    def cast(self, val):
        return str(val).lower()

class centrummeasurement(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Measurement related to the centrum of the shark""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Measurement should be a positive floating point number""
        self.unit = 'In millimeters'
        self.examples = [2.6, 8.7, 11.545, 15.265, 28.33]
    def cast(self, val):
        return round(float(val), 2)

class strainrate(NumericSemanticType):
    def __init__(self):
        self.description = ""Strain rate of the shark specimen""
        self.valid_range = [0, 0.1]
        self.dtype = float
        self.format = ""Strain rate should be a positive floating point number between 0 and 0.1""
        self.examples = [0.1, 0.01, 0.001, 0.1, 0.01]
    def cast(self, val):
        return round(float(val), 3)

class mechanicalproperty(NumericSemanticType):
    def __init__(self):
        self.description = ""Mechanical property of the shark specimen""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Mechanical property should be a positive floating point number""
        self.examples = [0.134, 1.275, 3.012, 6.354, 129.9]
    def cast(self, val):
        return round(float(val), 3)

MAPPING = {'a': specimenid, 'species': sharkspecies, 'shark': specimenid, 'forklengthcm': sharklength,
           'ontogeny': ontogenyenum, 'samplinglocation': samplelocation, 'region': samplelocationregion,
           'centrumlengthmm': centrummeasurement, 'centrumdiametermm': centrummeasurement, 
           'strainrate': strainrate, 'stiffness4percentstrain': mechanicalproperty, 
           'toughness4percentstrain': mechanicalproperty}"
"class sampleid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Sample Identifier""
        self.valid_values = ""A unique identifier for each sample""
        self.format = ""Sample Identifier is a string of digits""
        self.examples = ['26', '27', '28', '29', '30']
    def cast(self, val):
        return str(val)

class category(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Category of Sample""
        self.valid_values = ""Category can be one of: 'Fruit', 'D. aurita', 'M. nudicaudatus', 'Predator', 'Detritivore'""
        self.format = ""Category is a string representing the type of the sample""
        self.examples = ['Fruit', 'D. aurita', 'M. nudicaudatus', 'Predator', 'Detritivore']
    def cast(self, val):
        if val in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid category')

class d13c(NumericSemanticType):
    def __init__(self):
        self.description: str = 'D13C'
        self.valid_range: list = [float('-inf'), float('inf')] 
        self.dtype: object = float 
        self.format: str = 'D13C value should be a floating point number' 
        self.examples: list = [-31.42, -26.79, -29.90, -35.77, -28.10]
    def cast(self, val):
        return float(val)

class camountug(NumericSemanticType):
    def __init__(self):
        self.description: str = 'CAmountug'
        self.valid_range: list = [float('-inf'), float('inf')] 
        self.dtype: object = float 
        self.format: str = 'CAmountug value should be a floating point number' 
        self.examples: list = [575.47, 593.82, 432.21, 465.85, 479.50]
    def cast(self, val):
        return float(val)

class d15n(NumericSemanticType):
    def __init__(self):
        self.description: str = 'D15N'
        self.valid_range: list = [float('-inf'), float('inf')] 
        self.dtype: object = float 
        self.format: str = 'D15N value should be a floating point number' 
        self.examples: list = [-0.06, 1.14, 5.77, 4.74, -1.74]
    def cast(self, val):
        return float(val)

class namountug(NumericSemanticType):
    def __init__(self):
        self.description: str = 'NAmountug'
        self.valid_range: list = [float('-inf'), float('inf')] 
        self.dtype: object = float 
        self.format: str = 'NAmountug value should be a floating point number' 
        self.examples: list = [14.19, 56.50, 47.72, 27.17, 12.11]
    def cast(self, val):
        return float(val)

class wellid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Well Identifier""
        self.valid_values = ""A unique identifier for each well""
        self.format = ""Well Identifier is a string of digits and/or characters""
        self.examples = ['A1', 'A2', 'A3', 'A4', 'A5']
    def cast(self, val):
        return str(val)

class typeofmaterial(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of Material""
        self.valid_values = ""Material type can be one of: 'marsupial nail', 'invertebrate animal', 'plant tissue', 'rodent tail', 'lizard skin'""
        self.format = ""Material type is a string representing the type of the sample""
        self.examples = ['marsupial nail', 'invertebrate animal', 'plant tissue', 'rodent tail', 'lizard skin']
    def cast(self, val):
        if val in self.valid_values:
            return str(val)
        else:
            raise Exception('Invalid material type')

class amountmg(NumericSemanticType):
    def __init__(self):
        self.description: str = 'Amountmg'
        self.valid_range: list = [0, float('inf')] 
        self.dtype: object = float 
        self.format: str = 'Amountmg value should be a floating point number' 
        self.examples: list = [1.2, 1.1, 1.1, 1.2, 1.1]
    def cast(self, val):
        return float(val)

class ourlabid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Our Lab Identifier""
        self.valid_values = ""A unique identifier for each lab sample""
        self.format = ""Lab Identifier is a string of digits""
        self.examples = ['735010', '735011', '735012', '735013', '735014']
    def cast(self, val):
        return str(val)

MAPPING = {
    'sampleid': sampleid, 
    'category': category, 
    'd13c': d13c, 
    'camountug': camountug, 
    'd15n': d15n, 
    'namountug': namountug, 
    'wellid': wellid, 
    'typeofmaterial': typeofmaterial, 
    'amountmg': amountmg, 
    'ourlabid': ourlabid
}"
"class modelname(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Name of the model used in earth and environmental sciences""
        self.valid_values = ""Model names must be one of the following: ['SR', 'LR', 'DSSAT', 'APSIM', 'Year']""
        self.format = ""Model names should be capitalized and stored as strings""
        self.examples = ['SR', 'LR', 'DSSAT', 'APSIM', 'Year']
    def cast(self, val):
        return str(val).upper()
        
class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location where the study or experiment took place""
        self.valid_values = ""Location name must be a string""
        self.format = ""Location names should be capitalized and stored as strings""
        self.examples = ['Melkassa 2', 'Melkassa 1', 'Cultivar', 'Stuka', 'STAHA']
    def cast(self, val):
        return str(val).title()

class timeperiod(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Time period related to the experiment or study""
        self.valid_values = ""Time period must be a string""
        self.format = ""Time periods should be stored as strings""
        self.examples = ['Days to flowering', '57', 'Obs', '54', '58']
    def cast(self, val):
        return str(val)
        
class weight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The weight in kg/ha of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Weight should be formatted as a floating point number (in kg/ha units)""
        self.unit = 'In kg/ha' 
        self.examples: list[str] = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        return round(num, 2)
        
class yieldweight(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The yield weight in kg/ha of an entity""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Yield weight should be formatted as a floating point number (in kg/ha units)""
        self.unit = 'In kg/ha' 
        self.examples: list[str] = [10.50, 1.30, 10000.00, 0.90, 1000000.00]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

MAPPING = {'tanzania': modelname, 'b': location, 'c': timeperiod, 'd': timeperiod, 'e': timeperiod, 'f': timeperiod, 'g': weight, 'h': weight, 'i': yieldweight, 'j': yieldweight}"
"class countycode(NumericSemanticType):
    def __init__(self):
        self.description = ""County Codes""
        self.valid_range = [310100, 317103]
        self.dtype = int
        self.format = ""County codes are numerical and are represented as integer values""
        self.examples = [310100, 310665, 310730, 310825, 310860]
    def cast(self, val):
        return int(val)

class longitude(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Longitude of a location""
        self.valid_range = [-45.15, -41.34]
        self.dtype = float
        self.format = ""The longitude of a location in decimal degrees format""
        self.unit = ""Degrees""
        self.examples = [-41.46, -41.74, -43.81, -44.75, -44.42]
    def cast(self, val):
        return float(val)

class latitude(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Latitude of a location""
        self.valid_range = [-17.88, -14.26]
        self.dtype = float
        self.format = ""The latitude of a location in decimal degrees format""
        self.unit = ""Degrees""
        self.examples = [-15.74, -15.61, -17.1, -15.32, -16.2]
    def cast(self, val):
        return float(val)

class countyname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a county""
        self.valid_values = ""County names are represented as strings""
        self.format = ""County names are capitalized and replace spaces with underscores""
        self.examples = ['AGUAS_VERMELHAS', 'BERIZAL', 'BOCAIUVA', 'BONITO_DE_MINAS', 'BRASILIA_DE_MINAS']
    def cast(self, val):
        return str(val).replace("" "", ""_"").upper()

class area(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Area in square kilometers""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Area should be a positive number""
        self.unit = ""Square Kilometers""
        self.examples = [1.213611022, 20.338, 59.984, 114.125, 371.158853]
    def cast(self, val):
        return max(0, float(val))

class percentincrease(NumericSemanticType):
    def __init__(self):
        self.description = ""Percent increase from a previous year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Percent increase should be a numerical value""
        self.examples = [-16.0, 23.4375, 3.141361257, 18.75725727, -14.09090909]
    def cast(self, val):
        return float(val)

MAPPING = {'countycode': countycode, 'longitude': longitude, 'latitude': latitude, 'countyname': countyname, 
           'totalregenerationkm²20002015': area, 'totaldeforestationkm²20002015': area, 
           'netcoverchange20002015': area, 'countyareakm²': area, 'averagedeclivity': area, 
           'percentincreasetotpop20002010': percentincrease, 'percentincreasegini20002010': percentincrease, 
           'percentincreasepib20002012': percentincrease, 'percentincreaseidhmr20002010': percentincrease, 
           'percentincreasesilviculture': percentincrease}"
"class code(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Code represents a unique identifier""
        self.valid_values = ""Codes are strings that are unique identifiers""
        self.format = ""Codes should be alphanumeric and case-sensitive""
        self.examples = ['CODE', 'FADI04', 'MINV1', 'BAIR', 'BAND']
    def cast(self, val):
        return str(val)

class weighttype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of weight used in the network""
        self.valid_values = ""This should be one of the following: 'Weighted', 'Binary', 'BINARY/WEIGHTED'""
        self.format = ""Weight type should be a string and is case-insensitive""
        self.examples = ['Weighted', 'Binary', 'BINARY/WEIGHTED']
    def cast(self, val):
        return str(val).title()

class locationtype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of location where the network is measured""
        self.valid_values = ""This should be one of the following: 'Continent', 'Island', 'ISLAND/CONTINENT'""
        self.format = ""Location type should be a string and is case-insensitive""
        self.examples = ['Continent', 'Island', 'ISLAND/CONTINENT']
    def cast(self, val):
        return str(val).title()

class zonetype(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of zone where the network is measured""
        self.valid_values = ""This should be one of the following: 'Tropical', 'Non-tropical', 'ZONE'""
        self.format = ""Zone type should be a string and is case-insensitive""
        self.examples = ['Tropical', 'Non-tropical', 'ZONE']
    def cast(self, val):
        return str(val).title()

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location of the network""
        self.valid_values = ""Locations are strings that denote a geographical location""
        self.format = ""Locations should be capitalized and may contain characters such as commas and apostrophes""
        self.examples = ['LOCATION', 'Tropical Forest,Minas Gerais, Brazil', ""Makawao Forest Reserve and Waikamoi Preserve, Mesic wet forest, Hawai'i (Plot1)"", 'New Jersey, USA', 'Bandama, Canary Islands']
    def cast(self, val):
        return str(val)

class source(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Source of the data""
        self.valid_values = ""Sources are strings that denote where the data is sourced from""
        self.format = ""Sources should be capitalized and may contain characters such as commas and apostrophes""
        self.examples = ['Rezende et al. 2007', 'literature', 'Dryad', 'Fricke et al 2017', 'unpublished']
    def cast(self, val):
        return str(val)

class notes(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Notes regarding the data""
        self.valid_values = ""Notes are strings that provide additional context or information about the data""
        self.format = ""Notes may contain any characters""
        self.examples = ['Lizard excluded', 'NOTES', 'Mammals excluded']
    def cast(self, val):
        return str(val) if pd.notna(val) else ""No notes""

MAPPING = {'thisdatasetincludesonlybirdfruitnetworksmammalsandreptileswhenpresentwereexcludedforagingrates1innetworkhratwereroundto1thiscompilationaimedtoincludestudiesencompassingallbirdsandplantspresentinthestudiedcommunity': code, 'b': weighttype, 'c': locationtype, 'd': zonetype, 'e': location, 'f': source, 'h': notes}"
"class indicator(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Indicators of vulnerability to climate change""
        self.valid_values = ""Indicators include but are not limited to: 'Road type', 'Transport of products', 'Quality of housing', 'Access and availability of water ', 'Conservation'""
        self.format = ""Each indicator is represented as a string""
        self.examples = ['Road type', 'Transport of products', 'Quality of housing', 'Access and availability of water ', 'Conservation']
    def cast(self, val):
        return str(val).strip()
        
class vulnerabilityindex(NumericSemanticType):
    def __init__(self):
        self.description = ""Vulnerability index to climate change""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Vulnerability index should be a decimal between 0 and 1 inclusive""
        self.examples = [0.5, 0.75, 0.2, 0.85, 0.33]
    def cast(self, val):
        num = float(val)
        if num >= 0 and num <= 1:
            return round(num, 2)
        else:
            raise Exception('Invalid vulnerability index')

MAPPING = {'indicador': indicator, 'nicaragua': vulnerabilityindex, 'elsalvador': vulnerabilityindex, 'guatemala': vulnerabilityindex, 'mexico': vulnerabilityindex}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_values = ""Date of the format 'mm/dd/yyyy'""
        self.format = ""Date should be a string that is of the form 'mm/dd/yyyy'""
        self.examples = ['6/15/2015', '6/30/2014', '4/18/2013', '7/24/2011', '5/29/2011']
    def cast(self, val):
        date_obj = datetime.strptime(str(val), '%m/%d/%Y')
        return date_obj.strftime('%m/%d/%Y')
        
class daysopen(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of days a lock is open""
        self.valid_range = [1, 4]
        self.dtype = int
        self.format = ""Days should be an integer""
        self.examples = [2, 2, 2, 1, 1]
    def cast(self, val):
        return int(val)
        
class volume(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The volume of water in cubic feet""
        self.valid_range = [0.0, float('inf')]
        self.dtype = float
        self.format = ""Volume should be a floating point number with one decimal place""
        self.unit = 'In cubic feet' 
        self.examples = [1164.7, 795.0, 10719.5, 2220.5, 107.0]
    def cast(self, val):
        num = float(val)
        return round(num, 1)

MAPPING = {'begindate': date, 
           'enddate': date, 
           'dayslockopen': daysopen, 
           'obrien': volume, 
           'crcw': volume, 
           'wilmette': volume, 
           'totalvolume': volume}"
"class department(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Department of a country""
        self.valid_values = ""The department should be a part of a country. In this case, it is 'Cauca' from Colombia""
        self.format = ""The name of the department should be capitalized""
        self.examples = ['Cauca']
    def cast(self, val):
        return str(val).title()

class municipality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Municipality of a department in a country""
        self.valid_values = ""The municipality should be a part of a department in a country""
        self.format = ""The name of the municipality should be capitalized""
        self.examples = ['Piendamo', 'Puerto Tejada', 'El Tambo', 'Guachene', 'Jambalo']
    def cast(self, val):
        return str(val).title()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [float(""-inf""), float(""inf"")]
        self.dtype = int
        self.format = ""Year should be formatted as a whole number""
        self.examples = [2012, 2015, 2019]
    def cast(self, val):
        return int(val)

class month(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Month""
        self.valid_values = ""The month should be one of the 12 months in a year""
        self.format = ""The first letter of the month should be capitalized""
        self.examples = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo']
    def cast(self, val):
        return str(val).title()

class temperature(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Temperature""
        self.valid_range = [float(""-inf""), float(""inf"")]
        self.dtype = float
        self.format = ""Temperature should be formatted as a floating point number""
        self.unit = ""In Celsius""
        self.examples = [11.53, 16.6, 18.72, 20.93, 24.44]
    def cast(self, val):
        return float(val)

class precipitation(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Precipitation level""
        self.valid_range = [float(0), float(""inf"")]
        self.dtype = float
        self.format = ""Precipitation level should be formatted as a floating point number""
        self.unit = ""In millimeters""
        self.examples = [2.7, 89.765, 165.245, 271.665, 826.89]
    def cast(self, val):
        return float(val)

class relativehumidity(NumericSemanticType):
    def __init__(self):
        self.description = ""Relative humidity""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Relative humidity should be formatted as a floating point number""
        self.examples = [64.02, 80.505, 84.895, 88.16, 95.69]
    def cast(self, val):
        return float(val)

class radiation(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Radiation level""
        self.valid_range = [0, float(""inf"")]
        self.dtype = float
        self.format = ""Radiation level should be formatted as a floating point number""
        self.unit = ""In MJ/m2""
        self.examples = [34491.94, 78588.335, 96329.15, 116543.265, 197420.68]
    def cast(self, val):
        return float('nan') if pd.isna(val) else float(val)

MAPPING = {'departamento': department, 'municipio': municipality, 'anio': year, 'mes': month, 'temperatura': temperature, 'precipitacion': precipitation, 'humedadrelativa': relativehumidity, 'radiacion': radiation}"
"class weatherstationid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Weather Station Identifier""
        self.valid_values = ""Weather Station Identifier must be a string of numbers""
        self.format = ""Weather Station Identifier must be stored as strings""
        self.examples = ['35244', '35188', '35152', '35125', '35216']
    def cast(self, val):
        return str(val)

class phlevel(NumericSemanticType):
    def __init__(self):
        self.description = ""pH level of rainwater""
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = ""pH level should be a floating point number between 0 and 14""
        self.examples = [4.5, 4.7, 7.8, 4.5, 6.5]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 2)

class sulfateconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of Sulfate in rainwater""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Sulfate Concentration should be a floating point number""
        self.unit = 'In milligrams per Liter (mg/L)' 
        self.examples = [6, 4.4, 50, 15.2, 10]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        return round(float(val), 2)

class nitrateconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of Nitrate in rainwater""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Nitrate Concentration should be a floating point number""
        self.unit = 'In milligrams per Liter (mg/L)' 
        self.examples = [2.6562, 7.9686, 11.5102, 10.1234, 8.7654]
    def cast(self, val):
        return round(float(val), 2)

class ammoniumconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of Ammonium in rainwater""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Ammonium Concentration should be a floating point number""
        self.unit = 'In milligrams per Liter (mg/L)' 
        self.examples = [1.932, 1.1592, 6.1824, 7.728, 5.4321]
    def cast(self, val):
        return round(float(val), 2)

MAPPING = {
    'weatherstationlingenbaccumnlwknstation015rainwaterchemistrydetailsonsamplingandanaylsisseenlö1995': weatherstationid, 
    'b': phlevel, 
    'mgl': sulfateconcentration, 
    'mgl1': nitrateconcentration,
    'mgl2': ammoniumconcentration
}"
"class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date in Excel""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Days since 1900-01-01""
        self.examples = [38718.0, 38718.04166666666, 38718.083333333336, 38718.125, 38718.16666666666]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return pd.to_datetime(val, origin='1899-12-30', unit='D')

class ozoneconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Ozone concentration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""Parts per billion (ppb)""
        self.format = ""Concentration in ppb""
        self.examples = [28.02, 25.919, 24.985, 24.985]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

class nitrogenconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Nitrogen Dioxide concentration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""Parts per billion (ppb)""
        self.format = ""Concentration in ppb""
        self.examples = [1.461, 1.948, 1.948]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val
            
class pm10concentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""PM10 concentration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""Microgram per cubic meter (ug/m3)""
        self.format = ""Concentration in ug/m3""
        self.examples = [20.0, 27.5, 33.5, 36.0, 39.0]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

class pm25concentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""PM2.5 concentration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""Microgram per cubic meter (ug/m3)""
        self.format = ""Concentration in ug/m3""
        self.examples = [11.5, 14.0, 21.0, 20.5, 23.5]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

class mda8o3concentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""MDA8 O3 concentration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.unit = ""Parts per billion (ppb)""
        self.format = ""Concentration in ppb""
        self.examples = [41.952, 47.897, 63.95, 52.946, 21.599]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return val

MAPPING = {
    'datetime': date, 
    'o3ppb': ozoneconcentration, 
    'no2ppb': nitrogenconcentration, 
    'pm10ugm3': pm10concentration, 
    'pm25ugm3': pm25concentration, 
    'datemda8': date, 
    'mda8o3ppb': mda8o3concentration}"
"class containercode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Container code""
        self.valid_values = ""Container codes are strings with a specific format, such as 'CF, CS C6'""
        self.format = ""Container codes should be uppercase and often contain commas and spaces""
        self.examples = ['CF, CS C6', 'CF, CS E3', 'CF, CS C5', 'CF, CS C1', 'CF, CS C2']
    def cast(self, val):
        return str(val).upper()

class popid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Population ID""
        self.valid_values = ""Population IDs are strings representing a specific population, such as 'T. confusum_1_Solo'""
        self.format = ""Population IDs often contain underscores and numbers""
        self.examples = ['T. confusum_1_Solo', 'T. confusum_2_Solo', 'T. confusum_3_Solo', 'T. confusum_4_Solo', 'T. confusum_5_Solo']
    def cast(self, val):
        return str(val)

class treatment(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Treatment""
        self.valid_values = ""The treatment should be one of the following: 'Solo', 'CF Priority', 'CS Priority', 'Simultaneous Arrival'""
        self.format = ""The treatment is a string representing the type of treatment applied""
        self.examples = ['Solo', 'CF Priority', 'CS Priority', 'Simultaneous Arrival']
    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid treatment')
        return str(val)

class trial(NumericSemanticType):
    def __init__(self):
        self.description = ""Trial number""
        self.valid_range = [1, 10]
        self.dtype = int
        self.format = ""Trial number should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid trial number')
        return num

class month(NumericSemanticType):
    def __init__(self):
        self.description = ""Month""
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = ""Month should be an integer between 1 and 12""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid month')
        return num

class beetlespecies(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Beetle species""
        self.valid_values = ""The beetle species should be one of the following: 'T. confusum', 'T. castaneum'""
        self.format = ""The beetle species is a string representing the type of beetle""
        self.examples = ['T. confusum', 'T. castaneum']
    def cast(self, val):
        if val not in self.examples:
            raise Exception('Invalid beetle species')
        return str(val)

class adultpopulation(NumericSemanticType):
    def __init__(self):
        self.description = ""Adult population""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Adult population should be a non-negative integer""
        self.examples = [0, 9, 10, 20, 120]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid adult population')
        return num

class substratemassg(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Substrate mass in grams""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Substrate mass should be a non-negative floating point number""
        self.unit = 'In grams'
        self.examples = [5.0, 3.997, 2.0414, 4.741, 5.1129]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid substrate mass')
        return round(num, 2)

class containermass(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Container mass""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Container mass should be a non-negative floating point number""
        self.unit = 'In grams'
        self.examples = [7.5476, 7.4588, 7.462, 7.2873, 7.7155]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid container mass')
        return round(num, 2)

class totalarenamass(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Total arena mass""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Total arena mass should be a non-negative floating point number""
        self.unit = 'In grams'
        self.examples = [12.5882, 12.4977, 12.5017, 12.3275, 12.7555]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid total arena mass')
        return round(num, 2)

class beetlemass(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Beetle mass""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Beetle mass should be a non-negative floating point number""
        self.unit = 'In grams'
        self.examples = [0.0, 0.018, 0.023, 0.043, 0.9]
    def cast(self, val):
        num = float(val)
        if num < self.valid_range[0]:
            raise Exception('Invalid beetle mass')
        return round(num, 2)

MAPPING = {
    'containercode': containercode,
    'popid': popid,
    'treatment': treatment,
    'trial': trial,
    'month': month,
    'beetlespecies': beetlespecies,
    'adultpopulation': adultpopulation,
    'substratemassg': substratemassg,
    'containermass': containermass,
    'totalarenamass': totalarenamass,
    'beetlemass': beetlemass,
}"
"class englishbirdname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""English names of birds""
        self.valid_values = ""English names should be strings that are capitalized""
        self.format = ""Each word in the bird's name should be capitalized""
        self.examples = ['Oriental Turtle Dove', 'Eurasian Magpie', 'Eurasian Tree Sparrow', 'Grey Heron', 'Vinous-throated Parrotbill']
    def cast(self, val):
        return str(val).title()

class scientificbirdname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Scientific names of birds""
        self.valid_values = ""Scientific names should be strings that are capitalized and italicized""
        self.format = ""First word (Genus) should start with a capital letter and the second word (species) should be in lowercase""
        self.examples = ['Streptopelia orientalis', 'Passer montanus', 'Ardea cinerea', 'Corvus macrorhynchos', 'Anas zonorhyncha']
    def cast(self, val):
        val = str(val).split(' ')
        return val[0].capitalize() + ' ' + val[1].lower()

class monitoringdate(NumericSemanticType):
    def __init__(self):
        self.description = ""Date of bird monitoring""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Dates should be represented as a float number (Excel's date format)""
        self.examples = [43868.0, 43914.0, 43943.0, 43978.0, 44068.0]
    def cast(self, val):
        return float(val)

class location(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location of bird monitoring""
        self.valid_values = ""Location names should be strings""
        self.format = ""Location names should start with a capital letter""
        self.examples = ['Yonggang-ri', 'Wolgot-myeon Gaegok-ri', 'Yonggang-ri', 'Haseon-Myeon', 'Siam-ri']
    def cast(self, val):
        return str(val).title()

class monitoringtime(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Time of bird monitoring""
        self.valid_values = ""Time should be a string representing a range""
        self.format = ""Time ranges should be formatted as 'start_time-end_time'""
        self.examples = ['0.39583333333333331', '9:30-12:09', '12:10-14:14', '14:50-16:29', '11:20-12:55']
    def cast(self, val):
        if isinstance(val, str) and '-' in val:
            return val
        else:
            val = float(val)
            hour = int(val*24)
            minute = int((val*24 - hour)*60)
            return f'{hour}:{minute:02d}-'

class weathercondition(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Weather condition during bird monitoring""
        self.valid_values = ""Weather condition should be either 'Sunny', 'Warm', or 'Windy'""
        self.format = ""Weather condition should be a capitalized string""
        self.examples = ['Sunny', 'Warm', 'Windy', 'Warm', 'Warm']
    def cast(self, val):
        return str(val).capitalize()

class birdspottedtimes(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of times a bird was spotted""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Number of times a bird was spotted should be a positive integer""
        self.examples = [1.0, 2.0, 3.0, 11.0, 8018.0]
    def cast(self, val):
        return float(val)

MAPPING = {'englishname': englishbirdname, 'scientificname': scientificbirdname, 'date': monitoringdate, 'location': location, 'time': monitoringtime, 'weather': weathercondition, 'spottedtimes': birdspottedtimes}"
"class fishid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Unique Identifier for Fish""
        self.valid_values = ""Fish ID must be a string with the format 'SDHGYYYYMMDDNN'""
        self.format = ""Fish ID must be a string""
        self.examples = ['SDHG2018061301', 'SDHG2018081605', 'SDHG2018062602', 'SDHG2018070901', 'SDHG2018070902']
    def cast(self, val):
        match_obj = re.match('SDHG[0-9]{8}[0-9]{2}', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid fishid')

class mass(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The mass of a sample""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Mass should be formatted as a floating point number in grams""
        self.unit = 'In grams' 
        self.examples = [11.66, 3.24, 9.05, 13.95, 16.6]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class percentage(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage Value""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage should be formatted as a floating point number""
        self.examples = [16.0, 25.6, 28.5, 29.7, 38.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of the Fish""
        self.valid_values = ""Must be either 'F' or 'M'""
        self.format = ""Single character string""
        self.examples = ['F', 'M']
    def cast(self, val):
        if val in ['F', 'M']:
            return val
        else:
            raise Exception('Invalid gender')

class length(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Length of the Fish""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Length should be formatted as a floating point number in millimeters""
        self.unit = 'In millimeters' 
        self.examples = [690.0, 790.0, 860.0, 890.0, 960.0]
    def cast(self, val):
        num = float(val)
        return round(num, 2)

class collectiondate(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date of Fish Collection""
        self.valid_values = ""Date must be in the format 'MM/DD/YYYY'""
        self.format = ""Date string""
        self.examples = ['8/29/2018', '8/16/2018', '9/3/2018', '8/10/2018', '8/31/2018']
    def cast(self, val):
        return datetime.strptime(val, '%m/%d/%Y').strftime('%m/%d/%Y')

MAPPING = {'fishid': fishid, 'wetsamplemass': mass, 'drysamplemass': mass, 'pdrymass': percentage, 'ppmdry': percentage, 'ppmwet': percentage, 'sex': gender, 'length': length, 'weight': mass, 'collectiondate': collectiondate}"
"class stationid(NumericSemanticType):
    def __init__(self):
        self.description = ""Station ID""
        self.valid_range = [1, 149]
        self.dtype = int
        self.format = ""Station ID should be a positive integer""
        self.examples = [1, 62, 82, 103, 149]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [1982, 2012]
        self.dtype = int
        self.format = ""Year should be a 4-digit number""
        self.examples = [1982, 1990, 1995, 2004, 2012]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return int(val)

class species(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Species of fish""
        self.valid_values = ""Species should either be 'Sablefish' or 'Pacific cod'""
        self.format = ""Species should be a string and the first letter of each word should be capitalized""
        self.examples = ['Sablefish', 'Pacific cod']
    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude""
        self.valid_range = [51.403, 59.747]
        self.dtype = float
        self.format = ""Latitude should be a positive floating point number""
        self.examples = [51.403, 54.365, 56.187, 58.293, 59.747]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude""
        self.valid_range = [-178.963, -132.838]
        self.dtype = float
        self.format = ""Longitude should be a negative floating point number""
        self.examples = [-178.963, -168.135, -155.063, -143.652, -132.838]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class cpue(NumericSemanticType):
    def __init__(self):
        self.description = ""Catch Per Unit Effort""
        self.valid_range = [0.019, 15.096]
        self.dtype = float
        self.format = ""CPUE should be a positive floating point number""
        self.examples = [0.019, 0.663, 2.776, 8.432, 15.096]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class sstsamp(NumericSemanticType):
    def __init__(self):
        self.description = ""Sea Surface Temperature Sample""
        self.valid_range = [1.282004836, 8.219019786]
        self.dtype = float
        self.format = ""SST Sample should be a positive floating point number""
        self.examples = [1.282004836, 3.975, 4.894, 5.667, 8.219019786]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

class sstsamp5(NumericSemanticType):
    def __init__(self):
        self.description = ""Sea Surface Temperature Sample 5""
        self.valid_range = [1.282004836, 8.219019786]
        self.dtype = float
        self.format = ""SST Sample 5 should be a positive floating point number""
        self.examples = [1.282004836, 3.975, 4.94, 5.738, 8.219019786]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        return float(val)

MAPPING = {'station': stationid, 'year': year, 'species': species, 'latitude': latitude, 'longitude': longitude, 'cpue': cpue, 'sstsamp': sstsamp, 'sstsamp5': sstsamp5}"
"class centroidid(NumericSemanticType):
    def __init__(self):
        self.description = ""The id of a centroid""
        self.valid_range = [1, float('inf')]
        self.dtype = float
        self.format = ""Centroid id should be a positive whole number""
        self.examples = [1.0, 2.0, 3.0, 4.0, 5.0]
    def cast(self, val):
        return int(val)

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical latitude""
        self.valid_range = [-90.0, 90.0]
        self.dtype = float
        self.format = ""Latitude should be a floating point number between -90.0 and 90.0""
        self.examples = [32.516372, 32.478485, 32.442435, 32.408118, 32.373841]
    def cast(self, val):
        num = float(val)
        if num < -90.0 or num > 90.0:
            raise Exception('Invalid latitude')
        return num

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographical longitude""
        self.valid_range = [-180.0, 180.0]
        self.dtype = float
        self.format = ""Longitude should be a floating point number between -180.0 and 180.0""
        self.examples = [-117.12435, -117.123985, -117.111736, -117.092234, -117.072604]
    def cast(self, val):
        num = float(val)
        if num < -180.0 or num > 180.0:
            raise Exception('Invalid longitude')
        return num

class adminname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Administrative name""
        self.valid_values = ""Admin name should be a string representing the administrative name""
        self.format = ""Name should be a string""
        self.examples = ['Baja California', 'Baja California', 'Baja California', 'Baja California', 'Baja California']
    def cast(self, val):
        return str(val)

class consvspop(NumericSemanticType):
    def __init__(self):
        self.description = ""Conservation vs population""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Conservation vs population should be a positive whole number""
        self.examples = [77664.0, 552.0, 2952.0, 5580.0, 4680.0]
    def cast(self, val):
        return int(val)

class sqkmadmin(NumericSemanticType):
    def __init__(self):
        self.description = ""Square km of administration""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Square km of administration should be a positive floating point number""
        self.examples = [73051.141, 73051.141, 73051.141, 73051.141, 73051.141]
    def cast(self, val):
        num = float(val)
        if num < 0:
            raise Exception('Invalid square km of administration')
        return num

class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Region""
        self.valid_values = ""Region should be one of 'South America', 'Central America', 'Caribbean'""
        self.format = ""Region should be a string""
        self.examples = ['Central America', 'Central America', 'Central America', 'Central America', 'Central America']
    def cast(self, val):
        val = str(val)
        if val not in ['South America', 'Central America', 'Caribbean']:
            raise Exception('Invalid region')
        return val

class continent(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Continent""
        self.valid_values = ""Continent should be one of 'South America', 'North America'""
        self.format = ""Continent should be a string""
        self.examples = ['North America', 'North America', 'North America', 'North America', 'North America']
    def cast(self, val):
        val = str(val)
        if val not in ['South America', 'North America']:
            raise Exception('Invalid continent')
        return val

MAPPING = {'centroidid': centroidid, 'lat': latitude, 'long': longitude, 'adminname': adminname, 'consvspop': consvspop, 'sqkmadmin': sqkmadmin, 'region': region, 'continent': continent}"
"class projectdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a project""
        self.valid_values = ""Any string representing a description""
        self.format = ""String format""
        self.examples = ['Core drilled in August 2013', 'Original raw ICPMS data', 'Generated at CCI University of Maine by']
    def cast(self, val):
        return str(val).strip()

class versiondescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a version""
        self.valid_values = ""Any string representing a version description""
        self.format = ""String format""
        self.examples = [' version 1 June 2016', '1387.3484149999999', '1362.199302']
    def cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

class agescaledescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of an age scale""
        self.valid_values = ""Any string representing an age scale description""
        self.format = ""String format""
        self.examples = [' Age scale subject to further refinement']
    def cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

class generaldescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""General description""
        self.valid_values = ""Any string representing a description""
        self.format = ""String format""
        self.examples = [' and', ' furthermore', ' assumes no legal liability for its use', ' or the results of such use.']
    def cast(self, val):
        return str(val).strip() if pd.notna(val) else float('nan')

MAPPING = {'collegnifettiicecoreproject': projectdescription, 'b': versiondescription, 'c': agescaledescription, 'd': generaldescription, 'e': generaldescription, 'f': generaldescription, 'g': generaldescription}"
"class insectname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of an Insect""
        self.valid_values = ""Name should be a string of the form 'Genus Name + Identifier'""
        self.format = ""The name should start with the genus name followed by an identifier""
        self.examples = ['Sirex F#3', 'Sirex M#34', 'Sirex F#9', 'Sirex F#11', 'Sirex F#12']
    def cast(self, val):
        return str(val).title()

class insectsex(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Sex of an Insect""
        self.valid_values = ""Value should be either 'm' for male or 'f' for female""
        self.format = ""The sex should be represented as 'm' or 'f'""
        self.examples = ['m', 'f']
    def cast(self, val):
        return str(val).lower()

class measurement(NumericSemanticType):
    def __init__(self):
        self.description = ""Measurement of a morphological feature of an insect""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Measurements should be represented as floating point numbers""
        self.examples = [2.34, 3.16, 2.54, 1.84, 3.63]
    def cast(self, val):
        return float(val)

class replicatime(NumericSemanticType):
    def __init__(self):
        self.description = ""Time the replica was made""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be represented as floating point numbers""
        self.examples = [43731.0, 43731.0, 43734.0, 43732.0, 43734.0]
    def cast(self, val):
        return float(val)

MAPPING = {'name': insectname, 
           'sex': insectsex, 
           'thoraxwidthintertegular': measurement, 
           'headwidth': measurement, 
           'unpairedocellusdiameter': measurement, 
           'eyereplicamade': replicatime}"
"class organicmatterconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of organic matter in the atmosphere""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Organic matter concentration should be a floating point number""
        self.unit = 'Concentration is measured in ug/m3' 
        self.examples = [3.50777, 4.21923, 3.54977, 3.96303, 4.20266]
    def cast(self, val):
        num = float(val)
        return num

class blackcarbonconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of black carbon in the atmosphere""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Black carbon concentration should be a floating point number""
        self.unit = 'Concentration is measured in ug/m3' 
        self.examples = [0.940271, 1.24368, 1.29442, 1.14253, 1.36146]
    def cast(self, val):
        num = float(val)
        return num

class time(NumericSemanticType):
    def __init__(self):
        self.description = ""Time data in Julian format""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Time should be a floating point number representing Julian dates""
        self.examples = [42720.46702546296, 42720.473958333336, 42720.4808912037, 42720.48784722222, 42720.49479166666]
    def cast(self, val):
        num = float(val)
        return num

class relativehumidity(NumericSemanticType):
    def __init__(self):
        self.description = ""Relative humidity in the atmosphere""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Relative humidity should be a floating point number between 0 and 100""
        self.examples = [32.0, 31.0, 31.0, 30.0, 30.0]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 100:
            return num
        else:
            raise Exception('Invalid relative humidity')

class windspeed(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Speed of wind""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Wind speed should be a floating point number""
        self.unit = 'Speed is measured in m/s' 
        self.examples = [1.6, 0.766667, 1.56667, 0.666667, 1.9]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return num

class soaconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of secondary organic aerosol in the atmosphere""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""SOA concentration should be a floating point number""
        self.unit = 'Concentration is measured in ug/m3' 
        self.examples = [0.0579903, 0.0650241, 0.0159715, 0.0428904]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return num

class sulfateconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration of sulfate in the atmosphere""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Sulfate concentration should be a floating point number""
        self.unit = 'Concentration is measured in ug/m3' 
        self.examples = [8.35617, 8.84116, 10.026, 11.6222, 13.2824]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        num = float(val)
        return num

MAPPING = {'orgspams': organicmatterconcentration, 
           'bcspams': blackcarbonconcentration, 
           'tseriesspams': time, 
           'oc': organicmatterconcentration,
           'rh8m': relativehumidity,
           'ws8m': windspeed,
           'aqsoa': soaconcentration,
           'mdooa': organicmatterconcentration,
           'loooa': organicmatterconcentration,
           'ffpoa': organicmatterconcentration,
           'tseriesmac': time,
           'mac370nm': organicmatterconcentration,
           'tserieshrams': time,
           'so4hrams': sulfateconcentration}"
"class studyarea(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Study Area""
        self.valid_values = ""Study area should be a string representing a specific geographical location""
        self.format = ""Names should be capitalized and spaces should be used to separate words""
        self.examples = ['Cayapas-Mataje', 'Muisne', 'Cojimies', 'Chone', 'Isla Puna North']
    def cast(self, val):
        return str(val).title()

class area(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Area in hectares""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Area should be a floating point number (in hectares) with a precision up to the decimal places""
        self.unit = 'In hectares' 
        self.examples: list = [35057.4048, 2946.9145000000003, 13009.3437, 4206.5589, 1500.7973000000002]
    def cast(self, val):
        num = float(val)
        return round(num, 4)

MAPPING = {'studyarea': studyarea, 'mangroveha': area, 'shrimpfarmha': area, 'otherha': area, 'totalha': area}"
"class date(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Date in the format YYYYMMDD""
        self.valid_values = ""Values should be in the form of YYYYMMDD""
        self.format = ""Date should be in the form of YYYYMMDD""
        self.examples = ['19651001', '19651002', '19651003', '19651004', '19651005']
    def cast(self, val):
        return datetime.strptime(str(val), ""%Y%m%d"").strftime('%Y%m%d')

class streamflow(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Streamflow measurements in cubic feet per second (cfs)""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Values should be represented as a float""
        self.unit = 'cfs'
        self.examples = [1540.0, 5570.0, 8210.0, 10500.0, 3100.0]
    def cast(self, val):
        if pd.isna(val):
            return float('nan')
        elif str(val).isdigit():
            return float(val)
        else:
            raise Exception('Invalid streamflow value')
            
MAPPING = {
    '1': date,
    '2': date,
    '3': date,
    '4': date,
    '5': date,
    '6': date,
    '7': date,
    '8': date,
    '9': date,
    '10': date,
    '11': date,
    '12': date,
    '13': date,
    '111': streamflow,
    '22': streamflow,
    '33': streamflow,
    '44': streamflow,
    '55': streamflow,
    '66': streamflow,
    '77': streamflow,
    '88': streamflow,
    '99': streamflow,
    '1010': streamflow,
    '1111': streamflow,
    '1212': streamflow,
    '1313': streamflow
}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be formatted as a four digit integer""
        self.examples = [1700, 1800, 1900, 2000, 2100]
    def cast(self, val):
        return int(val)

class sunspotnumber(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The number of sunspots""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Sunspot number should be formatted as a floating point number""
        self.unit = 'In count'
        self.examples = [8.3, 18.3, 26.7, 38.3, 60.0]
    def cast(self, val):
        return float(val)

MAPPING = {'time': year, 
           'correctedandforecastsssn': sunspotnumber, 
           'upperbayesianmodelforecastsssn': sunspotnumber, 
           'lowerbayesianmodelforescastsssn': sunspotnumber, 
           'ssnv20': sunspotnumber, 
           'bayesianmodelssn': sunspotnumber, 
           'upperbayesianmodelssn': sunspotnumber, 
           'lowerbayesianmodelssn': sunspotnumber}"
"class city(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A city is a large human settlement. It can be a large or small city depending on the country.""
        self.valid_values = ""City names should be valid names of cities in the world.""
        self.format = ""City names should be capitalized strings.""
        self.examples = ['Philadelphia', 'Pottstown', 'Havertown', 'New York', 'Los Angeles']
    def cast(self, val):
        return str(val).title()

class date(NumericSemanticType):
    def __init__(self):
        self.description = ""This represents the date when the sample was taken""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The date should be represented as a float.""
        self.examples = [43422, 43429, 43436, 43423, 43430]
    def cast(self, val):
        try:
            return float(val)
        except ValueError:
            return float('nan')

class sodiumconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The concentration of sodium in tap water""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The concentration should be a float representing the concentration in mg/L""
        self.unit = ""mg/L""
        self.examples = [50.7, 35.3, 32.9, 35.6, 37.6]
    def cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

class chlorideconcentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The concentration of chloride in tap water""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""The concentration should be a float representing the concentration in mg/L""
        self.unit = ""mg/L""
        self.examples = [95.9, 86.1, 82.2, 93.2, 98]
    def cast(self, val):
        try:
            return round(float(val), 2)
        except ValueError:
            return float('nan')

MAPPING = {
    'tables1sodiumandchlorideconcentrationsmglintapwaterforthreeresidencessampledweeklyduringwinter20182019': city,
    'b': sodiumconcentration,
    'c': chlorideconcentration,
    'd': city,
    'e': sodiumconcentration,
    'f': chlorideconcentration,
    'g': city,
    'h': sodiumconcentration,
    'i': chlorideconcentration
}"
"class region(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Geographical region in the world""
        self.valid_values = ""Region should be a string representing the geographical name of a region""
        self.format = ""Strings should be in all uppercase and not contain any special characters""
        self.examples = ['USA', 'LAM', 'REF', 'World', 'ASIA2']
    def cast(self, val):
        return str(val).upper()

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year in the Gregorian calendar""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be formatted as a 4-digit integer""
        self.examples = [2005, 2010, 2015, 2020, 2025]
    def cast(self, val):
        num = int(val)
        if num < self.valid_range[0] or num > self.valid_range[1]:
            raise Exception('Invalid year')
        return num

class value(NumericSemanticType):
    def __init__(self):
        self.description = ""Numerical value representing a certain measure""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Value should be formatted as a floating point number""
        self.examples = [303.089, 306.058697120872, 305.158931088385, 302.273687892593, 299.74811794263]
    def cast(self, val):
        num = float(val)
        return num

class scenario(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Scenarios for sustainable development implications of climate change mitigation""
        self.valid_values = ""Scenarios include 'Baseline', '2.5C', 'WB2C', '1.5C', '2C'""
        self.format = ""Strings should not contain any special characters except periods""
        self.examples = ['Baseline', '2.5C', 'WB2C', '1.5C', '2C']
    def cast(self, val):
        return str(val)

class variable(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Variable related to sustainable development implications of climate change mitigation""
        self.valid_values = ""Variable should be a string representing the name of a variable""
        self.format = ""Strings should not contain any special characters except for '|'""
        self.examples = ['Land Cover|Forest', 'Price|Agriculture|Non-Energy Crops and Livestock|Index', 'Energy Intensity', 'GDP per capita', 'Secondary industry share']
    def cast(self, val):
        return str(val)

class unit(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Units for the variable values""
        self.valid_values = ""Units include '-', 'Million', 'million ha', 'Index (2005 = 1)', 'PE GJ/GDP $'""
        self.format = ""Strings should not contain any special characters except for '(' , ')' , '=' , '$'""
        self.examples = ['-', 'Million', 'million ha', 'Index (2005 = 1)', 'PE GJ/GDP $']
    def cast(self, val):
        return str(val)

MAPPING = {'region': region, 'y': year, 'value': value, 'scenario': scenario, 'variable': variable, 'unit': unit}"
"class animalname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Names of Animals""
        self.valid_values = ""Animal names should be strings.""
        self.format = ""Names should be capitalized.""
        self.examples = ['Pig', 'White Rabbits', 'Yellow Weasel', 'Mogera wogura (White Mole)', 'Deer Tendon']
    def cast(self, val):
        return str(val).title()

class locationname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location Names""
        self.valid_values = ""Location names should be strings.""
        self.format = ""Names should be capitalized.""
        self.examples = ['内蒙古自治区宁城县西北大明城', '辽宁省辽阳市', '北京市房山区', '黑龙江省哈尔滨市阿城区南白城', '辽宁省瓦房店市西北复州']
    def cast(self, val):
        return str(val).title()

class latitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Latitude Coordinate""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number.""
        self.examples = [45.499219, 41.261167, 41.261167, 41.261167, 39.411785]
    def cast(self, val):
        num = float(val)
        if num < -90 or num > 90:
            raise Exception('Invalid latitude value')
        return num

class longitude(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude Coordinate""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number.""
        self.examples = [126.979395, 123.233288, 123.233288, 123.233288, 121.667909]
    def cast(self, val):
        num = float(val)
        if num < -180 or num > 180:
            raise Exception('Invalid longitude value')
        return num

MAPPING = {'englishanimal': animalname, 'animallocations': locationname, 'lat': latitude, 'long': longitude}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of data collection""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [1993, 1994, 1995, 1996, 1997]
    def cast(self, val):
        return int(val)

class month(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Month of the year""
        self.valid_values = ""Months should be integers between 1 and 12""
        self.format = ""Month should be an integer""
        self.examples = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    def cast(self, val):
        month = int(val)
        if month < 1 or month > 12:
            raise Exception('Invalid month')
        return month

class hgbozone(NumericSemanticType):
    def __init__(self):
        self.description = ""Measure of ozone concentration""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Ozone concentration should be a floating point number""
        self.examples = [-14.89, -6.06, 20.21, 3.45, 4.38]
    def cast(self, val):
        return float(val)

class bhlon(NumericSemanticType):
    def __init__(self):
        self.description = ""Longitude coordinate of the Bermuda High""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.examples = [-6.071618571, -9.2853, 5.35679, 3.928611429, 9.64293]
    def cast(self, val):
        return float(val)

class bhi(NumericSemanticType):
    def __init__(self):
        self.description = ""Measure of the Bermuda High Index""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Bermuda High Index should be a floating point number""
        self.examples = [0.949277143, 1.565105714, -2.307862857, -0.743702857, -0.698434286]
    def cast(self, val):
        return float(val)

class temperature(NumericSemanticType):
    def __init__(self):
        self.description = ""Temperature measurement""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Temperature should be a floating point number""
        self.examples = [-0.583714286, 0.567514286, -0.938057143, -0.185142857, -1.260771429]
    def cast(self, val):
        return float(val)

class u(NumericSemanticType):
    def __init__(self):
        self.description = ""U component of wind vector""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""U component should be a floating point number""
        self.examples = [-0.947323857, 0.373323143, -1.817251, 0.412704714, 1.055728429]
    def cast(self, val):
        return float(val)

class v(NumericSemanticType):
    def __init__(self):
        self.description = ""V component of wind vector""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""V component should be a floating point number""
        self.examples = [2.793894286, 0.588877143, -2.074324286, -1.402147143, -1.13039]
    def cast(self, val):
        return float(val)

MAPPING = {
    'year': year,
    'month': month,
    'hgbozone': hgbozone,
    'bhlon': bhlon,
    'bhi': bhi,
    'temperature': temperature,
    'u': u,
    'v': v
}"
"class labcode(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The lab code of the sample""
        self.valid_values = ""A valid lab code is a string of the form 'X-YY', where X is a capital letter and YY are digits""
        self.format = ""The lab code must be a string""
        self.examples = ['A-6', 'A-16', 'D-11', 'A-22', 'A-36']
    def cast(self, val):
        if re.match(r'[A-Z]-\d+', str(val)):
            return str(val)
        else:
            raise ValueError('Invalid lab code')

class collectiondate(NumericSemanticType):
    def __init__(self):
        self.description = ""The collection date of the sample""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""The collection date must be an integer of the form 'YYYYMMDD'""
        self.examples = [20170101, 20170102, 20170103, 20170104, 20170105]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return int(val)

class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The country where the sample was collected""
        self.valid_values = ""A valid country is a string that represents a country recognized by the International Standards Organization (ISO)""
        self.format = ""The country must be a string""
        self.examples = ['Colombia', 'Peru', 'Argentina', 'Malawi', 'Vietnam']
    def cast(self, val):
        if pycountry.countries.get(name=str(val)):
            return str(val)
        else:
            raise ValueError('Invalid country')

class latitude(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The latitude of the location where the sample was collected""
        self.valid_range = [-90, 90]
        self.dtype = float
        self.format = ""Latitude should be a floating point number""
        self.unit = ""Degrees""
        self.examples = [-27.466549, -9.96, 8.553, 9.566, 10.4775]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class longitude(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The longitude of the location where the sample was collected""
        self.valid_range = [-180, 180]
        self.dtype = float
        self.format = ""Longitude should be a floating point number""
        self.unit = ""Degrees""
        self.examples = [-80.59, -75.399, -74.536, -73.19, 106.1188889]
    def cast(self, val):
        if math.isnan(val):
            return float('nan')
        else:
            return float(val)

class samplesource(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""The source of the sample""
        self.valid_values = ""A valid sample source is either 'Field' or 'Lab'""
        self.format = ""The sample source must be a string""
        self.examples = ['Field', 'Lab']
    def cast(self, val):
        if str(val) in self.examples:
            return str(val)
        else:
            raise ValueError('Invalid sample source')

class pcrresult(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['P', 'N']
    def cast(self, val):
        if str(val) in self.valid_values:
            return str(val)
        else:
            return 'N'

MAPPING = {
    'samplelabcode': labcode,
    'collectiondateyyyymmdd': collectiondate,
    'country': country,
    'latitudedecimal': latitude,
    'longitudedecimal': longitude,
    'samplesource': samplesource,
    'visualsymptoms': pcrresult,
    'srilankancassavamosaicviruspcr': pcrresult,
    'eastafricancassavamosaicviruspcr': pcrresult,
    'africancassavamosaicviruspcr': pcrresult,
    'cassavabrownstreakviruspcr': pcrresult,
    'ugandancassavabrownstreakviruspcr': pcrresult,
}"
"class schoolname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a school""
        self.valid_values = ""School name should be a string""
        self.format = ""School names should be stored as strings""
        self.examples = ['Akron East CLC', 'Buchtel High School-Akron', 'Arcanum High School- Arcanum-Butler Local', 'Barberton City SD- New West Elementary School', 'Barberton East Elementary']
    def cast(self, val):
        return str(val)

class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year data was collected""
        self.valid_range = [1900, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be an integer""
        self.examples = [2006, 2007, 2008, 2009, 2010]
    def cast(self, val):
        return int(val)

class percent(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage in decimal form""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage should be a decimal between 0 and 1""
        self.unit = ""Percentage in decimal form (0 to 1)""
        self.examples = [0.48, 0.946, 0.484, 0.224, 0.692]
    def cast(self, val):
        num = float(val)
        if 0 <= num <= 1:
            return num
        else:
            raise ValueError(""Invalid percentage"")

class boolean(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        return int(val)

class expenditure(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Expenditure in classroom per pupil""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Expenditure should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [7182.71, 1550.969, 4627.93, 5897.565, 6809.8]
    def cast(self, val):
        return round(float(val), 2)

class salary(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Median salary of teachers""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Salary should be a floating point number""
        self.unit = ""In dollars""
        self.examples = [57032.658, 9224.823, 33949.0, 50177.0, 55869.0]
    def cast(self, val):
        return round(float(val), 2)

class students(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of students""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Students should be represented as an integer""
        self.examples = [509, 299, 127, 337, 425]
    def cast(self, val):
        return int(val)

MAPPING = {
    'school': schoolname, 
    'year': year, 
    'percentecondis': percent, 
    'attendance': percent, 
    'female': percent, 
    'black': percent, 
    'white': percent, 
    'hispanic': percent, 
    'treatment': boolean, 
    'leed': boolean, 
    'perpupilexpenditureclassroom': expenditure, 
    'medianteachersalary': salary, 
    'enrollment': students, 
    'districtenrollment': students
}"
"class statecode(NumericSemanticType):
    def __init__(self):
        self.description = ""FIPS code for a US state""
        self.valid_range = [1, 56] # FIPS codes for US states range from 1 to 56
        self.dtype = int
        self.format = ""State FIPS codes must be integers between 1 and 56, inclusive""
        self.examples = [1, 10, 20, 30, 56]
    def cast(self, val):
        return int(val)

class countycode(NumericSemanticType):
    def __init__(self):
        self.description = ""FIPS code for a US county""
        self.valid_range = [1, 840] # FIPS codes for US counties range from 1 to 840
        self.dtype = int
        self.format = ""County FIPS codes must be integers between 1 and 840, inclusive""
        self.examples = [1, 100, 200, 300, 840]
    def cast(self, val):
        return int(val)

class countyid(NumericSemanticType):
    def __init__(self):
        self.description = ""National Standard (NS) identifier for a US county""
        self.valid_range = [23901, 2054176] # NS identifiers for US counties range from 23901 to 2054176
        self.dtype = int
        self.format = ""County NS identifiers must be integers between 23901 and 2054176, inclusive""
        self.examples = [23901, 500000, 1000000, 1500000, 2054176]
    def cast(self, val):
        return int(val)

class geoid(NumericSemanticType):
    def __init__(self):
        self.description = ""Geographic identifier for a US county""
        self.valid_range = [1001, 56045] # Geographic identifiers for US counties range from 1001 to 56045
        self.dtype = int
        self.format = ""County geographic identifiers must be integers between 1001 and 56045, inclusive""
        self.examples = [1001, 15000, 30000, 45000, 56045]
    def cast(self, val):
        return int(val)

class state(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a US state""
        self.valid_values = ""State names must be strings that represent one of the 50 US states or the District of Columbia""
        self.format = ""State names should be properly capitalized and spelled correctly""
        self.examples = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California']
    def cast(self, val):
        return str(val).title()

class county(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a US county""
        self.valid_values = ""County names must be strings that represent a county in the US""
        self.format = ""County names should be properly capitalized and spelled correctly""
        self.examples = ['Autauga', 'Baldwin', 'Barbour', 'Bibb', 'Blount']
    def cast(self, val):
        return str(val).title()

class landdevelopability(NumericSemanticType):
    def __init__(self):
        self.description = ""Land developability index for a US county""
        self.valid_range = [0.0, 100.0] # Land developability indexes range from 0.0 to 100.0
        self.dtype = float
        self.format = ""Land developability indexes must be floating point numbers between 0.0 and 100.0, inclusive""
        self.examples = [0.0, 25.0, 50.0, 75.0, 100.0]
    def cast(self, val):
        num = float(val)
        if 0.0 <= num <= 100.0:
            return round(num, 2)
        else:
            raise ValueError('Invalid land developability index')

MAPPING = {
    'statefp10': statecode, 
    'countyfp10': countycode, 
    'countyns10': countyid, 
    'geoid10': geoid, 
    'state': state, 
    'county': county, 
    'landdevelopability2001': landdevelopability, 
    'landdevelopability2011': landdevelopability
}"
"class samplenumber(NumericSemanticType):
    def __init__(self):
        self.description = ""Sample number""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Sample number should be a positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class diameterinmillimeters(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Diameter in millimeters""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Diameter should be a positive floating point number""
        self.unit = ""In millimeters"" 
        self.examples = [0.8711233943863015, 0.7424770047169554, 0.3055180873925412, 0.2023619199810573, 0.240211524652934]
    def cast(self, val):
        return round(float(val), 2)

class percent(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Percentage""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Percentage should be a floating point number between 0 and 1""
        self.unit = ""percentage"" 
        self.examples = [0.5696955280685073, 0.5335691823899265, 0.2714899713466995, 0.2360321969696922, 0.3338918142651942]
    def cast(self, val):
        num = round(float(val), 2)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid percentage')

class concentration(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Concentration in C or N""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Concentration should be a positive floating point number""
        self.unit = ""In C or N"" 
        self.examples = [1.9608629147211711, 1.870200157165528, 1.2716718117396038, 1.054534633954366, 1.3533299366633098]
    def cast(self, val):
        return round(float(val), 2)

class soilcontent(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Soil content percentage""
        self.valid_range = [0, 1]
        self.dtype = float
        self.format = ""Soil content should be a floating point number between 0 and 1""
        self.unit = ""percentage"" 
        self.examples = [11.1704, 8.433708, 12.99175, 12.13233, 11.22422]
    def cast(self, val):
        num = round(float(val), 2)
        if 0 <= num <= 1:
            return num
        else:
            raise Exception('Invalid soil content percentage')

class ph(NumericSemanticType):
    def __init__(self):
        self.description = ""pH""
        self.valid_range = [0, 14]
        self.dtype = float
        self.format = ""pH should be a floating point number between 0 and 14""
        self.examples = [6.175, 6.225, 7.09, 6.94, 7.68]
    def cast(self, val):
        num = round(float(val), 2)
        if 0 <= num <= 14:
            return num
        else:
            raise Exception('Invalid pH')

MAPPING = {'samplenumber': samplenumber, 'meanweightdiameter': diameterinmillimeters, '250umpercent': percent, '63250um': percent, '63um': percent, 'totalc': concentration, 'totaln': concentration, 'caco3': percent, 'socpercent': percent, 'claycontentpercent': soilcontent, 'sandcontentpercent': soilcontent, 'siltcontentpercent': soilcontent, 'ph': ph}"
"class compoundid(CategoricalSemanticType):
    def __init__(self):
        self.description = ""An identifier for a compound""
        self.valid_values = ""Compound IDs should follow the format 'A-#'""
        self.format = ""Uppercase 'A' followed by a hyphen and an integer""
        self.examples = ['A-3', 'A-12', 'A-26', 'A-25', 'A-5']
    def cast(self, val):
        match_obj = re.match('A-\d+', val)
        if match_obj:
            return match_obj.group()
        else:
            raise Exception('Invalid compound ID')

class compoundname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""The name of a compound""
        self.valid_values = ""Compound names can be any string""
        self.format = ""Compound names should be strings with the first letter of each word capitalized""
        self.examples = ['Tetracycline', 'Cortisone Acetate', 'Colchicine', 'Nitrofurantoin', '1,2-Dichloropropene']
    def cast(self, val):
        return str(val).title()

class solubility(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""The solubility of a compound in water""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Solubility should be a floating point number""
        self.unit = ""In logS units"" 
        self.examples = [-3.6161271205, -3.2547670983, -2.1770779444, -3.9244090954, -4.6620645831]
    def cast(self, val):
        return float(val)

class group(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""A categorization of compounds""
        self.valid_values = ""Group should be one of: 'G1', 'G3', 'G5', 'G2', 'G4'""
        self.format = ""Uppercase 'G' followed by a single digit""
        self.examples = ['G1', 'G2', 'G3', 'G4', 'G5']
    def cast(self, val):
        if val in ['G1', 'G2', 'G3', 'G4', 'G5']:
            return val
        else:
            raise Exception('Invalid group')

MAPPING = {'id': compoundid, 'name': compoundname, 'solubility': solubility, 'group': group}"
"class leveloftheory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Level of theory in chemistry""
        self.valid_values = ""Level of theory should be a string representing a level of theory in chemistry""
        self.format = ""No specific format""
        self.examples = ['B3LYP', 'M06-2X', 'M06', 'PBE0', 'M06-L']
    def cast(self, val):
        return str(val)

class leveloftheoryclass(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Class of the level of theory in chemistry""
        self.valid_values = ""Class of the level of theory should be a string representing a class of the level of theory in chemistry""
        self.format = ""No specific format""
        self.examples = ['Hybrid', 'GGA', 'mGGA', 'MP2', 'Double-hybrid']
    def cast(self, val):
        return str(val)

class basisset(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Basis set in chemistry""
        self.valid_values = ""Basis set should be a string representing a basis set in chemistry""
        self.format = ""No specific format""
        self.examples = ['6-31G(d)', 'cc-pVDZ', '6-31+G(d,p)', '6-311+G(d,p)', '6-31G(2df,p)']
    def cast(self, val):
        return str(val)

class basissetfamily(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Family of the basis set in chemistry""
        self.valid_values = ""Family of the basis set should be a string representing a family of the basis set in chemistry""
        self.format = ""No specific format""
        self.examples = ['Pople', 'Dunning', 'Ahlrichs-Karlsruhe', 'Jensen', 'Sapporo']
    def cast(self, val):
        return str(val)

class basissetzetaquality(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Zeta quality of the basis set in chemistry""
        self.valid_values = ""Zeta quality of the basis set should be a string representing a zeta quality of the basis set in chemistry""
        self.format = ""No specific format""
        self.examples = ['Triple', 'Double', 'Quadruple', 'Single', 'Quintuple']
    def cast(self, val):
        return str(val)

class modelchemistryclass(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Model chemistry class in chemistry""
        self.valid_values = ""Model chemistry class should be a string representing a model chemistry class in chemistry""
        self.format = ""No specific format""
        self.examples = ['Hybrid/TZ', 'Hybrid/DZ', 'GGA/TZ', 'GGA/DZ', 'Hybrid/QZ']
    def cast(self, val):
        return str(val)

class scalingfactor(NumericSemanticType):
    def __init__(self):
        self.description = ""Scaling factor in chemistry""
        self.valid_range = [0.8487, 1.1069]
        self.dtype = float
        self.format = ""Scaling factor should be formatted as a floating point number""
        self.examples = [0.9066, 0.9946, 1.0047, 0.9726, 0.9674]
    def cast(self, val):
        return round(float(val), 4)

class scalingfactorstatistic(NumericSemanticType):
    def __init__(self):
        self.description = ""Statistic of the scaling factor in chemistry""
        self.valid_range = [0.0194, 431.0]
        self.dtype = float
        self.format = ""Statistic of the scaling factor should be formatted as a floating point number""
        self.examples = [55.71, 52.4, 50.31, 42.01, 42.91]
    def cast(self, val):
        return round(float(val), 2)

class scalingfactorstatistictype(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Type of the statistic of the scaling factor in chemistry""
        self.valid_values = ""Type of the statistic of the scaling factor should be a string representing a type of the statistic of the scaling factor in chemistry""
        self.format = ""No specific format""
        self.examples = ['RMSE', 'UNCERT', 'MAD', 'Stand. Dev.']
    def cast(self, val):
        return str(val)

class dataset(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Dataset in chemistry""
        self.valid_values = ""Dataset should be a string representing a dataset in chemistry""
        self.format = ""No specific format""
        self.examples = ['119f/30mol', '1064f/122mol', '99f/26mol', '50f/15mol', '510f/42mol']
    def cast(self, val):
        return str(val)

class optimisationmethod(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Optimisation method in chemistry""
        self.valid_values = ""Optimisation method should be a string representing an optimisation method in chemistry""
        self.format = ""No specific format""
        self.examples = ['Least-squares', 'RSFOM', 'MAD Minimisation']
    def cast(self, val):
        return str(val)

class reference(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Reference in chemistry""
        self.valid_values = ""Reference should be a string representing a reference in chemistry""
        self.format = ""No specific format""
        self.examples = ['15KeBrMa', '17KaChNe', '10AlZhZh', '07MeMoRa', '11LaBoHa']
    def cast(self, val):
        return str(val)

class yearofpublication(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of publication in chemistry""
        self.valid_range = [1981, 2021]
        self.dtype = int
        self.format = ""Year of publication should be formatted as an integer""
        self.examples = [2001, 2008, 2012, 2015, 2021]
    def cast(self, val):
        return int(val)

MAPPING = {'leveloftheory': leveloftheory, 'leveloftheoryclass': leveloftheoryclass, 'basisset': basisset,
           'basissetfamily': basissetfamily, 'basissetzetaquality': basissetzetaquality, 
           'modelchemistryclass': modelchemistryclass, 'globalscalingfactor': scalingfactor,
           'globalscalingfactorstatistic': scalingfactorstatistic, 'globalscalingfactorstatistictype': scalingfactorstatistictype,
           'lowfrequencyscalingfactor': scalingfactor, 'lowfrequencyscalingfactorstatistic': scalingfactorstatistic,
           'lowfrequencyscalingfactorstatistictype': scalingfactorstatistictype, 'highfrequencyscalingfactor': scalingfactor,
           'highfrequencyscalingfactorstatistic': scalingfactorstatistic, 'highfrequencyscalingfactorstatistictype': scalingfactorstatistictype,
           'dataset': dataset, 'optimisationmethod': optimisationmethod, 'reference': reference, 
           'yearofpublication': yearofpublication}"
"class date(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Date in days since 1900""
        self.valid_range: list = [0, float('inf')] 
        self.dtype: object = float 
        self.format: str = ""Should be a float representing days since 1900""
        self.examples: list = [42743.0, 42743.0, 42743.0, 42748.0, 42748.0]
    def cast(self, val): 
        return float(val)

class identifier(NumericSemanticType):
    def __init__(self):
        self.description: str = ""Unique identifier""
        self.valid_range: list = [1, float('inf')] 
        self.dtype: object = int 
        self.format: str = ""Should be an integer""
        self.examples: list = [4.0, 27.0, 30.0, 1.0, 21.0]
    def cast(self, val): 
        return int(val)
        
class volumeml(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description: str = ""Volume in milliliters""
        self.valid_range: list = [0, float('inf')] 
        self.dtype: object = float 
        self.unit: str = ""milliliters"" 
        self.format: str = ""Should be a float representing volume in milliliters""
        self.examples: list = [463.0, 487.0, 550.0, 457.0, 550.0]
    def cast(self, val): 
        return float(val)

class densityl(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description: str = ""Density in liters""
        self.valid_range: list = [-float('inf'), float('inf')] 
        self.dtype: object = float 
        self.unit: str = ""liters"" 
        self.format: str = ""Should be a float representing density in liters""
        self.examples: list = [12.958963282937365, 14.373716632443532, 12.727272727272728, 6.564551422319475, 10.909090909090908]
    def cast(self, val): 
        return float(val)

class country(CategoricalEnumSemanticType):
    def __init__(self):
        self.description: str = ""Country Name""
        self.valid_values: str = ""Should be a string representing a country name in english""
        self.format: str = ""Should be a capitalized string""
        self.examples: list = ['U.S.A', 'Uganda', 'Ecuador', 'Indonesia', 'India']
    def cast(self, val): 
        return str(val).title()

MAPPING = {
    'date': date,
    'id': identifier,
    'volml': volumeml,
    'densityl': densityl,
    'country': country
}"
"class patientid(NumericSemanticType):
    def __init__(self):
        self.description = ""The unique identifier of a patient""
        self.valid_range = [1, float('inf')]
        self.dtype = int
        self.format = ""Patient ID should be a unique positive integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""The age of a person""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Age should be a non-negative integer""
        self.examples = [23, 28, 58, 40, 62]
    def cast(self, val):
        return int(val)

class gender(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Gender of a person""
        self.valid_values = ""Gender can be 1 or 2""
        self.format = ""Gender should be an integer (1 or 2)""
        self.examples = [1, 2]
    def cast(self, val):
        if val == 1 or val == 2:
            return int(val)
        else:
            raise Exception('Invalid gender')

class severitylevel(NumericSemanticType):
    def __init__(self):
        self.description = ""The severity level of a medical condition""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Severity level should be a non-negative integer""
        self.examples = [2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class nodulelocation(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Location of a nodule""
        self.valid_values = ""Nodule location can be 1 or 2""
        self.format = ""Nodule location should be an integer (1 or 2)""
        self.examples = [1, 2]
    def cast(self, val):
        if val == 1 or val == 2:
            return int(val)
        else:
            raise Exception('Invalid nodule location')

class booleanresult(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if val == 0 or val == 1:
            return int(val)
        else:
            raise Exception('Invalid boolean result')

MAPPING = {
    'hastano': patientid, 
    'yaş': age, 
    'cins': gender, 
    'tiradsevre': severitylevel, 
    'nodülçapmm': NumericSemanticType, 
    'nodülyeri': nodulelocation, 
    'iiabsonucu': NumericSemanticType, 
    'cnbsonucu': NumericSemanticType, 
    'hmba': booleanresult, 
    'tftdurum': booleanresult, 
    'antitpodüzey': NumericSemanticType, 
    'antitgdüzey': NumericSemanticType, 
    'antitpodurum': booleanresult, 
    'antitgdurum': booleanresult, 
    'genelantrikordurumu': NumericSemanticType
}"
"class locationdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Location or Project Description""
        self.valid_values = ""This should be a string describing a location or project""
        self.format = ""Should be a string, with the first letter of each word capitalized""
        self.examples = ['Core Drilled In August 2013', 'N 45.928933 E 7.876267', 'Original Raw Icpms Data', 'Generated At Cci University Of Maine By', 'Nicole Spaulding']
    def cast(self, val):
        return str(val).title()

class miscellaneousdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Miscellaneous Information""
        self.valid_values = ""This should be a string containing miscellaneous information""
        self.format = ""Should be a string, with the first letter of each word capitalized""
        self.examples = ['Version 1 June 2016', 'The User Accepts The Following Terms And Conditions', '68.016720000000007', 'This Must Be Stated Along With The Description Of The Modifications', 'Expressed Or Implied']
    def cast(self, val):
        return str(val).title()

class agedescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Age Description""
        self.valid_values = ""This should be a string describing age or time period""
        self.format = ""Should be a string, with the first letter of each word capitalized""
        self.examples = ['Age Scale Subject To Further Refinement', '767.99434269999995', '727.01064129999997', 'Age', '807.02829550000001']
    def cast(self, val):
        return str(val).title()

class booleanand(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['And', 'NaN']
    def cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'And'

class booleanfurthermore(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Furthermore', 'NaN']
    def cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'Furthermore'

class booleanassumes(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Assumes No Legal Liability For Its Use', 'NaN']
    def cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'Assumes No Legal Liability For Its Use'

class booleanresults(BooleanSemanticType):
    def __init__(self):
        self.valid_values = ['Or The Results Of Such Use', 'NaN']
    def cast(self, val):
        if pd.isna(val):
            return 'NaN'
        else:
            return 'Or The Results Of Such Use'

MAPPING = {
    'collegnifettiicecoreproject': locationdescription,
    'b': miscellaneousdescription,
    'c': agedescription,
    'd': booleanand,
    'e': booleanfurthermore,
    'f': booleanassumes,
    'g': booleanresults
}"
"class projectdescription(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Description of a project""
        self.valid_values = ""Project description should be a string""
        self.format = ""First letter of each sentence should be capitalized and the description should end with a period""
        self.examples = ['Core drilled in August 2013.', 'Original raw ICPMS data.', 'Generated at CCI University of Maine by Nicole Spaulding.']
    def cast(self, val):
        val = str(val)
        val = val.strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()

class projectversion(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Version of a project""
        self.valid_values = ""Project version should be a string""
        self.format = ""Version should start with 'version' and followed by version number""
        self.examples = ['version 1 June 2016', 'version 1.0', 'version 2.0']
    def cast(self, val):
        val = str(val)
        if 'version' not in val.lower():
            val = 'version ' + val
        return val.title()

class agerefineinformation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Information regarding age refinement of a project""
        self.valid_values = ""Information should be a string""
        self.format = ""First letter of each sentence should be capitalized and the information should end with a period""
        self.examples = ['Age scale subject to further refinement.']
    def cast(self, val):
        val = str(val)
        val = val.strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()

class generalinformation(CategoricalSemanticType):
    def __init__(self):
        self.description = ""General information of a project""
        self.valid_values = ""Information should be a string""
        self.format = ""First letter of each sentence should be capitalized and the information should end with a period""
        self.examples = ['And', 'Furthermore', 'Assumes no legal liability for its use', 'Or the results of such use.']
    def cast(self, val):
        val = str(val)
        val = val.strip()
        if val and val[-1] != '.':
            val += '.'
        return val.title()

MAPPING = {'collegnifettiicecoreproject': projectdescription, 'b': projectversion, 'c': agerefineinformation, 'd': generalinformation, 'e': generalinformation, 'f': generalinformation, 'g': generalinformation}"
"class parameter(NumericSemanticType):
    def __init__(self):
        self.description = ""Parameter of a chemical reaction""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Parameter should be a floating point number""
        self.examples = [1.25, 2.56, 3.87, 5.18, 6.49]
    def cast(self, val):
        return float(val)

class dimensionvector(NumericSemanticType):
    def __init__(self):
        self.description = ""Dimension Vector in a chemical space""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Dimension Vector should be a floating point number""
        self.examples = [58.25, 78.25, 98.25, 118.25, 138.25]
    def cast(self, val):
        return float(val)

class classlabel(NumericSemanticType):
    def __init__(self):
        self.description = ""Class label of a chemical reaction""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = float
        self.format = ""Class label should be a floating point number""
        self.examples = [-0.52, -0.72, -0.92, -1.12, -1.32]
    def cast(self, val):
        return float(val)

MAPPING = {'parameter': parameter, 'dimensionvector': dimensionvector, 'class': classlabel}"
"class epochtime(NumericSemanticType):
    def __init__(self):
        self.description = ""Epoch time, the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Epoch time should be formatted as a floating point number.""
        self.examples = [1088.1195, 1100.4414, 1105.0809, 1148.2418, 1185.1603]
    def cast(self, val):
        num = float(val)
        return num

class duration(NumericSemanticType):
    def __init__(self):
        self.description = ""Duration is the length of time during which an event or condition exists or continues.""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Duration should be formatted as a floating point number.""
        self.examples = [2.0807, 0.052, 0.3178, 0.0655, 0.1939]
    def cast(self, val):
        num = float(val)
        return num

MAPPING = {'start': epochtime, 'end': epochtime, 'duration': duration}"
"class objectname(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of an astronomical object""
        self.valid_values = ""Names should be strings that follow specific astronomical naming conventions""
        self.format = ""Names are typically alphanumeric codes""
        self.examples = ['1RXSJ044154.5-082639', '1RXSJ045205.0+493248', '2E1739.1-1210', '2MASSJ07594181-3843560', '2MASSJ17485512-3254521']
    def cast(self, val):
        return str(val)

class fluxdensity(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Flux density, a measure of how much flux is received per unit area""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Flux density should be a non-negative floating point number""
        self.unit = ""In Jansky (Jy)""
        self.examples = [0.175836701, 0.354012267, 0.560790044, 0.04609023, 0.0]
    def cast(self, val):
        num = float(val)
        return max(num, 0)

class fluxdensityerr(NumericSemanticTypeWithUnits):
    def __init__(self):
        self.description = ""Flux density error, a measure of the uncertainty in the flux density""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Flux density error should be a non-negative floating point number""
        self.unit = ""In Jansky (Jy)""
        self.examples = [0.012375183, 0.021067984, 0.028472565, 0.007046019, 0.140112738]
    def cast(self, val):
        num = float(val)
        return max(num, 0)

class qualityflag(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Quality flag for the flux measurement""
        self.valid_values = ""Quality flags are typically single uppercase letters or short uppercase strings""
        self.format = ""Quality flags should be stored as strings""
        self.examples = ['A', 'U', 'UC', 'Ad', 'AD']
    def cast(self, val):
        return str(val).upper()

MAPPING = {
    'name': objectname,
    'pacs70': fluxdensity,
    'pacs70err': fluxdensityerr,
    'pacs160': fluxdensity,
    'pacs160err': fluxdensityerr,
    'psw': fluxdensity,
    'pswerr': fluxdensityerr,
    'pswflag': qualityflag,
    'pmw': fluxdensity,
    'pmwerr': fluxdensityerr,
    'pmwflag': qualityflag,
    'plw': fluxdensity,
    'plwerr': fluxdensityerr,
    'plwflag': qualityflag,
}"
"class date(NumericSemanticType):
    def __init__(self):
        self.description = ""Date""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Date should be formatted as an integer of the form 'YYYYMMDD'""
        self.examples = [20200501, 20200430, 20200331, 20200229, 20200101]
    def cast(self, val):
        try:
            datetime.strptime(str(int(val)), '%Y%m%d')
            return int(val)
        except ValueError:
            raise Exception('Invalid date')
        
class count(NumericSemanticType):
    def __init__(self):
        self.description = ""Count of an Entity""
        self.valid_range = [0, float('inf')]
        self.dtype = int
        self.format = ""Count should be formatted as a non-negative integer""
        self.examples = [0, 1, 2, 3, 4]
    def cast(self, val):
        num = int(val)
        if num < 0:
            raise Exception('Invalid count')
        return num
        
MAPPING = {'date': date, 'foes': count, 'metorcount': count}"
"class cricketername(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Name of a Cricketer""
        self.valid_values = ""Name should be a string that is of the form 'lastname, firstname initials'""
        self.format = ""Only the first letter of the first and last name should be capitalized""
        self.examples = ['Aaron, Varun R', 'Agarkar, Ajit B', 'Ambrose, Curtly E L', 'Benjamin, Kenneth C G', 'Benjamin, Winston K M']
    def cast(self, val):
        return str(val).title()

class cricketrole(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Type of role a Cricketer plays""
        self.valid_values = ""Role should be one of 'FM', 'Fast', 'MF'""
        self.format = ""Role should be capitalized""
        self.examples = ['Fast', 'MF', 'FM']
    def cast(self, val):
        return str(val).capitalize()

class cricketcountry(CategoricalSemanticType):
    def __init__(self):
        self.description = ""Country the Cricketer represents""
        self.valid_values = ""Country should be a valid string that is part of the ISO 3166 standard""
        self.format = ""Country should be capitalized""
        self.examples = ['England', 'New Zealand', 'West Indies', 'Pakistan', 'Australia']
    def cast(self, val):
        val = str(val)
        if pycountry.countries.get(name=val) is not None:
            return val
        else:
            raise Exception('Invalid Country')

class cricketstats(NumericSemanticType):
    def __init__(self):
        self.description = ""Cricket player stats""
        self.valid_range = [0, float('inf')]
        self.dtype = float
        self.format = ""Stats should be formatted as a floating point number""
        self.examples = [10.5, 1.3, 10000.0, 0.9, 1000000.0]
    def cast(self, val):
        return float(val)

MAPPING = {'name': cricketername, 
           'type': cricketrole, 
           'country': cricketcountry, 
           'matches': cricketstats, 
           'wickets': cricketstats, 
           'overs': cricketstats, 
           'average': cricketstats, 
           'economy': cricketstats, 
           'strikerate': cricketstats, 
           'dbr': cricketstats, 
           'runsconceded': cricketstats, 
           'wkover': cricketstats, 
           'ovmtch': cricketstats, 
           'wkmatch': cricketstats, 
           'balls': cricketstats, 
           'top': cricketstats, 
           'middle': cricketstats, 
           'lower': cricketstats, 
           'topwkmatch': cricketstats, 
           'middlewkmatch': cricketstats, 
           'lowerwkmatch': cricketstats}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year of an event""
        self.valid_range = [1970, 2005]
        self.dtype = int
        self.format = ""Year should be formatted as an integer""
        self.examples: list[int] = [1970, 1971, 1972, 1973, 1974]
    def cast(self, val):
        return int(val)

class sample_number(NumericSemanticType):
    def __init__(self):
        self.description = ""Unique identifier for a sample""
        self.valid_range = [1, 720]
        self.dtype = int
        self.format = ""Sample number should be formatted as an integer""
        self.examples: list[int] = [1, 2, 3, 4, 5]
    def cast(self, val):
        return int(val)

class age(NumericSemanticType):
    def __init__(self):
        self.description = ""Age in years""
        self.valid_range = [-6, 43]
        self.dtype = int
        self.format = ""Age should be formatted as an integer""
        self.examples: list[int] = [0, 1, 2, 3, 4]
    def cast(self, val):
        return int(val)

class salience(BooleanSemanticType):
    def __init__(self):
        self.valid_values = [0, 1]
    def cast(self, val):
        if pd.isna(val): 
            return float('nan')
        return int(val)

class decision_year(CategoricalEnumSemanticType):
    def __init__(self):
        self.description = ""Decade of decision""
        self.valid_values = ""Decades must be one of the following: 70s, 80s, 90s, 00s, 10s""
        self.format = ""Decade should be represented as a two digit number followed by an 's'""
        self.examples = ['70s', '80s', '90s', '00s', '10s']
    def cast(self, val):
        if pd.isna(val): 
            return float('nan')
        return str(int(val))+'s'

MAPPING = {'year': year, 'samplenum': sample_number, 'age': age, 'salience': salience, 'dec70': decision_year, 'dec80': decision_year, 'dec90': decision_year, 'dec00': decision_year, 'dec10': decision_year}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""Year AD""
        self.valid_range = [0, datetime.now().year] 
        self.dtype = int
        self.format = ""Year should be formatted as a four-digit integer""
        self.examples = [2000, 2010, 2020, 2030, 2040]
    def cast(self, val):
        year = int(val)
        if year >= 0 and year <= datetime.now().year:
            return year
        else:
            raise Exception('Invalid year')

class circuit(NumericSemanticType):
    def __init__(self):
        self.description = ""Circuit Court Number""
        self.valid_range = [1, 12]
        self.dtype = int
        self.format = ""Circuit number should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        num = int(val)
        if num >= 1 and num <= 12:
            return num
        else:
            raise Exception('Invalid circuit number')

class numvacjud(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of vacant judges""
        self.valid_range = [0, float('inf')] 
        self.dtype = float
        self.format = ""Number of vacant judges should be a float""
        self.examples = [10.3, 21.0, 104.9, 0.0, 0.0]
    def cast(self, val):
        return float(val)

class termmeritsactjudgewritten(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of terms written by judge""
        self.valid_range = [0, float('inf')] 
        self.dtype = float
        self.format = ""Number of terms written by judge should be a float""
        self.examples = [12.0, 26.0, 46.0, 62.0, 264.0]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class numjudgeships(NumericSemanticType):
    def __init__(self):
        self.description = ""Number of judgeships""
        self.valid_range = [0, float('inf')] 
        self.dtype = float
        self.format = ""Number of judgeships should be a float""
        self.examples = [4.0, 11.0, 12.0, 15.0, 29.0]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class pctreverse(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of reversals""
        self.valid_range = [0, 100] 
        self.dtype = float
        self.format = ""Percentage of reversals should be a float""
        self.examples = [1.1, 6.8, 9.0, 10.925, 21.9]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class percentnontraditionalcirc(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of nontraditional circuits""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage of nontraditional circuits should be a float""
        self.examples = [0.0, 11.765, 27.273, 37.637, 67.811386]
    def cast(self, val):
        return float(val)

class jcscircsd(NumericSemanticType):
    def __init__(self):
        self.description = ""Standard deviation of JCS circuits""
        self.valid_range = [0, float('inf')] 
        self.dtype = float
        self.format = ""Standard deviation of JCS circuits should be a float""
        self.examples = [0.14300467, 0.2458326, 0.29835716, 0.341, 0.375]
    def cast(self, val):
        return float(val)

class lndissentrateciryr19902016(NumericSemanticType):
    def __init__(self):
        self.description = ""Logarithmic dissent rate from 1990 to 2016""
        self.valid_range = [float('-inf'), 0] 
        self.dtype = float
        self.format = ""Logarithmic dissent rate should be a float""
        self.examples = [-5.247024, -4.253, -3.782, -3.408, -2.7610428]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

class percentnontradsenorciryr(NumericSemanticType):
    def __init__(self):
        self.description = ""Percentage of nontraditional senior circuit years""
        self.valid_range = [0, 100]
        self.dtype = float
        self.format = ""Percentage of nontraditional senior circuit years should be a float""
        self.examples = [0.0, 10.022, 20.0, 50.0, 50.0]
    def cast(self, val):
        return float(val) if pd.notna(val) else float('nan')

MAPPING = {'year': year, 'circuit': circuit, 'numvacjud': numvacjud, 'termmeritsactjudgewritten': termmeritsactjudgewritten,
           'numjudgeships': numjudgeships, 'pctreverse': pctreverse, 'percentnontraditionalcirc': percentnontraditionalcirc,
           'jcscircsd': jcscircsd, 'lndissentrateciryr19902016': lndissentrateciryr19902016, 'percentnontradsenorciryr': percentnontradsenorciryr}"
"class year(NumericSemanticType):
    def __init__(self):
        self.description = ""The year an event occurred""
        self.valid_range = [0, datetime.now().year]
        self.dtype = int
        self.format = ""Year should be a four-digit integer""
        self.examples = [2008, 2012, 2014, 2017, 0]
    def cast(self, val):
        try:
            val = int(val)
            assert 0 <= val <= datetime.now().year
            return val
        except Exception:
            raise ValueError('Invalid year')
            
class category(NumericSemanticType):
    def __init__(self):
        self.description = ""A categorical variable encoded as a number""
        self.valid_range = [float('-inf'), float('inf')]
        self.dtype = int
        self.format = ""Category should be an integer""
        self.examples = [1, 2, 3, 4, 5]
    def cast(self, val):
        try:
            val = int(val)
            return val
        except Exception:
            raise ValueError('Invalid category')
            
class binarycategory(NumericSemanticType):
    def __init__(self):
        self.description = ""A binary category variable encoded as a number""
        self.valid_range = [0, 1]
        self.dtype = int
        self.format = ""Binary category should be an integer (either 0 or 1)""
        self.examples = [0, 1, 0, 1, 0]
    def cast(self, val):
        try:
            val = int(val)
            assert val in [0, 1]
            return val
        except Exception:
            raise ValueError('Invalid binary category')

class multilevelcategory(CategoricalSemanticType):
    def __init__(self):
        self.description = ""A categorical variable with multiple levels, represented as strings""
        self.valid_values = ""Strings representing different categories""
        self.format = ""Category should be a string""
        self.examples = ['5', '1b', '1a', '3', '2']
    def cast(self, val):
        return str(val)
        
MAPPING = {
    'yeardecided': year,
    'typeofplaintiff': category,
    'typeofdefendant': category,
    'lawchallenged': category,
    'proclimateanticlimatecase': binarycategory,
    'losewinother': category,
    'climatesciencerole': binarycategory,
    'nonclimatesciencerole': binarycategory,
    'primarytopic': multilevelcategory,
    'subsampleanalysis': multilevelcategory
}"
